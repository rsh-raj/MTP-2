Hash,Date,Author,Message,IsMerge
8f4c0169a0f82423fedb77fb7c28503e52a93419,2025-03-21 02:13:21,Jonas Jenwald,"Merge pull request #19692 from Snuffleupagus/writer-improve

Improve the implementation in `src/core/writer.js` a little bit",True
50eb97afb32b7e4f2b7cdce048aaaed1c1aca69f,2025-03-21 01:43:34,Jonas Jenwald,"Improve the implementation in `src/core/writer.js` a little bit

 - Let the `writeString` helper function return the new offset, to avoid having to recompute that in multiple spots.

 - In the `computeMD5` helper function we can create the `md5Buffer` via Array-destructuring, rather than using a manual loop.",False
a229914b4662f14cd64b710797b3e6db6fadba82,2025-03-20 21:00:57,Jonas Jenwald,"Merge pull request #19693 from Snuffleupagus/writer-fix-md5

Fix the MD5 computation in the `src/core/writer.js` file",True
e6c869c127d5d39f9ab9f156247b5606e4dccb26,2025-03-20 19:11:25,Jonas Jenwald,"Fix the MD5 computation in the `src/core/writer.js` file

Currently the MD5 computation doesn't actually work (at all?), since we're invoking the `calculateMD5` function without providing all of the necessary parameters and the PDF-data thus isn't taken into account.

Fixing this caused unit-tests to fail, which isn't that surprising since the current date/time is used in the MD5 computation, and we thus utilize Jasmine to work-around that.",False
cd4a30341f048d722e06d078a94911cc19bfc3a6,2025-03-19 19:45:25,calixteman,"Merge pull request #19685 from calixteman/issue19424

[Editor] Take into account the parent rotation when switch to edit mode (issue #19424)",True
276c8f35182af2829c5e07278bf2b4120613b351,2025-03-19 18:56:55,Calixte Denizet,[Editor] Take into account the parent rotation when switch to edit mode (issue #19424),False
1a39e2dac1a5912769659a23e60b8ec0a58a016b,2025-03-19 18:13:54,Jonas Jenwald,"Merge pull request #19684 from Snuffleupagus/issue-19683

Improve `addSignatureDescription`/`editSignatureDescription` handling (issue 19683)",True
79058c92e3644612355c018f448f5bacbe2e082b,2025-03-19 16:08:56,Jonas Jenwald,"Improve `addSignatureDescription`/`editSignatureDescription` handling (issue 19683)

 - Point the `addSignatureDescription` respectively `editSignatureDescription` labels to their actual `input`-elements (this way clicking the label will actually focus the input).

 - Add the event listener to the `addSignatureDescription`-input, rather than its `span`-element (this is consistent with the `editSignatureDescription` case).

 - Correctly check if the `addSignatureDescription`-input is empty, since we're accidentally comparing with its `span`-element.

 - Remove unbalanced, and likely accidentally added, `</span>` tags.",False
00e3a4d87a22d92938687f7535bc35961a2a40e3,2025-03-18 02:10:16,Jonas Jenwald,"Merge pull request #19674 from Snuffleupagus/core-document-more-async

Introduce more `async` code in the `src/core/document.js` file",True
6243afa85e4639da6435c075913512f6bfbdd291,2025-03-18 00:52:00,Jonas Jenwald,"Merge pull request #19675 from Snuffleupagus/IccColorSpace-fetchSync

Introduce a `fetchSync` helper function for the `IccColorSpace` classes",True
2f1497c9c4fbae43291d17540d7b52254fd8f712,2025-03-18 00:47:00,Jonas Jenwald,"Merge pull request #19677 from Snuffleupagus/issue-19676

For JPEG images with CMYK-data, ensure that the alpha-component is set correctly when WebAssembly is disabled (issue 19676)",True
afb14bdc0b4d9b4534098889a8ef99d7c2c5691c,2025-03-17 20:45:32,Jonas Jenwald,"For JPEG images with CMYK-data, ensure that the alpha-component is set correctly when WebAssembly is disabled (issue 19676)",False
1fb6edc71344ade9fdb21d1030a6e4fec3d9e2ee,2025-03-17 19:28:53,Jonas Jenwald,"Introduce a `fetchSync` helper function for the `IccColorSpace` classes

This reduces code duplication a tiny bit, which shouldn't hurt.",False
e37236e9af81a2436b68527bef69959726862064,2025-03-17 18:58:12,Jonas Jenwald,"Merge pull request #19673 from Snuffleupagus/rm-ftl-comment

Remove documentation for unused l10n variable (PR 18492 follow-up)",True
d00482380af454d544324d927ec1af9e17ccb4a8,2025-03-17 17:50:51,Jonas Jenwald,Introduce more `async` code in the `src/core/document.js` file,False
e5e0856f991823071e6945fc922cd715e0ae308e,2025-03-17 16:50:30,Jonas Jenwald,"Remove documentation for unused l10n variable (PR 18492 follow-up)

Looking at PR 18492 it doesn't seem that the `$percent` variable, for the `pdfjs-editor-new-alt-text-ai-model-downloading-progress` l10n-string, was ever used.",False
92d7b6d09f13172bba0bffb452d52be89b7ed365,2025-03-17 02:05:25,Tim van der Meij,"Merge pull request #19671 from timvandermeij/integration-tests-signature-intermittent

Fix the ""Signature Editor Basic operations must check copy and paste"" integration test",True
2a4f970e002fcaba12953f84eedc47071fffbb32,2025-03-17 01:05:36,Tim van der Meij,"Fix the ""Signature Editor Basic operations must check copy and paste"" integration test

This integration test fails intermittently because of concurrent
clipboard access due to running the test in parallel in both browsers.
It can be reproduced by introducing `await waitForTimeout(1000)` between
the copy and paste operations.

This commit fixes the issue by running the test sequentially instead,
mirroring the change from commit 0e94f2bd.",False
e7385669007310f317dfb9cb794cb343f19450a2,2025-03-16 23:15:21,Tim van der Meij,"Merge pull request #19669 from timvandermeij/icc-colorspace-404

Don't get ICC color space files if required API options are missing",True
f44cba86d5a67d6a867ded95b341cce01b301de6,2025-03-16 20:59:42,Tim van der Meij,"Don't get ICC color space files if required API options are missing

This commit improves validation of the API options for the ICC color
space logic. If `useWasm` is `true` but the corresponding `wasmUrl`
or `iccUrl` API options are not provided we can avoid requesting
files with `null` URLs which always results in a 404 response.",False
4c5ad9258448d017ac81cd504449d81465a60022,2025-03-16 18:21:35,Jonas Jenwald,"Merge pull request #19667 from Snuffleupagus/version-5.1

Bump library version to `5.1`",True
e3e23962305de6d953df03ae7fe223ed88015fd7,2025-03-16 18:17:18,Jonas Jenwald,Bump library version to `5.1`,False
d86045eacbd6f8cc9cbe8fd616800ca3edcbd0dc,2025-03-16 17:02:20,Tim van der Meij,"Merge pull request #19632 from Snuffleupagus/issue-15085

[api-minor] Attempt to support fetching the raw data of the PDF document from the `PDFDocumentLoadingTask`-instance (issue 15085)",True
f8c2a949b73cb4b9a08bc4f433d2073f29838b62,2025-03-16 16:01:08,Tim van der Meij,"Merge pull request #19665 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
9e8d4e4d4686ce36c783f22b655ec9f0bfc9b8f4,2025-03-16 14:39:44,Jonas Jenwald,"[api-minor] Attempt to support fetching the raw data of the PDF document from the `PDFDocumentLoadingTask`-instance (issue 15085)

The new API-functionality will allow a PDF document to be downloaded in the viewer e.g. while the PasswordPrompt is open, or in cases when document initialization failed.
Normally the raw data of the PDF document would be accessed via the `PDFDocumentProxy.prototype.getData` method, however in these cases the `PDFDocumentProxy`-instance isn't available.",False
33af8b5c2c805822cb24578c6d9e0ed65bfdda98,2025-03-16 01:12:08,Tim van der Meij,Update translations to the most recent versions,False
85818f404fb2c9dd3ee206492bbba3a35e4fe178,2025-03-16 01:12:08,Tim van der Meij,"Upgrade `babel-loader` to version 10.0.0

This is a major version bump, but the changelog at
https://github.com/babel/babel-loader/releases/tag/v10.0.0
doesn't indicate any breaking changes that should impact us.",False
cfe6cc6a7e477e62b68cfa7c5817aa524513ee57,2025-03-16 01:12:08,Tim van der Meij,"Upgrade `@metalsmith/layouts` to version 3.0.0

This is a major version bump, and the changelog at
https://github.com/metalsmith/layouts/releases/tag/v3.0.0
indicates a breaking change that impacts us, namely that we need to
explicitly define the pattern and transformer that we wish to use.",False
ef7e0ddae4292127e3bde39578a563a9e7cb7ae8,2025-03-16 01:12:08,Tim van der Meij,Update dependencies to the most recent versions,False
d1d88cc09e00253dfe519830cfa657dece8b9093,2025-03-16 00:14:30,Jonas Jenwald,"Merge pull request #19662 from Snuffleupagus/xfa-rm-regex

Replace a few simple regular expressions in the XFA-code with string parsing",True
2d1833b56662fd6c6f9e8db1f2c587e205a97b3e,2025-03-15 23:49:22,Tim van der Meij,"Merge pull request #19663 from timvandermeij/bump

Bump the stable version in `pdfjs.config`",True
a1bcd789b94c994ee8cb97d15de46527f0379a94,2025-03-15 23:45:34,Tim van der Meij,Bump the stable version in `pdfjs.config`,False
23972e1946f69a1ae6bfad9e2f79dfa237432228,2025-03-15 23:16:26,Tim van der Meij,"Merge pull request #19661 from Snuffleupagus/thumbnails-inline-finishRenderTask

Inline the `PDFThumbnailView.prototype.#finishRenderTask`  helper method",True
8a24c1907a501eb7e1915fc3efd09aa2f15b956c,2025-03-15 21:55:26,Jonas Jenwald,"Replace a few simple regular expressions in the XFA-code with string parsing

 - Add a couple of `limit` parameters in cases where those were ""missing"", for `String.prototype.split()` calls, to avoid unnecessary parsing.

 - Remove some ""pointless"" initial trimming of leading/trailing spaces, since that's already done at a later parsing step in many cases.",False
6548c9f1f61dd4f85e9081409de2db279dd7ce68,2025-03-15 18:49:16,Jonas Jenwald,"Inline the `PDFThumbnailView.prototype.#finishRenderTask` helper method

Given that the `draw` method is already asynchronous we can easily inline this old helper method, which shortens the code and improves consistency in the code-base (note the `BasePDFPageView`-implementation).",False
7ee061bcf117aae8730b59d72cd5d99af920bea9,2025-03-15 17:54:52,Jonas Jenwald,"Add a helper function, in `web/pdf_thumbnail_view.js`, for ""zeroing"" a canvas

This removes a tiny bit of code duplication.",False
b7eef925acd69bd8b60cd04b9ba6aca5f581bc39,2025-03-15 17:49:34,Jonas Jenwald,"Shorten the `PDFThumbnailView.prototype.#getReducedImageDims` method (PR 19635 follow-up)

This method is slightly more verbose than necessary, hence we can shorten the code a little bit.",False
4b2683ecb6bf0bc1c5e5482ac41eb22cc1cdd38c,2025-03-15 00:20:36,Tim van der Meij,"Merge pull request #19656 from Snuffleupagus/shorten-MeshStreamReader

Slightly shorten a couple of `MeshStreamReader` methods",True
9967ab4aa821fb18fcdd8fd6e47794a957c3aa3a,2025-03-14 20:51:54,Jonas Jenwald,"Merge pull request #19657 from Snuffleupagus/GenericL10n-rm-regex

Replace the regular expression in `GenericL10n.#getPaths` with simple string parsing",True
9180e27f153f5d17baf64fdb97185b9e89c25e68,2025-03-14 20:24:14,Jonas Jenwald,Replace the regular expression in `GenericL10n.#getPaths` with simple string parsing,False
ec30f0788b3e4ef97a1371a7f86750ff29e2a640,2025-03-14 17:27:41,Jonas Jenwald,"Slightly shorten a couple of `MeshStreamReader` methods

By using object destructuring in the `readCoordinate` and `readComponents` methods we can ever so slightly shorten this code.",False
2294a510b05a382b96e5a70fcb6edd127aa6608a,2025-03-14 01:54:34,calixteman,"Merge pull request #19653 from calixteman/rm_strings_html

Remove all the translatable strings from the html",True
88c3ed9a80feab194c5b4f28ab97bcbf677d86f4,2025-03-13 23:08:29,Calixte Denizet,Remove all the translatable strings from the html,False
8791b2474227774cf951e2880daccbf2ba25a77e,2025-03-13 21:18:50,calixteman,"Merge pull request #19652 from calixteman/rm_useless_css_var

[Editor] Remove useless css variable",True
7c706b6525260bd835e0afba53ab18037fc6250e,2025-03-13 21:10:30,Calixte Denizet,[Editor] Remove useless css variable,False
dc61e36bf446e88793b7fe82fc55130ff342fa02,2025-03-13 21:06:38,calixteman,"Merge pull request #19651 from calixteman/fix_ftl

[Editor] Fix variable name in the ftl file",True
56f58bde9a20c2efdee652ffe911a3481e0a56f9,2025-03-13 20:56:16,Calixte Denizet,"[Editor] Fix variable name in the ftl file

and add a linting rule to avoid such an error in the future.",False
d5c185b90a104ca3e2eb4eec240c9414996a3a34,2025-03-13 18:20:43,calixteman,"Merge pull request #19649 from calixteman/bug1953298

[Editor] Fix the title of saved signature button (bug 1953298)",True
da105f71f6acc396215154ad6a6021464ead1f92,2025-03-13 17:37:45,Calixte Denizet,[Editor] Fix the title of saved signature button (bug 1953298),False
78b310afb1204daf55b94894b5a73783f4205c7c,2025-03-13 17:16:53,Jonas Jenwald,"Merge pull request #19650 from Snuffleupagus/shorten-crypto

Shorten the `src/core/crypto.js` file a little bit",True
ef01ceda1bb1ab0bbc952c8dc03c64d78e7651b5,2025-03-13 16:28:13,Jonas Jenwald,"Change a couple of ""password"" ref-tests to ""eq"" tests

Currrently these are just ""load"" tests, and by also testing rendering we get slightly better test-coverage for the `src/core/crypto.js` file.",False
0e15f709c4a9b8804a0d4cc99b8fb9d1d5e9fc17,2025-03-13 16:28:13,Jonas Jenwald,"Remove unnecessary `else if` when checking the encryptionKey in the `CipherTransformFactory` constructor

This can be simplified a tiny bit since we already throw `PasswordException` when no password is provided.",False
cc63ffa6bbdb0ead3cd03ec8294dc52cfc13e3e8,2025-03-13 16:28:02,Jonas Jenwald,"Reduce duplication when checking the userPassword, in `CipherTransformFactory.prototype.#prepareKeyData`

Currently we duplicate the exact same code in both the `if`- and `else`-branches, which seems unnecessary, and we can also replace the manual loop.",False
38cb01c629fb6d87dd324f23bbf286edda6cc646,2025-03-13 13:50:26,calixteman,"Merge pull request #19648 from calixteman/bug1953290

[Editor] Fix the role of the different editors in order to make them interactive elements (bug 1953290)",True
7fce3eac939bb710567234b10e11bfce7a4286c6,2025-03-13 02:49:31,Calixte Denizet,"[Editor] Fix the role of the different editors in order to make them interactive elements (bug 1953290)

Having some interactive elements forces the screen readers to switch to form mode
and consequently they delegate the keyboard stuff to the browser.
This patch sets an aria label on each editor in order to have a better description than just
'application'.",False
a8ad7d6485d8bc01416a6508107a3f653b973c97,2025-03-13 01:52:16,Jonas Jenwald,"Merge pull request #19645 from Snuffleupagus/OutputScale-pixelRatio

Add an `OutputScale` static method to get the `devicePixelRatio`",True
319d239f413e50633c303787a1bbc46557d883ef,2025-03-13 01:37:06,Jonas Jenwald,"Add an `OutputScale` static method to get the `devicePixelRatio`

Currently we lookup the `devicePixelRatio`, with fallback handling, in a number of spots in the code-base.
Rather than duplicating code we can instead add a new static method in the `OutputScale` class, since that one is now exposed in the API.",False
e4795f639cd77ca636d2fabb894bc9097221f38d,2025-03-13 01:35:39,Jonas Jenwald,"Merge pull request #19644 from Snuffleupagus/crypto-PDFBase

Introduce a common base class for the `PDF17` and `PDF20` crypto classes",True
643c44b6315f85d24fd7caae3c330ec1079b554e,2025-03-13 01:32:24,Jonas Jenwald,"Merge pull request #19643 from Snuffleupagus/l10n-update

Update l10n files",True
0cbb2b1d13497c84ae08262f8b78eff390765876,2025-03-13 01:32:02,Jonas Jenwald,"Merge pull request #19646 from Snuffleupagus/dont-cache-MIN_TOUCH_DISTANCE_TO_PINCH

Don't shadow the `TouchManager.prototype.MIN_TOUCH_DISTANCE_TO_PINCH` value",True
bec6287b0a63c3ec2059314f1cd966ca9345f30e,2025-03-13 00:04:07,Jonas Jenwald,"Merge pull request #19647 from Snuffleupagus/bug-1953099

Let `Lexer.prototype.getNumber` treat more cases of a single minus sign as zero (bug 1953099)",True
7bc741611158ce9a9c03ebff5399e9f3dd9dfce7,2025-03-12 23:54:53,calixteman,"Merge pull request #19642 from calixteman/bug1953003

[Editor] Fix the style of the buttons in dialog (bug 1953003)",True
ee34c5c64818a39cde6eacb87aa62de0c59844a7,2025-03-12 22:20:13,Jonas Jenwald,"Let `Lexer.prototype.getNumber` treat more cases of a single minus sign as zero (bug 1953099)

This patch extends the approach of PR 14543, by also treating e.g. minus signs followed by '(' or '<' as zero.
Inside of a /Contents stream those characters will generally mean the start of one or more glyphs.",False
92adc7ea1b8d3e185c13b396c7c8799e5269b15f,2025-03-12 19:23:20,Jonas Jenwald,"Don't shadow the `TouchManager.prototype.MIN_TOUCH_DISTANCE_TO_PINCH` value

The `devicePixelRatio` may change if the window resolution changes, which can happen e.g. if the viewer is moved to another monitor.",False
2ff6829e47ab1847da3fb546451e2719c77a16e8,2025-03-12 16:55:55,Jonas Jenwald,"Introduce a common base class for the `PDF17` and `PDF20` crypto classes

With the exception of a different hashing function these classes are identical, and the base class thus help reduce code duplication.

This patch reduces the size of the `gulp mozcentral` build with 1344 bytes, which isn't a lot but still cannot hurt.",False
4ebcc996d09814b257cf88410cb05083ac874b92,2025-03-12 14:28:52,Jonas Jenwald,"Update l10n files

Given the recently added l10n-strings, let's do yet another update before the upcoming release to avoid needlessly ""broken"" translations.",False
216e17afc5b7815e80ce59d85633ec3d5ce68cf8,2025-03-12 00:33:23,Calixte Denizet,"[Editor] Fix the style of the buttons in dialog (bug 1953003)

This patch fixes:
 - the style of the primary/secondary buttons in the dialog which weren't fully compliant to the last specs.
 - the style of the input field in HCM (wrong background)
 - the color of the link in the image tab.",False
d74619847de44bf1ff48afc342596c11e4838231,2025-03-12 00:12:36,Jonas Jenwald,"Merge pull request #19640 from Snuffleupagus/secondaryToolbar-fix-close

Don't close the `secondaryToolbar` when clicking inside it (PR 18385 follow-up)",True
221eba29b956d63dbcf63449d75b677d02b2b963,2025-03-11 23:56:23,Jonas Jenwald,"Don't close the `secondaryToolbar` when clicking inside it (PR 18385 follow-up)

When the DOM structure of the viewer was updated in PR 18385 it caused the `secondaryToolbar` to accidentally start closing when clicking inside of it, since the `secondaryToolbar` now reside *under* the `toolbar` in the DOM.

**Steps to reproduce:**
 - Open the viewer.
 - Open the `secondaryToolbar`.
 - Try to change document rotation at least *twice*.

**Expected behaviour:**
 The document rotation can be changed an arbitrary number of times.

**Actual results:**
 The `secondaryToolbar` closes after changing rotation just once.",False
391e84c34bfd867e787d89971c821d6877834f19,2025-03-11 19:05:33,calixteman,"Merge pull request #19639 from calixteman/issue19633

Always use the absolute value of the line thickness (issue 19633)",True
4b4f85484e3ceeb61de92db8ff35255a5e5bf033,2025-03-11 18:33:23,Calixte Denizet,Always use the absolute value of the line thickness (issue 19633),False
d008452e80ca00eec32983b7ab139885e6bc9f56,2025-03-11 01:14:42,calixteman,"Merge pull request #19637 from calixteman/bug1952571

[Editor] Add an aria label to an added signature (bug 1952571)",True
b5a7b827b57dabb3d248ae37ffbdf72889bfefe5,2025-03-10 23:45:05,Calixte Denizet,[Editor] Add an aria label to an added signature (bug 1952571),False
febf59ce753b594b8822518af12c430437c6a9fb,2025-03-10 23:16:40,calixteman,"Merge pull request #19636 from calixteman/bug1952558

[Editor] Make sure the save checkbox isn't focusable when saving is disabled (bug 1952558)",True
69a2e5137d5b43a6de0d56d706a380d30db98e5c,2025-03-10 22:38:42,Calixte Denizet,"[Editor] Make sure the save checkbox isn't focusable when saving is disabled (bug 1952558)

And fix the the width of the warning message when the limit of signatures has been reached:
in french the string is longer than the dialog's one.",False
13474aca63c317fc21cc49fa45ca688e40b68740,2025-03-10 21:25:48,calixteman,"Merge pull request #19620 from calixteman/cmyk_icc

[api-minor] Use an icc profile for converting CMYK to RGB",True
4152eae3fbd652fefb2d95d3d622cd414ae55eac,2025-03-10 21:00:25,Jonas Jenwald,"Merge pull request #19635 from Snuffleupagus/thumbnails-maxCanvasPixels

Support the `maxCanvasPixels` option in the thumbnails code",True
26b5c8f821dd8066ae9f59657a6dc02758ee8a8e,2025-03-10 20:56:04,Jonas Jenwald,"Merge pull request #19625 from Snuffleupagus/issue-19624

Improve text-selection for Type3 fonts, using `d0` operators, with empty /FontBBox-entries (issue 19624)",True
0edfd29a3ea77bc990132290b2b1b31e5536630e,2025-03-10 20:51:54,Jonas Jenwald,"Improve text-selection for Type3 fonts, using `d0` operators, with empty /FontBBox-entries (issue 19624)

For Type3 glyphs with `d1` operators it's easy to compute a fallback bounding box, however for `d0` the situation is more difficult.
Given that we nowadays compute the min/max of basic path-rendering operators on the worker-thread, we can utilize that by parsing these Type3 operatorLists to guess a more suitable fallback bounding box.",False
b9e88445414cdf78c64250980dae179d4c9ac553,2025-03-10 20:42:48,Jonas Jenwald,"Merge pull request #19613 from Snuffleupagus/issue-19611

Let SMask/Mask images fallback to the parent image dimensions (issue 19611)",True
7280540901dd5d2d265bf48f00da472f6f9339bc,2025-03-10 18:48:20,Calixte Denizet,[api-minor] Use an icc profile for converting CMYK to RGB,False
fc22d3afc79fd15bba384071c4c79d8d993f5821,2025-03-10 18:42:07,Jonas Jenwald,"Support the `maxCanvasPixels` option in the thumbnails code

This addresses an inconsistency in the viewer, since the thumbnails don't respect the `maxCanvasPixels` option.
Note that, as far as I know, this has not lead to any bugs since the thumbnails render with a fixed (and small) width, however it really cannot hurt to address this (especially after the introduction of the `maxCanvasDim` option).

To support this a new `OutputScale`-method was added, to avoid having to duplicate code in multiple files.",False
10a99ea0a79bf7041fee005943eaf6328e4499ff,2025-03-10 17:07:44,Jonas Jenwald,"Let SMask/Mask images fallback to the parent image dimensions (issue 19611)

One of the images have a corrupt SMask, where the /Height-entry is bogus; see the excerpt below (via https://brendandahl.github.io/pdf.js.utils/browser/).
```
SMask (stream) [id: 17, gen: 0]

    ColorSpace = /DeviceGray
    Height = /Length
    Subtype = /Image
    Filter = /FlateDecode
    Type = /XObject
    Width = 157
    Matte (array)
    BitsPerComponent = 8
    Length = 3893
    <view contents> download
```

Hence we enable SMask/Mask images to fallback to the parent image dimensions, and also add more validation of the width/height to get a better error message when that data is wrong.",False
1bc98dfbd92a832d34ff8151c529368ac2f8c8c6,2025-03-10 16:02:08,Jonas Jenwald,"Merge pull request #19621 from Snuffleupagus/bug-1943094-thumbs

Limit the maximum thumbnail canvas width/height, similar to pages (PR 19604 follow-up)",True
81baa16c8b526c3ffcda438df428b3e3dd9514ee,2025-03-09 17:38:40,Tim van der Meij,"Merge pull request #19629 from Snuffleupagus/split-crypto

Re-factor the `src/core/crypto.js` file",True
621258f85c2509b3031beb46e21ba5f7ad6579c9,2025-03-09 17:28:55,Tim van der Meij,"Merge pull request #19623 from Snuffleupagus/PDFFunctionFactory-rm-createFromArray

Remove the `PDFFunctionFactory.createFromArray` method",True
66af403f101448ed640e10fe8c57a39c2d14c600,2025-03-09 17:19:53,Tim van der Meij,"Merge pull request #19628 from Snuffleupagus/MathClamp-2

Use the `MathClamp` helper function more (PR 19617 follow-up)",True
0a2c17602748d14a3d89668d59bcc69a9bd02a57,2025-03-08 22:03:16,Jonas Jenwald,"Remove the unused `or`/`shiftLeft` methods from the `Word64` class (PR 4938 follow-up)

These methods were introduced in *the first* commit of PR 4938, however they became unused in *the second* commit of that PR.
Hence it seems that we've been accidentally shipping, a small amount of, unused code for over a decade.",False
67065e43f5887b31cf0e5ef0ad2c9dacf8a145ce,2025-03-08 20:47:45,Jonas Jenwald,"Replace loops with `TypedArray.prototype.set` in the `CipherTransformFactory` class

Also, adds `TypedArray.prototype.fill` usage in one spot.",False
c65f1b0dae50657c2d1458f151282af0fa92c4f7,2025-03-08 20:36:30,Jonas Jenwald,"Move a couple of `AESBaseCipher` fields from the constructors

Thanks to modern JS class features we can, ever so slightly, shorten some class field definitions.",False
461488cb166e1ac6ba6b91009ce05d2612b3be8b,2025-03-08 20:36:30,Jonas Jenwald,"Initialize the `defaultPasswordBytes`, in `CipherTransformFactory`, lazily",False
139d27aa7d620956f8f79b33c0b08d105f1646e0,2025-03-08 20:36:27,Jonas Jenwald,"Simplify various `calculate...` methods a tiny bit

While initializing the `padded` Uint8Arrays we're manually assigning zeros to some entries, which is completely unnecessary since that's the default value for a TypedArray, and instead we can just increment the index.",False
facf34606fd48badea353edb33bf8d347a743f5c,2025-03-08 20:26:22,Jonas Jenwald,"Move the `calculateSHA384` and `calculateSHA512` functions into their own file

This allows us to remove a closure, and we also change the code to initialize various constants lazily.",False
a1eac86037bd6787cebef24a27252e8bd2a8b143,2025-03-08 20:26:16,Jonas Jenwald,"Move the `calculateSHA256` function into its own file

This allows us to remove a closure, and we also change the code to initialize various constants lazily.",False
3e8d01ad7c9e3eecdff673b28d6e62b25b434a2d,2025-03-08 20:26:05,Jonas Jenwald,"Move the `calculateMD5` function into its own file

This allows us to remove a closure, and we also change the code to initialize various constants lazily.",False
1b5151f96933e6e32671e6733e00a60470853911,2025-03-08 16:52:33,Jonas Jenwald,"Remove pointless `Math.min` usage in the XFA parsing

When creating the `StyleMapping` for the ""xfa-font-horizontal-scale"" and ""xfa-font-vertical-scale"" properties there's currently pointless `Math.min` usage, since we're not actually comparing with anything.",False
bee0f53c653169b9580db9e5fe26e8c05fa8b2ce,2025-03-08 16:49:56,Jonas Jenwald,"Use the `MathClamp` helper function more (PR 19617 follow-up)

There's a few spots that I accidentally missed in PR 19617.",False
cef4fcf0259f71954b585735f0e77b9f60dce61e,2025-03-07 18:26:13,Jonas Jenwald,"Merge pull request #19622 from nicolo-ribaudo/zoom-detail-view-constant-redraw

Do not constantly render the detail canvas on zoom (bug 1952496)",True
a1dc46aa9d26ddc9c078c17e5017d88b90ff8678,2025-03-07 17:08:52,Nicolò Ribaudo,"Do not constantly render the detail canvas on zoom

When zooming, we should skip rendering the detail canvas until the
zoom is done, similarly to how normal page rendering is delayed.
To do so is enough to skip details view while zooming, since the
main view rendering that already happens after the delay will also
trigger rendering of the detail views.",False
17d79437583d74947239a4238d92f7bdc7e4c36b,2025-03-07 16:58:14,Jonas Jenwald,"Remove the `PDFFunctionFactory.createFromArray` method

This combines the `PDFFunctionFactory.create` and `PDFFunctionFactory.createFromArray` methods, which helps simplify and shorten the code.
Additionally, to simplify the parameter handling we pass the `PDFFunctionFactory`-instance directly to the various `PDFFunction`-methods.",False
eef15a30cd12e51bbebc50620143430944f91975,2025-03-07 03:30:20,Jonas Jenwald,"Limit the maximum thumbnail canvas width/height, similar to pages (PR 19604 follow-up)

The changes in PR 19604 weren't enough for thumbnail canvases in some cases, see e.g. https://web.archive.org/web/20231204152348if_/https://user.informatik.uni-bremen.de/cabo/rfc9000.pdf#pagemode=thumbs",False
af89e77124bf9ccf271d27e3d3f619ce5878c7c4,2025-03-06 22:29:14,Jonas Jenwald,"Merge pull request #19619 from Snuffleupagus/fix-#savedHasOwnCanvas

Fix the `#savedHasOwnCanvas` handling in the `StampAnnotation` class",True
1abb7be11a400e8596c9503499d172cace97da7b,2025-03-06 20:53:55,calixteman,"Merge pull request #19618 from calixteman/non_editable_stamp

[Editor] In edit mode, a non-editable stamp must be visible after the page is rendered",True
4f2cf38bfa53e652d76883195f227e8306478995,2025-03-06 20:18:14,Jonas Jenwald,"Merge pull request #19617 from Snuffleupagus/MathClamp

Introduce a helper function for clamping a value to a range",True
d646b2b270b703b8dc155ef5668339c68c379dce,2025-03-06 20:12:38,Jonas Jenwald,"Merge pull request #19610 from Snuffleupagus/rm-opacityToHex

[Editor] Remove the unused `opacityToHex` helper function (PR 19093 follow-up)",True
f3454a738d25b780cec7434de72f850b5bcdd410,2025-03-06 20:07:27,Calixte Denizet,"[Editor] In edit mode, a non-editable stamp must be visible after the page is rendered",False
08fa4eba20f6d9ec4ad42ac0d209529292c55e8c,2025-03-06 19:47:52,Jonas Jenwald,"Fix the `#savedHasOwnCanvas` handling in the `StampAnnotation` class

This may not be possible to trigger in practice, however it seems that if `StampAnnotation.prototype.mustBeViewedWhenEditing` is called back-to-back with `isEditing === true` set then the second invocation could overwrite the `#savedHasOwnCanvas`-field and thus lose its initial state.",False
07bbbf75a5fd3d7dafa8c040dba862f6b823ef27,2025-03-06 18:35:26,Jonas Jenwald,"Introduce a helper function for clamping a value to a range

Currently we have a number of spots in the code-base where we need to clamp a value to a [min, max] range. This is either implemented using `Math.min`/`Math.max` or with a local helper function, which leads to some unnecessary duplication.

Hence this patch adds and re-uses a single helper function for this, which we'll hopefully be able to remove in the future once https://github.com/tc39/proposal-math-clamp/ becomes generally available.",False
4ec5f08803636242fca5f0e5ae056bd945353f83,2025-03-06 03:40:56,Jonas Jenwald,"[Editor] Remove the unused `opacityToHex` helper function (PR 19093 follow-up)

The only call-site was removed in PR 19093, hence this is now dead code.",False
dea35aed4ae3a97277ed97304d16aca2037b9733,2025-03-05 19:55:55,Jonas Jenwald,"Merge pull request #19608 from Snuffleupagus/l10n-update

Update l10n files",True
c2fa55420ce542c6ce65806575739893c7736a6e,2025-03-05 19:55:19,Jonas Jenwald,"Merge pull request #19607 from Snuffleupagus/ColorSpaceUtils-rm-singletons

Simplify the `ColorSpaceUtils.singletons` handling (PR 19564 follow-up)",True
de47041e779843fdfea00850c3e07f203dbc98e3,2025-03-05 19:38:39,Jonas Jenwald,"Update l10n files

Given the recently added l10n-strings, let's do another update before the upcoming release to avoid needlessly ""broken"" translations.",False
d8d723587615210711c2472f4c2b7f71fb0b1231,2025-03-05 19:32:05,Jonas Jenwald,"Simplify the `ColorSpaceUtils.singletons` handling (PR 19564 follow-up)

With the changes in PR 19564 the actual `ColorSpace`-classes where separated from the various static ""helper"" methods.
Hence it seems that we can now simplify/shorten this old code to instead cache the ""standard"" ColorSpaces directly on the `ColorSpaceUtils`-class.",False
fedfdf9d10b3cf3ba983c552911937f3edc8c6d0,2025-03-05 17:41:45,Jonas Jenwald,"Merge pull request #19599 from Snuffleupagus/ColorSpace-rm-parseAsync

Remove `ColorSpaceUtils.parseAsync` and simplify the ColorSpace ""API-surface""",True
fbf1f2ba15678afb82a285aa4a0a29469fbd9c34,2025-03-05 17:13:58,Jonas Jenwald,"Remove `ColorSpaceUtils.parseAsync` and simplify the ColorSpace ""API-surface""

This patch reduces the number of `ColorSpaceUtils` static-methods, and in particular the `parseAsync` method is removed and it's now instead possible to have `parse` optionally return a Promise.
This thus removes the need to manually check if a `ColorSpace`-instance is cached, note the changes in the `src/core/evaluator.js` file.",False
19bc5dcb0e202c3ac7a750359ab62f10f8745bc9,2025-03-05 15:04:23,calixteman,"Merge pull request #19564 from calixteman/qcms_icc

[api-minor] Support using ICC profiles in using qcms (bug 860023)",True
971be48b6057c72622e75eb75479c09ab8c1794f,2025-03-05 14:59:59,Calixte Denizet,Support using ICC profiles in using qcms (bug 860023),False
4693b7ad2f523ef0a9ae70c509efb0c40dac653f,2025-03-05 14:37:11,calixteman,"Merge pull request #19585 from calixteman/update_openjpeg2

Use the latest emsdk version to compile openjpeg decoder",True
559ff28db37226c9dba0a385476abff534c1ce8c,2025-03-04 23:11:20,Calixte Denizet,Use the latest emsdk version to compile openjpeg decoder,False
ab8ebc9b776a15308b05ff3d78ff4af95290b8c4,2025-03-04 22:23:31,Jonas Jenwald,"Merge pull request #19604 from Snuffleupagus/bug-1943094

[api-minor] Limit the maximum canvas width/height, in addition to its total area (bug 1943094)",True
9f9de4508c25714bd62457d588b6c33cbf1b3e8e,2025-03-04 19:53:45,Jonas Jenwald,"[api-minor] Limit the maximum canvas width/height, in addition to its total area (bug 1943094)

Browsers not only limit the maximum total canvas area, but additionally also limit their maximum width/height which affects PDF documents with e.g. very tall and narrow pages.
To address this we add a new `maxCanvasDim` viewer-option, which in Firefox will use a browser preference, such that both the total canvas area and the width/height will affect when CSS-zooming is used.",False
5e6cfbe1637d39e67d0c524240cb2c78774f129f,2025-03-03 22:00:14,Jonas Jenwald,"Merge pull request #19598 from Snuffleupagus/ColorSpace#subParse

Also cache ""sub"" ColorSpaces globally (PR 19583 follow-up)",True
ba640e5cdc24a4b4b819e6a97eeca3e3cd47b576,2025-03-03 15:38:05,Jonas Jenwald,"Shorten various static `ColorSpace` method signatures

By passing around common parameters, i.e. everything that's not the ColorSpace-data, in an object we can shorten this code a little bit.",False
33dfc4dd5fc263bc9e4d5d73261a32c61d529853,2025-03-03 14:37:41,Jonas Jenwald,"Also cache ""sub"" ColorSpaces globally (PR 19583 follow-up)

Some ColorSpaces can reference other ColorSpaces, and since it's fairly common for many pages to use the same ColorSpaces (see e.g. `issue17061.pdf`) this can help reduce a lot of unnecessary re-parsing especially for e.g. `ICCBased` ColorSpaces.",False
0c1ac54f4847d94292d391a7e54ae174d64191bc,2025-03-03 02:44:53,Tim van der Meij,"Merge pull request #19597 from Snuffleupagus/then-arrow-functions

Use arrow functions with some `Promise.then` calls",True
7b5cd9cddd4977f0d28894c4bbf1cd869c8bf0a8,2025-03-03 00:27:38,Jonas Jenwald,"Use arrow functions with some `Promise.then` calls

A lot of this is fairly old code, which we can shorten slightly by using arrow functions instead of ""regular"" functions.",False
3cd1b10433575e718b314fa7b7866b1ac9aa85ad,2025-03-03 00:21:15,Jonas Jenwald,"Merge pull request #19576 from nicolo-ribaudo/fix-linkannotation

Fix autolinking with highlighted search results",True
b47d81536cb4a958475be0b2d81a3453a76c2b48,2025-03-02 21:39:58,Nicolò Ribaudo,"Fix autolinking with highlighted search results

The current logic assumes that all spans in the text layer contain
only one text node, and thus that the position information
returned by `highlighter._convertMatches` can be directly used
on the element's only child.

This is not true in case of highlighted search results: they will be
injected in the DOM as `<span>` elements, causing the `<span>`s
in the text layer to have more than one child.

This patch fixes the problem by properly converting the (span, offset)
pair in a (textNode, offset) pair that points to the right text node.",False
146bc58f327a261e0e35c3dab9939c32b31e04b0,2025-03-02 20:39:09,Tim van der Meij,"Merge pull request #19596 from Snuffleupagus/Array-methods-arrow-functions

Use arrow function with various Array methods",True
be6ef64a2c2f7002048563a0a3f06c8ea57f1068,2025-03-02 20:20:54,Tim van der Meij,"Merge pull request #19577 from Snuffleupagus/isValidExplicitDest-reuse

Re-use the `isValidExplicitDest` helper function in the worker/viewer",True
e8bbb60869ada6fc3ee6f2e510243c725b302623,2025-03-02 20:18:26,Tim van der Meij,"Merge pull request #19582 from dhdaines/consume_response

Be sure to consume responses in case of error in downloading test files (issue 19580)",True
1aee9d5c617dd184a230cf5b8dd8f7d74d230cb5,2025-03-02 20:09:11,Tim van der Meij,"Merge pull request #19581 from Snuffleupagus/issue-19579

Write string-data into the `.error`-file created for broken test-manifest links (issue 19579)",True
dfa6370161152288435cfd32bf35bd1185a3555c,2025-03-02 20:06:49,Tim van der Meij,"Merge pull request #19589 from Snuffleupagus/RunLengthStream-fill

Replace a loop with `TypedArray.prototype.fill()` in the `RunLengthStream` class",True
27c82ab8ccada4dc9949b1c43a689a09ee40d16d,2025-03-02 20:00:03,Tim van der Meij,"Merge pull request #19568 from Snuffleupagus/FakeMLManager-no-bundle

Don't bundle the `FakeMLManager` class in regular builds",True
93759f34f4020265bedb1e177facab509d0b7087,2025-03-02 19:57:10,Tim van der Meij,"Merge pull request #19571 from yjoer/master

Add the missing return type for `PDFWorker.fromPort()`",True
2e62f426fe160ebefcdee78a15f83389f5827df2,2025-03-02 19:49:04,Jonas Jenwald,"Use arrow function with various Array methods

A lot of this is quite old code, which we can shorten slightly by using arrow functions instead of ""regular"" functions.",False
a3d259a681b17f8f98797b85ecd6d134ea6aafc4,2025-03-02 17:40:34,Jonas Jenwald,"Replace a loop with `TypedArray.prototype.fill()` in the `RunLengthStream` class

This is a tiny bit shorter, which cannot hurt.",False
7081a1f112756c09b79134b52a5db052f201651e,2025-03-02 14:58:11,Jonas Jenwald,"Merge pull request #19578 from nicolo-ribaudo/flaky-test

Try reducing flakiness of CSS-only zoom test",True
de9b041b5e26f2b6e790229bf303aacbd0cc387c,2025-03-01 23:40:28,Nicolò Ribaudo,"Fix flakiness of CSS-only zoom test

Update the test to wait for the `pagerendered`` event of a specific
page (1), so that the `pagerendered`` event of other pages from a
previously running render doesn't resolve the `waitForPageRendered`
promise.",False
89ccc3a526b868534df4f621145b31c528c0ccaa,2025-03-01 18:54:49,Jonas Jenwald,"Merge pull request #19583 from Snuffleupagus/GlobalColorSpaceCache

Add a `GlobalColorSpaceCache` to reduce unnecessary re-parsing",True
4be79748c9b83d4971a364c2997dc6b166d6b025,2025-03-01 18:51:05,Jonas Jenwald,"Add a `GlobalColorSpaceCache` to reduce unnecessary re-parsing

This complements the existing `LocalColorSpaceCache`, which is unique to each `getOperatorList`-invocation since it also caches by `Name`, which should help reduce unnecessary re-parsing especially for e.g. `ICCBased` ColorSpaces once we properly support those.",False
962f972aea17e02b5f91f6b3fb1a020925a9fa2a,2025-03-01 18:23:56,David Huggins-Daines,"Be sure to consume responses in case of error in downloading test files (issue 19580)

As mentioned in https://nodejs.org/docs/latest-v20.x/api/http.html#httpgeturl-options-callback
if a request results in an error, you still need to consume the data, or call
`response.resume()`, or your code will hang waiting for the request to close.",False
165d90fe262994423a82a44f9e37b57b72727828,2025-03-01 16:38:56,Jonas Jenwald,"Re-use the `isValidExplicitDest` helper function in the worker/viewer

Currently we re-implement the same helper function twice, which in hindsight seems like the wrong decision since that way it's quite easy for the implementations to accidentally diverge.
The reason for doing it this way was because the code in the worker-thread is able to check for `Ref`- and `Name`-instances directly, which obviously isn't possible in the viewer but can be solved by passing validation-functions to the helper.",False
5f4d923618df3c47f706e0c0f8215469240c8f1b,2025-03-01 03:25:46,calixteman,"Merge pull request #19584 from calixteman/update_openjpeg1

Fix the build of the openjpeg decoder in order to use an optimized build of the openjpeg library (bug 1951128)",True
84a5e90a433e945035b15b2f08faa6efbc27d95a,2025-03-01 01:57:20,calixteman,"Merge pull request #19544 from hecerinc/hecerinc/viewerCssFF

Reenable viewerCssTheme option for Firefox",True
c565810a3d4657cd0c0914f58446f0bdadd00c0c,2025-03-01 01:55:51,Calixte Denizet,Fix the build of the openjpeg decoder in order to use an optimized build of the openjpeg library (bug 1951128),False
d1b2476c14cc70b89f020f20b55fcfbde3640b19,2025-02-28 21:35:15,Jonas Jenwald,"Write string-data into the `.error`-file created for broken test-manifest links (issue 19579)

This appears to have broken in PR 17431, since prior to that the `downloadFile` function returned a string (via a callback) on failure and now we're instead rejecting with an Error.",False
6e1cfa20d14cc5730865c873eb4c5065a16873c9,2025-02-28 21:00:45,Jonas Jenwald,"Merge pull request #19574 from Snuffleupagus/autolinking-xfa-disable

Don't attempt to use auto-linking in XFA documents (PR 19110 follow-up)",True
7273db2e357a04b3a62af43b734de0efdf21ede9,2025-02-28 19:17:48,Jonas Jenwald,"Don't attempt to use auto-linking in XFA documents (PR 19110 follow-up)

Auto-linking requires a normal textLayer which XFA documents obviously don't have, and currently XFA documents cause ""pointless"" error messages to be logged in the console.",False
2221ccf160bb00f256dd532fc8d27166358135b1,2025-02-28 00:19:44,Yeoh Joer,Add the missing return type for `PDFWorker.fromPort()`,False
b5ac96da194e3fd67a78011e50e481c821ab3cb8,2025-02-27 17:29:58,Jonas Jenwald,"Don't bundle the `FakeMLManager` class in regular builds

Given that this functionality is only used in the development viewer and in TESTING builds, there's no reason to include this in the regular builds.",False
50c573d16d2dbd8c2bdb3bd4c6f5e85f46602c79,2025-02-27 15:50:26,Jonas Jenwald,"Merge pull request #19563 from Snuffleupagus/loadType3Data-once

Invoke `TranslatedFont.prototype.loadType3Data` only *once* per font",True
56a683bc3be91d7276b998dfb83f7485cf218816,2025-02-27 15:47:42,Jonas Jenwald,"Merge pull request #19562 from Snuffleupagus/issue-19550

Extend `getGlyphMapForStandardFonts` with some Cyrillic entries (issue 19550)",True
4a48a7ec0f7ebbdfa294932783d6c12f6ab2100d,2025-02-27 15:47:02,Jonas Jenwald,"Merge pull request #19557 from Snuffleupagus/PDFViewer-cleanupTimeouts

Abort various timeouts, in `PDFViewer`, when closing the document (PR 19128 follow-up)",True
21829f4157f7d1577bb5a3c554dc2038cd34d422,2025-02-27 15:46:04,Jonas Jenwald,"Merge pull request #19556 from Snuffleupagus/_initializeViewerComponents-more-local-vars

Use more local variables in `PDFViewerApplication._initializeViewerComponents`",True
4e76a783419c5e7c068455d25e03a59d484120d8,2025-02-27 15:45:27,Jonas Jenwald,"Merge pull request #19549 from Snuffleupagus/fewer-EXPORT_DATA_PROPERTIES-2

[api-minor] Stop exporting, by default, a few additional Font properties (PR 11777 follow-up)",True
a4fea2dafd4db156f9afcd080e2fa59f74d1dc52,2025-02-27 14:40:13,calixteman,"Merge pull request #19565 from calixteman/signature_fix_telemetry

[Editor] Fix the telemetry for the signature stuff",True
bbf9bfc3c20c62491731d929a5d3131a5633bec3,2025-02-27 14:04:31,Calixte Denizet,[Editor] Fix the telemetry for the signature stuff,False
bdfa96878dc8361ac558cc9b1f639faabd557f4b,2025-02-26 19:47:11,Jonas Jenwald,"Invoke `TranslatedFont.prototype.loadType3Data` only *once* per font

Currently we're first loading the font, and then for Type3 fonts we're invoking `loadType3Data` every time that the font is encountered.
That seems completely unnecessary, and it's probably connected to the age of this code, since the `loadType3Data`-method will only run once anyway (note the caching).",False
da17c7b82f5146cdcceb231e8f3e8b81e04085b7,2025-02-26 15:55:29,Jonas Jenwald,"Merge pull request #19548 from Snuffleupagus/Font-exportData-disableFontFace-fontExtraProperties

Send `disableFontFace` and `fontExtraProperties` as part of the exported font-data",True
59cb9a064ef107c5f4e9a38f6fbaf22c109c95bf,2025-02-26 14:46:06,Jonas Jenwald,Extend `getGlyphMapForStandardFonts` with some Cyrillic entries (issue 19550),False
0e0872288ee449333da75361951e9f0daca56cda,2025-02-26 14:13:39,Jonas Jenwald,"Merge pull request #19558 from Snuffleupagus/RenderingCancelledException-null-#renderError

Reset `#renderError` on `RenderingCancelledException` (PR 19128 follow-up)",True
4069c3a422c49148c260fd94aeaedd103c574b6b,2025-02-26 11:30:32,Hector Rincon,"Reenable viewerCssTheme option for Firefox

The `viewerCssTheme` was removed in #17222  and subsequently reenabled in #17293,
but only for Chromium and generic builds. This commit reenables the
function using the new method introduced in #17293.",False
d50d3b0b0e7e33a18770d4c2ccaf8f8f69eb93a1,2025-02-25 21:16:01,Jonas Jenwald,"Reset `#renderError` on `RenderingCancelledException` (PR 19128 follow-up)

This restores the behaviour that existed prior to PR 19128, see e.g. https://github.com/mozilla/pdf.js/blob/8727a04ae588545c8e954c143b9fc64384712461/web/pdf_page_view.js#L908-L911, since `RenderingCancelledException` should still overwrite any previously seen Error.",False
71ad9fd0b7ba4cdbe6381d782675ba071c4f4640,2025-02-25 17:41:51,Jonas Jenwald,"Abort various timeouts, in `PDFViewer`, when closing the document (PR 19128 follow-up)

Looking at recent integration-test logs there's occasionally warnings about trying to invoke `PDFViewer.prototype.update` too late, which probably started with PR 19128 (see log excerpt below).
Given that we already had another timeout before that PR the problem was pre-existing, but it seems to trigger more easily now.

```
JavaScript warning: http://127.0.0.1:42333/build/generic/web/viewer.mjs, line 12668: Script terminated by timeout at:
update@http://127.0.0.1:42333/build/generic/web/viewer.mjs:12668:9
@http://127.0.0.1:42333/build/generic/web/viewer.mjs:12373:12
setTimeout handler*_scrollUpdate@http://127.0.0.1:42333/build/generic/web/viewer.mjs:12371:29
viewAreaElementScrolled@http://127.0.0.1:42333/build/generic/web/viewer.mjs:154:15
FrameRequestCallback*debounceScroll@http://127.0.0.1:42333/build/generic/web/viewer.mjs:140:18
EventListener.handleEvent*watchScroll@http://127.0.0.1:42333/build/generic/web/viewer.mjs:165:19
PDFViewer@http://127.0.0.1:42333/build/generic/web/viewer.mjs:11777:19
_initializeViewerComponents@http://127.0.0.1:42333/build/generic/web/viewer.mjs:15081:23
initialize@http://127.0.0.1:42333/build/generic/web/viewer.mjs:14931:16
async*run@http://127.0.0.1:42333/build/generic/web/viewer.mjs:15227:16
webViewerLoad@http://127.0.0.1:42333/build/generic/web/viewer.mjs:17078:24
@http://127.0.0.1:42333/build/generic/web/viewer.mjs:17082:3
```",False
cec32c617739fa3d74b56521e6715d4fa6f069e3,2025-02-25 17:03:13,Jonas Jenwald,"Use more local variables in `PDFViewerApplication._initializeViewerComponents`

This, ever so slightly, shortens the code which can never hurt.",False
aa70b283655811ad6e55f73be1649728ae235508,2025-02-25 14:33:56,Jonas Jenwald,"Merge pull request #19555 from rossj/master

Pad rev 4 encryption keys to be >= 16 bytes (issue 19484)",True
e999f77959a27cedbfe34cd64db1c24b38f7261d,2025-02-25 03:23:49,calixteman,"Merge pull request #19554 from calixteman/signature_telemetry

[Editor] Add some telemetry for the signature editor (bug 1945827)",True
4f25d7f6cd402c827daa7a1f3daf96bb7b4fe1a8,2025-02-25 03:06:37,Ross Johnson,"Fix decryption of R=4, V=4 files with < 16-byte keys by 0-padding - undocumented but matches Acrobat behavior (issue #19484)",False
9e672ff05ede658ef8f536ed8b0e09ac8e0fa8a8,2025-02-25 01:40:04,Calixte Denizet,[Editor] Add some telemetry for the signature editor (bug 1945827),False
fef706233d6870ddb01ac2131a2ee157262187a4,2025-02-24 21:19:03,calixteman,"Merge pull request #19551 from Snuffleupagus/loadSystemFont-fix-assert

Fix the `assert` in `FontLoader.prototype.loadSystemFont`",True
12d2f1b04aada18f3d5ada9b0ae42bc87583bdfe,2025-02-24 20:47:48,calixteman,"Merge pull request #19552 from calixteman/add_generated_header_openjpeg

Add a comment 'THIS FILE IS GENERATED - DO NOT EDIT' in openjpeg files generated with emscripten",True
2966171a2b37349bbe2ecf097e9a7557dab049cb,2025-02-24 20:39:07,Jonas Jenwald,"Fix the `assert` in `FontLoader.prototype.loadSystemFont`

Currently this `assert` isn't actually doing what it's supposed to, since the `FontLoader`-class doesn't have a `disableFontFace`-field.
The `FontFaceObject`-class on the other hand has such a field, hence we update the method-signature to be able to check the intended thing.",False
f9aa8e1d155639af4c42fd9ac773009f8bab0aa5,2025-02-24 20:37:50,calixteman,"Merge pull request #19539 from calixteman/paste_signature

[Editor] Shift the signature editor when pasted",True
c099245daa537e0f1cdfbfb0d590e40343cf46ee,2025-02-24 20:35:19,Calixte Denizet,Add a comment 'THIS FILE IS GENERATED - DO NOT EDIT' in openjpeg files generated with emscripten,False
132ccf04db9c28a7e96416747dbe304571b99e01,2025-02-24 16:57:51,Jonas Jenwald,"[api-minor] Stop exporting, by default, a few additional Font properties (PR 11777 follow-up)

None of the ""composite"", ""subtype"", or ""type"" properties are normally used on the main-thread and/or in the API, hence there's no need to include them in the exported font-data by default.
Given that these properties may still be useful when debugging, and that `debugger.mjs` actually relies on the ""type"" property, they will instead only be sent to the main-thread when the `fontExtraProperties` API-option is used.",False
c4784832ac1e01ccaa1695ba726e62052989ed1e,2025-02-24 14:38:15,Jonas Jenwald,"Merge pull request #19545 from hecerinc/hecerinc/issueLinkFix

Fix the link for issue5939.pdf",True
d428db63c347200fa88d8b5e48fafb34e9c2cc7f,2025-02-24 14:04:58,Jonas Jenwald,"Improve the ""FontFallback"" handling on the worker-thread

Remove the `Catalog.prototype.fontFallback` method, and move its code into `PDFDocument.prototype.fontFallback` instead, to reduce the indirection a little bit.
Pass the `evaluatorOptions` directly to the `TranslatedFont.prototype.fallback` method, since nothing else in the `TranslatedFont`-class needs it now.",False
839e23f5c2eeb454bc7355108423631d33f852ad,2025-02-24 14:04:48,Jonas Jenwald,"Send `disableFontFace` and `fontExtraProperties` as part of the exported font-data

These options are needed in the `FontFaceObject` class, and indirectly in `FontLoader` as well, which means that we currently need to pass them around manually in the API.
Given that the options are (obviously) available on the worker-thread, it's very easy to just provide them when creating `Font`-instances and then send them as part of the exported font-data. This way we're able to simplify the code (primarily on the main-thread), and note that `Font`-instances even had a `disableFontFace`-field already (but it wasn't properly initialized).",False
c19e70f6d9f26c4fedf7853dcfbef656c9e6cb6a,2025-02-24 04:45:11,Hector Rincon,"Fix the link for issue5939.pdf

Web archive no longer has the revision for the saved PDF referenced in
that test case, so this updates that link to a more recent revision to
enable the tests to run on a clean clone.",False
ed64faa88c22e12b453aada170fccefd97953d22,2025-02-24 03:26:38,Jonas Jenwald,"Merge pull request #19543 from timvandermeij/integration-tests-helpers

Refactor the editor integration test helper functions",True
cc3d6ab539b7856fab72e3774c0e97053fa59c32,2025-02-24 02:05:01,Calixte Denizet,"[Editor] Shift the signature editor when pasted

The idea is to avoid to have the pasted editor hidding the copied one:
the user could think that nothing happened.
So the top-left corner of the pasted one is moved to the bottom-right corner of the copied one.",False
acc5a2153a55f90bd7e1491f34096cd681d11ff1,2025-02-24 01:19:04,Tim van der Meij,"Introduce a generic `clearEditors` helper function

This replaces the various copies of this logic with a single helper that
we template for each editor type, similar to what we already do for the
`switchToEditor` helper.",False
f155b69c077e0534a1d22a7c23e1e4a85b354b61,2025-02-24 01:18:24,Tim van der Meij,"Introduce a generic `selectEditors` helper function

This replaces the various copies of this logic with a single helper that
we template for each editor type, similar to what we already do for the
`switchToEditor` helper.",False
060ef0e15e8147457cbad75f229dd7c5b2ba3793,2025-02-24 01:18:17,Tim van der Meij,"Deduplicate the `waitForPointerUp` helper function in the highlight editor integration tests

The helper function is available in `test_utils.mjs` since commit
3fe55ba, so we can remove the local copy by importing it.",False
07629e105cec1a786ec98e08baa785723239f0f7,2025-02-24 01:18:17,Tim van der Meij,"Deduplicate the `getXY` helper function in the highlight editor integration tests

The helper function is available in `test_utils.mjs` since commit
301f1bb, so by exporting it there it can be reused.",False
4f3dbcf24dcba7db9af1a2407630544bcf514f29,2025-02-24 01:18:17,Tim van der Meij,"Remove the `waitForEditorMovedInDOM` helper function export

It's no longer used outside of `test_utils.mjs` since commit 301f1bb.",False
fcf94e8c380494a56b263149eb838f10e6459b3b,2025-02-24 01:17:10,Tim van der Meij,"Merge pull request #19542 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
33c53dfaa94346b832fb593810e3a52a5d2b4116,2025-02-24 00:01:20,Tim van der Meij,Update translations to the most recent versions,False
cd6c5b009f72a056dbb5a7c21fea4659b33e4cfb,2025-02-24 00:01:20,Tim van der Meij,"Upgrade `globals` to version 16.0.0

This is a major version bump, but the changelog at
https://github.com/sindresorhus/globals/releases/tag/v16.0.0
doesn't indicate any breaking changes that should impact us.",False
8b0f1641eea08d668cc1370ea73004d25c880d33,2025-02-23 23:58:28,Tim van der Meij,"Upgrade `eslint-plugin-unicorn` to version 57.0.0

This is a major version bump, but the changelog at
https://github.com/sindresorhus/eslint-plugin-unicorn/releases/tag/v57.0.0
doesn't indicate any breaking changes that should impact us.

However, we do replace the deprecated `no-instanceof-array` rule with
the new `no-instanceof-builtins` rule. Note that the changelog calls
this rule `no-instanceof-builtin-object`, but it got renamed in
https://github.com/sindresorhus/eslint-plugin-unicorn/pull/2537.",False
08ba910ef09e0bf671fd0e3b0683f13b98a5ce00,2025-02-23 22:51:50,Tim van der Meij,Update dependencies to the most recent versions,False
878d206c791d71abfd9bdd8932bdcf35402856b6,2025-02-22 20:25:26,calixteman,"Merge pull request #19538 from calixteman/move_draw

[Editor] Fix the position in the page of a drawing after it has been moved with the keyboard",True
301f1bbf2bba1fe6894b26dbec24e32f841ea875,2025-02-22 19:49:14,Calixte Denizet,"[Editor] Fix the position in the page of a drawing after it has been moved with the keyboard

When a drawing was moved with arrow keys and then printed or saved, the drawing wasn't moved finally.
So the fix is just about calling onTranslated once the translation is done.",False
a648e1e76947eac2d305cc2b05fa4fc00fda13b3,2025-02-22 18:46:31,Jonas Jenwald,"Merge pull request #19537 from Snuffleupagus/api-useWasm

[api-minor] Re-factor how the `useWorkerFetch` option is used internally",True
23d7398371b38f96a7355c046996875b98c1e021,2025-02-22 18:17:44,Tim van der Meij,"Merge pull request #19531 from stof/patch-1

Disable the loading of node types in the type tests",True
637e95985a70ce7107b03b7cb2ca610e9f06bddb,2025-02-22 18:08:10,Jonas Jenwald,"Simplify `JpxImage.setOptions` a little bit

After PR 19392 we're only invoking this method *once* per document, hence the early-return branch shouldn't be necessary any more.",False
641e2f506e8c1d384e985374caa963d5ef5f9b2d,2025-02-22 14:26:53,Jonas Jenwald,"[api-minor] Re-factor how the `useWorkerFetch` option is used internally

With the recently added OpenJPEG no-wasm fallback we need to send the `wasmUrl` option to the worker-thread *regardless* of the value of the `useWorkerFetch` option, since the fallback won't work if we don't have a URL to `import` it from.
For consistency the code is re-factored to always send the factory-urls to the worker-thread, and simply check the `useWorkerFetch` option there instead.

Also, as a follow-up to PR 19525, introduce a new `useWasm` option that can be used in e.g. browser-tests to forcibly disable WebAssembly usage.",False
6d3bb476558ff5464e51df85ebeb9f6a92f3b077,2025-02-22 14:04:40,Jonas Jenwald,"Merge pull request #19525 from calixteman/bug1935076_part2

Provide a js fallback when the wasm version of openjpeg is failing to load (bug 1935076)",True
c2e616dfc9e12b10866e16eb500cb1eb85a2d78a,2025-02-22 03:31:31,calixteman,"Merge pull request #19534 from calixteman/signature_description_test

[Editor] Add a test for copy & paste a signature editor",True
553ec7babcb9f6aff1b956fefd5b1b15229ae721,2025-02-22 02:54:41,Jonas Jenwald,"Merge pull request #19128 from nicolo-ribaudo/draw-page-portion

[api-minor] Render high-res partial page views when falling back to CSS zoom (bug 1492303)",True
b4e26dc4257fb31cfff8d00df1b530e81552baff,2025-02-22 02:40:58,calixteman,"Merge pull request #19533 from Xiphoseer/type3-text-rise

Consider textRise when showing Type3 font glyphs (issue 19532)",True
814d2bbe6d594437423114c6fb59f43b38e51abb,2025-02-22 02:13:19,Calixte Denizet,"[Editor] Add a test for copy & paste a signature editor

This patch fixes an issue when pasting: an exception was thrown when pasting.
And while writing the test and comparing the paths in the svg, I found a difference
which is fixed thanks to call to the right constructor (to take into account the inheritance)
in inkdraw.js",False
24aa39eb14354185f20f1568beeeb72e0bd072bd,2025-02-22 02:01:04,Xiphoseer,"Consider textRise when showing type3 font glyphs

Add test case for issue 19532",False
36e4f5c222fc48fc514d8723612718256e554397,2025-02-21 23:33:47,Calixte Denizet,Provide a js fallback when the wasm version of openjpeg is failing to load (bug 1935076),False
dc5d6aad8acf91cbf704a1da258b6cec50d7efe2,2025-02-21 23:30:57,Nicolò Ribaudo,"Avoid degrading scroll performance due to the detail view

When scrolling quickly, the constant re-rendering of the detail view
significantly affects rendering performance, causing Firefox to
not render even the _background canvas_, which is just a static canvas
not being re-drawn by JavaScript.

This commit changes the viewer to only render the detail view while
scrolling if its rendering hasn't just been cancelled. This means that:
- when the user is scrolling slowly, we have enough time to render the
  detail view before that we need to change its area, so the user always
  sees the full screen as high resolution.
- when the user is scrolling quickly, as soon as we have to cancel a
  rendering we just give up, and the user will see the lower resolution
  canvas. When then the user stops scrolling, we render the detail view
  for the new visible area.",False
458b2ee4028b7ba8acf56cb3b22d720358901c2b,2025-02-21 23:30:55,Nicolò Ribaudo,"[api-minor] Render high-res partial page views when falling back to CSS zoom (bug 1492303)

When rendering big PDF pages at high zoom levels, we currently fall back
to CSS zoom to avoid rendering canvases with too many pixels. This
causes zoomed in PDF to look blurry, and the text to be potentially
unreadable.

This commit adds support for rendering _part_ of a page (called
`PDFPageDetailView` in the code), so that we can render portion of a
page in a smaller canvas without hiting the maximun canvas size limit.

Specifically, we render an area of that page that is slightly larger
than the area that is visible on the screen (100% larger in each
direction, unless we have to limit it due to the maximum canvas size).
As the user scrolls around the page, we re-render a new area centered
around what is currently visible.",False
06257f782e91811906d04aec6dbb5223c4b7ca53,2025-02-21 23:18:31,Nicolò Ribaudo,"Extract `PDFPageViewBase` class out of `PDFPageView`

This base class contains the generic logic for:
- Creating a canvas and showing when appropriate
- Rendering in the canvas
- Keeping track of the rendering state",False
93a5fa5b88020c623c0b9f244bffa0e1c0a3e66d,2025-02-21 18:40:35,Christophe Coevoet,"Disable the loading of node types in the type tests

Those type tests are performing type checking on a project using DOM APIs, intended to reflect the usage in a non-node project.
Not loading the node types in that project ensures that the library type declarations don't force a dependency on the node types.",False
e3ea92603d17595aad4b1c37c7113cb7dee0c90e,2025-02-21 15:10:32,Jonas Jenwald,"Merge pull request #19493 from Snuffleupagus/URL-parse

Introduce some `URL.parse()` usage in the code-base",True
34ef74cf0eb47f665a333ef1d7a106718b207577,2025-02-21 03:41:43,calixteman,"Merge pull request #19518 from Snuffleupagus/JpegStream-EXIF-replace

Move the EXIF-block replacement into `JpegStream` (PR 19356 follow-up)",True
c64d3d7cc0ce21ccd10e4395dc947af252fff095,2025-02-21 03:15:51,calixteman,"Merge pull request #19524 from calixteman/fix_doorhanger_color

[Editor] Fix the color of the labels in the editing doorhangers",True
cd94c19f9a04ec954d77d7df9c004507ee6dd3db,2025-02-21 00:01:57,Calixte Denizet,"[Editor] Fix the color of the labels in the editing doorhangers

The fix in #19522 wasn't correct.
This one should be better.",False
6713c239e34bc641a438767ececfced353bb6cae,2025-02-20 23:53:54,calixteman,"Merge pull request #19523 from calixteman/signature_menu_outline

[Editor] Fix the outline of a focused button in the doorhanger while navigating with the keyboard",True
8be6d744cde4bcb43fc888fa905ba7fa5f736e59,2025-02-20 23:03:19,Calixte Denizet,"[Editor] Fix the outline of a focused button in the doorhanger while navigating with the keyboard

It's a follow-up of #19507.
Without this patch the outline is partially hidden.",False
b1d579d4ab16be029af9bcc5ded3ccb87f660a06,2025-02-20 20:15:20,calixteman,"Merge pull request #19522 from calixteman/bug1949417

[Editor] Make the editing toolbar buttons text visible when hovered in HCM with Desert theme (bug 1949417)",True
b7e65b854b369bdf466e7fd4b463baf11198c907,2025-02-20 19:31:52,Calixte Denizet,[Editor] Make the editing toolbar buttons text visible when hovered in HCM with Desert theme (bug 1949417),False
c52b5bac6c4870be45be586e3c157c6d642f69d1,2025-02-20 18:37:07,calixteman,"Merge pull request #19516 from calixteman/bug1949201

[Editor] Remove the error panel when the user click on an other tab (bug 1949201)",True
12ba81718c09928715d0e7416950a3649f47472f,2025-02-20 18:33:59,Calixte Denizet,[Editor] Remove the error panel when the user click on an other tab (bug 1949201),False
d5ce35f744f33b23d5e98cc14fe889b2c40ecd69,2025-02-20 17:11:39,Jonas Jenwald,"Move the EXIF-block replacement into `JpegStream` (PR 19356 follow-up)

Currently we modify the EXIF-block in place, which may end up ""breaking"" the JPEG-data of the original PDF document since e.g. saving it from the viewer no longer contains the real EXIF-block.
Hence the EXIF-block replacement is moved into the `JpegStream` class, such that we can copy the data before doing the replacement.",False
d10cea5dd0dc602098dc8749972e73011d805f62,2025-02-19 19:13:14,Jonas Jenwald,"Merge pull request #19470 from ryzokuken/fix-autolinking-edge-cases

Fix autolinking errors",True
38ab358fb1162ad1f2fc0921a0b218ae481bf371,2025-02-19 17:48:31,Ujjwal Sharma,"Fix autolinking error due to redundant annotations on zooming

Fix an issue where redundant links were being added to the annotation
layer on zooming on the page with the links.",False
70e287343022205eb6bc61be42f9e866f7b3ac1b,2025-02-19 17:48:31,Ujjwal Sharma,"Fix autolinking errors due to regex and email validation

Fix some edge cases in the autolinking logic with the regex as well as
validating email domains and add unit tests for them.

Fixes: https://github.com/mozilla/pdf.js/issues/19462",False
63b397f49dd9ad077e01e8e248e5185fde6fc404,2025-02-19 01:53:01,Jonas Jenwald,"Merge pull request #19513 from Snuffleupagus/issue-19510

Don't cache free/missing XRef entries (issue 19510)",True
db7cf40a307ff2c5cd90fc23258ffe7925659d8e,2025-02-18 22:34:00,Jonas Jenwald,"Don't cache free/missing XRef entries (issue 19510)

During the XRef stream parsing we're attempting to lookup an entry that hasn't yet been found, since parsing is currently running, and given that we'd also cache free/missing XRef entries we'd then return an incorrect value during normal PDF parsing.

The simplest solution here is to just not cache free/missing XRef entries, since a properly generated PDF document shouldn't be trying to access objects it doesn't contain.
Furthermore, the amount of ""extra"" parsing now needed for such XRef entries shouldn't be significant enough to be an issue.",False
5bc3cb839b0c32982be5c382268b3409190c57c2,2025-02-18 22:33:00,calixteman,"Merge pull request #19512 from calixteman/signature_test2

[Editor] Add two integration tests for the signature feature",True
426c730e11c96ef34783a045d248b05e650e5be8,2025-02-18 22:22:36,Jonas Jenwald,"Merge pull request #19504 from Snuffleupagus/eslint-fix-arrow-body-style

Fix all outstanding ESLint `arrow-body-style` warnings",True
3fe55baa5e8d5fabfaa67a59e23833e4d285f959,2025-02-18 19:54:03,Calixte Denizet,"[Editor] Add two integration tests for the signature feature

- one test about adding a drawn signature
- an other one about adding a signature extracted from an image.",False
a857ca3261b28fa41730f935236e9d8dcdbdebad,2025-02-18 17:46:30,calixteman,"Merge pull request #19511 from calixteman/editor_dnd_image

[Editor] Wait for switching to stamp mode before adding a new editor when dnd'ing an image",True
9984afe6a6dc7f771b67390a42c2877d74511c18,2025-02-18 15:23:34,Calixte Denizet,"[Editor] Wait for switching to stamp mode before adding a new editor when dnd'ing an image

When dnd'ing an image with the FreeText mode enabled, the image wasn't correctly added.",False
203452c170c7fb3fbd355d2045452da9d0b0907c,2025-02-18 03:27:14,calixteman,"Merge pull request #19508 from calixteman/issue19505

[JS] Skip throwing actions",True
d0107566ba999c8a90b74fd8effe76eab0e841f5,2025-02-18 02:29:46,calixteman,"Merge pull request #19506 from calixteman/bug1948741

[Editor] Scale the signature editor when it's too large (bug 1948741)",True
8f9232202fcfa0505d2a3b0738ae5aba0a2abf24,2025-02-18 02:28:20,Calixte Denizet,"[JS] Skip throwing actions

It fixes #19505.

We were invaliding throwing actions (in setting event.rc to false) and all the event process was stopped.
Now we're just dumping the exception in the console: the action is skipped and event.rc is not set
else the input fields aren't updated wit KeyStroke actions.",False
a0bdd67bc3181ec9bf6265e1f4913598259da805,2025-02-18 02:01:01,calixteman,"Merge pull request #19507 from calixteman/bug1948771

[Editor] Add a scrollbar to the signature doorhanger when it's overflowing (bug 1948771)",True
cde7d8331908c9265ff1658b6f111e6fe898bde1,2025-02-18 01:39:56,Calixte Denizet,[Editor] Add a scrollbar to the signature doorhanger when it's overflowing (bug 1948771),False
3fc6b1321f9d01db9486c6a32fff5632af3e3046,2025-02-18 00:50:26,Calixte Denizet,[Editor] Scale the signature editor when it's too large (bug 1948741),False
36979e9eb2ef751c24662834b44403d3daf5feb4,2025-02-17 20:15:44,Jonas Jenwald,"Fix all outstanding ESLint `arrow-body-style` warnings

Currently this rule is disabled in a number of spots across the code-base, and unless absolutely necessary we probably shouldn't disable linting, so let's just update the code to fix all the outstanding cases.",False
affce70a0964eca34981b7458c39f151b249e962,2025-02-17 19:51:57,Jonas Jenwald,"Merge pull request #19503 from Snuffleupagus/web-rm-some-eslint-disable

Remove a few `eslint-disable` statements in the `web/` folder",True
2df0f925b9cf818d0b2d9f84bcdbe6c014574e8f,2025-02-17 19:18:07,calixteman,"Merge pull request #19500 from calixteman/test_signature1

[Editor] Add two integration tests for the signature UI",True
b8993cfcc8ba9b51ded649cad5d1e6690d4754fc,2025-02-17 18:28:54,Calixte Denizet,[Editor] Add two integration tests for the signature UI,False
a2d15ceb84122167af465435199ff7d37044fad1,2025-02-17 18:10:09,Jonas Jenwald,"Remove a few `eslint-disable` statements in the `web/` folder

These cases could be easily re-written to avoid having to disable ESLint rules.",False
33c97570f5b9a42411abc85ca2b900f1ac46adf7,2025-02-16 19:20:29,Tim van der Meij,"Merge pull request #19499 from Snuffleupagus/useWorkerFetch-ensure-boolean

Ensure that the `useWorkerFetch` fallback value is always a boolean",True
06e4580f8ba83e84f8a39c5a9e18c17ec5f60abf,2025-02-16 18:34:30,Jonas Jenwald,"Ensure that the `useWorkerFetch` fallback value is always a boolean

If either of the factory-urls are missing or invalid, the fallback value would currently become `useWorkerFetch === null`.
While that is obviously a falsy value, which means that the code still works as intended, we should ensure that this is consistent.",False
c2e33307b1b4dc1a815c4af9a9118972ce2cab66,2025-02-15 23:40:36,Jonas Jenwald,"Introduce some `URL.parse()` usage in the code-base

This (fairly new) static method allows parsing URLs without having to wrap `new URL(...)` calls within `try...catch` blocks, thus simplifying the code; see https://developer.mozilla.org/en-US/docs/Web/API/URL/parse_static

For older browsers/environments the functionality will be polyfilled, but *only* in `legacy` builds, via `core-js`; see https://github.com/zloirock/core-js?tab=readme-ov-file#url-and-urlsearchparams

*Please note:* This is currently limited to the `src/`- and `web/`-folders, such that we don't break development/testing, since the functionality is not available in all Node.js versions that we support; see https://developer.mozilla.org/en-US/docs/Web/API/URL/parse_static#browser_compatibility",False
3f15e0c469a042358bf5b6ff135986c4dac3ed5c,2025-02-15 21:35:59,Jonas Jenwald,"Merge pull request #19495 from Snuffleupagus/issue-19494

Check more of the stream when looking for commands after inline image (issue 19494)",True
8dec353c7ab4347a081c7139f7aa76762ee910a2,2025-02-15 21:33:35,Jonas Jenwald,"Merge pull request #19496 from Snuffleupagus/shorter-#buildObjectKey

Shorten the `CipherTransformFactory.prototype.#buildObjectKey` method",True
65df1d336fa9cf9db07b6d6d8e5135e769f41a0e,2025-02-15 19:44:47,Jonas Jenwald,"Check more of the stream when looking for commands after inline image (issue 19494)

Currently we only check `followingBytes`, which turns out to be too short to find e.g. valid transform (cm) commands with decimal arguments.",False
a722ca4de569f6cfdc0d73e119b7cc0b97528e92,2025-02-15 17:30:42,Jonas Jenwald,"Shorten the `CipherTransformFactory.prototype.#buildObjectKey` method

 - Use `TypedArray.prototype.set()` rather than a manual loop when building the `key`.

 - Use an existing local variable to avoid re-computing the length of the `encryptionKey`.",False
92ff26e4ffa79fd13a715ca6562433e9a6da04df,2025-02-14 22:16:07,calixteman,"Merge pull request #19427 from calixteman/bug1946181

Add some unicode mapping for ligatures when writing the cmap table in the font (bug 1946181)",True
144e5fe19692cf5039c0fa944d11b0f4dc0efa69,2025-02-14 20:35:36,Jonas Jenwald,"Merge pull request #19476 from Snuffleupagus/issue-19474

Search for destinations in both /Names and /Dests dictionaries (issue 19474)",True
33cba30bdbbc4d768bf3280c55f5aee424d20f72,2025-02-14 20:19:05,Jonas Jenwald,"Search for destinations in both /Names and /Dests dictionaries (issue 19474)

Currently we only use either one of them, preferring the NameTree when it's available.",False
c69282a64f3ca531cecbf70d1e1a03141015c6c2,2025-02-14 20:16:13,Jonas Jenwald,"Merge pull request #19487 from Snuffleupagus/OverlayManager-closeIfActive

Add a new `closeIfActive` method in the `OverlayManager` class",True
96f5dcbd910896de1daf4924f0e87a4f38c593ae,2025-02-14 20:13:00,Jonas Jenwald,"Add a new `closeIfActive` method in the `OverlayManager` class

It's now pretty common that we only want to close a `dialog` *if* it's currently active, to avoid throwing errors, and this new method provides a shorter and more convenient way to achieve that.",False
6258a77bd7873e1477ba2aeae6769fb86389d019,2025-02-14 20:11:45,calixteman,"Merge pull request #19486 from calixteman/signature_edit_desc

[Editor] Add the possibility to change a signature description (bug 1948116)",True
6ad56135c90203cd6d2e3b11ff9e87d42773f7b4,2025-02-14 20:03:29,Jonas Jenwald,"Merge pull request #19481 from Snuffleupagus/GenericL10n-fetch-bundles-parallel

[GenericL10n] Fetch the language bundles in parallel to reduce load time",True
c81a404138e3fb48d7b503e0682c76587e91eb84,2025-02-14 18:35:06,Jonas Jenwald,"Merge pull request #19475 from Snuffleupagus/injectLinkAnnotations-method-event

Move the auto-link handling into its own `PDFPageView` helper-method, and dispatch a ""linkannotationsadded"" event",True
1d82b2ce9488a2ad859cdbadb2b6e0487b9b63ca,2025-02-14 18:30:45,Calixte Denizet,[Editor] Add the possibility to change a signature description (bug 1948116),False
a877493826bd8b2367c8f7905c4f22ead933077d,2025-02-14 15:14:37,Jonas Jenwald,"Merge pull request #19485 from Snuffleupagus/SignatureManager-Array-from-shorten

Slightly shorten an `Array.from` usage in the `SignatureManager` class",True
7dbf8c8e4b8218817049a0f04b92e25c1ee91464,2025-02-14 00:34:02,Jonas Jenwald,"Slightly shorten an `Array.from` usage in the `SignatureManager` class

This should be equivalent to the old code, and besides being ever so slightly shorter I'm also finding it a little bit easier to read at a glance.",False
74a7576c2c09486c2d0b780c74e7d2c08c0eaa92,2025-02-13 21:16:01,calixteman,"Merge pull request #19478 from calixteman/signature_init

[Editor] Populate the 'Add signature' menu with the saved signatures (bug 1947828)",True
68451fe17e4db5bec6ae44ad4cd3bb6a04eef4c1,2025-02-13 20:29:57,Calixte Denizet,[Editor] Populate the 'Add signature' menu with the saved signatures (bug 1947828),False
8d8e25c89d17a934843b8d766a39e7ee20651a99,2025-02-13 16:23:45,Jonas Jenwald,"[GenericL10n] Fetch the language bundles in parallel to reduce load time

For non `en-US` locales this will, ever so slightly, shorten the time it takes to load and parse the language bundles.",False
8727a04ae588545c8e954c143b9fc64384712461,2025-02-12 19:27:44,Jonas Jenwald,"Move the auto-link handling into its own `PDFPageView` helper-method, and dispatch a ""linkannotationsadded"" event

This is similar to a lot of existing functionality for various layers, and the new event might be helpful in e.g. the integration-tests.",False
d6f63d0e4b35b31355bdf4f8338e284bf72c75b2,2025-02-12 03:43:46,Jonas Jenwald,"Merge pull request #19469 from Snuffleupagus/bug-1947248

[api-major] Apply the `userUnit` using CSS, to fix the text/annotation layers (bug 1947248)",True
5b13ea14c2b997e3254f2bd923475c8d347b9338,2025-02-12 03:12:51,calixteman,"Merge pull request #19472 from calixteman/update_button_hover_color

Fix the color of the background button when hovering it",True
6950a312aa43b3326310e324c687fef1aed5759c,2025-02-12 00:45:17,Calixte Denizet,Fix the color of the background button when hovering it,False
e2d226378824672d8faa5a47b9d191e7a9a87f37,2025-02-12 00:36:33,Jonas Jenwald,"Merge pull request #19464 from Snuffleupagus/autolinking-catch

Catch and ignore any errors during auto-linking parsing (PR 19110 follow-up)",True
bd05b255fabfc313b194bfe9a17ccded4d90fb5a,2025-02-11 19:06:06,Jonas Jenwald,"[api-major] Apply the `userUnit` using CSS, to fix the text/annotation layers (bug 1947248)

Rather than modifying the ""raw"" dimensions of the page, we'll instead apply the `userUnit` as an *additional* scale-factor via CSS.

*Please note:* It's not clear to me if this solution is fully correct either, or if there's other problems with it, but it at least *appears* to work.

---

With these changes, the following CSS variables are now assumed to be available/set as necessary: `--total-scale-factor`, `--scale-factor`, `--user-unit`, `--scale-round-x`, and `--scale-round-y`.",False
e3cca6d513d4c24393cf5d8d4af25d69b399b46e,2025-02-10 23:50:32,calixteman,"Merge pull request #19425 from calixteman/signature_save

[Editor] Add the possibility to compress/decompress the signature data in  order to store them in the logins storage in Firefox (bug 1946171)",True
6b95095e1413a04f679447040fc9a8d8e1b1ce5d,2025-02-10 23:39:51,Calixte Denizet,Add the possibility to compress/decompress the signature data in order to store them in the logins storage in Firefox (bug 1946171),False
29fbed384a5cf1ac030dab3e5cbaab4129641a6f,2025-02-10 21:02:12,Jonas Jenwald,"Merge pull request #19461 from Snuffleupagus/autolinking-lazy-borderStyle

Create the `borderStyle` of inferred links lazily (PR 19110 follow-up)",True
357ff4afde38d033db6768a38638a11bd88bf05e,2025-02-10 20:58:02,Jonas Jenwald,"Catch and ignore any errors during auto-linking parsing (PR 19110 follow-up)

While investigating a bug, that I've not yet had time to fully investigate and report, I found that if there's ever an error thrown from the `Autolinker` class it'll prevent the annotationEditorLayer from rendering *and* the renderTask itself will be treated as having failed.",False
de1c2146b8b0d53e7f3bf88caacc5aac2c06ead9,2025-02-10 17:17:56,Jonas Jenwald,"Merge pull request #19458 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
fba5f3c2378f099d1649aaf12f66a7d2b6050447,2025-02-10 16:23:22,Jonas Jenwald,"Create the `borderStyle` of inferred links lazily (PR 19110 follow-up)

Given that most inferred links will overlap existing LinkAnnotations, creating a lot of unused `borderStyle` objects seem unnecessary.
Hence we can move that into the `AnnotationLayer.prototype.addLinkAnnotations` method instead, which also allows us to slightly reduce the API-surface.",False
e608daed9f25d22e35afad91190462ace06162f5,2025-02-10 14:38:47,Jonas Jenwald,"Merge pull request #19460 from Snuffleupagus/autolinking-check-annotationLayer

Check that the annotationLayer is still active before injecting inferred links (PR 19110 follow-up)",True
81e99da44098148d1e7439a33abe6d4dfd73d8a5,2025-02-10 13:49:04,Jonas Jenwald,"Check that the annotationLayer is still active before injecting inferred links (PR 19110 follow-up)

This issue is quite difficult to trigger reliably, however it's possible for rendering to have been aborted and thus for the annotationLayer to have been removed once we're invoking `injectLinkAnnotations`. In that case, an Error is thrown[1].

The way that I'm able to *intermittently* trigger this is by:
 - Loading http://localhost:8888/web/viewer.html?file=/test/pdfs/pdf.pdf#disableHistory=true
 - Enable ""Wrapped Srolling"" mode.
 - Quickly zoom out, to the minimum zoom level.

---
[1]
```
renderView: TypeError: can't access property ""injectLinkAnnotations"", this.annotationLayer is null
    resultPromise http://localhost:8888/web/pdf_page_view.js:1116
    draw http://localhost:8888/web/pdf_page_view.js:1099
    renderView http://localhost:8888/web/pdf_rendering_queue.js:196
    forceRendering http://localhost:8888/web/pdf_viewer.js:1849
    promise callback*forceRendering http://localhost:8888/web/pdf_viewer.js:1848
    renderHighestPriority http://localhost:8888/web/pdf_rendering_queue.js:79
    renderView http://localhost:8888/web/pdf_rendering_queue.js:198
    renderView http://localhost:8888/web/pdf_rendering_queue.js:197
    forceRendering http://localhost:8888/web/pdf_viewer.js:1849
    promise callback*forceRendering http://localhost:8888/web/pdf_viewer.js:1848
    renderHighestPriority http://localhost:8888/web/pdf_rendering_queue.js:79
    renderView http://localhost:8888/web/pdf_rendering_queue.js:198
    renderView http://localhost:8888/web/pdf_rendering_queue.js:197
    forceRendering http://localhost:8888/web/pdf_viewer.js:1849
    promise callback*forceRendering http://localhost:8888/web/pdf_viewer.js:1848
    renderHighestPriority http://localhost:8888/web/pdf_rendering_queue.js:79
    renderView http://localhost:8888/web/pdf_rendering_queue.js:198
    renderView http://localhost:8888/web/pdf_rendering_queue.js:197
    forceRendering http://localhost:8888/web/pdf_viewer.js:1849
    promise callback*forceRendering http://localhost:8888/web/pdf_viewer.js:1848
    renderHighestPriority http://localhost:8888/web/pdf_rendering_queue.js:79
    renderView http://localhost:8888/web/pdf_rendering_queue.js:198
    renderView http://localhost:8888/web/pdf_rendering_queue.js:197
    forceRendering http://localhost:8888/web/pdf_viewer.js:1849
    promise callback*forceRendering http://localhost:8888/web/pdf_viewer.js:1848
    renderHighestPriority http://localhost:8888/web/pdf_rendering_queue.js:79
    update http://localhost:8888/web/pdf_viewer.js:1677
    onScaleChanging http://localhost:8888/web/app.js:2550
    dispatch http://localhost:8888/web/event_utils.js:115
    #setScaleUpdatePages http://localhost:8888/web/pdf_viewer.js:1363
    #setScale http://localhost:8888/web/pdf_viewer.js:1389
    updateScale http://localhost:8888/web/pdf_viewer.js:2263
    updateZoom http://localhost:8888/web/app.js:814
    zoomOut http://localhost:8888/web/app.js:827
    onKeyDown http://localhost:8888/web/app.js:2780
    bindWindowEvents http://localhost:8888/web/app.js:2097
    initialize http://localhost:8888/web/app.js:262
    run http://localhost:8888/web/app.js:704
    webViewerLoad http://localhost:8888/web/viewer.js:294
    <anonymous> http://localhost:8888/web/viewer.js:305
pdf_rendering_queue.js:204:21
```",False
86ae2ca01c9e4e8ebe9dcd11a7b17a9f4cb7bce9,2025-02-10 03:21:37,Jonas Jenwald,"Merge pull request #19449 from Snuffleupagus/autolinking-URL-fuzzy-match

Ignore the URLs when checking if inferred links overlap existing LinkAnnotations (PR 19110 follow-up)",True
37ef0b4a86acafff1e004baaccd4b01a01bf44ff,2025-02-10 02:36:58,Jonas Jenwald,"Ignore the URLs when checking if inferred links overlap existing LinkAnnotations (PR 19110 follow-up)

*Note:* For the issue mentioned on Matrix it'll obviously still make sense to improve the regular expression to detect more URL edge-cases.

However it occurred to me that even once that particular case is fixed there'll always be a risk that inferred links could overlap, and effectively block, the actual LinkAnnotations.
Hence this patch removes the URL comparison to ensure that overlapping inferred links will always be ignored.",False
58a60b8959fbe5e1ddd4b3f5703dcebd4d19fc50,2025-02-09 23:29:00,Tim van der Meij,Update translations to the most recent versions,False
d2a07dcac6dabecc775abdb77bd69b5546f436c8,2025-02-09 23:28:26,Tim van der Meij,"Update dependencies to the most recent versions

Moreover, fix the linting issues (using `npx gulp lint --fix`) that are
found by the new versions of the linting tools.",False
d88035525c69b72ecec2f5ea21b591d2d541a2b5,2025-02-09 22:40:29,Tim van der Meij,"Merge pull request #19457 from timvandermeij/integration-tests-ink-isolate

Isolate the ink editor integration tests",True
b4a6b1ba0bb60e79fe8f3275ada0ad23b7934b9e,2025-02-09 22:15:17,Jonas Jenwald,"Merge pull request #19456 from Snuffleupagus/more-TypedArray-fill

Replace a couple of loops with `TypedArray.prototype.fill()`",True
6862e84daad1948536abe6a7f5f9d352fe25045c,2025-02-09 21:43:01,calixteman,"Merge pull request #19437 from calixteman/signature_save_print1

[Editor] Add the ability to print and save some newly added signatures (bug 1946795)",True
6d9ff346118fb57096f05964f46edfa95d9442df,2025-02-09 21:16:58,Tim van der Meij,"Isolate the ink editor integration tests

To avoid being able to introduce dependencies between tests, and to
bring existing dependencies to the surface, this commit makes sure that
we close the document between tests so that we can't accidentally rely
on state set by a previous test. This prevents multiple tests from
failing if one of them fails and makes debugging easier by being able to
run each test on their own independent of other tests.

This commit, combined with the previous one, is enough to make the ink
editor integration test suite pass consistently if random mode in
Jasmine is enabled, proving that the tests are fully isolated now.",False
ced1268ec3e4f4fbd381231fe8e09084f1437c9a,2025-02-09 21:16:58,Tim van der Meij,"Remove the dependency between two ink editor integration tests

The second test of the basic operations block for the ink editor
depends on the first test to work. This becomes visible if we only run
the second test, using `fit`, which always fails with:

`ProtocolError: Waiting for selector '.annotationEditorLayer' failed:
Runtime.callFunctionOn timed out. Increase the 'protocolTimeout' setting
in launch/connect calls for a higher timeout if needed.`

The problem is that the second test doesn't enable the ink editor and
relies on the first test having done that already (because we don't
close the document between tests yet). This commit fixes the issue by
unconditionally enabling the ink editor in the second test to remove the
dependency between the two tests so they both pass in isolation.",False
294fa3e4e64136e2a3af613424c681d1914d7594,2025-02-09 20:54:45,Jonas Jenwald,"Replace a couple of loops with `TypedArray.prototype.fill()`

When you want to initialize a TypedArray with a non-zero value for all elements the `fill`-method is simpler than manually looping through it.",False
c1035e43560b7d3fd34cd6ea0a542b646e16d9c4,2025-02-09 20:29:50,Tim van der Meij,"Merge pull request #19454 from Snuffleupagus/Chrome-110

[api-minor] Update the minimum supported Google Chrome version to 110",True
ad1c79e6af4d4e9452544f1d3ea2bd3a8e84a29f,2025-02-09 18:03:55,Jonas Jenwald,"[api-minor] Update the minimum supported Google Chrome version to 110

This patch updates the minimum supported browsers as follows:
 - Google Chrome 110, which was released on 2023-02-07; see https://chromereleases.googleblog.com/2023/02/stable-channel-update-for-desktop.html

Note that nowadays we usually try, where feasible and possible, to support browsers that are about two years old. By limiting support to only ""recent"" browsers we reduce the risk of holding back improvements of the *built-in* Firefox PDF Viewer, and also (significantly) reduce the maintenance/support burden for the PDF.js contributors.

*Please note:* As always, the minimum supported browser version assumes that a `legacy`-build of the PDF.js library is being used; see https://github.com/mozilla/pdf.js/wiki/Frequently-Asked-Questions#faq-support",False
8ba8e75d6c4fe08b2fa1d35beb8355447b7d8aaa,2025-02-09 17:27:53,Tim van der Meij,"Merge pull request #19446 from Snuffleupagus/shorten-MeshStreamReader-readBits

Shorten the `MeshStreamReader.prototype.readBits` method a little bit",True
739324d77e385f78925c2a9982adb3489efd74b1,2025-02-09 17:25:10,Tim van der Meij,"Merge pull request #19447 from Snuffleupagus/fix-integrationtest-inferred_link_

Check for the correct link-id prefix in ""must not add links when unnecessary"" integration-test (PR 19110 follow-up)",True
1921aefccfa5948df73d17897bc06843a9d45457,2025-02-09 17:23:27,Tim van der Meij,"Merge pull request #19450 from Snuffleupagus/crypto-CipherTransform-iv-getRandomValues

Use `crypto.getRandomValues` unconditionally in the `src/core/crypto.js` file",True
7919f4e84fdf0adf98e9083211a8e5430d29a195,2025-02-09 16:12:17,Jonas Jenwald,"Use `crypto.getRandomValues` unconditionally in the `src/core/crypto.js` file

This functionality is now available in all browsers/environments that we support, please see https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues#browser_compatibility",False
6eec20afc08b8093194495e335f235c4eaa93fc3,2025-02-08 20:12:31,Jonas Jenwald,"Check for the correct link-id prefix in ""must not add links when unnecessary"" integration-test (PR 19110 follow-up)

Currently this test-case would never fail, even if the actual implementation was broken, since it checks for a link-id prefix that we're not using.",False
36522d85cc6989d30fb5966fe05816702f8bd1d0,2025-02-08 15:47:35,Jonas Jenwald,"Shorten the `MeshStreamReader.prototype.readBits` method a little bit

 - Use a `BaseStream`-instance method to directly get the int32 value.

 - Use local variables more.",False
72339dc561628ef6775cb0b66cb610741f2a97e7,2025-02-08 04:31:40,Jonas Jenwald,"Merge pull request #19399 from Snuffleupagus/TextLayer-#getAscent-simplify

[api-minor] Simplify the `TextLayer.#getAscent` fallback (PR 12896 follow-up)",True
24417a1a0b28c51eb1a22039a70d427e6fb1c212,2025-02-08 03:37:27,Calixte Denizet,[Editor] Add the ability to print and save some newly added signatures (bug 1946795),False
b43efdd5457871cbf66cbcd3711b5301d00dab11,2025-02-08 01:43:58,Tim van der Meij,"Merge pull request #19436 from Snuffleupagus/api-FetchBinaryData

Combine the main-thread message handlers for CMap-, StandardFontData-, and Wasm-files",True
01148d35bc17530d084eeaeb6991383c29470cfc,2025-02-08 01:35:52,Tim van der Meij,"Merge pull request #19423 from Snuffleupagus/annotation-more-getPdfColorArray

Use the `getPdfColorArray` helper more in the `src/core/annotation.js` file",True
5b7bc27c46b197396ec348796206d9d173331009,2025-02-08 01:22:26,Tim van der Meij,"Merge pull request #19419 from Snuffleupagus/blank_issues_enabled-false

Disable the ""Blank issue"" alternative when using the GitHub ""New issue""-button",True
88e5da1e37980a54ff1d09ae5bb0f69b8ce615a8,2025-02-07 19:03:15,Jonas Jenwald,"Combine the main-thread message handlers for CMap-, StandardFontData-, and Wasm-files

Currently we have three separate and virtually identical message handlers for this data, which can easily be combined into a single message handler instead.",False
651d7121098973c97077ee5c464bebf661178970,2025-02-07 02:29:27,calixteman,"Merge pull request #19433 from calixteman/signature_icon

[Editor] Add an icon for the signature tool and move it before the highlight one",True
7d9cfbf597d04d3a843f7134671182a8b9970f22,2025-02-07 02:06:28,Jonas Jenwald,"Merge pull request #19432 from Snuffleupagus/isSyncFontLoadingSupported-FeatureTest

Use the `FeatureTest` helper in the `src/display/font_loader.js` file",True
5ee7307bf5f7963b27a6c065dbec17b5a758d8ba,2025-02-07 01:28:59,Calixte Denizet,[Editor] Add an icon for the signature tool and move it before the highlight one,False
33f35068424fa5603a3218714830ea5190a37ab4,2025-02-07 01:15:18,Jonas Jenwald,Use the `FeatureTest` helper in the `src/display/font_loader.js` file,False
41a918b0fe9e0b0ee61622ca5d7b543ed29782aa,2025-02-07 00:37:07,Jonas Jenwald,"Merge pull request #19430 from Snuffleupagus/Fluent-PLATFORM

[GENERIC viewer] Add Fluent `PLATFORM` function (PR 19414 follow-up)",True
16155fd801b53483f9107849f12184eebf9481d4,2025-02-06 23:39:20,calixteman,"Merge pull request #19431 from Snuffleupagus/var--save-warning-color

Fix `--save-warning-color` CSS variable typo (PR 19414 follow-up)",True
314928ffd70f4737bd64d45c6ca0da1bb7504a9e,2025-02-06 23:36:04,Jonas Jenwald,Fix `--save-warning-color` CSS variable typo (PR 19414 follow-up),False
d5d3d8b3f7aef8e62239955a4dfdfb359a33279c,2025-02-06 23:29:35,Jonas Jenwald,"[GENERIC viewer] Add Fluent `PLATFORM` function (PR 19414 follow-up)

This patch extends the `FeatureTest.platform` getter to provide the necessary information, and uses that one to implement a Fluent `PLATFORM` function based on: https://searchfox.org/mozilla-central/rev/d1fbe983fb7720f0a4aca0e748817af11c1a374e/intl/l10n/rust/fluent-ffi/src/bundle.rs#81-98",False
f1152f5caf8c29c6005b50a4d490e1d32003c87b,2025-02-06 22:17:55,calixteman,"Merge pull request #19429 from calixteman/autolinking_firefox

Enable autolinking in Firefox (bug 1019475)",True
76c06c5996b7127f7c1e04165f91a7f5da2787d0,2025-02-06 21:32:54,Calixte Denizet,Enable autolinking in Firefox (bug 1019475),False
2d773cb7737cf8b8c38432c54ea8741df69c9be5,2025-02-06 21:23:48,calixteman,"Merge pull request #19110 from ryzokuken/autolink-demo

Enable automatic URL linking (bug 1019475)",True
08663f715b3e5dcd4ca24e8e62b651f62fab3e4e,2025-02-06 20:50:01,calixteman,"Merge pull request #19414 from calixteman/signature_dialog2

[Editor] Add a new dialog for the signature editor (bug 1945574)",True
185ec1faf6e3bc518511bc27178cdd3a1e760bd1,2025-02-06 15:21:15,Calixte Denizet,Add some unicode mapping for ligatures when writing the cmap table in the font (bug 1946181),False
fa25ab9c1379078444449820d25956c0245287fc,2025-02-06 03:30:38,Calixte Denizet,[Editor] Add a new dialog for the signature editor (bug 1945574),False
61ba1ea48ca2c982934ac11fcd3ef993df517255,2025-02-05 21:26:54,Ujjwal Sharma,"Enable automatic URL linking

Automatically detect links in the text content of a file and automatically
generate link annotations at the appropriate locations to achieve
automatic link detection and hyperlinking.",False
925071ab46f6a1db2be7aa179d05514e478b2e4d,2025-02-05 16:07:32,Jonas Jenwald,"Use the `getPdfColorArray` helper more in the `src/core/annotation.js` file

While the file-size reduction is obviously tiny, it should never hurt to remove code duplication.",False
0b118efc26ca1503a4f2328dc43413f711c717d7,2025-02-04 19:49:04,Jonas Jenwald,"Disable the ""Blank issue"" alternative when using the GitHub ""New issue""-button

With recent changed made to the GitHub issues-UI the ""Blank issue"" alternative is now showing up quite prominently, which can easily negate the point of our bug/feature templates and lead to incomplete issues being filed.",False
90a5c37cb0131e8645bc036ec8e2baa1a1f8bca3,2025-02-04 17:18:21,Jonas Jenwald,"Merge pull request #19416 from Snuffleupagus/getFactoryUrlProp

[api-minor] Add more validation for the `cMapUrl`, `standardFontDataUrl`, and `wasmUrl` parameters",True
212388a980cf9a42018dd6f1dac23d223d0456f7,2025-02-04 16:11:00,Jonas Jenwald,"Merge pull request #19415 from Snuffleupagus/dist-wasm

Bundle wasm-files in `pdfjs-dist` (PR 19329 follow-up)",True
696c6c626bd6150b703fdf65c0645e337a3c6647,2025-02-04 15:09:38,Jonas Jenwald,"Include the OpenJPEG license files

This is consistent with the handling of CMaps and StandardFontData.",False
fa3358baf97e4ba756ea3ede7860af273fdf0be7,2025-02-04 14:57:31,Jonas Jenwald,"[api-minor] Add more validation for the `cMapUrl`, `standardFontDataUrl`, and `wasmUrl` parameters

Given that we now have a few different factory-url parameters, we introduce a helper function for parsing them.

*Please note:* These parameters have always been documented as requiring a trailing slash[1], which we can now easily enforce during the `getDocument`-call.

---
[1] I recall that we've occasionally seen issues because users miss that detail, and the new Error should hopefully be more easily actionable than one thrown during rendering/parsing.",False
de79996574f89062d5534de2700cc8535fccefe8,2025-02-04 14:52:26,Jonas Jenwald,Bundle wasm-files in `pdfjs-dist` (PR 19329 follow-up),False
d1f62509e531b9e9f8862e3526eaa17565ff1e9c,2025-02-03 00:11:13,Tim van der Meij,"Merge pull request #19410 from timvandermeij/integration-tests-freetext

Centralize the editor selector definitions in the freetext editor integration tests",True
9a6511127a67c5fc0c8de905aee1b26874322ae7,2025-02-02 21:50:14,Tim van der Meij,"Put `waitForSelector` options on a single line in the editor integration tests

This pattern was already followed quite consistently outside of the
freetext editor integration tests, so this commit aligns the remaining
places for consistency. This also helps to make the tests more compact
and to reduce the number of changes in follow-up changes.",False
e95a26dc1dbfb036320b9515a4c216e6ce70a9e2,2025-02-02 21:48:14,Tim van der Meij,"Centralize the editor selector definitions in the freetext editor integration tests

In most integration tests we already use the pattern of defining the
editor selector once and reusing it in the rest of the test, but it's
not fully consistent everywhere yet. This commit fixes that for the
freetext editor integration tests, which has multiple advantages:

- it improves consistency between the various editor integration tests;
- it removes duplicate function calls and aligns variable definitions;
- it reduces the number of `getEditorSelector` calls that contained
  hardcoded IDs, which helps to isolate the tests and to simplify
  follow-up patches.",False
bdbd9a317f5b733e7da316a3c8855f3fe163a0ca,2025-02-02 18:52:08,Tim van der Meij,"Merge pull request #19408 from Snuffleupagus/rm-popup-color-mix-fallback

Remove the `color-mix` fallback used with PopupAnnotations",True
944602a7d5a5579605c251b000c53159742112c5,2025-02-02 18:49:23,Tim van der Meij,"Merge pull request #19405 from timvandermeij/integration-tests-highlight

Centralize the editor selector definitions in the highlight editor integration tests",True
f9d3f699a7628dff9fde559bf4e7f2567939af1b,2025-02-02 18:49:06,Tim van der Meij,"Merge pull request #19404 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
9752d88241931023713dd9dda00e58005839d4a5,2025-02-02 16:01:49,Jonas Jenwald,"Merge pull request #19407 from hamirmahal/master

Replace uninformative README badge (issue 19406)",True
9f62a88c387214e38ed19d8f58d6dc41ef7a36f4,2025-02-02 15:11:35,Jonas Jenwald,"Remove the `color-mix` fallback used with PopupAnnotations

This CSS feature is now available in *most* browsers that we support, with old Chromium-based browsers being the only exception; please see https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-mix#browser_compatibility

From this data we see that the feature in question has been supported since Chrome 111, which was released on 2023-03-01 (i.e. almost two years ago).

Please note that we've never guaranteed that all features and functionality will be available in the oldest supported browsers.
Furthermore, even with the `color-mix` fallback removed PopupAnnotations will still function just as before but may render with the default color (defined in the CSS-file) rather than the one specified in the PDF document.",False
d8b6f1138fdd83c2f48531753f3647be7c45e79b,2025-02-02 05:02:09,Hamir Mahal,Replace uninformative `README` badge (issue 19406),False
8babcded5dd7fb03256cbb3ee19263910b55f37d,2025-02-01 23:53:42,Tim van der Meij,"Centralize the editor selector definitions in the highlight editor integration tests

In most integration tests we already use the pattern of defining the
editor selector once and reusing it in the rest of the test, but it's
not fully consistent everywhere yet. This commit fixes that for the
highlight editor integration tests, which has multiple advantages:

- it improves consistency between the various editor integration tests;
- it removes duplicate function calls and aligns variable definitions;
- it reduces the number of `getEditorSelector` calls that contained
  hardcoded IDs, which helps to isolate the tests and to simplify
  follow-up patches.",False
0326814a1e3c43c66bbd03e3e6fea508f7f6d10d,2025-02-01 23:07:01,Tim van der Meij,Update translations to the most recent versions,False
c0957986b7fed724204b260d5a55d825a0fc4f58,2025-02-01 23:05:56,Tim van der Meij,Update dependencies to the most recent versions,False
de191d2a1268e5e2f69efef9f8cbaa62528b45b7,2025-02-01 20:47:59,Tim van der Meij,"Merge pull request #19402 from Snuffleupagus/AnnotationElement-width-height-getters

Add width/height getters in the `AnnotationElement` class",True
2fd1344ecede4228efe8e77c72d4639695c0673c,2025-02-01 17:50:15,Jonas Jenwald,"Add width/height getters in the `AnnotationElement` class

This is similar to PR 19397, but for the main-thread code, and helps to slightly shorten the code.",False
c8be02f2a7bdebcb56ca7f3c8a18d3774ca6c2b6,2025-02-01 14:41:57,Jonas Jenwald,"[api-minor] Simplify the `TextLayer.#getAscent` fallback (PR 12896 follow-up)

At the time of PR 12896 the `fontBoundingBox{Ascent, Descent}` properties were not yet available by default in Fírefox, however that's no longer the case since Firefox 116; please see https://bugzilla.mozilla.org/show_bug.cgi?id=1801198.

Hence this patch which replaces the ""full"" fallback with a warning and uses the `ascent`/`descent` values from the fonts in the PDF document (as we did previously). Obviously the TextLayer won't look as good in that case, but it's a simpler and shorter solution.",False
b48717a99e32377831c6098bd833b592756e0335,2025-01-31 20:44:02,Tim van der Meij,"Merge pull request #19397 from Snuffleupagus/Annotation-width-height-getters

Add width/height getters in the `Annotation` class",True
938add1bb044770130062babf37d6944d373ed04,2025-01-31 20:14:00,calixteman,"Merge pull request #19396 from calixteman/update_signature_draw

[Editor] Add some functions in order to extract contours from text and to generate a drawing from a drawn signature",True
20992e87f54795d5ded3eeff4c59a829f04396b7,2025-01-31 19:29:58,Calixte Denizet,[Editor] Add some functions in order to extract contours from text and to generate a drawing from a drawn signature,False
6f2966628cc6973d14d5158cfdd7a76ccf254f1d,2025-01-31 17:51:53,Jonas Jenwald,"Add width/height getters in the `Annotation` class

Currently we're manually computing the width/height of the /Rect-entry in a number of spots throughout the worker-thread Annotation code, which these new getters help avoid.",False
58c8f069f7c232a81375a9bd9e106dfb73de63ca,2025-01-30 21:21:26,calixteman,"Merge pull request #19395 from calixteman/fix_overlay_manager

Avoid to remove the active overlay when a cancelled dialog (like the file picker) was called from a dialog",True
ec7270c5468d183734925650a87a21175b5436af,2025-01-30 21:18:13,calixteman,"Merge pull request #19394 from calixteman/mv_supported_img_types

Move the array containing the supported image mime types in display_utils",True
eca1e6c52ecd91d4407488223d9c65f614c6c770,2025-01-30 20:43:48,Calixte Denizet,Avoid to remove the active overlay when a cancelled dialog (like the file picker) was called from a dialog,False
2c737bc420c12cf4ed016f46313b4708f36ba9da,2025-01-30 20:05:17,Calixte Denizet,"Move the array containing the supported image mime types in display_utils

and make it available for the viewer (it'll be used in the signature UI).",False
31deee26b932d19a7ecdc5ac930f48ecb388c2e4,2025-01-30 19:40:14,Jonas Jenwald,"Merge pull request #19393 from Snuffleupagus/fewer-hasFieldFlag

Use fewer `hasFieldFlag` calls in the `src/core/annotation.js` file",True
d1a0f3e495f53a78752dc6cdf5978c09e376b37e,2025-01-30 19:36:25,Jonas Jenwald,"Merge pull request #19392 from Snuffleupagus/image-options-init-once

Initialize the image-options, on the worker-thread, once per document",True
9e227de3c5a7586e09509ac118dcda28656afb88,2025-01-30 18:08:57,Jonas Jenwald,"Use fewer `hasFieldFlag` calls in the `src/core/annotation.js` file

We lookup a number of field-flags multiple times, which seems unnecessary.",False
db53320da81499c643783250af059f18e923f3f0,2025-01-30 16:22:15,Jonas Jenwald,"Initialize the image-options, on the worker-thread, once per document

Currently we're initializing the image-options for every page, which seems unnecessary since it should suffice to do that once per document.

Also, changes the `BasePdfManager` constructor to improve readability/documentation a little bit.",False
42c2b7b657b4b50e493daa55b3b76a2f32940e00,2025-01-30 15:24:56,calixteman,"Merge pull request #19339 from calixteman/signature_tools

[Editor] (WIP) Add a new tool in order to add an handwritten signature to a pdf (bug 1942343)",True
2f828c7bf43fc6ab773a688dd66e0c537000d9e8,2025-01-30 02:22:14,Calixte Denizet,"[Editor] (WIP) Add a new tool in order to add an handwritten signature to a pdf (bug 1942343)

This patch is adding some code in order to extract a drawing as curves from an image.
The algorithm is basically the following:
 - reduce the dimensions
 - make it gray
 - apply a bilateral filter in order to add some blurryness while keeping the edges
 - compute the histogram
 - guess what's the background color which should contain a large majority of the pixels
 - make a binary image
 - extract the contours in using the Suzuki algorithm
 - apply the Douglas-Peucker algorithm in order to reduce the number of points

The algorithm is improvable but it should work pretty well if there's a clear difference between
the background and the drawing.
In a v2 we could use a ML model in order to improve the extraction.

There's few changes related to the UI in order to make the tool usable, but they're very basic
for the moment.",False
9bc4331485a666aa5b698fb379e8e1350d90011f,2025-01-29 19:11:19,Jonas Jenwald,"Merge pull request #19390 from Snuffleupagus/issue-19389

Support the password field-flag in TextWidgetAnnotation (issue 19389)",True
6f2706fad6d5181da087df07423b64ce0192abdd,2025-01-29 17:10:09,Jonas Jenwald,Support the password field-flag in TextWidgetAnnotation (issue 19389),False
786ac2fe014049175e69ffbbbe01d7d5fd832b3a,2025-01-29 16:12:59,Jonas Jenwald,"Merge pull request #19388 from Snuffleupagus/readInt16

Introduce a `readInt16` helper function in the `src/core/core_utils.js` file",True
237a17ad56396bedfa070e527ad11393279e9080,2025-01-29 14:44:23,Jonas Jenwald,"Introduce a `readInt16` helper function in the `src/core/core_utils.js` file

Rather than manually repeating code needed to get an int16, we can move and re-use an existing helper function instead.",False
b0b95522164cc6cc9cd4add801a55742f22ec0af,2025-01-28 14:35:01,Jonas Jenwald,"Merge pull request #19384 from Snuffleupagus/isNumberArray-fix-BigInt-check

Handle *empty* BigInt64Array/BigUint64Array in the `isNumberArray` helper",True
6281a8977853b9bbef5a3d0262c3ee4cc0bf2e03,2025-01-27 17:27:47,Jonas Jenwald,"Handle *empty* BigInt64Array/BigUint64Array in the `isNumberArray` helper

The current checks would accidentally allow *empty* BigInt64Array/BigUint64Array, which we can fix by instead checking directly for those types.
This should be fine since those types are available in all environments that we support, see:
 - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array#browser_compatibility",False
4f1078dc63fa5ba199ba1474dffed5108cfe7789,2025-01-26 21:24:43,Tim van der Meij,"Merge pull request #19368 from Snuffleupagus/rm-delayed-cleanup

[api-minor] Simplify clean-up of page resources after rendering",True
09a0a0f06f6e2f96a490640394e4b0ec9719c1c7,2025-01-26 21:15:51,Tim van der Meij,"Merge pull request #19358 from Snuffleupagus/Node-enable-web_pdfjsLib

Enable the ""checks that the viewer re-exports the expected API functionality"" unit-test in Node.js",True
329c3d1d71196cc99d23f1211972ce71366f96a3,2025-01-26 21:14:21,Tim van der Meij,"Merge pull request #19381 from Snuffleupagus/rm-isInEditingMode

Remove unused `isInEditingMode` method (PR 19311 follow-up)",True
3cfc41e54d7bd9b4f8cbfdc9e5da1dd3e2dc33be,2025-01-26 21:13:11,Tim van der Meij,"Merge pull request #19382 from mozilla/dependabot/npm_and_yarn/undici-6.21.1

Bump undici from 6.19.8 to 6.21.1",True
85a6c1ea6b0f0f97d9a71919a1b908b92ec4ca33,2025-01-26 21:07:40,dependabot[bot],"Bump undici from 6.19.8 to 6.21.1

Bumps [undici](https://github.com/nodejs/undici) from 6.19.8 to 6.21.1.
- [Release notes](https://github.com/nodejs/undici/releases)
- [Commits](https://github.com/nodejs/undici/compare/v6.19.8...v6.21.1)

---
updated-dependencies:
- dependency-name: undici
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>",False
b02274e5d609e69a787076a103596f560b764b0e,2025-01-25 17:47:25,Jonas Jenwald,"Remove unused `isInEditingMode` method (PR 19311 follow-up)

This method was added in PR 19311, however it's not actually used anywhere in the code-base.",False
38800715cd53e338b43d73082631fb64c8a4238c,2025-01-24 04:24:37,calixteman,"Merge pull request #19373 from Hydraulicus/fix-drawing-beyond-page

[Editor] Add validation for the target element of curve endpoints",True
4a513bb52ed5936d576ef9b8297c591e6253532c,2025-01-24 03:06:28,Jonas Jenwald,"Merge pull request #19365 from Snuffleupagus/viewer-component-render-option-objects

[api-major] Change viewer component `render`-methods to take parameter objects",True
f798bade4ec1ccae0ebb249716542c31fe71f82e,2025-01-24 02:37:29,calixteman,"Merge pull request #19338 from avdoseferovic/fix/ink-editor-jumping

[Editor] Don't scroll when drawing (issue 17327)",True
104e1c3f9018e896e69431a94757c12cb4267709,2025-01-24 01:35:33,hydraulicus,"[Editor] Add validation for the target element of curve endpoints

This patch fixes a bug that caused incorrect curve shapes when an endpoint lies beyond the page boundaries. It adds a check for the endpoint's position, and if it is outside the page, the point is excluded from the shape's coordinates.",False
30fa7c3d84d10a71b7e458c5d0cf2bfbb95b4abb,2025-01-23 22:38:02,Jonas Jenwald,"Merge pull request #19372 from Snuffleupagus/mainHighlightColorPicker-toolbar-init

[GENERIC viewer] Re-initialize the viewer-toolbar `ColorPicker` for each PDF document",True
342b5e20b42096d4dd12d06e283c392a5873e6da,2025-01-23 21:23:31,Jonas Jenwald,"[GENERIC viewer] Re-initialize the viewer-toolbar `ColorPicker` for each PDF document

Steps to reproduce this in `master`:
 1. Open https://mozilla.github.io/pdf.js/web/viewer.html
 2. Use the ""Open""-button (in the secondaryToolbar), or drag-and-drop, to load another PDF document.
 3. Enable the highlight-editor.
 4. Try to pick a new colour.

Note how it's no longer possible to change the default highlight-colour.
The reason for this is that we're only initializing the viewer-toolbar `ColorPicker` *once*, which doesn't work since every PDF document gets its own `AnnotationEditorUIManager`-instance. To address this we simply need to re-initialize the viewer-toolbar `ColorPicker`, and note that this patch won't affect the Firefox PDF Viewer.",False
2132552d7110d663e30cb675a87dde9b2b469de6,2025-01-23 19:09:35,Jonas Jenwald,"Merge pull request #19371 from Snuffleupagus/issue-19369

[Editor] Ensure that `highlightSelection` waits until we've fully updated the editing-mode (issue 19369)",True
3b4758a400f676c7ebafa13756ccf7d58f67b470,2025-01-23 18:16:39,Jonas Jenwald,"[Editor] Ensure that `highlightSelection` waits until we've fully updated the editing-mode (issue 19369)

With the changes in PR 18843 the `AnnotationEditorUIManager.prototype.updateMode` method is now asynchronous, which we need to take into account when dispatching the ""annotationeditormodechanged"" event.",False
9241e1be8c0fb74a13bf110e172c64de2b319149,2025-01-22 16:49:44,Jonas Jenwald,"[api-minor] Simplify clean-up of page resources after rendering

After PR 2317, which landed in 2012, we'd immediately clean-up after rendering for pages with large image resources. This had the effect that re-rendering, e.g. after zooming, would force us to re-parse the entire page which could easily lead to bad performance.
In PR 16108, which landed in 2023, we tried to lessen the impact of that by slightly delaying clean-up however that's obviously not a perfect solution (and it increased the complexity of the relevant code).

Furthermore, the condition for this ""immediate"" clean-up seems a bit arbitrary to me since a page could easily contain a large number of smaller images whose total size vastly exceeds the threshold.

Hence this patch, which suggests that we remove the conditional and delayed clean-up after rendering. Compared to the situation back in 2012, a number of things have improved since:
 - We have *multiple* caches for repeated image-resources on the worker-thread[1], which helps reduce overall memory usage and improves performance.
 - We downsize huge images on the worker-thread, which means that the images we're using on the main-thread cannot be arbitrarily large.
 - The amount of available RAM on devices should be a lot higher, since more than a decade has passed.

A future improvement here, for more resource constrained environments, could be to instead clean-up when actually needed using e.g. `WeakRef`s (see issue 18148).

---
[1] More specifically:
 - `LocalImageCache`, which caches image-data by /Name and /Ref on the `PartialEvaluator.prototype.getOperatorList` level.
 - `RegionalImageCache`, which caches image-data by /Ref on the `PartialEvaluator`-instance (i.e. at the page) level.
 - `GlobalImageCache`, which caches image-data by /Ref globally at the document level.",False
745045752530819da1a83e825fd0e67328fa9dac,2025-01-22 03:59:45,Jonas Jenwald,"[api-major] Change viewer component `render`-methods to take parameter objects

This is nicer than a bunch of somewhat arbitrarily ordered parameters, and makes any future changes easier.",False
877f69886c3e000fb7be2d82d536476032f2b8e4,2025-01-21 21:11:26,calixteman,"Merge pull request #19361 from calixteman/issue19360

Correctly render the glyph outline when it has a stroke pattern",True
1ccf6ed9766db68f62fa0f95d646e7482d451f40,2025-01-21 20:00:16,Calixte Denizet,"Correctly render the glyph outline when it has a stroke pattern

It fixes #19360.

Each glyph in the test case has a fill and a stroke pattern, so the current transform used
to scale the glyph outline must be the same.
In setting the stroke color to green, I noticed that the last outline contains some non-closed
subpaths, so when generating the glyph outline, every time we 'moveTo', we close the previous
subpath.",False
79a976ce9d49c3a3510588281a386804ebdfb23a,2025-01-21 15:20:17,Jonas Jenwald,"Merge pull request #19337 from Snuffleupagus/dev-wasm

Support multiple wasm-files in the development viewer",True
23dc3ff49f41979c204b28070710cf670fd28f97,2025-01-21 02:58:50,Jonas Jenwald,"Merge pull request #19353 from Snuffleupagus/ESLint-import/no-restricted-paths

Enable the `import/no-restricted-paths` ESLint plugin rule for the viewer",True
0790d946740a09d2acd2257210990733669ac8d5,2025-01-21 02:40:36,Jonas Jenwald,"Enable the ""checks that the viewer re-exports the expected API functionality"" unit-test in Node.js

By also running `gulp generic-legacy` before the Node.js unit-tests, we can enable one more test-case in Node.js environments.",False
850e605e3628b93db15fae5ca4a9d529d6126257,2025-01-20 21:24:09,Jonas Jenwald,"Merge pull request #19356 from Snuffleupagus/bug-1942064-2

Replace the EXIF-block with dummy data to prevent JPEG images being rotated (bug 1942064)",True
c4ba3ac23f1afbef6211e838dae522ef503ca4e1,2025-01-20 21:20:22,Jonas Jenwald,"Replace the EXIF-block with dummy data to prevent JPEG images being rotated (bug 1942064)

The `ImageDecoder` will respect the EXIF orientation, which can lead to JPEG images being incorrectly rotated. To avoid this we replace the entire EXIF-block with dummy data, which works since it'll cause EXIF parsing to bail out early in Firefox; see https://searchfox.org/mozilla-central/rev/9a66d18cb35595c89f499a1011c9dd7e573fce77/image/decoders/EXIF.cpp#130-138",False
d91830c447eab73378846f13d4bcfc47cbf5b830,2025-01-20 16:10:29,Jonas Jenwald,"Enable the `import/no-restricted-paths` ESLint plugin rule for the viewer

Code in the `web/` folder cannot import directly from the `src/` folder, since that could result in most (or all) main-thread code being bundled into the viewer, and must rather be imported via the `pdfjs-lib` alias.

Let's use ESLint to help enforce this, please find additional details in https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/no-restricted-paths.md",False
01d542eee5a207432ac10986929e1aa9c1e34a78,2025-01-20 14:53:08,Jonas Jenwald,"Merge pull request #19351 from timvandermeij/integration-tests-ink

Centralize the editor selector definitions in the ink editor integration tests",True
b950c51373585e8f4382fca3d2b01831fdf6ea09,2025-01-20 14:51:00,Jonas Jenwald,"Merge pull request #19350 from timvandermeij/integration-tests-stamp

Centralize the editor selector definitions in the stamp editor integration tests",True
bd67156ef54386d12a6bde5ec57827e8f127c71d,2025-01-20 00:16:50,Tim van der Meij,"Centralize the editor selector definitions in the ink editor integration tests

In most integration tests we already use the pattern of defining the
editor selector once and reusing it in the rest of the test, but it's
not fully consistent everywhere yet. This commit fixes that for the
ink editor integration tests, which has multiple advantages:

- it improves consistency between the various editor integration tests;
- it removes duplicate function calls and aligns variable definitions;
- it reduces the number of `getEditorSelector` calls that contained
  hardcoded IDs, which helps to isolate the tests and to simplify
  follow-up patches.",False
0f95617b4cf9a4a6631c17295ec0bbe8965e494a,2025-01-20 00:03:35,Tim van der Meij,"Centralize the editor selector definitions in the stamp editor integration tests

In most integration tests we already use the pattern of defining the
editor selector once and reusing it in the rest of the test, but it's
not fully consistent everywhere yet. This commit fixes that for the
stamp editor integration tests, which has multiple advantages:

- it improves consistency between the various editor integration tests;
- it removes duplicate function calls and aligns variable definitions;
- it reduces the number of `getEditorSelector` calls and other helper
  function calls that contained hardcoded IDs (by updating them to take
  editor selectors as arguments instead of editor IDs), which helps to
  isolate the tests and to simplify follow-up patches.",False
c7b35ecd78ee36e736f31449a1c3343e430af194,2025-01-19 23:35:42,Tim van der Meij,"Enable a disabled stamp editor integration test in Chrome

Puppeteer recently got updated to version 24.0.0+, so we're past version
23.9.1- where the integration test failed before and we can enable it
again now that it passes in Chrome.",False
ac579396483d23cc74e7d49d38a8d8b024eb223a,2025-01-19 23:09:04,Tim van der Meij,"Merge pull request #19344 from timvandermeij/integration-tests-editor-helpers

Implement helper functions for (un)selecting an editor in the integration tests",True
895edafc2398538fc7e7e2bc2ca912398e4be436,2025-01-19 16:56:17,Tim van der Meij,"Implement a helper function for unselecting an editor in the integration tests

This has multiple advantages:

- it improves consistency between the various editor integration tests;
- it makes the code easier to read/understand;
- it reduces code duplication.",False
c051dd78cfeb6d308e946b7d5f9ddfe47d624c7f,2025-01-19 16:56:17,Tim van der Meij,"Implement a helper function for selecting an editor in the integration tests

This has multiple advantages:

- it improves consistency between the various editor integration tests;
- it makes the code easier to read/understand;
- it reduces code duplication;
- it reduces the number of `getEditorSelector` calls that contained
  hardcoded IDs, which helps to isolate the tests and to simplify
  follow-up patches.",False
5026af107f88d288be2e19cc839289ac6a6247b2,2025-01-19 01:05:25,Tim van der Meij,"Align variable names in the freetext editor integration tests

The `selectorEditor` name is used 57 times, but only in the freetext
editor integration tests file. The `editorSelector` name on the other
hand is used 241 times in all editor integration test files, so this
commit renames the former name to the latter name to achieve consistency
in variable names across all editor integration test files, which also
simplifies upcoming changes.",False
50b7922f8c034bda416a90b12c4562bb03f2c14e,2025-01-19 01:04:11,Tim van der Meij,"Merge pull request #19342 from timvandermeij/updates

Update dependencies to the most recent versions",True
615ed671746734190d1e21af1cab07cbf6b51712,2025-01-18 23:25:44,Tim van der Meij,Update dependencies to the most recent versions,False
54729a57b7959a3921e0e2ceb15771f911ac4ed8,2025-01-18 18:50:57,Jonas Jenwald,"Merge pull request #19341 from Snuffleupagus/api-Default-Factory

Inline the default Factory-definitions in `getDocument`",True
db43f158dc8f68ade3f67ce951bfdd4b1bf91822,2025-01-18 18:39:14,Jonas Jenwald,"Inline the default Factory-definitions in `getDocument`

 - Most of the these are only used in the `src/display/api.js` file, and this leads to slightly shorter code.

 - A number of unit-tests need a `BaseCanvasFactory`-instance, however that one is available through the `PDFDocumentProxy`-instance nowadays.

 - For other unit-tests the remaining necessary default Factory-definitions can be moved into the `test/unit/test_utils.js` file.",False
6d12d2924f912d5d1407986583de617feafa0a3b,2025-01-18 18:08:29,Tim van der Meij,"Merge pull request #19331 from Snuffleupagus/api-Factory-JSDoc

Simplify the JSDocs for the various `getDocument` Factory-parameters",True
78f612ffef0dd45dfbc69be798d5de9216b9b061,2025-01-18 14:42:03,avdoseferovic,fix: don't scroll when drawing [#17327],False
3adec3724c1b7f011b3491ccd15613c32c3900fe,2025-01-18 14:06:14,Jonas Jenwald,"Merge pull request #19340 from calixteman/issue19336

Handle the case where openjpeg.wasm is missing",True
0053b36ee772f55a048f0f58679ca6cb68dcd25a,2025-01-18 14:05:11,Jonas Jenwald,"Support multiple wasm-files in the development viewer

This prepares for a future where we're using more than one wasm-file, originating in different `external/`-folders, by extending the existing `gulp.watch` usage.
The following diff illustrates how to add more entries:

```diff
diff --git a/gulpfile.mjs b/gulpfile.mjs
index 0e0a5a1ac..1502755be 100644
--- a/gulpfile.mjs
+++ b/gulpfile.mjs
@@ -655,6 +655,10 @@ function createWasmBundle() {
       base: ""external/openjpeg"",
       encoding: false,
     }),
+    gulp.src([""external/foobar/*.wasm""], {
+      base: ""external/foobar"",
+      encoding: false,
+    }),
   ]);
 }

@@ -2125,7 +2129,7 @@ gulp.task(
     },
     function watchWasm() {
       gulp.watch(
-        ""external/openjpeg/*"",
+        [""external/openjpeg/*"", ""external/foobar/*""],
         { ignoreInitial: false },
         gulp.series(""dev-wasm"")
       );
```",False
0c14d6e2db7ec1ecaa2b66a0bbf72a3adc470b3f,2025-01-18 02:41:24,Calixte Denizet,"Handle the case where openjpeg.wasm is missing

It fixes #19336.",False
45a32b7c581590dc419cccc0cf19fb25b411b216,2025-01-17 15:59:23,Jonas Jenwald,"Merge pull request #19335 from Snuffleupagus/test-rm-console-log-spam

Reduce console spam when running tests in Firefox",True
851a52faf333a7a6dfe460a8a78ee1c02e42e47f,2025-01-17 15:59:12,Jonas Jenwald,"Merge pull request #19333 from Snuffleupagus/src-core-fetchBinaryData

Handle JPX wasm fetch-response errors correctly (PR 19329 follow-up)",True
534bd3e4a8af37fe379bdc381fd4d9aa53b5ecf8,2025-01-17 15:28:46,Jonas Jenwald,"Reduce console spam when running tests in Firefox

Rather than waiting for the upstream patch to reach the Firefox version we're using with Puppeteer, let's just set the same preference as done in https://phabricator.services.mozilla.com/D234320.",False
6038b5a99215169a64a140f39cde948aa4a835d6,2025-01-17 14:50:16,Jonas Jenwald,"Handle JPX wasm fetch-response errors correctly (PR 19329 follow-up)

Currently we're not checking that the response is actually OK before getting the data, which means that rather than throwing an error we can get an empty `ArrayBuffer`.

To avoid duplicating code we can move an existing helper into `src/core/core_utils.js` and re-use it when fetching the JPX wasm-file as well.",False
88735d0f1489854dabed6be477a9df8717595f1d,2025-01-17 03:55:39,Jonas Jenwald,"Merge pull request #19332 from Snuffleupagus/version-5.0

Bump library version to `5.0`",True
12d114bccbff533f524b46e4baa6a4376fc53238,2025-01-17 03:53:16,Jonas Jenwald,"Merge pull request #19264 from Snuffleupagus/ResponseException

[api-major] Replace `MissingPDFException` and `UnexpectedResponseException` with one exception",True
7765af228d6afb46837263d76903513e9a14603e,2025-01-17 03:37:09,Jonas Jenwald,Bump library version to `5.0`,False
1ddce76a8b1efb5e6ed0d9c9783b5c3a819fffaa,2025-01-17 03:31:36,Jonas Jenwald,"Simplify the JSDocs for the various `getDocument` Factory-parameters

Given that we nowadays provide default Node.js versions of these Factory-parameters it no longer seems necessary to mention that environment specifically.",False
75cba72ca672f842d180c21229fcd10b78cbde6e,2025-01-17 03:21:05,Jonas Jenwald,"[api-major] Replace `MissingPDFException` and `UnexpectedResponseException` with one exception

These old exceptions have a fair amount of overlap given how/where they are being used, which is likely because they were introduced at different points in time, hence we can shorten and simplify the code by replacing them with a more general `ResponseException` instead.

Besides an error message, the new `ResponseException` instances also include:
 - A numeric `status` field containing the server response status, similar to the old `UnexpectedResponseException`.

 - A boolean `missing` field, to allow easily detecting the situations where `MissingPDFException` was previously thrown.",False
7a57af12e13a47927c460e6b739a6ca132e7603d,2025-01-17 03:02:46,calixteman,"Merge pull request #19329 from calixteman/bug1935076_1

[api-major] Add openjpeg.wasm to pdf.js (bug 1935076)",True
94b4b54ef686e241a79e220c46b700e74a04966e,2025-01-17 01:39:50,Calixte Denizet,"[api-major] Add openjpeg.wasm to pdf.js (bug 1935076)

In order to fix bug 1935076, we'll have to add a pure js fallback in case wasm is disabled
or simd isn't supported. Unfortunately, this fallback will take some space.

So, the main goal of this patch is to reduce the overall size (by ~93k).
As a side effect, it should make easier to use an other wasm file (which must export
_jp2_decode, _malloc and _free).",False
711bf2bd1251a247881fb14d6c4185214eb36e16,2025-01-15 19:34:09,Jonas Jenwald,"Merge pull request #19324 from nicolo-ribaudo/search-dash-date

Allow searching for number-number on two lines",True
8358ab63b3a331cd90e06c35f26e8907cf3f7b81,2025-01-15 18:53:04,Nicolò Ribaudo,"Allow searching for number-number on two lines

When a dash separates two digits, it's very likely to not be a hyphen
inserted to split a word into two lines (e.g. ""par\n-ser""), but rather
either a minus sign, a range, or a date. For example, in the tracemonkey
PDF there is `2008-02` (a date) split across two lines.

Preserving the dash, similarly to how we do for compound words, allows
searches for ""2008-02"" to find a match.",False
2533a087793d15b63452315c6edfd834f0f884b3,2025-01-15 15:47:24,Jonas Jenwald,"Merge pull request #19327 from Snuffleupagus/issue-19326

Access the number of components correctly in JPEG 2000 images with color space entries (issue 19326)",True
e5bc760316f74fae9a104465ead7d967a6817e6f,2025-01-15 14:46:06,Jonas Jenwald,"Access the number of components correctly in JPEG 2000 images with color space entries (issue 19326)

This small typo appears to be a regression from PR 18204.",False
016de7422924e3f62d07c826965e549fcea0ff03,2025-01-14 16:32:30,Jonas Jenwald,"Merge pull request #19320 from nicolo-ribaudo/stamp-double-click

Enable editor when double-clicking on stamp annotation",True
60dd8147c66cc877ca7cf3431bda3932be159a98,2025-01-14 15:46:59,Nicolò Ribaudo,"Enable editor when double-clicking on stamp annotation

In Firefox, double-clicking on a stamp annotation triggers text
selection (selecting the last text element in the dom before the
annotation): this triggers the logic to make annotations not interfere
with text selection, which in turns prevents the double click from
triggering the annotation editor.

This commit fixes the problem by making annotations non-selectable, so
that clicking on them does not trigger text selection. Freetext
annotations were already non-selectable, so this commit doesn't change
that. However, we need to explicitly mark text in popups as selectable.",False
61995e9e377de634d68aab4ce25d2fd05cd3deb0,2025-01-14 00:51:14,Tim van der Meij,"Merge pull request #19321 from Snuffleupagus/issue-19319

Improve performance when reading very large TrueType ""cmap"" tables (issue 19319)",True
0b1a840fa2f5d4d6f1136bda77e1e1a4f0ec2a82,2025-01-14 00:48:56,Tim van der Meij,"Merge pull request #19318 from timvandermeij/puppeteer-24

Upgrade Puppeteer to version 24.0.0",True
5e569cade56f0728cc81504677912b97be5b53ba,2025-01-13 17:39:47,Jonas Jenwald,"Improve performance when reading very large TrueType ""cmap"" tables (issue 19319)

In the affected font the total number of mapping-entries is `1142348`, and no less than `997473` of them are duplicates.
Given that every duplicate causes a lot of Array elements to be moved this becomes extremely inefficient, which we can avoid by keeping track of seen `charCode`s and directly build the final mappings-Array instead.",False
d7e6d9530465182b32bff8fbcf6c382e46efab78,2025-01-13 00:18:05,Tim van der Meij,"Upgrade Puppeteer to version 24.0.0

This is a major version bump, but the changelog at
https://github.com/puppeteer/puppeteer/releases/tag/puppeteer-core-v24.0.0
doesn't indicate any breaking changes that should impact us.",False
e1b972aac3acaf5b3a13084785c740f88abb3369,2025-01-12 19:50:43,Tim van der Meij,"Merge pull request #19317 from Snuffleupagus/FontRendererFactory-reuse-helpers

Re-use existing helper functions in `FontRendererFactory`",True
db40155d3332eedd792816342cbddcf5c050fcfb,2025-01-12 19:44:56,Tim van der Meij,"Merge pull request #19313 from timvandermeij/updates

Update dependencies to the most recent versions",True
e0be2a02dc01be0a797688d15b781d02eec1cfe6,2025-01-12 17:31:54,Jonas Jenwald,"Re-use existing helper functions in `FontRendererFactory`

Currently we re-implement a number of helper functions specifically for this code, which seems completely unnecessary since there's already general purpose ones available in the `src/core/core_utils.js` file.",False
b5218853b4e3e1d87ff05202ed20f85c3ab08956,2025-01-10 23:00:55,calixteman,"Merge pull request #19312 from calixteman/improve_touch

[Editor] Improve zooming with a pinch gesture while drawing",True
3cd55212701b7bfda5747b1a42207ced39368d80,2025-01-10 21:02:22,calixteman,"Merge pull request #19311 from calixteman/issue19239

[Editor] Don't try to use an non-existing canvas when rendering an in visible existing stamp editor",True
8483ae0f88dd3c4eb6e39a80066cfdfc93f18546,2025-01-10 20:54:58,Calixte Denizet,"[Editor] Improve zooming with a pinch gesture while drawing

It lets the user make a pinch gesture with a finger on page with a drawing
and the second finger on an other page.
On mobile, it's pretty easy to be in such a situation.",False
06f72d5662c0f57388277a63a3111ebdc40168d4,2025-01-10 20:35:59,Calixte Denizet,"[Editor] Don't try to use an non-existing canvas when rendering an invisible existing stamp editor

It fixes #19239.

When the canvas isn't existing the editor has no image: it's fine because the editor is invisible.
Once it's made visible, the canvas is set when the annotation layer has been rendered.",False
45d2e808fd8d7838279a58d0cf996866861faea7,2025-01-10 03:18:00,Tim van der Meij,Update dependencies to the most recent versions,False
f1166f480f8ea78771b2ed7c76e7bc970b007305,2025-01-09 02:26:52,calixteman,"Merge pull request #19309 from calixteman/make_unique_id_draw_layer

[Editor] Set a unique id for each element in the draw layer",True
586f45b7b86dfeb8a36a7cc8e4f6419279ec5e0e,2025-01-09 01:14:15,Calixte Denizet,"[Editor] Set a unique id for each element in the draw layer

It avoids any conflict with existing elements when an elment is moved from a page
to an other.",False
573e5f54f1a206050556707a20a7a011a63389c0,2025-01-08 21:27:14,Jonas Jenwald,"Merge pull request #19305 from Snuffleupagus/issue-18816

Access the bbox/background data correctly in the `MeshShadingPattern` class (issue 18816)",True
916fff0e42e935027541fb157e64083e91363d78,2025-01-08 20:27:56,Jonas Jenwald,"Access the bbox/background data correctly in the `MeshShadingPattern` class (issue 18816)

This appears to have regressed in PR 13808, since it removed the `matrix`-entry from array returned by the `MeshShading.prototype.getIR` method *without* also updating the indexes in the `MeshShadingPattern` constructor.",False
115af68f106e2788a35e36fc83af7804573fd3a4,2025-01-08 20:27:31,Jonas Jenwald,"Merge pull request #19307 from Snuffleupagus/rm-fuzz-test

Remove the fuzz tests (issue 19297)",True
c32d49117c36bcf4564a9744a270f7dbf610d826,2025-01-08 20:24:11,Jonas Jenwald,"Remove the fuzz tests (issue 19297)

Reasons for removal:

 - These tests never generated any warnings from OSS-Fuzz, in over a year.

 - An error thrown during image decoding will lead to a broken/missing image, not a security problem.

 - These tests rely on the Jazzer.js library, which has a number of problems: It now causes failures in Node.js v23 in the CI tests, it's no longer being maintained upstream, and it lacks support for some (fairly common) CPU architectures.",False
dfbd1d5db6526a0a3a99de7dd40dc702ee976c01,2025-01-07 18:46:03,calixteman,"Merge pull request #19300 from calixteman/remove_useless_css

Remove unused CSS variables",True
1608e36de6482659b47bb9000a5e9c293015f73a,2025-01-07 14:59:23,Calixte Denizet,Remove unused CSS variables,False
e5ad7ef8632c28a302432bfd1bbfb119fcee38ec,2025-01-06 23:30:55,calixteman,"Merge pull request #19295 from calixteman/update_moz_toggle.css

Update the toggle-button css after the changes in m-c (bug 1940085)",True
6db49bedbea7a02bbb2b41e65050008e461d7525,2025-01-06 23:04:08,Calixte Denizet,Update the toggle-button css after the changes in m-c (bug 1940085),False
af5beeb861445519589a2824882fa51bc5f8f259,2025-01-06 21:54:05,calixteman,"Merge pull request #19280 from calixteman/issue19274

Let be more tolerant with predefined phone number format",True
3dd8752283771eccc4df2f2df41fbd6b6d1ac299,2025-01-06 19:54:19,Calixte Denizet,"Let be more tolerant with predefined phone number format

The long US phone number format should be '(999) 999-9999' but the parenthesis
can be omitted or the space replaced with a dash, ...",False
30012648013dca47cf790e35f705d5aca97ff661,2025-01-05 17:50:12,Tim van der Meij,"Merge pull request #19291 from timvandermeij/integration-tests-extract-freetext-commit

Implement a commit helper function for the freetext integration tests",True
26b0d4f749544ffaca8d65f18956be81181e390b,2025-01-05 17:49:11,Tim van der Meij,"Merge pull request #19290 from timvandermeij/integration-tests-use-waitforunselectededitor

Use the `waitForUnselectedEditor` integration test helper function more",True
e57f2c53a495e7c78c6254c20dcf91e87e599ad5,2025-01-05 00:52:19,Tim van der Meij,"Implement a commit helper function for the freetext integration tests

The ink editor integration tests already use a helper function for
committing the editor, so this commit mirrors the approach to the
freetext editor integration tests. This has multiple advantages:

- it improves consistency between the various editor integration tests;
- it makes the code easier to read/understand;
- it reduces code duplication (220 lines of code removed);
- it reduces the number of `getEditorSelector` calls (32 calls removed)
  that contained hardcoded IDs, which helps to isolate the tests and to
  simplify follow-up patches.",False
5126210fffb6e45752755922034d5be2abbaf2e2,2025-01-05 00:45:45,Tim van der Meij,"Use the `waitForUnselectedEditor` integration test helper function more

This commit applies the `waitForUnselectedEditor` helper function to the
remaining places, that most likely predate the introduction of the
helper function, to deduplicate the code and to have a unified way of
checking if a given editor is unselected.",False
4d4e1befeb3e44fab03a9386a67eb86bfc927f1b,2025-01-04 18:02:18,Tim van der Meij,"Merge pull request #19289 from Snuffleupagus/issue-19281

Skip LinkAnnotations when collecting field objects (issue 19281)",True
3e822399d86ba54c210b6700b2372cfbfc2b58f8,2025-01-04 17:52:51,Tim van der Meij,"Merge pull request #19278 from Snuffleupagus/more-Dict-iteration

Use `Dict` iteration more (PR 19051 follow-up)",True
7f5f4d0e66b03a05cef3cf5c540d81e5f1a46ab1,2025-01-04 17:51:45,Tim van der Meij,"Merge pull request #19277 from timvandermeij/integration-tests-remove-getselectededitors

Remove the `getSelectedEditors` integration test helper function",True
6f062abb76ebd094aca68e082203b1fc3c27e5ad,2025-01-04 16:24:45,Jonas Jenwald,"Skip LinkAnnotations when collecting field objects (issue 19281)

The `/Root/AcroForm/Fields` array contains a ""ridiculous"" number of LinkAnnotations, which obviously makes no sense since those are not form fields.
To improve performance we'll thus ignore those when collecting the field objects.",False
74c1795c9f814a58ebc390ba67032f7c3e712d33,2025-01-02 19:39:19,Jonas Jenwald,"Use `Dict` iteration more (PR 19051 follow-up)

There's a few cases where we're looping through the result of `Dict.prototype.getKeys` and then manually look-up the values, which after PR 19051 can be replaced with direct iteration instead.",False
9d09c5601432208246b8bb591a9a9f3d70ce5330,2025-01-01 20:28:09,Tim van der Meij,"Remove the `getSelectedEditors` integration test helper function

The `getSelectedEditors` function is largely a copy of the `getEditors`
function, with three small differences:

1. `getEditors` allows getting any kind of editor whereas
   `getSelectedEditors` is harcoded to only getting selected editors.
2. `getEditors` returns editor selectors (strings) whereas
   `getSelectedEditors` returns editor IDs (integers).
3. `getSelectedEditors` returns a sorted array of editor IDs whereas
   `getEditors` does not ensure that the array is sorted.

This commit makes the `getEditors` function a drop-in replacement for
the `getSelectedEditors` function to deduplicate the code and to have a
unified way of getting editors.

Note that we don't actually use the contents of the returned array
(only its length), so we can safely change `getEditors` to return a
sorted array of integer editor IDs instead. Sorting the array makes the
return value deterministic, which is a nice property for test stability,
and integer IDs are also easier to handle in test assertions. Note that
the corresponding selector strings can also easily be obtained from the
integer IDs using the `getEditorSelector` function if needed.",False
5905eb1253cfec26e9e39608f8a587888580b45b,2025-01-01 19:15:30,Tim van der Meij,"Merge pull request #19276 from timvandermeij/bump

Bump the stable version in `pdfjs.config`",True
9bd03e81dcacde58f170069b6fa5961e0e3e9d29,2025-01-01 19:12:42,Tim van der Meij,Bump the stable version in `pdfjs.config`,False
f9bea397f817100a186d0ced2aa3d4b85813b637,2024-12-31 20:56:13,Jonas Jenwald,"Merge pull request #19273 from Snuffleupagus/NetworkManager-request-methods

Remove the `requestRange`/`requestFull` methods from the `NetworkManager` class",True
01240fda89ba8a17b1a7566781900acfed739ac9,2024-12-31 20:27:26,Jonas Jenwald,"Remove the `requestRange`/`requestFull` methods from the `NetworkManager` class

Originally the code in this file was used in both the GENERIC and MOZCENTRAL builds, however that's no longer the case.
Hence we can now directly call `NetworkManager.prototype.request` and remove these old ""helper"" methods that only had a single call-site each.",False
f19b0a1804a070f07fd0c3f14e9d9bc9df02e996,2024-12-31 20:12:36,Jonas Jenwald,"Merge pull request #19271 from Snuffleupagus/l10n-update

Update l10n files",True
93ce29f136a0e917dc381a98f56c38496157f339,2024-12-31 18:21:43,Jonas Jenwald,"Update l10n files

Let's ensure that the l10n files are up-to-date before the next release.",False
61c3ed47c1bc249612c864ba522182bb0bae2b28,2024-12-31 13:37:46,Jonas Jenwald,"Merge pull request #19269 from Snuffleupagus/image-hasMask

For images that include SMask/Mask entries, ignore an SMask defined in the current graphics state (bug 986450)",True
20d5332009626d53a4b56d035909557edbae5c83,2024-12-30 18:55:07,Jonas Jenwald,"For images that include SMask/Mask entries, ignore an SMask defined in the current graphics state

From section [11.6.4.3 Mask Shape and Opacity](https://opensource.adobe.com/dc-acrobat-sdk-docs/pdfstandards/PDF32000_2008.pdf#G10.4848628) in the PDF specification:
 - An image XObject may contain its own *soft-mask image* in the form of a subsidiary image XObject in the `SMask` entry of the image dictionary (see ""Image Dictionaries""). This mask, if present, shall override any explicit or colour key mask specified by the image dictionary's `Mask` entry. Either form of mask in the image dictionary shall override the current soft mask in the graphics state.",False
8a50d2d302797c82c8e02bfab8d6617e707ea4ca,2024-12-29 20:17:11,Tim van der Meij,"Merge pull request #19259 from Snuffleupagus/more-wrapReason

Reduce duplication when handling ""DocException"" and ""PasswordRequest"" messages",True
91d801728db5c14d8dcf4f4b94b261238643a0da,2024-12-29 20:11:04,Tim van der Meij,"Merge pull request #19262 from Snuffleupagus/CompiledFont-assert-fontMatrix

Assert that the `fontMatrix` is always valid in `compileGlyph`",True
5b94c865e7641152072928794f91a0984379b5a9,2024-12-29 20:09:58,Tim van der Meij,"Merge pull request #19263 from Snuffleupagus/Type2Compiled-fix-glyphNameMap

Remove the unused `glyphNameMap` parameter from `Type2Compiled`",True
b4abfec3ac0e319286253afdb8abf9d5a92c590a,2024-12-29 20:08:47,Tim van der Meij,"Merge pull request #19260 from Snuffleupagus/src-core-simplify-ifs

Shorten some `if`-statements in the `src/core/` folder",True
0c87fce16e3734350bc5bcb9bfe45e12d5a2d423,2024-12-29 20:04:13,Tim van der Meij,"Merge pull request #19258 from Snuffleupagus/pr-15390-followup

Remove mention of Bower from the README (PR 15390 follow-up)",True
aba63696387f216fc510d6d5eba1ba1361a5817b,2024-12-27 19:01:39,Jonas Jenwald,"Remove the unused `glyphNameMap` parameter from `Type2Compiled`

As part of the changes in PR 4259, which landed over ten years ago, the `glyphNameMap` property on `Font`-instances was removed.
The reason that this didn't cause any bugs is that we always fallback on `getGlyphsUnicode`, and when using that data we also rely on `StandardEncoding`, hence we should just remove the unused parameter from the `Type2Compiled` constructor.",False
2ae5aa08cc37fadcb65cefc11b6286e50ababc8c,2024-12-27 16:11:49,Jonas Jenwald,"Assert that the `fontMatrix` is always valid in `compileGlyph`

While [bug 1893645](https://bugzilla.mozilla.org/show_bug.cgi?id=1893645) was fixed some time ago now, it still shouldn't hurt to also assert that the `fontMatrix` is always valid when invoking the `compileGlyph` method.",False
3a797317c81613b2b62fdd0e08229b1c89d91a88,2024-12-26 23:07:25,Jonas Jenwald,"Shorten some `if`-statements in the `src/core/` folder

Thanks to modern JavaScript there's some existing code that can be shortened slightly.",False
6bde49a60667160d8e8fd9d8ccb05caedeb034f5,2024-12-26 17:25:49,Jonas Jenwald,"Reduce duplication when handling ""DocException"" and ""PasswordRequest"" messages

Rather than having to manually implement the exception-handling for the ""DocException"" message, we can instead re-use (and slightly extend) the existing `wrapReason` function since that one already does what we need.

Furthermore, we can also simplify handling of the ""PasswordRequest"" message a little bit and again re-use the `wrapReason` function.

Finally, the patch makes the following smaller changes:
 - Avoid needlessly re-creating exceptions in the `wrapReason` function.
 - Use a slightly shorter parameter name in the `wrapReason` function.
 - Remove the unused entries in the `CallbackKind`/`StreamKind` enumerations.",False
c58f69dda4e89630f6f9a970c6b1615bf9d2fcde,2024-12-26 16:04:36,Jonas Jenwald,Remove mention of Bower from the README (PR 15390 follow-up),False
4547f230bac8103ebfcc038a649861bae939e81c,2024-12-23 00:52:20,Tim van der Meij,"Merge pull request #19254 from timvandermeij/refactor-tests

Improve the test folder structure",True
cdce9c2beebbefd78c7fd3983ff3bf4b107508e0,2024-12-22 18:38:56,Tim van der Meij,"Update the page title/favicon of the test runner HTML files

This commit makes sure that the font tests are no longer reported as
being unit tests and that the PDF.js logo is shown in the browser tab to
make PDF.js-specific resources/tabs more easily identifyable during e.g.
development.",False
22ad864cc7bbe0e2c61b61e1adb689dd6130303c,2024-12-22 18:38:56,Tim van der Meij,"Move the reporter file to the test root folder

The reporter is used in both the unit and the font tests, so this commit
moves it to the test root folder to more clearly indicate that this is a
shared resource and so the font tests don't have to reach into the unit
tests folder to import it (which improves separation).",False
a43fc32bf35c5bce7a4ce031cbc69cbe97d196c2,2024-12-22 18:38:55,Tim van der Meij,"Move the integration tests boot file to the integration tests folder

This file is specific to the integration tests, so this commit moves it
to bundle the integration test logic a bit better and to match the
unit/font tests in terms of folder structure for consistency.",False
94f425d2cc82fef7d831b5873191fd7d3235ab60,2024-12-21 22:50:33,Tim van der Meij,"Merge pull request #19246 from Snuffleupagus/add-missing-startWorkerTask

Add missing `startWorkerTask` calls in the ""SaveDocument"" handler",True
ec1a05c1045215b33bd62a7f49ba59a071babf43,2024-12-21 18:52:18,Jonas Jenwald,"Add missing `startWorkerTask` calls in the ""SaveDocument"" handler

Without these calls we'll not actually wait for saving to complete when document destruction runs; compare with other `WorkerTask`-usage in this file.
While I cannot imagine that this has caused any problems for library users, the code is however not technically correct as-is.",False
dd5618ebed7c36fb95d1f45e8afa1b5eea9f43f9,2024-12-20 18:52:51,Jonas Jenwald,"Merge pull request #19243 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
d34ac535f0fc0e5b45c820f0006c6bcaf2f7ea20,2024-12-20 01:47:35,Tim van der Meij,Update translations to the most recent versions,False
af0ffd29fa3f7d86e98ae7854986c99f8381b9c7,2024-12-20 01:44:29,Tim van der Meij,"Fix vulnerability in the `nanoid` dependency

This patch is generated with `npm audit fix` and fixes GHSA-mwcw-c2x4-8c55.",False
d70ede47513d09635cc5a18af93b5720bec3ebe2,2024-12-20 01:43:00,Tim van der Meij,Update dependencies to the most recent versions,False
7d0fe4544367519ed5f2a934a1c8253a6f5e184f,2024-12-20 01:22:46,Tim van der Meij,"Merge pull request #19232 from nicolo-ribaudo/scroll-to-search-result

Fix left offset when scrolling to search result",True
7bd168811c89caecb52dc0c40b4e315b647fe6d6,2024-12-19 23:49:20,Tim van der Meij,"Merge pull request #19237 from Snuffleupagus/pr-19114-followup-2

Disable the `handle reading ranges with missing/invalid ""Content-Range"" header` unit-test in Google Chrome (PR 19114 follow-up)",True
2df5d8f3ef65a16ef0eb13668e64d74891b419d0,2024-12-18 22:04:06,calixteman,"Merge pull request #19238 from calixteman/bug1938087

Take the absolute value of the font size when the annotation contents is in xhtml (bug 1938087)",True
0b487774d572e7a773a8bf5588ce47dd083df1a3,2024-12-18 21:58:41,Jonas Jenwald,"Merge pull request #19236 from Snuffleupagus/issue-19234

Add basic support for non-embedded HelveticaLTStd-Bold fonts (issue 19234)",True
723ee9bc8c5da98dda42621a6930257ef72efc07,2024-12-18 21:30:45,Calixte Denizet,Take the absolute value of the font size when the annotation contents is in xhtml (bug 1938087),False
760c4a029729b8be26b40a4d346165bd0db75bee,2024-12-18 14:45:33,Jonas Jenwald,"Disable the `handle reading ranges with missing/invalid ""Content-Range"" header` unit-test in Google Chrome (PR 19114 follow-up)

Note that PR 19212 tried to change the test-server to fix the intermittent failure in Google Chrome, however that unfortunately caused *other* unit-tests to start failing.
As long as this unit-test still runs successfully in Mozilla Firefox that should be enough, and it doesn't seem like a good use of our time to hunt down a bug that only happens in Google Chrome.",False
189183aa1a178ef10079c86b8560e06a739cc8a5,2024-12-18 14:09:22,Jonas Jenwald,Add basic support for non-embedded HelveticaLTStd-Bold fonts (issue 19234),False
4e2aabc5cd8a6b9732241adbaf7c11c027f7a3fc,2024-12-16 20:34:13,Nicolò Ribaudo,"Fix left offset when scrolling to search result

When computing the left offset of the highlighted text, we cannot use
.offsetLeft because the text might have been scaled through CSS, and it
needs to be taken into account.

Use `.getClientRects()`/`.getBoundingClientRect()` instead, which will
return measurements scaled appropriately.",False
8985d80aef7678cbf0c5fe119578560f14f4b6ce,2024-12-15 23:45:32,Tim van der Meij,"Merge pull request #19226 from Snuffleupagus/pr-19216-followup

Disable touch-zooming, in the viewer, if `AbortSignal.any` is unsupported (PR 19216 follow-up)",True
29c3b7bec5211aa4551880c60b55620372bfe0cc,2024-12-15 22:43:38,Jonas Jenwald,"Disable touch-zooming, in the viewer, if `AbortSignal.any` is unsupported (PR 19216 follow-up)

This way loading of the *entire* viewer won't break in older browsers that lack `AbortSignal.any` support; see https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/any_static#browser_compatibility",False
b781b55ea014c6080424072542a125975d22af05,2024-12-15 21:04:52,Jonas Jenwald,"Merge pull request #19225 from Snuffleupagus/version-4.10

Bump library version to `4.10`",True
780692b2265ed13c6197dd68cda43ba7c92a1713,2024-12-15 21:00:31,Jonas Jenwald,Bump library version to `4.10`,False
ac81de6ab479ea001c4359302d062157ade0a14c,2024-12-15 20:22:34,Tim van der Meij,"Merge pull request #19224 from Snuffleupagus/pr-18776-followup

[api-minor] Remove deprecated `getDocument` options (PR 18776 follow-up)",True
322616988e578fe1b40d5613a5cf9bd47bee6255,2024-12-15 20:21:20,Tim van der Meij,"Merge pull request #19214 from Snuffleupagus/issue-19205

Don't remove trailing regular spaces from the ""raw"" response headers (issue 19205)",True
490e74036556427107ab87f9e2792b19714575e5,2024-12-15 18:43:44,Jonas Jenwald,[api-minor] Remove deprecated `getDocument` options (PR 18776 follow-up),False
a8c35a9e0cca5abd5720244dcaecca22f18f9b67,2024-12-15 02:20:51,calixteman,"Merge pull request #19219 from calixteman/pinch_editor

[Editor] Add the ability to resize an editor in using a pinch gesture",True
4ed7f7f1eeff5849c7c7545b708f9660ff2a2f3e,2024-12-15 00:09:51,Calixte Denizet,[Editor] Add the ability to resize an editor in using a pinch gesture,False
8fa439826632c5e7e2f3671673998a3a4791bea0,2024-12-12 14:45:05,calixteman,"Merge pull request #19216 from calixteman/extract_pinch

Move the pinch stuff in its own file in order to use for editors",True
e0b63ecd03c67bf557a6ae6c718d2ed135e6c890,2024-12-12 03:50:01,Calixte Denizet,Move the pinch stuff in its own file in order to use for editors,False
a9c5bb25b8549766514f49e7daa7d1f527d73e46,2024-12-12 02:48:17,calixteman,"Merge pull request #19215 from calixteman/issue18911

[Editor] Avoid to focus an existing editor when enabling the layer",True
d61b882888006c8fa4479f318459999ed73c535d,2024-12-11 19:36:56,Calixte Denizet,"[Editor] Avoid to focus an existing editor when enabling the layer

It fixes #18911.",False
08e54053ff28b6cdd605b08a53d045cff9a9eb22,2024-12-11 16:46:31,Jonas Jenwald,"Don't remove trailing regular spaces from the ""raw"" response headers (issue 19205)

This bug only seems to reproduce in Google Chrome, since browsers apparently sort response headers differently.
When the issue occurs the ""raw"" response headers string looks like this:
```
content-length: 525404\r\ncontent-type: \r\n
```
and since we trim *any* leading/trailing white-space characters the ""content-type"" header isn't detected correctly, which thus leads to `new Headers(...)` throwing.

Hence we'll keep regular spaces at the end of the ""raw"" response headers string, while still removing all other kinds of trailing white-space characters.

*Note:* The response headers parsing was based on https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders#examples",False
fbac4ab5f35dd4556069b69af51f78dbaaa62229,2024-12-11 03:10:13,calixteman,"Merge pull request #19209 from calixteman/draw_touch_screen

[Editor] Improve drawing on a touch screen.",True
89f61b4262f5c722325214bfb67040804bf35c26,2024-12-11 02:24:29,Calixte Denizet,"[Editor] Improve drawing on a touch screen.

- it's now possible to start a drawing with a pen and use fingers to zoom
  or scroll without interacting with the current drawing;
- it's now possible to draw with a finger and them zoom with two fingers.",False
4d228818a9b19e2c6e943f3f8ae874093b485fef,2024-12-11 01:40:21,calixteman,"Merge pull request #19210 from calixteman/puppeteer_23.10.3

Update Puppeteer to version 23.10.3",True
b7ab5ee01831e36902e228895851e73c71cdbded,2024-12-11 00:29:54,Calixte Denizet,Update Puppeteer to version 23.10.3,False
6e33f237572b8d20b4179c04d9521d08c4389703,2024-12-11 00:26:16,calixteman,"Merge pull request #19208 from calixteman/puppeteer_23.10.2

Update Puppeteer to version 23.10.2",True
73701ad873fdee657ba6376fc11293d0aea52301,2024-12-11 00:25:55,Calixte Denizet,Update Puppeteer to version 23.10.2,False
b35999d837e52694e23d6c07dce19952f70ed91c,2024-12-10 21:26:58,calixteman,"Merge pull request #19198 from calixteman/fix_intermittent_itest_chrome

Fix intermittent failures when moving a freetext annotation in integration tests",True
74a377f72feb68e976ace12617384def4fe47a6f,2024-12-10 20:44:26,Calixte Denizet,"Fix intermittent failures when moving a freetext annotation in integration tests

When an editor is moved with the keyboard or in dragging it, it is moved in the DOM in order
to make screen readers happy. But this move is slightly postponed thanks to a setTimeout(..., 0).
The failures were very likely due to the fact that intermittently the DOM move was done in
the middle of the next key sequence which was making the move on screen failing.",False
aa589b906895faf6d629f585d1de855a8cc3eb2b,2024-12-10 19:29:18,calixteman,"Merge pull request #19206 from nicolo-ribaudo/canvas-prepend

Simplify logic to insert canvas as first element",True
62db66dd4645efadc896f628ac7a5b3067a06e77,2024-12-10 16:30:09,Nicolò Ribaudo,"Simplify logic to insert canvas as first element

Instead of conditionally checking if the `.cavnasWrapper` already
has a child element and then inserting the `canvas` before it, we can
use `.prepend` which always injects the new element as the first
child.",False
44421d36f6b22f2d5e1c76948edf9cbc3df86598,2024-12-10 15:30:01,calixteman,"Merge pull request #19201 from calixteman/fix_resize_stamp

[Editor] When resizing a stamp annotation, the opposite corner must stay fixed",True
f9ae9b06e8fc44ecff39df65282dc3ee12daf7e9,2024-12-10 01:58:21,calixteman,"Merge pull request #19204 from calixteman/set_canvas_as_first_child

Make sure the canvas is always the first child of its wrapper",True
3402b727eeab7ae3f2ba3ebf4a97adf578efa771,2024-12-10 00:25:37,Calixte Denizet,"Make sure the canvas is always the first child of its wrapper

While drawing, in zooming fast enough, it's possible, intermittently, to have the canvas
after the svg which makes the svg invisible.
So this patch makes sure to have the canvas at the right position.",False
898be9ef5ea53f42cfa9aa39825a33d6ce0c6f30,2024-12-09 23:30:26,calixteman,"Merge pull request #19202 from calixteman/avoid_to_lose_focus

[Editor] Don't commit the current drawing while zooming",True
438c641da2f9fee36ed8945830c6939bbe94db70,2024-12-09 23:29:26,calixteman,"Merge pull request #19203 from calixteman/update_openjpeg_2.5.3

Update OpenJPEG to 2.5.3",True
39bfc92b8e11efed6efcbd88e246e2854407b5fd,2024-12-09 23:16:34,Jonas Jenwald,"Merge pull request #19200 from Snuffleupagus/delete-raw-path

Remove the raw path-strings after creating the actual `Path2D` glyph-objects",True
19ea64c6d747bdb4aba6e3be751f193d5d312e0d,2024-12-09 22:32:18,Calixte Denizet,Update OpenJPEG to 2.5.3,False
166a529ddd1cb5ccc8aa9293f4380661cc9753b2,2024-12-09 21:55:36,Calixte Denizet,[Editor] Don't commit the current drawing while zooming,False
99f3e6b4ec3003a80971135869a36f787abc65f3,2024-12-09 20:37:43,Calixte Denizet,"[Editor] When resizing a stamp annotation, the opposite corner must stay fixed

It was due the resize observer which is removed thanks to this patch.
In order to reuse the dragAndDrop function in test, this patch slighty refactors it
in order to make it easier to use.",False
6153b15231a9158feb3c8f136cbe6efdd3119f39,2024-12-09 19:39:18,Jonas Jenwald,"Remove the raw path-strings after creating the actual `Path2D` glyph-objects

The `Path2D` glyph-objects are cached on the `FontFaceObject`-instance, so we can save a little bit of memory by removing the raw path-strings once they're no longer needed.",False
99eefb7b71502f23c3572008ddc0ed731d2c8c50,2024-12-09 18:45:15,calixteman,"Merge pull request #19189 from calixteman/improve_font_drawer

Improve perfs of the font renderer",True
5dc2d257adf7d598c432f0c3d294d874312bfe1d,2024-12-09 18:08:31,Jonas Jenwald,"Merge pull request #19196 from Snuffleupagus/issue-19176

Take the `userUnit` into account in the `PageViewport` class (issue 19176)",True
2b059245049f187ecdc009810bcd5febccb4f27b,2024-12-08 21:42:10,Calixte Denizet,"Improve perfs of the font renderer

Some SVG paths are generated from the font and used in the main thread
to render the glyphs.",False
6177bb5aa8e8a5b1bc362a762af214ef7f8192d1,2024-12-08 20:47:42,calixteman,"Merge pull request #19197 from calixteman/test_disableFontFace

Add a ref test for setting disableFontFace to true",True
f6662d3f7ca9fb24116f400f7527d62e94d43934,2024-12-08 20:36:25,Calixte Denizet,Add a ref test for setting disableFontFace to true,False
c6e3fc4fe688165bd9f7d6223d3ef55d935f78c1,2024-12-08 20:21:04,Jonas Jenwald,Take the `userUnit` into account in the `PageViewport` class (issue 19176),False
35573cb8e8fe4df38c167f47852c023956696c2c,2024-12-08 19:29:24,Tim van der Meij,"Merge pull request #19192 from timvandermeij/scripting-intermittent

Fix intermittent issues in the `issue14307.pdf` integration tests",True
e74080915de27b98e609877a73cbf9cddeee9ee9,2024-12-07 23:58:26,Tim van der Meij,"Fix intermittent issues in the `issue14307.pdf` integration tests

The `must check input for US zip format` integration test fails pretty
consistently in Puppeteer 23.4.0+ with `Expected '12341' to equal
'12345'`. This is reproducible with the `pdf.sandbox.external.js` hack
from https://github.com/mozilla/pdf.js/issues/18396#issuecomment-2211273743.
Investigation uncovered two issues at play here:

1. We do two `clearInput` calls, but don't await processing of the two
   sandbox events that are triggered by that action. The three tests that
   use `issue14307.pdf` are in different `describe` blocks and therefore
   reload the PDF file, so we can simply remove those calls because the
   inputs are already empty by default.

2. We don't await processing of the sandbox events that occur after
   switching to another text field. This causes the expectation failure
   because the typing actions will happen too soon and interfere with
   the sandbox event processing. We solve the issue by explicitly
   awaiting the sandbox roundtrip.

Moreover, similar to PR #19001 and #18399 we remove any remaining room
for intermittent issues by directly checking for the expected value,
which also results in shorter code.",False
3f1d07a35e8641f0b85b1262eabfb399253ff0b4,2024-12-07 19:24:57,Tim van der Meij,"Merge pull request #19191 from Snuffleupagus/Node-legacy-warn

Print more warnings about potential problems in Node.js environments",True
67076b6220a568a806810f96dace58e13d9eb170,2024-12-07 19:22:40,Tim van der Meij,"Merge pull request #19190 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
c60a6d1ebd9c2999f305c1ddbcefb7a06841c40c,2024-12-07 18:38:09,Jonas Jenwald,"Print more warnings about potential problems in Node.js environments

 - Warn if the ""regular"" PDF.js build is used in Node.js environments, since that won't load any of the relevant polyfills.

 - Warn if the `require` function cannot be accessed, since currently we're just ""swallowing"" any errors.",False
2738d1e4f6f9e37dec340d5ef41e451966a49a43,2024-12-07 18:14:57,Tim van der Meij,Update translations to the most recent versions,False
129fc66f65fd4fb63cb08b8c5a86ad60dc12336b,2024-12-07 18:14:48,Tim van der Meij,"Upgrade `eslint-plugin-perfectionist` to version 4.2.0

This requires two changes on our side:

- The order of exports in `web/viewer{-geckoview}.js` changes slightly
  because `eslint-plugin-perfectionist` aligned the sorting order with
  the `eslint-plugin-sort-exports` plugin we used before. This restores
  the change from commit 347f155.
- The `eslint-plugin-import` plugin contains a bug that causes the new
  version of `eslint-plugin-perfectionist` to be reported as unresolved.
  This issue is tracked upstream, and since the plugin works fine we
  can simply extend the ignore list we already have to avoid this error
  until the upstream bug is fixed.",False
7d1ca73acc571e48d612b9efe53a562a9f2a628d,2024-12-07 17:52:44,Tim van der Meij,Update dependencies to the most recent versions,False
b870c5d2ad12e4d8175991036f28fc97d3088de0,2024-12-07 04:02:58,Jonas Jenwald,"Merge pull request #19185 from Snuffleupagus/issue-19175

Support toggling the `PDFFindBar` options with the `Enter` key (issue 19175)",True
23c42f891bb0545a1eba1c7cc8052a3938cfba30,2024-12-06 23:01:30,calixteman,"Merge pull request #19184 from calixteman/issue19182

Get the first codepoint instead of the first char when using the toUnicode map",True
6fe6b6d6b7eead129622f73cb99bd295a1715562,2024-12-06 22:55:13,Calixte Denizet,"Get the first codepoint instead of the first char when using the toUnicode map

It fixes #19182.",False
49326f71c2baa8874bacdd37b1ddbefd8fbf198f,2024-12-06 22:23:28,Jonas Jenwald,"Support toggling the `PDFFindBar` options with the `Enter` key (issue 19175)

These DOM elements are `input type=""checkbox""` and (natively) only support being toggled with the `Space` key, however we can extend an existing event-listener to ""manually"" support the `Enter` key as well.",False
c198e0b446a77bf3653c1f163c0dc60a56b862d8,2024-12-06 21:41:33,Jonas Jenwald,"Merge pull request #19148 from nicolo-ribaudo/error-preserve-trace

Do not stringify errors when logging them",True
202b26487f7ed0bf94d84f49de0a360c39d202ff,2024-12-06 19:17:22,Nicolò Ribaudo,"Do not stringify errors when logging them

Converting errors to string drops their stack trace, making it more
difficult to debug their actual reason. We can instead pass the error
objects as-is to console.warn/error, so that Firefox/Chrome devtools
will show both the stack trace of the console.warn/error call, and the
original stack trace of the error.

This commit also enables the `unicorn/no-console-spaces` ESLint rule,
which avoids accidental extra spaces when passing multiple parameters to
`console.*` methods.",False
60eba287d46158ad1a6f274754cb8883cbcbdb44,2024-12-06 17:01:18,Jonas Jenwald,"Merge pull request #19114 from Snuffleupagus/issue-19075

Ensure that a missing/invalid ""Content-Range"" header is handled in `PDFNetworkStream` (issue 19075)",True
eff8ede33ec8d0e338ca50d6fa8dad45ad54f481,2024-12-06 16:39:36,Jonas Jenwald,"Make the `onError` callback required in `NetworkManager`

This helps ensure that loading errors are always handled correctly, and note that both `PDFNetworkStreamFullRequestReader` and `PDFNetworkStreamRangeRequestReader` already provided such a callback.",False
2661d0623bb002eedc8948e190ef9419a3593646,2024-12-06 16:39:34,Jonas Jenwald,"Ensure that a missing/invalid ""Content-Range"" header is handled in `PDFNetworkStream` (issue 19075)

In the event that the ""Content-Range"" header is missing/invalid, loading will now be aborted rather than hanging indefinitely.",False
e04b62ba2d5270ee41f2a57c11dbf34c50cc83fd,2024-12-06 16:14:32,calixteman,"Merge pull request #19164 from calixteman/issue18622

When zooming replace the css-zoomed canvas by the new one only when rendering is finished",True
f3038406b1c2685a09d300ec3f18a2b89c642b22,2024-12-06 03:45:04,Calixte Denizet,"When zooming replace the css-zoomed canvas by the new one only when rendering is finished

It fixes #18622.

It avoids to recreate a canvasWrapper element in order minimize the DOM operations.",False
ef6ecee34c24069a3935cde968e23360d54fd872,2024-12-06 03:00:35,Tim van der Meij,"Merge pull request #19178 from timvandermeij/bump

Bump the stable version in `pdfjs.config`",True
34390ca53a84315bb3c9b1184b10983e490b6086,2024-12-06 02:55:31,Tim van der Meij,Bump the stable version in `pdfjs.config`,False
a4eb8407c1b3695be0d1f91791f393655b476dd9,2024-12-06 02:08:26,Tim van der Meij,"Merge pull request #19149 from Snuffleupagus/issue-19145

Prevent Webpack from resolving `import.meta.url` statements during building (issue 19145)",True
f0a8a799a769ffddec4dc9f1c8b750a64dbe02b9,2024-12-06 02:06:54,Tim van der Meij,"Merge pull request #19177 from calixteman/issue19171

Avoid to display an alert or a confirm dialog if the message is empty",True
d1db8d6294fa1be07543ffa60795e02b4fa86b1a,2024-12-06 01:34:07,Calixte Denizet,"Avoid to display an alert or a confirm dialog if the message is empty

It fixes #19171.",False
f180de41f3d6f2ad776d4818079db7d2412e5c33,2024-12-05 20:36:34,calixteman,"Merge pull request #19174 from calixteman/ink_update_width

[Editor] Correctly update the current drawing when zooming",True
28d801e0811a6455ef0a206ecffb86044a96d454,2024-12-05 19:54:46,Jonas Jenwald,"Merge pull request #19172 from Snuffleupagus/toggleButton-hover

Ensure that the `.toggleButton`, as used in the findbar, always have visible hover/focus state (issue 19165)",True
dfa0e79553110a0b0d7b92edeaa18b404f14bd7b,2024-12-05 18:52:02,Calixte Denizet,"[Editor] Correctly update the current drawing when zooming

We were trying to update the drawing on the current page but if the drawing is an another
page then it wasn't updated.",False
9cbc5baafdbe3fec3811ebce35631eb05a09c354,2024-12-05 18:08:12,calixteman,"Merge pull request #19163 from calixteman/fix_new_ink_itest

Correctly wait for the editor mode when double clicking on an annotation in integration tests",True
61e2eceff610cbef562ee0b3696541a3921d6515,2024-12-05 17:37:57,Jonas Jenwald,"Ensure that the `.toggleButton`, as used in the findbar, always have visible hover/focus state (issue 19165)

Similar to the regular toolbarButtons that can be toggled, this ensure that it's always possible to tell when the findbar ""buttons"" are hovered/focused.",False
2ad8f6155ce7b55e82ac46d0d2b35ce59d72d52f,2024-12-05 15:18:29,Jonas Jenwald,"Merge pull request #19161 from Snuffleupagus/Promise-try

Introduce `Promise.try()` usage in the code-base",True
3ac55501e9d02db90736cb87549de3ca480e522a,2024-12-04 23:12:49,Calixte Denizet,Correctly wait for the editor mode when double clicking on an annotation in integration tests,False
ef0331877d2e47c14ef5382ac40c29ccb8d77bbc,2024-12-04 15:01:42,Jonas Jenwald,"Introduce `Promise.try()` usage in the code-base

This simplifies the creation of Promises in some cases; see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/try",False
11ce57ac2236d06e49b078e1759d271432f3799a,2024-12-04 14:15:17,calixteman,"Merge pull request #19160 from calixteman/fix_css_message_bar

Fix unused css variables (follow-up of #18900)",True
1cd3eb75d5ca275a9f97188c37c25751f0d02278,2024-12-04 13:45:01,Calixte Denizet,Fix unused css variables (follow-up of #18900),False
9a4b7c2612bf72d452e0a1c755695c64c0f007af,2024-12-03 23:57:15,calixteman,"Merge pull request #19155 from calixteman/bug1929311

[Editor] Corrrectly get the words from the alt-text when reporting the telemetry (bug 1929311)",True
e161826a44d9d902c2b479c4da949d8774b56886,2024-12-03 23:32:58,Calixte Denizet,[Editor] Corrrectly get the words from the alt-text when reporting the telemetry (bug 1929311),False
a5ce71247b330e74657c6f66a0031950af3f05d2,2024-12-03 21:23:48,calixteman,"Merge pull request #18900 from ryzokuken/popup-undo-annotation

Annotation deletion popup (bug 1899731)",True
41bf874461370e9d1c4f9d8ffb9da13bda09db56,2024-12-03 15:33:15,Aditi,Add tests for annotation delete popup,False
dd82d78a2dd82f7474136ff7efb002331e0ba586,2024-12-03 15:33:15,Ujjwal Sharma,"Pop open a message when user deletes an annotation

When a user deletes any number of annotations, they are notified of the action
by a popup message with an undo button. Besides that, this change reuses the
existing messageBar CSS class from the new alt-text dialog as much as possible.",False
962eb6206a1f982aa358cfabf04ea9599c0f6b5d,2024-12-03 03:31:22,Ujjwal Sharma,"Break messageBar class out

Move .messageBar out of .dialog into its own standalone class in order
to reuse as much of it for the upcoming feature for an undo message for
annotations.",False
f8d11a3a3af7c81df4ac175a2030d3bf4edff5c5,2024-12-02 23:36:55,Jonas Jenwald,"Merge pull request #19074 from Rob--W/issue-12744-test

Add test cases for redirected responses",True
8a2bdb1a053f2bd8bc25301e31125b26a6cc725f,2024-12-02 23:00:40,calixteman,"Merge pull request #19151 from calixteman/edit_inks

[Editor] Make ink annotation editable",True
f97b4b9a66a04ca4dadcbba51750887f9c0e2d2d,2024-12-02 22:27:49,Rob Wu,"Add test cases for redirected responses

Regression tests for issue #12744 and PR #19028",False
28b0220bc2ababce340ee0a1e8a80026a6999446,2024-12-02 22:27:49,Rob Wu,"Replace createTemporaryNodeServer with TestPdfsServer

Some tests rely on the presence of a server that serves PDF files.
When tests are run from a web browser, the test files and PDF files are
served by the same server (WebServer), but in Node.js that server is not
around.

Currently, the tests that depend on it start a minimal Node.js server
that re-implements part of the functionality from WebServer.

To avoid code duplication when tests depend on more complex behaviors,
this patch replaces createTemporaryNodeServer with the existing
WebServer, wrapped in a new test utility that has the same interface in
Node.js and non-Node.js environments (=TestPdfsServer).

This patch has been tested by running the refactored tests in the
following three configurations:

1. From the browser:
   - http://localhost:8888/test/unit/unit_test.html?spec=api
   - http://localhost:8888/test/unit/unit_test.html?spec=fetch_stream

2. Run specific tests directly with jasmine without legacy bundling:
   `JASMINE_CONFIG_PATH=test/unit/clitests.json ./node_modules/.bin/jasmine --filter='^api|^fetch_stream'`

3. `gulp unittestcli`",False
7e02c772508183106897ef12ed7e0c2fff9b4000,2024-12-02 21:45:33,Calixte Denizet,[Editor] Make ink annotation editable,False
97c7a8eb7a44a887dbbca408c3f0563efea01c7b,2024-12-02 18:32:01,calixteman,"Merge pull request #19144 from calixteman/no_focus_if_invisible

[Editor] Don't focus a newly added drawing if it isn't visible on screen",True
36b1ba8ecaa2319a3a4d0ad3b53cb8b3d0c65ae2,2024-12-02 18:31:26,calixteman,"Merge pull request #19142 from calixteman/rotated_ink

Fix the clickable area for rotated ink annotations",True
a2b889bb9ad1ac7041bbc633b60d62e85429b7e9,2024-12-02 18:08:22,Jonas Jenwald,"Prevent Webpack from resolving `import.meta.url` statements during building (issue 19145)

This fixes a Node.js-specific regression from PR 18959.",False
673c93e832db5f78a81fdadbdda1e33c388ad466,2024-12-02 15:36:13,Calixte Denizet,[Editor] Don't focus a newly added drawing if it isn't visible on screen,False
1460a8128a1f5895d7e5ff86709b753d84097205,2024-12-02 14:18:22,Calixte Denizet,Fix the clickable area for rotated ink annotations,False
d4489531668b172a5ffd4ac6a29c3eb856af79a6,2024-12-02 00:37:54,Tim van der Meij,"Merge pull request #19139 from timvandermeij/bump

Bump the stable version in `pdfjs.config`",True
33da75fb360533c9cdd5f68c2e400498d5aed02d,2024-12-02 00:34:54,Tim van der Meij,Bump the stable version in `pdfjs.config`,False
867aaf01fae5c6adfe079610be369d617a96e086,2024-12-01 22:58:03,Jonas Jenwald,"Merge pull request #19117 from Snuffleupagus/bot-forceNoChrome

Disable the browser-tests in Google Chrome on the bots",True
2bbf9b432cae1aa7da176fb17915abf3150e1f5a,2024-12-01 19:24:07,Tim van der Meij,"Merge pull request #19099 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
eb51dbf296aa4f496617d81f668f7bc13ba4315e,2024-12-01 19:19:03,Tim van der Meij,Update translations to the most recent versions,False
7784f868fc4e9efdb33909eb68247f9c4e2ac4c8,2024-12-01 19:19:03,Tim van der Meij,Update dependencies to the most recent versions,False
c40a0a647850b342e677670b968d599df113ff12,2024-12-01 19:14:43,Tim van der Meij,"Merge pull request #19137 from Snuffleupagus/PDFDocumentProperties-move-getPage

Move the `getPage` call in `PDFDocumentProperties` class",True
9f90bc911495c60f52007120f15c00e94a6e88b3,2024-12-01 19:10:38,Tim van der Meij,"Merge pull request #19136 from Snuffleupagus/WorkerMessageHandler-this

Shorten the `WorkerMessageHandler` class a little bit",True
1bc6b767c28e897fbacb86cd721724c592c111b5,2024-12-01 19:06:58,Tim van der Meij,"Merge pull request #19135 from Snuffleupagus/api-more-optional-chaining

Use even more optional chaining in the `src/display/api.js` file",True
e5f744da040cbe88893389a269640088cdd768e9,2024-12-01 16:55:16,Jonas Jenwald,"Move the `getPage` call in `PDFDocumentProperties` class

This allows us to remove an ESLint disable-statement for `arrow-body-style`, without affecting readability of the code, and fetching the metadata and the page in parallel should be a *tiny* bit more efficient as well.",False
ede589dd6e171d766bfe500968335799daa049be,2024-11-30 18:37:16,Jonas Jenwald,"Shorten the `WorkerMessageHandler` class a little bit

 - Use `this` in all scopes where that's possible, to avoid having to spell out `WorkerMessageHandler` everywhere.

 - Inline the `isMessagePort` helper function, since there's only a single call-site.

 - Use a static initialization block to move more code into the `WorkerMessageHandler` class itself.",False
4b0900fdfab71d530f143eea1bf97fff9525dbae,2024-11-30 16:36:27,Jonas Jenwald,"Use even more optional chaining in the `src/display/api.js` file

This slightly shortens the code, in various `destroy`-methods, which cannot hurt.
Also, use pre-processor checks to simplify `PDFDocumentLoadingTask.destroy` in the Firefox PDF Viewer since the `PDFWorker.fromPort`-method isn't used there.",False
8f08ca2150b96333beeae430c881f487a173d884,2024-11-30 02:14:10,calixteman,"Merge pull request #19131 from calixteman/bug1934157

Build date consistently (in term of tz) when executing some embedded JS (bug 1934157)",True
a09ea8d29a7f8c6a8757a807bb10c6afb3db0c5c,2024-11-30 01:17:59,calixteman,"Merge pull request #19124 from calixteman/simplify_pinching

Simplify the code to zoom in using a pinch gesture",True
2a337082c0f52143ba13d8c7ffc164930f94f03f,2024-11-30 00:20:21,Calixte Denizet,"Build date consistently (in term of tz) when executing some embedded JS (bug 1934157)

The date was create in UTC+0 and then amended in using set-Month/Date which take into account
the user timezone.
With this patch we build all the date in the user timezone.",False
9ecc613c08f1ec97d2107db60f1e74d06be129f1,2024-11-29 23:01:28,calixteman,"Merge pull request #19066 from jarklee/issue19056

Fix #serializeBoxes function not output correct quadPoints values for deserialize (issue19056)",True
a300b195257f085161c0e9673982151dd197c9e0,2024-11-29 22:59:18,Calixte Denizet,Simplify the code to zoom in using a pinch gesture,False
ffce4c74b566ae25f313bf0fccfc6a10301ff864,2024-11-29 22:01:28,calixteman,"Merge pull request #19129 from calixteman/issue19126

[Editor] Allow to abort the current drawing",True
4acc086292301b8c43e30fa1a15f8afb426ee373,2024-11-29 20:52:49,Calixte Denizet,"[Editor] Allow to abort the current drawing

It fixes #19126.",False
308ca2a16f2aa982ffc4bc825ff076307e01cc25,2024-11-28 22:14:14,calixteman,"Merge pull request #19123 from calixteman/improve_search_perf

Very slightly improve the performance when searching in a pdf",True
94d53d5b4527dd491c76852e4f89ba4b5feae800,2024-11-28 22:07:19,Calixte Denizet,"Very slightly improve the performance when searching in a pdf

It helps to slightly decrease memory use in reducing the number of created arrays.
In searching for ""a"" in pdf.pdf, the time spent in getOriginalIndex is decreased by
around 30%.",False
65f20b03923390cf58c6520085e96f3a6790f159,2024-11-28 21:51:34,Jonas Jenwald,"Merge pull request #19121 from Snuffleupagus/more-stopEvent

Use the `stopEvent` helper function everywhere possible",True
c784a24d45314802ba0f670703f2f4f70fb58e70,2024-11-28 21:43:09,calixteman,"Merge pull request #19122 from calixteman/issue19120

Correctly compute the mapping between text and normalized text when it contains a compound word on two lines",True
ee0df62bc8fc5a2dbfa64dc895c1370bf38cfa45,2024-11-28 21:24:21,calixteman,"Merge pull request #19093 from calixteman/refactor_ink

[Editor] Add a new base class to allow to add a drawing in the SVG layer.",True
aa9503e51f687512b3a7a48f46f47950780ef1c1,2024-11-28 20:26:04,Calixte Denizet,"Correctly compute the mapping between text and normalized text when it contains a compound word on two lines

It fixes #19120.

The original text doesn't contain the cr so we must take that into account.",False
cee65fcd4e2702b2b5ed3516fd9a33e20e3b6a93,2024-11-28 19:53:03,Calixte Denizet,"[Editor] Add a new base class to allow to add a drawing in the SVG layer.

This patch makes a clear separation between the way to draw and the editing stuff.
It adds a class DrawEditor which should be extended in order to create new drawing tools.
As an example, the ink tool has been rewritten in order to use it.",False
e1760aab8dc92b297af1016a74d6bab358aceac0,2024-11-28 17:55:56,Jonas Jenwald,Use the `stopEvent` helper function everywhere possible,False
22babd722fcdc6dddd9d77bf51a3eb39f58ff8b2,2024-11-28 00:56:45,calixteman,"Merge pull request #19109 from calixteman/click_when_dragging

[Editor] Disallow to have multiple pointers while dragging an editor",True
e695d04ca247b0f215800f032845a90d8457350d,2024-11-28 00:11:13,Calixte Denizet,"[Editor] Disallow to have multiple pointers while dragging an editor

It'll let the user dragging with two fingers.",False
fd31e728f75d8c697feabc2d6599a1d8693709db,2024-11-27 22:29:51,Jonas Jenwald,"Disable the browser-tests in Google Chrome on the bots

Given that `browsertest` repeatedly timeout in Google Chrome, and considering that Firefox is the primary development target, we stop running them on the bots to avoid having to repeatedly deal with this.

Note that we already disabled these tests *on Windows* almost three years ago, because of stability issues; see PR 14392.",False
052b001f0e733c57ebc9b54a4dd1c23a65ef392d,2024-11-27 20:40:38,calixteman,"Merge pull request #19111 from calixteman/fix_highlight_test_with_kb

Fix the highlight integration test when highlighting with the keyboard",True
5d77a64e1fe763fcfd9ec3d7014670401a953998,2024-11-27 20:08:33,Calixte Denizet,"Fix the highlight integration test when highlighting with the keyboard

These tests were failing with Puppeteer 23.9.0.",False
2200f0523c6c379b4c2e9bccc564d920e5330cd2,2024-11-27 12:49:31,Jarklee,"Fix #serializeBoxes bug inconsistent with deserialize function for highlight editor.
Add test for quadPoints order while serializing.",False
079eb24621ec97d9a258cfb2b02326154f9cdecd,2024-11-25 14:02:02,calixteman,"Merge pull request #19100 from Rob--W/test-trailing-whitespace-fixup

Drop trailing whitespace from test/unit/api_spec.js",True
131d4650a5c6831cb31a8ab3ba365544380562c5,2024-11-25 04:07:16,Rob Wu,"Drop trailing whitespace from test/unit/api_spec.js

test/unit/api_spec.js is the only JS file in the tree with trailing
whitespace. Because `trim_trailing_whitespace = true` in .editorconfig,
any editor supporting EditorConfig would trim whitespace when the file
is changed, which results in test failures.

This commit fixes the issue by trimming the trailing whitespace and
adjusting the test expectations.",False
725ae4998c054fa2937a3ae51be3035e88f08ac2,2024-11-25 02:23:45,Tim van der Meij,"Fix the type definition of the `fingerprints` getter in `src/display/api.js`

The `Array` type takes one parameter that describes the possible types
of the inner  elements. This parameter may exist of pipes to indicate
multiple possible types. However, the current type definition provides
multiple parameters; this is incorrect syntax, and TypeScript 5.7+ now
fails on this due to stricter syntax validation.

This commit fixes the issue by changing the type definition to the
proper syntax, which together with the accompanying comment about the
contents of the fingerprints array should document it sufficiently.",False
d45a61b579df021b65d1f924a1ad864c58407b09,2024-11-24 20:06:29,Tim van der Meij,"Merge pull request #19091 from Snuffleupagus/getPdfManager-async

Convert the `getPdfManager` function to be asynchronous",True
8ae5b4e44256d72003c7c9629cab3d8f776ff086,2024-11-24 20:00:22,Tim van der Meij,"Merge pull request #19096 from Rob--W/test-server-hardening

Fix path traversal issue in createTemporaryNodeServer",True
9017e80d5a6b3218f2fb70af392fdada617f4e50,2024-11-24 19:00:37,calixteman,"Merge pull request #19095 from calixteman/issue17190

Rescale the image data when they're really too large",True
f911635b588f01fa29b3d3b325e64b91ec23d42d,2024-11-24 15:07:07,Jonas Jenwald,"Merge pull request #19028 from Snuffleupagus/issue-12744

Ensure that the response-origin of range requests match the full request (issue 12744)",True
6a015588b9747dca3a43cc86a1062c1b3d070d45,2024-11-24 14:38:29,Jonas Jenwald,"Ensure that the response-origin of range requests match the full request (issue 12744)

The following cases are excluded in the patch:
 - The Firefox PDF Viewer, since it has been fixed on the platform side already; please see https://bugzilla.mozilla.org/show_bug.cgi?id=1683940

 - The `PDFNodeStream`-implementation, used in Node.js environments, since after recent changes that code only supports `file://`-URLs.

Also updates the `PDFNetworkStreamFullRequestReader.read`-method to await the headers before returning any data, similar to the implementation in `src/display/fetch_stream.js`.

*Note:* The relevant unit-tests are updated to await the `headersReady` Promise before dispatching range requests, since that's consistent with the actual usage in the `src/`-folder.",False
1ef670411af2a49f0d51c3f33cc01516218bca6d,2024-11-24 03:12:30,Calixte Denizet,"Rescale the image data when they're really too large

It fixes #17190.",False
17da8ee8fa6456b29f9b66442cd7322aa75de709,2024-11-24 02:02:24,Rob Wu,"Fix path traversal issue in createTemporaryNodeServer

The test-only createTemporaryNodeServer helper featured a path traversal
vulnerability. This enables attackers with network access to the device
to read arbitrary files while unit tests are running that activate this
test server.

This patch fixes the issue by validation of paths.

To test this vulnerability before the patch:

1. Run the test-only server:

```
node -e 'console.log(require(""./test/unit/test_utils.js"").createTemporaryNodeServer().port)
```

2. From another terminal, send the following request (modify the port to
   the port reported in the previous step):

```
curl --path-as-is http://localhost:45755/../../package.json
```

Before the patch, the second step would traverse the directory, and
return results from the root of the PDF.js repository, instead of files
within test/pdfs/.

With the patch, the server refuses the request with HTTP status 400.",False
8ec399d7e184ee74bd3acec272e1d684cfddf3eb,2024-11-22 22:19:43,Jonas Jenwald,"Convert the `getPdfManager` function to be asynchronous

This is fairly old code, and by making the function `async` we can handle initialization errors ""automatically"" without the need for try-catch statements.",False
1f6cc8513456d7a4fe61a48c6d0a11e7c7ee49fb,2024-11-22 21:29:54,calixteman,"Merge pull request #19088 from calixteman/no_movementXY

[Editor] Avoid to use event.movementX/Y when resizing an editor",True
c08b5b2a94e1b6e4ffdc3336808c70aecfacfe5d,2024-11-22 19:25:53,Calixte Denizet,"[Editor] Avoid to use event.movementX/Y when resizing an editor

Those propertie can have some non-expected values so use screenX/Y instead.",False
086cb6630e5a9f6bcd7a96dea891d19bd0d19d82,2024-11-22 14:23:49,calixteman,"Merge pull request #19087 from calixteman/no_scroll_when_dragging

[Editor] Avoid to scroll when dragging an editor on a touch screen",True
5133e6b6661eaa1fd7ae8d50e5164c8e81f1aa9b,2024-11-22 13:46:48,calixteman,"Merge pull request #19085 from calixteman/simplify_drawer

[Editor] Simplify the draw layer code",True
aef150d38aadb8de8fd1f16016e40c82d61129b6,2024-11-22 03:24:07,Calixte Denizet,[Editor] Avoid to scroll when dragging an editor on a touch screen,False
5b600e8f8415234566e831d2b48d64f0ea27d8f7,2024-11-21 23:10:04,calixteman,"Merge pull request #19086 from calixteman/issue19083

Use the V entry as an option when no options in a choice widget",True
3c343acbb646acc4cd0416d96bfce7ef9e58f8e7,2024-11-21 22:20:35,Calixte Denizet,"[Editor] Simplify the draw layer code

and tweak a bit the highlight one (e.g. it's useless to have 64 bits floating point numbers
when 32 bits ones are enough).

It's a required step for the refactoring of the ink tool (in order to use the draw layer).
It avoids to call several functions acting on the same SVG element.",False
b0b0de98e737fb39c9b1cff9a82b78689959af42,2024-11-21 21:57:34,Calixte Denizet,"Use the V entry as an option when no options in a choice widget

It fixes #19083.

It isn't really a fix but more a workaround (we should correctly implement the
choice widget as a mix of text input+select).",False
445b7ece613a8e5c80af95a3e0d9fb3d8e8dba4d,2024-11-21 19:47:14,Jonas Jenwald,"Merge pull request #19084 from Snuffleupagus/getUuid-shorten

Simplify the `getUuid` helper function",True
c290a12ce13075ec665b936709d31896e896b463,2024-11-21 17:41:10,Jonas Jenwald,"Simplify the `getUuid` helper function

We can remove most feature testing from this helper function, with the exception of `randomUUID` since that's only available in ""secure contexts"", and also remove the fallback code-path.
Note that this code was only added for Node.js compatibility, and it's no longer necessary now that the minimum support version is `20`; see also https://developer.mozilla.org/en-US/docs/Web/API/Crypto#browser_compatibility

Finally, this patch also adds a basic unit-test for the helper function.",False
07765e993ea25143a15ddb7ea81d81ce49e16591,2024-11-20 01:12:12,Tim van der Meij,"Merge pull request #19069 from calixteman/stamp_test

Fix 'must load a SVG, delete it and undo' integration test",True
c31ccc68474afbc22b916376658c7086359d1a7d,2024-11-20 01:03:33,Tim van der Meij,"Merge pull request #19071 from Snuffleupagus/no-single-promise-in-promise-methods

Enable the `unicorn/no-single-promise-in-promise-methods` ESLint plugin rule",True
e8fbb602c556c8bfa6257a51a559c0b8f02a630d,2024-11-20 01:01:49,Tim van der Meij,"Merge pull request #19064 from timvandermeij/fix-intermittent

Fix the ""must check that an infinite loop is not triggered"" integration test",True
b38b12d48a14b1dd6b10342a75da7eb5191b88c0,2024-11-19 16:09:02,Jonas Jenwald,"Enable the `unicorn/no-single-promise-in-promise-methods` ESLint plugin rule

Please see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-single-promise-in-promise-methods.md",False
eefaca07c34fe0ba9dac52b6b28bab5b4932e612,2024-11-19 01:55:59,Calixte Denizet,"Fix 'must load a SVG, delete it and undo' integration test

We wait for the canvas before trying to serialize the annotation in order to make sure the image has been loaded.",False
f4061190fa803c9073c20fccb6d0a6bff4d35f59,2024-11-18 21:07:37,Jonas Jenwald,"Merge pull request #19068 from nicolo-ribaudo/json-imports

Use JSON imports instead of PDFJSDev.json",True
a8592d86a992a619a6d9d1ce1f7b97386b5a6943,2024-11-18 20:51:12,Nicolò Ribaudo,"Use JSON imports instead of PDFJSDev.json

JSON imports are now supported by all tools used in PDF.js' build
process. The `chromecom.js` file is bundled by webpack and
import attributes are thus removed, so browser compatibility for this
new syntax is not relevant.",False
658a0a16c15dff3e7d6c08222aee64b4d64166b3,2024-11-18 19:41:57,calixteman,"Merge pull request #18669 from calixteman/stylint_update

Update svglint to 3.1.0",True
1c5d93cf2d6de683f56ab9a6243c0da0edcfabd1,2024-11-18 19:30:07,Calixte Denizet,"Update svglint to 3.1.0

The new release contains:
 - https://github.com/simple-icons/svglint/pull/110
 - https://github.com/simple-icons/svglint/pull/111

which allow us to slightly simplify our code.",False
973b67f04759941bdbce962cd98abbc62ca84756,2024-11-18 01:53:04,Tim van der Meij,"Fix the ""must check that an infinite loop is not triggered"" integration test

This integration test fails intermittently, locally at least in Chrome
with Puppeteer 23.4.0+, with the following errors:

```
In chrome: Expected '123Hello' to equal 'Hello123'.
In chrome: Expected '123Hello' to equal '123'.
```

This happens because the test before it left queued sandbox events
behind. We don't close the document between tests, so those get run
when we click the textbox in this test and that interferes with our
selection/typing actions. This commit fixes the issue by flushing the
queued sandbox events in the first test, which makes sure that state
no longer leaks through to the next test and thus improves isolation.

Morever, similar to commit 3adf8b6 we use safer assertions to avoid
further intermittent failures, and we replace the `page.$eval` call
with a simpler Home button push like we already do in e.g. the test
helpers. This combined makes the code shorter and simpler.",False
3219d4905df61516e7097fdc7211de569d90584e,2024-11-18 00:29:15,Tim van der Meij,"Merge pull request #19061 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
21137963b2b95f7581b6996c740a694c20db285a,2024-11-18 00:27:53,Tim van der Meij,"Merge pull request #19062 from timvandermeij/gitpod

Remove obsolete Gitpod files",True
e18cf977330531f5c955b619d34d4bc4e1dea7f9,2024-11-18 00:25:28,Tim van der Meij,Update translations to the most recent versions,False
50d79736f52b7d84be1cd5be55450fd54961518c,2024-11-18 00:25:28,Tim van der Meij,Update dependencies to the most recent versions,False
093485d491be3fe1f6c656dd156d97af2c1556e5,2024-11-18 00:22:48,Tim van der Meij,"Remove obsolete Gitpod files

In PR #11300 Gitpod support got introduced, but we re-evaluated that
decision in #11732. In PR #11800 the support was partially reverted,
but the actual Gitpod files were kept to not outright break potential
workflows because at the time we were not sure if, and if so how often,
Gitpod was actually used for contributing to PDF.js.

However, in addition to the concerns mentioned in #11732 after five
years we haven't seen any contributions that clearly originated from
Gitpod, and the files have not been updated after e.g. PR #11807 and
PR #17913 because it's not a workflow that we maintain or are able
to test (nor have we seen Gitpod community contributions for this).

This commit therefore removes the remaining Gitpod files to reduce
maintainance burden for PDF.js. Note that users of Gitpod can still
contribute to PDF.js via the platform; we just don't provide/manage
workspace files from this repository anymore.",False
8a8b69f456be90010c4892d24fddf31d9f97a68d,2024-11-17 22:30:48,calixteman,"Merge pull request #19054 from calixteman/issue18630

When saving some annotations with the same name, set the value in the parent",True
e2bbcb544aeb8d031c37cd3d14c84c2d30dbe6c0,2024-11-17 21:02:48,Tim van der Meij,"Merge pull request #19045 from Snuffleupagus/api-rm-isChrome

[api-minor] Disable `ImageDecoder` usage by default in Chromium browsers",True
fc0484904eb0150ef6b6483ea3952e5dfc96a9a3,2024-11-17 21:01:37,Tim van der Meij,"Merge pull request #19059 from Snuffleupagus/DOMFilterFactory-rm-_hcmCache

Improve clean-up of `#_hcmCache`-data in `DOMFilterFactory.prototype.destroy`",True
2da586527f00096d83663c3ce3138b9e9fd8c579,2024-11-17 20:25:20,Calixte Denizet,"When saving some annotations with the same name, set the value in the parent

It fixes #18630.",False
4c57ec4da7415200d6fd74c1d9c4f588f4307cdf,2024-11-17 20:01:42,Jonas Jenwald,"Improve clean-up of `#_hcmCache`-data in `DOMFilterFactory.prototype.destroy`

 - Use optional chaining when clearing various data-structures, since that's slightly shorter.

 - Ensure that checking for the existence of `#_hcmCache`-data won't cause it to be initialized. (Note how `this.#hcmCache` is actually a getter.)

 - Actually reset the `#_hcmCache`-data when that's appropriate, e.g. when closing the PDF document.",False
bc919859417f311b3e97e5f260a88588819a6090,2024-11-17 17:29:02,Jonas Jenwald,"Merge pull request #19051 from Snuffleupagus/Dict-Map

Convert the `Dict`-implementation to use a `Map` internally",True
823e700b3bd19b4ecf9a85c12dca33f7c4d4efd8,2024-11-17 17:19:20,Jonas Jenwald,"Merge pull request #19057 from Snuffleupagus/extendCMap-avoid-lookup

Avoid redundant CMap-value lookup in `extendCMap` (PR 5101 follow-up)",True
15a5e47e64b73890eabbb32b7001633f5d6201ba,2024-11-17 17:15:50,Tim van der Meij,"Merge pull request #19042 from Snuffleupagus/eslint-no-console

Enable the ESLint `no-console` rule in parts of the code-base",True
2c0cc48d1ba0b02cff317acaeb034b015cdf9ce4,2024-11-17 17:15:32,Jonas Jenwald,"Replace the `forEach` method in `Dict` with ""proper"" iteration support",False
691be77f65eec60d8b95a980a6dddd638672ec1e,2024-11-17 17:14:06,Jonas Jenwald,"Convert the `Dict`-implementation to use a `Map` internally

With all the recent work happening under https://bugzilla.mozilla.org/show_bug.cgi?id=1851662, the performance of `Map` is already good enough that I believe that we should now be able to utilize it in the `Dict`-class without problem.

This patch was tested in Firefox Nightly, specifically build https://hg.mozilla.org/mozilla-central/rev/6c508a387477e3b72db913a9e1761e9a433d06a2, with the following manifest file:
```
[
  {
    ""id"": ""tracemonkey-eq"",
    ""file"": ""pdfs/tracemonkey.pdf"",
    ""md5"": ""9a192d8b1a7dc652a19835f6f08098bd"",
    ""rounds"": 100,
    ""type"": ""eq""
  },
  {
    ""id"": ""issue2618"",
    ""file"": ""pdfs/issue2618.pdf"",
    ""md5"": ""2c554a99a52288ca1a44a422eeafb8fb"",
    ""rounds"": 100,
    ""type"": ""eq""
  }
]
```
which gave the following results, indicating no significant regression, when comparing this patch against the `master` branch:
 - Overall
   ```
   -- Grouped By browser, pdf, stat --
   browser | pdf            | stat         | Count | Baseline(ms) | Current(ms) | +/- |    %  | Result(P<.05)
   ------- | -------------- | ------------ | ----- | ------------ | ----------- | --- | ----- | -------------
   firefox | issue2618      | Overall      |   100 |          678 |         678 |   0 |  0.04 |
   firefox | issue2618      | Page Request |   100 |            1 |           1 |   0 | -3.88 |
   firefox | issue2618      | Rendering    |   100 |          677 |         677 |   0 |  0.05 |
   firefox | tracemonkey-eq | Overall      |  1400 |           35 |          36 |   0 |  0.96 |
   firefox | tracemonkey-eq | Page Request |  1400 |            1 |           1 |   0 | -8.08 |
   firefox | tracemonkey-eq | Rendering    |  1400 |           34 |          35 |   0 |  1.26 |
   ```

 - Page-specific
   ```
   -- Grouped By browser, pdf, page, stat --
   browser | pdf            | page | stat         | Count | Baseline(ms) | Current(ms) | +/- |     %  | Result(P<.05)
   ------- | -------------- | ---- | ------------ | ----- | ------------ | ----------- | --- | ------ | -------------
   firefox | issue2618      | 0    | Overall      |   100 |          678 |         678 |   0 |   0.04 |
   firefox | issue2618      | 0    | Page Request |   100 |            1 |           1 |   0 |  -3.88 |
   firefox | issue2618      | 0    | Rendering    |   100 |          677 |         677 |   0 |   0.05 |
   firefox | tracemonkey-eq | 0    | Overall      |   100 |           23 |          24 |   0 |   1.24 |
   firefox | tracemonkey-eq | 0    | Page Request |   100 |            1 |           1 |   0 |  19.77 |
   firefox | tracemonkey-eq | 0    | Rendering    |   100 |           23 |          23 |   0 |   0.40 |
   firefox | tracemonkey-eq | 1    | Overall      |   100 |           32 |          32 |  -1 |  -1.89 |
   firefox | tracemonkey-eq | 1    | Page Request |   100 |            1 |           1 |   0 | -28.13 |
   firefox | tracemonkey-eq | 1    | Rendering    |   100 |           31 |          31 |   0 |  -0.77 |
   firefox | tracemonkey-eq | 2    | Overall      |   100 |           17 |          18 |   1 |   4.60 |
   firefox | tracemonkey-eq | 2    | Page Request |   100 |            1 |           1 |   0 |  23.53 |        slower
   firefox | tracemonkey-eq | 2    | Rendering    |   100 |           17 |          17 |   1 |   3.71 |
   firefox | tracemonkey-eq | 3    | Overall      |   100 |           23 |          24 |   0 |   1.71 |
   firefox | tracemonkey-eq | 3    | Page Request |   100 |            1 |           1 |   0 |   7.79 |
   firefox | tracemonkey-eq | 3    | Rendering    |   100 |           23 |          23 |   0 |   1.55 |
   firefox | tracemonkey-eq | 4    | Overall      |   100 |           31 |          31 |   1 |   2.49 |
   firefox | tracemonkey-eq | 4    | Page Request |   100 |            1 |           1 |   0 |  48.96 |
   firefox | tracemonkey-eq | 4    | Rendering    |   100 |           30 |          30 |   0 |   1.05 |
   firefox | tracemonkey-eq | 5    | Overall      |   100 |           31 |          30 |  -1 |  -2.42 |
   firefox | tracemonkey-eq | 5    | Page Request |   100 |            2 |           1 |  -1 | -49.33 |
   firefox | tracemonkey-eq | 5    | Rendering    |   100 |           29 |          29 |   0 |  -0.03 |
   firefox | tracemonkey-eq | 6    | Overall      |   100 |           27 |          27 |   0 |   1.81 |
   firefox | tracemonkey-eq | 6    | Page Request |   100 |            1 |           1 |   0 |   4.94 |
   firefox | tracemonkey-eq | 6    | Rendering    |   100 |           26 |          27 |   0 |   1.68 |
   firefox | tracemonkey-eq | 7    | Overall      |   100 |           26 |          26 |   1 |   3.13 |
   firefox | tracemonkey-eq | 7    | Page Request |   100 |            1 |           1 |   0 |   6.98 |
   firefox | tracemonkey-eq | 7    | Rendering    |   100 |           25 |          25 |   1 |   2.92 |
   firefox | tracemonkey-eq | 8    | Overall      |   100 |           25 |          26 |   1 |   5.16 |
   firefox | tracemonkey-eq | 8    | Page Request |   100 |            1 |           1 |  -1 | -41.84 |
   firefox | tracemonkey-eq | 8    | Rendering    |   100 |           23 |          25 |   2 |   8.19 |
   firefox | tracemonkey-eq | 9    | Overall      |   100 |           33 |          33 |   0 |   0.03 |
   firefox | tracemonkey-eq | 9    | Page Request |   100 |            1 |           1 |   0 |   0.79 |
   firefox | tracemonkey-eq | 9    | Rendering    |   100 |           32 |          32 |   0 |  -0.10 |
   firefox | tracemonkey-eq | 10   | Overall      |   100 |          144 |         144 |   1 |   0.52 |
   firefox | tracemonkey-eq | 10   | Page Request |   100 |            2 |           1 |  -1 | -43.52 |
   firefox | tracemonkey-eq | 10   | Rendering    |   100 |          141 |         143 |   2 |   1.18 |
   firefox | tracemonkey-eq | 11   | Overall      |   100 |           24 |          25 |   1 |   2.51 |
   firefox | tracemonkey-eq | 11   | Page Request |   100 |            1 |           1 |   0 |  -4.71 |
   firefox | tracemonkey-eq | 11   | Rendering    |   100 |           23 |          24 |   1 |   2.78 |
   firefox | tracemonkey-eq | 12   | Overall      |   100 |           40 |          39 |  -1 |  -1.67 |
   firefox | tracemonkey-eq | 12   | Page Request |   100 |            1 |           1 |   0 |  14.71 |
   firefox | tracemonkey-eq | 12   | Rendering    |   100 |           39 |          38 |  -1 |  -1.98 |
   firefox | tracemonkey-eq | 13   | Overall      |   100 |           19 |          20 |   1 |   3.09 |
   firefox | tracemonkey-eq | 13   | Page Request |   100 |            1 |           1 |   0 |  24.79 |
   firefox | tracemonkey-eq | 13   | Rendering    |   100 |           18 |          19 |   0 |   1.70 |
   ```",False
729e3190ebcf8ad1ce5a1f390d9cefa609055ff5,2024-11-17 17:14:06,Jonas Jenwald,"Fix a couple of bugs affecting benchmarking

 - Ensure that `pdfjsTestingUtils` is available when running benchmarking, since that shouldn't be done in TESTING-mode.

 - Exclude the `test/stats/results/` folder from linting, since it'll contain *generated* JSON-files.",False
a719c3c067dc2b50e6337d6e5432d5ccaa8ac5f4,2024-11-17 16:53:49,Tim van der Meij,"Merge pull request #19050 from Snuffleupagus/evaluator-no-var

Enable the ESLint `no-var` rule in the `src/core/evaluator.js` file",True
cab98b8ca99f6c67ac0a2fa5fce50f372aa1e7d0,2024-11-17 16:51:33,Tim van der Meij,"Merge pull request #19052 from Snuffleupagus/pr-19029

Remove the `extensions/chromium/.eslintrc` file (PR 19029 follow-up)",True
8783dd017861b3ff13af7f69d5af0da042a6f365,2024-11-17 16:27:45,Jonas Jenwald,"Avoid redundant CMap-value lookup in `extendCMap` (PR 5101 follow-up)

When iterating through `useCMap` the value is already available, without having to manually invoke the `lookup`-method.
While this will likely not affect performance in any noticeable way, it's nonetheless unnecessary to lookup an already available value twice.",False
6f3f3be7a35c071c787921ce40f61a41ee5f1cf2,2024-11-16 19:18:44,Jonas Jenwald,"Remove the `extensions/chromium/.eslintrc` file (PR 19029 follow-up)

This file became unused in PR 19029, but we apparently forgot to remove it.",False
c082169caea6814beea92f6e71236032af021588,2024-11-15 17:06:51,Jonas Jenwald,"Enable the ESLint `no-var` rule in the `src/core/evaluator.js` file

This was previously attempted in PR 13371, but had to be reverted because of issues related to SystemJS (which has since been removed).

Also, while unrelated, shortens an existing conditional assignment.",False
af3c1f2a0d0065ae44b29aa91f96be81ead3e4f7,2024-11-14 17:11:39,Jonas Jenwald,"Enable the ESLint `no-console` rule in parts of the code-base

The purpose of these changes is to make it more difficult to accidentally include logging statements, used during development and debugging, when submitting patches for review.

For (almost) all code residing in the `src/` folder we should use our existing helper functions to ensure that all logging can be controlled via the `verbosity` API-option.

For the `test/unit/` respectively `test/integration/` folders we shouldn't need any ""normal"" logging, but it should be OK to print the *occasional* warning/error message.

Please find additional details about the ESLint rule at https://eslint.org/docs/latest/rules/no-console",False
471284f51b3e89eac74af038332052b99a3e2298,2024-11-14 16:35:15,Jonas Jenwald,"[api-minor] Disable `ImageDecoder` usage by default in Chromium browsers

Given that there are multiple issues with `ImageDecoder` in Chromium browsers, affecting both BMP and JPEG images, for now we (by default) disable that functionality there to avoid problems.

This also means that we can remove the previously added, and separate, `isChrome` API-option.",False
9bf9bbda0b828f528679a981eb416b805880460e,2024-11-13 13:49:05,Jonas Jenwald,"Merge pull request #19031 from Snuffleupagus/api-isImageDecoderSupported

[api-minor] Add a `getDocument` option to disable `ImageDecoder` usage",True
f197c9faec216c1ed8239a1abcda0cd95a31f9cc,2024-11-13 02:13:00,Tim van der Meij,"Merge pull request #19033 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
172e1bf2c22fe64ce2b882707209738bcd9546aa,2024-11-13 02:12:15,Tim van der Meij,"Merge pull request #19035 from timvandermeij/python3.13

Use Python 3.13 in the GitHub workflows",True
913738644a4dacc55190b4b5d7a89bcaf1b21900,2024-11-13 01:29:01,Tim van der Meij,"Use Python 3.13 in the GitHub workflows

Python 3.13 is the current version and was released over a month ago
(see https://devguide.python.org/versions). The dependencies we use now
support Python 3.13, most importantly `fonttools` which uses OS-specific
builds and for which compatibility got introduced in
https://github.com/fonttools/fonttools/pull/3656 and the corresponding
`cp313` wheels for all distributions are published on
https://pypi.org/project/fonttools/#files.

Moreover, we fix forgotten `npx` usage in the font tests README which
was encountered while testing this patch.",False
cfbbf61dd988f9eeeea0a3817da19e156435ca8e,2024-11-13 01:06:16,Tim van der Meij,Update translations to the most recent versions,False
499fab998e056e0880762c4a84176b32170cdbf2,2024-11-13 01:05:50,Tim van der Meij,"Upgrade `eslint` to version 9

This is unblocked now that all dependencies have been updated and the
flat configuration format (compatible with ESLint 8 and 9) was
introduced first. The following deprecation warnings during `npm
install` are resolved by this upgrade:

```
npm warn deprecated @humanwhocodes/config-array@0.13.0: Use @eslint/config-array instead
npm warn deprecated @humanwhocodes/object-schema@2.0.3: Use @eslint/object-schema instead
npm warn deprecated eslint@8.57.1: This version is no longer supported. Please see https://eslint.org/version-support for other options.
```

Note that according to https://eslint.org/version-support ESLint 8 is
officially EOL now, and ESLint 9 has been released for over seven
months and is the only officially supported version.

Fixes #17928.",False
cdb32dae459173918dda2ed417ebac98edc16137,2024-11-13 00:52:27,Tim van der Meij,Update dependencies to the most recent versions,False
6676492920510c92c6f3322df5b752b9e3567e6e,2024-11-13 00:26:39,Tim van der Meij,"Merge pull request #19021 from Snuffleupagus/PartialEvaluator-#fetchData

Add a `PartialEvaluator` helper for fetching CMap and Standard Font data",True
65eedfb0fc6d62cbf46bb1b72ad23f2d6d343982,2024-11-12 21:42:42,Jonas Jenwald,"[api-minor] Add a `getDocument` option to disable `ImageDecoder` usage

This allows end-users to forcibly disable `ImageDecoder` usage, even if the browser appears to support it (similar to the pre-existing option for `OffscreenCanvas`).",False
fe5967c84e9d56a25536dec0cf99c97cd20352f6,2024-11-12 20:52:54,Jonas Jenwald,"Merge pull request #19029 from nicolo-ribaudo/eslint-flat-config

Migrate to ESLint flat config",True
9e6ff979dbcbdacbebebd8baf9984c34d856fe2b,2024-11-12 20:45:17,Nicolò Ribaudo,"Migrate to ESLint flat config

Flat config is the new config system used by ESLint 9.
To make the migration easier, they also added
flat config support to ESLint 8.

This commit migrates the various ESLint configs in the repository to use
the new system, **without** upgrading to ESLint 9 yet.",False
13a231cd3b95fc29f31f81344ac15e4162e9efe1,2024-11-12 18:22:20,calixteman,"Merge pull request #19026 from calixteman/refactor_newrefs_saving

Simplify saving added/modified annotations.",True
4bf77870848f75dcd38fea55351c739572629f25,2024-11-12 15:29:38,Calixte Denizet,"Simplify saving added/modified annotations.

Having this map to collect the different changes will allow to know if some objects have already been modified.",False
7a962031e90d3b19604f430dae9d4df4712c12f7,2024-11-11 23:41:30,calixteman,"Merge pull request #19024 from calixteman/disable_test_chrome

Disable ref test 'issue18896' for Chrome because it takes too much time",True
92b7374aad26cf7573cc317cd8b67db5c17c5e81,2024-11-11 23:25:56,Calixte Denizet,Disable ref test 'issue18896' for Chrome because it takes too much time,False
2ad87824287cfe9a492140e4c2a992d98a603e0b,2024-11-11 21:45:50,calixteman,"Merge pull request #19023 from calixteman/issue19022

Apply gradient when stroking text",True
79e1f155ac2118979e6c17ca119efd97f8f44058,2024-11-11 20:23:07,Calixte Denizet,"Apply gradient when stroking text

It fixes #19022.

I noticed that the glyph contours weren't correct (for T and x) and
because we forgot to close the contour.",False
16e86878d2ff7f84548a601dc92cb17b65508485,2024-11-11 16:27:28,Jonas Jenwald,"Add a `PartialEvaluator` helper for fetching CMap and Standard Font data

This avoids a little bit of code duplication, which cannot hurt.",False
5524216c23b02a527499aa648d1e9a42839b40c7,2024-11-11 00:15:01,Jonas Jenwald,"Merge pull request #19015 from Snuffleupagus/@napi-rs/canvas

[api-minor] Replace the `canvas` package with `@napi-rs/canvas`",True
b9c17efe35f81aca8bf40df24524bc6aa90793e0,2024-11-10 23:01:00,Tim van der Meij,"Merge pull request #19019 from Snuffleupagus/userUnit-shorten

Shorten the `Page.prototype.userUnit` getter slightly",True
34e4c4f9b693de9be264862f91f977ac28c8e282,2024-11-10 21:35:55,calixteman,"Merge pull request #19018 from calixteman/issue19008

Set the padding of the buttons in the toolbars to zero",True
0b864ee7d542baefccfd552a864c89b950a206df,2024-11-10 21:00:07,Jonas Jenwald,Shorten the `Page.prototype.userUnit` getter slightly,False
ca3b777b89138d038ee6f386566fd0a20f755405,2024-11-10 03:00:50,Calixte Denizet,"Set the padding of the buttons in the toolbars to zero

It fixes #19008.
In Firefox on mac, the default padding is set to 4px and with Firefox for iOS, it's set to 13px.
The padding is useless for such buttons.",False
9b62f2e7d1086a3febe0027aa02b0e9daf876abe,2024-11-09 23:21:32,Jonas Jenwald,"Polyfill `ImageData` in Node.js environments

Given that `ImageData` has been supported for many years in all browsers, see [MDN](https://developer.mozilla.org/en-US/docs/Web/API/ImageData#browser_compatibility), we have a `typeof` check that's only necessary in Node.js environments.
Since the `@napi-rs/canvas` package provides that functionality, we can thus add an `ImageData` polyfill which allows us to ever so slightly simplify the code.",False
86f943ca033c059b72f7dacfbd999f27efb01e9e,2024-11-09 23:21:29,Jonas Jenwald,"[api-minor] Replace the `canvas` package with `@napi-rs/canvas`

The `@napi-rs/canvas` package has fewer dependencies, which should *hopefully* make installing and using it easier for `pdfjs-dist` end-users. (Over the years we've seen, repeatedly, that `canvas` can be difficult to install successfully.)
Furthermore, this package includes more functionality (such as `Path2D`) which reduces the overall number of dependencies in the PDF.js project.

One point to note is that `@napi-rs/canvas` is a fair bit newer than `canvas`, and has a lot fewer users, however looking at the commit history it does seem to be actively maintained.

Note that I've successfully tested the [Node.js examples](https://github.com/mozilla/pdf.js/tree/master/examples/node), in particular the `pdf2png` one, with this patch applied and things appear to work fine.

Please see:
 - https://www.npmjs.com/package/@napi-rs/canvas
 - https://github.com/Brooooooklyn/canvas",False
bff673896614b4b8c30f28397471cb89922a9a31,2024-11-06 16:42:45,Jonas Jenwald,"Merge pull request #19012 from Snuffleupagus/pr-18819

Fix Typo:XFATemplate class Para Styling paddingight => paddingRight",True
6d7157a875c75679c7b0d3d15454db2ca62fbd37,2024-11-06 16:34:55,Pascal Maximilian Bremer,Fix Typo:XFATemplate class Para Styling paddingight => paddingRight,False
f520d2375bc38530f5d8d39d135233e68a28c6a4,2024-11-06 13:53:20,calixteman,"Merge pull request #19011 from calixteman/roman

Simplify toRomanNumerals function",True
b666c4f7bef76daba3237ce2ee78a8b903e631b9,2024-11-06 13:42:07,Jonas Jenwald,"Merge pull request #19002 from Snuffleupagus/version-4.9

Bump library version to `4.9`",True
1a56b35af79b7bfd2339ea0e4cc3a389718c1166,2024-11-06 13:41:28,Jonas Jenwald,"Merge pull request #19003 from Snuffleupagus/api-unittest-image-helpers

Add helper functions to load image blob/bitmap data in `test/unit/api_spec.js`",True
d59f9648a9f6435fcc7f9963a6d3c2ff92bda612,2024-11-06 03:05:35,Calixte Denizet,Simplify toRomanNumerals function,False
fdfcfbc351d805fe009244fd9df55b95d0040b13,2024-11-06 02:16:44,Jonas Jenwald,"Merge pull request #19005 from Snuffleupagus/core_utils-shorten

Shorten a few helper functions in `src/core/core_utils.js`",True
c78eebbace2bd5955741c83c1991fe33bb556047,2024-11-06 02:15:27,Jonas Jenwald,"Merge pull request #19007 from Snuffleupagus/issue-18986

Try to improve handling of missing trailer dictionaries in `XRef.indexObjects` (issue 18986)",True
cbb02eb65551ff6b683e50c6ac6ae94403257892,2024-11-06 01:52:29,Jonas Jenwald,"Merge pull request #19010 from CyberAndrii/18957-fix-error-on-empty-response-headers

Fix error on empty response headers",True
824a619a2a42175843006040ac3d124087a92896,2024-11-06 01:22:50,Andrii Vitiv,"Fix error on empty response headers

Fixes https://github.com/mozilla/pdf.js/issues/18957

https://github.com/mozilla/pdf.js/pull/18682 introduced a regression that causes the following error:

```
Uncaught TypeError: Failed to construct 'Headers': Invalid name
    at PDFNetworkStreamFullRequestReader._onHeadersReceived (pdf.mjs:10214:29)
    at NetworkManager.onStateChange (pdf.mjs:10103:22)
```

The mentioned PR replaced a call to `getResponseHeader()` with `getAllResponseHeaders()` without handling cases where it may return null or an empty string. Quote from the [docs](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders#return_value):

> Returns:
>
>A string representing all of the response's headers (except those whose field name is Set-Cookie) separated by CRLF, or null if no response has been received. If a network error happened, an empty string is returned.

Run the following code and observe the error in the console. Note that the URL is intentionally set to an invalid value to simulate network error

```js
<script src=""//mozilla.github.io/pdf.js/build/pdf.mjs"" type=""module""></script>

<script type=""module"">
  var url = 'blob:';

  pdfjsLib.GlobalWorkerOptions.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.mjs';

  var loadingTask = pdfjsLib.getDocument(url);
  loadingTask.promise
    .then((pdf) => console.log('PDF loaded'))
    .catch((reason) => console.error(reason));

</script>
```",False
e92a929a5817a9b30531242beaa9ce2a1d37138f,2024-11-05 22:49:26,Jonas Jenwald,"Try to improve handling of missing trailer dictionaries in `XRef.indexObjects` (issue 18986)

The problem with the referenced PDF document has nothing to do with invalid dates, as the issue seems to suggest, but rather with the fact that it has neither an XRef table nor a trailer dictionary.
Given that crucial parts of the internal document structure is missing, you might argue that it's not really a PDF document.

In an attempt to support this kind of corruption, we'll simply iterate through all (previously found) XRef entries and pick one that *might* be a valid /Root dictionary.
There's obviously no guarantee that this works, and it might not be fast in larger PDF documents, but at least it cannot be any worse than *immediately* throwing `InvalidPDFException` as we previously did here.

*Please note:* I'm totally fine with this patch being rejected, since it's somewhat questionable if we should actually attempt to support ""PDF documents"" with this level of corruption.",False
2c90eee5a877c6a71c844e836f17690f19c43b67,2024-11-05 18:28:00,Jonas Jenwald,"Shorten a few helper functions in `src/core/core_utils.js`

In a few cases we can ever so slightly shorten the code without negatively impacting the readability.",False
f2fb3b95ce8daf58663a2c7209461932b0026345,2024-11-04 18:39:34,Jonas Jenwald,"Add helper functions to load image blob/bitmap data in `test/unit/api_spec.js`

This avoids repeating the same code multiple times, and as part of the changes we'll also utilize existing PDF.js helpers more.",False
e4a5bd95553e7d5c86f5b502d264e1c7a65cbac0,2024-11-04 15:07:35,Jonas Jenwald,Bump library version to `4.9`,False
cefd1ebcd239d906758d0f7a601238a1980d5631,2024-11-04 14:59:55,Jonas Jenwald,"Merge pull request #18959 from Snuffleupagus/Node-20

[api-minor] Update the minimum supported Node.js version to 20, and only support the Fetch API for ""remote"" PDF documents in Node.js",True
9269fb9be2d1a4230a510b4c1e8d6542b36b448d,2024-11-03 20:48:12,Jonas Jenwald,"Remove the `BaseFullReader` and `BaseRangeReader` classes in the `src/display/node_stream.js` file

After the previous patch these base-classes are only extended once each and they can thus be combined with the final classes.",False
cbf0ca71bf91ef0dca62b5736d43860107275117,2024-11-03 20:48:10,Jonas Jenwald,"[api-minor] Only support the Fetch API for ""remote"" PDF documents in Node.js environments

The Fetch API has been supported since Node.js version 18, see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API#browser_compatibility",False
c7407230c191be42971e714ff5b2b1055c33e2a7,2024-11-03 20:43:58,Jonas Jenwald,"[api-minor] Load Node.js packages/polyfills with `process.getBuiltinModule`

This allows *synchronous* loading of Node.js modules and (indirectly) packages, thus simplifying the code a fair bit.",False
4f01cdef184d02a8e5d265bb4cba6730add98515,2024-11-03 20:43:55,Jonas Jenwald,"[api-minor] Update the minimum supported Node.js version to 20

This patch updates the minimum supported environments as follows:
 - Node.js 20, which was released on 2023-04-18 and has now entered the ""Maintenance""-phase; see https://github.com/nodejs/release#release-schedule

Furthermore, note also that Node.js 18 will fairly soon reach EOL.",False
35673d3e6ec5aa0872ab6d899e8139c3870f7e65,2024-11-03 20:17:45,Tim van der Meij,"Merge pull request #19001 from timvandermeij/integration-test-scripting-uppercase

Fix the ""must convert input to uppercase"" scripting integration test",True
3adf8b6be0252c89b5c7dea77ea61a63c839be30,2024-11-03 19:38:55,Tim van der Meij,"Fix the ""must convert input to uppercase"" scripting integration test

This integration test fails intermittently because we're not
(correctly) awaiting the sandbox actions. The `27R` field in
`issue14862.pdf` triggers sandbox events for every typing action, but
for the backspace and ""a"" character typing actions we weren't awaiting
the sandbox trip at all, and for other places we weren't awaiting it
fully (causing some characters to be missed in the assertion).

This commit fixes the issues by using the appropriate helper functions,
similar to what we did in PR #18399. Not only is this shorter in terms
of code, but it also fixed the near-permafail for this test with newer
versions of Puppeteer.",False
20fbb4d66114fa88d9058eb9b672702f436f0571,2024-11-03 19:11:06,Tim van der Meij,"Merge pull request #19000 from timvandermeij/types-node

Install and use the most recent Node types for the types tests",True
ccfaf20ee22c84845f1a173651e3730b7cac0e92,2024-11-03 18:10:55,Tim van der Meij,"Install and use the most recent Node types for the types tests

The types tests run in Node.js and therefore use Node types for e.g.
builtins. However, we didn't explicitly indicate this in
`tsconfig.json` (see [1] for more information and [2] for the PR where
we found this). Moreover, we didn't explicitly install the most recent
version of `@types/node` which implicitly made us fall back to version
14.14.45 (because that was installed as a dependency of other modules)
whereas much newer versions are available and we need those after
changes in Node.js (see [3] for more information and [4] for the PR
where we found this).

This commit fixes both issues by explicitly installing and using the
most recent Node.js types, which should also avoid future issues with
the types tests.

[1] https://github.com/TypeStrong/ts-node/issues/1012
[2] https://github.com/mozilla/pdf.js/pull/18237
[3] https://stackoverflow.com/questions/78790943/in-typescript-5-6-buffer-is-not-assignable-to-arraybufferview-or-uint8arr
[4] https://github.com/mozilla/pdf.js/pull/18959",False
c1bcb46b3babda0fa726a0df32956644e54ad4a3,2024-11-03 17:34:13,Tim van der Meij,"Merge pull request #18999 from Snuffleupagus/toBase64Util-unittest

Use the `toBase64Util` helper function in the unit-tests",True
f78a8f3c54efdd0ad5c1abd1683e6d3da590d712,2024-11-03 15:55:19,Jonas Jenwald,Use the `toBase64Util` helper function in the unit-tests,False
5f77b907eb610ae106883dfd3a378c265a51a0a3,2024-11-03 15:41:36,Tim van der Meij,"Merge pull request #18997 from Snuffleupagus/Node-enable-Blob-unittest

Enable the 'gets PDF filename from query string appended to ""blob:"" URL' unit-test in Node.js",True
7ae21ece4a02058668238e3b96c4ebcc1c2fa91f,2024-11-03 15:40:54,Tim van der Meij,"Merge pull request #18998 from Snuffleupagus/Node-enable-XFA-alt-unittest

Enable the ""should have an alt attribute from toolTip"" unit-test in Node.js",True
3755d680e47c7431e9efe63e00e98eb95cadb5cd,2024-11-03 15:39:15,Tim van der Meij,"Merge pull request #18995 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
faf9e32ecb20c394bc7f4b485be1ad49e3bf3ad8,2024-11-03 04:45:44,Jonas Jenwald,"Enable the ""should have an alt attribute from toolTip"" unit-test in Node.js

Despite the pending-message mentioning ""Image"", this appears to be another case where the code actually depends on [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob#browser_compatibility); note https://github.com/mozilla/pdf.js/blob/cf3ca8b5bc95154712bcde96ee85a0bf7afacb2f/src/core/xfa/template.js#L3453",False
15fbee158c06b0c82fc6d23a7c8ebd18ae1a07fc,2024-11-03 04:23:03,Jonas Jenwald,"Enable the 'gets PDF filename from query string appended to ""blob:"" URL' unit-test in Node.js

The necessary functionality has been supported in Node.js for quite some time now, please see:
 - https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL_static#browser_compatibility",False
3854ab5efdccb6ebd8e8e1549138c49110b828b7,2024-11-03 00:51:59,Tim van der Meij,Update translations to the most recent versions,False
3cd906829ec94d2d845655fe18b1fbcd8cf510b3,2024-11-03 00:50:58,Tim van der Meij,Update dependencies to the most recent versions,False
cf3ca8b5bc95154712bcde96ee85a0bf7afacb2f,2024-11-03 00:29:41,Tim van der Meij,"Merge pull request #18994 from timvandermeij/bump

Bump the stable version in `pdfjs.config`",True
627a58833652b1097e5ac898fb78aceeaab5de9e,2024-11-03 00:26:10,Tim van der Meij,Bump the stable version in `pdfjs.config`,False
3634dab10ca7dbaf0ca536f645465b231c88f862,2024-11-02 23:36:47,Tim van der Meij,"Merge pull request #18988 from Snuffleupagus/split-dom-factory

Move the various DOM-factories into their own files",True
e930f3030c2d3732b5e5b7d5d87ab313aa3b6bd0,2024-11-02 23:28:29,Tim van der Meij,"Merge pull request #18992 from Snuffleupagus/getPdfManager-inline-flushChunks

Inline the `flushChunks` helper function, used in `getPdfManager` on the worker-thread",True
e5485108ec7a7fe6b4665a32f74e9e30c207ca49,2024-11-02 19:47:10,Jonas Jenwald,"Merge pull request #18990 from Snuffleupagus/ensure-structTree-serializable

Ensure that serializing of StructTree-data cannot fail during loading",True
aa4839ed0f41591049bfad8eace4a02f31d2a90b,2024-11-02 19:45:47,Jonas Jenwald,"Merge pull request #18993 from Snuffleupagus/stringToUTF16HexString-hexNumbers

Use the `hexNumbers` structure in the `stringToUTF16HexString` helper",True
2145a7b9ca5343e7257f3595d697004b2a8fcfe0,2024-11-02 19:30:32,Jonas Jenwald,"Use the `hexNumbers` structure in the `stringToUTF16HexString` helper

We can re-use the `hexNumbers` structure here, since that allows us to directly lookup the hexadecimal values and shortens the code.",False
196f7d7df142db257e42c75a7bf87060d3aa5065,2024-11-02 15:36:30,Jonas Jenwald,"Inline the `flushChunks` helper function, used in `getPdfManager` on the worker-thread

 - This helper function has only a single call-site, and the function is fairly short.

 - It'll only be invoked if range requests are *disabled*, or if the entire PDF manages to load *before* the headers are resolved (which is very unlikely).
   Hence, by default, this helper function is not invoked.

 - By inlining the code we're able to utilize the existing error-handling at the call-site, rather than having to duplicate it, which further reduces the size of this code.

Finally, while slightly unrelated, this patch also adds optional chaining in one spot in the file (PR 16424 follow-up).",False
b26dc1939207ac16acc3a2ffbb768ee37becdd0c,2024-11-01 22:13:59,Jonas Jenwald,"Ensure that serializing of StructTree-data cannot fail during loading

I discovered that doing skip-cache re-reloading of https://opensource.adobe.com/dc-acrobat-sdk-docs/pdfstandards/PDF32000_2008.pdf would *intermittently* cause (some of) the AnnotationLayers to break with errors printed in the console (see below).

In hindsight this bug is really obvious, however it took me quite some time to find it, since the `StructTreePage.prototype.serializable` getter will lookup various data and all of those cases can fail during loading when streaming and/or range requests are being used.

Finally, to prevent any future errors, ensure that the viewer won't break in these sort of situations.

```
Uncaught (in promise)
Object { message: ""Missing data [19098296, 19098297)"", name: ""UnknownErrorException"", details: ""MissingDataException: Missing data [19098296, 19098297)"", stack: ""BaseExceptionClosure@resource://pdf.js/build/pdf.mjs:453:29\n@resource://pdf.js/build/pdf.mjs:456:2\n"" }
viewer.mjs:8801:55

\#renderAnnotationLayer: ""UnknownErrorException: Missing data [17552729, 17552730)"". viewer.mjs:8737:15

Uncaught (in promise)
Object { message: ""Missing data [17552729, 17552730)"", name: ""UnknownErrorException"", details: ""MissingDataException: Missing data [17552729, 17552730)"", stack: ""BaseExceptionClosure@resource://pdf.js/build/pdf.mjs:453:29\n@resource://pdf.js/build/pdf.mjs:456:2\n"" }
viewer.mjs:8801:55
```",False
4e12906061a3a6022d542936ba927931c494f33d,2024-11-01 18:01:28,Jonas Jenwald,"Move the various DOM-factories into their own files

 - Over time the number and size of these factories have increased, especially the `DOMFilterFactory` class, and this split should thus aid readability/maintainability of the code.

 - By introducing a couple of new import maps we can avoid bundling the `DOMCMapReaderFactory`/`DOMStandardFontDataFactory` classes in the Firefox PDF Viewer, since they are dead code there given that worker-thread fetching is always being used.

 - This patch has been successfully tested, by running `$ ./mach test toolkit/components/pdfjs/`, in a local Firefox artifact-build.

*Note:* This patch reduces the size of the `gulp mozcentral` output by `1.3` kilo-bytes, which isn't a lot but still cannot hurt.",False
06f3b2d0a623ac8b7e38309a969dc5e44c505fbc,2024-11-01 01:00:11,Tim van der Meij,"Merge pull request #18983 from Snuffleupagus/api-FetchBuiltInCMap-FetchStandardFontData-async

Change the ""FetchBuiltInCMap""/""FetchStandardFontData"" message-handlers to be asynchronous",True
3ed438aef5fc4c7cb3be507dd658ea092348a74f,2024-10-31 15:33:24,Jonas Jenwald,"Merge pull request #18979 from Snuffleupagus/L10n-#elements-lazy-init

Don't initialize `L10n.#elements` eagerly since it's unused in MOZCENTRAL builds",True
7572382c7ac1df33fc3ffbc2d0666387bb08cc11,2024-10-31 13:59:11,Jonas Jenwald,"Change the ""FetchBuiltInCMap""/""FetchStandardFontData"" message-handlers to be asynchronous

This way we can directly throw Errors, rather than having to ""manually"" return rejected Promises, which is ever so slightly shorter.

Also, since `useWorkerFetch` is always true in MOZCENTRAL builds these message-handlers should not be invoked there.",False
cdd4b052f984970e17be81ed24986f09d25e80f3,2024-10-30 19:50:44,Jonas Jenwald,"Don't initialize `L10n.#elements` eagerly since it's unused in MOZCENTRAL builds

It's not necessary to manually start translation in the Firefox PDF Viewer, and doing so would even cause problems there (see issue 17142).",False
f013c39b9fdb3170edd4058809bd7bf3c37007ff,2024-10-29 21:40:36,Jonas Jenwald,"Merge pull request #18978 from Snuffleupagus/toHexUtil-simplify

Re-factor the `toHexUtil` helper (PR 17862 follow-up)",True
f142fb8c28be47a48493b9a2b2bdc96fe49b2853,2024-10-29 21:39:03,calixteman,"Merge pull request #18972 from calixteman/refactor_highlight

[Editor] Refactor the free highlight stuff in order to be able to use the code for more general drawing",True
db1238aae3de5b6d7da62598a2f4f0c1dca2d3fa,2024-10-29 21:05:44,Jonas Jenwald,"Re-factor the `toHexUtil` helper (PR 17862 follow-up)

We can re-use the `hexNumbers` structure, since that allows us to directly lookup the hexadecimal values and shortens the code.",False
9870099e903c1a6be9f163b337cbbcff3379d818,2024-10-29 20:16:31,Jonas Jenwald,"Merge pull request #18977 from Snuffleupagus/api-ReaderHeadersReady-simplify

Simplify the ""ReaderHeadersReady"" message-handler in the API",True
5a9607b2adda2cc55a75ee63b69aa99938bd7e3b,2024-10-29 20:11:08,Calixte Denizet,"[Editor] Refactor the free highlight stuff in order to be able to use the code for more general drawing

One goal is to make the code for drawing with the Ink tool similar to the one to free highlighting:
it doesn't really make sense to have so different ways to do almost the same thing.

When the zoom level is high, it'll avoid to create a too big canvas covering all the page which consume
more memory, makes the drawing very slow and the overall user xp pretty bad.

A second goal is to be able to easily implement more drawing tools where we would just have to implement
how to draw from the pointer coordinates.",False
25cf4add05d4f383c9c714d3eeec3b457312fd83,2024-10-29 20:04:02,Jonas Jenwald,"Merge pull request #17862 from Snuffleupagus/fingerprints-toHex

Improve the implementation of the `PDFDocument.fingerprints`-getter",True
afb4813d1c4288011c93383d28c4445e9af28596,2024-10-29 19:29:39,Jonas Jenwald,"Simplify the ""ReaderHeadersReady"" message-handler in the API

We can convert the handler to an `async` function, which removes the need to create a temporary Promise here.
Given the age of this code it shouldn't hurt to simplify it a little bit.",False
8f47d06d075f6c803f43f22fee8bdc3930c33b17,2024-10-29 14:52:35,Jonas Jenwald,"Add helper functions to allow using new `Uint8Array` methods

This allows using the new methods in browsers that support them, e.g. Firefox 133+, while still providing fallbacks where necessary; see https://github.com/tc39/proposal-arraybuffer-base64

*Please note:* These are not actual polyfills, but only implements what we need in the PDF.js code-base. Eventually this patch should be reverted, once support is generally available.",False
bfc645bab17c0544aee1466513200dfd396f2579,2024-10-29 14:52:35,Jonas Jenwald,"Introduce some `Uint8Array.fromBase64` and `Uint8Array.prototype.toBase64` usage in the main code-base

See https://github.com/tc39/proposal-arraybuffer-base64",False
f9fc4770804edfc404def28335cf8ad04e2e724e,2024-10-29 14:52:35,Jonas Jenwald,"Improve the implementation of the `PDFDocument.fingerprints`-getter

 - Add explicit `length` validation of the /ID entries. Given the `EMPTY_FINGERPRINT` constant we're already *implicitly* assuming a particular length.

 - Move the constants into the `fingerprints`-getter, since they're not used anywhere else.

 - Replace the `hexString` helper function with the standard `Uint8Array.prototype.toHex` method; see https://github.com/tc39/proposal-arraybuffer-base64",False
3a85479c67bc7e2434ae975c66a0e04d5f5fe1e9,2024-10-29 14:51:35,Jonas Jenwald,"Merge pull request #18974 from Snuffleupagus/issue-18973

Allow `StreamsSequenceStream` to skip sub-streams that are not actual Streams (issue 18973)",True
48a18585f299dbad1e80b0e761bfbdcbbcf7958e,2024-10-29 14:06:08,Jonas Jenwald,"Allow `StreamsSequenceStream` to skip sub-streams that are not actual Streams (issue 18973)

This extends PR 13796 to also handle the case where sub-streams contain invalid data, i.e. anything that isn't a Stream, however please note that in these cases there's no guarantee that we'll render the page ""correctly"".

Note that Adobe Reader, i.e. the PDF reference implementation, cannot render the last page of the referenced PDF document.",False
93961e28022d74bc14764c5bbe3e2d25383c3b21,2024-10-29 01:23:06,Jonas Jenwald,"Merge pull request #18971 from Snuffleupagus/AltText-fluent

[Editor] Utilize Fluent ""better"" when localizing the AltText",True
ee812b5df2a984b00c0ff398bdd66e54fea3925f,2024-10-28 21:49:02,Jonas Jenwald,"[Editor] Utilize Fluent ""better"" when localizing the AltText

Currently we manually localize and update the DOM-elements of the AltText-button, and it seems nicer to utilize Fluent ""properly"" for that task.
This can be achieved by introducing an explicit `span`-element on the AltText-button (similar to e.g. the regular toolbar-buttons), and adding a few more l10n-strings, since that allows just setting the `data-l10n-id`-attribute on all the relevant DOM-elements.

Finally, note how we no longer need to localize any strings eagerly when initializing the various editors.",False
91088487434863bd7d5ebdd4fcd93765e56eb783,2024-10-28 21:00:20,calixteman,"Merge pull request #18918 from calixteman/bmp_decoder

Use a BMP decoder when resizing an image",True
b649b6f8dd4eaf7a7ee036ff9985d0918556991c,2024-10-28 18:39:52,Calixte Denizet,"Use a BMP decoder when resizing an image

The image decoding won't block the main thread any more.
For now, it isn't enabled for Chrome because issue6741.pdf leads to a crash.",False
07a1d30fad8115981b40b7fd3d9480969ed3f03f,2024-10-28 18:37:48,calixteman,"Merge pull request #18968 from calixteman/bug1903588

[Editor] Split the long words when showing the alt-text tooltip (bug 1903588)",True
8fbb9e2f169ed7b2ec6de614e976c6550696db39,2024-10-28 15:38:30,Calixte Denizet,[Editor] Split the long words when showing the alt-text tooltip (bug 1903588),False
2bee3af0ee4ec36021891d3572dc5215587e7912,2024-10-28 14:06:34,calixteman,"Merge pull request #18967 from calixteman/bug1910431

Make util.scand a bit more flexible with dates which don't match the given format (bug 1910431)",True
230d7f92291d2aa3b7b7493d419667b625d0513c,2024-10-27 23:49:06,Calixte Denizet,Make util.scand a bit more flexible with dates which don't match the given format (bug 1910431),False
5418060bbc4d912f052314b4ea081f9ccda41192,2024-10-27 19:12:00,Tim van der Meij,"Merge pull request #18951 from Snuffleupagus/CMap-isCompressed

[api-minor] Remove the `CMapCompressionType` enumeration",True
b5805caacdd47c88c9a60fd2d1cc947686548870,2024-10-27 19:08:43,Tim van der Meij,"Merge pull request #18965 from Snuffleupagus/_goodSquareLength-static

Re-factor the `ImageResizer._goodSquareLength` definition",True
8a2b95418a6293a9fc3002bce0a4557c4822afda,2024-10-27 15:33:04,Jonas Jenwald,"Re-factor the `ImageResizer._goodSquareLength` definition

Move the `ImageResizer._goodSquareLength` definition into the class itself, since the current position shouldn't be necessary, and also convert it into an actually private field.",False
0d42e56cab8e3eed84f2e33129246eca77551f7d,2024-10-26 18:46:06,calixteman,"Merge pull request #18960 from calixteman/issue18956

Always fill the mask with the backdrop color",True
d114f71feb7051f922fe02a02b81b34aeba2a631,2024-10-26 17:44:51,Calixte Denizet,"Always fill the mask with the backdrop color

It fixes #18956.

In the patch #18029, for performance reasons and because I thought it was useless, I deliberately chose to not fill the mask
with the backdrop color when it's full black: it was a bad idea.
So in this patch we always add the backdrop color to the mask.",False
b048420d21b2352bded393e81254648ce6998e6c,2024-10-24 14:38:16,Jonas Jenwald,"[api-minor] Remove the `CMapCompressionType` enumeration

After the binary CMap format had been added there were also some ideas about *maybe* providing other formats, see [here](https://github.com/mozilla/pdf.js/pull/8064#issuecomment-279730182), however that was over seven years ago and we still only use binary CMaps.
Hence it now seems reasonable to simplify the relevant code by removing `CMapCompressionType` and instead just use a boolean to indicate the type of the built-in CMaps.",False
50c291eb33d8553b63c130779a4edfeac98d85e8,2024-10-24 13:45:09,Jonas Jenwald,"Unconditionally cache built-in CMaps on the worker-thread

Given that we've not shipped, nor used, anything except binary CMaps for years let's just cache them unconditionally (since that's a tiny bit less code).",False
bde36f28bee3a01495375ae88d6ac2e3bf217c74,2024-10-23 18:46:18,calixteman,"Merge pull request #18947 from calixteman/add_comment_ftl

Add a comment in l10n file for the non-standard attribute default-content",True
c0c527266d1fb54feed9a259aeaac7d094fd33db,2024-10-23 18:42:52,Calixte Denizet,Add a comment in l10n file for the non-standard attribute default-content,False
1ad09779f14c186d464e1aa18184695d3339cc0b,2024-10-23 17:24:07,calixteman,"Merge pull request #18910 from calixteman/image_decoder1

Use ImageDecoder in order to decode jpeg images (bug 1901223)",True
b6c4f0b69e05f3d2952beec0b17cf96234556a2d,2024-10-23 14:12:01,Calixte Denizet,Use ImageDecoder in order to decode jpeg images (bug 1901223),False
1e07b87bb66310ec75999c413880f8265f28a866,2024-10-22 23:33:50,Tim van der Meij,"Merge pull request #18933 from Snuffleupagus/base-factory-fetchData

Change the `BaseCMapReaderFactory` fetch-helper to return a `Uint8Array`",True
54a77d24ebd7d592eca234a53466a00ca419d05c,2024-10-22 23:23:33,Tim van der Meij,"Merge pull request #18940 from Snuffleupagus/bug-report-PDF-placeholder

Try to discourage ""unrelated"" information under `Attach (recommended) or Link to PDF file` in the bug report template (PR 18535 follow-up)",True
49c3dc9c5f596fa8bbdc023a825420120b24d801,2024-10-22 21:48:44,Jonas Jenwald,"Merge pull request #18942 from Snuffleupagus/issue-18941

Fallback to a standard font if a font-file entry doesn't contain a Stream (issue 18941)",True
236c8d862eb701cafcabdb8571f76c95425989ec,2024-10-22 20:37:12,Jonas Jenwald,"Re-factor how we handle missing, corrupt, or empty font-file entries

This improves the fixes for e.g. issue 9462 and 18941 slightly and allows better fallback behaviour for non-standard fonts.",False
63b34114b114f91f990ab0d024c26d6458d2879e,2024-10-22 15:21:28,Jonas Jenwald,"Fallback to a standard font if a font-file entry doesn't contain a Stream (issue 18941)

The PDF document is clearly corrupt, since it has /FontFile2 entries that are Dictionaries which obviously isn't correct.
While there's obviously no guarantee that things will look perfect this way, actually rendering the text at all should be an improvement in general.",False
a809461738f4d359d544a99f5fd3d7c3b527bddb,2024-10-22 12:53:32,Jonas Jenwald,"Try to discourage ""unrelated"" information under `Attach (recommended) or Link to PDF file` in the bug report template (PR 18535 follow-up)

Unfortunately it turns out to be somewhat common for users to provide a bunch of ""unrelated"" information in this field, or even stating their entire problem there, rather than placing it under the appropriate headings further down in the template.",False
6c3336f04f7d751883ef56fc974339bdae9853ff,2024-10-21 16:50:31,Jonas Jenwald,"Re-factor the `DefaultFileReaderFactory` unit-test helper

We can re-use the existing helpers from `src/display/` rather than re-implementing the functionality here.",False
df696063b95ef45ec9cfca077787f91c04ea8c4e,2024-10-21 16:50:18,Jonas Jenwald,"Change the `BaseCMapReaderFactory` fetch-helper to return a `Uint8Array`

This moves more functionality into the base-class, rather than having to duplicate that in the extending classes.
For consistency, also updates the `BaseStandardFontDataFactory` and introduces more `async`/`await` in various relevant code.",False
d37e4b08e4006b382b14b1596c5f70df7e93fbd9,2024-10-21 12:01:16,Jonas Jenwald,"Merge pull request #18930 from Snuffleupagus/rm-duplicate-print-download-mask-image

Remove `mask-image` duplication for the print/download buttons",True
65b38f24ff990075edf035f1f6065b157b43723b,2024-10-21 00:45:09,Jonas Jenwald,"Remove `mask-image` duplication for the print/download buttons

With the recent re-factoring of the viewer CSS rules we now have some duplication of the `mask-image` definitions for the print/download buttons in the secondaryToolbar; note https://github.com/mozilla/pdf.js/blob/17419de15709892935ece25ffd6af105a7e6814d/web/viewer.css#L1204-L1210",False
17419de15709892935ece25ffd6af105a7e6814d,2024-10-20 23:19:49,Tim van der Meij,"Merge pull request #18923 from timvandermeij/integration-test-text-layer

Fix the ""Text selection using mouse doesn't jump when hovering on an empty area in a single page"" integration test",True
24b8393bfe6a7628475581c7e417288068434118,2024-10-20 23:12:40,Tim van der Meij,"Fix the ""Text selection using mouse doesn't jump when hovering on an empty area in a single page"" integration test

The `getSpanRectFromText` helper function returns the location as float
values. This could be desirable in cases where the exact values matter
(for example during comparisons), but in the text layer tests we don't
need this precision. Moreover, the Puppeteer `page.mouse.move` API
apparently doesn't work correctly if float values are given as input.

Note that this test only failed because it couldn't move to the initial
selection position; any subsequent moves actually worked because the
`moveInSteps` helper function already rounded all values correctly.

This commit fixes the issue by consistently rounding all values that we
pass to Puppeteer's `page.mouse.move` API.",False
b94ab46be58bb77cc0cc5563465ddd1db5d9358e,2024-10-20 23:11:37,Tim van der Meij,"Merge pull request #18929 from timvandermeij/eslint-perfectionist

Replace `eslint-plugin-sort-exports` by `eslint-plugin-perfectionist`",True
9c6f85f1f23d47f6daac8209a237e81c6ad4023b,2024-10-20 23:01:34,Jonas Jenwald,"Merge pull request #18920 from Snuffleupagus/FreeText-l10n-default-content

Simplify localization of the ""default-content"" in FreeText editors",True
347f155ebc7db89951d134d3d06cc8a303dc72f9,2024-10-20 22:20:35,Tim van der Meij,"Replace `eslint-plugin-sort-exports` by `eslint-plugin-perfectionist`

The `eslint-plugin-sort-exports` plugin doesn't support ESLint 9 or has
published plans to do so. The `eslint-plugin-perfectionist` does support
ESLint 9 [1], seems more actively maintained [2, 3] and contains other
rules that could be interesting later on [4]. Note that both plugins
behave the same, except for two cases which are updated here.

[1] https://github.com/azat-io/eslint-plugin-perfectionist/issues/154
[2] https://github.com/azat-io/eslint-plugin-perfectionist/commits/main
[3] https://www.npmjs.com/package/eslint-plugin-perfectionist?activeTab=versions
[4] https://perfectionist.dev/rules",False
2ef3fd2a81312ab9843572b1b657a2911b1b1c69,2024-10-20 22:16:44,Jonas Jenwald,"Simplify localization of the ""default-content"" in FreeText editors

By using ""data-l10n-attrs"" it's possible to instruct Fluent to localize *custom* attributes, which means that we don't need to manually translate/update the ""default-content"" in FreeText editors.",False
f9659f4635501d7bae4086ad1ea90e7005534d89,2024-10-20 20:05:14,Tim van der Meij,"Merge pull request #18921 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
ccfb8a20c2ac041dc02d89edf802acb81c8fe46c,2024-10-20 19:29:03,Tim van der Meij,Update translations to the most recent versions,False
b4651390bb89a05771aaf03c4627132bccb816ff,2024-10-20 19:28:59,Tim van der Meij,Update dependencies to the most recent versions,False
29b2f261317dbf7f09d3cef097444fe63032ab75,2024-10-20 19:26:04,Tim van der Meij,"Merge pull request #18927 from timvandermeij/eslint-plugin-cleanup

Remove the `eslint-plugin-{fetch-options,html}` and `eslint-config-prettier` dependencies",True
6def1c8453c93aedaca20fb9b40340280ac8a2e6,2024-10-20 19:08:22,Tim van der Meij,"Remove the `eslint-config-prettier` dependency

The `eslint-plugin-prettier` dependency already installs this dependency
by default nowadays, so we don't have to specify it ourselves anymore.",False
760dd24ea006f30859607f27fee91335d507951a,2024-10-20 19:08:22,Tim van der Meij,"Remove the `eslint-plugin-{fetch-options,html}` dependencies

The plugins have originally been introduced in commit d63da81 for the
`eslint-plugin-mozilla` dependency, but the `eslint-plugin-mozilla`
plugin got removed in commit be93d53 and we also don't use the plugins
ourselves in e.g. our `.eslintrc` files (as evidenced by `npx gulp lint`
not failing while it does fail if we remove any of the other plugins).",False
df77401821be5d81492a7354ea696775b23ac782,2024-10-20 17:33:20,Tim van der Meij,"Merge pull request #18925 from Snuffleupagus/ci-test-Node-23

Run CI tests in Node.js version 23",True
6604adb5fff76b541f8fab971d17ee4ac4a044ab,2024-10-20 17:20:48,Jonas Jenwald,"Run CI tests in Node.js version 23

Node.js version 23 was recently released, see https://github.com/nodejs/release#release-schedule, hence it cannot hurt to start testing in that environment.",False
521f5b8cdcf6174e0d5d6110818bd305ab05a451,2024-10-20 16:22:16,Jonas Jenwald,"Merge pull request #18924 from Snuffleupagus/version-4.8

Bump library version to `4.8`",True
4165910fd93cbe1bb4580b2ef1bc8e5084bbdccb,2024-10-20 16:19:06,Jonas Jenwald,Bump library version to `4.8`,False
2a4630f89a2ff7b8e2197ff532124555639a156b,2024-10-20 16:12:59,Jonas Jenwald,"Merge pull request #18922 from Snuffleupagus/node-canvas-3

[api-minor] Update the `canvas` package to version 3",True
54e00b0104537cbd9c0afdd40418aa1ad3cd8203,2024-10-20 16:09:10,Jonas Jenwald,"Catch errors when invoking `applyPath2DToCanvasRenderingContext`

This way we allow the rest of the packages to be loaded successfully, such that e.g. the Node.js unit-tests work correctly.

Note that this occurred after updating the `node-canvas` package to version `3.0.0-rc2`, however it's not immediately clear to me if it's a problem there or in the `path2d` package; see also nilzona/path2d-polyfill/issues/84.",False
6ae13fac9b06270440dad7be830b85529c742524,2024-10-20 16:09:08,Jonas Jenwald,"[api-minor] Update the `canvas` package to version 3

This allows us to run the Node.js unit-tests in version 22, which is good since it'll very soon become the active LTS release; see https://github.com/nodejs/release#release-schedule.",False
025c0875b00ea186c2d86a3534ec60aeab506e1c,2024-10-19 16:38:10,Tim van der Meij,"Merge pull request #18919 from Snuffleupagus/GrabToPan-AbortSignal

Remove event listeners with `AbortSignal` in the `GrabToPan` class",True
c3bbeb51e3c24b97ade20e5e73f2fd38b11709a5,2024-10-19 15:31:43,Jonas Jenwald,Remove event listeners with `AbortSignal` in the `GrabToPan` class,False
c88d3a31cf5fbbd81f144b1ccdd6b8127f376165,2024-10-18 20:57:14,Jonas Jenwald,"Merge pull request #18888 from Snuffleupagus/MessageHandler-AbortSignal

Re-factor the `MessageHandler`-class event handler function",True
762667b2df130f57c988489628c2dee8ff24faa5,2024-10-17 23:51:00,calixteman,"Merge pull request #18916 from calixteman/bug1922766

When changing a property on a radio button then change it for the siblings (bug 1922766)",True
86d1272d1bb9b41061bcfdac73bc1860f25316bb,2024-10-17 21:57:12,Calixte Denizet,When changing a property on a radio button then change it for the siblings (bug 1922766),False
788eabc76aa6b93893f1c1b205caf12ff7432256,2024-10-16 13:46:27,Jonas Jenwald,"Re-factor the `MessageHandler`-class event handler function

 - Change the ""message"" event handler function to a private method.

 - Remove the ""message"" event listener with an `AbortSignal`.

 - Extend the `LoopbackPort`-class with `AbortSignal` support.",False
689ffda9df29f24e03f6e5145a096584d7f166cc,2024-10-16 01:45:09,Jonas Jenwald,"Merge pull request #18902 from Snuffleupagus/pdkids-rm-linked-test

Add the `pdkids` PDF document to the repository",True
96bced7f5be637b7a0e873e656e510ea23ab69a4,2024-10-16 00:25:23,Tim van der Meij,"Merge pull request #18884 from hubgit/patch-1

Handle null parentElement for selection anchor",True
ec79316379917603b3cdbabbd871c5e165094f03,2024-10-16 00:16:23,Tim van der Meij,"Merge pull request #18905 from Snuffleupagus/optionalContentConfig-determine-groups

Reduce duplication when collecting optional content groups",True
e8149b39826f3ffdd5cc9db9c7c2f6e23e97e7fe,2024-10-16 00:04:45,Tim van der Meij,"Merge pull request #18898 from Snuffleupagus/PDFViewerApplication-bindEvents-opts

Create fewer Objects in `PDFViewerApplication.bindEvents`",True
54606e9b7b24cea4950926ad60e837bdd6d458d4,2024-10-15 23:56:19,Tim van der Meij,"Merge pull request #18893 from Snuffleupagus/PDFViewerApplication-rm-removeEventListener-opts

Remove unnecessary options from `removeEventListener` in the `web/app.js` file",True
805f96218126bcc33aecd47a7082b46dd0d32f96,2024-10-15 16:50:30,Jonas Jenwald,"Reduce duplication when collecting optional content groups

After PR 18825 we can easily ""compute"" the optional content groups, and can thus avoid tracking them manually.",False
424f81c4db596d2257fb115d359f08a3bee33282,2024-10-15 16:41:19,Jonas Jenwald,"Merge pull request #18825 from agrahn/rbgroups

implementing optional content radiobutton groups",True
441efe456ebf141fe32dfe2b06ba3140d22b6006,2024-10-15 15:04:45,Alexander Grahn,"Optional Content (OC) radiobutton (RB) groups implemented. Resolves #18823.

The code parses the /RBGroups entry in the OC configuration dict and adds the property `rbGroups' to instances of the OptionalContentGroup class. rbGroups takes an array of Sets, where each Set instance represents an RB group the OptionalContentGroup instance is a member of. Such a Set instance contains all OCG ids within the corresponding RB group. RB groups an OCG is associated with are processed when its visibility is set to true, as required by the PDF spec.",False
fb3c7b6d8faa9e573a9351c4ea4f07c564c59ea9,2024-10-15 14:25:17,Jonas Jenwald,"Add the `pdkids` PDF document to the repository

Given that the sub-title of that document is ""Public domain texts for young people."" and that the images have clear sources at the end of the document, it should (hopefully) be OK to add it to the repository rather than relying on a linked test-case.",False
c10d0935c4b246f83c890803f6605cf6fde4f4cc,2024-10-15 01:26:36,calixteman,"Merge pull request #18899 from calixteman/issue18896

Some jpx images can have a mask",True
8b7b39f5d65ad176cc447627a25858af40693ed8,2024-10-15 01:20:32,Calixte Denizet,"Some jpx images can have a mask

It fixes #18896.",False
4d7f29d73658cd5d3fb86427619605050592f518,2024-10-14 15:18:41,Jonas Jenwald,"Create fewer Objects in `PDFViewerApplication.bindEvents`

Given that all listeners need the same options we can create and re-use a single options-Objects for all of them.",False
e1f9fa4ea54246bbfa974ac75720793b9ff9fd12,2024-10-13 21:26:52,calixteman,"Merge pull request #18895 from calixteman/issue18894

Fallback on gray colorspace when there are no colorspace and no name in the scn/SCN arguments",True
e7ab8cd8c1dc6d9aa14a66f1b775994bace2107c,2024-10-13 19:32:07,Calixte Denizet,"Fallback on gray colorspace when there are no colorspace and no name in the scn/SCN arguments

It fixes #18894.",False
4ae6132d07cb21a53ba6149bd4e7bba95a105815,2024-10-13 15:09:36,Jonas Jenwald,"Remove unnecessary options from `removeEventListener` in the `web/app.js` file

Only the `capture` parameter matters when removing an event listener, see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener#matching_event_listeners_for_removal",False
1c0c070847582939372a74de1398451e7ce7b952,2024-10-13 03:23:59,calixteman,"Merge pull request #18890 from calixteman/clamp_indexedcs_hival

Clamp the hival parameter of Indexed color space to the range [0; 255]",True
e28dd8e82433164808404d13fab0fa0a82d09006,2024-10-13 03:22:15,calixteman,"Merge pull request #18889 from calixteman/rm_useless_aria_has_popup

Don't add attribute 'aria-haspopup' when no popup is rendered for an annotation",True
4dea773c5b62f8fd01cbb56c5d7f50093b0ef180,2024-10-13 03:20:58,Calixte Denizet,"Clamp the hival parameter of Indexed color space to the range [0; 255]

Since this value is used to allocate an array, it makes sense to avoid to use too much memory.
From the specs, this value must be in the range [0; 255] (see section 8.6.6.3).
This patch removes the unused property 'highVal'.",False
7c43cb2dae58ac60a1111635decb6a6bafcd5e47,2024-10-13 00:21:40,Calixte Denizet,"Don't add attribute 'aria-haspopup' when no popup is rendered for an annotation

and for ink annotations, create the popup after the loop in order to avoid useless
elements creation.",False
c3af34271ec068ed3245f6043ad2602400a371ec,2024-10-11 23:07:00,Tim van der Meij,"Merge pull request #18881 from Snuffleupagus/AltTextManager-rm-events-AbortSignal

Remove event listeners with `AbortSignal` in the `AltTextManager` class",True
02b33b970b883743d950aa641314b15932652e92,2024-10-11 23:02:13,Tim van der Meij,"Merge pull request #18885 from Snuffleupagus/PDFDateString-regex

Move the regular expression caching into the `PDFDateString` class",True
4a0c50868968b075c4e757d2ecdfef77bc3c176f,2024-10-11 19:24:21,calixteman,"Merge pull request #18833 from calixteman/gulp_testfilter

Add an option to gulp makeref/browsertest to only run tests with specific ids",True
8afc542ae29c37a21008123f0a781cbe889ddf23,2024-10-11 19:04:58,Jonas Jenwald,"Move the regular expression caching into the `PDFDateString` class

This code is old enough that it pre-dates availability of private class fields, hence why this wasn't done originally.",False
e97e9c93d6ee5911e2c0c92ea96f7057496af763,2024-10-11 18:28:06,Alf Eaton,Handle null parentElement for selection anchor,False
6f307e90a3a2f279b5d251cd0be86a0f209452ea,2024-10-11 15:35:36,Jonas Jenwald,Remove event listeners with `AbortSignal` in the `AltTextManager` class,False
6dd772602231a150441da106143c7ecbc78f16bd,2024-10-11 01:28:16,Calixte Denizet,"Add an option to gulp makeref/browsertest to only run tests with specific ids

It can be used like this: `gulp makeref -t tracemonkey-eq` or `gulp browsertest --testfilter tracemonkey-text`.",False
c6d01caf6509ba11aca4c616634f8178277a012b,2024-10-11 01:16:36,calixteman,"Merge pull request #18860 from calixteman/issue18775

Fix failing integration test on Windows with Chrome",True
edc2cd1968614144c044580b4a7b1d4c5cbdce51,2024-10-11 00:57:55,Calixte Denizet,"Fix failing integration test on Windows with Chrome

It fixes #18775.",False
0543e9e49c8d15d36efe2818e8dd13b88745eba9,2024-10-10 23:25:19,Tim van der Meij,"Merge pull request #18874 from Snuffleupagus/ColorPicker-AbortSignal-any

[Editor] Remove `ColorPicker` event listeners with `AbortSignal.any()` (PR 18586 follow-up)",True
a77bf87c50e76a2ac0aabdc570549f58ea8e5d94,2024-10-10 18:58:59,calixteman,"Merge pull request #18879 from calixteman/highlight_hover

Don't add the grey outline when hovering a selected highlight",True
5f522d1c6022f91f8e3076a898162e510acf538f,2024-10-10 17:55:35,calixteman,"Merge pull request #18878 from calixteman/issue18876

Avoid exceptions in the console with ill-formed flate streams",True
fa7df015687e98b8a91e1b9807afd965fd058bfd,2024-10-10 17:42:50,Calixte Denizet,"Don't add the grey outline when hovering a selected highlight

When playing with a pen, I noticed that sometimes a free highlight has still its
gray outline when an other one is drawn: for any reason the pointerleave event isn't
triggered.",False
f2f56b64645d30ea5b4ec82dde7b5470ac5fd434,2024-10-10 15:37:30,Calixte Denizet,"Avoid exceptions in the console with ill-formed flate streams

It fixes #18876.",False
14537d1412fcf2d3dea4738b5d42557bd02f2f01,2024-10-09 14:28:35,Jonas Jenwald,"[Editor] Remove `ColorPicker` event listeners with `AbortSignal.any()` (PR 18586 follow-up)

Also, removes another ""unnecessary"" bound-method.",False
233ac1773da43cf7557615b659b56ac5ef2fc431,2024-10-09 00:11:43,Tim van der Meij,"Merge pull request #18873 from Snuffleupagus/visibilitychange-AbortSignal-any

Remove the temporary ""visibilitychange"" listener, in `PDFViewer`, with `AbortSignal.any()`",True
1269c6a4f9ba9f6d80ec8634cdf3762f7d3d56bc,2024-10-08 23:41:46,Tim van der Meij,"Merge pull request #18871 from Snuffleupagus/PDFDocument-more-ensure

Improve the promise-caching in the `PDFDocument.fieldObjects` getter",True
b15dd55c3a748aae0f69f14bcc8458eb23765c79,2024-10-08 23:29:13,Tim van der Meij,"Merge pull request #18862 from timvandermeij/integration-scripting-delays

Fix typing logic in the scripting integration tests",True
31b0a496fd2b45f1b155d5bb74131089ca3af892,2024-10-08 19:08:31,Jonas Jenwald,"Remove the temporary ""visibilitychange"" listener, in `PDFViewer`, with `AbortSignal.any()`

This is similar to a lot of other code, where we've been replacing explicit `removeEventListener`-calls.
Given the somewhat limited availability of `AbortSignal.any()`, see [MDN](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/any_static#browser_compatibility), this event listener will no longer be immediately removed in older browsers (however that should be fine).",False
662bd022cefaa591a454f68faaac5010309e628a,2024-10-08 15:54:09,Jonas Jenwald,Reduce duplication in the `PDFDocument.calculationOrderIds` getter,False
e3b5ed2e40365d0c60a0e0c42fccf6d94cce8398,2024-10-08 15:45:04,Jonas Jenwald,"Improve the promise-caching in the `PDFDocument.fieldObjects` getter

After PR 18845 we're accessing this getter more, hence it seems like a good idea to ensure that the initial `formInfo` access is covered as well.
While unlikely to be a problem in practice, at least theoretically that data may not be available and the code in `fieldObjects` could thus currently be *unintentionally* invoked more than once.",False
1d4376c2e2743399e2d30fc09addb0da63a36410,2024-10-07 00:43:46,Tim van der Meij,"Fix typing logic in the scripting integration tests

The default `page.type()` API from Puppeteer works for text fields that
only dispatch a sandbox event on e.g. focus loss (i.e. after all
characters have been inserted), and for those we can also use the
default typing delay from Puppeteer instead of defining our own value.

However, it doesn't work correctly for text fields where every character
insertion dispatches a sandbox event. This is because processing the
sandbox event takes some time and Puppeteer must wait for that before it
can (safely) insert the next character. This commit therefore introduces
a helper function to type a given value correctly in such text fields.

Not only does this fix intermittent failures if our delay was too low
for sandbox processing to complete, but it also speeds up the tests by
eliminating our delays in places where they were (much) higher than
necessary. In total the runtime of the scripting integration test suite
goes from 137 seconds before this patch to 100 seconds after this patch.",False
81cf42df470f85eb60150bdffca380e3eee79c08,2024-10-06 17:19:12,Tim van der Meij,"Merge pull request #18858 from timvandermeij/bump

Bump the stable version in `pdfjs.config`",True
32caffb438537e3705ad8589e19963cc073acf65,2024-10-06 17:16:35,Tim van der Meij,Bump the stable version in `pdfjs.config`,False
8b73b828b6fa520c3d7c9f696580117793d8f7fe,2024-10-06 16:22:58,Tim van der Meij,"Merge pull request #18844 from calixteman/bug1922063

Use Calibri and Lucida Console, when it's possible, in place of sans-serif and monospaced (bug 1922063)",True
7eee86e078bcc1ff9bce5155150ef73d2ecd77fd,2024-10-06 16:16:41,Tim van der Meij,"Merge pull request #18855 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
e6a413d201c8e28124ddaec9c2b3f462c6e99e1b,2024-10-06 16:13:07,Tim van der Meij,Update translations to the most recent versions,False
dcc46ceafa8197dc9f102824072849a3cfc349e4,2024-10-06 16:13:07,Tim van der Meij,"Upgrade `eslint-plugin-unicorn` to version 56.0.0

This is a major version bump, but the changelog at
https://github.com/sindresorhus/eslint-plugin-unicorn/releases/tag/v56.0.0
doesn't indicate any breaking changes that should impact us.",False
78bf5287d17311e61bbeae23d281dbaf4da1925a,2024-10-06 16:13:07,Tim van der Meij,"Update dependencies to the most recent versions

Note that the new version of `eslint-plugin-import` contains support
for ESLint 9.

Moreover, the new version of Babel removed the leading space for import
comments (see https://github.com/babel/babel/pull/16780), so we update
the corresponding test expectation to match this.

Fixes a part of #17928.",False
a45e4a391a8ead2a3ae75b48082bee71478ba369,2024-10-06 00:15:25,Calixte Denizet,"Use Calibri and Lucida Console, when it's possible, in place of sans-serif and monospaced (bug 1922063)

A recent change in Firefox induced too much difference between the text widths computed in using a Canvas
and the ones computed by the text layout engine when rendering the text layer. Consequently, the
text selection can be bad on Windows with some fonts like Arial or Consolas.
This patch is a workaround to try to use in first place some fonts which don't have the problem.",False
5a25c477b7d40501d8530c9a9ec397d50711d5b7,2024-10-05 21:14:21,calixteman,"Merge pull request #18853 from calixteman/issue18036

Keep the empty lines in the text fields",True
3194f3de8b1eae9deed430eefba49cae872d9bbb,2024-10-05 19:49:41,Calixte Denizet,"Keep the empty lines in the text fields

It fixes #18036.",False
9e697359145c834a74e5a0a03eddb375e34fd145,2024-10-05 16:30:42,Tim van der Meij,"Merge pull request #18854 from sylvestre/patch-1

Add more authors",True
64ca2eeb8385ce71ef9f13e81640b4a16cdc290c,2024-10-05 02:08:31,Sylvestre Ledru,Add more authors,False
6aef332bcdf2da1c10fd2f08c6385590092329de,2024-10-04 23:51:07,Jonas Jenwald,"Merge pull request #18852 from Snuffleupagus/bug-1922618

Change how we handle l10n-args for dates in the DocumentProperties dialog (bug 1922618)",True
ac563b90b389034ff40d7534c9f40654609bea85,2024-10-04 23:46:05,calixteman,"Merge pull request #18845 from calixteman/issue15096

Fix missing annotation parent in using the one from the Fields entry",True
3103deaa44c75511edd3cc85eebfc2106c10b880,2024-10-04 23:30:19,Calixte Denizet,"Fix missing annotation parent in using the one from the Fields entry

Fixes #15096.",False
7c1883a839ef538cfb550c23d7f26f0b6c757bc1,2024-10-04 23:24:18,calixteman,"Merge pull request #18851 from calixteman/issue18849

[Editor] Avoid an exception when undoing the deletion of a pre-existing annotation",True
c681ff25d817f43f7f8f454010319dba46174bfc,2024-10-04 23:20:05,Jonas Jenwald,"Change how we handle l10n-args for dates in the DocumentProperties dialog (bug 1922618)

Strangely enough the code works just fine as-is in the GENERIC viewer, so there must be some difference between the Firefox built-in Fluent implementation and the Fluent.js one.

It seems that we can work-around the problem by handling this l10n-arg the same way that we handle dates in the AnnotationLayer, and testing this with the Firefox Devtools it seems that it should work.",False
b6e60d033a204686c78f695c2324523598fa92b5,2024-10-04 21:54:58,Calixte Denizet,"[Editor] Avoid an exception when undoing the deletion of a pre-existing annotation

It fixes #18849.

When such an annotation is deleted, we make sure that there are some data
to restore.
The version of this patch was making undoing a svg deletion buggy, so it's fixed now and
an integration test has been added for this case.",False
e5b6144bfa1a61a1dfe79c67e74e5eb08930fdab,2024-10-04 11:33:10,calixteman,"Merge pull request #18846 from flodolo/undo_number

Fluent: remove NUMBER() function from variant selector",True
e9c81a6e542fb13ba5c0f4c61ef1e23cd3718f20,2024-10-04 11:23:27,calixteman,"Merge pull request #18834 from calixteman/edit_stamp1

[Editor] Make stamp annotations editable (bug 1921291)",True
58d31479d728fe3cd1ad6ba04a8744e0d67da4c0,2024-10-04 10:44:45,Francesco Lodolo,Fluent: remove NUMBER() function from variant selector,False
8410252eb8d3f008782464d56f25cd5aa611edd6,2024-10-04 01:24:08,Calixte Denizet,[Editor] Make stamp annotations editable (bug 1921291),False
ebbd019d7dfeb70a29bee8d4a9cfbba50883a862,2024-10-03 23:08:49,Jonas Jenwald,"Merge pull request #18842 from Snuffleupagus/annotationEditorMode-AbortSignal-any

Remove the `PDFViewer.annotationEditorMode` setter event listeners with `AbortSignal.any()`",True
85586c585917ef189ff3dffbefa21ac932e78edf,2024-10-03 23:07:49,calixteman,"Merge pull request #18843 from calixteman/editor_async_deser

[Editor] Make the editor deserialization async",True
7bd3e5ccecf75de6a858973793dc0dd559303703,2024-10-03 22:04:22,Calixte Denizet,[Editor] Make the editor deserialization async,False
b7ae92c11ccacf67ab89d5505e9a554f647772ff,2024-10-03 19:27:46,Jonas Jenwald,Remove the `PDFViewer.annotationEditorMode` setter event listeners with `AbortSignal.any()`,False
4fb3adfc0ffe0061bf19a21d5c80c9f8c86f7ec9,2024-10-03 14:59:54,calixteman,"Merge pull request #18837 from calixteman/bug1838602

[GV] Increase the height (48px) of the toolbar in order to fit the a11y recommendations (bug 1838602)",True
0ce6f8b48217e2f494398c2a847e0e077b60f06c,2024-10-02 22:47:40,Calixte Denizet,"[GV] Increase the height (48px) of the toolbar in order to fit the a11y recommendations (bug 1838602)

and reorganize the toolbar css to use nested styles.",False
567df4214983a12da9f3d02a2ab1ea646f0dfcf1,2024-10-02 16:46:35,calixteman,"Merge pull request #18805 from calixteman/update_stamp

[Editor] Add the possibility to save an updated stamp annotation (bug 1921291)",True
c9050be863996770a45efe4dc23086c3d71a131a,2024-10-02 15:15:16,Calixte Denizet,[Editor] Add the possibility to save an updated stamp annotation (bug 1921291),False
e25832c43fe4d945b0773aef9abf7d8a6325c34f,2024-10-02 13:07:12,Jonas Jenwald,"Merge pull request #18831 from Snuffleupagus/toolbar-container

Fix `toolbarViewer`/`toolbarContainer` regressions (PR 18385, 18786 follow-up)",True
0308b8075f547f05f276bf53413b5ea8fe0df704,2024-10-02 12:43:06,calixteman,"Merge pull request #18824 from calixteman/issue18072

Write the display flags in F entry when saving an annotation (issue 18072)",True
07e8afb247e78c50e478ce4b7796cd1f1079eeb0,2024-10-01 23:13:19,Jonas Jenwald,"Always set `AppOptions.eventBus`, regardless of build, to make local testing easier",False
7c9d177826958bd02fe4d337f7becb8b9fe54c17,2024-10-01 23:13:16,Jonas Jenwald,"Update the `CaretBrowsingMode` toolbar-height if the `toolbarDensity` preference changes (PR 18786 follow-up)

Otherwise the isVisible-calculations may not work correctly.",False
3cdc3258d94a06af658e50290bf709426adf44b8,2024-10-01 20:57:56,calixteman,"Merge pull request #18830 from calixteman/menu_nvda

Make the secondary menu button usable with the keyboard when NVDA is enabled",True
2481a4bab97ab37169380d477f6ec8155b0966b4,2024-10-01 20:56:39,Calixte Denizet,Write the display flags in F entry when saving an annotation (issue 18072),False
f2a132f826a9b739b19bfb14efb86dfc02531d86,2024-10-01 20:47:40,Jonas Jenwald,"Use the ""correct"" toolbar container element in `getViewerConfiguration` (PR 18385 follow-up)

With the changes made in PR 18385 the `toolbarViewer` element is now shorter than before, since the padding is applied on its `toolbarContainer` parent-element instead.
This causes two separate regressions:
 - Clicking at the very top/bottom of the toolbar no longer closes the secondaryToolbar like previously.
 - The `CaretBrowsingMode`-constructor no longer computes the toolbar-height correctly.

Given how/where the `container`-property is being used these changes *should* thus be safe.",False
392c17efa084b92534e7130468116cc4522962d7,2024-10-01 20:27:39,Calixte Denizet,"Make the secondary menu button usable with the keyboard when NVDA is enabled

It's a temporary workaround until bug 1921984 is fixed.",False
35a9a6a7b34030397c2215ebd3d17064ac53887e,2024-10-01 18:47:00,Jonas Jenwald,"Merge pull request #18829 from Snuffleupagus/PDFLayerViewer-update-UI

Re-factor how `PDFLayerViewer` decides if the UI needs to updated on ""optionalcontentconfigchanged"" events",True
655ef12b14d0f50811548d2fe401ef79cd18dac3,2024-10-01 16:55:22,Jonas Jenwald,"Re-factor how `PDFLayerViewer` decides if the UI needs to updated on ""optionalcontentconfigchanged"" events

The current implementation won't work correctly in some cases, e.g. if RBGroups are present, which means that it's possible for the UI to get out-of-sync with the actual optionalContent-state.

To avoid querying the DOM unnecessarily we cache the last known UI-state and compare with the actual optionalContent-state, which thus replaces the previously used hash-comparison.",False
783facb312c75941ba6bbfd5dffc52e85f46af5e,2024-10-01 13:42:57,Jonas Jenwald,"Merge pull request #18822 from Snuffleupagus/Chrome-103

[api-minor] Update the minimum supported Google Chrome version to 103",True
1267e2825501e393364178b28615a86cab993df7,2024-09-29 16:41:02,Jonas Jenwald,"[api-minor] Update the minimum supported Google Chrome version to 103

This patch updates the minimum supported browsers as follows:
 - Google Chrome 103[1], which was released on 2022-06-21; see https://chromereleases.googleblog.com/2022/06/stable-channel-update-for-desktop_21.html

Note that nowadays we usually try, where feasible and possible, to support browsers that are about two years old. By limiting support to only ""recent"" browsers we reduce the risk of holding back improvements of the *built-in* Firefox PDF Viewer, and also (significantly) reduce the maintenance/support burden for the PDF.js contributors.

*Please note:* As always, the minimum supported browser version assumes that a `legacy`-build of the PDF.js library is being used; see https://github.com/mozilla/pdf.js/wiki/Frequently-Asked-Questions#faq-support

---

[1] This is consistent with the minimum supported version in the recently updated Google Chrome addon.",False
a7e1bf64c4c7a42c7577ce9490054faa1c4eda99,2024-09-28 22:50:56,Jonas Jenwald,"Merge pull request #18812 from Snuffleupagus/pr-15522-followup

Ensure that the CursorTools-buttons are disabled e.g. during editing (PR 15522 follow-up)",True
b1df164a26d22e1c9289962c7267a79aa5ce342e,2024-09-28 15:59:51,Jonas Jenwald,"Ensure that the CursorTools-buttons are disabled e.g. during editing (PR 15522 follow-up)

We disable any non-default CursorTool in PresentationMode and during Editing, since they don't make sense there and to prevent problems such as e.g. [bug 1792422](https://bugzilla.mozilla.org/show_bug.cgi?id=1792422).
Hence it seems like a good idea to *also* disable the relevant SecondaryToolbar-buttons, to avoid the user being surprised that the CursorTools-buttons do nothing if clicked.",False
642b9a5ae67ef642b9a8808fd9efd447e8c350e2,2024-09-26 23:46:13,calixteman,"Merge pull request #18793 from calixteman/bug1911980

[Editor] Avoid to have a selected stamp annotation on top of the secondary toolbar (bug 1911980)",True
c46ac3f73fe549e025468b87c3585597b74391f6,2024-09-26 21:34:24,calixteman,"Merge pull request #18800 from calixteman/popup_deletion

[Editor] When deleting an annotation with popup, then delete the popup too",True
0382dd0e252ff4d8be5956114ea176a68fe10bba,2024-09-26 21:22:25,Calixte Denizet,"[Editor] When deleting an annotation with popup, then delete the popup too",False
ec01af6b389ff103412a60113fb4c569d0721fbf,2024-09-26 21:18:02,Calixte Denizet,[Editor] Avoid to have a selected stamp annotation on top of the secondary toolbar (bug 1911980),False
7063be986021cfbc9744fa770ef8ed5fc3d71d2e,2024-09-26 21:12:57,Jonas Jenwald,"Merge pull request #18802 from Snuffleupagus/issue-18801

Add basic support for non-embedded GillSansMT fonts (issue 18801)",True
7db9941e0f9fe877e89d756905916090a653df8c,2024-09-26 20:12:54,Jonas Jenwald,"Add basic support for non-embedded GillSansMT fonts (issue 18801)

Given the following excerpt from the [Wikipedia article](https://en.wikipedia.org/wiki/Gill_Sans), mapping this to Helvetica should hopefully be fine:

> It has been described as ""the British Helvetica"" because of its lasting popularity in British design.",False
6daaa2fef70f05106828869f82cfa29d7c9fa587,2024-09-26 19:58:27,Jonas Jenwald,"Merge pull request #18799 from Snuffleupagus/rm-more-getCanvas-trackTransform

Remove `trackTransform` arguments from `CachedCanvases.getCanvas`-calls (PR 15281 follow-up)",True
fa2d7fc1787c552f7a1e3bcf0351393d0c17c605,2024-09-26 18:51:44,Jonas Jenwald,"Remove `trackTransform` arguments from `CachedCanvases.getCanvas`-calls (PR 15281 follow-up)

This became unused in PR 15281, however that patch clearly missed some occurrences; sorry about that!",False
3902a148e25f0f52b4457ab2588a899b9ccd26f7,2024-09-26 18:33:22,Jonas Jenwald,"Merge pull request #18785 from Snuffleupagus/transportFactory-init

Slightly re-factor the `transportFactory` initialization in `getDocument`",True
2ff80359815c239bfaeb2c6633c4fc9db19f0cf4,2024-09-26 17:55:14,calixteman,"Merge pull request #18798 from calixteman/pattern_negative_bbox

Fix the rendering of tiling pattern when the steps are lower than the tile dimensions (bug 1837738)",True
6d88f9f1546efaa0aa63bd9b7cbaf202226120f8,2024-09-26 17:50:48,Calixte Denizet,"Fix the rendering of tiling pattern when the steps are lower than the tile dimensions (bug 1837738)

It fixes #16038.

The idea is to create a pattern having the steps for dimensions and then draw
the base tile and the different overlapping parts on it.",False
a989244570b26fee6538f1414055dc0c2ac7533f,2024-09-26 15:46:05,Jonas Jenwald,"Slightly re-factor the `transportFactory` initialization in `getDocument`

Given that the `WorkerTransport`-constructor will access all possible factory-instances, let's ensure that the `transportFactory`-object always has a consistent shape regardless of other options.

Also, since `useWorkerFetch` is always true in MOZCENTRAL builds we never need to create `CMapReaderFactory`/`StandardFontDataFactory`-instances there.",False
a1283785e58a3a1eadfb4f786a5cd9b82bb82c26,2024-09-26 15:39:37,Jonas Jenwald,"Merge pull request #18796 from Snuffleupagus/unify-toolbarContainer

Unify separate `#toolbarContainer`-blocks in the CSS (PR 18385 follow-up)",True
17008ddf21e6b9459fd8f6fdabb7fb691e7bcebe,2024-09-26 15:39:03,Jonas Jenwald,"Merge pull request #18795 from Snuffleupagus/rm-splitToolbarButton

Remove the unused `splitToolbarButton` CSS class (PR 18385 follow-up)",True
f765b5ab3562cf894b0a1c25473c745c1b3a07fe,2024-09-26 14:38:55,Jonas Jenwald,Unify separate `#toolbarContainer`-blocks in the CSS (PR 18385 follow-up),False
135ee03847e34aa68a77545dc02d29cf27a783b8,2024-09-26 14:31:18,Jonas Jenwald,Remove the unused `splitToolbarButton` CSS class (PR 18385 follow-up),False
9735a840ad9e8b6f87d24279504400f6da13acfe,2024-09-25 21:48:31,Marco Castelluccio,"Merge pull request #18791 from sylvestre/patch-1

Add Calixte to the list of authors",True
4ab381f52e86e2d59f7b8888ada80cc2249a4b34,2024-09-25 19:18:54,calixteman,"Merge pull request #18786 from calixteman/update_toolbar_height

Increase the size of the toolbar depending on the uidensity (bug 1171799)",True
45758104a4097809393b0a1c4da8e4a95f112ad9,2024-09-25 18:28:33,calixteman,"Merge pull request #18790 from calixteman/bug1917734

Correctly compute the font size when printing a text field with an auto font size (bug 1917734)",True
5c407a2d23cb7e8d6124921727197d58a777cb12,2024-09-25 18:18:01,Sylvestre Ledru,Add Calixte to the list of authors,False
e23159c41bb58028237bfeb5c86a2594170ae9a0,2024-09-25 17:57:17,Calixte Denizet,Increase the size of the toolbar depending on the uidensity (bug 1171799),False
fc1564f476d9a5fe7221109f7bcd7bced9d2ff1b,2024-09-25 17:35:54,Calixte Denizet,Correctly compute the font size when printing a text field with an auto font size (bug 1917734),False
529906c74f1a53198200be7f61e63f8f94d1a371,2024-09-24 16:14:34,calixteman,"Merge pull request #18784 from calixteman/rm_useless_css

Remove duplicated --toolbar-height definition in the css",True
50517b8fba3f7e30a9def3af2573a3a0f2e731cd,2024-09-24 16:01:43,Calixte Denizet,Remove duplicated --toolbar-height definition in the css,False
cc63941b6496382bc8c762b6ccd886f036d43601,2024-09-24 13:38:02,calixteman,"Merge pull request #18783 from calixteman/rm_useless_css

Remove useless css variable --editor-toolbar-base-offset",True
e9b10ae8b253bec336fec4113cd042ae95e2eb64,2024-09-24 13:28:17,Calixte Denizet,Remove useless css variable --editor-toolbar-base-offset,False
45fef4c6d7af3e352a2ae470fc3b5eb5136e50d9,2024-09-24 13:08:47,Jonas Jenwald,"Merge pull request #18781 from timvandermeij/typescript

Update `typescript` to version 5.6.2",True
313ab9a464abbc1d68614e3aa0038b245b024ad6,2024-09-24 12:34:36,calixteman,"Merge pull request #18385 from calixteman/remove_tabindex

Refactor the toolbar html & css to improve its overall accessibility (bug 1171799, bug 1855695)",True
6f40ed729bf8b504bb47b1e28c4c26fb4601435f,2024-09-24 02:13:44,Calixte Denizet,"Refactor the toolbar html & css to improve its overall accessibility (bug 1171799, bug 1855695)

The first goal of this patch was to remove the tabindex because it helps
to improve overall a11y. That led to move some html elements associated
with the buttons which helped to position these elements relatively to their
buttons.
Consequently it was easy to change the toolbar height (configurable in Firefox
with the pref browser.uidensity): it's the second goal of this patch.
For a11y reasons we want to be able to change the height of the toolbar to make
the buttons larger.",False
c90ce5da20333b3fd838299311c5b665d358df55,2024-09-24 01:42:25,calixteman,"Merge pull request #18779 from calixteman/bug1920515

[Editor] Don't show the ml toggle button when the ml is disabled (bug 1920515)",True
c8af3f14d3c5b3fde4a591b5b77a1f7948dc3f43,2024-09-24 00:04:35,Tim van der Meij,"Update `typescript` to version 5.6.2

This is unblocked because in commit bb302dd the default value for the
constructor got removed, which apparently confused TypeScript before.

Fixes #18770.",False
d35a20a8c1dd89d6d2fc0f301f1454eebc9d96b7,2024-09-23 23:16:32,Calixte Denizet,[Editor] Don't show the ml toggle button when the ml is disabled (bug 1920515),False
b65b7747b6a2e1d150e2bccb89d77d165e298273,2024-09-23 18:16:12,Jonas Jenwald,"Merge pull request #18777 from Snuffleupagus/version-4.7

Bump library version to `4.7`",True
be60ca66e10ea6d72ab8f9204b1e3d01e708edd7,2024-09-23 18:10:09,Jonas Jenwald,Bump library version to `4.7`,False
bbef99fe82a8fc600173a0864916f3ee796ef513,2024-09-23 18:06:32,Jonas Jenwald,"Merge pull request #18776 from Snuffleupagus/api-CanvasFactory-FilterFactory

[api-minor] Pass `CanvasFactory`/`FilterFactory`, rather than instances, to `getDocument`",True
6aa02ed7f6277f38167f983f28943c86d3958c18,2024-09-23 15:23:54,Jonas Jenwald,"Merge pull request #18771 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
bb302dd99337ed4705f2b5d4000091d844366b78,2024-09-23 14:56:30,Jonas Jenwald,"[api-minor] Pass `CanvasFactory`/`FilterFactory`, rather than instances, to `getDocument`

This unifies the various factory-options, since it's consistent with `CMapReaderFactory`/`StandardFontDataFactory`, and ensures that any needed parameters will always be consistently provided when creating `CanvasFactory`/`FilterFactory`-instances.

As shown in the modified example this may simplify some custom implementations, since we now provide the ability to access the `CanvasFactory`-instance used with a particular `getDocument`-invocation.",False
ed100f2ef231920b7e7e367313a87b5a3ae362d0,2024-09-22 23:57:10,Tim van der Meij,Update translations to the most recent versions,False
3753387e9dd9b9dd16a1e742384d978e11516f56,2024-09-22 23:57:10,Tim van der Meij,Update dependencies to the most recent versions,False
ddd7b63406cb7f600f8a4fda1a3088af364a2365,2024-09-22 23:51:37,Tim van der Meij,"Merge pull request #18772 from Snuffleupagus/Node-unit-test-fs-promise

Use `fs/promises` in the Node.js unit-tests (PR 17714 follow-up)",True
1a1dfe60bfe0f029fa90a5b5c11f3a29d391e3b6,2024-09-22 16:30:57,Jonas Jenwald,Add more optional chaining in the `test/` directory,False
0a621ba73a974d1052fc9a6f796632be3c9b975e,2024-09-22 16:27:23,Jonas Jenwald,"Use `fs/promises` in the Node.js unit-tests (PR 17714 follow-up)

This is available in all Node.js versions that we currently support, and using it allows us to remove callback-functions; please see https://nodejs.org/docs/latest-v18.x/api/fs.html#promises-api",False
ea2172e75452720350d562418749a2b972a0583d,2024-09-22 00:41:53,Jonas Jenwald,"Merge pull request #18766 from Snuffleupagus/issue-18765

Ignore non-existing /Shading resources during parsing (issue 18765)",True
67af371e587d0ec440c7d3c118841e0fd444eb63,2024-09-20 01:25:02,Jonas Jenwald,Ignore non-existing /Shading resources during parsing (issue 18765),False
96cdff4a73a43e2f9259aed015ba8dcf9c169766,2024-09-19 20:01:48,Jonas Jenwald,"Merge pull request #18763 from Snuffleupagus/readme-update-issue-link

Link to the new issue templates from the README (PR 18308 follow-up)",True
9e001f851330e99e02b6aad781d4823c0c3f4cc0,2024-09-19 19:44:39,Jonas Jenwald,Link to the new issue templates from the README (PR 18308 follow-up),False
6222359c5f2f216cea3b0d798aa2d5852badd974,2024-09-19 19:07:17,calixteman,"Merge pull request #18761 from calixteman/fix_separator_color

Fix the rendering of the different separators we've in the UI",True
b29278efb802ce00e21cda2bec79aad2719026da,2024-09-19 18:54:01,Calixte Denizet,"Fix the rendering of the different separators we've in the UI

Currently, the css for a separator is something like { height: 1px; background-color: ... }.
But its rendering depends on its position on the screen.
So instead of setting the height to 1px, we just set something like { border-top: 1px solid ...; },
this way the final rendering is exactly the same for all the separators.",False
652e3e0d76a8184283effefed3e186c828bf34de,2024-09-19 17:03:50,calixteman,"Merge pull request #18760 from calixteman/bug1919513

Read a signed integer when using PUSHW in sanitizing a font (bug 1919513)",True
78dd35483ceaccab29a7584e454170e6412f5e47,2024-09-19 01:39:17,Calixte Denizet,Read a signed integer when using PUSHW in sanitizing a font (bug 1919513),False
19151feb5f855d2afcfecba16fde6ac582f5662d,2024-09-18 00:50:38,calixteman,"Merge pull request #18757 from calixteman/rename_toolbar_buttons

Rename the toolbar buttons in order to free their current names",True
ee89bd1c39c39327df0a4837728d5a9e30734ad9,2024-09-18 00:04:38,Calixte Denizet,"Rename the toolbar buttons in order to free their current names

which can then be used for their future parent container.
This patch aims to simplify a bit the patch in #18385.",False
a58cd6851e7b319ab381f8b6b4e7bb6ac7d368c1,2024-09-17 22:49:19,Tim van der Meij,"Merge pull request #18756 from Snuffleupagus/api-NetworkStream

Simplify the code that picks the appropriate NetworkStream-implementation",True
f77a29d6759475854d98386ab0b1546c811a29c4,2024-09-17 15:53:43,Jonas Jenwald,"Simplify the code that picks the appropriate NetworkStream-implementation

This code is quite old and has been moved/re-factored a few times over the years, however we can simplify this even further since we don't actually need a function to determine what NetworkStream-implementation to use.",False
f68310b7b1db39a934124acc90867a949da2d091,2024-09-16 18:31:38,calixteman,"Merge pull request #18749 from calixteman/issue18626

[Editor] Take into account the device pixel ratio when drawing an added image",True
46fac8b2c1442f3f7e7916962d6c68dd6164d550,2024-09-16 18:18:26,Calixte Denizet,"[Editor] Take into account the device pixel ratio when drawing an added image

Fixes #18626.",False
014ce7c1dbf0ff8659a3afb965d45fe5931962a6,2024-09-15 19:13:23,Tim van der Meij,"Merge pull request #18728 from Rob--W/crx-mv3-fallback-detect-fixup

[CRX] Fix feature detect of DNR responseHeaders option",True
bf5c987fee663e947652f926704547be4c29b7f3,2024-09-15 19:12:38,Tim van der Meij,"Merge pull request #18748 from Rob--W/crx-mv3-enable-wasm

[CRX] Enable WebAssembly in Chrome extension",True
3170bf3f690fd28e6d45e84dc3eb927e237fc758,2024-09-15 16:28:38,Rob Wu,"[CRX] Enable WebAssembly in Chrome extension

After the removal of 'unsafe-eval' CSP in #18651, WebAssembly fails to
load, resulting in issues such as seen in #18457.

Manifest Version 3 does not allow 'unsafe-eval', does accept the more
specific 'wasm-unsafe-eval' as of Chrome 103. Note that manifest.json
already sets minimum_chrome_version to 103.

This patch also adds `object-src 'self'` because it was required until
Chrome 110. As of Chrome 111, the default is `object-src 'self'` and
`object-src` is no longer required. We could drop `object-src` in the
future, but for now we need to include it to support Chrome 103 - 110.",False
c72fb9b7332d5db523736b76d0297cfb97c14385,2024-09-13 02:08:52,Jonas Jenwald,"Merge pull request #18742 from Snuffleupagus/pageColorsBackground-unloaded-pages

Use the ""pageColorsBackground"" option as background-color for non-loaded pages (issue 18680)",True
d86f94a3db6540407e28db783ef6791156e99343,2024-09-13 00:45:15,Jonas Jenwald,"Use the ""pageColorsBackground"" option as background-color for non-loaded pages (issue 18680)

This should prevent non-loaded pages from flashing white in e.g. high contrast mode (HCM).",False
b915a9c3a54ab7e776d8e519da3d2a32237b530c,2024-09-12 20:33:17,calixteman,"Merge pull request #18741 from flodolo/fluent_number

Fluent: use explicit NUMBER() in plural variants",True
427542445661f81290c9149fd41585d1eff926f4,2024-09-12 20:30:38,calixteman,"Merge pull request #18740 from calixteman/bug1897909

[Editor] Avoid an extra new line when serializing a FreeText annotation (bug 1897909)",True
6e1b4d63e75623a4e70693bf65071272d19d9d88,2024-09-12 20:23:18,Francesco Lodolo,Fluent: use explicit NUMBER() in plural variants,False
85e8bac45d89118b653ab43eab95afc3761a824d,2024-09-12 19:05:19,Calixte Denizet,"[Editor] Avoid an extra new line when serializing a FreeText annotation (bug 1897909)

The extra new line is added because of using shift+enter to add a new line
in the text editor.",False
1ab9ab67eed886f27127bd801bc349949af5054e,2024-09-12 14:05:14,Jonas Jenwald,"Merge pull request #18738 from mozilla/dependabot/npm_and_yarn/dset-3.1.4

Bump dset from 3.1.3 to 3.1.4",True
edd1dfb6992de9d3853882c8ffa141fcf0e2e13f,2024-09-12 05:23:47,dependabot[bot],"Bump dset from 3.1.3 to 3.1.4

Bumps [dset](https://github.com/lukeed/dset) from 3.1.3 to 3.1.4.
- [Release notes](https://github.com/lukeed/dset/releases)
- [Commits](https://github.com/lukeed/dset/compare/v3.1.3...v3.1.4)

---
updated-dependencies:
- dependency-name: dset
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>",False
cb20d1b1699c527c6b3f635126fa47fd626a4979,2024-09-11 21:33:59,calixteman,"Merge pull request #18737 from calixteman/bug1918115

[JS] Correctly format floating numbers when they're close to an integer (bug 1918115)",True
ca95264e8bc353e4a72cb46c1a1c397d2d8b8b23,2024-09-11 20:49:34,Calixte Denizet,[JS] Correctly format floating numbers when they're close to an integer (bug 1918115),False
c52e8485a72c15f85698b87659e4ed66e8a012e3,2024-09-11 19:59:53,Jonas Jenwald,"Merge pull request #18731 from Snuffleupagus/TextLayer-ensureCtxFont

Ensure that textLayers can be rendered in parallel, without interfering with each other",True
5b3d3c7dd93eb3e3f88ad8c9123657a3020ddfbd,2024-09-11 18:58:51,Jonas Jenwald,"Ensure that textLayers can be rendered in parallel, without interfering with each other

Note that the textContent is returned in ""chunks"" from the API, through the use of `ReadableStream`s, and on the main-thread we're (normally) using just one temporary canvas in order to measure the size of the textLayer `span`s; see the [`#layout`](https://github.com/mozilla/pdf.js/blob/5b4c2fe1a845169ac2b4f8f6335337c434077637/src/display/text_layer.js#L396-L428) method.

*Order of events, for parallel textLayer rendering:*
 1. Call [`render`](https://github.com/mozilla/pdf.js/blob/5b4c2fe1a845169ac2b4f8f6335337c434077637/src/display/text_layer.js#L155-L177) of the textLayer for page A.
 2. Immediately call `render` of the textLayer for page B.
 3. The first text-chunk for pageA arrives, and it's parsed/layout which means updating the cached [fontSize/fontFamily](https://github.com/mozilla/pdf.js/blob/5b4c2fe1a845169ac2b4f8f6335337c434077637/src/display/text_layer.js#L409-L413) for the textLayer of page A.
 4. The first text-chunk for pageB arrives, which means updating the cached fontSize/fontFamily *for the textLayer of page B* since this data is unique to each `TextLayer`-instance.
 5. The second text-chunk for pageA arrives, and we don't update the canvas-font since the cached fontSize/fontFamily still apply from step 3 above.

Where this potentially breaks down is between the last steps, since we're using just one temporary canvas for all measurements but have *individual* fontSize/fontFamily caches for each textLayer.
Hence it's possible that the canvas-font has actually changed, despite the cached values suggesting otherwise, and to address this we instead cache the fontSize/fontFamily globally through a new (static) helper method.

*Note:* Includes a basic unit-test, using dummy text-content, which fails on `master` and passes with this patch.

Finally, pun intended, ensure that temporary textLayer-data is cleared *before* the `render`-promise resolves to avoid any intermittent problems in the unit-tests.",False
870394d22b6c39999cc6b6c313cf8a36f21788d5,2024-09-11 18:45:16,calixteman,"Merge pull request #18730 from calixteman/issue18693

Consider foo-\nBar as a compound word",True
06f9d8002d04b91113d3d7e44ce6bc1f7770d835,2024-09-11 18:31:54,Calixte Denizet,"Consider foo-\nBar as a compound word

Fixes #18693.",False
0ac7f294cdb84bb0e4a346e890f567a1574f531c,2024-09-10 22:30:58,calixteman,"Merge pull request #18726 from calixteman/issue18058

Consume any pending path before drawing an annotation",True
518b776e431b239539856f01ef5881b401f80fe9,2024-09-10 20:14:30,Calixte Denizet,"Consume any pending path before drawing an annotation

Fixes #18058.",False
a91ba11185621664eb5fb7213454b17c33472673,2024-09-10 19:35:11,Rob Wu,"[CRX] Fix feature detect of DNR responseHeaders option

Fix regression from #18711. `urlFilter` is a key of `condition`, not of
the `rule`. Consequently, the feature detection method failed to detect
the availability of the feature in Chrome 128+.",False
66ed4b9e255168f230dae394a202168b47da681f,2024-09-10 19:29:25,Jonas Jenwald,"Merge pull request #18724 from Snuffleupagus/highlight-rm-l10nPromise

Remove ununsed static `HighlightEditor._l10nPromise` field",True
2883a9460e08a72efeb1b9a40f77bf65cd03c47b,2024-09-10 13:30:41,Jonas Jenwald,Remove ununsed static `HighlightEditor._l10nPromise` field,False
5b4c2fe1a845169ac2b4f8f6335337c434077637,2024-09-10 01:43:49,calixteman,"Merge pull request #18716 from calixteman/stamp_auto_resize

[Editor] Avoid to have a stamp editor resizing itself",True
f98e6040cdeedce665191180db97418739f445d7,2024-09-10 01:42:46,calixteman,"Merge pull request #18719 from calixteman/bug1917543

[Editor] Avoid to have the ML disclaimer when the ML engine isn't ready (bug 1917543)",True
95cd848e3bcd808d7785288e7b776b05459ac1b8,2024-09-10 01:20:46,calixteman,"Merge pull request #18718 from calixteman/bug1916714

[JS] Let AFSpecial_KeystrokeEx match a format without 'decoration' (bug 1916714)",True
6e4b7ee3f8618001414e1629a4ac876fb3322b82,2024-09-10 01:17:18,Calixte Denizet,[Editor] Avoid to have the ML disclaimer when the ML engine isn't ready (bug 1917543),False
3f23bcbeccce8a67bb2feafb6f34e4167099c6aa,2024-09-10 01:01:55,Calixte Denizet,"[Editor] Avoid to have a stamp editor resizing itself

Fixes #18715.",False
5f39b592c530a70219de49e0ce31a275a0725073,2024-09-10 00:53:16,Tim van der Meij,"Merge pull request #18708 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
bae32b4fd25ff06e056fce8cb6eb6d83ede67953,2024-09-09 23:59:14,Calixte Denizet,"[JS] Let AFSpecial_KeystrokeEx match a format without 'decoration' (bug 1916714)

It'll let the user enter 1234567 instead of 123-4567 for example.
It works like this in other pdf viewers.",False
8e5f06d77d5ebc9ff66d5d57f99109b553ff4e8a,2024-09-09 23:30:44,Tim van der Meij,"Merge pull request #18711 from Rob--W/crx-mv3-fallback-detect

[CRX] Detect availability of DNR responseHeaders before use",True
2f2d74ba5c220379e42e61bb81d85c34d2e7ec64,2024-09-09 23:21:21,Tim van der Meij,Update translations to the most recent versions,False
ae13b4a01571c73c6d451cb36bc66b21f6d996d2,2024-09-09 23:21:21,Tim van der Meij,Update dependencies to the most recent versions,False
9705169371ec9024c3396c7577f6eb87b3b755de,2024-09-09 18:11:00,Rob Wu,"[CRX] Detect availability of DNR responseHeaders before use

Critical fix for old but recent Chrome versions; all requests are
otherwise redirected to the viewer.",False
a1b45d6e69d37b76e675a7f247943b70f186baca,2024-09-08 21:40:43,Tim van der Meij,"Merge pull request #18681 from Rob--W/crx-mv3-migration

[CRX] Migrate Chrome extension to Manifest Version 3",True
4bf7be64279a153b2f69d2112fea9cb1b2bbf29e,2024-09-08 20:05:14,Rob Wu,"[CRX] Bump minimum_chrome_version from 88 to 103

The minimum required version is Chrome 103 because wildcard support for
web_accessible_resources[].extension_id was introduced in 103, in
https://chromium.googlesource.com/chromium/src/+/c9caeb1a080f165f48d2a90559aa35d22965b440

A way to broaden compatibility is to drop that key. By doing so, the
minimum required Chrome version is then 96, because of the
chrome.storage.session API (and declarativeNetRequestWithHostAccess).

Since gulpfile.js already defines ""Chrome >= 98"" and there is no real
point in expanding support to older versions, I'm just setting the
minimum version to 103.",False
b3a0ad09ada95b4fa8497eb510d43e4bace64a60,2024-09-08 20:05:14,Rob Wu,[CRX] Add work-around for Chrome crash,False
4327502bf3f2e47d44c043ee00e7602414a8ca6d,2024-09-08 20:05:14,Rob Wu,[CRX] Add fallback PDF detection for Chrome 127-,False
3fe256cd0d8f7ac09a683775c2e9df5d35255947,2024-09-08 20:05:13,Rob Wu,"[CRX] Set manifest_version to 3

- Replace DOM-based pdfHandler.html (background page) with background.js
  (extension service worker).

- Adjust logic of background scripts to account for the fact that the
  scripts can execute repeatedly during a browser session. Primarily,
  register relevant extension event handlers at the top level and use
  in-memory storage.session API to keep track of initialization state.

- Extension URL router: replace blocking webRequest with the service
  worker-specific ""fetch"" event.

- PDF detection: replace blocking webRequest with declarativeNetRequest.
  This requires Chrome 128+. The next commit will add a fallback for
  earlier Chrome versions.",False
7017d8246b9dc72a38f4cfe9b99137bb8a0c6b82,2024-09-08 20:05:13,Rob Wu,"[CRX] Replace localStorage in telemetry logic

In MV3, the background script is a service worker. localStorage is not
supported in service workers. Switch to storage.local instead.

Data migration is not implemented because it is not needed due to the
privacy-friendly design of the telemetry: In practice the data is reset
about every 4 weeks, when the major version of Chrome is updated.",False
bc4890d4d4cce1bf8d5ff32c8175dc4a96cf7167,2024-09-08 20:05:13,Rob Wu,"[CRX] Remove restoretab.js logic

restoretab.js was added in https://github.com/mozilla/pdf.js/pull/6233
with the purpose of restoring lost tabs when Chrome closes all extension
tabs when it reloads the extension. This forced reload can happen when
the user toggles the ""Allow access to file URLs"" option.

This logic does not work any more, and since the use of localStorage is
a blocker in migrating to MV3, this patch just drops the logic.",False
23bc46d51a9afcf1fd63c645b7d1a0808b5a3b35,2024-09-08 20:05:13,Rob Wu,[CRX] Replace deprecated extension.getURL with runtime.getURL,False
b23829fc60dab77448f30012a575b8368885497d,2024-09-08 20:05:13,Rob Wu,"[CRX] Drop chrome_style from manifest.json

MV3 does not support chrome_style in options_ui. Remove it and replace
it with the minimal amount of styles that still has some spacing around
the individual settings for readability.",False
bd3d9931804b428afa3f6b5d6283e2c2ae0d72eb,2024-09-08 20:05:13,Rob Wu,"[CRX] Use DNR instead of webRequest in preserve-referer

webRequestBlocking is unavailable in MV3. Non-blocking webRequest can
still be used to detect the Referer, but we have to use
declarativeNetRequest to change the Referer header as needed.",False
578549487f17fcf530d75182fbd3caca8172c5db,2024-09-08 15:30:44,Tim van der Meij,"Merge pull request #18707 from Snuffleupagus/pr-18596-followup

Prevent `.visibleMediumView` from overriding already hidden elements (issue 18704, PR 18596 follow-up)",True
c159cb13351190cc21e029717f378db8b4b519f6,2024-09-08 15:19:50,Tim van der Meij,"Merge pull request #18682 from Snuffleupagus/responseHeaders

Use response-`Headers` in the different `IPDFStream` implementations",True
b681ea6fd9a80fc622d9402f098df2155b85ceb0,2024-09-08 14:17:18,Jonas Jenwald,"Prevent `.visibleMediumView` from overriding already hidden elements (issue 18704, PR 18596 follow-up)

*Please note:* As a general rule we probably don't need to fix things affecting *custom* implementations of the default viewer, but in this case a ""targeted"" fix seem possible that shouldn't (famous last words) break anything else.

Ensure that the `.visibleMediumView` class, which is used when the viewer becomes narrow, cannot override the `display`-value for DOM elements that are being *explicitly* hidden either through the associated attribute or class.",False
5d0c82cf0530723cc47f7f116e23cbfe51b682d4,2024-09-08 02:50:09,Jonas Jenwald,"Merge pull request #18706 from Snuffleupagus/AltText-full-l10n-ids

Use ""full"" localization ids in the `AltText` class (PR 18674 follow-up)",True
727454600bdda07cdec230d9edd8603ee3df71a2,2024-09-08 02:49:28,Jonas Jenwald,"Merge pull request #18705 from Snuffleupagus/ColorPicker-full-l10n-ids

Use ""full"" localization ids in the `ColorPicker` class (PR 18674 follow-up)",True
5369a24c9c41a10565e8003f01960f74b5cd8a21,2024-09-08 01:52:21,calixteman,"Merge pull request #18698 from calixteman/issue18694

Avoid to have a white line around the canvas",True
68332ec23670c020c8aade17d24256b86ccd8a6d,2024-09-07 23:42:29,Calixte Denizet,"Avoid to have a white line around the canvas

The canvas must have the same dims as the page in order to avoid to see the page
background.",False
0ffd99acc5965e56d7b260075fd3c063adc3488a,2024-09-07 20:08:21,Jonas Jenwald,"Use ""full"" localization ids in the `AltText` class (PR 18674 follow-up)

Apparently I missed these in PR 18674.",False
931090328d520ad2b216d4f952424785b019ae97,2024-09-07 19:23:01,Jonas Jenwald,"Use ""full"" localization ids in the `ColorPicker` class (PR 18674 follow-up)

Apparently I missed these in PR 18674.",False
2a01931e4a6148fa8a9c591a1a0ba93cc1910cfd,2024-09-07 16:06:34,Jonas Jenwald,"Use the `_headersCapability` name in `PDFNetworkStreamFullRequestReader`

This improves consistency in the code-base since the implementations with the Fetch API respectively Node.js uses that name.",False
840cc5e0d42dfc97ea0317ca3cf37dff586acd39,2024-09-07 16:04:53,Jonas Jenwald,"Use response-`Headers` in the different `IPDFStream` implementations

Given that the `Headers` functionality is now available in all browsers/environments that we support, [see MDN](https://developer.mozilla.org/en-US/docs/Web/API/Headers#browser_compatibility), we can utilize ""proper"" `Headers` in the helper functions that are used to parse the response.",False
77c7ec6927c0263a0ed2be2b0aae46b655855239,2024-09-05 22:20:22,calixteman,"Merge pull request #18692 from calixteman/bug1708040

Make tagged images visible for screen readers (bug 1708040)",True
ddba096191117517d90104786975d97d806ec5ca,2024-09-05 21:29:42,Calixte Denizet,"Make tagged images visible for screen readers (bug 1708040)

The idea is to insert a span in the text layer with an aria-role set to img
and use the bounding box provided by the attribute field in the tag dict in
order to have non-null dimensions for the image to make it ""visible"".",False
4b906ad0a8b128c0bc15b1e47282a8f6de427b6e,2024-09-05 19:45:23,calixteman,"Merge pull request #18697 from calixteman/issue18696

[Editor] Avoid to throw when an highlight annotation is resetted",True
350e3e7b1c6f539069a8df0e57fdc261d6620676,2024-09-05 19:01:49,Calixte Denizet,[Editor] Avoid to throw when an highlight annotation is resetted,False
e3fd62d7267ff28b291d503ff93f0ad0bda96cc8,2024-09-04 19:14:05,calixteman,"Merge pull request #18690 from calixteman/print_test_afterprint

In the autoprint integration test, resolve the promise on 'afterprint' event",True
4fb045b9eb013752086289d2f2db575e05d1497b,2024-09-04 17:37:18,calixteman,"Merge pull request #18689 from Snuffleupagus/StructTreeLayerBuilder-render-caching

Improve the `StructTreeLayerBuilder.render` method",True
5d622ada04790832ed5a51e8e9b28be2d8deb1f0,2024-09-04 17:19:02,Calixte Denizet,"In the autoprint integration test, resolve the promise on 'afterprint' event",False
1cdaaadf2d2f2911ad541e47514bf0817d250f8c,2024-09-04 17:11:18,calixteman,"Merge pull request #18670 from calixteman/bug1911764

[Editor] Remove the disclaimer when the user is editing the alt-text in the new alt-text modal (bug 1911764)",True
4b8628637afceb5a06b1d08740e38cfe1d3a47d8,2024-09-04 15:23:51,Jonas Jenwald,"Improve the `StructTreeLayerBuilder.render` method

In hindsight it occurred to me that there's a couple of smaller issues with this method after it's made asynchronous (in PR 18658).

 - If the `render`-method is invoked back-to-back the existing caching doesn't guarantee that re-parsing won't occur, which we can address by introducing a new (private) promise.

 - If there's any errors fetching and/or parsing the structTree-data, we'd attempt to parse it again on re-rendering despite that being pointless.",False
4aea51b5bffa6dcebbe80f44652bdc40a0fe853e,2024-09-04 13:30:35,Calixte Denizet,[Editor] Remove the disclaimer when the user is editing the alt-text in the new alt-text modal (bug 1911764),False
d3698223a8fb0d6912766cb539922fc905d02dc4,2024-09-04 01:17:21,calixteman,"Merge pull request #18658 from calixteman/bug1912001

[Editor] Make the stamp annotations alt text readable by either VO or NVDA (bug 1912001)",True
082ad955f03dbc4ea60d2d27f9ffb900c027887e,2024-09-03 23:56:35,Tim van der Meij,"Merge pull request #18673 from Snuffleupagus/use-Headers

Use `Headers` consistently in the different `IPDFStream` implementations",True
da99f5d6cd7ffc2c361627da2fdfe72a122cb4ac,2024-09-03 23:44:37,Tim van der Meij,"Merge pull request #18679 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
a61f4b03038674e5c328f8eddfc10ae0e79918d7,2024-09-03 21:26:37,calixteman,"Merge pull request #18427 from calixteman/edit_highlight

[Editor] Make highlight annotations editable (bug 1883884)",True
5d8d9ef6f98640d73d431de96128dee116118f43,2024-09-03 20:34:21,calixteman,"Merge pull request #18664 from calixteman/bug1911994

[Editor] Make the focused stamp annotation more clear from a screen reader point of view (bug 1911994)",True
deedbd1c4f7f918d84dc7ffa4db236541bae3b5e,2024-09-03 20:27:41,Calixte Denizet,[Editor] Make the stamp annotations alt text readable by either VO or NVDA (bug 1912001),False
843fde3b1304ee0bcc7b0fedc7684d0a625d6b79,2024-09-03 20:08:21,Calixte Denizet,"[Editor] Make the focused stamp annotation more clear from a screen reader point of view (bug 1911994)

It has been tested with Voice Over (mac) and with NVDA (windows).

When an added stamp annotation is focused, the screen reader will announce
that it's a figure containing a graphic with the added alt-text.",False
a62ceedb692f33bf9d7b25e2ca1a9fe9d25f3c84,2024-09-03 18:57:55,Calixte Denizet,"[Editor] Make highlight annotations editable (bug 1883884)

The goal of this patch is to be able to edit existing highlight annotations.",False
d3a94f17cb65ba305daf6c6a02db268ca78685e7,2024-09-02 15:26:24,Jonas Jenwald,"Use `Headers` consistently in the different `IPDFStream` implementations

The `Headers` functionality is now available in all browsers/environments that we support, which allows us to consolidate and simplify how the `httpHeaders` API-option is handled; see https://developer.mozilla.org/en-US/docs/Web/API/Headers#browser_compatibility

Also, simplifies the old `NetworkManager`-constructor a little bit.",False
8084ae2054525357b100c5bb3f52fa9705809dba,2024-09-01 23:29:22,Tim van der Meij,Update translations to the most recent versions,False
ec7d0f6860004235476f56539c284f2d9a766369,2024-09-01 23:28:26,Tim van der Meij,Update dependencies to the most recent versions,False
0676ea19cf17023ec8c2d6ad69a859c345c01dc1,2024-09-01 23:10:17,Tim van der Meij,"Merge pull request #18678 from timvandermeij/bump

Bump the stable version in `pdfjs.config`",True
4220116c1a4e0d6d742c3252478c45d24d49b93f,2024-09-01 23:06:48,Tim van der Meij,Bump the stable version in `pdfjs.config`,False
9b541910fffa3623643b73ca6b26f599f60cde8b,2024-09-01 19:14:00,Tim van der Meij,"Merge pull request #18675 from calixteman/nofirefox

Add an option (i.e. --noFirefox) to only use Chrome when running tests",True
bde7a84e0937e86063b0c709d36bf6a4d0cc1701,2024-09-01 19:00:20,Tim van der Meij,"Merge pull request #18672 from Snuffleupagus/PDFPageView-AnnotationEditorLayerBuilder-shorter-init

Shorten the code that inits `AnnotationEditorLayerBuilder` in the `web/pdf_page_view.js` file",True
4a132229c64c213d0c7cf8d507e85b010b293f7b,2024-09-01 18:57:48,Tim van der Meij,"Merge pull request #18665 from Snuffleupagus/PDFNodeStream-createRequest

Add a helper function for http/https requests in `src/display/node_stream.js`",True
2a68aa62f2057560e6ebec0a34eb85eb48c6fc86,2024-09-01 13:41:21,Jonas Jenwald,"Merge pull request #18674 from Snuffleupagus/full-l10n-ids

Use ""full"" localization ids throughout the code-base",True
1b0bfcae3ef58e2029fd969434ee20c018c28d0b,2024-09-01 01:59:24,Calixte Denizet,Add an option (i.e. --noFirefox) to only use Chrome when running tests,False
ff762179a605edd3ae4cff8598f84e2a28e9aa6e,2024-09-01 01:06:51,Jonas Jenwald,"Merge pull request #18671 from Snuffleupagus/update-l10n

Update l10n files",True
b01df2881044c41cf104d5082f81dd13a5f82cef,2024-08-31 22:01:31,Jonas Jenwald,"Use ""full"" localization ids throughout the code-base

It was recently brought to my attention that using partial or generated localization ids is bad for maintainability, hence this patch goes through the code-base and replaces any such occurrences.",False
044f1c9e074f71bede758f4ff0ac3d65d88042dc,2024-08-31 15:28:43,Jonas Jenwald,"Shorten the code that inits `AnnotationEditorLayerBuilder` in the `web/pdf_page_view.js` file

This code can now utilize logical OR assignment, which is ever so slightly shorter.",False
bcc511119e7bd8dec126feb4674477b232f004d4,2024-08-31 14:47:38,Jonas Jenwald,"Update l10n files

Given the recent l10n-id changes, let's do one more update before the next release to avoid ""broken"" translations.",False
7494dbccf44f7903ab1213b405e852715e5b4d3b,2024-08-30 22:08:21,calixteman,"Merge pull request #18666 from calixteman/update_loading_icon_alt_text

[Editor] Update the loading icon when wait for ML to take into account prefered-reduced-motion setting",True
36c5d192c7b96d8b92d59ac96ffce69eada57cf7,2024-08-30 19:18:51,Calixte Denizet,"[Editor] Update the loading icon when wait for ML to take into account prefered-reduced-motion setting

 * The icon has been updated in https://bugzilla.mozilla.org/show_bug.cgi?id=1908920;
 * Add a linter to check that a svg element doesn't have fill=""context-fill"" attribute.",False
a94e8ba9e8933d0893ee96638814a91b32949d76,2024-08-30 02:22:26,Jonas Jenwald,"Add a helper function for http/https requests in `src/display/node_stream.js`

Currently we repeat virtually the same http/https request code in two different classes in this file, which seems unnecessary and it leads to more code.",False
f6216df88934131e977eceb199b4ba203d96bd11,2024-08-30 00:28:15,Tim van der Meij,"Merge pull request #18663 from Snuffleupagus/PDFDocumentProperties-full-l10n-ids

Use ""full"" localization ids in the `PDFDocumentProperties` class",True
5d94047dad29a44b099dce366ca11ae01d90ab12,2024-08-30 00:20:43,Tim van der Meij,"Merge pull request #18657 from nicolo-ribaudo/url

Use the URL global instead of the deprecated url.parse",True
39ac3ef1a6c5123b1ded1482d7517dba4de1f659,2024-08-29 23:56:11,Jonas Jenwald,"Move the metric-locale check into `PDFDocumentProperties.#parsePageSize`

With the introduction of Fluent the `getLanguage`-method became synchronous, hence it no longer seems necessary to do the metric-locale check eagerly in the constructor and it can instead be ""delayed"" until actually needed.",False
a6e54160cc13bfd723e4aeede29c6295dd88138b,2024-08-29 23:56:11,Jonas Jenwald,"Use ""full"" localization ids in the `PDFDocumentProperties` class

It was recently brought to my attention that using partial or generated localization ids is bad for maintainability, which means that PR 18636 wasn't the correct thing to do.
However, just reverting that one doesn't really fix the problems which is why this patch updates *every* l10n-id in the `PDFDocumentProperties` class (but doesn't touch any `viewer.ftl`-files). Obviously this leads to more verbose code, but that cannot really be helped.",False
044e7612145ece4cc7775391e2d717ab68c3975c,2024-08-29 23:53:04,Tim van der Meij,"Merge pull request #18655 from Snuffleupagus/PDFDocumentProperties-updateUI-rm-param

Simplify the `PDFDocumentProperties.#updateUI` method",True
ce656238e3530b42b6f678530643fc500a376136,2024-08-29 23:48:19,Tim van der Meij,"Merge pull request #18651 from Rob--W/crx-mv3-prep-drop-manifest

[CRX] Remove obsolete manifest features",True
ea090fec02e89a99306ef7eefe33029d791b1458,2024-08-29 23:44:19,Tim van der Meij,"Merge pull request #18590 from timvandermeij/puppeteer-23

Upgrade Puppeteer to version 23.1.1",True
a5d0e410c7bcadbd4decbf4eea9da232c1ec01a4,2024-08-29 16:18:11,Jonas Jenwald,"Simplify the `PDFDocumentProperties.#updateUI` method

We can remove the `reset`-parameter, since it's redundant, given that it's only used after `PDFDocumentProperties.#reset` has been invoked which means that `this.#fieldData === null` which is equivalent to resetting.
Also, we don't need to have two separate loops in order to update the UI in this method.

Finally, inline the `DEFAULT_FIELD_CONTENT` constant now that it's only used once.",False
a41cd38387d09244c2a0c2405765efc8b3e9bce5,2024-08-29 01:48:21,calixteman,"Merge pull request #18661 from calixteman/bug1915434

[Editor] Fix few telemetry issues with the new alt text flow (bug 1915434)",True
1658b0af55456177a167f1ccbd5b51e1d384c836,2024-08-28 22:24:15,Calixte Denizet,[Editor] Fix few telemetry issues with the new alt text flow (bug 1915434),False
229ad1bb2ccf27eaee7fb0ebec5f4f2471041667,2024-08-27 21:49:25,Nicolò Ribaudo,"Use the URL global instead of the deprecated url.parse

The Node.js url.parse API (https://nodejs.org/api/url.html#urlparseurlstring-parsequerystring-slashesdenotehost)
is deprecated because it's prone to security issues (to the point that Node.js doesn't even publish CVEs for it anymore).

The official reccomendation is to instead use the global URL constructor, available both in Node.js and in browsers.
Node.js filesystem APIs accept URL objects as parameter, so this also avoids a few URL->filepath conversions.",False
ab052db5b38732459021f96c552baecd4e7a89d4,2024-08-27 19:05:50,Jonas Jenwald,"Merge pull request #18654 from Snuffleupagus/editor-l10n-disclaimer-str

[Editor] Define the ""pdfjs-editor-new-alt-text-generated-alt-text-with-disclaimer"" string once",True
d70f5a19528d0de4881d00955e889ad162dd0116,2024-08-27 18:29:24,Jonas Jenwald,"[Editor] Define the ""pdfjs-editor-new-alt-text-generated-alt-text-with-disclaimer"" string once

This l10n-string is being re-defined once for every editor, i.e. currently four times, which seems unnecessary.
To avoid having to check if this l10n-string exists first, we can utilize rest parameters to move it into the `AnnotationEditor._l10nPromise` Map-definition instead.",False
e9a319be2c971ae76a9025544a1be80485310bd2,2024-08-27 18:28:59,Jonas Jenwald,"Merge pull request #18649 from Snuffleupagus/resizers-fluent

[Editor] Utilize Fluent ""better"" when localizing the resizer DOM-elements",True
ac75a05cd4013bb57b0d038a55f432100c5845a3,2024-08-27 01:02:02,Jonas Jenwald,"[Editor] Utilize Fluent ""better"" when localizing the resizer DOM-elements

Currently we manually localize and update the DOM-elements of the editor-resizers, and it seems nicer to utilize Fluent for that task.
This can be achieved by updating the l10n-strings to directly target the `aria-label` and then just setting the `data-l10n-id` on the DOM-elements.",False
b58c24ab099c4bd4cefa5139669708227dd9641a,2024-08-26 19:03:41,calixteman,"Merge pull request #18650 from calixteman/bug1914480

[Editor] Add a missing parameter in the telemetry for the new alt text flow (bug 1914480)",True
1d545382a3363347db9ecdb4385555870c4b4a96,2024-08-26 01:33:38,Rob Wu,"[CRX] Remove obsolete extension API calls

These work arounds are no longer relevant to the latest Chrome versions.",False
683b511f20e2550b6f580173f0e626f14e3ee06e,2024-08-26 00:04:03,Rob Wu,"[CRX] Remove obsolete manifest features

In preparation for migrating the Chrome extension to Manifest Version 3,
this patch removes parts of the manifest that are obsolete and/or
unsupported in MV3.

Remove ftp mentions: ftp was dropped from 6 years ago, in Chrome 59.

Remove file_browser_handlers: does not work on Chrome OS according to
https://github.com/mozilla/pdf.js/issues/14161 . MV3 replacement needs
a different manifest key and logic, which will be added later.

Remove content_security_policy: MV3 does not support unsafe-eval CSP,
and PDF.js does not require it. This may result in a mild performance
degradation in PDFs that contain PostScript.

Remove page_action logic: When this logic was originally introduced,
Chrome showed page action buttons in the address bar, which enabled
the extension to display the button on specific PDF viewer tabs only.
In Chrome 49 (2016), pageActions were dropped from the address bar and
put in an UI area that is hidden by default. The user can pin the button
to be unconditionally visible on the toolbar, which is distracting.
Because the UX is no longer serving the original needs, this patch
removes page_action from the manifest.",False
e8763a08ab1a2cbbda994874853b60e571296120,2024-08-25 21:03:42,Calixte Denizet,[Editor] Add a missing parameter in the telemetry for the new alt text flow (bug 1914480),False
54eead78abcdf26d98fea706ed5c2d38b216c903,2024-08-25 16:19:20,Tim van der Meij,"Upgrade Puppeteer to version 23.1.1

This major version contains three breaking changes that impact us:

- The `product` option has been renamed to the more suitable `browser`.
- The `page.screenshot()` API returns a `Uint8Array` instead of a
  `Buffer`, but since `pngjs` requires a `Buffer` object we need to do
  the conversion using `Buffer.from()` before passing data to `pngjs`.
- The browser configuration should be set using a configuration file
  instead of environment variables. Note that as a bonus this allows us
  to remove the `cross-env` dependency since that was only used to set
  the Puppeteer environment variable equally for all operating systems.

For more information about the changes between the old and new Puppeteer
versions refer to https://github.com/puppeteer/puppeteer/releases.",False
cd99be0aa5c3d9cf8a860f2f0a8e677444fde8f6,2024-08-25 16:14:15,Tim van der Meij,"Merge pull request #18638 from Snuffleupagus/PDFDocumentProperties-l10n-functions

Utilize Fluent to format numbers and dates in `PDFDocumentProperties`/`AnnotationLayer`",True
de365b69faeb8c93fa14d8d1f81c7baa8aafc466,2024-08-25 16:09:52,Tim van der Meij,"Merge pull request #18648 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
6ce9f97943fd04830588dceea510c76e3fcd606b,2024-08-25 15:41:02,Jonas Jenwald,"Utilize Fluent to format dates in the `AnnotationLayer`

The `AnnotationLayer` may not display correctly formatted data in PopupAnnotations, especially in the GENERIC viewer, since it's using native methods[1] that depend on the *browser* locale instead of the viewer locale as intended.
With Fluent we're able to improve things since it's got built-in support for formatting dates. Not only does this simplify the JavaScript code slightly, but it also gives the localizer more fine-grained control of the desired output.

Please find additional information here:
 - https://projectfluent.org/fluent/guide/builtins.html
 - https://projectfluent.org/fluent/guide/functions.html

---

[1] `toLocaleDateString`, and `toLocaleTimeString`.",False
d96558836ebd974c058db54c8efec1ca04f9f3ba,2024-08-25 15:41:02,Jonas Jenwald,"Utilize Fluent to format numbers and dates in `PDFDocumentProperties`

The `PDFDocumentProperties` dialog may not display correctly formatted data, especially in the GENERIC viewer, since it's using native methods[1] that depend on the *browser* locale instead of the viewer locale as intended.
At the time when this dialog was introduced that was probably all we could easily do, but with Fluent we're able to improve things since it's got built-in support for formatting numbers and dates. Not only does this simplify the JavaScript code, but it also gives the localizer more fine-grained control of the desired output.

Please find additional information here:
 - https://projectfluent.org/fluent/guide/builtins.html
 - https://projectfluent.org/fluent/guide/functions.html

---

[1] `toLocaleString`, `toLocaleDateString`, and `toLocaleTimeString`.",False
bf778b04a88a1a5454a265b1c0bc80a7acb463d1,2024-08-25 15:10:42,Tim van der Meij,Update translations to the most recent versions,False
c26aac013efe0dea2dc63876400225f9cc15e3e9,2024-08-25 15:09:06,Tim van der Meij,"Fix vulnerability in the `micromatch` dependency

This patch is generated automatically using `npm audit fix` and fixes
CVE-2024-4067 (see https://github.com/advisories/GHSA-952p-6rrq-rcjv),
bringing the vulnerability count back to zero.",False
5d31fda87677d49d59cd3c1cd3a24bb3b74f1abc,2024-08-25 15:08:00,Tim van der Meij,Update dependencies to the most recent versions,False
037c181af6ff185f9714d0c766077bc19696e15c,2024-08-24 00:07:46,Tim van der Meij,"Merge pull request #18644 from Snuffleupagus/PDFPrintService-unconditional-toBlob

Use `HTMLCanvasElement.toBlob()` unconditionally in `PDFPrintService`",True
f11baea3e30cbe37b174151a8688bfc29a743bf7,2024-08-24 00:06:01,Tim van der Meij,"Merge pull request #18643 from Snuffleupagus/l10n-translateOnce

Introduce a `L10n`-method to translate an element once, and use that in `PDFLayerViewer`",True
f025cecace040773519532633ceb4374e1af9a36,2024-08-23 23:43:19,Tim van der Meij,"Merge pull request #18636 from Snuffleupagus/PDFDocumentProperties-#getL10nStr

Introduce a helper method for fetching l10n-data in `PDFDocumentProperties`",True
5f7637b9ea18782f85c05d8f94d6fd0a2c7f49af,2024-08-23 23:38:04,Tim van der Meij,"Merge pull request #18635 from calixteman/avoid_print_dialog

Don't show the print dialog when printing in some integration tests",True
6a1b1ae6a42fcc421d513852b9164be04097b96b,2024-08-23 22:09:28,Jonas Jenwald,Revoke the blob-URLs used during printing in `PDFPrintService`,False
502a429e3e87495dfd93da3cbeb19ca93614c536,2024-08-23 21:59:42,Jonas Jenwald,"Use `HTMLCanvasElement.toBlob()` unconditionally in `PDFPrintService`

The fallback is very old code, and according to the MDN compatibility data `HTMLCanvasElement.toBlob()` should be available in all browsers that we support now: https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob#browser_compatibility",False
584fef582312f6192ff128e35873a73fe75318ca,2024-08-23 21:54:19,Jonas Jenwald,"Merge pull request #18646 from Snuffleupagus/issue-18645

Support an odd number of digits in hexadecimal strings (issue 18645)",True
8728f7f1342a486e3a3267a7566965182e5fcbfd,2024-08-23 20:01:43,Jonas Jenwald,"Support an odd number of digits in hexadecimal strings (issue 18645)

See https://opensource.adobe.com/dc-acrobat-sdk-docs/pdfstandards/PDF32000_2008.pdf#G6.1840792",False
fabbe544abf90d30b76bfbcadb737fcfa84fbd64,2024-08-23 16:01:55,Jonas Jenwald,"Introduce a `L10n`-method to translate an element once, and use that in `PDFLayerViewer`

Currently we *manually* fetch the ""pdfjs-additional-layers"" string and update the DOM-element, which was needed since we want to avoid triggering a bunch of otherwise unnecessary translation when appending the entire layer-tree to the DOM.
By introducing a new helper method in the `L10n`-class we can avoid this, and instead use a ""data-l10n-id"" attribute on the element (as most other viewer code does nowadays).",False
2c34b644159e04316f9677e879956ef0b7cab05c,2024-08-21 18:37:46,Jonas Jenwald,"Introduce a helper method for fetching l10n-data in `PDFDocumentProperties`

Given the length of the l10n-strings we can slightly reduce verbosity, and thus overall code-size, by introducing a helper method for fetching l10n-data.

While testing this I stumbled upon an issue in the `L10n`-class, where an optional chaining operator was placed incorrectly since the underlying method always return an Array; see https://github.com/projectfluent/fluent.js/blob/48e2a62ed45ff2a62a231b2e83cfd8b332d27acb/fluent-dom/src/localization.js#L38-L77",False
908f4533849e863bafcba34ce0dce6d79d4518d5,2024-08-21 17:28:03,Jonas Jenwald,"Merge pull request #18627 from richard-smith-preservica/rcs/send-page-dict-requests-in-parallel

Send fetch requests for all page dict lookups in parallel",True
a67b9aec6c5f34d46e8a080f920c3b0e046464b6,2024-08-21 15:38:14,Richard Smith (smir),"Send fetch requests for all page dict lookups in parallel
- When adding page dict candidates to the lookup tree, also initiate fetching them from xref, so if they are not yet loaded at all, the XHR will be sent
 - Only at the top level - assume that if there is a /Pages tree, it is sensibly structured and the number of requests won't be too bad
- We can then await on the cached Promise without making the requests pipeline
- This has a significant performance improvement for load-on-demand (i.e. with auto-fetch turned off) when a PDF has a large number of pages in the top level /Pages collection, and those pages are spread through a file, so every candidate needs to be fetched separately
 - PDFs with many pages where each page is a big image and all the pages are at the top level are quite a common output for digitisation programmes
- I would have liked to do something like ""if it's the top level collection and page count = number of kids, then just fetch that page without traversing the tree"" but unfortunately I agree with comments on #8088 that there is no good general solution to allow for /Pages nodes with empty /Kids arrays",False
b0c239a20071a62725318c04eb5bfc9813c67c67,2024-08-21 02:54:08,Calixte Denizet,Don't show the print dialog when printing in some integration tests,False
e0fc1a341a9917e1cdd15f2d4b91cee3f448bea0,2024-08-19 23:56:56,Tim van der Meij,"Merge pull request #18628 from Snuffleupagus/issue-18208

Use standard glyph mapping for non-embedded and non-composite Calibri fonts (issue 18208)",True
6dd31183be43aae0009271d28f18075a31affff9,2024-08-19 22:40:35,Jonas Jenwald,"Use standard glyph mapping for non-embedded and non-composite Calibri fonts (issue 18208)

Given that we handle non-embedded Calibri fonts as ""mapped to standard font"", we really ought to be able to use the same glyph mapping as for an actual standard font.
Note that this actually improves consistency in the code, given how we already handle such fonts if they happen to be of the `CIDFontType2` type; see https://github.com/mozilla/pdf.js/blob/b47c7eca83c35b8f9ea170aa3742fc70359726c2/src/core/fonts.js#L1186-L1190",False
88ea60dcde9d645f9f7a40eef120e0a7d8a1b097,2024-08-19 22:34:34,Tim van der Meij,"Merge pull request #18624 from timvandermeij/intermittent-scripting-siblings

Fix the ""must check that a value is correctly updated on a field and its siblings"" scripting integration test",True
79dce534f5731abc2cfb5541f227f596db0205c5,2024-08-19 22:34:11,Tim van der Meij,"Merge pull request #18623 from timvandermeij/uimanager-test

[Editor] Move setting `window.uiManager` back to the test code",True
5cc77d3ebd6960aeb1717c5219661149693d1f6f,2024-08-18 22:54:51,Tim van der Meij,"Fix the ""must check that a value is correctly updated on a field and its siblings"" scripting integration test

This integration test fails intermittently because we cache the initial
total value to be able to compare it to the new total value at the end
of the test to check that it's different before doing the assertions.
However, this doesn't work as expected because the second `clearInput`
call triggers an intermediate total value calculation because it clicks
on another input field and that triggers a sandbox event.

This results in the `waitForFunction` calls always resolving immediately
and since we don't use other means of waiting until the calculation is
done (using e.g. `waitForSandboxTrip`) we basically rely on the time
between the final click and the assertions to be enough for the sandbox
to do its work. If it's is not done in that time, we do the assertions
with older values and that makes the test fail.

This commit fixes the issue by simply waiting for the total value to be
what we expect it to be. This requires less code, is more consistent
with the other integration tests and removes the possibility of doing
assertions against older values.",False
db060110327e3185fc37cc19b70513f86dc114cc,2024-08-18 19:15:42,Tim van der Meij,"[Editor] Move setting `window.uiManager` back to the test code

In PR #18574 setting `window.uiManager` was moved into the `src` folder
to avoid intermittent integration test failures because at the time we
lacked a way to register event listeners early (before PDF.js loads).
However, in PR #18617 this functionality got introduced, so we can now
use the new way of setting up the event bus in the tests to move this
back to the `test` folder again and to reduce the amount of test-only
code in the main codebase as discussed in PR #18574.

Partially reverts e037c5711d3d2413669e9b6c275986adf24a295b.",False
b47c7eca83c35b8f9ea170aa3742fc70359726c2,2024-08-18 18:40:23,Tim van der Meij,"Merge pull request #18617 from calixteman/early_event_handler

Set the event handlers in the integration tests before any event is triggered",True
5e4948062c39c56fc4752c690aebcd4fc9d7b841,2024-08-18 14:27:43,Calixte Denizet,"Set the event handlers in the integration tests before any event is triggered

The function evaluateOnNewDocument in Puppeteer allow us to execute some js before the pdf.js one
is loaded.
It allows us to stub some setters before there are used and then set some event handlers very soon.",False
f7d3add99465a24f2f4a9e339b6a01c5295473cc,2024-08-16 22:32:39,Tim van der Meij,"Merge pull request #18615 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
0aada51568a50c0d1c34cf54cfc2c8f6d32bd7f1,2024-08-15 23:22:03,Tim van der Meij,Update translations to the most recent versions,False
f6c2860195d60012642d29fbd0fc181d5771d7e9,2024-08-15 23:21:48,Tim van der Meij,"Fix the repository URLs in the `importl10n` script

We introduced quite a few new strings recently, but during the last few
rounds of updates we didn't see new translations updates becoming
available. I only just now recalled the announcement that Mozilla is
moving from Mercurial to Git, and indeed the Mercurial page at
https://hg.mozilla.org/l10n-central hasn't been updated since July
anymore and that's were we used to pull our translations from.

This commit fixes the issue by changing the URLs to the Mozilla Git
repositories hosted on GitHub instead.",False
44f7e3c00272b5b77ad0f352a1a9321759876988,2024-08-15 23:07:05,Tim van der Meij,"Fix vulnerability in the `axios` dependency

This patch is generated automatically using `npm audit fix` and fixes
CVE-2024-39338 (see https://github.com/advisories/GHSA-8hc4-vh64-cxmj),
bringing the vulnerability count back to zero.",False
140dd3c99f3bb19cef151e9e352f6355db3f80d5,2024-08-15 23:04:02,Tim van der Meij,Update dependencies to the most recent versions,False
d8d9cff715efd32f037cc1c04c25bdafa54d34e9,2024-08-15 22:09:35,Tim van der Meij,"Merge pull request #18612 from Snuffleupagus/_parseHashParams-shorten

Shorten the `PDFViewerApplication._parseHashParams` method",True
73bae55c5dacc6ce49308106bf3339d4d3f19960,2024-08-15 22:05:10,Tim van der Meij,"Merge pull request #18613 from calixteman/enable_tests

Enable disabled integration tests for Firefox",True
75e52360ad1e36935a39b6c8ccf62ec28bd9218d,2024-08-15 17:41:31,Calixte Denizet,Enable disabled integration tests for Firefox,False
ee7441d5bc0baf8ca34b95128811785446a2c3c8,2024-08-15 17:20:35,Jonas Jenwald,"Shorten the `PDFViewerApplication._parseHashParams` method

The way that the debugging hash-parameter parsing is implemented leads to a lot of boilerplate code in this method, since *most* of the cases are very similar.[1]
With just a few exceptions most of the options can be handled automatically, by defining an appropriate checker for each option.

---

[1] With the recent introduction of TESTING-only options the size of this method increased a fair bit.",False
b60261e39a9b9245f15bcafdb517ef34397041e0,2024-08-15 17:16:55,calixteman,"Merge pull request #18611 from calixteman/fix_telemetry

Fix the telemetry for the new alt-text flow",True
17f387b4609a06005b428aa1693a58e4b06a85e5,2024-08-15 17:01:05,Jonas Jenwald,"Merge pull request #18610 from Snuffleupagus/bug-report-version-description

Link to official releases and the demo viewer in the bug report template",True
9bd00859d31da0d43cd9dcbb3c27b72de2ca097a,2024-08-15 15:59:00,Calixte Denizet,Fix the telemetry for the new alt-text flow,False
4caa309fda69c3e303c69a4e6406dd7aadb63767,2024-08-15 12:55:21,Jonas Jenwald,"Link to official releases and the demo viewer in the bug report template

Hopefully this might lead to *more* users actually testing the latest version before reporting a bug.",False
8446d3ac0350162a5b39e35a0769279922c700c2,2024-08-13 23:12:20,Tim van der Meij,"Merge pull request #18605 from Snuffleupagus/issue-18196

Handle the ""switchannotationeditorparams"" event in the editor-code (issue 18196)",True
9e0c6ef4763729f3509ecc1d9ddea28ca7965db8,2024-08-13 18:59:55,Jonas Jenwald,"Handle the ""switchannotationeditorparams"" event in the editor-code (issue 18196)

The problem seems to be caused by the browser trying to ""restore"" editing input-elements, in the various toolbars, to their previous values when the tab is re-opened.

Hence the simplest solution appears to be to move the event handling into the editor-code, which is also less code overall, since the listener thus won't be registered early enough for the problem to appear.",False
82735537bf62cbbf70815e5e9433f2cb1a93994e,2024-08-13 18:21:16,Jonas Jenwald,"Use the local `eventBus` in the `AnnotationEditorUIManager` constructor

This shortens the code ever so slightly, which cannot hurt.",False
038e4827600fef6333d53e2f3cc830269eea8f74,2024-08-13 16:07:17,Jonas Jenwald,"Merge pull request #18601 from timvandermeij/css-cleanup

Improve the viewer CSS after nesting the findbar and secondary toolbar rules",True
14f6cbe2b274a2558dfa0237844bc599bc84f2d1,2024-08-13 16:00:27,Jonas Jenwald,"Merge pull request #18604 from Snuffleupagus/version-4.6

Bump library version to `4.6`",True
af038947641c2e2589215bd4fdb1a112effbf9af,2024-08-13 15:50:52,Jonas Jenwald,Bump library version to `4.6`,False
a999b346d06401967bab085cbe098717c5203e1f,2024-08-13 15:47:27,Jonas Jenwald,"Merge pull request #18549 from nicolo-ribaudo/custom-find-matcher-subclass

[api-minor] Allow specifying custom match logic in PDFFindController",True
f051597e234d39c363f16aaad323b690578041d8,2024-08-13 14:15:57,Nicolò Ribaudo,"Allow specifying custom match logic in PDFFindController

This patch allows embedders of PDF.js to provide custom match
logic for seaching in PDFs. This is done by subclassing the
PDFFindController class and overriding the `match` method.

`match` is called once per PDF page, receives as parameters the
search query, the page contents, and the page index, and returns
an array of { index, length } objects representing the search
results.",False
17b24639b949eb540928a7c547cb192d74a10f82,2024-08-13 11:44:09,Jonas Jenwald,"Merge pull request #18594 from Snuffleupagus/rm-enableHighlightEditor-pref

Remove the `enableHighlightEditor` preference",True
9fd23d808270639695e91131be71f7ab7bcdfdee,2024-08-12 23:57:33,Tim van der Meij,"Generalize the CSS rules for labeled toolbar buttons

This commit fixes a regression from #18596 where the ""Add image"" button
styles broke because it's a labeled toolbar button but the labeled
toolbar button CSS rules were only scoped to the secondary toolbar.
However, nowadays labeled toolbar buttons are also used in e.g. the
editor parameters toolbar, and this highlighted that we didn't clearly
encode the concept of labeled toolbar buttons in the CSS so far.

This patch extracts the CSS rules for labeled toolbar buttons that were
previously limited to the secondary toolbar into a dedicated generic
class that can be applied on top of any unlabeled toolbar button to
convert it to a labeled toolbar button, regardless of its position in
the DOM. This also makes the distinction clearer in the HTML, and the
new CSS scope for the toolbar buttons lays the foundation for combining
the other toolbar buttons rules in there later on.

Co-authored-by: Calixte Denizet <calixte.denizet@gmail.com>",False
68bda90777418a938adbb6996765a762abffac72,2024-08-12 23:38:29,Tim van der Meij,"Improve grouping of the secondary toolbar button CSS rules

Using the `:is(a)` selector we can move the previously separate rules
into the main `.toolbarButton` override rules.

Co-authored-by: Calixte Denizet <calixte.denizet@gmail.com>",False
2a982e71edf0108d32b1729ec1998b84986a2ea2,2024-08-12 23:34:36,Tim van der Meij,"Merge the duplicate `.editorParamsToolbar` CSS blocks

Now that we have dedicated CSS scopes for the findbar and the secondary
toolbar we have ended up with two CSS blocks with identical selectors,
so now we can combine them for simplicity and to remove some rules in
the first block that were always overridden by the second block.

Co-authored-by: Calixte Denizet <calixte.denizet@gmail.com>",False
d0fbfe10c5b43a8011e669bd6aa6bd6fc4b8ce9b,2024-08-12 22:36:21,Tim van der Meij,"Merge pull request #18598 from Snuffleupagus/base-class-init-TESTING-check

Limit base-class initialization checks to development and TESTING modes",True
9103cf00c023b01b2868c5d568fbab7e64843c47,2024-08-12 22:33:04,Tim van der Meij,"Merge pull request #18597 from timvandermeij/css-secondary-toolbar-part-3

Group and scope the secondary toolbar rules using CSS nesting",True
aebb8534f376930b6fc9552724527065e3492854,2024-08-12 15:56:35,Jonas Jenwald,"Limit base-class initialization checks to development and TESTING modes

We have a number of base-classes that are only intended to be extended, but never to be used directly. To help enforce this during development these base-class constructors will check for direct usage, however that code is obviously not needed in the actual builds.

*Note:* This patch reduces the size of the `gulp mozcentral` output by `~2.7` kilo-bytes, which isn't a lot but still cannot hurt.",False
5193adf1fd9d9e8281a8c9aecc9f743562982ef9,2024-08-11 21:57:04,Tim van der Meij,"Group and scope the secondary toolbar rules using CSS nesting

The secondary toolbar CSS rules predate the general availability of CSS
nesting, which makes them more difficult to understand and change
safely. The primary issues are that the rules are spread over the
`viewer.css` file, they share blocks with other elements and the scope
of the rules is sometimes bigger than necessary.

This refactoring groups all remaining secondary toolbar rules together,
scoped to the top-level `#secondaryToolbar` element, for improved
overview and isolation. Note that this patch only intends to move the
existing rules around and not change any behavior.

Co-authored-by: Calixte Denizet <calixte.denizet@gmail.com>",False
aa2337f934d6e0b4ce9b8bfb45030fedbe3f01f4,2024-08-11 21:55:29,Tim van der Meij,"Merge pull request #18596 from timvandermeij/css-secondary-toolbar-part-2

Remove the `secondaryToolbarButton` CSS class",True
2a22424c954866da395bc2807d65da9c483ef003,2024-08-11 21:18:25,Tim van der Meij,"Remove the `secondaryToolbarButton` CSS class

Secondary toolbar buttons are toolbar buttons with some extra rules,
mainly to make them wider and have visible labels. However, this
similarity is currently not clearly reflected in the implementation
because the secondary toolbar buttons use a different CSS class,
`secondaryToolbarButton`, compared to the other toolbar buttons that
use the `toolbarButton` CSS class. This also causes some duplication
in the rules and requires extra care to keep the common bits for the
`secondaryToolbarButton` class in sync with the `toolbarButton` class.

Fortunately, now that we have a dedicated CSS scope for the secondary
toolbar, we can simplify this by giving all secondary toolbar buttons
the `toolbarButton` class and explicitly listing the required overrides
in the `#secondaryToolbar` scope instead. Doing so removes most of the
special-casing for secondary toolbar buttons while explicitly listing
the differences in a single place for a better overview. It also lays
the foundation for making all toolbar buttons respect the
`browser.uidensity` Firefox preference later by reducing differences.

Co-authored-by: Calixte Denizet <calixte.denizet@gmail.com>",False
efe00cf68ca70a2d1c6b56aa659fe95d0eb62650,2024-08-11 19:44:59,Tim van der Meij,"Merge pull request #18595 from timvandermeij/css-secondary-toolbar-part-1

Group and scope the secondary toolbar button container/icon rules using CSS nesting",True
97b761dfbf1309693fab722262196514f09923ed,2024-08-11 17:22:23,Tim van der Meij,"Group and scope the secondary toolbar button container/icon rules using CSS nesting

The secondary toolbar CSS rules predate the general availability of CSS
nesting, which makes them more difficult to understand and change
safely. The primary issues are that the rules are spread over the
`viewer.css` file, they share blocks with other elements and the scope
of the rules is sometimes bigger than necessary.

This refactoring groups all CSS rules for the secondary toolbar button
container/icons together, scoped to the top-level `#secondaryToolbar`
element, for improved overview and isolation. Note that this patch only
intends to move the existing rules around and not change any behavior.
Moreover, this patch does not move the rules for the secondary toolbar
itself and the secondary toolbar buttons; those will be part of a
follow-up patch and will be easier once this is in place first.

Co-authored-by: Calixte Denizet <calixte.denizet@gmail.com>",False
e44e4db5294c8eba2d56e8733c82416beb62f46c,2024-08-10 22:19:41,calixteman,"Merge pull request #18589 from calixteman/new_alt_text_telemetry

[Editor] Add the telemetry for the new alt text (bug 1912500)",True
00305184b5d42e8f7d66e61c80b48b166a8459fe,2024-08-10 21:59:03,Calixte Denizet,[Editor] Add the telemetry for the new alt text (bug 1912500),False
6e4b347e1b54c1b99075eb1c410a6fb5af889552,2024-08-10 21:58:38,Tim van der Meij,"Merge pull request #18593 from Snuffleupagus/PDFSidebar-AbortController

Remove the sidebar resizing event listeners with an `AbortController`",True
ec48602379bd9380bcde7da79cc06dcbbeb18905,2024-08-10 21:51:18,Tim van der Meij,"Merge pull request #18592 from Snuffleupagus/firefoxcom-AbortSignal-any

[Firefox] Remove the ""loadaiengineprogress"" listener with `AbortSignal.any()`",True
4367fc1bc0453cd41f887fdca0ffaea5947445a5,2024-08-10 21:44:12,Tim van der Meij,"Merge pull request #18581 from calixteman/new_alt_text_test_1

[Editor] Add a first test to test the new alt text flow",True
b9f5e78e15c4b2ffbd40dbec425c6f0742bf8b4e,2024-08-10 19:30:31,Jonas Jenwald,"Remove the `enableHighlightEditor` preference

This was enabled by default in Firefox 126, see [bug 1867513](https://bugzilla.mozilla.org/show_bug.cgi?id=1867513), so hopefully we should be able to remove the option/preference now.",False
debcb2267e3b5de8b29e1089328fa45e5624967d,2024-08-10 18:29:35,Calixte Denizet,[Editor] Add a first test to test the new alt text flow,False
be685a293c148d8181e89fb433f5ee917ab8bad2,2024-08-10 15:54:59,Jonas Jenwald,Remove the sidebar resizing event listeners with an `AbortController`,False
7619171265f0639b3a09b3b5b5902da009a40dc6,2024-08-10 15:54:54,Jonas Jenwald,"Stop sidebar resizing on ""blur"" events

Because of an old oversight (by me) we don't stop sidebar resizing when the browser window loses focus, which seems generally wrong and can also lead to duplicate mouse-related event listeners being registered.",False
984debaa9f2cb5462967c8c85f435dc5ec0ae9f7,2024-08-10 15:36:45,Jonas Jenwald,"Use a few local variables in `PDFSidebar.#addEventListeners`

This, ever so slightly, shortens the code for a couple of repeatedly accessed class fields.",False
723c76929ce9ef18ee264ed28d28d79f5cda51d8,2024-08-10 14:46:42,Jonas Jenwald,"[Firefox] Remove the ""loadaiengineprogress"" listener with `AbortSignal.any()`",False
b6b99a7b75e9aeab0fd47bfb9a3d4e37f994f970,2024-08-09 21:23:16,calixteman,"Merge pull request #18588 from mozilla/revert-18580-alt_text_pass_buffer

Revert ""[Editor] Pass a buffer instead of a typed array when passing image data to the model""",True
31727ccb4de0d02e17f595da926a73479a5c3963,2024-08-09 21:19:47,calixteman,"Revert ""[Editor] Pass a buffer instead of a typed array when passing image data to the model""",False
daabc7abeab0273b883834516c778e4deb054201,2024-08-09 21:05:25,Tim van der Meij,"Merge pull request #18587 from Snuffleupagus/PDFViewer-check-AbortSignal-any

Check that `AbortSignal.any()` is supported in `PDFViewer` too (PR 18586 follow-up)",True
da9cfe778132c2382e82cc98c592c618ef709307,2024-08-09 20:18:44,Jonas Jenwald,"Check that `AbortSignal.any()` is supported in `PDFViewer` too (PR 18586 follow-up)

Without this patch the viewer may break on load, since the check added in PR 18586 only applies to the toolbar.",False
b7198d316ffeb27cd048d6bbeea7358d22d20730,2024-08-09 19:50:49,Jonas Jenwald,"Merge pull request #18586 from Snuffleupagus/editor-AbortSignal-any

[Editor] Remove event listeners with `AbortSignal.any()`",True
36dc666d0403aa6db303b1891f6f0d07171d0564,2024-08-09 16:06:15,calixteman,"Merge pull request #18584 from calixteman/preview_background

[Editor] Change the background color of the image preview in the new alt text dialog",True
c0bf3d3c9454e4e3dcbae4080ab0a763b76d71b2,2024-08-09 14:54:34,Jonas Jenwald,"[Editor] Remove event listeners with `AbortSignal.any()`

There's a fair number of event listeners in the editor-code that we're currently removing ""manually"", by keeping references to their event handler functions.
This was necessary since we have a ""global"" `AbortController` that applies to all event listeners used in the editor-code, however it's now possible to combine multiple `AbortSignal`s; please see https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/any_static

Since this functionality is [fairly new](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/any_static#browser_compatibility) the viewer will check that `AbortSignal.any()` is available before enabling the editing-functionality.
(It should hopefully be fairly straightforward, famous last words, for users to implement a polyfill to allow editing in older browsers.)

Finally, this patch also adds checks and test-only asserts to ensure that we don't add duplicate event listeners in various editor-code.",False
bad214fc7171e670c51e16036bfa7309090a3cc2,2024-08-09 00:43:58,Calixte Denizet,[Editor] Change the background color of the image preview in the new alt text dialog,False
4569e88778c5c05fb912099d888a93308a52ef6a,2024-08-08 23:57:14,Tim van der Meij,"Merge pull request #18568 from timvandermeij/css-findbar

Group and scope the findbar rules using CSS nesting",True
fb049b0a0580fd1043700769c2b72532b87f0ae6,2024-08-08 23:56:52,Tim van der Meij,"Merge pull request #18583 from timvandermeij/eslint-plugin-mozilla

Remove the `eslint-plugin-mozilla` dependency",True
be93d530deab4a1d9a4ad795ee0c80b7fa9ae119,2024-08-08 23:21:20,Tim van der Meij,"Remove the `eslint-plugin-mozilla` dependency

We only used two rules from the plugin which can both easily be replaced
nowadays:

- `mozilla/avoid-removeChild` is equal to the already active
  `unicorn/prefer-dom-node-remove` rule; please see [1] and [2].
- `mozilla/import-globals` is mostly obsolete nowadays ever since we
  removed the Firefox extension code from this repository and we
  eliminated most globals usage. The three remaining occurrences can be
  replaced with explicit `/* globals */` comments that we already use
  elsewhere, which overall is also more consistent.

[1] https://firefox-source-docs.mozilla.org/code-quality/lint/linters/eslint-plugin-mozilla/rules/avoid-removeChild.html
[2] https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-dom-node-remove.md",False
1fcdcedee18aff8f79292537c09d8cb7f75f4fd6,2024-08-08 22:49:32,Tim van der Meij,"Group and scope the findbar rules using CSS nesting

The findbar CSS rules predate the general availability of CSS nesting,
which makes them more difficult to understand and change safely. The
primary issues are that the findbar rules are spread all over the
`viewer.css` file, they share blocks with non-findbar elements and the
scope of the rules is sometimes bigger than necessary.

This refactoring groups all findbar-related CSS rules together, scoped
to the top-level `#findbar` element, for improved overview and
isolation. Note that this patch only intends to move the existing rules
around and not change any behavior yet, but it does lay the foundation
for e.g. making the findbar respect the `browser.uidensity` preference
in Firefox in follow-up work.

Co-authored-by: Calixte Denizet <calixte.denizet@gmail.com>",False
cd3d188f99e97c178a340589ba08d80a002af99a,2024-08-08 22:48:26,Tim van der Meij,"Merge pull request #18571 from timvandermeij/linting

Enable the `unicorn/{prefer-includes,throw-new-error}` linting rules",True
318433b2d8916b2971e2c7333ded1cc89f21abfd,2024-08-08 22:33:07,Tim van der Meij,"Enable the `unicorn/throw-new-error` linting rule

For more information refer to
https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/throw-new-error.md.

This didn't require any changes because we already do this correctly,
but it ensures that new code remains consistent and explicit.",False
ad95df2214342f98602e33153c9271c5569f7011,2024-08-08 22:31:35,Tim van der Meij,"Enable the `unicorn/prefer-includes` linting rule

For more information refer to
https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-includes.md.

Fortunately this only required one change because we already use
`.includes()` everywhere else. Note that that is mostly due to the
`mozilla/use-includes-instead-of-indexOf` rule which we replace with
this new rule now because it's more complete.",False
40aa593b1f025a2092f9bb11b0e21eab46e7aca2,2024-08-08 18:18:27,calixteman,"Merge pull request #18580 from calixteman/alt_text_pass_buffer

[Editor] Pass a buffer instead of a typed array when passing image data to the model",True
d2e8e742eb0030f10c180fdca37db202d9fbbbf5,2024-08-08 18:13:36,Calixte Denizet,[Editor] Pass a buffer instead of a typed array when passing image data to the model,False
999403f5ef27832cb7397ad836a3f09dd19c4fd0,2024-08-08 02:56:37,calixteman,"Merge pull request #18579 from calixteman/cancel_ai_requests_2

Dispatch changes in prefs enableAltTextModelDownload and enableGuessAltText to the viewer (bug 1912024)",True
1d51c3e711bd15176f2ba39e2a5eb9c9c93c012a,2024-08-08 02:51:38,Calixte Denizet,"Dispatch changes in prefs enableAltTextModelDownload and enableGuessAltText to the viewer (bug 1912024)

The user can change a setting in a tab and it must have an effect in the current viewer.",False
e099840100c974c8d063d456a7b4285dacc30cf1,2024-08-08 02:44:11,calixteman,"Merge pull request #18578 from mozilla/revert-18573-cancel_ai_requests

Revert ""[Editor] Dispatch changes in prefs enableAltTextModelDownload and enableGuessAltText to the viewer (bug 1912024)""",True
6c005eabb3fbf9e7b4539bb5dcb61a0b3377d084,2024-08-08 02:41:31,calixteman,"Revert ""[Editor] Dispatch changes in prefs enableAltTextModelDownload and enableGuessAltText to the viewer (bug 1912024)""",False
fef2853263bed2c4a5be9d8e146a546b37fe89a8,2024-08-08 02:41:04,calixteman,"Merge pull request #18573 from calixteman/cancel_ai_requests

[Editor] Dispatch changes in prefs enableAltTextModelDownload and enableGuessAltText to the viewer (bug 1912024)",True
92ade5495b8dd900afa5751e8993d0efe5c35da2,2024-08-08 02:15:08,Calixte Denizet,"[Editor] Dispatch changes in prefs enableAltTextModelDownload and enableGuessAltText to the viewer (bug 1912024)

The user can change a setting in a tab and it must have an effect in the current viewer.",False
5709b1300d95231242cb810d0399fe530d820604,2024-08-07 22:52:29,calixteman,"Merge pull request #18575 from calixteman/ai_disclaimer_icon_position

[Editor] Move the AI icon on the top of its parent div",True
3cad8d1c27e907d7f4858dcb5f1bb271306d486a,2024-08-07 22:47:24,calixteman,"Merge pull request #18574 from calixteman/add_window_uimanager_test

[Editor] Add the uiManager to the window object when testing",True
f487ed300475b2854bebacd8128539804c33c9f4,2024-08-07 22:20:59,Calixte Denizet,"[Editor] Move the AI icon on the top of its parent div

And fix the line-height for all the dialog (which is ""normal"" in the specs).
Because of the wrong line-height, the icon was slightly misplaced.",False
e037c5711d3d2413669e9b6c275986adf24a295b,2024-08-07 21:36:14,Calixte Denizet,[Editor] Add the uiManager to the window object when testing,False
341a0b6d477d2909fcb14bcbfdf0d2fd37406cb0,2024-08-06 21:29:15,Tim van der Meij,"Merge pull request #18566 from calixteman/issue18561

Don't stop calculating field values when a Calculate callback throws",True
af012c7872e4d1f7e21e54b3c81a8a33af724a89,2024-08-06 20:53:36,Tim van der Meij,"Merge pull request #18567 from timvandermeij/integration-test-otherpages

Remove obsolete `otherPages` variable from the scripting integration tests",True
18284815e792592af5d8c0d1cffe0046e9ed0369,2024-08-06 17:39:11,calixteman,"Merge pull request #18570 from calixteman/new_alt_text_string_change

[Editor] Update the disclaimer string in the new alt-text dialog (bug 1911738)",True
fc602c65c092d80839a50dc40742eb2ee5b2cef9,2024-08-06 13:47:18,Calixte Denizet,"[Editor] Update the disclaimer string in the new alt-text dialog (bug 1911738)

And tweak the css in order to take into account that disclaimer can be on two (or more lines).",False
ad12f3399934aa8f72fea19d88ffb7bddf900007,2024-08-06 00:06:04,Calixte Denizet,"Don't stop calculating field values when a Calculate callback throws

It fixes #18561.",False
b7b073519279928f1fabfe5320fef15fec351fe9,2024-08-05 22:53:39,Tim van der Meij,"Remove obsolete `otherPages` variable from the scripting integration tests

It looks like this has accidentally been copy/pasted from the
`Textfields and focus` block, which is the only one in which a test
actually uses it. We can therefore safely remove it from all other
blocks where no test uses it.",False
9ac05e797c9677ce28028b026c69722e8f16961d,2024-08-05 22:04:36,Tim van der Meij,"Merge pull request #18560 from Snuffleupagus/editor-bind-event-handlers

Define a few editor event handler functions inline",True
7c896578c27862a4a843a6232896001256f57e59,2024-08-05 21:53:56,Tim van der Meij,"Merge pull request #18555 from timvandermeij/waitforevent

Use the `waitForEvent` helper function in the text layer integration tests",True
9844ce01b36a8fb02c46262dbf7593b7e8b20655,2024-08-05 21:49:11,Tim van der Meij,"Merge pull request #18554 from timvandermeij/updates

Update dependencies to the most recent versions",True
d32b294a604b929d8b78472d1071a989429042f7,2024-08-05 19:49:25,Jonas Jenwald,"Merge pull request #18562 from nicolo-ribaudo/babel-static-block

Update the Babel plugin to remove empty static blocks",True
995f5a29aa9c147d129ea3b55d4ab1b4be38ae51,2024-08-05 18:44:05,Nicolò Ribaudo,"Update the Babel plugin to remove empty static blocks

This commit updates the Babel plugin to:
- apply the same flattening logic that we already
  have for blocks, to flatten blocks nested inside
  class static blocks
- remove class static blocks when, after flattening
  all the blocks they contain, they are empty.

Before this commit, the transform output was the
same as the input.",False
0eac5e9d6f6e0def7e96c76c18b02f4e85328fc7,2024-08-05 15:57:53,Jonas Jenwald,"Define a few editor event handler functions inline

Given that we're removing event listeners with `AbortSignal` it's no longer necessary to keep a reference to a few of the event handler functions in order to remove them.
Hence we can simply inline the relevant `bind`-calls instead, which reduces the code-size a tiny bit.",False
356d54175bf0150b48e3b14810915024033a213c,2024-08-04 23:44:43,Tim van der Meij,"Use the `waitForEvent` helper function in the text layer integration tests

The `waitForClick` helper function is functionality-wise mostly a
reduced copy of the more generic `waitForEvent` helper function that
we use for other integration tests, so we can safely replace it to
reduce the amount of code.

Moreover, the `waitForClick` code is prone to intermittent failures
given recent assertion failures we have seen on the bots (one of them
is linked in #18396) while `waitForEvent` has recently been fixed to
avoid intermittent failures, so usiong it should also get rid of the
flakiness for these integration tests.",False
f7d2145782ad9e81a176381b4d289368e10c422f,2024-08-04 22:54:43,Tim van der Meij,"Upgrade `postcss-nesting` to version 13.0.0

This is a major version bump, but the changelog at
https://github.com/csstools/postcss-plugins/blob/main/plugins/postcss-nesting/CHANGELOG.md
doesn't indicate any breaking changes that should impact us.",False
1dfdb59f0be9bfcfff6a2a253e8bee31d3355d6c,2024-08-04 22:53:10,Tim van der Meij,"Upgrade `postcss-dir-pseudo-class` to version 9.0.0

This is a major version bump, but the changelog at
https://github.com/csstools/postcss-plugins/blob/main/plugins/postcss-dir-pseudo-class/CHANGELOG.md
doesn't indicate any breaking changes that should impact us.",False
762b16c08aa1f5933b3ef246bede5383cffbff89,2024-08-04 22:50:36,Tim van der Meij,Update dependencies to the most recent versions,False
c60c0d1c6df3a4e93da9d9ad4186eb07e837e024,2024-08-03 18:40:22,calixteman,"Merge pull request #18552 from calixteman/issue18536

Empty fields are 0 when using AFSimple_Calculate",True
4b7f9a8d87ae26f190bcffd308db07c9512c5383,2024-08-03 01:21:27,Calixte Denizet,"Empty fields are 0 when using AFSimple_Calculate

It fixes #18536 and #18532.",False
829c9f553dd285d8a941d0f89d0113574511dd72,2024-08-03 00:40:10,Jonas Jenwald,"Merge pull request #18551 from Snuffleupagus/rm-viewer-download-options

Stop sending the unused `options` parameter to various download-methods in the viewer",True
ecbd660609ff3b50c55e2e30b6d7be6a959ff843,2024-08-03 00:16:13,Jonas Jenwald,"Stop sending the unused `options` parameter to various download-methods in the viewer

The `options` handling, for the download-methods, was originally added in PR 16391 and became obsolete in PR 17771.

This fixes failures, in mozilla-central tests, which appeared after landing PR 18527.",False
a372bf8f4daf4d19e4914866bb3486076a31dbfb,2024-08-02 21:32:53,calixteman,"Merge pull request #18541 from calixteman/use_ml_but_no_dialog

[Editor] Guess alt text even when showing the dialog is disabled",True
7ac87dd6f85bf8f991f810370e171bc82b598060,2024-08-02 21:26:19,Tim van der Meij,"Merge pull request #18544 from Snuffleupagus/app-bind-listeners

Improve the larger event listeners in the `web/app.js` file",True
d2c519e57a00779020cbc5a68490a088507eb564,2024-08-02 21:10:10,Calixte Denizet,Guess alt text even when showing the dialog is disabled,False
c8ba7b02b013da1b9ab7bcac42bed192e4d42e43,2024-08-02 20:51:26,calixteman,"Merge pull request #18546 from calixteman/load_model_switch_stamp

[Editor] Load the model when the user switch to the stamp editing mode",True
a81b071d2df551b00487bc45390b55c063803d3f,2024-08-02 20:44:09,Calixte Denizet,[Editor] Load the model when the user switch to the stamp editing mode,False
aae223f79b315486d9fea5d4dc156aabdec76e21,2024-08-02 19:46:25,Jonas Jenwald,"Replace `onScrollModeChanged` and `onSpreadModeChanged` with one function

Given that these event handlers are virtually identical, obviously with the exception of the name-parameter, let's reduce a little bit of code duplication.",False
22ec2521939dbf777c069e89044e292556b82470,2024-08-02 19:46:25,Jonas Jenwald,"Improve the larger event listeners in the `web/app.js` file

 - Shorten the names of the event listeners.

 - Use `bind` to pass in the `PDFViewerApplication`-scope to the event handlers.
   This makes the event handler code (a lot) less verbose, and this change is possible now that we're removing event listeners with `AbortSignal`.

 - Move the GENERIC-only event listeners into the same pre-processor block.

*Note:* This patch reduces the size of the `gulp mozcentral` output by `~4.3` kilo-bytes, which isn't a lot but still cannot hurt.",False
b80e552760d8c0de385756c28fb89d4a6bee0898,2024-08-02 19:38:45,Tim van der Meij,"Merge pull request #18527 from Snuffleupagus/app-inline-short-listeners

Inline single-line event handlers in the `web/app.js` file",True
5e052af3f6389a0e7014f81a7cb75ed339577647,2024-08-02 19:25:26,Tim van der Meij,"Merge pull request #18542 from Snuffleupagus/bug-report-browser-description

Link to the list of supported browsers in the bug report template",True
0d44e71b957a9d96ca6b8b10413e0ad4595287b3,2024-08-02 19:23:58,Tim van der Meij,"Merge pull request #18547 from calixteman/fix_hcm_button_colors

Fix the color of the buttons in a dialog in HCM",True
f32d19de187de794594d60e7c06b11588afc3f89,2024-08-02 19:08:55,Calixte Denizet,Fix the color of the buttons in a dialog in HCM,False
08821a3e5de64221b69f6391e555bb25c1edae01,2024-08-02 18:36:05,calixteman,"Merge pull request #18543 from calixteman/disable_create_alttext_button

[Editor] Avoid to have the create alt-text button without a click listener",True
464d53496142cfee4b203d0724553c55f5f73d21,2024-08-02 15:44:12,Jonas Jenwald,"Merge pull request #18540 from calixteman/no_ml_settings

[Editor] Don't create the image settings dialog if new alt-text is disabled",True
271bd4d079aac13050f0e59fb344f1eccd049b6a,2024-08-02 14:35:58,Calixte Denizet,"[Editor] Avoid to have the create alt-text button without a click listener

The toggle button hasn't a click listener after we deleted and downloaded the model.",False
974911f24f99c90e2929376b21c46e9ad1c77973,2024-08-02 14:11:34,Calixte Denizet,[Editor] Don't create the image settings dialog if new alt-text is disabled,False
adb6548d386338b441732ed1f8652e5dcb70dfaa,2024-08-02 14:10:50,Jonas Jenwald,"Link to the list of supported browsers in the bug report template

Given that users fairly often report issues with unsupported browsers/environments it cannot hurt to provide a link to the relevant section in the FAQ.",False
4422e6fb3b035e47c10b53614568e6abb06c95a0,2024-08-02 14:09:08,calixteman,"Merge pull request #18538 from calixteman/fix_new_alt_text_l10n

[Editor] Fix l10n issues",True
63d0fa5733d44dbe404ca839dd429fdb04bf1a5f,2024-08-02 14:06:18,Calixte Denizet,"[Editor] Fix l10n issues

Remove the strings containing only a variable.",False
a7768a30b814654c29267011326ec708f521436e,2024-08-02 14:02:54,calixteman,"Merge pull request #18539 from calixteman/use_css_var

[Editor] Use the color defined for the message bar foreground",True
1a8bcdb2babbc9d50bcfd76096f6324e93146dff,2024-08-02 13:05:21,Calixte Denizet,[Editor] Use the color defined for the message bar foreground,False
89f3a26c2fe0324fbd54b91662dd0124d8c88135,2024-08-02 01:32:55,Jonas Jenwald,"Inline single-line event handlers in the `web/app.js` file

We have a fair number of (effectively) single-line event handlers in the  `web/app.js` file, which leads to unnecessarily verbose code. These can, without affecting readability too much, be replaced either by:
 - Using `bind` for the simplest cases.
 - Using arrow-functions for the remaining ones.

Note that this is possible since we started removing event listeners with `AbortSignal`, which means that we no longer need to keep a reference to the event handler functions to be able to remove them.

Given that the old event handler functions use fairly long function names, and the way that they access `PDFViewerApplication` (given their scope), they impact the overall code-size unnecessarily.
*Note:* This patch reduces the size of the `gulp mozcentral` output by `~3.7` kilo-bytes, which isn't a lot but still cannot hurt.",False
501da852226e9662eeb9d4f7b9dcf647acfcab93,2024-08-02 01:25:41,calixteman,"Merge pull request #18537 from calixteman/image_settings

[Editor] Add a new dialog for alt-text settings (bug 1909604)",True
32d09276f02d31d4ffbba1ca54e5d8e9674f4188,2024-08-02 01:04:50,Calixte Denizet,"[Editor] Add a new dialog for alt-text settings (bug 1909604)

This patch adds a new entry in the secondary menu in order to open a dialog to let the user:
 - disables the alt-text generation thanks to a ML model;
 - deletes the alt-text model downloaded in Firefox;
 - disabled the new alt-text flow.",False
d562e0525d4a517512c8ccd73384d1f3595c6665,2024-08-02 00:11:32,Tim van der Meij,"Merge pull request #18523 from Snuffleupagus/Toolbar-more-bindListeners

Move all event listeners into `Toolbar.prototype.#bindListeners`",True
e6bb1f324b5b6fc1dd30e5d3b152ee3808103518,2024-08-01 23:37:59,Tim van der Meij,"Merge pull request #18535 from Snuffleupagus/bug-report-PDF-description

Further emphasize the importance of `Attach (recommended) or Link to PDF file` in the bug report template",True
0269cf5b4dc62fae2ea1cd06579ef58b1612275c,2024-08-01 23:36:43,Tim van der Meij,"Merge pull request #18518 from timvandermeij/viewer-toolbar-height

Introduce a CSS variable for the toolbar height (bug 1171799)",True
ec0f0f3d9beb1352c4d2951f7c5cb3ce96bcb88f,2024-08-01 23:36:23,Tim van der Meij,"Merge pull request #18517 from timvandermeij/viewer-button-types

Give all HTML button elements a type",True
12c3f251a147730bc4095a7147bdc20bc96c613e,2024-08-01 15:31:39,Jonas Jenwald,"Further emphasize the importance of `Attach (recommended) or Link to PDF file` in the bug report template

Unfortunately it turns out (perhaps unsurprisingly) that even the new bug report template isn't stopping users from leaving out the single most important part, i.e. `Attach (recommended) or Link to PDF file`, despite it now being marked as a required field.",False
63371eaed8326f1ba4d4cdf6a1360a9333bd0bcf,2024-07-31 21:04:19,calixteman,"Merge pull request #18526 from calixteman/bug1907958

[Editor] Allow Float32Array for quadpoints in annotations (bug 1907958)",True
5f95d9b1baaea8b6f840e66f0ffed114b7b2b7cc,2024-07-31 19:53:01,Calixte Denizet,"[Editor] Allow Float32Array for quadpoints in annotations (bug 1907958)

Added annotations could have some quadpoints (highlight, ink).
The isNumberArray check was returning false and consequently the annotation wasn't
printable.
The tests didn't catch this issue because the quadpoints were passed as Array.
So driver.js has been updated in order to pass them as Float32Array in order
to be in a situation similar to the real life one.",False
7c3aa9445cbc2f011e612336a91f77edd00ddc1e,2024-07-31 13:19:25,Jonas Jenwald,"Move all event listeners into `Toolbar.prototype.#bindListeners`

Over time a couple of event listeners have been placed in the constructor, despite there being an existing helper method for that purpose. To improve the code organization, let's move these to the intended method instead.",False
e3838c1c70c17281c1db55d1c20aafdd4dbbb28c,2024-07-31 00:52:49,Tim van der Meij,"Introduce a CSS variable for the toolbar height (bug 1171799)

This refactoring lays the foundation for making the toolbar height
configurable in Firefox via the `browser.uidensity` preference. For
this to work correctly the toolbar height must be defined in a single
place that can easily be updated dynamically, hence this patch which
moves it to a CSS variable in such a way that the rest of the UI adapts
correctly if the value is changed.

Co-authored-by: Calixte Denizet <calixte.denizet@gmail.com>",False
f6b356eff753358bf3263d174dc0cf4852800edd,2024-07-30 22:23:24,calixteman,"Merge pull request #18516 from calixteman/add_bg_for_alpha

[Editor] Add a checkerboard behind the image preview in the new alt-text dialog in order to see its potential transparency",True
f1f58bbe6796cf48d863ccddb59c6ffbb1f21e50,2024-07-30 22:19:18,Tim van der Meij,"Give all HTML button elements a type

The HTML button elements we use are all regular buttons that don't
submit form data to a server. According to
https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#notes
those buttons should all have their type set to `button` explicitly, but
we only do that a handful of them. This commit fixes the issue by
consistently giving all our buttons the `button` type.

Co-authored-by: Calixte Denizet <calixte.denizet@gmail.com>",False
16a66383bb4c16c92ae945742663c5f854c6a8ff,2024-07-30 21:24:54,Calixte Denizet,[Editor] Add a checkerboard behind the image preview in the new alt-text dialog in order to see its potential transparency,False
8f4537488196d567e39881f1a6af37cda304ae77,2024-07-30 13:55:02,calixteman,"Merge pull request #18492 from calixteman/new_stamp_dialog

[Editor] Implement the new alt text flow (bug 1909604)",True
7199c967e68fde48bf2a105296e0b278edc6ffe9,2024-07-30 00:03:04,Tim van der Meij,"Merge pull request #18510 from timvandermeij/findbar-button

Improve how the findbar's toggle button is referenced in the viewer code",True
f430a6bfd42f23a742f456d0ea31423a0408f901,2024-07-29 23:25:32,Tim van der Meij,"Improve how the findbar's toggle button is referenced in the viewer code

The sidebar and secondary toolbar both have a reference to their toggle
buttons in their own sections in `getViewerConfiguration`, so it makes
sense for the findbar to do the same.

While we actually have a findbar-specific reference to the toggle
button, I noticed that we don't use it consistently because the toolbar
also has a reference to the exact same toggle button and we use both in
the code. This is probably for historical reasons: the docstring in the
toolbar file indicates that the `viewFind` element is an input to the
component, but that option is never actually used in the code itself.

This commit fixes the issue by removing the toolbar-specific reference,
since it's not actually used (anymore) in the toolbar code, so that we
consistently use the findbar-specific reference everywhere.",False
45e42cc6e408c00b8ddd7afe52f5fa1977dac36b,2024-07-29 22:46:38,Tim van der Meij,"Merge pull request #18509 from timvandermeij/globals

Remove the `globals` dependency",True
7e3d56a3087248c50456658b643b8e4540380772,2024-07-29 21:46:28,Tim van der Meij,"Remove the `globals` dependency

This dependency got introduced in PR #10293, almost six years ago now,
because `eslint-plugin-mozilla` didn't work without it but also didn't
require it as a dependency itself.

However, nowadays `eslint-plugin-mozilla` works just fine without it,
and other dependencies that need it correctly require it themselves.
This can be seen using `npm ls globals`:

```
$ npm ls globals
pdf.js
├─┬ @babel/core@7.24.9
│ └─┬ @babel/traverse@7.25.0
│   └── globals@11.12.0
├─┬ @babel/preset-env@7.25.0
│ └─┬ @babel/plugin-transform-classes@7.25.0
│   └── globals@11.12.0
├─┬ eslint-plugin-unicorn@55.0.0
│ └── globals@15.8.0 deduped
├─┬ eslint@8.57.0
│ ├─┬ @eslint/eslintrc@2.1.4
│ │ └── globals@13.24.0
│ └── globals@13.24.0
└── globals@15.8.0
```

Further proof that `eslint-plugin-mozilla` (no longer) uses `globals` is
from a source code search in
https://searchfox.org/mozilla-central/search?q=globals&path=&case=false&regexp=false.
The only results for `eslint-plugin-mozilla` refer to a file named
`globals.js`, but the `globals` NPM package is not actually imported
anywhere.

Given this we should be able to safely get rid of this explicit
dependency on our end now.",False
300e806efe7e6438e0b37d8eeb1a97d9e5d27daa,2024-07-29 21:15:51,Tim van der Meij,"Merge pull request #18507 from Snuffleupagus/rm-PDFWorkerUtil

Remove `PDFWorkerUtil` and move its contents into `PDFWorker` instead",True
ed22d934e5d436b791277d46bfc416c6f18c3d15,2024-07-29 18:01:47,Calixte Denizet,"Implement the new alt text flow (bug 1909604)

For the Firefox pdf viewer, we want to use AI to guess an alt-text when adding an image to a pdf.
For now the telemtry stuff is not implemented and will come soon.
In order to test it locally:
 - set enableAltText, enableFakeMLManager and enableUpdatedAddImage to true.
or in Firefox:
 - set browser.ml.enable, pdfjs.enableAltText and pdfjs.enableUpdatedAddImage to true.",False
c4fdb2857367dcf1c1edfac7f27e5959455463de,2024-07-29 14:52:43,Jonas Jenwald,"Remove `PDFWorkerUtil` and move its contents into `PDFWorker` instead

This is possible thanks to features, i.e. private fields and in particular static initialization blocks, that didn't exist back when we started using classes in the code-base.",False
582866ee5095201cb8f935e1ccf9ea8e3ef219ba,2024-07-28 23:26:54,Tim van der Meij,"Merge pull request #18506 from timvandermeij/updates

Update dependencies to the most recent versions",True
100fafa9fb8827176df4108d67618a986a0ded59,2024-07-28 21:07:11,Tim van der Meij,"Disable the WebDriver BiDi protocol for Chrome

This should avoid the timeouts and OOM issues we have on the Linux bot,
which started since PR #18473.",False
b4f368c180928e94affc664445d4ed56220d4692,2024-07-28 20:56:49,Tim van der Meij,"Upgrade `eslint-plugin-unicorn` to version 55.0.0

This is a major version bump, but the changelog at
https://github.com/sindresorhus/eslint-plugin-unicorn/releases/tag/v55.0.0
doesn't indicate any breaking changes that should impact us.",False
69d3186745799fd404a583baf133c1eb0487b0d7,2024-07-28 20:56:45,Tim van der Meij,Update dependencies to the most recent versions,False
2eea0c8cf38c03b50d789be7e10e859359db8f7d,2024-07-28 17:03:11,Tim van der Meij,"Merge pull request #18505 from Snuffleupagus/ci-rm-Node-21

Stop testing in Node.js 21 since it's reached end-of-life",True
70bc136ea62a0c972a048e445f3b3d6ff58523c2,2024-07-28 16:45:43,Jonas Jenwald,"Stop testing in Node.js 21 since it's reached end-of-life

According to https://github.com/nodejs/release?tab=readme-ov-file#end-of-life-releases Node.js 21 stopped being supported on 2024-06-01, which is almost two months ago now, hence it seems pointless to keep testing in that environment.",False
0ef11325634a71b9376056582e3772b904d81589,2024-07-28 16:36:08,Tim van der Meij,"Merge pull request #18504 from Snuffleupagus/issue-18503

Ignore non-dictionary nodes when parsing StructTree data (issue 18503)",True
c4cd405a8fde5ece5c792d3e6dfb9448e02a32d4,2024-07-28 15:38:44,Jonas Jenwald,Ignore non-dictionary nodes when parsing StructTree data (issue 18503),False
6f9fc7092632f0e48f0cc84c94964e9b89a01ef2,2024-07-28 15:38:38,Tim van der Meij,"Merge pull request #18481 from nicolo-ribaudo/fix-selection-with-links

Disable link annotations during text selection",True
d3384c0e3c2edaa768c133ccd7877485300d69db,2024-07-28 14:39:11,Tim van der Meij,"Merge pull request #18501 from Snuffleupagus/AppOptions-init

Initialize all user-options upfront in AppOptions",True
0ed4521ad5a0087e9c3b185700b80f0f7fb2a1cb,2024-07-28 00:18:39,Tim van der Meij,"Merge pull request #18502 from Snuffleupagus/base_factory-shorter-errors

Shorten the errors mentioning API parameters in `BaseCMapReaderFactory` and `BaseStandardFontDataFactory`",True
d116ab1a228430fb8fb293e7f66631eafbb1cdd1,2024-07-27 20:24:54,Jonas Jenwald,"Shorten the errors mentioning API parameters in `BaseCMapReaderFactory` and `BaseStandardFontDataFactory`

The current error-messages also mention internal parameters, which an end-user obviously don't have to care about. So, let's try to avoid confusion here by only including the API parameters.",False
935d9047fccb5101e3e5df0ac7436a7df50655ab,2024-07-27 17:46:09,Jonas Jenwald,"Initialize all user-options upfront in AppOptions

 - Initialize all user-options upfront, to allow getting the options without having to check if they exist first. (This is easier to implement after PR 18475 landed.)

 - Move the user-options into a private field in `AppOptions`. (This code is old enough to pre-date general availability of that class feature.)

 - Move code/methods limited to GENERIC-builds into `AppOptions`.",False
8378c40f4c4b679851a6e00e1e21abaacfeab3c8,2024-07-27 17:40:16,Tim van der Meij,"Merge pull request #18500 from timvandermeij/bump

Bump the stable version in `pdfjs.config`",True
33d1506c5037475c768484ac7bcb82fd3bcef447,2024-07-27 17:36:52,Tim van der Meij,Bump the stable version in `pdfjs.config`,False
3a21f03b074eab9d0ff9b73211d0ad2643b4c0b7,2024-07-27 14:25:58,Jonas Jenwald,"Merge pull request #18495 from Snuffleupagus/AppOptions-setAll-EVENT_DISPATCH

Consistently dispatch events, if needed, when setting AppOptions",True
58c7b5b635e26d3d487c1ec626398f7aea3877a4,2024-07-27 13:40:38,Jonas Jenwald,"Consistently dispatch events, if needed, when setting AppOptions

Currently we'll only dispatch events, for the options that support it, when updating preferences. Since this could potentially lead to inconsistent behaviour, let's avoid any future surprises by *always* dispatching events regardless of how the relevant option is being changed.

Obviously we should then also dispatch events in `AppOptions.set`, and to avoid adding even more duplicated code this method is changed into a wrapper for `AppOptions.setAll`.
While this is technically a tiny bit less efficient I don't think it matters in practice, since outside of development- and debug-mode `AppOptions.set` is barely used.",False
2efa3e460c94ad6ad48541e2ec44af6e22153bda,2024-07-24 23:29:22,calixteman,"Merge pull request #18493 from calixteman/fix_utf16_alt_text

[Editor] Correctly save a non-ascii alt text",True
c3065629ca1a66d01a0a382793ade76991f25e0b,2024-07-24 22:43:45,Calixte Denizet,[Editor] Correctly save a non-ascii alt text,False
cb737512de3cb848ff21ee37d48de4a194b30784,2024-07-23 19:20:29,Tim van der Meij,"Merge pull request #18486 from Snuffleupagus/AppOptions-replace-locale

Replace the GENERIC-only ""locale"" with ""localeProperties"" in AppOptions",True
1c65ad3adcba963634111ec92403f38556629196,2024-07-23 19:16:51,Tim van der Meij,"Merge pull request #18483 from timvandermeij/streamqueue

Remove the `streamqueue` dependency",True
64a0e59662148ff8bf95c79a22930745743341db,2024-07-23 14:12:34,Nicolò Ribaudo,"Disable link annotations during text selection

When selecting text, hovering over an element
causes all the text between (according the the dom
order) the current selection and that element to
be selected.

This means that when, while selecting, the cursor
moves over a link, all the text in the page gets
selected. Setting `user-select: none` on the link
annotations would improve the situation, but it
still makes it impossible to extend the selection
within a link without using Shift+arrows keys on
the keyboard.

This commit fixes the problem by setting
`pointer-events: none` on the `<section>`s in the
annotation layer while selecting some text. This
way, they are ignored for hit-testing and do not
affect selection.

It is still impossible to _start_ a selection
inside a link, as the link text is covered by the
link annotation.

Fixes #18266",False
33493301b3ed74955699d89546c745538163baf8,2024-07-23 13:32:03,calixteman,"Merge pull request #18484 from calixteman/bug1909310

Add a pref to know if the alt-text must be automatically generated (bug 1909310)",True
7ebfad6d92f16df0649c1124138b8678e346a01e,2024-07-23 13:21:32,Jonas Jenwald,"Replace the GENERIC-only ""locale"" with ""localeProperties"" in AppOptions

Since ""localeProperties"" is needed in Firefox, let's remove a tiny bit of option duplication by using it in the GENERIC builds as well.
For convenience, the old debug-only ""locale"" hash-parameter is kept intact.",False
042183b89b78148f354eeb643aeb68e2f57ebc89,2024-07-23 02:40:25,Calixte Denizet,Add a pref to know if the alt-text must be automatically generated (bug 1909310),False
1b9981cd92f6bf27ca5c240a0c4141a5690eca69,2024-07-22 23:57:31,Tim van der Meij,"Remove the `streamqueue` dependency

The `streamqueue` dependency is only used for the test targets in the
Gulpfile to make sure that the test types are run in series. This is
done by modelling the test processes as readable streams and then having
`streamqueue` combine them into a single readable stream for Gulp that
processes the inner readable streams in series (in contrast to the
`ordered-read-streams` dependency which is very similar but processes
the inner streams in parallel).

However, modelling the test processes as readable streams is a bit odd
because we're not actually streaming any data as one might expect.
Instead, we only use them to signal test process completion/abortion.

Fortunately nowadays, with modern Gulp versions, we don't need readable
streams and `streamqueue` anymore because we can achieve the same result
with simple asynchronous functions that can be passed to e.g.
`gulp.series()` calls. Note that we already do this in various places,
and overall it should be a better fit for test process invocations.",False
5184a38e3de4e2e4065df30019dd48501ef59962,2024-07-22 21:40:29,Tim van der Meij,"Merge pull request #18480 from Snuffleupagus/AppOptions-optional-type

Add better support for AppOptions with multiple types (PR 18465 follow-up)",True
b3ea789286f346dff43ca50ae0ebc3d4262a4785,2024-07-22 21:28:21,Jonas Jenwald,"Add better support for AppOptions with multiple types (PR 18465 follow-up)

For options with varying types, see `useSystemFonts`, we're not sufficiently validating the type when setting a new value. This means that for an option that uses `OptionKind.UNDEF_ALLOWED` we'd allow *any* value, which is obviously not the intention.

Hence we instead introduce a new and *optional* `type`-field that allows specifying exactly which types are valid when multiple ones are supported.

*Note:* This obviously didn't occur to me until after PR 18465 landed, sorry about that!",False
deaac2839e4994e4f2e8dec053607ed93e4ca7ed,2024-07-22 20:59:18,Tim van der Meij,"Merge pull request #18476 from Snuffleupagus/viewer-mv-docBaseUrl

Re-factor how the ""docBaseUrl"" API-option is set in the viewer",True
91655aae7fd40dc9365c0346c5a46a086c417153,2024-07-22 15:53:57,calixteman,"Merge pull request #18467 from calixteman/issue18466

Use a transparent color when setting fill/stroke colors in a pattern context but with no colorspace",True
482994cc040ffa95c70e0fcf644d2d02ec15c351,2024-07-22 13:26:10,Calixte Denizet,Use a transparent color when setting fill/stroke colors in a pattern context but with no colorspace,False
12e083f60d27816442b8da453c7d7f1f1abbc6bb,2024-07-22 01:37:52,Jonas Jenwald,"Re-factor how the ""docBaseUrl"" API-option is set in the viewer

This option is old enough that it predates e.g. the introduction of AppOptions, so it probably cannot hurt to re-factor this a little bit now.

 - In development-mode we can just set this directly in AppOptions.

 - In the extension-builds we still need to set it dynamically, however by moving this code we get the benefit of being able to avoid storing a data-URL in that case; note how [the API ignores those anyway](https://github.com/mozilla/pdf.js/blob/98e772727e70dcad6433b5f02e027d6724b912f4/src/display/api.js#L256-L262).",False
98e772727e70dcad6433b5f02e027d6724b912f4,2024-07-22 00:58:52,Tim van der Meij,"Merge pull request #18475 from Snuffleupagus/rm-AppOptions-remove

Remove the unused `AppOptions.remove` method",True
422b3e4a4ad51a40583b3d844a1dd41865af0641,2024-07-22 00:23:46,calixteman,"Merge pull request #18468 from calixteman/dont_throw_with_invalid_cs

Fallback on DeviceGray when a colorspace cannot be parsed",True
998bc073752b3d71db39a3f1d1e7cdc0729be8ce,2024-07-22 00:23:08,calixteman,"Merge pull request #18472 from calixteman/bug1908939

Add the possibility to delete a model (bug 1908939)",True
d9ff29a46bbf7453a9a75c81749e5568931a06d8,2024-07-21 22:56:15,Jonas Jenwald,"Remove the unused `AppOptions.remove` method

This method has *never* been used anywhere in the code-base, so I really don't know why I added it originally.",False
71bae38afbd1a417f698a5d9fb16ef95e688e4bb,2024-07-21 21:26:31,Calixte Denizet,Fallback on DeviceGray when a colorspace cannot be parsed,False
0c34efbef9bd916707ab99f84d0a9f4df43109de,2024-07-21 21:23:49,Tim van der Meij,"Merge pull request #18465 from Snuffleupagus/issue-18210

Disable system fonts on Android (issue 18210)",True
b759470ed5b58ec2819ca2754f9ab89435985691,2024-07-21 20:39:41,Calixte Denizet,Add the possibility to delete a model (bug 1908939),False
d0b580e79ff1990df5f6456ccab79c5e0f2cb82f,2024-07-21 20:37:29,calixteman,"Merge pull request #18471 from calixteman/bug1909097

Add a pref containing the url for the sumo page about alt text (bug 1909097)",True
5860c7bcc907e9e92d34406f3a5bfe4303b62807,2024-07-21 20:25:26,Calixte Denizet,Add a pref containing the url for the sumo page about alt text (bug 1909097),False
80d6bf6319645ec0006384980eddfe17505a7765,2024-07-21 18:58:16,Jonas Jenwald,"Disable system fonts on Android (issue 18210)

To avoid introducing any inline ""hacks"" in the viewer-code this meant adding `useSystemFonts` to the AppOptions, which thus required some new functionality since the default value should be `undefined` given how the option is handled in the API; note [this code](https://github.com/mozilla/pdf.js/blob/ed83d7c5e16798a56c493d56aaa8200dd280bb17/src/display/api.js#L298-L301).

Finally, also moves the definition of the development-mode `window.isGECKOVIEW` property to the HTML file such that it's guaranteed to be set regardless of how and when it's accessed.",False
45ce3a057ff083123de3ff37691e0704e0e44ee0,2024-07-21 18:57:43,Jonas Jenwald,"Use shorter local variable names in a few AppOptions methods

Besides being slightly shorter, this should help reduce the risk of confusion given the very similar global Object/Map names.",False
ebb3d271253db3dbdec364da67f41f115b107894,2024-07-21 18:17:29,Tim van der Meij,"Merge pull request #18469 from Snuffleupagus/AppOptions-Maps

Introduce some `Map`-usage in the AppOptions",True
9f62c0f139783f0d56e055bfea03e65fd1eda560,2024-07-21 18:10:07,Tim van der Meij,"Merge pull request #18470 from Snuffleupagus/move-Preferences-init

Move the `Preferences` initialization as early as possible",True
f8aa15aae99977405936ea4461eb0222db351bf1,2024-07-21 17:12:31,Jonas Jenwald,"Move the `Preferences` initialization as early as possible

Given that the entire default viewer initialization depends on the preferences being available, try to do this as early as possible.",False
26989fdf24fa526e8e8f95995deaf6b0bd28e47e,2024-07-21 13:02:36,Jonas Jenwald,Add basic validation of the AppOptions `BROWSER`-kind,False
7bd920691fb950429d5ddea3f56da30b395b2c6c,2024-07-21 12:57:23,Jonas Jenwald,"Change the `userOptions`, used with AppOptions, to a `Map`

This is needed for upcoming changes, and simplifies both checking if an entry exists and iteration of the entries.",False
57ee0355734d0f4f67e4e327faa39112464e2a3d,2024-07-21 12:57:05,Jonas Jenwald,"Change the `compatibilityParams`, used with AppOptions, to a `Map`

This is needed for upcoming changes, and simplifies both checking if an entry exists and iteration of the entries.",False
e92a6a14ff53486cf900986ee1000942e6e1adf1,2024-07-20 22:41:54,Tim van der Meij,"Merge pull request #18450 from Snuffleupagus/AppOptions-set-validation

Add more validation when setting `AppOptions` (PR 18413 follow-up)",True
7a8aceef20925dc082a8f1f863134958ceb46015,2024-07-20 21:41:32,Tim van der Meij,"Merge pull request #18463 from Snuffleupagus/app-rm-downloadComplete

Re-factor the code to remove all uses of `PDFViewerApplication.downloadComplete`",True
9db1ae4da519ee9253f032c5f62c9afa3803f401,2024-07-20 21:34:47,Tim van der Meij,"Merge pull request #18464 from Snuffleupagus/setTitleUsingUrl-url-fallback

Reduce a tiny bit of duplication in `PDFViewerApplication.setTitleUsingUrl`",True
482d6211aa4ca8e1d8a495b7f0af353ad62cb584,2024-07-20 13:49:45,Jonas Jenwald,"Reduce a tiny bit of duplication in `PDFViewerApplication.setTitleUsingUrl`

Rather than repeating code, we can always fallback to the raw URL instead.",False
64a4f0dc7e60e86a7c1da1dc903497fff71abe2c,2024-07-20 13:27:33,Jonas Jenwald,"Avoid downloading the document twice in `PDFViewerApplication.download`

The old implementation in `PDFViewerApplication.download` means that if the `getDocument`-call hasn't yet downloaded the *entire* PDF document it will be re-downloaded. This seems generally undesirable since:
 - In some (probably rare) cases a URL may not be valid an arbitrary number of times, which means that the download may fail.
 - It will lead to wasted resources, since we'll end up fetching the same PDF document *twice* in that case (once via the `getDocument`-call and once to allow the user to save it).

Hence this patch suggests that we change this very old code to instead always call the `PDFDocumentProxy.getData` method, since that'll trigger immediate downloading of the remaining document via the existing `getDocument`-call.

Finally, the patch removes the `PDFViewerApplication.downloadComplete` property since it's now unused.",False
006242489dfd3d1c76cfb6e7db648ca5c24420b7,2024-07-20 12:57:43,Jonas Jenwald,"Stop using `downloadComplete` in `PDFViewerApplication.progress`

This was only necessary to prevent (unlikely) visual glitches when `disableAutoFetch = true` is being used.
However, it turns out that we can move this functionality into the `ProgressBar` class instead by checking if the entire PDF document has loaded. This works since the API is always reporting 100% loading progress regardless of how the document was loaded; see [this code](https://github.com/mozilla/pdf.js/blob/ed83d7c5e16798a56c493d56aaa8200dd280bb17/src/display/api.js#L2735-L2740).",False
216d3a9fafc949ddeae1ca2115d1ce0217d8e8ce,2024-07-20 12:23:55,Jonas Jenwald,"Add more validation when setting `AppOptions` (PR 18413 follow-up)

After the changes in PR 18413 we're now relying even more on `AppOptions` and it thus seems like a good idea to ensure that no invalid values can be added.
Hence the `AppOptions.{set, setAll}` methods will now *unconditionally* validate that the type of the values agree with the default-options.",False
ed83d7c5e16798a56c493d56aaa8200dd280bb17,2024-07-20 02:38:50,calixteman,"Merge pull request #18461 from calixteman/bug1908938

Load the image-to-text model when opening the pdf viewer in Firefox (bug 1908938)",True
b71fa727e16bb24c6260510dc4117e3b7ca46590,2024-07-20 01:27:46,Calixte Denizet,Load the image-to-text model when opening the pdf viewer in Firefox (bug 1908938),False
5b0e15ab18eb30fcc81a21ad9c270c6cace56e69,2024-07-18 19:24:45,calixteman,"Merge pull request #18454 from calixteman/setpref_event

[Editor] Allow to change a preference from the editor UI manager",True
5946d20dc984a801648ccd9fbb334d9560b9e6c2,2024-07-18 18:42:39,Calixte Denizet,"[Editor] Allow to change a preference from the editor UI manager

We want to be able to update a global pref (i.e. enableAltText) in using a toggle button in the new alt-text dialog.",False
5be66580e60f4d4eca2e5c5181bb74aa1616c4f7,2024-07-18 17:49:50,Jonas Jenwald,"Merge pull request #18448 from Snuffleupagus/AppOptions-more-browser-params

Include additional data when fetching browser preferences in the PDF Viewer (bug 1908401)",True
31f247fe43b93756ec5d40164404a7f16897cbdd,2024-07-18 17:02:51,Jonas Jenwald,"Merge pull request #18453 from Snuffleupagus/issue-18408

Allow /XYZ destinations without zoom parameter (issue 18408)",True
d24a61c648fc79ce0b87137266562c8dc04e841c,2024-07-18 16:59:32,Jonas Jenwald,"Allow /XYZ destinations without zoom parameter (issue 18408)

According to the PDF specification these destinations should have a zoom parameter, which may however be `null`, but it shouldn't be omitted; please see https://opensource.adobe.com/dc-acrobat-sdk-docs/pdfstandards/PDF32000_2008.pdf#G11.2095870

Hence we try to work-around bad PDF generators by making the zoom parameter optional when validating explicit destinations in both the worker and the viewer.",False
e1f64a5b3e71ea7c306a7abdd611ff8aba124028,2024-07-18 13:49:50,calixteman,"Merge pull request #18449 from calixteman/bug1908483

Add the possibility to change some pdfjs preferences from the viewer (bug 1908483)",True
6cc32b699f79a35505659351fb04a5c8e7bac3fa,2024-07-18 13:22:10,Calixte Denizet,Add the possibility to change some pdfjs preferences from the viewer (bug 1908483),False
99f34f4c2edbd64a6fc39fc57b3ca26995281589,2024-07-17 20:27:55,Jonas Jenwald,"Include additional data when fetching browser preferences in the PDF Viewer (bug 1908401)

To avoid having to request and await various browser data early during the PDF Viewer initialization, we can include that data in the existing preference fetching instead. With other planned changes to the PDF Viewer, the current situation would only become worse over time.

*Note:* Technically this data aren't preference-values, however we're already including other non-prefs in this list (e.g. `isInAutomation`) and doing it this way simplifies the overall implementation.",False
15b71b82ed3f5c2a3c7450b33db4b040623a787c,2024-07-17 19:06:04,calixteman,"Merge pull request #18445 from calixteman/issue18444

Remove active smask when restoring the initial canvas state",True
37db3a7143827427711cafc15dd9f8cab05cd38f,2024-07-17 17:50:50,Calixte Denizet,"Remove active smask when restoring the initial canvas state

Fixes #18444.",False
86eb5ba70078d971cc082f096fdec8a1a5ace2d8,2024-07-16 18:02:07,Jonas Jenwald,"Merge pull request #18441 from Snuffleupagus/api-rm-Outliner

[api-minor] Remove `Outliner` from the official API",True
e190cebf92770344aaf35c41ffbf5d0a6122b47c,2024-07-16 17:20:40,calixteman,"Merge pull request #18440 from calixteman/fix_add_highlight

[Editor] When in non-editing mode, add a new editor only once the editing mode has switched",True
8a979c2d0e37d3fb398fb1af90953998b1f89381,2024-07-16 16:38:26,Jonas Jenwald,"[api-minor] Remove `Outliner` from the official API

As far as I can tell `Outliner` is only exposed in the API because we need to access it when running some of the reference-tests, but is otherwise not used.
Hence this seems like something that should be kept *internal* and thus only exposed in TESTING-builds.",False
6dd75c0e625a3063f76c6fd6c253aa23a703680e,2024-07-16 00:34:52,Calixte Denizet,"[Editor] When in non-editing mode, add a new editor only once the editing mode has switched

Switching to an editing mode can be asynchronous (e.g. if an editable annotation exists on a
visible page), so we must add a new editor only when the page rendering is done.",False
f9e3b6bcc47f4a3a15a4fb63f5ebe6d3e344e885,2024-07-15 18:35:35,Jonas Jenwald,"Merge pull request #18430 from Snuffleupagus/pr-18417-followup

Fix `DOMFilterFactory.#createUrl` in MOZCENTRAL builds (18417 PR follow-up)",True
4c45948bc49b0cd321537c6d8491137024baf58c,2024-07-15 17:40:59,Jonas Jenwald,"Fix `DOMFilterFactory.#createUrl` in MOZCENTRAL builds (18417 PR follow-up)

Somehow I managed to mess up the URL creation relevant to e.g. MOZCENTRAL builds, which is breaking the pending PDF.js update in mozilla-central; sorry about that!

To avoid future issues, we'll now always check if absolute filter-URLs are necessary regardless of the build-target.",False
87e74a753beb4fb10ec48c4fdc4f7855520dbd09,2024-07-15 17:28:08,calixteman,"Merge pull request #18429 from calixteman/bug1907207

[Editor] Add an option to use the new 'add an image' flow (bug 1907207)",True
5059187fffa1ac7efedecd0a4d0ab053a92873d2,2024-07-13 23:58:30,Tim van der Meij,"Merge pull request #18434 from timvandermeij/pdfjs-dist

Remove obsolete `pdfjs-dist` code from the Gulpfile",True
08967a5cd3832a81d2360e92e71b4a04ac5c3669,2024-07-13 23:58:07,Tim van der Meij,"Merge pull request #18433 from timvandermeij/contile

Disable network connections to Contile for the tests",True
1c5c5da12e14959df260c978ea2c9822a3b25a03,2024-07-13 23:19:28,Tim van der Meij,"Remove obsolete `pdfjs-dist` code from the Gulpfile

The Git logic for pushing to the `pdfjs-dist` repository was already
removed in PR #18350, but it was forgotten to also remove the logic to
create a Git repository in the first place. This commit fixes the open
action for that from
https://github.com/mozilla/pdf.js/pull/18358#discussion_r1661367441.

Moreover, we implement the suggestion from
https://github.com/mozilla/pdf.js/pull/18358#discussion_r1661364026
about moving the Git URL to a separate variable for consistency and we
update the homepage URL to the HTTPS scheme to avoid an HTTP -> HTTPS
redirect and enforce TLS-encrypted connections.",False
aea409d8cb147d32e865d86e2820a7b7ff4dc2d5,2024-07-13 21:59:32,Tim van der Meij,"Disable network connections to Contile for the tests

In PR #18356 the new tab page logic was disabled to prevent Firefox
from logging failed network connections to Contile, the Mozilla Tiles
service that is used for the new tab page [1]. However, recently this
log reappeared locally and on the bots:

```
console.warn: TopSitesFeed: Failed to fetch data from Contile server:
NetworkError when attempting to fetch resource.
```

It looks like Contile communication is also triggered from other places
in Firefox such as the URL bar [2], so this commit fixes the issue by
disabling network connections to Contile [3] altogether regardless of
their origin within Firefox. Note that we don't revert the change from
PR #18356 because as noted in [4] it can't hurt to keep that disabled
too to avoid overhead for a feature we don't use in the tests.

[1] https://github.com/mozilla-services/contile
[2] https://github.com/mozilla/gecko-dev/blob/196ef8360e4d3b5c334f1f8f91b3b1fdb434eb63/browser/components/urlbar/UrlbarProviderTopSites.sys.mjs#L38
[3] https://github.com/mozilla/gecko-dev/blob/196ef8360e4d3b5c334f1f8f91b3b1fdb434eb63/browser/components/newtab/lib/TopSitesFeed.sys.mjs#L111
[4] https://github.com/mozilla/pdf.js/pull/18356#issuecomment-2200354730",False
07c58aa23a2e96e9d3292568b8aa6baafa239c4c,2024-07-13 21:05:05,Tim van der Meij,"Merge pull request #18432 from timvandermeij/updates

Update dependencies to the most recent versions and update the JS/CSS files for the new Prettier/Stylelint versions",True
c77b97daffda1a7b96fc726bd91d66ec567c9b99,2024-07-13 19:59:47,Tim van der Meij,Update the JS/CSS files for the new Prettier/Stylelint versions,False
49eba2f8923f4c8fcd353c2304f108c7160fcc1a,2024-07-13 19:36:32,Tim van der Meij,Update dependencies to the most recent versions,False
dfccc8ffd989070645bceb58220d4340b63e979d,2024-07-12 19:58:48,Calixte Denizet,"[Editor] Add an option to use the new 'add an image' flow (bug 1907207)

UX team designed in a new flow we'll implement soon and we want to be able to
make an experiment to be able to compare current flow vs the new one.",False
2d254375a8ca8babf8a63685b39bd09388de9f80,2024-07-12 12:52:18,calixteman,"Merge pull request #18424 from calixteman/avoid_hovering_when_selecting

[Editor] Disable existing highlights when drawing a new one (bug 1879035)",True
4e7c30da9a09ad3b46eaf1a6c4e93934a741db89,2024-07-12 01:04:28,Calixte Denizet,"[Editor] Disable existing highlights when drawing a new one (bug 1879035)

When the mouse was hovering an existing highlight, all the text in the page
was selected.
So when the user is selecting some text or drawing a free highlight, the mouse
is disabled for the existing editors.",False
df5bc544dfd2e2c9e962014d7411e21eb4965354,2024-07-11 22:33:03,calixteman,"Merge pull request #18425 from calixteman/bug1879104

[Editor] Make editor toolbars usable whatever their z-index (bug 1879104)",True
9a64749dbe241113456cca5908a04472de229349,2024-07-11 21:30:42,Calixte Denizet,"[Editor] Make editor toolbars usable whatever their z-index (bug 1879104)

Because of editor z-index, the toolbar belonging to an highlight created
before a second adjacent one, can be overlapped by this new one.
So when the user select an editor we just show it on front of all the other
ones to make sure that it can be used normally.",False
acc70ce0b7f39006c9f10e0a081df17beb2687c7,2024-07-11 17:11:57,Jonas Jenwald,"Merge pull request #18423 from Snuffleupagus/rm-setZoomDisabledTimeout

Remove the remaining `zoomDisabledTimeout` usage (issue 17727)",True
8082c2daf18b3cea8b17d93294f19cb276f2458e,2024-07-11 15:55:16,Jonas Jenwald,"Merge pull request #18417 from Snuffleupagus/DOMFilterFactory-baseUrl

Create absolute filter-URLs when needed in `DOMFilterFactory` (issue 18406)",True
6b47ddd4d538a49d08b21808a5b1f27762b62623,2024-07-11 15:47:41,Jonas Jenwald,"Remove the remaining `zoomDisabledTimeout` usage (issue 17727)

With https://bugzilla.mozilla.org/show_bug.cgi?id=1882168 now marked as fixed by the landing of https://bugzilla.mozilla.org/show_bug.cgi?id=1902017 we should *hopefully* be able to remove this work-around.",False
50a5a150885c03d38a535a606723905ae938d65d,2024-07-11 15:00:45,Jonas Jenwald,"Create absolute filter-URLs when needed in `DOMFilterFactory` (issue 18406)

This functionality is purposely limited to development mode and GENERIC builds, since it's unnecessary in e.g. the *built-in* Firefox PDF Viewer, and will only be used when a `<base>`-element is actually present.

*Please note:* We also have tests in mozilla-central that will *indirectly* ensure that relative filter-URLs work as intended in the Firefox PDF Viewer, see https://searchfox.org/mozilla-central/source/toolkit/components/pdfjs/test/browser_pdfjs_filters.js

---

To test that the issue is fixed, the following code can be used:

```html
<!DOCTYPE html>
<html>
<head>
  <meta charset=""UTF-8"">
  <base href=""."">
  <title>base href (issue 18406)</title>
</head>
<body>

<ul>
  <li>Place this code in a file, named `base_href.html`, in the root of the PDF.js repository</li>
  <li>Run <pre>npx gulp dist-install</pre></li>
  <li>Run <pre>npx gulp server</pre></li>
  <li>Open <a href=""http://localhost:8888/base_href.html"">http://localhost:8888/base_href.html</a> in a browser</li>
  <li>Compare rendering with <a href=""http://localhost:8888/web/viewer.html?file=/test/pdfs/issue16287.pdf"">http://localhost:8888/web/viewer.html?file=/test/pdfs/issue16287.pdf</a></li>
</ul>

<canvas id=""the-canvas"" style=""border: 1px solid black; direction: ltr;""></canvas>

<script src=""/node_modules/pdfjs-dist/build/pdf.mjs"" type=""module""></script>

<script id=""script"" type=""module"">
  //
  // If absolute URL from the remote server is provided, configure the CORS
  // header on that server.
  //
  const url = '/test/pdfs/issue16287.pdf';

  //
  // The workerSrc property shall be specified.
  //
  pdfjsLib.GlobalWorkerOptions.workerSrc =
    '/node_modules/pdfjs-dist/build/pdf.worker.mjs';

  //
  // Asynchronous download PDF
  //
  const loadingTask = pdfjsLib.getDocument(url);
  const pdf = await loadingTask.promise;
  //
  // Fetch the first page
  //
  const page = await pdf.getPage(1);
  const scale = 1.5;
  const viewport = page.getViewport({ scale });
  // Support HiDPI-screens.
  const outputScale = window.devicePixelRatio || 1;

  //
  // Prepare canvas using PDF page dimensions
  //
  const canvas = document.getElementById(""the-canvas"");
  const context = canvas.getContext(""2d"");

  canvas.width = Math.floor(viewport.width * outputScale);
  canvas.height = Math.floor(viewport.height * outputScale);
  canvas.style.width = Math.floor(viewport.width) + ""px"";
  canvas.style.height = Math.floor(viewport.height) + ""px"";

  const transform = outputScale !== 1
    ? [outputScale, 0, 0, outputScale, 0, 0]
    : null;

  //
  // Render PDF page into canvas context
  //
  const renderContext = {
    canvasContext: context,
    transform,
    viewport,
  };
  page.render(renderContext);
</script>

</body>
</html>
```",False
9b1b5ff7e7689800d01247359f4fd97d19874d14,2024-07-11 14:54:15,calixteman,"Merge pull request #18419 from calixteman/reuse_old_dict_when_updating

[Editor] Update the freetext annotation dictionary instead of creating a new one when updating an existing freetext",True
e8d35c25ee407b75b9369ac77e86c877bffda021,2024-07-11 14:22:17,Jonas Jenwald,"Merge pull request #18412 from Snuffleupagus/issue-18059

Also update the width/unicode data when replacing missing glyphs in non-embedded Type1 fonts (issue 18059)",True
b56e4209a97d1b50f81df7c43a806109cb362ccf,2024-07-11 14:21:44,Jonas Jenwald,"Merge pull request #18421 from Snuffleupagus/bug-1907000

Allow e.g. /FitH destinations without additional parameter (bug 1907000)",True
6711123f68651401af64ea9be9011ade6ffaae57,2024-07-11 14:14:21,Calixte Denizet,[Editor] Update the freetext annotation dictionary instead of creating a new one when updating an existing freetext,False
403d02361726a18ff4a504ca9437b9308c2673e3,2024-07-11 14:06:44,Jonas Jenwald,"Allow e.g. /FitH destinations without additional parameter (bug 1907000)

According to the PDF specification these destinations should have a coordinate parameter, which may however be `null`, but it shouldn't be omitted; please see https://opensource.adobe.com/dc-acrobat-sdk-docs/pdfstandards/PDF32000_2008.pdf#G11.2095870

Hence we try to work-around bad PDF generators by making the coordinate parameter optional when validating explicit destinations in both the worker and the viewer.",False
cf58113e8cbca778c30735b678bf71f5fb531e23,2024-07-10 19:47:26,Tim van der Meij,"Merge pull request #18416 from razh/ensureMinimumFontSize-body-flex

Fix `ensureMinFontSizeComputed` calculation if `<body>` is a flex container",True
665fff020e32343fca5f685b384f1ba455b8c4cf,2024-07-10 18:11:09,razh,"Fix `ensureMinFontSizeComputed` calculation if `<body>` is a flex container

Given:

```css
html,
body {
  height: 100%;
}

body {
  display: flex;
}
```

The `<div>` appended to the `<body>` will take up the full height of the
viewport due to the implicit `align-items: stretch` of flex containers.

This results in an incorrect computed `minFontSize` value.",False
b1bf8b4979b7e6aef0a4eecc92c2bb4afefc0dbc,2024-07-10 15:48:21,calixteman,"Merge pull request #18418 from calixteman/wait_for_rendering

[Editor] Wait for 'pagerendered' to switch to editing mode",True
d27efb43cdf2904f56ae8de9b653f6208b674702,2024-07-10 14:59:42,Calixte Denizet,"[Editor] Wait for 'pagerendered' to switch to editing mode

The focus can potentially be stolen when the DOM is modified when adding
a new canvas element for the page being redrawn.",False
7ffea2f02ab15177c9434c47d0e794d4f680b987,2024-07-10 02:39:09,Tim van der Meij,"Merge pull request #18413 from Snuffleupagus/BasePreferences-AppOptions-wrapper

Re-factor `BasePreferences` to essentially be a wrapper around `AppOptions`",True
d9f0ec0b8720d207623f1979e2a78fb31753a2d7,2024-07-10 02:19:59,Jonas Jenwald,"Re-factor `BasePreferences` to essentially be a wrapper around `AppOptions`

In the MOZCENTRAL build the `BasePreferences` class is almost unused, since it's only being used to initialize and update the `AppOptions` which means that theoretically we could move the relevant code there.
However for the other build targets (e.g. GENERIC and CHROME) we still need to keep the `BasePreferences` class, although we can re-factor things to move the necessary validation inside of `AppOptions` and thus simplify the code and reduce duplication.

The patch also moves the event dispatching, for changed preference values, into `AppOptions` instead.",False
56653e57709719ca0fd6a44d25be790a0d36a5b4,2024-07-09 13:11:01,Jonas Jenwald,"Also update the width/unicode data when replacing missing glyphs in non-embedded Type1 fonts (issue 18059)

*Please note:* This causes a little bit of movement in the `issue2770` test-case, however this matches the rendering in both Adobe Reader and PDFium.",False
f9d63201eb25d4b804082ebd60bba6bc85346fd0,2024-07-09 12:58:10,Jonas Jenwald,"Revert ""Remove the unused `Font.prototype.spaceWidth` getter (PR 13424 follow-up)""

This reverts commit 4aee67227e3c5b28f1bb4d8fa6b2ad882bc23b5a.",False
7ffa9a283d52019b4d857318c96533cc9dc1904a,2024-07-09 12:42:09,Jonas Jenwald,Extend test-coverage for non-embedded Type1 fonts where .notdef glyphs are replaced with spaces,False
1bdd6920ff0b443ab7893ee103d8185bcf2bb7f2,2024-07-08 01:37:29,Tim van der Meij,"Merge pull request #17962 from calixteman/chrome_bidi

Use BiDi protocol for Chrome tests",True
5bfe759574b0ffa604759ceb62457c202ad4ab2d,2024-07-07 20:42:00,Calixte Denizet,Use BiDi protocol for Chrome tests,False
2a125bd0f00508efaef4cf35cb2cf94264a3b0f7,2024-07-07 17:43:32,calixteman,"Merge pull request #18405 from timvandermeij/intermittent-waitforscripting

Introduce a `waitForScripting` helper function and use it in all scripting integration tests",True
b540b6333f377e790eca727b684080c2efe838e3,2024-07-06 22:59:45,Tim van der Meij,"Introduce a `waitForScripting` helper function and use it in all scripting integration tests

Code inspection uncovered that quite a few integration tests don't wait
for scripting to be ready before proceeding, which is a source of
intermittent failures, especially on slower machines where e.g. creating
the sandbox takes longer.

This commit fixes the issues by introducing a `waitForScripting` helper
function and calling it consistently in all scripting integration tests.",False
5ee61690f369980710ab2b719193bd81f3dc7e35,2024-07-06 22:27:07,Jonas Jenwald,"Merge pull request #18390 from alexcat3/fix-issue-18099

Handle toUnicode cMaps that omit leading zeros in hex encoded UTF-16 (issue 18099)",True
145951df88570909c9e92481e04f712c7d65b144,2024-07-06 21:02:55,Tim van der Meij,"Merge pull request #18404 from timvandermeij/fix-unit-intermittent

Fix the ""caches image resources at the document/page level as expected (issue 11878)"" unit test",True
1c364422a612f02bc9f50212c7c40dd473e544ff,2024-07-06 20:59:21,alexcat3,"Handle toUnicode cmaps that omit leading zeros in hex encoded UTF-16 (issue 18099)
Add unit test to check compatability with such cmaps

In the PDF in issue 18099. the toUnicode cmap had a line to map the glyph char codes from 00 to 7F to the corresponding code points. The syntax to map a range of char codes to a range of unicode code points is
<start_char_code> <end_char_code> <start_unicode_codepoint>
As the unicode code points are supposed to be given in UTF-16 BE, the PDF's line SHOULD have probably read
<00> <7F> <0000>
Instead it omitted two leading zeros from the UTF-16 like this
<00> <7F> <00>
This confused PDF.js into mapping these character codes to the UTF-16 characters with the corresponding HIGH bytes (01 became \u0100, 02 became \u0200, et cetera), which ended up turning latin text in the PDF into chinese when it was copied
I'm not sure if the PDF spec actually allows PDFs to do this, but since there's at least one PDF in the wild that does and other PDF readers read it correctly, PDF.js should probably support this",False
2a44203d96cc8c09f597e6f7ddf34dc8a13e58e7,2024-07-06 20:00:07,Tim van der Meij,"Fix the ""caches image resources at the document/page level as expected (issue 11878)"" unit test

This unit test fails occasionally (albeit much less than before thanks
to PR #17663), so we change the parsing time check's divisor to prevent
it from happening again. If the last page's rendering time is less than
or equal to 50% of the first page's rendering time that should be enough
proof that no worker thread re-parsing occurred while also providing a
wide enough range to avoid intermittents.

Note that the assertion is now equal to the one we already have in the
""caches image resources at the document/page level, with main-thread
copying of complex images (issue 11518)"" unit test which seems to work
reliably so far.",False
bb3e3164e6dae3c0d7470603278b5262bce7c3fc,2024-07-06 19:24:14,Tim van der Meij,"Merge pull request #18402 from Snuffleupagus/updatedPreference-move-listener

Move the ""updatedPreference"" event listener registration",True
fe692435d3ea972f1f1e15418dc635391e70e15c,2024-07-06 19:13:26,Tim van der Meij,"Merge pull request #18401 from timvandermeij/test-orphaned-browsers

Fix orphaned browser processes due to uncaught exceptions in the tests",True
9e352a8bad79b106d017ef7ae55a8ccce448b80f,2024-07-06 18:58:03,Jonas Jenwald,"Move the ""updatedPreference"" event listener registration

This patch fixes a situation that'll probably never happen, but nonetheless seems like something that we should address.
Currently the ""updatedPreference"" listener isn't registered *until after* the preferences have been read and initialized, which leaves a very short window of time where a preference change could theoretically be skipped.",False
3afe2d30480fc7c15a459dca67ecee9246e98c36,2024-07-06 18:37:54,Tim van der Meij,"Fix orphaned browser processes due to uncaught exceptions in the tests

If uncaught exceptions occur in the tests (which happened in #17962 and
can be triggered manually by throwing an error in `integration-boot.js`)
the teardown logic of the tests doesn't get to run and thus spawned
browser processes are not closed properly. Given that `test.mjs` is the
only process that has a reference to them they will become orphaned and
keep running if `test.mjs` exits without explicitly closing them.

This commit fixes the issue by always closing the browsers if uncaught
exceptions occur, and we make sure to log them for debugging purposes.",False
db9115625b9e16b79ffdfcd8481547ae6f05a90a,2024-07-06 02:21:15,calixteman,"Merge pull request #18398 from calixteman/bug1905923

[Editor] Change the enableML pref for enableAltText (bug 1905923)",True
7a5f5616f4498348f08c31bdf79cbf647ebbc13f,2024-07-06 01:28:04,Tim van der Meij,"Merge pull request #18399 from timvandermeij/intermittent-charlimit

Fix the ""must check that charLimit is correctly set"" scripting integration test",True
9f001058c3d198b9f643cd420d96fa5d81e61ea6,2024-07-06 01:20:10,calixteman,"Merge pull request #18397 from calixteman/toolbar_density

Allow to change the toolbar height when changing the pref toolbar.density in Firefox (bug 1171799)",True
70b44251ed9650a53bc1e899f5127c1bb2584141,2024-07-06 00:45:44,Tim van der Meij,"Fix the ""must check that charLimit is correctly set"" scripting integration test

This integration test fails intermittently because we're not (correctly)
awaiting the character limit increase sandbox action.

For the first increase an attempt was made to handle this, but it doesn't
work correctly because the text in the field is `abcdefghijklmnopq` and
it's not be truncated until the sandbox action is completed, so because
we didn't await that we would could pass the `value !== ""abcdefgh""` check
because `abcdefghijklmnopq !== abcdefgh` is true. For the second increase
we didn't have a check in place.

This commit fixes the issues by using the `waitForSandboxTrip` and
`waitForSelector` helper functions to make sure that we can only proceed
if the sandbox action is completed and the DOM element is updated.",False
0fba6e570e5eb31140143ac060240ffa362b90b3,2024-07-06 00:31:12,Calixte Denizet,"[Editor] Change the enableML pref for enableAltText (bug 1905923)

We want to use this pref to make a Nimbus experiment in the next weeks.",False
0910f17a58b7a909f39977ed5ee690d8798e668b,2024-07-05 22:29:29,Calixte Denizet,"Allow to change the toolbar height when changing the pref toolbar.density in Firefox (bug 1171799)

It's a first step to just dispatch the pref change to the toolbar.
The second one, to effectively use it, will come after PR #18385 is merged.",False
e777ae2258762d66e3ba80ee82baff9daf02e8f8,2024-07-05 21:14:31,calixteman,"Merge pull request #18380 from calixteman/avoid_dbl_ml_queries

[Editor] Avoid to query ML engine several times for the same image",True
ccb141e2113ad28ef5e7975a2a82c0fbc9f74957,2024-07-05 19:03:45,Tim van der Meij,"Merge pull request #18393 from Snuffleupagus/mustBeViewedWhenEditing-params

Check the relevant parameters inside of the `mustBeViewedWhenEditing` method",True
cf9dfbc0846a5c34b20d6b682478bf1e653cf55b,2024-07-05 19:00:52,Tim van der Meij,"Merge pull request #18394 from Snuffleupagus/rm-annotation-getOperatorList-renderForms

Remove the `renderForms` parameter from the Annotation `getOperatorList` methods",True
5274bab9f3f1359a576cbab14fa3c20fae468e2a,2024-07-05 17:13:11,Calixte Denizet,[Editor] Avoid to query ML engine several times for the same image,False
38528d1116edf81090423b9cb5b78b5b820f7d8a,2024-07-05 15:55:18,Jonas Jenwald,"Remove the `renderForms` parameter from the Annotation `getOperatorList` methods

The `renderForms` parameter pre-dates the introduction of the general `intent` parameter, which means that we're now effectively passing the same state twice to these `getOperatorList` methods.",False
5f744904ac249e2af38e84fbe9ea96a93d096c82,2024-07-05 15:08:55,Jonas Jenwald,"Check the relevant parameters inside of the `mustBeViewedWhenEditing` method

Similar to the `mustBeViewed` method, we can check the relevant parameters within the `mustBeViewedWhenEditing` method itself since that (in my opinion) slightly helps readability of the code in the `src/core/document.js` file.",False
9065ee465b8c3b633c3a7a8d4ff0c1e014f7db87,2024-07-05 03:12:44,Tim van der Meij,"Merge pull request #18387 from Snuffleupagus/RenderingIntentFlag-IS_EDITING

Move the internal API/Worker `isEditing`-state into `RenderingIntentFlag`",True
a4ffc1066c9f6e1226b02c11a7c568a519a0654c,2024-07-05 03:04:30,Jonas Jenwald,"Move the internal API/Worker `isEditing`-state into `RenderingIntentFlag`

In *hindsight* this seems like a better idea, since it avoids the need to manually pass `isEditing` around as a boolean value.
Note that `RenderingIntentFlag` is *internal* functionality, not exposed in the official API, which means that it can be extended and modified as necessary.",False
8c5b0191cf6b39e134f654c5e599acc0dedb1e70,2024-07-05 02:36:42,calixteman,"Merge pull request #18389 from calixteman/remove_pref_stamp

[Editor] Remove the option enableStamp",True
74cbfbd09f831cbbaba4d556c056092af166d167,2024-07-05 01:31:35,Calixte Denizet,[Editor] Remove the option enableStamp,False
790470c1aadf4dc6c4e8ff00364b87ecea4d7bd7,2024-07-04 15:04:06,Tim van der Meij,"Merge pull request #18383 from calixteman/fix_print_test

Fix the integration tests related to printing",True
03a0500dcf2035bb10c811fa742e68b25bf6d112,2024-07-04 14:44:27,Tim van der Meij,"Merge pull request #18374 from calixteman/test_editor_visible

Make sure the editor is visible before getting its rect",True
53ddfd139ff9ea60a4b2e1a856ea93f46a014aff,2024-07-04 14:42:31,Calixte Denizet,Fix the integration tests related to printing,False
944f3acecdb7d4139f44cba1a30f84b56fa46d22,2024-07-04 14:42:25,Tim van der Meij,"Merge pull request #18367 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
396231b90c94a2bb39b71e8e9287e4bb28cc2db4,2024-07-04 14:36:48,Jonas Jenwald,"Merge pull request #15209 from Snuffleupagus/createDefaultPrefsFile

[Firefox] Generate a PDF.js default-prefs file that can be used directly in mozilla-central (bug 1905864)",True
617f513806ba9df5898720d473ef4d511c4dba80,2024-07-04 13:15:43,calixteman,"Merge pull request #18369 from calixteman/bug1905623

Use vertical variant of a char when it's in a missing vertical font (bug 1905623)",True
fd6d0be50fe6e858315d9dea56bfc82af646c7bb,2024-07-03 13:27:12,Calixte Denizet,Make sure the editor is visible before getting its rect,False
832fc93aa4b882ff304a2c78d91418afbc0465fc,2024-07-03 13:16:54,Calixte Denizet,Use vertical variant of a char when it's in a missing vertical font (bug 1905623),False
4e8a015a78e8c372244fc119757b55c3ad13388f,2024-07-02 21:59:19,Tim van der Meij,Update translations to the most recent versions,False
bb54e7e64cc46792e6271c8deb714373cb570c3c,2024-07-02 21:50:49,Tim van der Meij,Update dependencies to the most recent versions,False
ccad2f889ae8e721b1a1119190f03f99c68ae763,2024-07-02 20:53:54,Tim van der Meij,"Merge pull request #18349 from Snuffleupagus/rm-renderTextLayer

[api-minor] Remove the deprecated `renderTextLayer` and `updateTextLayer` functions (PR 18104 follow-up)",True
59620d3748debaf7ce7c53d0b2d56424ddf51dc1,2024-07-02 20:43:57,calixteman,"Merge pull request #18366 from calixteman/clean_switch_annot

[Editor] Make sure everything is cleaned up when we switch to annotation editor mode",True
68175323f1aa27436cd0e710094582dd99030dae,2024-07-02 20:24:19,Calixte Denizet,[Editor] Make sure everything is cleaned up when we switch to annotation editor mode,False
4f1d4c6bd08d50e295e7765fa2ef611e10e1d895,2024-07-02 19:20:36,calixteman,"Merge pull request #18365 from calixteman/bump_4.5

Bump library version to 4.5",True
c154b1da2302f63ed40bf2089d249d4b00085146,2024-07-02 19:16:05,calixteman,"Update pdfjs.config

Co-authored-by: Jonas Jenwald <jonas.jenwald@gmail.com>",False
2060944bdac8b4804c1a6231c5f57a59b9137356,2024-07-02 18:38:43,Calixte Denizet,Bump library version to 4.5,False
bdcc4a0febc02aec5be79da67507972e3c7be280,2024-07-02 18:35:42,calixteman,"Merge pull request #18134 from calixteman/hide_annotations

[api-minor][Editor] When switching to editing mode, redraw pages containing editable annotations (bug 1883884)",True
033623c8d64caa51c0035df3814d498783473b03,2024-07-02 18:04:59,Jonas Jenwald,Update the year in the `license_header` files,False
ecb39a75ed89bc6ed0a9067edfb96310b8005db0,2024-07-02 17:42:23,Jonas Jenwald,[Firefox] Generate a PDF.js default-prefs file that can be used directly in mozilla-central (bug 1905864),False
64635f3b35a64d1f941aadaf2bdcfd114b7053cc,2024-07-02 17:41:40,Calixte Denizet,"[api-minor][Editor] When switching to editing mode, redraw pages containing editable annotations

Right now, editable annotations are using their own canvas when they're drawn, but
it induces several issues:
 - if the annotation has to be composed with the page then the canvas must be correctly
   composed with its parent. That means we should move the canvas under canvasWrapper
   and we should extract composing info from the drawing instructions...
   Currently it's the case with highlight annotations.
 - we use some extra memory for those canvas even if the user will never edit them, which
   the case for example when opening a pdf in Fenix.

So with this patch, all the editable annotations are drawn on the canvas. When the
user switches to editing mode, then the pages with some editable annotations are redrawn but
without them: they'll be replaced by their counterpart in the annotation editor layer.",False
75129fd61a1ecbc7913f24c4a38df1e7dcb15fba,2024-07-02 14:51:06,calixteman,"Merge pull request #18361 from calixteman/issue18360.pdf

[Editor] Take into account the page translation when computing the quadpoints when saving an highlight",True
576aaf7cc1e56c17da4a350ddb277d1c96e44544,2024-07-02 13:42:26,Calixte Denizet,"[Editor] Take into account the page translation when computing the quadpoints when saving an highlight

It fixes #18360.",False
c280c520eecb63863e458275d4c06548dcffe043,2024-07-01 23:44:50,Tim van der Meij,"Merge pull request #18359 from timvandermeij/bump

Bump the stable version in `pdfjs.config`",True
2f4d5d25a8da8affa3f9768358dfc47f4a2dcba4,2024-07-01 23:40:35,Tim van der Meij,Bump the stable version in `pdfjs.config`,False
19fbc89985f8287b806bfe4e846e3762e610b672,2024-07-01 23:25:07,Tim van der Meij,"Merge pull request #18358 from timvandermeij/npm-url

Fix the repository URL in the `package.json` file for `pdfjs-dist`",True
bf5dd7ea10dcbb263fa252ae4a26919738668b40,2024-07-01 23:02:03,Tim van der Meij,"Fix the repository URL in the `package.json` file for `pdfjs-dist`

For provenance, enabled in PR #18352, to work the repository URL in
`package.json` is required to match the repository URL of the GitHub
Actions invocation. This should fix the following error we encountered
publishing a new release today:

```
npm error 422 Unprocessable Entity - PUT https://registry.npmjs.org/pdfjs-dist - Error verifying sigstore provenance bundle: Failed to validate repository information: package.json: ""repository.url"" is ""git+https://github.com/mozilla/pdfjs-dist.git"", expected to match ""https://github.com/mozilla/pdf.js"" from provenance
```",False
7114796430ddd545c8d1dbb33bd3b97763a76d0f,2024-07-01 21:12:16,Tim van der Meij,"Merge pull request #18352 from wojtekmaj/provenance

Generate provenance statements on npm publish",True
067ec20092586a9cbf31b63b7acdf34ccd1bb748,2024-07-01 20:17:39,Tim van der Meij,"Merge pull request #18356 from calixteman/no_newtabpage

Disable new tab page stuff in Firefox when running tests",True
efb45a705e816dda3255cd0183ecd6d1262c2dcd,2024-07-01 19:50:07,Calixte Denizet,"Disable new tab page stuff in Firefox when running tests

It should help to have such a garbage in the logs:
```
console.warn: TopSitesFeed: Failed to fetch data from Contile server: NetworkError when attempting to fetch resource.
JavaScript error: , line 0: TypeError: NetworkError when attempting to fetch resource.
```",False
aaa65bf3fccc1621e93bfb06d0deec921e9bda80,2024-07-01 19:07:25,Wojciech Maj,"Generate provenance statements on npm publish

This PR adds [Provenance statements](https://docs.npmjs.com/generating-provenance-statements) on `npm publish`, increasing supply-chain security.",False
8556a26390451052148648bf18d98c0fc4f812af,2024-07-01 18:55:02,Tim van der Meij,"Merge pull request #18353 from wojtekmaj/npm-ci

Use `npm ci`, not `npm install`, on CI",True
6b449d88841937c79113ecbfe8c8ca0d6a5b6ca4,2024-07-01 17:16:23,Wojciech Maj,"Use `npm ci`, not `npm install`, on CI

This PR switches from `npm install` to `npm ci` on CI. This enables some additional checks to ensure repo integrity when using CI/CD.

Read more: https://docs.npmjs.com/cli/v10/commands/npm-ci",False
b5d554e1b4475045862a947a9ced0af46c884327,2024-07-01 13:32:41,calixteman,"Merge pull request #18350 from timvandermeij/github-actions-release

Introduce a GitHub Actions workflow for publishing a release and fix `npm publish` warnings about the `package.json` format",True
dddb74d5e4d422b2be80ee93c26396830be2cfb3,2024-06-30 19:33:52,Tim van der Meij,"Fix `npm publish` warnings about the `package.json` format

This commit removes the following warnings from the `npm publish` output:

```
npm warn publish npm auto-corrected some errors in your package.json when publishing.  Please run ""npm pkg fix"" to address these errors.
npm warn publish errors corrected:
npm warn publish Removed invalid ""scripts""
npm warn publish ""repository.url"" was normalized to ""git+https://github.com/mozilla/pdfjs-dist.git""
```

For the ""scripts"" section it turns out that if the package doesn't have
any scripts it's expected to explicitly set it to an empty object; refer
to https://github.com/npm/cli/issues/6918 and
https://github.com/denoland/dnt/pull/414.",False
a5f2b9faebe7b9f315a572916d9a80fa9c05471b,2024-06-30 19:33:52,Tim van der Meij,"Introduce a GitHub Actions workflow for publishing a release

This commit migrates this functionality away from the bots. Note that
the NPM token must be configured as a repository secret before this
workflow can execute.

The following resources are relevant for this patch:

- Publishing packages to the NPM registry:
  https://docs.github.com/en/actions/publishing-packages/publishing-nodejs-packages#publishing-packages-to-the-npm-registry
- Creating secrets for a repository:
  https://docs.github.com/en/actions/security-guides/using-secrets-in-github-actions#creating-secrets-for-a-repository",False
f3d177e3e42c678b069b14315d4c7fe4a537cdae,2024-06-30 18:46:00,Jonas Jenwald,[api-minor] Remove the deprecated `renderTextLayer` and `updateTextLayer` functions (PR 18104 follow-up),False
40b0c848ee5d810c595faad7b704e4be05378d6e,2024-06-30 17:15:30,Tim van der Meij,"Merge pull request #18346 from Snuffleupagus/webserver-dev-note

Add a comment about `test/webserver.mjs` being development-only code",True
046e281e20850d2929f16180045db0a335f52c89,2024-06-29 15:35:28,Jonas Jenwald,Add a comment about `test/webserver.mjs` being development-only code,False
fb3a4e4f5cf547da05ad6c81e9e2a1de5d212612,2024-06-29 02:13:23,calixteman,"Merge pull request #18345 from calixteman/issue18305

Take into account PageOpen and PageClose actions which are present in some fields",True
dacf8bb0d1af9ace9d309ec132cae1147ede481f,2024-06-29 01:51:03,Calixte Denizet,Take into account PageOpen and PageClose actions which are present in some fields,False
870920202161b5571f9d2c958b7382f0f3a19ca5,2024-06-28 22:28:08,calixteman,"Merge pull request #18341 from calixteman/issue17779_not_in_talos

Ignore test issue17779.pdf in talos because it times out",True
4d91ae3cde4e7c0fccfaab3163ba5f54eb22b644,2024-06-28 21:08:58,Calixte Denizet,Ignore test issue17779.pdf in talos because it times out,False
a609bd89b390e4b46a391c4f3b62863ac70d41d7,2024-06-27 23:33:04,calixteman,"Merge pull request #18338 from calixteman/fix_stamp_test

Fix intermittent failures with freetext and stamp tests",True
abdc3fa7cf59a01f0415c7153e72d3a5aae67b56,2024-06-27 23:31:46,calixteman,"Merge pull request #18339 from calixteman/add_port_option

Add a port option to gulp server",True
53aca5fab16d4f921b8d0366d6547447dc8fa83c,2024-06-27 23:10:16,Tim van der Meij,"Merge pull request #18336 from Snuffleupagus/InternalRenderTask-cancel-cancelAnimationFrame

Cancel the `requestAnimationFrame` in the API when cancelling rendering",True
f006aa36d176d3f3a2cf21bf9e89c52bdd578e0e,2024-06-27 22:27:00,Calixte Denizet,Add a port option to gulp server,False
0e94f2bd00752321f22a02d66fb3307499cb1415,2024-06-27 21:53:41,Calixte Denizet,"Fix intermittent failures with freetext and stamp tests

They're potentially due to some concurrent access to the system clipboard.
So this patch makes them sequential.",False
a4f1a9a41b9fe5ff6713024dcf6513ff52a91dc3,2024-06-26 20:56:02,Jonas Jenwald,"Cancel the `requestAnimationFrame` in the API when cancelling rendering

Errors related to this `requestAnimationFrame` show up intermittently when running the integration-tests on the bots, however I've been unable to reproduce it locally.
Hence I cannot guarantee that it's enough to fix the timing issues, however this should be generally safe since the `requestAnimationFrame` invokes the `_next`-method and the first thing that one does is check that rendering hasn't been cancelled.",False
af16aa62ada5f459a1b6402065aae0fb47a5a6e3,2024-06-26 20:27:02,Tim van der Meij,"Merge pull request #18335 from Snuffleupagus/watchScroll-cancelAnimationFrame

Cancel the `requestAnimationFrame` in the `watchScroll` helper (PR 18193 follow-up)",True
4dad1e34b99affdcdfcab480c48dec794b0a79c7,2024-06-26 20:01:07,Jonas Jenwald,"Cancel the `requestAnimationFrame` in the `watchScroll` helper (PR 18193 follow-up)

While the event listener is removed during testing, the `requestAnimationFrame` isn't cancelled and that occasionally shows up when the integration-tests are run on the bots.",False
6d579081c4487bb41311f258d05c4f360eaf8af0,2024-06-26 19:50:57,Tim van der Meij,"Merge pull request #18331 from timvandermeij/integration-test-copy-pasting

Refactor the copy/paste logic in the integration tests and fix a race condition involving the `waitForEvent` integration test helper function",True
7128b95d29a9b802746b61ee9ecd7ef868b2141e,2024-06-26 18:55:33,Tim van der Meij,"Fix a race condition involving the `waitForEvent` integration test helper function

Debugging #17931 uncovered a race condition in the way we use the
`waitForEvent` function. Currently the following happens:

1. We call `waitForEvent`, which starts execution of the function body
   and immediately returns a promise.
2. We do the action that triggers the event.
3. We await the promise, which resolves if the event is triggered or
   the timeout is reached.

The problem is in step 1: function body execution has started, but not
necessarily completed. Given that we don't await the promise, we
immediately trigger step 2 and it's not unlikely that the event we
trigger arrives before the event listener is actually registered in the
function body of `waitForEvent` (which is slower because it needs to be
evaluated in the page context and there is some other logic before the
actual `addEventListener` call).

This commit fixes the issue by passing the action to `waitForEvent` as
a callback so `waitForEvent` itself can call it once it's safe to do so.
This should make sure that we always register the event listener before
triggering the event, and because we shouldn't miss events anymore we
can also remove the retry logic for pasting.",False
55ba4aa66aa6c1da1f1bdb0f9c9a5654a2c78c74,2024-06-26 18:18:42,Tim van der Meij,"Refactor the copy/paste logic in the integration tests

The integration tests are currently not consistent in how they do
copy/pasting: some tests use the `kbCopy`/`kbPaste` functions with
waiting for the event inline, some have their own helper function to
combine those actions and some even call `kbCopy`/`kbPaste` without
waiting for the event at all (which can cause intermittent failures).

This commit fixes the issues by providing a set of four helper functions
that all tests use and that abstract e.g. waiting for the event away
from the caller. This makes the invididual tests simpler and consistent,
reduces code duplication and fixes possible intermittent failures
due to not waiting for events to trigger.",False
2fbd61944b88d67a2df97ae8a3ac1fa86f7b4092,2024-06-26 00:45:15,calixteman,"Merge pull request #18332 from calixteman/bug1904585

Add the possibility to dispatch some pdf.js events at the chrome level (bug 1904585)",True
35474f8ef4bee5a21dcdde62df6ac7789269e6f7,2024-06-26 00:33:34,Calixte Denizet,Add the possibility to dispatch some pdf.js events at the chrome level (bug 1904585),False
7f586182bada2a531bce1ce584d00dadab7ceba7,2024-06-25 22:04:42,Jonas Jenwald,"Merge pull request #18333 from Snuffleupagus/l10n-destroy-rm-requestAnimationFrame

Remove the `requestAnimationFrame` work-around in `L10n.prototype.destroy` (PR 18313 follow-up)",True
f676ce5760f68341bfe7239d320de6d19f95ee14,2024-06-25 20:53:57,Jonas Jenwald,"Remove the `requestAnimationFrame` work-around in `L10n.prototype.destroy` (PR 18313 follow-up)

With `@fluent/dom 0.10.0` just published this work-around is no longer necessary.",False
11cb3a8e11a324e043a74c33aa4bbf7f438aa628,2024-06-25 19:27:15,Tim van der Meij,"Merge pull request #18283 from nicolo-ribaudo/ignore-browser-min-font-size

Override the minimum font size when rendering the text layer",True
5b29e935e1499f882862a852191e3b78a8fd324c,2024-06-25 18:28:08,Nicolò Ribaudo,"Overrride the minimum font size when rendering the text layer

Browsers have an accessibility option that allows user to enforce
a minimum font size for all text rendered in the page, regardless
of what the font-size CSS property says. For example, it can be
found in Firefox under `font.minimum-size.x-western`.

When rendering the <span>s in the text layer, this causes the
text layer to not be aligned anymore with the underlying canvas.
While normally accessibility features should not be worked around,
in this case it is *not* improving accessibility:
- the text is transparent, so making it bigger doesn't make it more
  readable
- the selection UX for users with that accessibility option enabled
  is worse than for other users (it's basically unusable).

While there is tecnically no way to ignore that minimum font size,
this commit does it by multiplying all the `font-size`s in the text
layer by minFontSize, and then scaling all the `<span>`s down by
1/minFontSize.",False
588587495385f586481c3c8fa462f43412374283,2024-06-25 17:18:53,Tim van der Meij,"Merge pull request #18326 from timvandermeij/integration-test-pastefromclipboard

Use `waitForEvent` in the `pasteFromClipboard` integration test helper function",True
f974b75d691f23dfc8dbc7fdcc011178c6368e79,2024-06-25 17:16:08,Tim van der Meij,"Use `waitForEvent` in the `pasteFromClipboard` integration test helper function

This code contains the same bug that the previous commit fixed in
`waitForEvent`, namely that we don't clear the timeout if the event
is triggered. By using the now fixed `waitForEvent` function we not
only deduplicate this code but we also fix this issue so that no
incorrect timeout logs show up anymore.",False
4b95d689deaebd0a42751ff9aaa65b65cfa9c1c6,2024-06-25 17:14:20,Tim van der Meij,"Merge pull request #18325 from timvandermeij/integration-test-timeouts

Fix the timeout logic in the `waitForEvent` integration test helper function",True
4899b2ea07136522c821208a6961500f69fa8d66,2024-06-25 14:42:32,calixteman,"Merge pull request #18324 from calixteman/bug1539074_1

Fix the computation of unitsPerEm when the fontMatrix has some negative coefficients",True
51dcd6a1baad3c5c83b624dd3a7886b49832c6fc,2024-06-24 21:52:24,Tim van der Meij,"Fix the timeout logic in the `waitForEvent` integration test helper function

Debugging #17931, by printing all parts of the event lifecycle including
timestamps, uncovered that some events for which a timeout was logged
actually did get triggered correctly in the browser. Going over the code
and discovering https://stackoverflow.com/questions/47107465/puppeteer-how-to-listen-to-object-events#comment117661238_65534026
showed what went wrong: if the event we wait for is triggered then
`Promise.race` resolves, but that doesn't automatically cancel the
timeout. The tests didn't fail on this because `Promise.race` resolved
correctly, but slightly later once the timeout was reached we would see
spurious log lines about timeouts for the already-triggered events.

This commit fixes the issue by canceling the timeout if the event we're
waiting for has triggered.",False
42bb2b0737a3d8f78a39576516cb601b613566ce,2024-06-24 20:10:07,Calixte Denizet,"Fix the computation of unitsPerEm when the fontMatrix has some negative coefficients

It's a follow-up of #18253.",False
e16707d6e2edfb8ffc47e7a59c25d01c95a898f2,2024-06-24 19:38:31,Tim van der Meij,"Merge pull request #18323 from timvandermeij/security-followup

Improve the security policy",True
4033913accf5a1158da345e7fa523e473d6a6ea0,2024-06-24 19:24:06,Tim van der Meij,"Improve the security policy

This commit fixes two issues that have been found after commit 2beae7a
landed, namely:

- The security checkbox image is not rendering at
  https://github.com/mozilla/pdf.js/security/policy because the
  `SECURITY.md` file is apparently served differently there (because it
  does work as expected at
  https://github.com/mozilla/pdf.js/blob/master/.github/SECURITY.md),
  which causes the relative link not to work. We switch to an absolute
  link to fix the issue.
- If a security policy is defined it turns out that GitHub automatically
  adds a row to the ""New issue"" page; see
  https://docs.github.com/en/code-security/getting-started/adding-a-security-policy-to-your-repository
  where it states ""When someone creates an issue in your repository, they
  will see a link to your project's security policy"". Since we now have
  two rows at https://github.com/mozilla/pdf.js/issues/new/choose about
  the security policy, we remove our own version in favor of the
  standard GitHub-provided one.",False
81237197092bbc20387311cb266351c6a313c3ae,2024-06-24 18:57:58,Tim van der Meij,"Merge pull request #18311 from timvandermeij/security-policy

Include a security policy for PDF.js",True
8923f9a4af7730fe73e68dc0c63506d02d0d43af,2024-06-24 18:54:40,Tim van der Meij,"Merge pull request #18321 from timvandermeij/integration-test-ignored-errors

Don't ignore errors in the Jasmine suite start/end stages",True
2beae7aad6e9c89a794d3c87be21fcd5fe64e842,2024-06-24 01:05:33,Tim van der Meij,"Include a security policy for PDF.js

This makes sure that security researchers can find the required
information for reporting security vulnerabilities in a standardized
manner across GitHub repositories. Please refer to
https://docs.github.com/en/code-security/getting-started/adding-a-security-policy-to-your-repository
for more information.",False
2f3bf6f07e77438f96168efbaad381c958b107fe,2024-06-24 00:29:48,Tim van der Meij,"Don't ignore errors in the Jasmine suite start/end stages

Currently errors in `afterAll` are logged, but don't fail the tests.
This could cause new errors during test teardown to go by unnoticed.

Moreover, the integration test use a different reporting mechanism which
also handled errors differently (this is extra reason to do #12730).

This patch fixes the issues by consistently handling errors in
`suiteStarted` and `suiteDone` in both reporting mechanisms.

Fixes #18319.",False
6784124a74426f1f2e7bcf6268d4b609932c1e23,2024-06-24 00:26:59,Tim van der Meij,"Merge pull request #18320 from timvandermeij/integration-test-tabs

Fix the ""copy/paste from a tab to an other"" stamp editor integration test",True
287fd6afd4c7a5205181b98d3d247daccc254b27,2024-06-23 22:38:58,Tim van der Meij,"Fix the ""copy/paste from a tab to an other"" stamp editor integration test

This integration test contains three issues:

- The `page.bringToFront()` call is not awaited, even though it returns
  a promise (see https://pptr.dev/api/puppeteer.page.bringtofront). Note
  that in other tests we do this correctly already.
- The `page.waitForSelector()` call at the end is unnecessary because
  that exact condition is already checked at the end of the
  `waitForImage` function we call just before this line; see
  https://github.com/mozilla/pdf.js/blob/master/test/integration/stamp_editor_spec.mjs#L74.
- The pages should be closed in reversed order; please refer to the
  description in #18318 for more details.

Fixes #18318.",False
b4393a7e798eaee8f32015cbd8c9f4704a6bd894,2024-06-23 19:43:00,Tim van der Meij,"Merge pull request #18317 from timvandermeij/integration-test-separate-browser-cleanup

Close the page in the text layer caret selection integration test",True
7057142c7a7810aef7bbdda228b8b8580c275336,2024-06-23 19:42:07,Tim van der Meij,"Merge pull request #18316 from timvandermeij/integration-test-addons-xpi

Disable system addon updates for Firefox in testing mode",True
f4053c2b3e84fce7090451042193bdc01a18da87,2024-06-23 16:16:18,Tim van der Meij,"Close the page in the text layer caret selection integration test

This integration test is currently the only one that spawns a separate
browser instance. However, while it closes the browser once it's done,
it doesn't close the page (and therefore doesn't call the `testingClose`
method) like the other integration tests do.

This commit fixes this difference by closing the page before closing the
browser, thereby ensuring all regular cleanup logic gets called and we
avoid (intermittent) shutdown tracebacks in the logs. This allows
upcoming integration tests that spawn a separate browser instance to
reuse this pattern to cleanly end the test.

Given that we integrate the `closeSinglePage` code from #17962 for this
patch, @calixteman is credited as the co-author.

Co-authored-by: Calixte Denizet <calixte.denizet@gmail.com>",False
327738d02a3a84f8b94a8c001201a1f5a8e85a06,2024-06-23 15:28:55,Tim van der Meij,"Disable system addon updates for Firefox in testing mode

This commit fixes the following log line that currently shows up for
every type of tests that involve a browser:

`System addon update list error SyntaxError: XMLHttpRequest.open:
'http://%(server)s/dummy-system-addons.xml' is not a valid URL.`

If Firefox is in testing mode, the system addons update URL is
configured to a dummy URL so that it can't actually update (see for
example the same value in Marionette at
https://searchfox.org/mozilla-central/source/testing/marionette/client/marionette_driver/geckoinstance.py#109),
but this doesn't stop Firefox from trying to update, and when it does
it logs this line because the URL is obviously invalid.

Hence this patch which disables system addon updates altogether so
Firefox doesn't attempt to use the dummy URL anymore. The browser
updates are all managed by Puppeteer, and regular updates have already
been disabled too (see
https://github.com/puppeteer/puppeteer/blob/6937a76f0a442eca0c6381587b47298793798913/packages/browsers/src/browser-data/firefox.ts#L302-L303).",False
c18a987f4ec6d20e5e58eb44ae944c0c5912854b,2024-06-22 23:15:24,Tim van der Meij,"Merge pull request #18313 from Snuffleupagus/l10n-destroy

Try to shutdown Fluent ""more"" when closing the viewer during testing",True
658b5fab5dffaf2d1a2006fb4573f2f910282452,2024-06-22 23:02:25,Tim van der Meij,"Merge pull request #18312 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
649258706633281603bc442f3b2b4dba2fd3e165,2024-06-22 20:10:12,Jonas Jenwald,"Try to shutdown Fluent ""more"" when closing the viewer during testing

Even with PR 18280 fixed, we still *occasionally* see l10n-related errors when closing the integration-tests on the bots.",False
a89c7006072e3ef9f9fcf622661e4d4b86ab6f72,2024-06-21 20:41:30,Tim van der Meij,Update translations to the most recent versions,False
3b9208b8b6727ab2bb43210d241b7baa31478905,2024-06-21 20:39:21,Tim van der Meij,Update dependencies to the most recent versions,False
f9ff613e56dca65b95ce9e10d13350008b523979,2024-06-21 19:43:54,Tim van der Meij,"Merge pull request #18303 from bootleq/findbar-state-entire-word

Expose entireWord in updateFindControlState",True
ba0e732e32d2e52361b5245575ef13c121585b55,2024-06-21 19:30:59,Tim van der Meij,"Merge pull request #18308 from nicolo-ribaudo/patch-1

Use the new formatted issue templates",True
1480e6778bc77783c94a36f155372d05bcda3d15,2024-06-21 19:12:31,Nicolò Ribaudo,Use the new formatted issue templates,False
890c567eca9e08b338aaa7f91ef7467354547760,2024-06-21 10:42:59,bootleq,"Expose entireWord in updateFindControlState

Allow apps with supportsIntegratedFind to better monitor the find state.

A recognized use case is the Firefox findbar, its ""not found"" sound must
consider `entireWord` and only make noise when it is off.

See related implementation in
https://hg.mozilla.org/mozilla-central/rev/16b902cbcf26

This change can help if we have to move the implementation from cpp to jsm.",False
a081dd25ebf60cc61aca979927a98918abdaf54d,2024-06-20 20:22:29,calixteman,"Merge pull request #18306 from calixteman/bug1903731

Always use DW if it's a number for the font default width (bug 1903731)",True
1cf19e907d39b784daa21fb35b24b349fae47ff4,2024-06-20 19:25:36,Tim van der Meij,"Merge pull request #18302 from Snuffleupagus/testingClose-findbar-close

Close `PDFFindBar` when closing the viewer during testing",True
d09aed87d0ee0945c90bd3debc3580dc8e8a7a74,2024-06-20 19:05:22,calixteman,"Merge pull request #18296 from calixteman/bug1903589

[Editor] Correctly set the accessibility data when copying & pasting a stamp with an alt text (bug 1903589)",True
8c9a665728aa88cde5cc1e692963112e6932ddd8,2024-06-20 19:03:34,Calixte Denizet,Always use DW if it's a number for the font default width (bug 1903731),False
e76242d4ea4f82e2f5847b3f783c02e63aaba88b,2024-06-20 17:23:26,Jonas Jenwald,"Merge pull request #18304 from Snuffleupagus/issue-18298

Don't throw if there's not enough data to get the header in `FlateStream` (issue 18298)",True
67f9756fcec353893707df94c71792cba02de7a2,2024-06-20 17:22:58,Calixte Denizet,[Editor] Correctly set the accessibility data when copying & pasting a stamp with an alt text (bug 1903589),False
9afd3a5b2ff2e19972710453fabe914eecd96d5f,2024-06-20 17:12:54,calixteman,"Merge pull request #18301 from calixteman/no_signal

[Editor] Don't create an observer for the stamp annotation after the viewer has been closed",True
3fae2d71f624187f6fd3eb4fb2dbd40c7fd1ffef,2024-06-20 16:33:17,Jonas Jenwald,"Don't throw if there's not enough data to get the header in `FlateStream` (issue 18298)

Following in the footsteps of PR 17340.",False
02c03154b354f58e07d9bad8cf279c14a8f99b29,2024-06-20 15:21:21,Jonas Jenwald,"Close `PDFFindBar` when closing the viewer during testing

By closing `PDFFindBar` we also disconnect the `ResizeObserver`, since we've seen at least one case where that's running during shutdown: http://54.193.163.58:8877/91c40554d1b07c0/output.txt",False
7d7ae34e34f4b8863277e1e5170032d00ba83ab5,2024-06-20 14:22:28,Calixte Denizet,[Editor] Don't create an observer for the stamp annotation after the viewer has been closed,False
3e1d7798596df389d2dd3d2df1fabe76a3bd4543,2024-06-19 20:17:09,Tim van der Meij,"Merge pull request #18218 from nicolo-ribaudo/test-maxCanvasPixels

Respect `maxCanvasPixels` when computing canvas dimensions",True
94cbe9ec23f989927e8b091425ede216f51fe928,2024-06-19 19:52:12,Jonas Jenwald,"Merge pull request #18289 from Snuffleupagus/app-testingClose

Add a new helper, in the viewer, to close everything during testing",True
de23bb9b82b5d63cd591caeddbc96ed13e4827ef,2024-06-19 18:53:16,Nicolò Ribaudo,"Respect `maxCanvasPixels` when computing canvas dimensions

Ensure that we never round the canvas dimensions above `maxCanvasPixels`
by rounding them to the preceeding multiple of the display ratio rather
than the succeeding one.",False
12692d2e393bff3946131cc07fb89786ff59cd15,2024-06-19 18:52:53,Nicolò Ribaudo,"Add test for CSS-only zoom above maxCanvasPixels

This commit introduces a test to ensure that:
- When zooming below the maxCanvasPixels limit, the canvas is rendered
  with the correct size (the two sides are multiplied by the zoom factor).
- When zooming above the maxCanvasPixels limit, the canvas size is capped.",False
b7d194f3c9ffe0e8eb3b0e86e156f373e151c001,2024-06-19 17:56:20,Tim van der Meij,"Merge pull request #18292 from Snuffleupagus/tweakWebpackOutput-improve-regex

Update the regular expression in `tweakWebpackOutput` to support minified-legacy builds (issue 18290)",True
764e67e861704484423a9ce3051acb98553992e7,2024-06-19 17:31:49,Tim van der Meij,"Merge pull request #18278 from timvandermeij/updates

Update dependencies to the most recent versions and upgrade `eslint-plugin-unicorn` to version 54.0.0",True
c771ac81cd5d4cfca7b246d216af6db8b419e989,2024-06-19 17:18:08,Jonas Jenwald,"Add a new helper, in the viewer, to close everything during testing

This has two advantages, as far as I'm concerned:
 - The tests don't need to manually invoke multiple functions to properly clean-up, which reduces the risk of missing something.
 - By collecting all the relevant clean-up in one method, rather than spreading it out, we get a much better overview of exactly what is being reset.",False
c53f71a7d2be201006dbef5d5008d7391b349aff,2024-06-19 16:06:38,calixteman,"Merge pull request #18284 from calixteman/editor_signal

[Editor] Remove the various listeners when destroying the editor manager",True
df058edf2283c5c0fa255a5db5cb45b089a8c3d6,2024-06-19 15:51:10,Jonas Jenwald,Update the regular expression in `tweakWebpackOutput` to support minified-legacy builds (issue 18290),False
390afcb6851e0d54820ce205cfe2f43163f18335,2024-06-19 14:03:52,Calixte Denizet,[Editor] Remove the various listeners when destroying the editor manager,False
9dbe4c246b1bbb08c423f3a98b7b25ce1e2c240f,2024-06-19 02:23:16,calixteman,"Merge pull request #18286 from calixteman/call_sandbox

Avoid to call a function in the js sandbox when it has been destroyed",True
4bdbf4bb3d258d55937f380bec0bd48641afda3c,2024-06-19 02:00:21,Calixte Denizet,Avoid to call a function in the js sandbox when it has been destroyed,False
58dd289971bdc25bbfa717db3e1142c6f7d64ea6,2024-06-19 01:19:38,Tim van der Meij,"Upgrade `eslint-plugin-unicorn` to version 54.0.0

This is a major version bump, but the changelog at
https://github.com/sindresorhus/eslint-plugin-unicorn/releases/tag/v54.0.0
doesn't indicate any breaking changes that should impact us.",False
c77dbe04966111b8b80383e8befa8d4f9438a346,2024-06-19 01:19:34,Tim van der Meij,Update dependencies to the most recent versions,False
4b5d5a557c9177b93f15ceb77e3c1e9df7f8196f,2024-06-19 01:17:06,Tim van der Meij,"Merge pull request #18280 from calixteman/issue18279

Pause l10n (i.e. disconnect the mutation observer in fluent) when closing the viewer",True
34389d4e47c3bfdd1e26b9aca3be4501dcdfe792,2024-06-19 00:38:47,Calixte Denizet,Pause l10n (i.e. disconnect the mutation observer in fluent) when closing the viewer,False
0d8828f93dab48568253d778ed1fb885aaddeb2d,2024-06-19 00:25:27,Tim van der Meij,"Merge pull request #18282 from Snuffleupagus/issue-18274

Don't save modified documents, when running tests, upon closing the viewer (issue 18274)",True
9e811b97b12a1f9722a058ba2f009566fe30fbb9,2024-06-18 23:35:11,Jonas Jenwald,"Don't save modified documents, when running tests, upon closing the viewer (issue 18274)",False
c5213513383fb084a56e56f45e8b8330b47e05aa,2024-06-18 23:09:59,Tim van der Meij,"Merge pull request #18260 from calixteman/dumpio

Enable dumpio when running the tests in order to have some useful debug data",True
2f462a8afe9e2d03d0ae376ed4ac0696c36a19b3,2024-06-18 23:04:59,Tim van der Meij,"Merge pull request #18277 from calixteman/issue18276

[Editor] Fix intermittent failure in integration test when highlighting with the keyboard",True
45762c2f0ed3983a1d541573aaade815ddb48827,2024-06-18 22:21:25,calixteman,"Merge pull request #18275 from calixteman/fix_stamp_css_odd_spread

[Editor] Set the canvas in the stamp editor at the right position in odd spread mode",True
acf8600a3d3fb49ba2a108eef12d8248900371cc,2024-06-18 22:14:29,Calixte Denizet,[Editor] Set the canvas in the stamp editor at the right position in odd spread mode,False
4cc77f1470754a01f0f6aa1f2897c69afc43896d,2024-06-18 21:59:25,Calixte Denizet,[Editor] Fix intermittent failure in integration test when highlighting with the keyboard,False
701325896a42333f05001b0cef602cd7bfc8787b,2024-06-18 21:41:19,Jonas Jenwald,"Merge pull request #18273 from Snuffleupagus/addLocallyCachedImageOps

Add a helper function for handling locally cached image data (PR 18269 follow-up)",True
3c02dc6d1d93955ada6888252f01d11714f6468c,2024-06-18 21:33:26,Calixte Denizet,Enable dumpio when running the tests in order to have some useful debug data,False
604e8977e9432dbae55ba375c01ed0bed7c25932,2024-06-18 20:50:40,Jonas Jenwald,"Add a helper function for handling locally cached image data (PR 18269 follow-up)

This avoids having to duplicate the same exact code multiple times.",False
4c041586fb4c314a479f464096f5227003202935,2024-06-18 20:25:53,calixteman,"Merge pull request #18271 from calixteman/clean_before_closing

Clean up before closing the tab in integration tests",True
4c82438e61ed74148d0868184f7e6ebffe826bc5,2024-06-18 18:37:07,Tim van der Meij,"Merge pull request #18269 from Snuffleupagus/issue-18259

Ensure that dependencies are added to the operatorList for locally cached images (issue 18259)",True
c07dd171620f10ba3ebf6e4ce697d7989509c599,2024-06-18 18:23:45,Tim van der Meij,"Merge pull request #18270 from Snuffleupagus/issue-18264

Only use the l10n fallback bundle when normal ftl-file fetching failed (issue 18264)",True
43be717ce3a8f07cc15b62201071e4e56235a80e,2024-06-18 17:53:19,Calixte Denizet,Clean up before closing the tab in integration tests,False
22ca7d52d397e27ede742f4a6a2b7966a8b2c7a5,2024-06-18 15:55:53,Jonas Jenwald,Ensure that dependencies are added to the operatorList for locally cached images (issue 18259),False
0981716bfa61785dde7a12e0b8825da0e6fab5a6,2024-06-18 15:24:49,Jonas Jenwald,Only use the l10n fallback bundle when normal ftl-file fetching failed (issue 18264),False
06800cd966111f7262d3334dfb68c3765bc92740,2024-06-17 01:17:34,calixteman,"Merge pull request #18255 from calixteman/disable_hwa_only_for_mc

Only disable HWA in m-c build and for local dev",True
56c396556fe516e26674cc0613eb9c0528d7ec93,2024-06-17 00:14:26,Tim van der Meij,"Merge pull request #18257 from calixteman/update_openjpeg_1

Update jpx decoder",True
ff44c3be1f53be3cba93b9db5811f2bb3b5bf065,2024-06-17 00:09:38,Tim van der Meij,"Merge pull request #18258 from timvandermeij/release-reproducible

Implement reproducibility for the release builds",True
44e0fae9d1bb03469fe2758b3d387dc54079f182,2024-06-17 00:02:55,Tim van der Meij,"Implement reproducibility for the release builds

The release builds are currently not reproducible because ZIP files
record the modification date of files generated during the build
process, meaning that two builds from identical source code, made
at different times, result in different output.

This is undesirable because it makes detecting differences in the output
harder, for instance recently during the Gulp 5 efforts, because the
modification date differences are irrelevant and could obscure actually
important differences in the output during e.g. code changes. Moreover,
reprodicibility of build artifacts has become increasingly important;
please refer to the Reproducible Builds initiative at
https://reproducible-builds.org (note the ""Why does it matter?"" section
specifically) and https://reproducible-builds.org/docs/timestamps which
further explains the problem of timestamps in build artifacts.

This commit fixes the issue by configuring the ZIP file creation to use
the (fixed) date of the last Git commit for which the release is being
made. With this the build is fully reproducible so that identical source
code builds result in bit-by-bit identical output artifacts.

To improve readability we convert the compression method to take a
parameter object and use template strings where useful.",False
7255b75ee97ed243fe299cfd0dd5f1d6e0d90795,2024-06-16 22:35:26,Calixte Denizet,"Update jpx decoder

The decoder has been updated to reduce the number of copies after
having decoded an image:
https://github.com/mozilla/pdf.js.openjpeg/commit/b4ba3b3090347e5efe663f60d61e49f278bfc283",False
7b0c0347d051366c1a35d317cd47818b3a55509d,2024-06-16 20:56:26,Jonas Jenwald,"Merge pull request #18254 from Snuffleupagus/force-save

Ensure that saving, in the viewer, works for partially loaded documents",True
ee94391794da92d7b75044ea97903411cb720828,2024-06-16 19:38:56,Tim van der Meij,"Merge pull request #18256 from timvandermeij/jsdoc-reproducible

Implement reproducibility for the JSDoc builds",True
9d0002555df08addf99a058519bd8ce692ab8683,2024-06-16 18:40:34,Tim van der Meij,"Implement reproducibility for the JSDoc builds

The JSDoc builds are currently not reproducible because a timestamp is
included in the output, meaning that two builds from identical source
code, made at different times, result in different output.

This is undesirable because it makes diffing the output difficult, for
instance recently during the Gulp 5 efforts, because the timestamp
differences are irrelevant and could obscure actually important
differences in the output during e.g. code changes. Moreover,
reprodicibility of build artifacts has become increasingly important;
please refer to the Reproducible Builds initiative at
https://reproducible-builds.org (note the ""Why does it matter?"" section
specifically) and https://reproducible-builds.org/docs/timestamps which
further explains the problem of timestamps in build artifacts.

This commit fixes the issue by configuring JSDoc to not include the
timestamps in the output. It's not relevant for end users and without it
the build is fully reproducible so that identical source code builds
result in bit-by-bit identical output artifacts.

Note that this option sadly can only be set via a configuration file,
and not via the command line parameters like we used to have, so for
consistency we also move the other options into the configuration file
so they are all in one place and the Gulpfile becomes a bit simpler.",False
f8acd33527d428980336fdeecc5d061a96069c31,2024-06-16 15:47:10,calixteman,"Merge pull request #18253 from calixteman/bug1539074

Compute correctly the unitsPerEm value from the fontMatrix when converting a font (bug 1539074)",True
52a06e64f622978993c0ac8691861862faf0bda8,2024-06-16 15:44:33,Calixte Denizet,"Only disable HWA in m-c build and for local dev

This way, we keep pdf.js working as before except for Firefox.",False
f4912db2ae58cec0c2e9b6e302f0ae6e6c15d252,2024-06-15 21:30:18,Jonas Jenwald,"Remove the `_ensureDownloadComplete` helper method in `web/app.js`

After the previous commit this method has only a single call-site, hence we can inline the needed part of that check directly in `PDFViewerApplication.download` instead.",False
7c5e9cf8be1c833ecaafbe963959755a53b6556e,2024-06-15 21:28:58,Jonas Jenwald,"Ensure that saving, in the viewer, works for partially loaded documents

Currently saving a modified PDF document may fail *intermittently*, if it's triggered before the entire document has been downloaded.
When saving was originally added we only supported forms, and such PDF documents are usually small/simple enough for this issue to be difficult to trigger. However, with editing-support now available as well it's possible to modify much larger documents and this issue thus becomes easier to trigger.

One way to reproduce this issue *consistently* is to:
 - Open http://localhost:8888/web/viewer.html?file=/test/pdfs/pdf.pdf#disableHistory=true&disableStream=true&disableAutoFetch=true
 - Add an annotation on the first page, it doesn't matter what kind.
 - Save the document.
 - Open the resulting document, and notice that with the `master` branch the annotation is missing.",False
d1452206d9a381a10bc7ccc48bdfb489fb810f0e,2024-06-15 21:21:34,Calixte Denizet,Compute correctly the unitsPerEm value from the fontMatrix when converting a font (bug 1539074),False
2effc96021ccf78ba0ae11796cfe3379c859bbbd,2024-06-15 19:16:44,Tim van der Meij,"Merge pull request #18250 from Snuffleupagus/api-misc-fixes

Improve some old code in the `src/display/api.js` file",True
ebb2db7be1c03906a030d395228dae88c0994b0d,2024-06-15 19:04:27,Tim van der Meij,"Merge pull request #18251 from timvandermeij/docs-api-inline

Include the generated API documentation directly on the API page",True
e30dda526148bcc128b50a4cbd0754dbd7f64e79,2024-06-15 18:43:01,Tim van der Meij,"Include the generated API documentation directly on the API page

This should make the API documentation slightly quicker to access for
users by removing an extra click. Moreover, it makes the API
documentation blend in with the rest of the website/theme (one of the
points in #6526).

Fixes #18249.",False
f3f88eecb447bd33d1c0040954c649f3f6565b50,2024-06-15 18:05:32,Jonas Jenwald,"Use an `AbortController` to remove the temporary ""error"" handler for the worker",False
2d0e08f1c86e8ced259bf175e7ee48580dfd843c,2024-06-15 18:05:30,Jonas Jenwald,"Introduce a helper method for resolving the `PDFWorker` promise

This avoids having to repeat the same code multiple times, since besides resolving the promise we also need to send the ""configure"" message to the worker-thread.",False
8d4456172b795d61ff4dcfbf8d7cbad87e78856f,2024-06-15 18:05:28,Jonas Jenwald,"Reduce duplication when handling the ""test"" message from the worker

The feature-testing on the worker-thread has been simplified in previous pull requests, which means that we can simplify this main-thread handler as well.",False
0a36b667e4ddb5c5e9b3ba0589f9e0ba9905d02f,2024-06-15 18:05:12,Jonas Jenwald,"Use an early return in `PDFWorker.prototype._initialize` when workers are disabled

This helps reduce overall indentation in the method, thus leading to slightly less code.
Also, remove an old comment referring to Chrome 15 since that's no longer relevant now.",False
d6612b34274e88e72b699d62093d25cc53ca91f2,2024-06-15 18:05:10,Jonas Jenwald,"Remove some now redundant validation in `getDocument`

Given that we now check/validate all options properly this old code can be simplified.",False
831a526c10bf06ceb5ff1cacf4a1af39f62132ad,2024-06-15 15:49:35,Tim van der Meij,"Merge pull request #18248 from timvandermeij/metalsmith

Replace Wintersmith with Metalsmith",True
ce7cdf46704222b149970bdd843677a185988f1f,2024-06-15 00:07:13,Tim van der Meij,"Replace Wintersmith with Metalsmith

Wintersmith is no longer maintained given that the most recent version
is from six years ago, and all vulnerabilities that NPM reports
originate from Wintersmith's dependencies. Metalsmith, and its plugins,
on the other hand have recently had releases and don't have known
vulnerabilities. In fact, the number of reported vulnerabilities by NPM
even goes down to zero with this patch applied.

This commit therefore replaces Wintersmith with Metalsmith by providing
a transparent drop-in replacement, in a way that requires the least
amount of changes to the code and the generated output.

Note that this patch does update our versions of jQuery, Bootstrap and
the Highlight.js theme because the previous versions were very outdated
and didn't work correctly with Metalsmith. Moreover, those old versions
contained vulnerabilities that are hereby fixed.

Fixes #18198.",False
7279ce6bad2fb2b4592dec8eec15955b528f22d0,2024-06-14 23:56:12,Tim van der Meij,"Merge pull request #18247 from timvandermeij/readme

Don't recommend installing `gulp-cli` globally in the README and on the website",True
0348559ef8214cfa2813b16c25a2dbf1e2c61851,2024-06-14 22:11:44,Tim van der Meij,"Don't recommend installing `gulp-cli` globally in the README and on the website

It's recommended to always install dependencies locally in the project
folder because global dependencies can easily conflict with other
projects and, because they are not managed by the project, diverge from
versions defined in e.g. `package.json`. Previously we installed
`gulp-cli` globally because at the time we lacked a convenient mechanism
to use Gulp otherwise, but nowadays NPM provides the `npx` command for
that purpose and recommends using it over global installations (see
https://docs.npmjs.com/downloading-and-installing-packages-globally
and PR #17489 that provided the ground work for using it).

This commit therefore updates our README and website to no longer recommend
installing `gulp-cli` globally but instead installing it locally from the
already existing entries in `package.json` like all other dependencies
we use. Not only does this remove the special-casing for `gulp-cli`
which simplifies the installation procedure, it also ensures that the
version ranges provided in `package.json` are respected.

This change is similar to the change in commit 92de2b7.

Fixes #18232.
Fixes 98ef8a1.",False
aa68b8b4b3c4f6ba22ae30f7234872936178578a,2024-06-14 21:55:36,Tim van der Meij,"Merge pull request #18234 from calixteman/improve_date_parsing

Improve date parsing in the js sandbox",True
f9693b4d16f1797a5c1423d748a221b1fb3a5c64,2024-06-14 21:53:03,Tim van der Meij,"Merge pull request #18244 from Snuffleupagus/CSS-copyAll

Improve how the wait-cursor is toggled when copying all text",True
f00152bf922bd5e9448a6ea379477e6e6ba2d20a,2024-06-14 21:50:44,Tim van der Meij,"Merge pull request #18246 from calixteman/fix_js_error

Fix an query with an empty selector in integration tests",True
c14c3cfc9ff7612ef53170cea97710977abcc391,2024-06-14 20:51:50,Calixte Denizet,"Improve date parsing in the js sandbox

If for example dd:mm is failing we just try with d:m which is equivalent
to the regex /d{1,2}:m{1,2}/. This way it allows the user to forget the
0 for the first days/months.",False
6d1f7e806e5df3a5dcc18145fc0f8db668a2896c,2024-06-14 20:13:41,Calixte Denizet,"Fix an query with an empty selector in integration tests

In looking the logs from Chrome bidi tests I noticed a js syntax error
which is fixed thanks to this patch.",False
e3caa3c6eeda90099dd03b451b6b4788746455b3,2024-06-14 14:18:18,calixteman,"Merge pull request #18243 from calixteman/disable_ui_when_saving

Display a wait cursor when saving",True
97686c410cdf8f0de1573d7a976c8b2130b490b1,2024-06-14 13:36:27,Jonas Jenwald,"Improve how the wait-cursor is toggled when copying all text

 - Use a CSS rule to display the wait-cursor during copying. Since copying may take a little while in long documents, there's a theoretical risk that something else could change the cursor in the meantime and just resetting to the saved-cursor could thus be incorrect.

 - Remove the `interruptCopyCondition` listener with an AbortController, since that's slightly shorter code.",False
5ae936eb87771d64e896f38a3ed5ef5463a58f4b,2024-06-14 02:24:52,Calixte Denizet,"Display a wait cursor when saving

When the document is a bit long to save (for example in modifying a large document)
we must have something indicating that pdf.js is doing something.",False
47791a4c8088582d3f3374beab7e2af4d35153fd,2024-06-13 19:14:42,Tim van der Meij,"Merge pull request #18236 from Snuffleupagus/rm-downloadUrl

Remove the `DownloadManager.downloadUrl` method",True
f8ffc5baebec6ff073600e64ba83395b87537ab3,2024-06-12 22:57:07,calixteman,"Merge pull request #18238 from calixteman/disable_gpu

Add an option to enable/disable hardware acceleration (bug 1902012)",True
ff6180a4c94dd35c2c2e3c39f0a06835d3fe2ee6,2024-06-12 22:11:07,Calixte Denizet,Add an option to enable/disable hardware acceleration (bug 1902012),False
42999e5bef256e15aaf73750cc31707783ba830a,2024-06-12 16:57:45,Jonas Jenwald,"Remove the `DownloadManager.downloadUrl` method

This method has only a single call-site in the viewer, since it's used as a fallback, and the functionality can be moved into the `DownloadManager.download` method instead.",False
341ff40e74259d304665efba997484f819ef2d0d,2024-06-11 20:14:02,calixteman,"Merge pull request #18231 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
e0a01328f361bf981e6bde0e1831ede0001cac17,2024-06-11 18:43:06,Tim van der Meij,Update translations to the most recent versions,False
8273dcaa81790a4bb1008c945c17fe3d694aae8a,2024-06-11 18:41:07,Tim van der Meij,"Fix vulnerabilities in dependency versions

This patch is generated automatically using `npm audit fix`.",False
866b9482261d8de435fcda65f4b4db65945a94f3,2024-06-11 18:40:22,Tim van der Meij,Update dependencies to the most recent versions,False
361b54ec137f0cd6200b41294a0725b3df427e2e,2024-06-11 01:17:34,calixteman,"Merge pull request #18228 from calixteman/bug1899804

Don't display annotations with a PMD (barcode stuff) entry (bug 1899804)",True
e3faa40f0fabe52b3a2b82464775ec09c2840f03,2024-06-11 00:31:37,Calixte Denizet,"Don't display annotations with a PMD (barcode stuff) entry (bug 1899804)

There's no specification for that (even if it's possible to have an idea from
the xfa specs) so we just want to hide them in order to avoid to display something
wrong.",False
bb73d2a92240a5177268a652f400a98805f83682,2024-06-08 17:52:18,calixteman,"Merge pull request #18219 from calixteman/jpx_fix_big_image

Update our OpenJPEG decoder in order to fix a malloc failure due to big image (bug 1901253)",True
61398066b99749dc76620deba0f2bcf80fac38ab,2024-06-07 21:08:35,Calixte Denizet,"Update our OpenJPEG decoder in order to fix a malloc failure due to big image (bug 1901253)

It has been fixed in:
https://github.com/mozilla/pdf.js.openjpeg/commit/5ef68089b5349aca9fe735e961cb396e47a3c30f",False
c770e94e362feddc5f64e683f8014a3dc0711f4f,2024-06-07 19:10:14,calixteman,"Merge pull request #18214 from calixteman/bug1900907

[Editor] Support dragging & dropping images on a pdf (bug 1900907)",True
412e03e576fc7f91fd1c9457d56386b0297c6fd2,2024-06-07 17:56:01,Calixte Denizet,[Editor] Support dragging & dropping images on a pdf (bug 1900907),False
b557fba11881d1d46aeae8ee29762f8de51d3fff,2024-06-07 17:46:07,Tim van der Meij,"Merge pull request #18217 from Snuffleupagus/inline-finishRendering

Inline the `#finishRendering` helper in `TextLayerBuilder.prototype.render`",True
593ce96834af099cc5c3af0925c5ee6a5cb3b75c,2024-06-07 17:44:48,Tim van der Meij,"Merge pull request #18216 from Snuffleupagus/download-data

Change `DownloadManager.download` to use Uint8Array-data",True
f7cbd7d16b46c79af37484248af772a704063da1,2024-06-07 17:02:28,Jonas Jenwald,"Inline the `#finishRendering` helper in `TextLayerBuilder.prototype.render`

This helper method is simpler/shorter than it originally was[1] and with recent refactoring so is the `render`-method, hence we can just inline this code now.

---
[1] It used to e.g. dispatch the ""textlayerrendered"" event.",False
66e189c9aad73e3dc47b31f4903a47b6cf06ce67,2024-06-07 16:53:02,Jonas Jenwald,"Change `DownloadManager.download` to use Uint8Array-data

Part of this code is really old and pre-dates general availability of things such as `Blob` and `URL.createObjectURL`. To avoid having to duplicate the Blob-creation in the viewer, we can move this into `DownloadManager.download` instead.

Also, remove a couple of unnecessary `await` statements since the methods in question are synchronous.",False
6a71f692bf765015f1ac3574dd5c95a5b4f3f93a,2024-06-05 00:57:35,calixteman,"Merge pull request #18205 from calixteman/openjpeg_bsd2

Change openjpeg.js license from Apache 2 to BSD 2-clause",True
e7749443a7c9ddfe0a5fb0c431bf7f9a7eec4c59,2024-06-05 00:52:48,Calixte Denizet,Change openjpeg.js license from Apache 2 to BSD 2-clause,False
21e622769b59717575619a57f2e4448497ac78a9,2024-06-04 00:51:52,calixteman,"Merge pull request #18204 from calixteman/issue16782

Fix decoding of JPX images having an alpha channel",True
196affd8e06148041b885ce63df260e4dab5f8e1,2024-06-03 23:38:11,Calixte Denizet,"Fix decoding of JPX images having an alpha channel

When an image has a non-zero SMaskInData it means that the image
has an alpha channel.
With JPX images, the colorspace isn't required (by spec) so when we
don't have it, the JPX decoder will handle the conversion in RGBA
format.",False
5c51d5622342261259a40fcc86b792ac2ec4bf7c,2024-06-02 19:38:19,calixteman,"Merge pull request #18167 from calixteman/decompress_image

Decompress when it's possible images in using DecompressionStream",True
9654ad570aa3a36e6a507f3e821aacb763d94b31,2024-06-02 17:30:05,Calixte Denizet,"Decompress when it's possible images in using DecompressionStream

Getting images is already asynchronous, so we can use this opportunity
to use DecompressStream (which is async too) to decompress images.",False
53dfb5a6baebe7ceff49f702366ae55963cd4f17,2024-06-01 19:46:31,Tim van der Meij,"Merge pull request #18197 from timvandermeij/gulp-5

Upgrade `gulp` to version 5.0.0",True
309d940c3a64e987459010b82ce8feb757feee6c,2024-05-31 19:33:31,calixteman,"Merge pull request #18189 from calixteman/bug1895050

Switch to page-scrolling mode when the pdf has more than 10000 pages (bug 1895050)",True
018649f13b339597aeb74aec2d49241e481f46c1,2024-05-31 19:05:26,Calixte Denizet,Switch to page-scrolling mode when the pdf has more than 10000 pages (bug 1895050),False
d25b52702a6fc6021a5a4ef5e0cef247992768eb,2024-05-31 18:29:11,Tim van der Meij,"Upgrade `gulp` to version 5.0.0

This is a major version bump, and the changelog at
https://github.com/gulpjs/gulp/releases/tag/v5.0.0 indicates one
breaking change that impacts us, namely that streams are now by default
interpreted/transformed to UTF-8 encoding. This breaks `gulp.src` calls
that work on binary files such as images or CMaps, but is fortunately
easy to fix for us by disabling re-encoding for all `gulp.src` calls
(see https://github.com/gulpjs/gulp/issues/2764#issuecomment-2063415792
for more information). This restores the previous behavior of copying
the files as-is without Gulp performing any transformations to it, which
is what we want because Gulp is only used for bundling and we make sure
that the source files have the right encoding.",False
4d9c25a41aa50f1fcf8b74399d4cdc596b75c23c,2024-05-31 02:21:05,calixteman,"Merge pull request #18193 from calixteman/rm_observer

Disconnect the resize observer and remove scroll listener when unbinding window events",True
4430b6b703d4567c2d9bc584327c7ed0f5e8e086,2024-05-31 01:39:52,Calixte Denizet,Disconnect the resize observer and remove scroll listener when unbinding window events,False
ea34e5ccf6fdc7b3efcf6eba5b937dc7d63c5961,2024-05-30 22:35:56,Tim van der Meij,"Merge pull request #18192 from calixteman/bump_4.4

Bump library version to 4.4",True
648a2d8057214472a5f10c245bb84ba86a97991b,2024-05-30 22:26:13,Calixte Denizet,Bump library version to 4.4,False
fdb3617e0f7ebbefce9a65a87971251e92653d07,2024-05-30 21:55:50,calixteman,"Merge pull request #18163 from calixteman/simplify_list_points

[api-minor] Simplify how the list of points are structured",True
0ac4b34c667f65313b350e7c28e4aa1608ff6374,2024-05-30 19:16:07,Tim van der Meij,"Merge pull request #18183 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
6fa98ac99ff77d9fce9670628a369e7be9e225d4,2024-05-30 19:06:15,Calixte Denizet,"[api-minor] Simplify how the list of points are structured

Instead of sending to the main thread an array of Objects for a list of points (or quadpoints),
we'll send just a basic float buffer.
It should slightly improve performances (especially when cloning the data) and use slightly less memory.",False
ea0d2126eafc0345026b29bc8b54a90fef9b5350,2024-05-28 22:55:46,Tim van der Meij,Update translations to the most recent versions,False
85c79422cfe7dc2ed7464ee949e0645a187bd124,2024-05-28 22:54:24,Tim van der Meij,Update dependencies to the most recent versions,False
24e12d515dce2f11b392410dd6e6e9926270ac65,2024-05-28 22:18:09,Tim van der Meij,"Merge pull request #18182 from timvandermeij/bump

Bump the stable version in `pdfjs.config`",True
fcea7e7b4b4a2d3f31276077b3c3835197ad1fa0,2024-05-28 22:14:56,Tim van der Meij,Bump the stable version in `pdfjs.config`,False
0cec644372c38756474eb45c4e2aa0058960464a,2024-05-28 20:09:06,Jonas Jenwald,"Merge pull request #18179 from nicolo-ribaudo/zooming-utilities

[api-minor] Simplify API to implement zoom in custom viewers",True
027ada81a7f962f97a5b697dc0aa59b5729a75ce,2024-05-28 20:08:52,Tim van der Meij,"Merge pull request #18170 from Snuffleupagus/TextLayerBuilder-rm-setTextContentSource

[api-minor] Remove the `setTextContentSource` method in `TextLayerBuilder` (PR 18104 follow-up)",True
b7933d8750835d5743c4aa724b408701ded6588f,2024-05-28 19:49:47,Nicolò Ribaudo,"Add `origin` parameter to `updateScale`

This parameter allows defining which point should remain
fixed while scaling the document. It can be used, for example,
to implement ""zoom around the cursor"" or ""zoom around
pinch center"".

The logic was previously implemented in `web/app.js`, but
moving it to the viewer scaling utilities themselves makes it
easier to implement similar zooming functionalities in
other embedders.",False
ee545930ea3175fe900a34a56e17a82500462724,2024-05-28 19:07:51,Tim van der Meij,"Merge pull request #18171 from Snuffleupagus/move-pendingTextLayers

Don't register a pending `TextLayer` until `render` is invoked (PR 18104 follow-up)",True
161c7045f608fb8db320186d0265ba55a9e709bd,2024-05-28 17:32:39,Nicolò Ribaudo,"Unify `increaseScale`/`decreaseScale` logic as `updateScale`

`updateScale` receives a `drawingDelay`, a `scaleFactor` and/or a number of `steps`.
If `scaleFactor` is a positive number different from `1` the current scale is multiplied by
that number. Otherwise, if `steps` if a positive integer the current scale is multiplied by
`DEFAULT_SCALE_DELTA` `steps` times. Finally, if `steps` is a negative integer, the
current scale is divided by `DEFAULT_SCALE_DELTA` `abs(steps)` times.",False
aac738c80511ad0d36d180741368b490d48990de,2024-05-28 17:06:05,Tim van der Meij,"Merge pull request #18169 from Snuffleupagus/worker-shorter-code

Slightly shorten some worker-thread code",True
401a1d4a34aa69d1876b2ccf240d43f513f78a90,2024-05-28 16:58:22,Tim van der Meij,"Merge pull request #18161 from Snuffleupagus/types-ES2022

Target ES2022 when building the TypeScript definitions (issue 17932)",True
95a7de9f986c449cb949d39af948dbe97f60948e,2024-05-28 14:56:49,calixteman,"Merge pull request #18174 from calixteman/make_dialog_css

Move the dialog css stuff in its own file",True
697255d7cc0110c330bbc75a93b9b02742dbdeac,2024-05-28 01:55:18,Calixte Denizet,"Move the dialog css stuff in its own file

In order to share common parts between different dialogs, this patch
aims to slightly refactor the css in making it more generic.
This way it'll simplify adding a new dialog (we want to add a new one when
leaving an unsaved document).",False
4bdc75f18db3c83bc01abfab97d2727e21f41272,2024-05-27 15:30:25,calixteman,"Merge pull request #18165 from calixteman/integrationtest_switch_foo

Simplify the integration test in adding a function to turn on/off an editing tool",True
b6b02ccff60456637e9c13dfaa95ff1e0e821453,2024-05-27 15:03:52,Calixte Denizet,Simplify the integration test in adding a function to turn on/off an editing tool,False
f2e7eee00ed60560fbd895da1b26db732194736d,2024-05-26 22:08:40,Jonas Jenwald,"Don't register a pending `TextLayer` until `render` is invoked (PR 18104 follow-up)

After the re-factoring in PR 18104 there's now a *theoretical* risk that a pending `TextLayer` is never removed, which we can avoid by not registering it until `render` is invoked.
Note that this doesn't affect the viewer or tests, but if a third-party user calls `new TextLayer(...)` without a following call of either the `render`- or `cancel`-method we'd block global clean-up without this patch.",False
303e79326433fe24d6d080734e728761133a364b,2024-05-26 16:14:06,Jonas Jenwald,"Introduce a helper method, in `PDFPageView`, for dispatching ""...layerrendered"" events

Currently we repeat virtually the same, with the exception of the name, event dispatching code four times for the different viewer layers.",False
db86f8132e9f2463f9ae082a3842b5f0fd361c5d,2024-05-26 16:13:59,Jonas Jenwald,"[api-minor] Remove the `setTextContentSource` method in `TextLayerBuilder` (PR 18104 follow-up)

The `setTextContentSource` functionality is very old code, and was introduced years ago together with streaming of textContent.
By moving the `streamTextContent`-call into the `TextLayerBuilder` class we collect more functionality in one place and slightly reduce the amount of code needed.",False
27436d52b22083a55e6bb4b993a967bcdbf6a024,2024-05-25 15:30:44,Jonas Jenwald,"Reduce indentation when parsing new annotations in `getOperatorList`

This code has, over the years, become more complex and less indentation generally helps readability.",False
ce52ce063ec181e9c2138aa4b0ef162417eed177,2024-05-25 14:16:12,Jonas Jenwald,"Change `parsingType3Font` to a getter (PR 14448 follow-up)

We can easily ""compute"" `parsingType3Font` from the `type3FontRefs`-value, and thus avoid having to separately track two related properties.",False
c349ac3a5d6aeba94e75875328346d1417dd6957,2024-05-25 14:08:32,Jonas Jenwald,Skip the temporary variable when calling `#findStreamLength` (PR 18125 follow-up),False
17e09e54785ed09dd3417983c3ed4085e8ee1fa4,2024-05-25 02:51:24,Jonas Jenwald,"Merge pull request #18159 from Snuffleupagus/loadingParams-test

Improve the `loadingParams` functionality in the API",True
6460e9ebcfe0035fb67c26dd96086dc041b0ccda,2024-05-25 02:01:30,Jonas Jenwald,"Merge pull request #18160 from Snuffleupagus/file-layout-overview

Update the ""File Layout Overview"" docs",True
b78480a375fc9c4c08a8ead863c435dc6dc76e0e,2024-05-25 01:59:21,Jonas Jenwald,"Merge pull request #18166 from Snuffleupagus/bug-1898802

Prevent XRef errors from breaking font loading (bug 1898802)",True
cfcb700eccb886374326462b7f8ff94d9f725d29,2024-05-25 01:07:35,Jonas Jenwald,"Prevent XRef errors from breaking font loading (bug 1898802)

Note that the referenced file is trivially corrupt, since it contains *two* PDF documents placed in the same file which doesn't make sense (and isn't how a PDF document should be updated).
However it's still a good idea to ensure that `loadFont` is able to handle errors when resolving References, since that allows us to invoke the existing fallback font handling.",False
78deb798e30cdd28cd8910061828786bf028bbe3,2024-05-24 15:44:58,Jonas Jenwald,"Target ES2022 when building the TypeScript definitions (issue 17932)

This should avoid the latest JS features appearing in the TypeScript definitions, and given the currently supported browsers/environments (in PDF.js) we shouldn't need to target an even older ES-version.",False
03601f99d877982de8d8f96cf3889b0431687a5a,2024-05-24 15:12:06,Jonas Jenwald,"Update the ""File Layout Overview"" docs

Apparently we forgot to update this in the version 4 release, so better late than never I suppose.
 - Use `.mjs` extensions where appropriate.
 - Remove mention of the `debugger`-functionality, since that's not really relevant to users.
 - Unify the whitespace handling to use spaces consistently.",False
18a7bd60f7bd03dc178864b62bb3ee373fef7149,2024-05-24 13:26:38,calixteman,"Merge pull request #18156 from calixteman/bug1882613

[GeckoView] Don't use the system fonts (bug 1882613)",True
adb2bb5af89ab289b4484d87e99b2b483fb34aea,2024-05-24 13:00:22,Calixte Denizet,"[GeckoView] Don't use the system fonts (bug 1882613)

On Android there's almost no chance we find a substitution font so
just use one of the font embedded in pdf.js.",False
06334c97efde3bfb4bb0429268396fb9f1883a97,2024-05-24 12:56:40,Jonas Jenwald,"Improve the `loadingParams` functionality in the API

 - Move the definition of the `loadingParams` Object, to simplify the code.

 - Add a unit-test, since none existed and the viewer depends on this functionality.",False
08bf96865d81b2388219bc4a8cc18c9e5bc1ea49,2024-05-23 22:57:52,Tim van der Meij,"Merge pull request #18154 from timvandermeij/integration-test-rect

Introduce a `getRect` utility function for the integration tests",True
145d66090f304b651670b30bf75e054e51ffea7f,2024-05-23 22:10:03,Tim van der Meij,"Introduce a `getRect` utility function for the integration tests

Over time the number of integration tests that get the rectangle for a
given selector has increased quite a bit, and the code to do so has
consequently become duplicated.

This commit refactors the integration tests to move the rectangle
fetching code to a single place, which reduces the code by over 400
lines and makes the individual tests simpler.",False
0c562f0a98a16bf46ada0da9f62cd76f1b3a0f45,2024-05-23 21:05:03,Tim van der Meij,"Merge pull request #18153 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
af5d7908fe18ffa4146f78bcf4bd7a1c229a77e7,2024-05-23 19:32:20,Tim van der Meij,Update translations to the most recent versions,False
e40e95faf428293d4e8a61e13a433e0355159e45,2024-05-23 19:32:18,Tim van der Meij,Update dependencies to the most recent versions,False
1c3195b86f6f70f1400efdc9f286e7eb419f1ffb,2024-05-23 18:18:00,Tim van der Meij,"Merge pull request #18152 from Snuffleupagus/TextLayerBuilder-shorter

Shorten the code in the `web/text_layer_builder.js` file",True
cb388c66584c227408a8475d9bd93ba2070fb4e4,2024-05-23 17:23:51,Jonas Jenwald,"Shorten the code in the `web/text_layer_builder.js` file

 - Use `this` rather than explicitly spelling out the class-name in the static `#enableGlobalSelectionListener` method, since that leads to shorter code. Given that all the relevant static fields are *private* ESLint will catch any scope errors in the code.

 - Reduce a little bit of duplication when using the `#selectionChangeAbortController` signal.

 - Utilize early returns in the ""selectionchange"" event handler, since that reduces overall indentation which helps readability a tiny bit.",False
b7b8e5ef788313451e869c2816a87f943bba35c3,2024-05-22 20:18:42,Tim van der Meij,"Merge pull request #18145 from timvandermeij/merge-stream

Remove the `merge-stream` dependency in favor of the `ordered-read-streams` dependency",True
723e5b27790ddad29d6f5404655c54cb35a14952,2024-05-22 18:44:36,Tim van der Meij,"Remove the `merge-stream` dependency in favor of the `ordered-read-streams` dependency

The `merge-stream` dependency is no longer maintained and doesn't work
in combination with Gulp 5 anymore (for more information refer to
https://github.com/gulpjs/gulp/issues/2802#issuecomment-2094130656).

Fortunately the Gulp team maintains a drop-in replacement dependency
called `ordered-read-streams` with the same API as `merge-stream`.
Indeed, running all affected Gulp targets and comparing build artifacts
with `diff -r <old> <new>` confirms that no unexpected changes are made.

Fixes a part of #17922.",False
821f3a1ef35248f4eb8410f5e3c97db0aa7fb3e9,2024-05-22 16:57:49,Tim van der Meij,"Merge pull request #18143 from Snuffleupagus/issue-18138

Improve /Page validation for linearized documents (issue 18138)",True
3afa9bfc42873d9e2f418e6364787da403e57492,2024-05-22 15:34:02,Jonas Jenwald,"Improve /Page validation for linearized documents (issue 18138)

The referenced PDF document contains corrupt linearization-data, that doesn't point to the *first* page as intended.",False
2a52fda11b0d8276a8e28cd02dd4508aa7e3ecee,2024-05-22 01:05:43,Jonas Jenwald,"Merge pull request #17770 from Aditi-1400/fix-issue-16843

Add language attribute to canvas",True
14942271d1438e2954a5b80f87ca5dad78543524,2024-05-22 00:23:51,Tim van der Meij,"Merge pull request #17974 from timvandermeij/integration-tests-timeout-scripting

Remove most `waitForTimeout` usage from the scripting integration tests",True
23de3fd549803bcc9c1bbb50f9c7cb7d3b356c0f,2024-05-21 22:06:05,Tim van der Meij,"Remove most `waitForTimeout` usage from the scripting integration tests

This commit replaces most `waitForTimeout` occurrences with calls to
`waitForFunction` or `waitForSandboxTrip`. Note that the occurrences in
the ""must check that focus/blur callbacks aren't called"" test remain
until we find a good way to ensure that nothing happened after the tab
switches (because currently we can't be sure that nothing happens since
there is nothing to await).",False
2ad4601d042f055ec57fac1259ffd7f4104584ea,2024-05-21 22:05:05,Tim van der Meij,"Merge pull request #18129 from nicolo-ribaudo/test-css-only-zoom

Add test for drawing delay with CSS-only zoom",True
5da2894278fb17a7dc5d573557099ffd64fb2545,2024-05-21 21:54:26,calixteman,"Merge pull request #18136 from calixteman/ml_stamp

[Editor] Pass a buffer instead of a blob url to the ML api",True
6860288df249ab33abbcfe08cbab6539fc6b5fbf,2024-05-21 21:29:39,calixteman,"Merge pull request #17968 from calixteman/freetext_update_popup

[Editor] Update popup position and contents after a FreeText has been edited",True
53d866660a71ed4894a81dc33a5b3525c3a3f491,2024-05-21 20:47:48,Nicolò Ribaudo,"Add test for drawing delay with CSS-only zoom

This commit adds a test for 0603d1ac1843bc4098d74382beda6cc511350ccd.
Before the fix the `pagerendered` events would be fired just 2-3
milliseconds after the call to `increaseScale`/`decreaseScale`.",False
b20ddff300242270e2f3057680b5a6434033676a,2024-05-21 20:37:03,Calixte Denizet,[Editor] Pass a buffer instead of a blob url to the ML api,False
2369e40d2e5262f3794a44de5ce13754a9149227,2024-05-21 20:24:10,Calixte Denizet,[Editor] Update popup position and contents after a FreeText has been edited,False
9edca0a5ed204bb298d1cabcdeaebde38296eccb,2024-05-21 19:41:24,Aditi,"Add `lang` attribute to canvas element

Fixes issue #16843.
In certain cases, the text layer was misaligned
due to a difference between the `lang` attribute
of the viewer and the canvas. This commit addresses
the problem by adding the `lang` attribute to the canvas.

The issue was caused because PDF.js uses serif/sans-serif
fonts to generate the text layer and relies on system fonts.
The difference in the `lang` attribute led to different fonts
being picked, causing the misalignment.",False
dce9c6d956f7c447fe9b35189736b1b04f983027,2024-05-21 19:39:01,Jonas Jenwald,"Merge pull request #18125 from Snuffleupagus/issue-18122

Support corrupt PDF documents that contain ""endsteam"" commands (issue 18122)",True
661a62bb308a0f8a1695a2214854c231023bf472,2024-05-21 17:59:29,Tim van der Meij,"Merge pull request #18121 from calixteman/update_puppeteer_22_9_0

Update puppeteer to 22.9.0",True
8753bd9b99765876caf0723b407154327b33b225,2024-05-21 17:50:14,Tim van der Meij,"Merge pull request #18113 from timvandermeij/through2

Remove the `through2` dependency in favor of the built-in Node.js `stream.Transform`",True
57014d0d139952c27825b48c88e9cc8db533a4a4,2024-05-21 17:08:17,Jonas Jenwald,"Support corrupt PDF documents that contain ""endsteam"" commands (issue 18122)

This patch also re-factors the findStreamLength-helper to avoid even more code duplication.",False
9ee7c07b837d0a849ed75272d48947eb33812a45,2024-05-21 15:58:28,Jonas Jenwald,"Merge pull request #18104 from Snuffleupagus/TextLayer-class

[api-minor] Re-factor the basic textLayer-functionality",True
59637c1fa80193b53fe218385863376716766b27,2024-05-21 15:49:04,Jonas Jenwald,"Merge pull request #18115 from Snuffleupagus/freeze-evaluatorOptions

Freeze `evaluatorOptions` in the src/core/pdf_manager.js file",True
9dcaff230c4f62d7d273992ea86ad71d59c23b93,2024-05-21 01:31:59,Calixte Denizet,Update puppeteer to 22.9.0,False
db7e68aea8e44705d7b652a8bd2bbc0ffe6b70df,2024-05-20 16:38:28,Jonas Jenwald,"Merge pull request #18119 from Snuffleupagus/issue-18117

Support charCodes larger than 32-bit in `adjustMapping` (issue 18117)",True
440b4b6eeb41ea8ea1dcd01ded4cd9fd0c6b7cb2,2024-05-20 15:43:55,Jonas Jenwald,"Support charCodes larger than 32-bit in `adjustMapping` (issue 18117)

This also required changing the initial `charCodeToGlyphId`-data to an Object, which seems generally correct since it's consistent with existing code in the `src\core\{cff_font, type1_font}.js` files.",False
3cd6c6c0e645319aa65eb62a11d3b4f36f8be205,2024-05-18 18:46:12,Jonas Jenwald,"Freeze `evaluatorOptions` in the src/core/pdf_manager.js file

Given that these options are passed from the API we don't want to accidentally modify them.",False
c7739dae138541432e7300bd3321e586f520fdf7,2024-05-17 20:02:31,Tim van der Meij,"Remove the `through2` dependency in favor of the built-in Node.js `stream.Transform`

The `through2` dependency got introduced over four years ago in #11325 to
replace the unmaintained `gulp-transform` dependency. However, sadly the
same holds for `through2` since the last release was also four years ago.

Fortunately the `through2` dependency can trivially be replaced with the
built-in Node.js `stream.Transform` API nowadays. In fact, the `through2`
dependency mentions themselves in their README already that they are ""a
tiny wrapper around Node.js streams.Transform"". The `stream.Transform`
API is available in all Node.js versions we support, and in Node.js 6
already the simplified constructor approach for `stream.Transform` got
introduced to simplify creating custom stream transformers; see
https://nodejs.org/docs/latest-v6.x/api/stream.html#stream_new_stream_transform_options.

This commit therefore replaces `through2` by switching to the
`stream.Transform` API directly so we don't need any wrappers anymore.
Note that for our case the only change we have to make is to enable
object mode, see https://nodejs.org/api/stream.html#object-mode, because
we pass in `VinylFile` objects instead of e.g. regular `Buffer` objects.

I have confirmed in two ways that this is indeed a drop-in replacement:

- Running the Gulp targets that call the `transform` function and
  diffing the resulting `build` folder before/after this patch, with
  `diff -r build-old/ build-new/`, to ensure that there are no
  unexpected changes in the output.
- Changing the Gulpfile to, instead of UTF-8, transform the files to
  ASCII, and diffing the resulting `build` folder to confirm that the
  transformation logic works and produces different results, such as:

```
diff build/lib/core/standard_fonts.js build-ascii/lib/core/standard_fonts.js
284c284
<   t[""Trinité""] = true;
---
>   t[""Trinit�""] = true;
```",False
15b5808eee3669671e2b6b6b34d60b0ab9c95312,2024-05-17 17:50:20,Jonas Jenwald,"[api-minor] Re-factor the basic textLayer-functionality

This is very old code, and predates e.g. the introduction of JavaScript classes, which creates unnecessarily unwieldy code in the viewer.
By introducing a new `TextLayer` class in the API, similar to how e.g. the `AnnotationLayer` looks, we're able to keep most parameters on the class-instance itself. This removes the need to manually track them in the viewer, and simplifies the call-sites.

This also removes the `numTextDivs` parameter from the ""textlayerrendered"" event, since that's only added to support default-viewer functionality that no longer exists.

Finally we try, as far as possible, to polyfill the old `renderTextLayer` and `updateTextLayer` functions since they are exposed in the library API.
For *simple* invocations of `renderTextLayer` the behaviour should thus be the same, with only a warning printed in the console.",False
63b66b412cb3be6919c14436487c667a1597a732,2024-05-17 17:40:33,Tim van der Meij,"Merge pull request #18109 from Snuffleupagus/textLayer-no-cleanup-on-pending

Don't invoke `cleanupTextLayer` when there are pending textLayers",True
d8e0fca6094770513ebd92adb20409df582e306c,2024-05-17 12:22:10,Jonas Jenwald,"Don't invoke `cleanupTextLayer` when there are pending textLayers

*Please note:* This doesn't really affect the viewer, but may affect the library API if multiple PDF documents are opened in parallel.

Since we clean-up ""global"" textLayer-data when destroying a PDF document, this means that other active PDFs could potentially break by invoking `cleanupTextLayer` unconditionally. Note that textLayer rendering is an asynchronous task, and we thus need to ensure those are all finished before running clean-up.",False
ab9574fc62cfc5ecec717ebfe036e1084cfb927b,2024-05-17 00:01:51,Tim van der Meij,"Merge pull request #18107 from timvandermeij/needle

Remove the obsolete `needle` dependency",True
ca056d79dd885c476175c080d93a28599fbdb236,2024-05-16 23:37:01,Tim van der Meij,"Remove the obsolete `needle` dependency

The `needle` dependency originally got introduced in #12024, almost four
years ago, to be able to use pre-built binaries for the `canvas`
dependency on macOS. However, nowadays the `needle` dependency isn't
used by `canvas` anymore, or any other package we use for that matter,
as shown by the empty NPM dependency tree:

```
$ npm ls needle
pdf.js
└── needle@3.3.1
```

Investigation showed that the `canvas` package depends on the
`node-pre-gyp` package which in turn depended on `needle` (see
https://github.com/Automattic/node-canvas/issues/1110#issuecomment-411232630),
but in version 1.0.0 of `node-pre-gyp` from three years ago the `needle`
dependency got dropped in favor of `node-fetch` (see
https://github.com/mapbox/node-pre-gyp/blob/a74f5e367c0d71033620aa0112e7baf7f3515b9d/CHANGELOG.md?plain=1#L52).
This explains why the NPM dependency tree is empty now and proves that
we can safely get rid of this dependency now.",False
e8e9a3e29f6b125cc30a3872a418bab73fdb91e0,2024-05-16 22:49:42,Tim van der Meij,"Merge pull request #18106 from timvandermeij/rimraf

Remove the `rimraf` dependency in favor of the built-in Node.js `fs.rmSync`",True
fad14321a8fc9d1266c6a5fb2ea679051d5bc9f3,2024-05-16 21:07:27,Tim van der Meij,"Remove the `rimraf` dependency in favor of the built-in Node.js `fs.rmSync`

In Node.js 14.14.0 the `fs.rmSync` function was added that removes files
and directories. The `recursive` option is used to remove directories
and their contents, making it a drop-in replacement for the `rimraf`
dependency we use.

Given that PDF.js now requires Node.js 18+ we can be sure that this
option is available, so we can safely remove `rimraf` and reduce the
number of project dependencies.

Co-authored-by: Wojciech Maj <kontakt@wojtekmaj.pl>",False
0603d1ac1843bc4098d74382beda6cc511350ccd,2024-05-16 17:49:40,Tim van der Meij,"Merge pull request #18077 from Snuffleupagus/issue-18022

[api-minor] Respect the `drawingDelay` also when CSS-only zooming is used (issue 18022)",True
128705c16e271b5def80e18bf8be8f613950ac36,2024-05-16 17:47:09,Tim van der Meij,"Merge pull request #18103 from Snuffleupagus/pr-18089-followup

Actually disable `TextLayerRenderTask.prototype.#processItems` when `MAX_TEXT_DIVS_TO_RENDER` is reached (PR 18089 follow-up)",True
d5f3829f91b0e20dc366adbb2bcd495275facf73,2024-05-16 15:18:11,Jonas Jenwald,"Actually disable `TextLayerRenderTask.prototype.#processItems` when `MAX_TEXT_DIVS_TO_RENDER` is reached (PR 18089 follow-up)

I broke this accidentally in PR 18089, sorry about that!
Note that since `#processItems` is private we can no longer just ""replace"" the method as was done in PR 18052.",False
4db843617f36b8b386b7ad05e1ef0ac404f60fa1,2024-05-15 19:10:18,Tim van der Meij,"Merge pull request #18047 from Snuffleupagus/issue-18042

Avoid re-parsing global images that failed decoding (issue 18042, PR 17428 follow-up)",True
b800268fca463acc97ea20e39da6a2cba2989377,2024-05-15 17:04:41,Tim van der Meij,"Merge pull request #18094 from Snuffleupagus/rm-unnecessary-signal

Remove unnecessary `signal` parameter from `removeEventListener` calls",True
66c2bf62c1a4fff6cf2560526ea88f3c2194733c,2024-05-15 17:03:25,Tim van der Meij,"Merge pull request #18093 from timvandermeij/exception

Implement a unit test for the `BaseException` class",True
656963e72a61473a5347c77fd9d4071f54a97254,2024-05-15 12:39:50,Jonas Jenwald,"Remove unnecessary `signal` parameter from `removeEventListener` calls

This parameter is not necessary, as outlined in https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener#options",False
6b237e335888f7d0b7ba50d8dc367f47e0cc6622,2024-05-14 23:51:42,Tim van der Meij,"Implement a unit test for the `BaseException` class

The issue from #18003 hasn't been shown to be caused by PDF.js, but it
did surface that we don't have (direct) unit test coverage for the
`BaseException` class. This made it more difficult to prove that the
`stack` property was already available on exception instances, but more
importantly it caused the CI to be green even though the suggested
change would have caused the `stack` property to disappear.

To avoid future regressions, for e.g. similar changes or a rewrite from
a closure to a proper class, this commit introduces a dedicated unit
test for `BaseException` that asserts that our exception instances
indeed expose all expected properties.",False
7e5e06b88639fbe4c2034809a56922a3f56fca30,2024-05-14 21:57:04,Tim van der Meij,"Merge pull request #18091 from Snuffleupagus/rm-_fetchDocument

Inline the `_fetchDocument` helper function in `getDocument`",True
44b7cc517de7c2cb428f67a5db232a6c56675999,2024-05-14 21:30:43,Tim van der Meij,"Merge pull request #18092 from timvandermeij/updates

Update dependencies and translations to the most  recent versions",True
6b171540b7ce83f11ce77f1b26a393d74baa7462,2024-05-14 20:34:25,Jonas Jenwald,"Initialize the `networkStream` synchronously in `getDocument`

This is fairly old code, and at some point the need for this to be asynchronous disappeared.",False
cbb8748a221f3afec93becc5e0160c803fbace0f,2024-05-14 19:59:41,Jonas Jenwald,"Inline the `_fetchDocument` helper function in `getDocument`

This function has been modified a number of times over the years, and at this point it's small/simple enough that we can just inline the code instead.",False
b0dbacd0e1055340499b639fd84b2d8f4770c374,2024-05-14 19:56:34,Tim van der Meij,Update translations to the most recent versions,False
d7f2bc044aaa25376d68ec35696561497d0aa50e,2024-05-14 19:53:36,Tim van der Meij,"Upgrade `eslint-plugin-unicorn` to version 53.0.0

This is a major version bump, but the changelog at
https://github.com/sindresorhus/eslint-plugin-unicorn/releases/tag/v53.0.0
doesn't indicate any breaking changes that should impact us.

Most notably it contains support for ESLint 9, which brings us a step
closer towards #17928.",False
161b942d4134529d483eeddf919c7eeed4503669,2024-05-14 19:52:06,Tim van der Meij,"Update dependencies to the most recent versions

The Puppeteer update should in particular be helpful for us because it
contains improved WebDriver BiDi compatibility, a newer Chrome version
(both might help for #17962) and an official deprecation of CDP for
Firefox. Note that the latter doesn't require changes on our end because
we already use WebDriver BiDi unconditionally for Firefox since commit
4db0174. The full release notes can be found at
https://github.com/puppeteer/puppeteer/releases/tag/puppeteer-core-v22.8.0.",False
33f3228e0003976325f6969b0a64c29b9bbcf101,2024-05-14 19:35:52,Tim van der Meij,"Merge pull request #18087 from calixteman/update_openjpeg

Update openjpeg build (bug 1896577)",True
c6d7ae2076a6b4293888d12786e364b96663aa3d,2024-05-14 19:33:05,Tim van der Meij,"Merge pull request #18089 from Snuffleupagus/textLayer-private

Improve the `TextLayerRenderTask` implementation",True
40f9371bf807bc5a2e55435cc39cc5d8da3a67b4,2024-05-14 19:28:20,Tim van der Meij,"Merge pull request #17923 from nicolo-ribaudo/fix-text-selection

Fix flickering on text selection",True
ac7b86d34181a073acc884ff665ae7affab5b43b,2024-05-14 19:03:53,Tim van der Meij,"Merge pull request #18080 from calixteman/bug1895909

[Editor] Fix the CSS properties of the canvas when it's used in a stampEditor (bug 1895909)",True
6f2e4d0d9434faaeb01a2af637495bd32ae9a9e3,2024-05-14 18:01:12,Nicolò Ribaudo,"Fix flickering on text selection

When seleciting on a touch screen device, whenever the finger moves to a
blank area (so over `div.textLayer` directly rather than on a `<span>`),
the selection jumps to include all the text between the beginning of the
.textLayer and the selection side that is not being moved.

The existing selection flickering fix when using the mouse cannot be
trivially re-used on mobile, because when modifying a selection on
a touchscreen device Firefox will not emit any pointer event (and
Chrome will emit them inconsistently). Instead, we have to listen to the
'selectionchange' event.

The fix is different in Firefox and Chrome:
- on Firefox, we have to make sure that, when modifying the selection,
  hovering on blank areas will hover on the .endOfContent element
  rather than on the .textLayer element. This is done by adjusting the
  z-indexes so that .endOfContent is above .textLayer.
- on Chrome, hovering on blank areas needs to trigger hovering on an
  element that is either immediately after (or immediately before,
  depending on which side of the selection the user is moving) the
  currently selected text. This is done by moving the .endOfContent
  element around between the correct `<span>`s in the text layer.

The new anti-flickering code is also used when selecting using a mouse:
the improvement in Firefox is only observable on multi-page selection,
while in Chrome it also affects selection within a single page.

After this commit, the `z-index`es inside .textLayer are as follows:
- .endOfContent has `z-index: 0`
- everything else has `z-index: 1`
  - except for .markedContent, which have `z-index: 0`
    and their contents have `z-index: 1`.

`.textLayer` has an explicit `z-index: 0` to introduce a new stacking context,
so that its contents are not drawn on top of `.annotationLayer`.",False
036fd11ad7e00d82885334a010d0e6174b5660fe,2024-05-14 17:40:17,Jonas Jenwald,"Improve the `TextLayerRenderTask` implementation

 - Change all possible semi-private methods into properly private ones. Note that this code is old enough to predate standard classes.

 - Move the `appendText` helper function into `TextLayerRenderTask`, as a private method, to avoid having to manually pass in the scope.

 - Simplify `#layoutText` by directly passing in all necessary data. This is possible after the changes PR 18052.",False
c5f92437f7ae45844f4265f7d55b961c55767f6e,2024-05-14 17:28:36,Jonas Jenwald,"Avoid re-parsing global images that failed decoding (issue 18042, PR 17428 follow-up)

For images that failed to decode once we want to avoid a pointless round-trip to the main-thread, which could otherwise happen for globally cached images.",False
bb9bb34721cddc19ee114a17c3881e34406b9036,2024-05-14 17:27:46,Jonas Jenwald,"Merge pull request #17941 from Snuffleupagus/getTextContent-lang

[api-minor] Include the document /Lang attribute in the textContent-data",True
36a496b4094176e4e9a5ee0f24342aaa31313057,2024-05-14 16:44:54,Jonas Jenwald,"Merge pull request #18060 from nicolo-ribaudo/babel-plugin-class

Update the Babel plugin to remove empty class constructors",True
6d523c316cf5d2c47d5e0cf0adfe3e0a57875b97,2024-05-14 16:14:41,Jonas Jenwald,"[api-minor] Include the document /Lang attribute in the textContent-data

 - These changes will allow a simpler way of implementing PR 17770.

 - The /Lang attribute is fetched lazily, with the first `getTextContent` invocation. Given the existing worker-thread caching, this will thus only need to be done *once* per PDF document (and most PDFs don't included this data).

 - This makes the /Lang attribute *directly available* in the `textLayer`, which has the following advantages:
    - We don't need to block, and thus delay, overall viewer initialization on fetching it (nor pass it around throughout the viewer).

    - Third-party users of the `textLayer` will automatically benefit from this, once we start actually using the /Lang attribute in PR 17770.
      *Please note:* This also, importantly, means that the `text` reference-tests will then cover this code (which wouldn't otherwise have been the case).",False
c0b5d93ef4aa034c528a37101d572051a4a68ca9,2024-05-14 16:00:27,Jonas Jenwald,"Merge pull request #18052 from Snuffleupagus/textLayer-only-ReadableStream

Restore broken functionality and simplify the implementation in `src/display/text_layer.js`",True
298d72133e30b59659c8fbd4118f68c2801adc69,2024-05-14 15:13:57,Jonas Jenwald,"Merge pull request #18051 from Snuffleupagus/NodePackages

[api-minor] Re-factor how Node.js packages/polyfills are  loaded (issue 17245)",True
699e8aa3e41c17101bda8c0bdab8ed1b4ed9b8f9,2024-05-14 13:41:58,Calixte Denizet,"Update openjpeg build (bug 1896577)

It just contains fixes for:
 - bug 1896577
 - https://github.com/mozilla/pdf.js.openjpeg/issues/1",False
761abc7cc37405ffef1d919bf04c1e607a96a999,2024-05-14 13:19:08,Jonas Jenwald,"Merge pull request #18066 from Snuffleupagus/rm-FontFaceObject-ignoreErrors

Remove the `ignoreErrors` option from the `FontFaceObject` class",True
0347e59b99cfcdcc5d755434a8ce5d0ca34f299d,2024-05-13 23:08:59,Tim van der Meij,"Merge pull request #18061 from Snuffleupagus/api-report-Stats

Slightly re-factor how the viewer initializes debug-only functionality",True
093bdfd9718088d04e20b153f8df7273036d7cde,2024-05-13 20:28:19,Calixte Denizet,"[Editor] Fix the CSS properties of the canvas when it's used in a stampEditor (bug 1895909)

And move the page canvas properties under canvasWrapper in order to avoid future regressions.",False
df23679bc68cf0c6fba37f2ab556758048f789cc,2024-05-13 20:15:03,Tim van der Meij,"Merge pull request #18079 from mozilla/revert-18019-safari-zoom-fix

Revert ""Fix rendering problem when zooming on Safari"" for causing bug 1895909",True
75a1955fd0ef8954e8ccacf8241225e386fa5151,2024-05-13 19:44:38,Jonas Jenwald,"Revert ""Fix rendering problem when zooming on Safari""",False
1a3ea159507754faf064795084315875cbb5338f,2024-05-13 18:54:48,Jonas Jenwald,"[api-minor] Respect the `drawingDelay` also when CSS-only zooming is used (issue 18022)

If a user manually calls `PDFPageView.prototype.update()` with a `drawingDelay`-option then it'll always be necessary to re-call the method *without* a delay afterwards, regardless of the `maxCanvasPixels`-value (e.g. even when CSS-only zooming is used).",False
d9cff1af04e74b5d1f677bdb957091949541ce83,2024-05-13 18:48:44,Tim van der Meij,"Merge pull request #18069 from Snuffleupagus/rm-spaceWidth

Remove the unused `Font.prototype.spaceWidth` getter (PR 13424 follow-up)",True
1c25e951a458ee988261ec8b69726a357ac62d1c,2024-05-13 18:46:01,Tim van der Meij,"Merge pull request #18055 from Snuffleupagus/PDFViewer-signal

Remove event listeners with `signal` in web/pdf_viewer.js",True
46626ac64a7de87423c5b2879d6a3c998135d400,2024-05-13 15:21:43,Nicolò Ribaudo,"Update the Babel plugin to remove empty class constructors

This only happens when it's safe to do so. The exceptions are:
- when the class extends another subclass: removing the constructor would remove the error about the missing super() call
- when there are default parameters, that could have side effects
- when there are destructured prameters, that could have side effects",False
4aee67227e3c5b28f1bb4d8fa6b2ad882bc23b5a,2024-05-11 15:20:51,Jonas Jenwald,"Remove the unused `Font.prototype.spaceWidth` getter (PR 13424 follow-up)

This getter became unused in PR 13424, well over two years ago, and apparently none of us noticed that.",False
5f6f1686b5f996943c9b73599eaadbad832c18cc,2024-05-11 13:48:23,Jonas Jenwald,"Remove the `ignoreErrors` option from the `FontFaceObject` class

 - The `stopAtErrors` API option, which is the inverse of the ""internal"" `ignoreErrors` option, is explicitly documented as applying to *parsing* (i.e. the worker-thread) while the `FontFaceObject` class is used during rendering (i.e. the main-thread); see https://github.com/mozilla/pdf.js/blob/b6765403a1b08aa80a21cb0809741875a925ab4d/src/display/api.js#L164-L167

 - A glyph that fails in the `FontRendererFactory`, on the worker-thread, will already cause (overall) parsing to stop when `ignoreErrors === false` hence checking the option on the main-thread as well seems redundant; see https://github.com/mozilla/pdf.js/blob/b6765403a1b08aa80a21cb0809741875a925ab4d/src/core/evaluator.js#L4527-L4533

 - Removing this option simplifies the code, and slightly reduces the number of options that we need to handle in the main-thread code.",False
5e50479ac68b0fac4691d4e1cdb3eaa431490129,2024-05-11 13:14:10,Jonas Jenwald,"Use more object destructuring in the ""commonobj"" handler in the API",False
5fbc5ba16a6e595c45b0da1b9a15259558242247,2024-05-11 13:12:05,Jonas Jenwald,"Move the `loadPDFBug` function into `PDFViewerApplication._parseHashParams`

Given that this is a debug-only function we don't need to define it ""globally"" in the `web/app.js` file.",False
ba8c620e4b05d21d6a7714b4e157ed262ebdc58a,2024-05-11 13:12:05,Jonas Jenwald,"Inline the `loadFakeWorker` function at its only call-site in `web/app.js`

Given that this is a debug-only, and fairly short, function we can just inline the code.",False
4a8d742592233ba8fb6d2db86626a0343a089136,2024-05-11 13:12:05,Jonas Jenwald,"Move the reporting of page `Stats` into the API

This avoids having to add a couple of event listeners in the viewer, when debugging is enabled, and is consistent with the existing handling of `FontInspector` and `StepperManager` in the API.",False
83d878d34ce9e9677bb95a02013b1376391c14cd,2024-05-09 18:47:30,Nicolò Ribaudo,"Rename builder esprima fixtures to babel

f724ae98a1c0859885083448e2cbc3f3d4c31cf1 changed the build
script to use Babel, so this commit updates the file names accordingly",False
469738c1ce956b202efbab4a8f5b5d4a035066e1,2024-05-08 19:37:43,Jonas Jenwald,Remove event listeners with `signal` in web/pdf_viewer.js,False
9418ed19e7dcd799a5bec12a0c7328a98f291bb5,2024-05-07 21:51:56,Jonas Jenwald,"[api-minor] Remove the, now unused, `pdfjsLibPromise` global

This global was only introduced to work-around problems caused by the GENERIC PDF.js build using top level await. Since that was removed in the previous commit, this global is now dead code.",False
8d86e18a32144180f04a96e209f92b7f628018ee,2024-05-07 16:34:00,Jonas Jenwald,"Restore the `MAX_TEXT_DIVS_TO_RENDER` limit in the textLayer

This limit is currently completely non-functional, since the check happens *after* the entire textLayer has been parsed and appended to the DOM. It seems that this has been *accidentally* broken ever since the introduction of `ReadableStream` support.
The reason that this hasn't caused noticeable textLayer-related performance issues in practice is probably because we nowadays manage to coalesce the textLayer into fewer overall DOM elements, whereas years ago many PDF documents ended up with one DOM element *per* glyph.

By moving this check, and thus restoring the functionality, we're also able to remove the `render` helper function and simplify the code.",False
30840e411eacfeb83b7acdd7787c110ff44b5f8a,2024-05-07 16:34:00,Jonas Jenwald,"Ensure that the textLayer `styleCache` is always cleared, even on failure

By also moving it to the `TextLayerRenderTask`-instance, we can avoid a bit of manual parameter passing.",False
049848ba009014d5056dd79676028cec91bd2a5c,2024-05-07 16:33:57,Jonas Jenwald,"Unify the `ReadableStream` and `TextContent` code-paths in `src/display/text_layer.js`

The only reason that this code still accepts `TextContent` is for backward-compatibility purposes, so we can simplify the implementation by always using a `ReadableStream` internally.",False
2643570364e1ed59a8d2d42b3f00674bd175cfbe,2024-05-07 02:50:03,Jonas Jenwald,"[api-minor] Re-factor how Node.js packages/polyfills are loaded (issue 17245)

*Please note:* This removes top level await from the GENERIC builds of the PDF.js library.

Despite top level await being supported in all modern browsers/environments, note [the MDN compatibility data](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await#browser_compatibility), it seems that many frameworks and build-tools unfortunately have trouble with it.
Hence, in order to reduce the influx of support requests regarding top level await it thus seems that we'll have to try and fix this.

Given that top level await is only needed for Node.js environments, to load packages/polyfills, we re-factor things to limit the asynchronicity to that environment.
The ""best"" solution, with the least likelihood of causing future problems, would probably be to await the load of Node.js packages/polyfills e.g. at the top of the `getDocument`-function. Unfortunately that doesn't work though, since that's a *synchronous* function that we cannot change without breaking ""the world"".

Hence we instead await the load of Node.js packages/polyfills together with the `PDFWorker` initialization, since that's the *first point* of asynchronicity during initialization/loading of a PDF document. The reason that this works is that the Node.js packages/polyfills are only needed during fetching of the PDF document respectively during rendering, neither of which can happen *until* the worker has been initialized.
Hopefully this won't cause any future problems, since looking at the history of the PDF.js project I don't believe that we've (thus far) ever needed a Node.js dependency at an earlier point.
This new pattern for accessing Node.js packages/polyfills will also require some care during development *and* importantly reviewing, to ensure that no new top level await is added in the main code-base.",False
b6765403a1b08aa80a21cb0809741875a925ab4d,2024-05-07 01:39:42,Jonas Jenwald,"Merge pull request #18026 from Snuffleupagus/validate-more-getArray

Validate even more dictionary properties",True
14e87469dbb04fa0e9e6f7ec23e5c9d7b283e901,2024-05-06 23:30:03,Tim van der Meij,"Merge pull request #18041 from timvandermeij/integration-tests-timeout-freetext

Remove most `waitForTimeout` usage from the freetext editor integration tests",True
30d0e3a0baa062880c589bcadc132fe4b7b36f89,2024-05-06 23:26:59,calixteman,"Merge pull request #18044 from calixteman/bug1894849

Avoid to aria-hide the structure tree (bug 1894849)",True
bb743389aaf068d59ec659b6c0d3f2582cbd98c9,2024-05-06 23:05:37,Tim van der Meij,"Use `waitForSelector` instead of `waitForFunction` for focus checks

This commit replaces `waitForFunction` calls that use
`document.activeElement` to wait for an element to get focus by simpler
`waitForSelector` expressions that use the `:focus` selector. Note that
we already use this in other tests, so this improves consistency too.",False
5c5c107ec5813d04ba0f414f115ebcf3e85a71aa,2024-05-06 23:05:37,Tim van der Meij,"Remove most `waitForTimeout` usage from the freetext editor integration tests

This commit replaces a `waitForTimeout` occurrence with an equivalent
`waitForSelector` expression, and removes two other `waitForTimeout`
occurrences that are obsolete because we already wait for an observable
event to trigger or class change to happen.

Note that the other `waitForTimeout` occurrences in this file are either
part of #17931 or remain until we find a good way to ensure that nothing
happened (because currently there is nothing we can await there).",False
d79aaee62a27c25774100d545a420020b8769717,2024-05-06 18:17:56,Tim van der Meij,"Merge pull request #18009 from nicolo-ribaudo/pin-node-21

Pin GitHub actions to Node.js 21",True
9b41bfc37487cb15fcc2ff0d7d5e392816ed3054,2024-05-04 02:07:50,Jonas Jenwald,Introduce helper functions for parsing /Matrix and /BBox arrays,False
52f7ff155d554742540c13bc6b2175c74c1f53d1,2024-05-04 02:07:14,Jonas Jenwald,"Validate even more dictionary properties

This checks primarily Arrays, but also some other properties, that we'll end up sending (sometimes indirectly) to the main-thread.",False
7742c3eb6372f9a20f48f4685b29ec3958a05447,2024-05-03 18:09:43,Calixte Denizet,"Avoid to aria-hide the structure tree (bug 1894849)

If one ancestor of the structure tree has the attribute aria-hidden
then it's invisible for screen readers.",False
1b811ac1138242067cd79941f0dcbee0c4d9eb65,2024-05-03 12:33:17,Jonas Jenwald,"Merge pull request #18034 from Snuffleupagus/FileSpec-filename-stripPath

[api-minor] Improve the `FileSpec` implementation",True
a790f2df5d58b22dd1380daf895ddf1c36c218c6,2024-05-03 11:59:41,Jonas Jenwald,[api-minor] Remove the unused `onlyStripPath` option from the `getFilenameFromUrl` helper function,False
c419c8333b1b509fe90242135d9594aa026a8724,2024-05-02 18:11:02,Jonas Jenwald,"Merge pull request #18037 from Snuffleupagus/validate-more-widths

Add even more validation of width-data (PR 18017 follow-up)",True
2f7a4d555a88ebd07eef585e1c34caab66ca2102,2024-05-02 18:08:54,Tim van der Meij,"Merge pull request #18033 from Snuffleupagus/version-4.3

Bump library version to `4.3`",True
6c05f8b3818cb057f5224452d1c53b948c3fcceb,2024-05-02 14:54:15,Jonas Jenwald,"Add even more validation of width-data (PR 18017 follow-up)

I missed this case in PR 18017, sorry about that.",False
33732ff2cba88e262dcd542b97a237fe8b9bbe35,2024-05-01 23:44:28,calixteman,"Merge pull request #18035 from calixteman/rm_max_group_size

Remove the limit used to decided if a group canvas must be upscaled or not",True
2b69fb76ac463c36f82f37cedb5c004ec364654a,2024-05-01 21:32:05,Jonas Jenwald,"[api-minor] Improve the `FileSpec` implementation

 - Check that the `filename` is actually a string, before parsing it further.
 - Use proper ""shadowing"" in the `filename` getter.
 - Add a bit more validation of the data in `pickPlatformItem`.
 - Last, but not least, return both the original `filename` and the (path stripped) variant needed in the display-layer and viewer.",False
5c771628dec9913f960c6f14e9b081df90da5f6f,2024-05-01 21:31:54,Calixte Denizet,"Remove the limit used to decided if a group canvas must be upscaled or not

It fixes issues #14982 and #14724.
The main problem of upscaling a canvas is that it can induces some pixelation
(see issue #14724). So this patch is just removing the limit and as a side
effect it fixes issue #14982.
As far as I can tell, in looking different profiles (especially some memory profile)
in using the Firefox profiler, I don't see any noticeable difference in term of
memory use.",False
16dbf5dcfd83d7e8af8b2526043b403da5b784e0,2024-05-01 21:23:22,Jonas Jenwald,"Merge pull request #18031 from Snuffleupagus/issue-18030

[api-minor] Expose the /Desc-attribute of file attachments in the viewer (issue 18030)",True
3ff93ede07d3813244fef83097c88411dd2dec2a,2024-05-01 20:30:14,Jonas Jenwald,Bump library version to `4.3`,False
96ce111e0c1dd72a3d799517cc1b8630b8594f1d,2024-05-01 19:42:43,calixteman,"Merge pull request #18029 from calixteman/simplify_smask

[api-minor] Remove the use of (get/put)ImageData when drawing SMasks (bug 1874013)",True
82989e6790421917880ebd4b3e3281a39c5ed543,2024-05-01 19:10:44,Calixte Denizet,"[api-minor] Remove the use of (get/put)ImageData when drawing SMasks (bug 1874013)

and implement then in using some SVG filters and composition.
Composing in using destination-in in order to multiply RGB components by
the alpha from the mask isn't perfect: it'd be a way better to natively have
alpha masks support, it induces some small rounding errors and consequently
computed RGB are approximatively correct.
In term of performance, it's a real improvement, for example, the pdf in
issue #17779 is now rendered in few seconds.
There are still some room for improvement, but overall it should be a way
better.",False
bf4e36d1b5fb9a3728c6441f68d9435f235c8e4b,2024-05-01 12:32:11,Jonas Jenwald,"[api-minor] Expose the /Desc-attribute of file attachments in the viewer (issue 18030)

In the viewer this will be displayed in the `title` of the hyperlink, which is probably the best we can do here given how the viewer is implemented.",False
77e2182b8efc2846fdb60dd8eed70372edc900c5,2024-04-30 18:20:46,Tim van der Meij,"Merge pull request #18019 from Aditi-1400/safari-zoom-fix

Fix rendering problem when zooming on Safari",True
716ac7eae81aedd512c6d2580a8d8d149336ca65,2024-04-30 17:28:36,Tim van der Meij,"Merge pull request #18024 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
9dcb2b3844a8db96f5c164f49e54efb5467eff3f,2024-04-29 23:27:19,Tim van der Meij,Update translations to the most recent versions,False
9872de14156f2b1f6206de71704753fe0aea84d9,2024-04-29 23:25:38,Tim van der Meij,"Upgrade `postcss-discard-comments` to version 7.0.0

This is a major version bump, but the changelog at
https://github.com/cssnano/cssnano/releases/tag/cssnano%407.0.0
doesn't indicate any breaking changes that should impact us.",False
89f41e527d7a21fc5d6a0f886e802ed7e30ba2ff,2024-04-29 23:22:37,Tim van der Meij,Update dependencies to the most recent versions,False
1241758605bdef56c04e692001f3fc7230a7cb3a,2024-04-29 23:03:55,Tim van der Meij,"Merge pull request #18023 from timvandermeij/bump

Bump the stable version in `pdfjs.config`",True
a6271e47b21a1c0f9a13a44c2424edc4a5a6151c,2024-04-29 23:00:03,Tim van der Meij,Bump the stable version in `pdfjs.config`,False
49b388101a53f1ff81390fab8336d02acf06a582,2024-04-29 22:40:06,Tim van der Meij,"Merge pull request #18001 from Snuffleupagus/api-pageRefCache

[api-minor] Move the page reference/number caching into the API",True
150964dd6d448ce9eb3f32689e576b33f3f86f3f,2024-04-29 22:24:09,Jonas Jenwald,"Remove unnecessary check from `PDFLinkService.goToDestination` (PR 17984 follow-up)

After the changes in PR 17984 this code can no longer be reached, since the destination is now validated on the worker-thread.",False
f6cd03955b921c6cd5187f8f5e76d37f471560d1,2024-04-29 22:24:06,Jonas Jenwald,"[api-minor] Move the page reference/number caching into the API

Rather than having to handle this *manually* throughout the viewer, this functionality can instead be moved into the API which simplifies the code slightly.",False
fa69d9a3bce242bc4ee3eed44a0c6eed5ce17d74,2024-04-29 22:22:12,Jonas Jenwald,"Inline the helper method in `PDFLinkService.goToDestination`

We no longer need the helper method to *potentially* call itself once data is available, and can instead take full advantage of async/await by inlining the code.",False
3052e99f656664d3f1b93031f0f49f7f94bcf7e7,2024-04-29 22:11:53,Tim van der Meij,"Merge pull request #18013 from Snuffleupagus/SimpleLinkService-extends-PDFLinkService

Re-factor `SimpleLinkService` to extend `PDFLinkService`",True
2b2ade78838946b4062f7d84de3a9320bf0b4cd4,2024-04-29 21:09:35,Jonas Jenwald,"Merge pull request #18018 from Snuffleupagus/CompiledFont-tweak-caching

Reduce code-duplication when caching data in `CompiledFont.getPathJs`",True
627fe2d82604ac0d2d6918b74cec13dff57fc86a,2024-04-29 17:47:23,Jonas Jenwald,"Merge pull request #18017 from Snuffleupagus/validate-widths

Add more validation of width-data",True
04580168a29ab36f8a7a71e5c51e23ec72c12bd0,2024-04-29 17:32:06,Aditi,Fix rendering problem when zooming on Safari,False
85ff8f34e22cc50de593e6bb7ec638356bc9e2a3,2024-04-29 16:48:31,Jonas Jenwald,Reduce code-duplication when caching data in `CompiledFont.getPathJs`,False
d411a072a45b2ed7c439748a72051cf921b28489,2024-04-29 14:21:16,Jonas Jenwald,"Add more validation of width-data

The current `PartialEvaluator.extractWidths` implementation only contains *partial* validation of the width-data.",False
234067e745ea3682a4c7cb5d80649a95bf2e5bbc,2024-04-29 13:31:48,Jonas Jenwald,"Merge pull request #18014 from Snuffleupagus/validate-font-properties

Validate additional font-dictionary properties",True
08eb0566f712525363402ee4a272f1b5fc1d0c63,2024-04-29 11:51:28,Jonas Jenwald,Validate additional font-dictionary properties,False
85e64b5c16c9aaef738f421733c12911a441cec6,2024-04-29 02:57:47,calixteman,"Merge pull request #18015 from calixteman/rm_eval_font_loader

Simplify the way to pass the glyph drawing instructions from the worker to the main thread",True
8c3d571939b05e5866d2f66f5e166340fcc61985,2024-04-28 13:48:41,Jonas Jenwald,"Re-factor `SimpleLinkService` to extend `PDFLinkService`

Rather than having to maintain a dummy `IPDFLinkService` implementation, we can simply let it extend the primary `PDFLinkService` class instead.
Note how *some* methods already checked for an active PDF document, and those checks only needed to be used consistently throughout `PDFLinkService` in order for this to work.",False
551e63901c4e19450673c4832ef2235cf8f2fffa,2024-04-28 00:58:31,Calixte Denizet,"Simplify the way to pass the glyph drawing instructions from the worker to the main thread

and remove the use of eval in the font loader.",False
e561a4af3c0d73a3c7e2a1751032e1216950095a,2024-04-26 22:53:16,Nicolò Ribaudo,"Pin GitHub actions to Node.js 21

Node.js 22 was just released, and it seems like it's not compatible
with the `canvas` package. This commit pins the version on GitHub
actions to Node.js 21 as a temporary workaround.

This commit should be reverted once
https://github.com/Automattic/node-canvas/issues/2377
is fixed.",False
90d4b9c2c0df7cadbd5c2388431b208f08da1ed6,2024-04-24 23:46:01,calixteman,"Merge pull request #17868 from calixteman/interpolate_flag

Always enable smoothing when rendering downscaled image",True
b511878ba75e5a1a3779c8bda7cee2644dd6f4d6,2024-04-24 22:03:21,Calixte Denizet,"Always enable smoothing when rendering downscaled image

and rely on the Interpolate flag only when the image is upscaled.
Fixes #16273.",False
d1f494d68cc4ff3942a4a55d3b7c7ed43b333f6d,2024-04-24 22:02:00,calixteman,"Merge pull request #17986 from calixteman/fix_struct_tree

Allow to insert several annotations under the same parent in the structure tree",True
885dd724339835d6d9f8b761cb3e3b924665c492,2024-04-24 19:55:02,Tim van der Meij,"Merge pull request #17984 from Snuffleupagus/issue-17981

Validate explicit destinations on the worker-thread to prevent `DataCloneError` (issue 17981)",True
45fa8675778bec8432b4c8f5434ce1b19cb52822,2024-04-24 19:53:05,Calixte Denizet,"Allow to insert several annotations under the same parent in the structure tree

While testing stamp insertion with the added pdf, I noticed that the tags using a MCID
weren't considered when trying to attach an annotation to it.",False
7d1eabe2bd8e8becc37a1d0051bb2e9b361104cf,2024-04-24 19:44:54,Tim van der Meij,"Merge pull request #17969 from timvandermeij/integration-tests-timeout-annotations

Remove all `waitForTimeout` usage from the annotation integration tests",True
dafc4f66c2dd6c5124eb8eb0653339b7a873b123,2024-04-24 19:37:28,calixteman,"Merge pull request #17999 from calixteman/issue17998

Set correctly the change property for the event triggered when a choice list is changed",True
10641d5af0fd968548898a251731be0cacbbd9d3,2024-04-24 19:35:37,Tim van der Meij,"Remove all `waitForTimeout` usage from the annotation integration tests

This commit replaces all `waitForTimeout` occurrences with the
appropriate `waitForFunction` calls. Note that in some places they were
already present, so in those cases we could simply remove the
`waitForTimeout` call altogether.",False
55808238e4ac00db453803a49a3bf4218fc2f852,2024-04-24 18:18:22,Calixte Denizet,"Set correctly the change property for the event triggered when a choice list is changed

It fixes #17998.",False
bda98b91cbb774141acaa5a796d7f6433bca2fc0,2024-04-23 19:25:59,Tim van der Meij,"Merge pull request #17967 from Snuffleupagus/eventBus-signal

Add `signal`-support in the `EventBus`, and utilize it in the viewer (PR 17964 follow-up)",True
7206d0a237b1476d65d1c14da24ec427f3709ba8,2024-04-23 02:21:35,Jonas Jenwald,"Validate explicit destinations on the worker-thread to prevent `DataCloneError` (issue 17981)

*Note:* This borrows a helper function from the viewer, however the code cannot be directly shared since the worker-thread has access to various primitives.",False
522af265a71eae7d1991e57b4a2e73262d50390b,2024-04-22 22:01:31,Tim van der Meij,"Merge pull request #17977 from Snuffleupagus/parseImageProperties-TypedArray

Update `JpxImage.parseImageProperties` to support TypedArray data in IMAGE_DECODERS builds",True
9e80c6d228ce3bbd3971c78abc4775adbcf77e9d,2024-04-22 20:16:23,Jonas Jenwald,"Merge pull request #17978 from Snuffleupagus/pr-17428-followup

Extend the globally cached image main-thread copying to ""complex"" images as well (PR 17428 follow-up)",True
f6b04135062cb63a0b9577c39258fab6dc2d3ee8,2024-04-22 19:36:13,calixteman,"Merge pull request #17985 from calixteman/openjpeg_warn

Use the pdf.js warn when using jpx decoder",True
55f943c4fac04c82dc686e525a620bfe6daffe4c,2024-04-22 19:32:45,Calixte Denizet,"Use the pdf.js warn when using jpx decoder

Fixes #17980.",False
335d8394cd5c9dbd7be0c8e984d4c98f673844d2,2024-04-22 19:05:10,Tim van der Meij,"Merge pull request #17979 from Snuffleupagus/image-errors-shorter-msg

[api-minor] Remove the image-related error message prefixes",True
c22e64cd05175491f9872915b952e4d1c217a2c3,2024-04-22 19:03:02,calixteman,"Merge pull request #17983 from calixteman/openjpeg_simd

Improve jpx decoding by around 20% in enabling simd support when compiling OpenJPEG",True
22c27f8520c5604b359a0b6c2fde7125faab914e,2024-04-22 19:02:10,Tim van der Meij,"Merge pull request #17972 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
9d891883b7dbc2ddf035a94cbd99eae78bf92fa6,2024-04-22 18:52:01,calixteman,"Merge pull request #17970 from calixteman/delete_from_xref

Correctly update the xref table when an annotation is deleted",True
0867a1f9bca9e6f973e66f155f64eccaa5f327e3,2024-04-22 18:43:26,calixteman,"Merge pull request #17973 from calixteman/no_contextmenu_resize

[Editor] Don't show the context menu when resizing",True
c730a50540cea114b67603655212cb25c13791d6,2024-04-22 16:38:47,Calixte Denizet,Improve jpx decoding by around 20% in enabling simd support when compiling OpenJPEG,False
32b885c5ef8f0500875381134a1f6c0a6f8d3d81,2024-04-21 13:11:21,Jonas Jenwald,Remove event listeners with `signal` in web/annotation_layer_builder.js and web/text_highlighter.js,False
912b57b95d665e8c47c018420aae45149242b926,2024-04-20 16:21:45,Jonas Jenwald,"[api-minor] Remove the image-related error message prefixes

Other custom errors, based on `BaseException`, do not use such a format.",False
2831caef134289eab7e6401950ee0669d432489f,2024-04-20 15:30:58,Jonas Jenwald,Remove event listeners with `signal` in web/pdf_scripting_manager.js,False
bf785f2180b570e325d758fba2287d1dd6f4f125,2024-04-20 15:30:58,Jonas Jenwald,Remove event listeners with `signal` in web/pdf_history.js,False
702ee7b1e1775b6bfd57856beea77f650d6fa38a,2024-04-20 15:30:58,Jonas Jenwald,"Add `signal`-support in the `EventBus`, and utilize it in the viewer (PR 17964 follow-up)

This mimics the `signal` option that's available for `addEventListener`, see [MDN](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#signal).",False
91898e5923280c5997dba8622dd1368a5513c3dd,2024-04-20 14:40:09,Jonas Jenwald,"Extend the globally cached image main-thread copying to ""complex"" images as well (PR 17428 follow-up)

In PR 17428 this functionality was limited to ""larger"" images, to not affect performance negatively. However it turns out that it's also beneficial to consider more ""complex"" images, regardless of their size, that contain /SMask or /Mask data; see issue 11518.",False
8970786d5bc848ff0e150e6c6bb54d1eb8a601d2,2024-04-20 13:08:52,Jonas Jenwald,"Update `JpxImage.parseImageProperties` to support TypedArray data in IMAGE_DECODERS builds

Given that the `decode` method only returns the actual image-data, a user would now need to invoke `parseImageProperties` to obtain e.g. the width and height.
This method only accepts `BaseStream`-instances, which are (obviously) not exposed, hence we extend it in IMAGE_DECODERS builds to wrap TypedArray data into the expected format.",False
c57a0f38e9557e3e938de01c08b4ebe984e05689,2024-04-19 18:52:46,Calixte Denizet,[Editor] Don't show the context menu when resizing,False
7affc7efa1d7e279da8d6e2d5fe3ae69705289c7,2024-04-19 18:27:04,Tim van der Meij,Update translations to the most recent versions,False
0fdecb353d306749bc29495c87ebbb9e407dd690,2024-04-19 18:26:57,Tim van der Meij,Update dependencies to the most recent versions,False
901d995a7e3365c1de2cc5890796abf18572280f,2024-04-19 00:57:39,Calixte Denizet,Correctly update the xref table when an annotation is deleted,False
5ad42c13adb90fd030dcc7b60451eb6f9824581f,2024-04-18 22:43:32,Tim van der Meij,"Merge pull request #17964 from Snuffleupagus/addEventListener-signal

Remove *some* event listeners with `signal` in the viewer",True
ff2e0c8afd5e9b3b43267409b5bbce63bcddccea,2024-04-18 22:11:21,Jonas Jenwald,"Skip the scroll/scrollend workaround in the Firefox PDF Viewer (PR 17724 follow-up)

Given that [bug 1881974](https://bugzilla.mozilla.org/show_bug.cgi?id=1881974) has been fixed in Firefox 126, the workaround should no longer be necessary in the *built-in* Firefox PDF Viewer.",False
46a29ff41b66390cd00e388d7e74eecf82c313cf,2024-04-18 22:11:21,Jonas Jenwald,"Remove event listeners with `signal` in web/app.js

By using the `signal` option when invoking `addEventListener`, see [MDN](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#signal), we're able to remove an arbitrary number of event listeners with (effectively) a single line of code.
Besides getting rid of a bunch of `removeEventListener`-calls, which means shorter code, we no longer need to manually keep track of event-handling functions.",False
0788c4d9188d1df79d817e33f75a4bbc60e62ea6,2024-04-18 22:11:18,Jonas Jenwald,"Remove event listeners with `signal` in web/pdf_presentation_mode.js

By using the `signal` option when invoking `addEventListener`, see [MDN](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#signal), we're able to remove an arbitrary number of event listeners with (effectively) a single line of code.
Besides getting rid of a bunch of `removeEventListener`-calls, which means shorter code, we no longer need to manually keep track of event-handling functions.",False
aaa55d2b38b9c0abf11c36920fc99a78d921545f,2024-04-18 21:21:34,Tim van der Meij,"Merge pull request #17966 from timvandermeij/waitForTimeout

Remove `waitForTimeout` usage from the helper functions",True
c2e9a6264c9cb1f4073309fd87ecfa7cc70a1068,2024-04-18 19:34:26,Tim van der Meij,"Remove `waitForTimeout` usage from the `dragAndDropAnnotation` helper function

The timeout was introduced in commit 402e3fe with equal timeouts around
the helper function call. In commit 55e5af2 the timeouts around the
helper function call have been removed, and it looks like the helper
function itself was not updated purely due to an oversight.

The operations here should not require any timeouts because the promises
only resolve once the action is completed, which also explains why
removing the timeouts surrounding the helper function calls went without
any problems. It should therefore be safe to remove this timeout too.",False
3f51da147cb93b34f8769dfe3e463cfae397bfd2,2024-04-18 19:01:49,Tim van der Meij,"Remove `waitForTimeout` usage from the `clearInput` helper function

We should wait until the input field's value is actually empty instead
of waiting for a fixed time (which could lead to intermittent failures).",False
48666867493111fee7652cf520af31bd4203d52e,2024-04-18 18:03:12,calixteman,"Merge pull request #17914 from calixteman/freetext_edit

[Editor] Provide an element to render in the annotation layer after a freetext has been edited (bug 1890535)",True
71ea8499f01c9517dd680c3838b92ffa9030d0a2,2024-04-18 16:59:41,Calixte Denizet,[Editor] Provide an element to render in the annotation layer after a freetext has been edited (bug 1890535),False
7290faf840ab5a3828d12bbbb460bd8ad49f6ffa,2024-04-17 00:18:23,Tim van der Meij,"Merge pull request #17956 from calixteman/jpx_exceptions

[JPX] Throw an exception with the error messages returned by openjpeg",True
921fae556eac85f2ea7c7eb8db848156ef91619b,2024-04-16 22:39:46,Tim van der Meij,"Merge pull request #17951 from timvandermeij/fix-jpx-decoder

Fix `JpxImage` API issues (PR 17946 follow-up)",True
ebcae3014cdfa789334213c1efbc66b0c5ab7496,2024-04-16 22:32:24,Calixte Denizet,[JPX] Throw an exception with the error messages returned by openjpeg,False
c08b09d3b95d63efe80e60781c63fe6c50f71863,2024-04-16 21:32:47,Tim van der Meij,"Fix `JpxImage` API issues (PR 17946 follow-up)

This commit changes the `JpxImage.decode` method signature to define the
`ignoreColorSpace` argument as optional with a default value. Note that
we already set this default value in the `getBytes` method of the
`src/core/decode_stream.js` file since this option only seems useful for
certain special cases and therefore shouldn't be mandatory to provide.

Moreover, the JPX fuzzer is changed to use the new `JpxImage` API.",False
801a0975f23c231a3acb0cdd397b98c3f16ebdfa,2024-04-16 21:31:05,Tim van der Meij,"Merge pull request #17954 from calixteman/openjpeg_web

Build the openjpeg-based decoder in a web environment in order to avoid issues when used in node",True
0149a8fc8458bcccd30060602f8c3b468988bde9,2024-04-16 20:25:38,Calixte Denizet,Build the openjpeg-based decoder in a web environment in order to avoid issues when used in node,False
e7c45a001f8e1f56bbcb7b9b5f4d74714c5f5794,2024-04-16 17:37:34,Tim van der Meij,"Merge pull request #17949 from Snuffleupagus/version-4.2

Bump library version to `4.2`",True
12c4119cbdd8c558e9350195e5bb7b2694fce0db,2024-04-16 17:11:58,calixteman,"Merge pull request #17946 from calixteman/openjpeg

[api-minor] Add a jpx decoder based on OpenJPEG 2.5.2",True
2e83cfbbc16b01f38fa7c0a4fdf818d994fe6e9b,2024-04-16 16:24:36,Calixte Denizet,"[api-minor] Add a jpx decoder based on OpenJPEG 2.5.2

The decoder is compiled in WASM:
https://github.com/mozilla/pdf.js.openjpeg

Fixes #17289, #17061, #16485, #13051, #6365, #4648, #12213.",False
c6c60313f094a0d5de29d4c0dabb156d15389060,2024-04-16 14:17:42,Jonas Jenwald,Bump library version to `4.2`,False
7bd7c6ca5a68e1f35bfd586cf2e4c14890ac920d,2024-04-15 19:49:58,Tim van der Meij,"Merge pull request #17947 from timvandermeij/scripting-intermittent

Fix the ""must check that a field has the correct value when a choice is changed"" scripting integration test",True
0e612fbb7d4316938f3a5264bd4cd4e4d12b0c4e,2024-04-15 19:26:39,Tim van der Meij,"Fix the ""must check that a field has the correct value when a choice is changed"" scripting integration test

We should not wait for an arbitrary amount of time, which can easily
cause intermittent failures, but wait for a value change instead. Note
that this patch mirrors the approach we already use in other scripting
integration tests that also check for a value change; see e.g. the
""must check that a field has the correct formatted value"" test.",False
00af2e7b7ae947e5004995e0ffdb75c05b3b012a,2024-04-15 18:32:51,Tim van der Meij,"Merge pull request #17942 from Snuffleupagus/Safari-16

[api-minor] Update the minimum supported Safari version to 16.4",True
1008a53362bca19b1e67cd7e3394ccaa23802935,2024-04-15 17:51:56,Tim van der Meij,"Merge pull request #17938 from timvandermeij/rimraf-test

Remove the `rimraf` dependency in favor of the built-in Node.js `fs.rmSync` in the test folder",True
60f02ea5fe8869ab05d4d2d3e16c502aa002fb07,2024-04-15 17:50:34,Tim van der Meij,"Merge pull request #17940 from timvandermeij/scripting-test

Fix the ""must check that invisible fields are made visible"" scripting integration test",True
a41bb40fbb652c7e21fb4257a0d23535f3afb83c,2024-04-15 16:14:37,Jonas Jenwald,"[api-minor] Update the minimum supported Safari version to 16.4

This patch updates the minimum supported browsers as follows:
 - Safari 16.4, which was released on 2023-03-27; see https://developer.apple.com/documentation/safari-release-notes/safari-16_4-release-notes

Nowadays we usually we try, where feasible and possible, to support browsers/environments that are about two years old. The reasons for limiting support to a slightly more recent Safari version include:
 - Safari has always been slower, compared to other browsers, at implementing e.g. new JavaScript features.
 - Trying to provide support for Safari is often difficult, and over the years we have seen *a lot* of bugs that are specific to Safari.
 - Safari is, and has been for many years, only listed as ""mostly"" supported in the FAQ.
 - This allows us to remove feature-testing, only relevant to Safari, from the main code-base.

By limiting support to only ""recent"" browsers we reduce the risk of holding back improvements of the built-in Firefox PDF Viewer, and also (significantly) reduce the maintenance/support burden for the PDF.js core contributors.

*Please note:* As always, the minimum supported browser version assumes that a `legacy`-build of the PDF.js library is being used; see https://github.com/mozilla/pdf.js/wiki/Frequently-Asked-Questions#faq-support",False
2e9bd496ce1f79b59072f6c477f4886523aef517,2024-04-14 22:23:09,Tim van der Meij,"Fix the ""must check that invisible fields are made visible"" scripting integration test

We should not wait for an arbitrary amount of time, which can easily
cause intermittent failures, but wait for a property value change
instead. Note that this patch mirrors the approach we already use in
other scripting integration tests that also check for a visibility
change; see e.g. the ""must show a text field and then make in invisible
when content is removed"" test.",False
a562c41e1202078c85c6a1d07b13abcbd0fa7e7d,2024-04-14 20:11:59,Tim van der Meij,"Remove the `rimraf` dependency in favor of the built-in Node.js `fs.rmSync` in the test folder

In Node.js 14.14.0 the `fs.rmSync` function was added that removes files
and directories. The `recursive` option is used to remove directories
and their contents, making it a drop-in replacement for the `rimraf`
dependency we use.

Given that PDF.js now requires Node.js 18+ we can be sure that this
option is available, so we can safely remove `rimraf` and reduce the
number of project dependencies in the test folder.

This commit also gets rid of the indirection via the `removeDirSync`
test helper function by simply calling `fs.rmSync` directly.

Co-authored-by: Wojciech Maj <kontakt@wojtekmaj.pl>",False
e08de772ff2dbe7d644607b62288e819efbfd3b4,2024-04-14 20:05:02,Tim van der Meij,"Merge pull request #17879 from ex37/master

Improve type definitions for the viewer",True
14947ad0addcf47d82c2bdb15546bd6ca719b462,2024-04-14 20:04:13,Tim van der Meij,"Merge pull request #17935 from timvandermeij/mkdirp

Remove the `mkdirp` dependency in favor of the built-in Node.js `fs.mkdirSync`",True
da43a53a684404eb6fb562ba49dc796a8150a0bd,2024-04-12 18:42:04,Eduard Ghazanchyan,"Improve type definitions for the viewer

This commit improves compatibility of the viewer code with TypeScript by including missing type imports/definitions and correcting existing ones",False
13afff48f822699318d30e83149006372036140c,2024-04-12 18:36:48,Tim van der Meij,"Remove the `mkdirp` dependency in favor of the built-in Node.js `fs.mkdirSync`

In Node.js 10.12.0 the `recursive` option was added to `fs.mkdirSync`.
This option allows us to create a directory and all its parent
directories if they do not exist, making it a drop-in replacement for
the `mkdirp` dependency we use.

Given that PDF.js now requires Node.js 18+ we can be sure that this
option is available, so we can safely remove `mkdirp` and reduce the
number of project dependencies.

Co-authored-by: Wojciech Maj <kontakt@wojtekmaj.pl>",False
2e945113302ec7568071667c0fc74bd2b18c918a,2024-04-12 17:45:02,Tim van der Meij,"Merge pull request #17934 from calixteman/warn_invalid_name

Warn when a non-embedded font has an invalid name",True
acc56491c90a21d16255cc9176e48d7edb3d833d,2024-04-12 17:29:18,Calixte Denizet,"Warn when a non-embedded font has an invalid name

It can be helpful to find out some heuristics when trying
to find a substitution font.",False
e005e6ecdd2c3e5d17fca4d73ac3ebad754665ca,2024-04-12 17:02:52,Tim van der Meij,"Merge pull request #17933 from Snuffleupagus/pr-17464-followup

Fix resetting of cursor-tools when closing the document (PR 17464 follow-up)",True
2d885e2862a2ef038f727fc8c1805c4b513e9e95,2024-04-12 16:57:32,Tim van der Meij,"Merge pull request #17930 from calixteman/issue17929

Remove the tag for missing font subset when trying to find a substitution",True
60832fee27acca08fce006a0a01dad4e8b55931b,2024-04-12 16:46:44,Jonas Jenwald,"Fix resetting of cursor-tools when closing the document (PR 17464 follow-up)

With the removal of the ""secondarytoolbarreset"" event in PR 17464 resetting of cursor-tools state accidentally broke.",False
f0ad4f00ce09a56a848d09583e4381663b6bf589,2024-04-12 16:42:56,Tim van der Meij,"Merge pull request #17927 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
355432fc71124f8122b9d3bcda9f5e3f8bef51ad,2024-04-12 16:42:30,Tim van der Meij,"Merge pull request #17925 from timvandermeij/web-history-private-methods

Convert the history code to use proper private methods",True
52ea2333b37f8bbd3cd1b0b9779e65212b1c6003,2024-04-12 00:04:28,Calixte Denizet,"Remove the tag for missing font subset when trying to find a substitution

Fixes #17929.",False
ac7bd17cf8f3501f1d6f8bc806562af7bb32a92b,2024-04-11 23:18:32,Tim van der Meij,Update translations to the most recent versions,False
5db84e793097884049f84c6dfbcf337ef4888b5e,2024-04-11 23:18:31,Tim van der Meij,"Fix vulnerabilities in dependency versions

This patch is generated automatically using `npm audit fix`.",False
b379b0e9995cd39853d05f224e19d7e659e11025,2024-04-11 23:18:31,Tim van der Meij,"Upgrade `eslint-plugin-unicorn` to version 52.0.0

This is a major version bump, but the changelog at
https://github.com/sindresorhus/eslint-plugin-unicorn/releases/tag/v52.0.0
doesn't indicate any breaking changes that should impact us.",False
28962da91b0003e74120a1212e15109a406fe9bf,2024-04-11 23:18:31,Tim van der Meij,Update dependencies to the most recent versions,False
a45aec6393724f78f83cbc52671e0f1b70eab1ce,2024-04-11 18:47:30,Tim van der Meij,"Convert the history code to use proper private methods

This allows us to get rid of the `@private` JSDoc comments, which were
used to convey intent back when proper private methods could not be used
yet in JavaScript. This improves code readability/maintenance and enables
better usage validation by tooling such as ESlint.",False
e78ce74b5fd067c563354e6c118379cb4a926d09,2024-04-11 18:22:11,Tim van der Meij,"Merge pull request #17924 from timvandermeij/bump

Bump the stable version in `pdfjs.config`",True
09a8b981f2a2cf3599c86dee71f1caf4db2ac995,2024-04-11 18:17:17,Tim van der Meij,Bump the stable version in `pdfjs.config`,False
fcb76a78ddbbbb3b23d95b5866f0af3ccf834c7e,2024-04-11 17:40:01,Tim van der Meij,"Merge pull request #17893 from timvandermeij/find-integration-test

Fix the ""must highlight text in the right position"" integration test",True
253a7333d88a17f27fd8d5fb1f623bc1718a0255,2024-04-11 17:12:08,Tim van der Meij,"Fix the ""must highlight text in the right position"" integration test

This commit implements the following improvements for the test:

- Replace the hardcoded highlight padding with a dynamic calculation. It
  turns out that the amount of padding can differ per system, possibly
  due to e.g. local (font) settings, which could cause the test to fail.
  The test now no longer implicitly depends on the environment.
- Remove the page offset subtraction. It's only needed for one assertion,
  and we can simply add the page offset there once.
- Improve the ""magic"" numbers in the test. The number 5 is removed now
  that the padding calculation made it obsolete, the number 28 is changed
  to 30 because that's the actual value in the PDF data and the number 4
  is explained a bit more to state that the space also counts as a glyph.
- Annotate the steps and checks to improve readability of the test and
  to explain why certain calculations have to be performed.",False
f4b5ec930f80e09f61f1bc3051aa8f6971e7c341,2024-04-11 15:56:46,Tim van der Meij,"Merge pull request #17913 from timvandermeij/gulp-github-actions

Don't install `gulp-cli` globally in the GitHub Actions workflows",True
d70caca3e2290786aee3e0bf340d990213f39e18,2024-04-11 15:49:36,Tim van der Meij,"Merge pull request #17915 from timvandermeij/lint-waitfortimeout

Implement a linting rule to discourage using `waitForTimeout` for new usages",True
f3b03e5c4bbb786dc05204cc803558909a083053,2024-04-10 16:25:30,Jonas Jenwald,"Merge pull request #17917 from Snuffleupagus/showAll-rtl

Fix the RTL-rule for the `editorHighlightShowAll` button, such that it works outside of the Firefox PDF Viewer",True
e9604e5f3dd3d24f485f2e3fb5a5972d9c2b8874,2024-04-10 16:24:55,Jonas Jenwald,"Merge pull request #17916 from Snuffleupagus/stamp-icon-fill

Tweak the `fill`-value of the Stamp-icon to work better in non-Firefox browsers",True
3596a0327915f1e32c7a99ec69329a8b080fe512,2024-04-10 15:05:04,Jonas Jenwald,"Fix the RTL-rule for the `editorHighlightShowAll` button, such that it works outside of the Firefox PDF Viewer

These CSS rules were imported straight from mozilla-central, and contains a property that causes the RTL-rule to be skipped everywhere else (even when using the development viewer in Firefox).",False
8a1511cdd57e03a8b2e9b80a6f426c191c9024b9,2024-04-10 14:44:41,Jonas Jenwald,"Tweak the `fill`-value of the Stamp-icon to work better in non-Firefox browsers

Currently this icon is invisible in e.g. Google Chrome, so update the `fill`-value to be more inline with the other editor-icons.",False
77ee914bd60d6b94db9cf882884eae0ee2e7cc1e,2024-04-10 13:10:54,calixteman,"Merge pull request #17882 from calixteman/bug1889122

Use the string value of the field when calling the Format callback (bug 1889122)",True
2c7ae50c4be0490c48d13cc85052a94d29efd706,2024-04-10 13:03:30,calixteman,"Merge pull request #17908 from calixteman/issue17906

Don't render annotations with a null dimension",True
b643c0fcfbd176810bac8061f506d6e0c179ab6a,2024-04-10 02:22:11,Calixte Denizet,Use the string value of the field when calling the Format callback (bug 1889122),False
d4633ba4780110cacc05dffb4b9aff018f606ea4,2024-04-09 19:42:15,Tim van der Meij,"Implement a linting rule to discourage using `waitForTimeout` for new tests

The `waitForTimeout` function should not be used anymore and only exists
for old usages that have to be rewritten, but there was nothing in place
to signal this. This commit therefore implements a linting rule, specific
to the integration tests, to make it clear that this function should no
longer be used. We exclude the old usages from it because we are already
tracking those in #17656 (so this patch is mostly to not make the scope
of that issue bigger).",False
41aaa083df1838af5a87f9f01e201e97a641268e,2024-04-09 19:33:49,Calixte Denizet,"Don't render annotations with a null dimension

Fixes #17906.",False
92de2b7b15375e48ddda5a7f818cbbbe9d9835fa,2024-04-09 18:22:00,Tim van der Meij,"Don't install `gulp-cli` globally in the GitHub Actions workflows

It's recommended to always install dependencies locally in the project
folder because global dependencies can easily conflict with other
projects and, because they are not managed by the project, diverge from
versions defined in e.g. `package.json`. Previously we installed
`gulp-cli` globally because at the time we lacked a convenient mechanism
to use Gulp otherwise, but nowadays NPM provides the `npx` command for
that purpose and recommends using it over global installations (see
https://docs.npmjs.com/downloading-and-installing-packages-globally
and PR #17489 that provided the ground work for using it).

This commit therefore updates our GitHub Actions workflows to no longer
install `gulp-cli` globally but instead install it locally from the
already existing entries in `package.json` like all other dependencies
we use. Not only does this remove the special-casing for `gulp-cli`
which simplifies the workflow definitions, it also ensures that the
version ranges provided in `package.json` are respected. This makes the
local and workflow setups more similar, but is also relevant for the
upcoming upgrade to Gulp 5 which from a quick try is a bit involved and
having `package.json` be the single source of truth for the dependency
versions we use is therefore important.",False
a208d6bca72f8cb700f7bb506ea1bc3e76cbaec0,2024-04-09 13:18:17,calixteman,"Merge pull request #17903 from calixteman/moved_freetext

[Editor] Avoid calling setTimeout when editing an existing freetext",True
3b93fdea2695f299d4ab837f9df4042d322db0ec,2024-04-09 02:13:39,Calixte Denizet,"[Editor] Avoid calling setTimeout when editing an existing freetext

The code was added in order to guess if an editor has been moved but
it's simpler to just set a variable when it's dragged or moved with
the keyboard. This way we remove a bit of asynchronicity.",False
30b65ca0678173af8fad4cf99cc42f0d5ec2425d,2024-04-09 00:14:21,Tim van der Meij,"Merge pull request #17907 from calixteman/fix_draw_ink

[Editor] Don't add an already added editor (bug 1890367)",True
fb21c4261dcedbb26b1c1882f54cdbfb3b27d78f,2024-04-08 23:42:08,Tim van der Meij,"Merge pull request #17890 from timvandermeij/font-tests-callbacks

Modernize the TTX driver code",True
be4b56edda0232c544d3130c0669881df405eca7,2024-04-08 23:41:42,Tim van der Meij,"Merge pull request #17891 from timvandermeij/thumbnail-private-methods

Convert the thumbnail view(er) code to use proper private methods",True
976ee96aa8f18b3cc77390f42e34e8a494bad185,2024-04-08 23:20:55,Calixte Denizet,[Editor] Don't add an already added editor (bug 1890367),False
2aeafc0d55bdb7cf4c04649d488cfa1e90521dc5,2024-04-08 21:41:10,Tim van der Meij,"Merge pull request #17905 from timvandermeij/annotation-dash-array

Fix annotation border style parsing by handling empty dash arrays",True
d01a0bd0c83cf39efe0637c20abb64f54c95a6ab,2024-04-08 20:04:27,Tim van der Meij,"Fix annotation border style parsing by handling empty dash arrays

The PDF specification states that empty dash arrays, i.e. arrays with
zero elements, are in fact valid. In that case the dash array simply
corresponds to a solid, unbroken line. However, this case was erroneously
being flagged as invalid and therefore the annotation was not drawn
because its width was set to zero. This commit fixes the issue by
allowing dash arrays to have a length of zero.",False
862c27ee67ef1ec65ef345b9da8421f56a54b08c,2024-04-05 18:14:48,Tim van der Meij,"Convert the thumbnail view(er) code to use proper private methods

This allows us to get rid of the `@private` JSDoc comments, which were
used to convey intent back when proper private methods could not be used
yet in JavaScript. This improves code readability/maintenance and enables
better usage validation by tooling such as ESlint.",False
ac03d7054d0858b8ca259f21a019a59581aec27d,2024-04-05 17:04:54,Tim van der Meij,"Convert the TTX driver code to promises

This commit removes the final callbacks in this code by switching to a
promises-based interface, overall simplifying the code. Moreover, we
document why we write to files on disk and modernize the code using e.g.
template strings.",False
64065141b6e4cd2007b035384d24b5a016f08e62,2024-04-05 16:19:26,Tim van der Meij,"Remove the timeout logic from the TTX driver code

The original `test.py` code, see
https://github.com/mozilla/pdf.js/blob/c2376e5cea1b3cee89d77e6a4e8b0d9b5b8591be/test/test.py,
did not have any timeout logic for TTX, but it got introduced when
`test.py` was ported from Python to JavaScript as `test.js` in
https://github.com/mozilla/pdf.js/commit/c2376e5cea1b3cee89d77e6a4e8b0d9b5b8591be#diff-a561630bb56b82342bc66697aee2ad96efddcbc9d150665abd6fb7ecb7c0ab2f.

However, I don't think we've ever actually seen TTX timing out.
Moreover, back then we used a very old version of TTX and ran the font
tests on the bots (where a hanging process would block other jobs and
would require a manual action to fix), so this code was most likely
only included defensively.

Fortunately, nowadays it should not be necessary anymore because we use
the most recent version of TTX (which either returns the result or
errors out, but isn't known to hang on inputs) and we run the font tests
on GitHub Actions which doesn't block other jobs anymore and also
automatically times the job out for us in the unlikely event that a hang
would ever occur.

In short, we can safely remove this logic to simplify the code and to get
rid of a callback.",False
5adad89eb36b7600258270864b1f9a35454b4586,2024-04-04 22:39:25,Tim van der Meij,"Merge pull request #17880 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
a5308e129a0c60b064e25394e347419e89cc8911,2024-04-04 21:54:59,Tim van der Meij,"Merge pull request #17885 from calixteman/bug1889623

[Editor] Remove the mark from the highlight element and set its role to mark (bug 1889623)",True
54110de1090784ca25bfc87e7d1239791816ae4d,2024-04-04 21:36:05,Calixte Denizet,"[Editor] Remove the mark from the highlight element and set its role to mark (bug 1889623)

Set aria-label to the highlighted text, this way the focus frame is exactly set
on the highlight element and the higlighted text is read.",False
25f6a0c13965c5ad9cebe701e4752bde5e8fa811,2024-04-04 00:11:24,calixteman,"Merge pull request #17875 from calixteman/jbig2_issue

Update the current stride before composing when decoding a text region",True
3f2f98336e4bf693ed047c75e3977ee8ab60bd95,2024-04-03 22:14:50,Calixte Denizet,"Update the current stride before composing when decoding a text region

Fixes #17871.

We do something similar to:
https://source.chromium.org/chromium/chromium/src/+/main:third_party/pdfium/core/fxcodec/jbig2/JBig2_TrdProc.cpp;l=373-379;drc=24c6be6924df3ff585bb63f6aed4e2c81e791fb2",False
d8331e31005edba6afef28ff2f4d55ffe5731df4,2024-04-03 20:35:14,calixteman,"Merge pull request #17810 from calixteman/issue17808

Don't translate char codes when platform,encoding isn't (3,0)",True
8f5d907a521da4aa94ef6e5fb58e755a29abd806,2024-04-03 19:38:11,Calixte Denizet,"Don't translate char codes when platform,encoding isn't (3,0)",False
cecbcd126fee0fb30724b6f24a835c5daafe6882,2024-04-03 18:13:26,Tim van der Meij,Update translations to the most recent versions,False
97f40807c7c97fd6461297f53b2430f786c24407,2024-04-03 18:12:19,Tim van der Meij,Update dependencies to the most recent versions,False
2e5282928fb8a52db8b6fa23c9e71d1385188253,2024-04-02 18:51:43,Tim van der Meij,"Merge pull request #17854 from Snuffleupagus/rm-PromiseCapability

[api-minor] Replace the `PromiseCapability` with  `Promise.withResolvers()`",True
10312105a4c6ae7146e174d4b5ad74b46e1f081c,2024-04-02 18:17:37,Tim van der Meij,"Merge pull request #17861 from Snuffleupagus/compatibilityParams-init

Limit all `compatibilityParams` handling to the GENERIC viewer",True
26466b50bca96a0242a4c04edf38d744439f4f43,2024-04-01 22:31:14,calixteman,"Merge pull request #17855 from calixteman/bug1888657

Avoid useless CSS animation when nothing is done (bug 1888657)",True
3b87c31abb3a4c0c45a3abf7240c93e7934e439c,2024-04-01 22:25:07,Jonas Jenwald,"Merge pull request #17865 from Snuffleupagus/pr-17767-followup

Remove the `addWindowResolutionChange` listener unconditionally (PR 17767 follow-up)",True
d3a613dd5b0454027c9ceff147de424e7d0060ce,2024-04-01 21:02:38,Calixte Denizet,Avoid useless CSS animation when nothing is done (bug 1888657),False
0fdea4b05c9793c815c70b4e9609d8e7203e8d98,2024-04-01 19:30:25,Jonas Jenwald,"Remove the `addWindowResolutionChange` listener unconditionally (PR 17767 follow-up)

Given that `PDFViewerApplication.unbindWindowEvents` can be invoked in mozilla-central tests, we should ensure that the listener is always removed.",False
e4d0e84802098251bd72ffa6ef28907d1ce50f2a,2024-04-01 15:12:37,Jonas Jenwald,"[api-minor] Replace the `PromiseCapability` with `Promise.withResolvers()`

This replaces our custom `PromiseCapability`-class with the new native `Promise.withResolvers()` functionality, which does *almost* the same thing[1]; please see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/withResolvers

The only difference is that `PromiseCapability` also had a `settled`-getter, which was however not widely used and the call-sites can either be removed or re-factored to avoid it. In particular:
 - In `src/display/api.js` we can tweak the `PDFObjects`-class to use a ""special"" initial data-value and just compare against that, in order to replace the `settled`-state.
 - In `web/app.js` we change the only case to manually track the `settled`-state, which should hopefully be OK given how this is being used.
 - In `web/pdf_outline_viewer.js` we can remove the `settled`-checks, since the code should work just fine without it. The only thing that could potentially happen is that we try to `resolve` a Promise multiple times, which is however *not* a problem since the value of a Promise cannot be changed once fulfilled or rejected.
 - In `web/pdf_viewer.js` we can remove the `settled`-checks, since the code should work fine without them:
     - For the `_onePageRenderedCapability` case the `settled`-check is used in a `EventBus`-listener which is *removed* on its first (valid) invocation.
     - For the `_pagesCapability` case the `settled`-check is used in a print-related helper that works just fine with ""only"" the other checks.
 - In `test/unit/api_spec.js` we can change the few relevant cases to manually track the `settled`-state, since this is both simple and *test-only* code.

---
[1] In browsers/environments that lack native support, note [the compatibility data](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/withResolvers#browser_compatibility), it'll be polyfilled via the `core-js` library (but only in `legacy` builds).",False
3d2eb36e272fa3e499aaab8d3613890f8e39e53b,2024-03-31 02:29:58,Jonas Jenwald,"Merge pull request #17858 from Snuffleupagus/issue-17848

Ensure that Mesh /Shadings have non-zero width/height (issue 17848)",True
62568b27dcbaafe1bf50f602fabc2a956bee9198,2024-03-30 16:46:53,Jonas Jenwald,"Limit all `compatibilityParams` handling to the GENERIC viewer

With recent improvements to the `AppOptions`, e.g. with better validation and testing, one remaining ""annoyance"" is the `compatibilityParams` handling. Especially since there's only *a single* parameter left, limited to GENERIC builds.

To further reduce the amount of unnecessary code in e.g. the Firefox PDF Viewer, we can move the `compatibilityParams` handling into the user-options instead since that keeps the previous precedence order between default/user-options.",False
07a8836ab200ad1eee83feb3859d8023c191f9f9,2024-03-30 03:28:25,Jonas Jenwald,Ensure that Mesh /Shadings have non-zero width/height (issue 17848),False
5f87da50d5f887844d1675d31c3a0fe44f661e23,2024-03-30 03:18:19,calixteman,"Merge pull request #17857 from calixteman/issue17856

Display outlines even if one has no title",True
136c1faa7f168747a4771a673336fbbc4d95e5c4,2024-03-30 02:00:24,Calixte Denizet,"Display outlines even if one has no title

Fixes #17856.",False
55db43966eaf99b1292ae913fe2ae3eae7d0e8ad,2024-03-28 17:33:01,Tim van der Meij,"Merge pull request #17847 from Snuffleupagus/issue-17846

Add better support for /Launch actions with /FileSpec dictionaries (issue 17846)",True
236a4df20003f285fc90ac1802a1c129030226f2,2024-03-28 17:29:39,Tim van der Meij,"Merge pull request #17851 from Snuffleupagus/Chrome-98

[api-minor] Update the minimum supported Google Chrome version to 98",True
e384df6f16b9ad1c55d1bc325bcae7e096ef3f9b,2024-03-28 01:24:30,calixteman,"Merge pull request #17852 from calixteman/freetext_paste

[Editor] Correctly handle lines when pasting some text in a freetext",True
2dbd7acc41f07ad84989dfc7a7f087a1cbb27f93,2024-03-27 22:18:43,Calixte Denizet,[Editor] Correctly handle lines when pasting some text in a freetext,False
0f7cb531cf93a11ddab7f0167d9fbc4a63c2d69a,2024-03-27 16:10:00,Jonas Jenwald,"[api-minor] Update the minimum supported Google Chrome version to 98

This patch updates the minimum supported browsers as follows:
 - Google Chrome 98, which was released on 2022-02-01; see https://chromereleases.googleblog.com/2022/02/stable-channel-update-for-desktop.html

The primary reason for this version bump is `structuredClone` support, please see https://developer.mozilla.org/en-US/docs/Web/API/structuredClone#browser_compatibility
At this point in time we're using `structuredClone` in different parts of the code-base, and it's unfortunately functionality that's difficult to polyfill *completely* (affects the `transfer` option specifically).

Note that nowadays we usually try, where feasible and possible, to support browsers that are about two years old. By limiting support to only ""recent"" browsers we reduce the risk of holding back improvements of the *built-in* Firefox PDF Viewer, and also (significantly) reduce the maintenance/support burden for the PDF.js contributors.

*Please note:* As always, the minimum supported browser version assumes that a `legacy`-build of the PDF.js library is being used; see https://github.com/mozilla/pdf.js/wiki/Frequently-Asked-Questions#faq-support",False
0d039937f94d63cc32a58cbd68aa6d6463bf9089,2024-03-27 00:45:48,Jonas Jenwald,Add better support for /Launch actions with /FileSpec dictionaries (issue 17846),False
841d57df462a19a4db8acfaa18ebe85269fb0c03,2024-03-26 23:33:26,Tim van der Meij,"Merge pull request #17844 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
01a68def443122314c22a569e1f81d95e31d160b,2024-03-26 21:02:53,Tim van der Meij,Update translations to the most recent versions,False
2ca65e860acd4af37e7dfebe941bbef19be1822a,2024-03-26 21:02:24,Tim van der Meij,"Fix vulnerabilities in dependency versions

This patch is generated automatically using `npm audit fix`.",False
98ef8a1be3592042798ae55afffe4c0c39bd8247,2024-03-26 20:59:24,Tim van der Meij,"Upgrade `gulp-cli` to version 3.0.0

This is a major version bump, but the changelog at
https://github.com/gulpjs/gulp-cli/releases/tag/v3.0.0 doesn't
indicate any breaking changes that should impact us.",False
8f3deedafaabec0a401ce0cc027fca8d1213a3e4,2024-03-26 20:59:20,Tim van der Meij,"Upgrade `globals` to version 15.0.0

This is a major version bump, but the changelog at
https://github.com/sindresorhus/globals/releases/tag/v15.0.0 doesn't
indicate any breaking changes that should impact us.",False
3f7ea67f68e82b69782b49ef51ab5543f6062aea,2024-03-26 20:56:24,Tim van der Meij,Update dependencies to the most recent versions,False
1141af9d6f52654a8d1c6e2ff842686267f56f22,2024-03-26 20:42:06,Tim van der Meij,"Merge pull request #17842 from Snuffleupagus/Preference-tweaks

A couple of small tweaks of the `BasePreferences` class",True
5e083966965804741ac091a3cc500f75821db2e7,2024-03-26 18:08:40,Jonas Jenwald,"A couple of small tweaks of the `BasePreferences` class

 - Use slightly shorter variable names when initializing the preferences.
 - Correctly copy the ""old"" preference-values before writing to storage, since Objects are passed by reference in JavaScript. (Only applies to the GENERIC viewer.)
 - Use `await` fully when writing new preference-values to storage. (Only applies to the GENERIC viewer.)
 - Stub the `get`-method in the Firefox PDF Viewer, since it's unused there nowadays.",False
3d7ea6076d0473438279e5bf328d6ddd8ac5c44c,2024-03-26 00:25:48,calixteman,"Merge pull request #17837 from calixteman/increase_max_canvas_pixels

Increase the maxCanvasPixels value to 2 ** 25",True
3110a8a8dca3086e6fd0979285d4e372b9d1bba6,2024-03-25 22:31:28,calixteman,"Merge pull request #17827 from calixteman/divider

[Editor] Add a divider before the show all button",True
a4aca8a20d2b1f7e8de8cae1018eab46aaa6dbb1,2024-03-25 22:27:23,Calixte Denizet,Increase the maxCanvasPixels value to 2 ** 25,False
ad791cc462403f6a2e6b782f9b8fd5c1e09f99b1,2024-03-25 21:10:06,calixteman,"Merge pull request #17835 from calixteman/annotation_alt_text

Add alternative text to annotation if any",True
77b2a456d108f5f32517e8a84e235def669e341b,2024-03-25 19:29:34,Calixte Denizet,"[Editor] Add a divider before the show all button

I overlooked it when implementing the toggle button.",False
90dfe52a76fd6007c2d74c8b7bb85d049b185030,2024-03-25 19:28:08,Jonas Jenwald,"Merge pull request #17830 from Snuffleupagus/path2d-new-polyfill

Update the `Path2D` polyfill for Node.js environments",True
3fbd6b5a779eacc8e9e2289e3aab2b3c5d6321a2,2024-03-25 19:12:32,calixteman,"Merge pull request #17823 from calixteman/bug1886959

[Editor] Fix undoing an editor deletion (bug 1886959)",True
d5a0e557c22c97dd985a570263ccbab9e03a815c,2024-03-25 18:47:40,Calixte Denizet,"[Editor] Fix undoing an editor deletion (bug 1886959)

The original bug was because the parent was null when trying to show
an highlight annotation which led to an exception.
That led me to think about having some null/non-null parent when removing
an editor: it's a mess especially if a destroyed parent is still attached
to an editor. Consequently, this patch always sets the parent to null when
deleting the editor.",False
a520ad4633b0d8f364d3a11cf628f3b414089b12,2024-03-25 18:05:54,Calixte Denizet,Add alternative text to annotation if any,False
b0f54b2235c72603dd35a5136aad325939f58589,2024-03-24 17:16:37,calixteman,"Merge pull request #17831 from calixteman/puppeteer_22_6_0

Update puppeteer to 22.6.0",True
dc0df0a3c23e0091dcf143b46643ee2f720ba4af,2024-03-24 16:39:21,Jonas Jenwald,"Update the `Path2D` polyfill for Node.js environments

The polyfill that we use was recently split into two packages, and it now consists of a ""core"" package and a browser-specific package that build upon the former.
Hence we need to update to use the ""core"" package, and slightly tweak the code that loads/initializes the polyfill; see also https://www.npmjs.com/package/path2d

This patch was tested successfully with the [pdf2png example](https://github.com/mozilla/pdf.js/tree/master/examples/node/pdf2png), after running `gulp dist-install` locally, using [this PDF document](https://bug810214.bmoattachments.org/attachment.cgi?id=9254990) which contains Type3-fonts that render using `Path2D`.",False
14307c04dda6a0a7994cc03ce0e871ca1412fca1,2024-03-23 23:00:42,calixteman,"Merge pull request #17825 from calixteman/bug1886964

[Editor] Add a label to the highight floating button readable with NVDA (bug 1886964)",True
b7f3c78d01927b02a009105fc384a38ffd6d7da4,2024-03-23 20:52:51,Calixte Denizet,Update puppeteer to 22.6.0,False
63c1c787b4a6f7d7c909bcd899806746cec32d10,2024-03-23 20:42:03,Calixte Denizet,[Editor] Add a label to the highight floating button readable with NVDA (bug 1886964),False
e7203f558f391e6abdc5648b0db905292fdc7088,2024-03-22 14:32:51,Tim van der Meij,"Merge pull request #17813 from Snuffleupagus/initPassiveLoading-simplify

Remove `PDFViewerApplication.initPassiveLoading` and directly invoke the `open`-method from the extension-specific code",True
067c49dc49ce37ea99106f7d836456025f7ef5f4,2024-03-21 23:32:25,Jonas Jenwald,"Merge pull request #17818 from Snuffleupagus/updatePrefs

Allow listening for preference changes in the Firefox PDF viewer (bug 1886586)",True
44427fa7b2d3ff240f8a824b513eb8d7efdc8a55,2024-03-21 21:37:49,Jonas Jenwald,Allow listening for preference changes in the Firefox PDF viewer (bug 1886586),False
1083087eeea6dac67a2f324da6de5be95458102d,2024-03-21 20:58:19,calixteman,"Merge pull request #17817 from calixteman/zoom_reset

Avoid wrong scrolling when calling zoomReset",True
918b500ca5075f8b03167ef276c990e6987190ca,2024-03-21 20:34:36,Calixte Denizet,"Avoid wrong scrolling when calling zoomReset

The goal of this patch is to fix the test:
https://searchfox.org/mozilla-central/source/toolkit/components/pdfjs/test/browser_pdfjs_zoom.js

It's a regression due to #17790.",False
ae60221b0ec0aca11d70d0f04951706b86d77203,2024-03-20 20:53:10,calixteman,"Merge pull request #17814 from calixteman/bug1886427

[Editor] Make sure the text in the mark has null dimensions to avoid to see a meaningless rectangle in voiceover (bug 1886427)",True
3ac52ac35931cf400cc8a8f0d6d743e380d29899,2024-03-20 19:55:13,Calixte Denizet,[Editor] Make sure the text in the mark has null dimensions to avoid to see a meaningless rectangle in voiceover (bug 1886427),False
ea1c910a66e7a19c247c5f0c330e8bfdd78dc357,2024-03-20 19:22:23,Jonas Jenwald,"Remove `PDFViewerApplication.initPassiveLoading` and directly invoke the `open`-method from the extension-specific code

This old method is essentially just adding, a small amount of, unnecessary indirection and we can easily invoke `PDFViewerApplication.open` directly from the extension-specific code instead.",False
b5e00e1faec2cb2f0d7f0031079371138e5d6d7f,2024-03-20 19:22:16,Jonas Jenwald,"Move the error message localization into `PDFViewerApplication._otherError`

When reporting errors in the viewer we currently localize the error messages ""manually"" at every call-site, which seems like unnecessary repetition.",False
e8da59c6b1b95e236c7177eb9a2b9ce77500fef9,2024-03-20 18:47:42,Tim van der Meij,"Merge pull request #17691 from Snuffleupagus/createWebpackAlias

Move the `alias`-building out of the `createWebpackConfig` function",True
9673a6d344ea4d928c74fcaddb000a35251016bd,2024-03-20 18:39:25,Tim van der Meij,"Merge pull request #17811 from calixteman/simplify_copy_paste_test

Simplify the copy & paste integration test",True
f6b215144d66e4e163ec1f033bc50c5b78ab4216,2024-03-20 02:59:59,Calixte Denizet,Simplify the copy & paste integration test,False
3718d0a9b477eb56f18f5af19b9c179a165af959,2024-03-20 01:26:09,calixteman,"Merge pull request #17809 from calixteman/rotate_editor_layer

Don't hide the editor layer when rotating (follow-up of #17802)",True
a3873e4c68aa025f854ef6f7d2ce214e53e73a7b,2024-03-19 23:06:55,Calixte Denizet,"Don't hide the editor layer when rotating (follow-up of #17802)

Before the patch in #17802, the layer was made visible when calling updateMode
after the rotation angle was set.",False
e892f3b18fd1a2443bafcfb74ba8fabf5d25889c,2024-03-19 21:39:44,calixteman,"Merge pull request #17790 from calixteman/bug1881746

[Editor] Make the text layer focusable before the editors (bug 1881746)",True
1b00511301840d413f3369f834999ee44d3dfa8d,2024-03-19 20:44:55,Calixte Denizet,"[Editor] Make the text layer focusable before the editors (bug 1881746)

Keep the different layers in a constant order to avoid the use of a z-index
and a tab-index.",False
0022310b9c73b3af0d2926158c768ca3df408ad6,2024-03-19 15:34:28,Jonas Jenwald,"Merge pull request #17706 from Snuffleupagus/Node-Fetch-API

[api-minor] Use the Fetch API, when supported, to load PDF documents in Node.js environments",True
a142c8c9457dddd5d784948254504bdc56dc1b3e,2024-03-19 15:20:34,calixteman,"Merge pull request #17802 from calixteman/fix_tests

[Editor] Fix the rect used to click in some freetext integration tests",True
f881e56510977fbd7f9d5bb3bed5c9014aeee313,2024-03-18 15:50:32,Jonas Jenwald,"Merge pull request #17800 from Snuffleupagus/update-packages

Update packages and translations",True
5437199c95c46833834d0893135eb0583ba0b133,2024-03-18 14:59:32,Calixte Denizet,"[Editor] Fix the rect used to click in some freetext integration tests

And avoid to uselessly set the pointer listeners in the annotation editor layer.",False
10305bf181bf744685275420eedc38745166dfb7,2024-03-18 14:48:44,calixteman,"Merge pull request #17795 from calixteman/issue17794

Don't render corrupted inlined images",True
601bf580f9164bf920ff681535be28bc6b09c0fb,2024-03-17 18:22:15,Jonas Jenwald,Update l10n files,False
93c09b050270a1f133a868e131a0e83b546cc650,2024-03-17 18:20:21,Jonas Jenwald,Update npm packages,False
8ac57a63f70fd458fc0df58ca33583c4ccf2ece7,2024-03-17 13:53:25,Jonas Jenwald,"Merge pull request #17799 from mozilla/dependabot/npm_and_yarn/follow-redirects-1.15.6

Bump follow-redirects from 1.15.4 to 1.15.6",True
a26fe9a902aa6219abe36db82678795974821329,2024-03-17 04:30:41,dependabot[bot],"Bump follow-redirects from 1.15.4 to 1.15.6

Bumps [follow-redirects](https://github.com/follow-redirects/follow-redirects) from 1.15.4 to 1.15.6.
- [Release notes](https://github.com/follow-redirects/follow-redirects/releases)
- [Commits](https://github.com/follow-redirects/follow-redirects/compare/v1.15.4...v1.15.6)

---
updated-dependencies:
- dependency-name: follow-redirects
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>",False
2a68724b5342f8ac8e038f6ed2e1a39b2132d7d8,2024-03-15 21:00:39,calixteman,"Merge pull request #17793 from calixteman/zoom_wheel_ctrl

When zooming the scrollbar can disappear and then no scrollend is triggered",True
65d618635c72172ad9933b4a6da54756f42913e1,2024-03-15 20:07:06,Calixte Denizet,When zooming the scrollbar can disappear and then no scrollend is triggered,False
9c3471dd01bdc9ee35c659caecc89d33556cbce8,2024-03-15 20:03:18,Calixte Denizet,"Don't render corrupted inlined images

Fixes #17794.",False
30e69956db3110b4a14d24af9f3ee74ae1ea03a7,2024-03-12 22:54:37,Jonas Jenwald,"Merge pull request #17694 from Snuffleupagus/validate-defaultOptions

Add better validation for the ""PREFERENCE"" kind `AppOptions`",True
e650b952537aab747df0dfa8dd18e98143d857b0,2024-03-12 22:39:33,Jonas Jenwald,"Merge pull request #17714 from Snuffleupagus/Node-fs-promise

Use `fs/promises` in the Node.js-specific code in the `src/`-folder",True
a7d47af474784e1377b529096971565ef83b630d,2024-03-12 20:13:19,calixteman,"Merge pull request #17732 from calixteman/editor_highlight_floating_button

[Editor] Add a floating button close to the selected text to highlight it (bug 1867742)",True
b54887cfabf6a73770c609c859cbf43198607720,2024-03-12 19:45:19,Jonas Jenwald,"Merge pull request #17717 from Snuffleupagus/pr-17681-follow-up

Combine a few lines in the `dist-pre` target (PR 17681 follow-up)",True
b4267cd2947a132df370afa507df5a96c983a204,2024-03-12 19:36:46,Calixte Denizet,"[Editor] Add a floating button close to the selected text to highlight it (bug 1867742)

For now keep this feature behind a pref in order to make some experiments before
deciding to enable it.",False
eb160726eeab5e4586b39294b26dea0076dd4561,2024-03-12 18:39:57,Jonas Jenwald,"Merge pull request #17726 from Snuffleupagus/OptionalContent-Usage

[api-minor] Implement basic support for OptionalContent `Usage` dicts (issue 5764, bug 1826783)",True
70b6ddc5d967249d6082aa8116d65770da860546,2024-03-12 17:48:15,Jonas Jenwald,"Move the /SetOCGState handling into the `OptionalContentConfig` class (PR 15377 follow-up)

This helps ensure that /SetOCGState actions always take the `Usage` dictionary into account as expected.",False
3c78ff5fb06c2f3285ece6c0a3d1b521d7d5d9f0,2024-03-12 17:48:15,Jonas Jenwald,"[api-minor] Implement basic support for OptionalContent `Usage` dicts (issue 5764, bug 1826783)

The following are some highlights of this patch:
 - In the Worker we only extract a *subset* of the potential contents of the `Usage` dictionary, to avoid having to implement/test a bunch of code that'd be completely unused in the viewer.

 - In order to still allow the user to *manually* override the default visible layers in the viewer, the viewable/printable state is purposely *not* enforced during initialization in the `OptionalContentConfig` constructor.

 - Printing will now always use the *default* visible layers, rather than using the same state as the viewer (as was the case previously).
   This ensures that the printing-output will correctly take the `Usage` dictionary into account, and in practice toggling of visible layers rarely seem to be necessary except in the viewer itself (if at all).[1]

---
[1] In the unlikely case that it'd ever be deemed necessary to support fine-grained control of optional content visibility during printing, some new (additional) UI would likely be needed to support that case.",False
e647311a89ca9e5c69e4ccac07b1fed0f88bc9b8,2024-03-12 02:27:11,calixteman,"Merge pull request #17788 from calixteman/bug1881743

[Editor] Improve the accessibility of the highlight editor (bug 1881743)",True
f676c2c0c8fa53e74ef2d8174802b519a30067ae,2024-03-11 18:51:43,Calixte Denizet,[Editor] Improve the accessibility of the highlight editor (bug 1881743),False
b14f6960710127adccba3a5fca5906c333259da5,2024-03-08 16:21:34,Jonas Jenwald,"Merge pull request #17711 from Snuffleupagus/importl10n-Fetch-API

Use the Fetch API to download the l10n files",True
ea4b55a0e6cb82bc4fae948ac42f73ab46ff7ef7,2024-03-08 14:39:51,Jonas Jenwald,Update l10n files,False
2b407990e22765e76c7d1de0a2808ec31f0691ea,2024-03-08 14:38:15,Jonas Jenwald,"Use the Fetch API to download the l10n files

Given that the Fetch API is supported since Node.js 18 we should be able to use it when downloading l10n files, which allows us to simplify the code and to make it fully `async`.",False
fb9e4384428b8b622ddda30bb9dd560aa7adfca5,2024-03-08 02:14:53,calixteman,"Merge pull request #17781 from calixteman/stamp_altext_button_cp

[Editor] Make sure the alt-text button is there when pasting an image from an other tab",True
406018934aef28b602566c90e1350f0c295f0fa5,2024-03-07 23:19:09,calixteman,"Merge pull request #17778 from calixteman/highlight_show_all

[Editor] Add a toggle button to show/hide all the highlights (bug 1867740)",True
0f8dda1af041e7d90ce134bded1db8016b658204,2024-03-07 22:54:34,Calixte Denizet,[Editor] Make sure the alt-text button is there when pasting an image from an other tab,False
39aeea3e948e392dec0234a7f512ee2c5cbe3b12,2024-03-07 17:46:59,Calixte Denizet,[Editor] Add a toggle button to show/hide all the highlights (bug 1867740),False
6bb6ce6a5d133c5aa318e2fff9d1df5326a1ea96,2024-03-06 19:09:58,calixteman,"Merge pull request #17767 from calixteman/automation_win_listener

In the m-c automation, give the possibility to remove window listeners when a test ended",True
6d0835dc5246c3ac64ef7cc5dbdfbafc173fc140,2024-03-06 18:51:57,Calixte Denizet,"In the m-c automation, give the possibility to remove window listeners when a test ended

The goal is to avoid to have some exceptions in the logs when a test finished.",False
9ee4c6528d0f2f849803f7d73f950a2ecfcdd0d0,2024-03-06 15:23:11,calixteman,"Merge pull request #17776 from calixteman/bug1883609

[Annotations] Widget annotations must be in front of the other ones (bug 1883609)",True
4e1b96c781eae495737bf966dbf06653b24964f1,2024-03-05 23:34:58,Calixte Denizet,[Annotations] Widget annotations must be in front of the other ones (bug 1883609),False
f634cb533ccb1a772c3b7af658fdc6883ee2e4d4,2024-03-05 21:44:48,calixteman,"Merge pull request #17775 from calixteman/bug1883632

[Editor] Let a free highlight be clipped when its bounding box exceeds the page limits (bug 1883632)",True
bd5875d066da2bc6754c99a96872c3dff7e01f07,2024-03-05 21:17:07,Calixte Denizet,[Editor] Let a free highlight be clipped when its bounding box exceeds the page limits (bug 1883632),False
f1272ee435b5283f2e241d0026c01116aaa27aec,2024-03-05 18:41:12,calixteman,"Merge pull request #17771 from calixteman/bug1832519

[GeckoView] Remove the open-in-app button (bug 1832519)",True
b447a62feaf579c86bb39fca444503f4c21911d0,2024-03-05 17:24:24,calixteman,"Merge pull request #17772 from calixteman/reporttelemetry

Don't stringify data for telemetry",True
ba3e55958384c18657a824d57b1e1bfd61e54be8,2024-03-05 00:47:47,Calixte Denizet,Don't stringify data for telemetry,False
3cb58f84a202612a8db374b8544e3c9dccb3d804,2024-03-05 00:02:12,Calixte Denizet,[GeckoView] Remove the open-in-app button (bug 1832519),False
c451b6d684e016407430aaca87a1f2c3ac1bd5c2,2024-03-04 23:46:57,calixteman,"Merge pull request #17764 from calixteman/telemetry_null_stats

[Editor] Use a null instead of an empty stats object when sending the telemetry",True
a55f976e2e1780605066fa4e46a73435ba1deec5,2024-03-04 23:46:34,calixteman,"Merge pull request #17766 from calixteman/escape_color_picker

[Editor] Unselect highlight editor when pressing Escape when the focus is on the color picker without a dropdown menu",True
7c9d3af85b7d090132239ba353cdcca75b6421cc,2024-03-04 23:46:15,calixteman,"Merge pull request #17768 from calixteman/bug1883394

[Editor] Set the creation method for free highlights to 'main_toolbar' (bug 1883394)",True
ecb4262b13b53c3877164c1db421012d9881ab57,2024-03-04 21:28:50,Calixte Denizet,[Editor] Set the creation method for free highlights to 'main_toolbar' (bug 1883394),False
1859412507bd6cd9b59b584dc81df6960304ad41,2024-03-04 21:02:09,Calixte Denizet,[Editor] Unselect highlight editor when pressing Escape when the focus is on the color picker without a dropdown menu,False
d096dc79b254fd63276b2bfd7e4187e8c3cf811c,2024-03-04 14:48:24,Calixte Denizet,[Editor] Use a null instead of an empty stats object when sending the telemetry,False
dd3adc84db366fdc8dc8dec6b071121184268970,2024-03-01 21:31:05,Jonas Jenwald,"Merge pull request #17761 from Snuffleupagus/thicknessPicker-disabled

[Editor] Indicate if the highlight-thickness slider is disabled",True
e781b553cb4da296be492ef540bb41563a08cfeb,2024-03-01 20:48:39,Jonas Jenwald,"[Editor] Reduce a bit of CSS duplication for the highlight-thickness ""indicators""",False
c7e7122e25208f9e039bb7cb1d9d5c3640d9141d,2024-03-01 20:48:31,Jonas Jenwald,"[Editor] Indicate if the highlight-thickness slider is disabled

The fact that the highlight-thickness can only be changed in ""free"" mode isn't really obvious visually in the toolbar, so attempt to provide at least some indication of the `disabled`-state by ""dimming"" the slider.",False
29c493d36bb5a44251804e9204973211172e0412,2024-03-01 17:38:44,calixteman,"Merge pull request #17760 from calixteman/fix_quadpoints

[Editor] Fix the quadpoints value when serializing an highlight annotation",True
30101cbb313777b70d5768943a9ba80e338bb84e,2024-03-01 16:06:16,Calixte Denizet,"[Editor] Fix the quadpoints value when serializing an highlight annotation

The coordinates of each point in a box are in the page coordinates system.",False
61036383b5909bc1c6a1f08e1c00bcad97dc883b,2024-03-01 14:53:02,Jonas Jenwald,"Merge pull request #17710 from Snuffleupagus/pr-17277-followup

Simplify the `XMLHttpRequest`-branch in the `fetchData` helper function (PR 17277 follow-up)",True
8f75e34b6f9555dc11340564856f1c22c8e3d842,2024-03-01 03:56:49,calixteman,"Merge pull request #17757 from calixteman/bug1881219

[Editor] Enable the thickness input when no editors are selected (bug 1881219)",True
7af90bb8bc37bc2f16e83dcf582cd7a6325bd0e7,2024-03-01 03:35:33,Calixte Denizet,[Editor] Enable the thickness input when no editors are selected (bug 1881219),False
c409121251028a047cabf751a16eaed18b3815bf,2024-03-01 00:27:57,calixteman,"Merge pull request #17756 from calixteman/bug1882248

[Editor] Make the delete button clickable with the space key (bug 1882248)",True
f52bf2836f80c4c1b8597d8e75594b908576e96a,2024-02-29 23:35:38,Calixte Denizet,[Editor] Make the delete button clickable with the space key (bug 1882248),False
7cc34cf4a74d2f581c07de5db2d1b73fa8f83e85,2024-02-29 23:08:17,calixteman,"Merge pull request #17755 from calixteman/bug1881684

[Editor] Add the possibility to move the caret with the keyboard once  an highlight has been made (bug 1881684)",True
a9f47e87d5556f42991ca935c2f64cb7548aef6d,2024-02-29 22:48:13,Calixte Denizet,[Editor] Add the possibility to move the caret with the keyboard once an highlight has been made (bug 1881684),False
9600c48d4f70a9115b4467bedf13a04bf1f4b15c,2024-02-29 15:04:37,Jonas Jenwald,"Merge pull request #17750 from Snuffleupagus/pr-17748-followup

Inline the `HighlightEditor.#telemetryType` getter at its only call-site (PR 17748 follow-up)",True
a92b38e71c6f68a28e29a65da5e699bad5f4f60e,2024-02-29 01:17:01,Jonas Jenwald,Inline the `HighlightEditor.#telemetryType` getter at its only call-site (PR 17748 follow-up),False
9fe15d4a018ad00d821ed78fbf93bad689f3588a,2024-02-29 00:30:15,calixteman,"Merge pull request #17748 from calixteman/highlight_telemetry_followup

[Editor] Count the colors used when highlighting whatever the highlight kind is",True
3a7e638fcec72964bda030b82220892f3073b6cb,2024-02-28 22:54:24,Calixte Denizet,[Editor] Count the colors used when highlighting whatever the highlight kind is,False
07abd647f42348a8cdfcd5e346b602339bfd44fa,2024-02-28 19:50:57,calixteman,"Merge pull request #17737 from calixteman/highlight_telemetry

[Editor] Add some telemetry for the highlight feature (bug 1866437)",True
65342d2beeff916705086f576099485d3e27a886,2024-02-28 14:47:11,Calixte Denizet,[Editor] Add some telemetry for the highlight feature (bug 1866437),False
b1a04fc1848dc7dd3515851c0b34da635e16780a,2024-02-28 14:04:10,calixteman,"Merge pull request #17738 from calixteman/issue17730

Always add links in the annotation layer",True
e0b843d9918fcdbefe306b32ccba4e6a884de9ae,2024-02-28 03:18:08,Calixte Denizet,"Always add links in the annotation layer

Fixes #17730.",False
06aef89502719bafd788f3cb173fb34f288bf3c0,2024-02-27 18:16:30,calixteman,"Merge pull request #17733 from calixteman/puppeteer_22_1_0

Update puppeteer to 22.3.0",True
5e7941afbf666ed5e281fc71510c3a187c176690,2024-02-27 16:49:54,Calixte Denizet,Update puppeteer to 22.3.0,False
e42b114e80c89b1766ce4b93fe7298c00435173c,2024-02-26 15:35:10,calixteman,"Merge pull request #17724 from calixteman/issue17707

Avoid to have to wait to zoom after scrolling",True
9e042e7accee9c4d41ae53e215e22461592764e2,2024-02-26 02:10:48,Calixte Denizet,"Avoid to have to wait to zoom after scrolling

Allow to zoom with the wheel once the scrolling is finished.
It's now possible to know that thanks to the scrollend event.

Fixes #17707.",False
ca4ab064e500c11c3c121a52725e075992028d2f,2024-02-25 22:22:11,calixteman,"Merge pull request #17720 from calixteman/editor_simplify_highlighting

[Editor] In caret browsing mode, allow to select in pressing shift and arrow down (bug 1881802)",True
0520f2f0cbf8deca284a190a9ee9f1024be38de9,2024-02-25 20:05:30,Calixte Denizet,"[Editor] In caret browsing mode, allow to select in pressing shift and arrow down (bug 1881802)

In implementing caret browsing mode in pdf.js, I didn't notice that selectstart isn't always triggered.
So this patch removes the use of selectstart and rely only on selectionchange.
In order to simplify the selection management, the selection code is moved in the AnnotationUIManager:
 - it simplifies the code;
 - it allows to have only one listener for selectionchange instead of having one by visible page
   for selectstart.
I had to add a delay in the integration tests for highlighting (there's a comment with an explanation),
it isn't really nice, but it's the only way I found and in real life there always is a delay between
press and release.",False
1bd6af6daeef695579dda0546aff9990bcb2a0ed,2024-02-24 02:19:42,calixteman,"Merge pull request #17722 from calixteman/issue17721

Fix the string GlobalConstants.IDS_INVALID_DATE",True
fe41e789de3e10c0405735debbb85c01ff361edf,2024-02-24 02:09:06,Calixte Denizet,Fix the string GlobalConstants.IDS_INVALID_DATE,False
346efe919aabd23519d1b4211e4bfbe319f92b7b,2024-02-23 22:47:10,Jonas Jenwald,"Merge pull request #17718 from Snuffleupagus/hexNumbers-tweak

Tweak how the `hexNumbers` Array, used by `Util.makeHexColor`, is built",True
b8b8f1af667d8badcfa9d51781192f9ff4fd9c58,2024-02-23 21:41:51,calixteman,"Merge pull request #17719 from calixteman/bug1881692

[Editor] In caret browsing mode, get the caret position in the text layer (bug 1881692)",True
bb19cf9b64c246068a1b8107ce3294a7cc0960d9,2024-02-23 21:20:19,Calixte Denizet,"[Editor] In caret browsing mode, get the caret position in the text layer (bug 1881692)

The function caretPositionFromPoint return the position within the last visible element
and sometimes there are some elements on top of the ones in the text layer.
So the idea is to hide the visible elements which aren't in the text layer in order
to get the right caret position.",False
101e8efad7b64778e46210340a252be19455438d,2024-02-23 21:09:03,calixteman,"Merge pull request #17708 from calixteman/editor_highlight_context_menu

[Editor] Add the possibility to create an highlight from the context menu when some text is selected (bug 1867739)",True
e1f6f5179f1920ad7496e6f4e69220a09cf17146,2024-02-23 20:48:03,Calixte Denizet,[Editor] Add the possibility to create an highlight from the context menu when some text is selected (bug 1867739),False
49a2aff53230df3f09665933cc0bbd0c3cf224d6,2024-02-23 18:50:53,Jonas Jenwald,"Tweak how the `hexNumbers` Array, used by `Util.makeHexColor`, is built

*Please note:* This is a micro optimization, hence I fully understand if the patch is rejected.

Currently we create two temporary Arrays and have to iterate twice in total when building the final `hexNumbers` Array.
With this patch there's only one temporary Array and a single iteration required to build the final `hexNumbers` Array.",False
dab8a2eaa4b988f1c13642160df22c303969e9d9,2024-02-23 18:02:04,Jonas Jenwald,"Combine a few lines in the `dist-pre` target (PR 17681 follow-up)

In PR 17681 I completely missed that we can combine a number of lines in the `dist-pre` target, which helps reduce code size a little bit.",False
db2849cc173ee5037000378453766137dbb6a1e6,2024-02-22 21:20:13,Jonas Jenwald,"Use `fs/promises` in the Node.js-specific code in the `src/`-folder

This is available in all Node.js versions that we currently support, and using it allows us to remove callback-functions; please see https://nodejs.org/docs/latest-v18.x/api/fs.html#promises-api",False
33c5ef349e6decab66e189080ddf6b3c071960bc,2024-02-22 03:30:24,Jonas Jenwald,Simplify the `XMLHttpRequest`-branch in the `fetchData` helper function (PR 17277 follow-up),False
eded037d060fb6dcdfa0342fc0f6a663e4f5596e,2024-02-22 03:08:42,Jonas Jenwald,"[api-minor] Use the Fetch API, when supported, to load PDF documents in Node.js environments

Given that modern Node.js versions now implement support for a fair number of ""browser"" APIs, we can utilize the standard Fetch API to load PDF documents that are specified via http/https URLs.

Please find compatibility information at:
 - https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API#browser_compatibility
 - https://nodejs.org/dist/latest-v18.x/docs/api/globals.html#fetch
 - https://developer.mozilla.org/en-US/docs/Web/API/Response#browser_compatibility
 - https://nodejs.org/dist/latest-v18.x/docs/api/globals.html#response",False
72b8b29147c3a19ccacc9db111df4925efcbe1bf,2024-02-21 14:44:40,calixteman,"Merge pull request #17701 from calixteman/alt_text_ai

[Editor] Add the possibility to query some ML stuff to guess an alt text for an image",True
0fb8a2305111b01eea5cab5607caa8f18a003677,2024-02-21 14:19:48,calixteman,"Merge pull request #17702 from calixteman/bug1868759

[Editor] Disable annotation layer when highlighting (bug 1868759)",True
46416bb131bc35c54e8d2a381f30c7b1e3eff639,2024-02-21 01:59:33,Calixte Denizet,"[Editor] Add the possibility to query some ML stuff to guess an alt text for an image

It's only for an experimental purpose.",False
95f9bedc7c96ef515d84ed28a884a0b6a3decc75,2024-02-21 01:47:05,Calixte Denizet,"[Editor] Disable annotation layer when highlighting (bug 1868759)

When highlighting, the annotation editor layer is disabled to get pointer events
from the text layer, but the annotation layer must be then disabled either in
order to avoid bad interactions.",False
38004b65b14ba459b4369788f149f497d6dd26a3,2024-02-20 23:08:18,Jonas Jenwald,"Re-factor how the `compatibilityParams`, in the viewer, are handled

Previously we'd simply export this directly from `web/app_options.js`, which meant that it'd be technically possible to *accidentally* modify the `compatibilityParams` Object when accessing it.
To avoid this we instead introduce a new `AppOptions`-method that is used to lookup data in `compatibilityParams`, which means that we no longer need to export this Object.

Based on these changes, it's now possible to simplify some existing code in `AppOptions` by taking full advantage of the nullish coalescing (`??`) operator.",False
90b26646222df2e6092477e946cd9b3cc70f9fbf,2024-02-20 23:08:15,Jonas Jenwald,"Add better validation for the ""PREFERENCE"" kind `AppOptions`

Given that the ""PREFERENCE"" kind is used e.g. to generate the preference-list for the Firefox PDF Viewer, those options need to be carefully validated.
With this patch we'll now check this unconditionally in development mode, during testing, and when creating the preferences in the gulpfile.",False
70015ffe6ba32f58ba0424ab20cabee5f28b9d9d,2024-02-20 21:30:43,calixteman,"Merge pull request #17688 from calixteman/editor_no_scroll_unselect

[Editor] Avoid to scroll when an editor is unselected",True
99fa713fba48a3ca32533a062ce24f4857a1ca60,2024-02-19 16:34:07,calixteman,"Merge pull request #17690 from calixteman/issue17689

Avoid to access to a missing cidSystemInfo property",True
f295c51cc5fb5a7f61750578a72141422dc36b49,2024-02-19 16:04:48,Jonas Jenwald,"Use more optional chaining, and other modern JS, in the building code",False
fbcb68360981188f57201e590d5c66429084fcf1,2024-02-19 16:04:44,Jonas Jenwald,"Move the `alias`-building out of the `createWebpackConfig` function

Over time, as we've started relying more and more on import maps, the number of aliases have increased a lot. This is now affecting the size and readability of `createWebpackConfig`, which was already fairly large and complex, hence moving the aliases to their own function should help improve things a little bit.",False
a6eadf8150cb4cf2c867b046111d795b1fe3c8e6,2024-02-19 14:25:23,Calixte Denizet,"Avoid to access to a missing cidSystemInfo property

Fixes #17689.",False
c2fcc66302d40b39fa20e5a4f814aa6d5f63d64e,2024-02-18 23:51:45,Calixte Denizet,[Editor] Avoid to scroll when an editor is unselected,False
d96fd80ca0b2272d999007da0b150f10096b3233,2024-02-18 18:05:23,Tim van der Meij,"Merge pull request #17687 from Snuffleupagus/pr-17686-followup

Disable source-map generation in the minified builds (PR 17686 follow-up)",True
673639c54b5df26e3341fc9de085496de03be219,2024-02-18 02:44:37,Jonas Jenwald,"Disable source-map generation in the minified builds (PR 17686 follow-up)

As part of the changes in PR 17686 we ""accidentally"" enabled source-maps for the *minified* builds, which seems unnecessary since those have never been included in the `pdfjs-dist` output.
Locally this patch reduces the run-time of `gulp minified` by ~15 percent.",False
4ac8ee8b6dbc5e97059de33d894426e3084ec018,2024-02-18 00:12:35,Tim van der Meij,"Merge pull request #17686 from Snuffleupagus/Webpack-TerserPlugin

Run minification directly during Webpack building",True
091e86153108e70f25442a821778017f0836a8bf,2024-02-17 23:21:34,Jonas Jenwald,"Run minification directly during Webpack building

Rather than first building the library and then use Terser ""manually"" to minify the files, we can utilize a Webpack plugin to combine these steps which helps to simplify the gulpfile.",False
8487c67cb892a046d0dab51de6b46121f0fb7703,2024-02-17 22:52:51,Tim van der Meij,"Merge pull request #17684 from timvandermeij/modernize-webserver-pt2

Modernize the webserver code (part 2)",True
33955980c809ec7089725ec0bfdffe778a5eb9ad,2024-02-17 22:39:51,Tim van der Meij,"Merge pull request #17685 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
2e6fa797d94f08eb8438a375ae3b747c2294e598,2024-02-17 20:52:10,Tim van der Meij,"Improve the webserver's constructor

This makes the webserver configurable during instantiation rather than
having to set the parameters afterwards.",False
985ba77579fe4f26969b77fbd9d8b4e9e565193c,2024-02-17 20:52:10,Tim van der Meij,"Modernize the remainder of the webserver's code and enable the `no-var` ESLint rule

This commit also moves the content type logic into a helper method to
ever so slightly reduce duplication.",False
0015eb2431e35d58aaa7b44b040ea6e7dcd91ff6,2024-02-17 20:52:10,Tim van der Meij,"Modernize the webserver's handler method

This commit converts `var` to `const`/`let`, gives the variables more
readable names and annotates the code to make the flow clearer.",False
6ef813af010c226128189bcf24e57752bc604612,2024-02-17 20:52:10,Tim van der Meij,"Extract and modernize the webserver's request checking code

The `handler` method contained this code in two inline functions,
triggered via callbacks, which made the `handler` method big and harder
to read. Moreover, this code relied on variables from the outer scope,
which made it harder to reason about because the inputs and outputs
weren't easily visible.

This commit fixes the problems by extracting the request checking code
into a dedicated private method, and modernizing it to use e.g. `const`/
`let` instead of `var` and using template strings. The logic is now
self-contained in a single method that can be read from top to bottom
without callbacks and with comments annotating each check/section.",False
43cdc1ca8a36063c1d86af71ccaeb3c66cb29519,2024-02-17 20:30:18,Tim van der Meij,Update translations to the most recent versions,False
6baa439e15d2deb0f5de8b4cb2bbe0d2755bba2d,2024-02-17 20:30:18,Tim van der Meij,Update dependencies to the most recent versions,False
f1a225889be50ee2d00d080449bce7f2f92a4d96,2024-02-17 19:38:30,Tim van der Meij,"Merge pull request #17681 from Snuffleupagus/parseMinified-changes

Tweak the `parseMinified` handling slightly in the gulpfile",True
678c79cc78da6c076fa24367c08ecdda369dcccd,2024-02-17 19:28:24,Tim van der Meij,"Merge pull request #17678 from Snuffleupagus/pr-17637-followup

Remove unneeded `tweakWebpackOutput` usage in the gulpfile (PR 17637 follow-up)",True
fd5d0400730501fe59e5aee4ce5b23dfa424b9ea,2024-02-17 19:24:53,Tim van der Meij,"Merge pull request #17667 from Snuffleupagus/createPrintService-params

Change `PDFPrintServiceFactory.createPrintService` to take a parameter object",True
179a3ecee6cd4cd1b8339d4dc112261444ba0404,2024-02-17 18:59:08,Jonas Jenwald,"Merge pull request #17680 from Snuffleupagus/issue-17679

Add a dummy `beginMarkedContentProps` operator when optional content parsing fails (issue 17679)",True
b767e12111acf63f432881ce55d38000a9758c7c,2024-02-17 18:24:00,Jonas Jenwald,"Merge pull request #17676 from Snuffleupagus/app-findBar-optional-chain

Access `PDFViewerApplication.findBar` safely in more spots (PR 15831 follow-up)",True
a7bcc81eb188faf83c4ca10c8a8de0a6b67c3595,2024-02-17 18:15:16,Jonas Jenwald,Add a dummy `beginMarkedContentProps` operator when optional content parsing fails (issue 17679),False
75a5b2051d315b4c24f30841593c1d6e08f6e936,2024-02-16 21:24:13,Jonas Jenwald,"Tweak the `parseMinified` handling slightly in the gulpfile

 - Run the minification in ""parallel"" since that should be a *tiny* bit more efficient.
 - Don't rename the minified files since that seems unnecessary, especially considering that they are only used in the `dist-pre` target where we currently change the name back manually.",False
751611f690e452f81fe6551617cfb0ee02017503,2024-02-16 16:12:40,Jonas Jenwald,"Remove unneeded `tweakWebpackOutput` usage in the gulpfile (PR 17637 follow-up)

After the changes in PR 17637 there's no longer any reason to invoke `tweakWebpackOutput` without an argument, since the `__non_webpack_import__` re-writing was moved into the Babel plugin.
This way we can avoid a (little) bit of unnecessary parsing during building.",False
b420bd8b2015af971a301e2800755353de304e6c,2024-02-15 15:55:29,Jonas Jenwald,"Access `PDFViewerApplication.findBar` safely in more spots (PR 15831 follow-up)

Note that this patch is the result of code-inspection, and the code as written doesn't (currently) cause any bugs in e.g. the GeckoView PDF Viewer.",False
a83a8d7e4feb0d35b4286475c10ad10ba114a6f5,2024-02-15 14:49:55,calixteman,"Merge pull request #17674 from calixteman/issue17671

Fix the endoffset of the last glyph when it's followed by a null offset in the loca table",True
dbda3ec5f98b23242e2b58f0b6aab01283cef5f3,2024-02-15 02:53:24,Jonas Jenwald,"Merge pull request #17637 from Snuffleupagus/babel-plugin-__non_webpack_import__

Move the `__non_webpack_import__` re-writing into the Babel plugin",True
fcad3718f088da91cd2263e26b40309c25242583,2024-02-14 21:50:04,Calixte Denizet,"Fix the endoffset of the last glyph when it's followed by a null offset in the loca table

It fixes #17671.",False
a204f434f39ebabe82221cfcf280710180d9a03f,2024-02-14 01:58:02,Jonas Jenwald,"Change `PDFPrintServiceFactory.createPrintService` to take a parameter object

By ""modernizing"" the method to use a parameter object instead, we avoid having to pass along the needed parameters individually.",False
14874e50b788cb8d2c57cdfa97d37fc0afe6c543,2024-02-13 19:15:14,calixteman,"Merge pull request #17636 from calixteman/bug1878916

When updating, write the xref table in the same format as the previous one (bug 1878916)",True
2133da166ed21754c669c97b35c114ba4414b4f0,2024-02-13 18:44:37,Calixte Denizet,"When updating, write the xref table in the same format as the previous one (bug 1878916)

The specs are unclear about what kind of xref table format must be used.
In checking the validity of some pdfs in the preflight tool from Acrobat
we can guess that having the same format is the correct way to do.
The pdf in the mentioned bug, after having been changed, wasn't correctly
displayed in neither Chrome nor Acrobat: it's now fixed.",False
e60329cea12358c7ad38a63797f3018b37a12563,2024-02-13 17:09:36,Jonas Jenwald,"Merge pull request #17666 from Snuffleupagus/issue-17665

Skip any whitespace after the first object in linearized PDFs (issue 17665)",True
37e98e39f60bd15c8954a88572ccb0a2842e9dd0,2024-02-13 02:35:36,Jonas Jenwald,"Skip any whitespace after the first object in linearized PDFs (issue 17665)

This way the code is now consistent with the non-linearized branch in the `PDFDocument.startXRef` getter.",False
05b035602e819127c99caedfa0c56e8f20028057,2024-02-12 23:09:18,calixteman,"Merge pull request #17664 from calixteman/bug1879281

[Editor] Ends a free highlight where the mouse pointer is (bug 1879281)",True
750b8e328a03ac3ac5925123b5e6090a8ac7c696,2024-02-12 21:56:33,Calixte Denizet,[Editor] Ends a free highlight where the mouse pointer is (bug 1879281),False
eb5e6e68d69203b57c50172e367f4e086391afcb,2024-02-12 18:44:29,Jonas Jenwald,"Merge pull request #17663 from Snuffleupagus/pr-17428-test

Tweak the issue 11878 unit-test parsing time check (PR 17428 follow-up)",True
f0343dcfdb4d7f7ffd656643b5f013c0b0fd32dc,2024-02-12 17:11:43,calixteman,"Merge pull request #17662 from calixteman/bug1879108

[Editor] Set rotated free highlight at the right position after having changed its thickness (bug 1879108)",True
19ef3e367b1b2d1421ae0aafa67f7ce110497e60,2024-02-12 17:01:55,Jonas Jenwald,"Tweak the issue 11878 unit-test parsing time check (PR 17428 follow-up)

This unit-test has been failing occasionally in Chrome and Node.js, hence we tweak the parsing time check to reduce the likelihood of that happening.",False
18959e80be583dc1c60335aa69fbd39a35dad469,2024-02-12 16:20:24,Jonas Jenwald,"Merge pull request #17661 from timvandermeij/modernize-webserver

Modernize the webserver code (part 1)",True
4ab0ad32167bd1189dead51a565e66772317d571,2024-02-12 15:19:43,Jonas Jenwald,"Move the `__non_webpack_import__` re-writing into the Babel plugin

Note how we're using custom `__non_webpack_import__`-calls in the code-base, that we replace during the post-processing stage of the build, to be able to write `import`-calls that Webpack will leave alone during parsing.
This work-around is necessary since we let Babel discards all comments, given that we generally don't need/want them in the builds, hence why we cannot utilize `/* webpackIgnore: true */`-comments in the source-code.

After the changes in PR 17563 it thus seems to me that we should be able to just move this re-writing into the Babel plugin instead.",False
d742daf4b78747883a7ecf925ddedb208190de70,2024-02-12 13:55:59,Jonas Jenwald,"Merge pull request #17647 from Snuffleupagus/babel-rm-empty-nodes

Remove empty, top-level, nodes in the Babel plugin",True
de1985abbbc5be9f1eb9e848fd8fadd48c4e4a47,2024-02-12 01:36:56,Calixte Denizet,[Editor] Set rotated free highlight at the right position after having changed its thickness (bug 1879108),False
ce4fe0c23415d5a29eaa59cf75837e14b1795cb8,2024-02-12 00:36:21,Tim van der Meij,"Extract and modernize the webserver's directory listing code

The `handler` method contained this code in an inline function, which
made the `handler` method big and harder to read. Moreover, this code
relied on variables from the outer scope, which made it harder to reason
about because the inputs and outputs weren't easily visible.

This commit fixes the problems by extracting the directory listing code
into a dedicated private method, and modernizing it to use e.g. `const`/
`let` instead of `var` and using template strings.",False
5cfaff508cad1c08acdc610f5750110c8a4acf79,2024-02-11 23:23:09,calixteman,"Merge pull request #17651 from calixteman/add_enableStamp_pref

Revert ""Remove the `enableStampEditor` preference"" (bug 1879588)",True
f15b4b34fd1fa37dd01f50f97352edb2c706f87e,2024-02-11 23:22:37,calixteman,"Merge pull request #17650 from calixteman/editor_highlight_keyboard

[Editor] Add a way to highlight text in using the keyboard (bug 1877426)",True
9980447d25125385fcea09a46c4ac86459ffe1c2,2024-02-11 23:02:36,calixteman,"Merge pull request #17652 from calixteman/editor_disable_thickness

[Editor] Disable the thickness slider for non-free highlight",True
336fcffd283f39b4a2663edcbe101cbb4843a8c5,2024-02-11 21:34:38,Tim van der Meij,"Extract and modernize the webserver's range file serving code

The `handler` method contained this code in an inline function, which
made the `handler` method big and harder to read. Moreover, this code
relied on variables from the outer scope, which made it harder to reason
about because the inputs and outputs weren't easily visible.

This commit fixes the problems by extracting the range file serving code
into a dedicated private method, and modernizing it to use e.g. `const`/
`let` instead of `var` and using template strings.",False
56d9930a7bd2fec5fe5cdf6f761533ba7b5cd4f8,2024-02-11 21:34:30,Tim van der Meij,"Extract and modernize the webserver's file serving code

The `handler` method contained this code in an inline function, which
made the `handler` method big and harder to read. Moreover, this code
relied on variables from the outer scope, which made it harder to reason
about because the inputs and outputs weren't easily visible.

This commit fixes the problems by extracting the file serving code into
a dedicated private method, and modernizing it to use e.g. `const`/`let`
instead of `var` and using template strings.",False
12b96857141fba3002ed2762eed9aa1076501a9c,2024-02-11 21:26:53,Tim van der Meij,Convert the webserver to a proper class with private methods,False
440208daa6385b853d503a1537064ed6e04fd0e1,2024-02-11 18:20:33,Tim van der Meij,"Merge pull request #17658 from Snuffleupagus/ESLint-more-rules

Enable the `no-new-symbol` and `require-yield` ESLint rules",True
8f67ea6dc66f9f59d84a209944cc47b81ccbb6b3,2024-02-11 17:57:22,Jonas Jenwald,"Enable the `no-new-symbol` and `require-yield` ESLint rules

Given that we use both `Symbol`s and generator functions in the code-base enabling these rules cannot hurt (and there's no existing failures). Please find additional information at:
 - https://eslint.org/docs/latest/rules/no-new-symbol
 - https://eslint.org/docs/latest/rules/require-yield",False
4b7382edcbe2ed9e2c1d891139e9ab9ae6bcbfe3,2024-02-11 16:48:31,Tim van der Meij,"Merge pull request #17657 from Snuffleupagus/eslint-jasmine-no-dupes

Prevent duplicate names in unit/integration tests",True
422e46dae9ac81678b68b8c7ae28afa24e5a50f8,2024-02-11 16:39:54,Tim van der Meij,"Merge pull request #17655 from timvandermeij/updates

Update translations and dependencies to the most recent versions",True
5732faee1e7d378fa99d74bb437de502ed64ca2d,2024-02-11 16:15:09,Jonas Jenwald,"Prevent duplicate names in unit/integration tests

Having identical names for different test-cases may result in less helpful output, which we can avoid with the use of the ESLint Jasmine plugin.
This patch enables the rules at the `branch` level, to limit the amount/scope of the changes slightly. (We could thus make this rule more strict in the future, if that's deemed useful.)

Please refer to:
 - https://github.com/tlvince/eslint-plugin-jasmine/blob/master/docs/rules/no-spec-dupes.md
 - https://github.com/tlvince/eslint-plugin-jasmine/blob/master/docs/rules/no-suite-dupes.md",False
485e9cecd745964550ecdbc948c7bf6a6325ccf1,2024-02-11 03:52:49,Jonas Jenwald,"Merge pull request #17646 from Snuffleupagus/app-break-import-cycles

Break import cycles, in the viewer, for `PDFViewerApplication`",True
e98b9b019a1238871189e49cb7fa6a4c3816e2b1,2024-02-11 03:45:57,Jonas Jenwald,"Break import cycles, in the viewer, for `PDFViewerApplication`

Currently the `web/app.js` file pulls in various build-specific dependencies, via the use of import maps, and those files in turn import from `web/app.js` thus creating undesirable import cycles.
To avoid this we instead pass in a `PDFViewerApplication`-reference, immediately after it's been created, to the relevant code.

Note that we use an ESLint plugin rule, see `import/no-cycle`, that is normally able to catch import cycles. However, in this case import maps are involved which is why this wasn't caught.",False
28418598e522b4500db276d1008142fbb36fa73e,2024-02-10 23:35:36,Tim van der Meij,"Update `puppeteer` to version 22.0.0

This is a major version bump that requires two changes on our side:

- The new headless mode is now the default, so we can remove our
  transformation code (see https://github.com/puppeteer/puppeteer/pull/11815).
- The `page.waitForTimeout` API is removed. Sadly we still used it in
  the integration tests (but fortunately much less than before we worked
  on fixing intermittent failures), so until we remove the final
  occurrences we provide an implementation ourselves (see
  https://github.com/puppeteer/puppeteer/pull/11780).

The full changelog can be found here:
https://github.com/puppeteer/puppeteer/releases/tag/puppeteer-core-v22.0.0",False
4feab0c1fae3fa37e66625b6d19ad111229a9698,2024-02-10 23:35:28,Tim van der Meij,"Update `gulp-postcss` to version 10.0.0

This is a major version bump, but the breaking changes don't affect us;
please see https://github.com/postcss/gulp-postcss/releases/tag/10.0.0.",False
29a665981a53fe7bf31e7e0c8201030e4b369e8f,2024-02-10 23:34:54,Tim van der Meij,"Update `eslint-plugin-unicorn` to version 51.0.1

This is a major version bump, but the breaking changes don't affect us;
please see https://github.com/sindresorhus/eslint-plugin-unicorn/releases.",False
913c2caf3755bb824749147a108a55c4421b567d,2024-02-10 23:34:50,Tim van der Meij,"Update `globals` to version 14.0.0

This is a major version bump, but the breaking changes don't affect us;
please see https://github.com/sindresorhus/globals/releases/tag/v14.0.0.",False
7da6f94ca3d58e02cb58c8b1977e37e66d683bd0,2024-02-10 23:34:48,Tim van der Meij,Update dependencies to the most recent versions,False
b278a74b6bc601ffb1b15a24b2865288c25bc241,2024-02-10 23:34:46,Tim van der Meij,Update translations to the most recent versions,False
b5e446213e687ef43ad6425be692353793a80898,2024-02-10 03:24:53,Calixte Denizet,[Editor] Disable the thickness slider for non-free highlight,False
8fc6c5c8a6c4f2f888167aab211d180ccad3afc7,2024-02-10 03:22:24,Calixte Denizet,[Editor] Add a way to highlight text in using the keyboard (bug 1877426),False
bcc95460b6353f15a64091a04ad669428ff267db,2024-02-09 22:51:21,Calixte Denizet,"Revert ""Remove the `enableStampEditor` preference"" (bug 1879588)

This reverts commit e820688510e2c1c24088e76a178a82ef8ebcaf4d.",False
14ef0b4211de6d77504bd62ce470e88698e7ac81,2024-02-09 18:28:24,Jonas Jenwald,"Remove empty, top-level, nodes in the Babel plugin

Looking at the *built* files you'll notice some lines containing nothing more than a semicolon. This is the result of (mostly top-level) `if`-statements, which include `PDFJSDev`-checks, that evalute to `false` during Babel parsing.

This has always annoyed me a bit, and looking at Babel plugin it seems that we can fix this simply by *removing* the relevant nodes.",False
7cfcd00a385314a05e0ff247d80262200a0e1556,2024-02-09 18:26:21,calixteman,"Merge pull request #17645 from calixteman/update_quickjs_3f81070e573e3592728dbbbd04c84c498b20d6dc

Update quickjs to 3f81070e573e3592728dbbbd04c84c498b20d6dc",True
275b6748b6905656cb733643fd5274f8d29f83bf,2024-02-09 16:21:24,Calixte Denizet,"Update quickjs to 3f81070e573e3592728dbbbd04c84c498b20d6dc

According to:
https://github.com/bellard/quickjs/commit/3f81070e573e3592728dbbbd04c84c498b20d6dc
this is a new release of quickjs.",False
964bfe522b37faec5d08ee521b14ee7c4f7f4c73,2024-02-09 02:00:22,calixteman,"Merge pull request #17643 from calixteman/bug1879113

[Editor] Compute the position of the last point before applying rotation (bug 1879113)",True
8d61fc1fde95e9566c1b0077ba9c8e8cb77fbe0c,2024-02-09 01:38:24,Calixte Denizet,[Editor] Compute the position of the last point before applying rotation (bug 1879113),False
0d5183a49f2863ee727d5e5eb5f1829e30782fbd,2024-02-08 20:52:17,Jonas Jenwald,"Merge pull request #17634 from Snuffleupagus/rm-preprocessor-require

Remove support for `require` statements from the build system",True
939134ee555ec74c8a6b11c8b5fcc2098b12bdf6,2024-02-08 20:43:58,calixteman,"Merge pull request #17639 from calixteman/bug1879102

[Editor] Correctly rotate the mask when rotation a free highlight (bug 1879102)",True
c4ac7eef951b28b038eca5d80ebad6c4cb6bc699,2024-02-08 19:59:29,Calixte Denizet,[Editor] Correctly rotate the mask when rotation a free highlight (bug 1879102),False
d7479a59b7ccaeb9eeb04c62dae6a5239a06735b,2024-02-08 19:55:14,calixteman,"Merge pull request #17638 from calixteman/bug1879107

[Editor] Set the right color to size samples in the highlight thickness panelwhen in HCM (bug 1879107)",True
3f68a08ef346837cf5d01585fd190af21e8d3e97,2024-02-08 19:01:10,Calixte Denizet,[Editor] Set the right color to size samples in the highlight thickness panelwhen in HCM (bug 1879107),False
6da9448f6c1acd8b1bc867eab06fb98de5adba5b,2024-02-07 21:03:27,Jonas Jenwald,"Remove the `web-com` import map (PR 17588 follow-up)

With the changes in PR 17588 we're already importing the relevant code via the `web/app.js` file.",False
898172e9d2f48fd40535554ed3b47f1da2a62bdc,2024-02-07 21:03:25,Jonas Jenwald,"Re-factor `PDFPrintServiceFactory` to use import maps

This is very old code, which can (ever so slightly) be simplified now that import maps are available.",False
6a78cf0d9398e8bc35b00f1eb1c3e9f79f234785,2024-02-07 18:04:46,Jonas Jenwald,"Remove support for `require` statements from the build system

This part of the (modern) preprocessor is now dead code, since we no longer use `require` statements anywhere in the main code-base.

Note that as part of the changes leading up to PDF.js version `4` we removed all[1] the remaining `require` statements, and we also have an ESLint rule to ensure that no new ones are accidentally added.

---
[1] With two small exceptions, in benchmarking-code and in the Webpack-example.",False
60fd9d583df2376cc4f3899febc7a64851477932,2024-02-07 14:46:52,calixteman,"Merge pull request #17611 from calixteman/caret_browsing_mode

Implement caret browsing mode (bug 807730)",True
81466ee0390913b9ff2f4d3b6eaa03d2ded9490f,2024-02-07 14:05:22,Calixte Denizet,"Implement caret browsing mode (bug 807730)

The users will be able to navigate within the pdf in using the arrows
and they'll be able to select some text, for example in order to
highlight it.",False
7d9cc49010bacac5a0606a6537422bf9a4d18f55,2024-02-04 19:54:26,Tim van der Meij,"Merge pull request #17620 from Snuffleupagus/PDFDataTransportStream-signature

Simplify the signature of the `PDFDataTransportStream` constructor",True
06cd27880867b51711c637a48004a9e7528575d2,2024-02-03 17:40:42,Jonas Jenwald,"Simplify the signature of the `PDFDataTransportStream` constructor

Given that we need to pass in a `PDFDataRangeTransport`-instance a number of the needed parameters can be obtained from it, rather than having to specify them manually.",False
247af2ee09f3070a921fe233c3d6ffed58f63294,2024-02-02 19:34:12,Jonas Jenwald,"Merge pull request #17619 from Snuffleupagus/string-split-limit

Use a limit, in more places, when splitting strings",True
363dce6744993f88d8fc95b9f28afa0a598eec6e,2024-02-02 17:40:52,Jonas Jenwald,"Use a limit, in more places, when splitting strings

This should be a *tiny* bit more efficient, since it avoids parsing substrings that we don't care about.

*Please note:* I cannot find an ESLint rule to enforce this automatically.",False
af4d2fa53c3a1fae35619ba2ac1b69499ec78c41,2024-02-01 18:52:19,Jonas Jenwald,"Merge pull request #17610 from Snuffleupagus/createBundleFallback-dev-path

Point the *development mode* fallback locale-path to the `l10n`-folder (issue 17609, PR 17603 follow-up)",True
da8297115feeed4ee61309f53a3a36d6e3b6c1ea,2024-02-01 17:33:36,Jonas Jenwald,"Point the *development mode* fallback locale-path to the `l10n`-folder (issue 17609, PR 17603 follow-up)",False
cbbd1fcaa31cfa11042db307ff5d752e879450b5,2024-02-01 16:36:27,calixteman,"Merge pull request #17608 from wojtekmaj/fix-annotation-layer-parameters

Make downloadManager optional in AnnotationLayerParameters",True
f80ba44fb0fc95044f1cb2b556614fc76ee39bb4,2024-02-01 15:38:12,Wojciech Maj,"Make downloadManager optional in AnnotationLayerParameters

Continuation of fix started in #17038",False
49bcce27c10977f947c927144d562a2c0206048b,2024-02-01 14:30:28,calixteman,"Merge pull request #17605 from calixteman/file_perm

Change file permissions for newly added cursors",True
081be89f54cf0215d8aaec546aa9146098c9bd50,2024-02-01 14:26:59,Calixte Denizet,Change file permissions for newly added cursors,False
eb5c1d441ab03c88d7031d6d04f8441f983b8307,2024-02-01 02:42:52,Jonas Jenwald,"Merge pull request #17604 from Snuffleupagus/externalServices-lazy-init

Initialize the `ExternalServices`-instance lazily in the viewer (PR 17588 follow-up)",True
f11dc611b31ea4c2c49ad3ad1fa7616ca6e18ba3,2024-02-01 00:52:57,Jonas Jenwald,Initialize the `ExternalServices`-instance lazily in the viewer (PR 17588 follow-up),False
9588bceff56819966a4616fe67fc5ff4d4654151,2024-01-31 19:46:48,Jonas Jenwald,"Merge pull request #17603 from Snuffleupagus/GenericL10n-fallback

Ensure that `GenericL10n` works if the locale files cannot be loaded",True
97c2ce9da02dfc3ee3a563342e48540c07c18a6f,2024-01-31 18:37:11,Jonas Jenwald,"Ensure that `GenericL10n` works if the locale files cannot be loaded

 - Ensure that localization works in the GENERIC viewer, even if the necessary locale files cannot be loaded.
   This was the behaviour prior to the introduction of Fluent, and it seems worthwhile to keep that (especially since we already bundle the en-US strings anyway).

 - Let the `GenericL10n`-implementation use the *bundled* en-US strings directly when no language is provided.

 - Remove the `NullL10n`-implementation, and simply fallback to `GenericL10n`, to reduce the maintenance burden of viewer-components localization.

 - Indirectly, given the previous point, stop exporting `NullL10n` in the viewer-components since it's now removed.
   Note that it was never really intended to be used directly and only existed as a fallback.

*Please note:* This doesn't affect the Firefox PDF Viewer, thanks to the use of import maps.",False
833d7ac8303c9002a65911efa6dd4dea4d127db6,2024-01-31 01:04:47,calixteman,"Merge pull request #17602 from calixteman/editor_free_highlight_lastpoint

[Editor] Fix the position of the free highlight toolbar",True
245fd02141e597ea2c58c15dd078c76c6ce1d2c8,2024-01-30 22:26:52,calixteman,"Merge pull request #17586 from calixteman/editor_freehighlight_outline_inside

[Editor] Remove the outline which is inside the free highlight shape",True
f7ed040aa638d75d471fa9de52094ce9015e15d3,2024-01-30 21:46:04,calixteman,"Merge pull request #17598 from calixteman/update_highlight_cursors

[Editor] Update highlight cursors",True
30643610995345393466b7c0433f95494d026c43,2024-01-30 20:41:18,Calixte Denizet,[Editor] Update highlight cursors,False
7529c1e3dc3b236918df9cfc74c12f170ef4c847,2024-01-30 20:10:33,Calixte Denizet,[Editor] Fix the position of the free highlight toolbar,False
b88c6f9c39d6cfbe3b275cdfdbbffb9974779782,2024-01-30 19:10:56,Calixte Denizet,"[Editor] Remove the outline which is inside the free highlight shape

When an highlight is self-intersecting, the outline was drawn inside.
In order to remove it, we use a svg mask to exclude the shape inside
when drawing the outlines.
That leads to change the outline 1px,white-2px,blue-1px,white to a
2px,white-2px,blue: the part of the stroke which is inside the shape
is removed because of the mask.",False
56dabe93905aa00a36f50d02d5f456e837b91128,2024-01-29 17:27:42,Jonas Jenwald,"Merge pull request #17596 from nicolo-ribaudo/fix-babel-plugin

Fix transform of unary expression in Babel plugin",True
a352f2878536486be8b9dd753faadbb294184e40,2024-01-29 16:23:17,Nicolò Ribaudo,"Fix transform of unary expression in Babel plugin

All of our static evaluation & dead-code elimination transforms need to
happen in post-order, transforming inner nodes first. This is so that
in complex nested cases all transforms see the simplified version of
their inner nodes.

For example:
  async getNimbusExperimentData() {
    if (!PDFJSDev.test(""GECKOVIEW"")) { return null; }
    // other code
  }
-> [evaluation of PDFJSDev.*]
  async getNimbusExperimentData() {
    if (!false) { return null; }
    // other code
  }
-> [!false -> true]
  async getNimbusExperimentData() {
    if (true) { return null; }
    // other code
  }
-> [if (true) -> replace with the if branch]
  async getNimbusExperimentData() {
    return null;
    // other code
  }
-> [early return -> remove dead code]
  async getNimbusExperimentData() {
    return null;
    // other code
  }

This was done correctly in all cases except for our `UnaryExpression`
transform, which was happening in pre-order.",False
802f702695ea0dc19795b24c1361516201433783,2024-01-28 23:24:15,Jonas Jenwald,"Merge pull request #17593 from Snuffleupagus/debuggerSrc-AppOptions

Move the `debuggerSrc`-parameter into the `AppOptions`",True
eb36fd375c0c127c74fac88e79d9c1cd9bd7b1ee,2024-01-28 23:17:51,Jonas Jenwald,"Move the `debuggerSrc`-parameter into the `AppOptions`

Having this parameter among a list of DOM-elements seems slightly strange now, however this is very old code hence the explanation for why this was done is for historical reasons (as is often the case).
Hence we can simply move this into `AppOptions` instead, which seems more appropriate overall.",False
2e2127cbb5497f735601eb2ac7cc059dd36c987a,2024-01-28 22:41:21,Tim van der Meij,"Merge pull request #17592 from Snuffleupagus/viewer-generate-fileInput

[GENERIC viewer] Generate the `fileInput` DOM-element dynamically",True
f394031c1d9dc51c34c4d95271df619b1ed70f60,2024-01-28 21:21:28,Jonas Jenwald,"[GENERIC viewer] Generate the `fileInput` DOM-element dynamically

Given that only the GENERIC viewer supports opening more than one PDF document, we can simplify things a tiny bit by instead generating the necessary DOM-element in JavaScript.",False
32a5bb83d4673f18c4ea45616f9acbff007ac7f6,2024-01-28 19:17:52,Tim van der Meij,"Merge pull request #17591 from Snuffleupagus/issue-17399

Re-enable the `should compress and save text` unit-test (issue 17399)",True
384291234dc0758f8f6ada8404d416be2196652b,2024-01-28 19:01:07,Jonas Jenwald,"Re-enable the `should compress and save text` unit-test (issue 17399)

This unit-test is now failing in up to date versions of Node.js respectively Chromium-browsers, since `CompressionStream` no longer produces consistent data across all environments/browsers.
However logging the compressed TypedArray produced by `writeStream`, with Firefox respectively Chrome, and then feeding *both* of those TypedArray as input to `DecompressionStream` produced the same (correct) result in both browsers.

Hence the *exact* output of `CompressionStream` shouldn't matter, as long as we're able to successfully decompress it when the resulting PDF document is opened with the PDF.js library, and the unit-test is thus extended to check this.",False
ab392584f37811ae808bd8bacc8e06cce0f968fd,2024-01-28 16:40:20,Tim van der Meij,"Merge pull request #17590 from timvandermeij/updates

Update dependencies/translations to the most recent versions",True
94309edc9a20ee75ff04d609b6c8f76a9aa86b89,2024-01-28 01:04:30,Tim van der Meij,"Disable the ""should compress and save text"" unit test in Chrome too

Starting with Chrome 120.0.6099.109 (shipped with Puppeteer 21.8.0+) the
unit test fails in Chrome as well. The issue is tracked in #17399, but
for now we'll only run the unit test in Firefox so we can continue to
update Puppeteer while also still having a browser in which it runs,
until we figure out why the behavior of `CompressionStream` changed.",False
f103f277acd5c03e95420a532a7d68275db38985,2024-01-27 23:43:06,Tim van der Meij,Update translations to the most recent versions,False
f855a6dae88ae54b1504871d664b4d5255682efb,2024-01-27 23:42:59,Tim van der Meij,Update dependencies to the most recent versions,False
a6e0b0292e8d8952576f55073ba3b8df69a2932a,2024-01-27 18:43:49,Tim van der Meij,"Merge pull request #17588 from Snuffleupagus/DefaultExternalServices-lighten

Re-factor `DefaultExternalServices` into a regular class, without static methods",True
c6594b73a7347deb1bb9eea65102e3dd5efa571c,2024-01-27 17:42:54,Jonas Jenwald,"Stub out the `getNimbusExperimentData` method in ""regular"" MOZCENTRAL builds",False
5dd25b6e80d4f71677d5a47d437922e2bb18efa8,2024-01-27 16:37:15,Jonas Jenwald,"Re-factor `DefaultExternalServices` into a regular class, without static methods

The `DefaultExternalServices` code, which is used to provide build-specific functionality, is very old. This results in a pattern where we first initialize `PDFViewerApplication.externalServices` and then *override* it for the different builds.

By converting `DefaultExternalServices` into a ""regular"" class, and leveraging import maps, we can directly initialize the correct instance depending on the build.",False
d1080e785a2cdbfb275195c650054faf9360c3cd,2024-01-27 16:08:42,Jonas Jenwald,"Remove the `createPreferences` method from `DefaultExternalServices`

Given the simplicity of the `createPreferences` method, we can leverage import maps to directly initialize the correct `Preferences`-instance depending on the build.",False
1698991ae2af6c8b52acb2819f8da127e6e2d4f4,2024-01-27 16:08:36,Jonas Jenwald,"Remove the `createDownloadManager` method from `DefaultExternalServices`

Given the simplicity of the `createDownloadManager` method, we can leverage import maps to directly initialize the correct `DownloadManager`-instance depending on the build.",False
d8f77e6b84c08d5fc6f871ef77f09742bc5552ac,2024-01-26 23:50:08,calixteman,"Merge pull request #17582 from calixteman/editor_highlight_thickness_tooltip

[Editor] Add a tooltip to the slider to set the thickness of free highlights",True
e63fafd0fbd70e95eb9a996293da5c9276764034,2024-01-26 23:22:29,calixteman,"Merge pull request #17581 from calixteman/editor_highlight_cursor

[Editor] Change the cursors for highlighting (bug 1876588)",True
3192d37aa71acd7bb3d28af8d4f0f1edc6a1b25d,2024-01-26 23:07:50,Jonas Jenwald,"Merge pull request #17587 from Snuffleupagus/fix-FontInspector-textLayer-opacity

Fix the textLayer-opacity when using the FontInspector (PR 17533 follow-up)",True
0432d1e8e6f481ce36ece98982b02f466b37c3bd,2024-01-26 23:04:26,Calixte Denizet,[Editor] Add a tooltip to the slider to set the thickness of free highlights,False
fed3ef1743ec1f7d319e15f5cda80890a3341d29,2024-01-26 23:01:38,Jonas Jenwald,Fix the textLayer-opacity when using the FontInspector (PR 17533 follow-up),False
f3bdbedf9b3f81b2d0a2950fd7ad9559ecb7ffce,2024-01-26 22:47:05,Calixte Denizet,[Editor] Change the cursors for highlighting (bug 1876588),False
4ec43488ff6383f2cf77ed2a95b32f949e520f06,2024-01-25 22:50:20,calixteman,"Merge pull request #17580 from calixteman/freetext_icon

[Editor] Change the icon to add a FreeText annotation (bug 1876564)",True
01280d8e08ecc125c5d2615cc7607b9dc316e303,2024-01-25 21:48:28,Calixte Denizet,[Editor] Change the icon to add a FreeText annotation (bug 1876564),False
bf9236009521621891d73dd77acc68215cb2cadb,2024-01-25 14:37:48,calixteman,"Merge pull request #17574 from calixteman/improve_bezier_bbox

Reduce memory use and improve perfs when computing the bounding box of a bezier curve (bug 1875547)",True
2f4017e22bf943d134c591be4afb29dd79cd4db6,2024-01-25 14:34:37,calixteman,"Merge pull request #17578 from Snuffleupagus/css-vars-unreferenced

Fix unreferenced CSS variables (PR 17533 follow-up)",True
1cbcb89dac51bb698534bd357285c3d6c3f2341c,2024-01-25 14:13:20,Jonas Jenwald,"Fix unreferenced CSS variables (PR 17533 follow-up)

The latest mozilla-central update has test failures, because some CSS variables are not ""properly"" referenced; in particular:
 - Give `--hcm-highlight-selected-filter` a default value, of `none`, similar to the previously existing HCM filter.
 - Remove the `--mix-blend-mode` variable, since it's unused.",False
7f2428a77e9add2a3348e8759c3c4569c0d0a7a3,2024-01-25 04:11:14,Calixte Denizet,"Reduce memory use and improve perfs when computing the bounding box of a bezier curve (bug 1875547)

It isn't really a fix for the mentioned bug but it slightly improve things.
In reducing the memory use, the time spent in the GC is reduced either.
The algorithm to compute the bounding box is the same as before but it has just
been rewritten to be more efficient.",False
a5d4660a7592ab73a37145d42587eb4514222683,2024-01-25 03:07:40,calixteman,"Merge pull request #17568 from calixteman/editor_free_highlight_thickness

[Editor] Add the possibility to change the thickness of a free highlight (bug 1876096)",True
2b8ecf5688f56425ddc4a4fa03cbaf17060756c9,2024-01-25 02:34:39,Calixte Denizet,[Editor] Add the possibility to change the thickness of a free highlight (bug 1876096),False
f81f9bb7d3adf2df75294c077eacd38d1fca7936,2024-01-25 02:22:54,calixteman,"Merge pull request #17564 from calixteman/editor_update_ui_undo

[Editor] Update the parameters in the UI of the last selected editor when undoing/redoing",True
d713df28c3a7bd291bb9e8de723001edc0cbf124,2024-01-24 22:46:51,Calixte Denizet,[Editor] Update the parameters in the UI of the last selected editor when undoing/redoing,False
ae627870801eb758180e1db0c51b5a778c61af7a,2024-01-23 23:30:28,Jonas Jenwald,"Merge pull request #17563 from nicolo-ribaudo/build-step-remove-custom-webpack

Replace the webpack+acorn transform with a Babel plugin",True
f724ae98a1c0859885083448e2cbc3f3d4c31cf1,2024-01-23 20:30:59,Nicolò Ribaudo,"Replace the webpack+acorn transform with a Babel plugin

This commit converts the pdfjsdev-loader transform into a Babel plugin,
to skip a AST->string->AST round-trip.

Before this commit, the webpack build process was:
1. Babel parses the code
2. Babel transforms the AST
3. Babel generates the code
4. Acorn parses the code
5. pdfjsdev-loader transforms the AST
6. @javascript-obfuscator/escodegen generates the code
7. Webpack parses the file
8. Webpack concatenates the files

After this commit, it is reduced to:
1. Babel parses the code
2. Babel transforms the AST
3. babel-plugin-pdfjs-preprocessor transforms the AST
4. Babel generates the code
5. Webpack parses the file
6. Webpack concatenates the files

This change improves the build time by ~25% (tested on MacBook Air M2):
- `gulp lib`: 3.4s to 2.6s
- `gulp dist`: 36s to 29s
- `gulp generic`: 5.5s to 4.0s
- `gulp mozcentral`: 4.7s to 3.2s

The new Babel plugin doesn't support the `saveComments` option of
pdfjsdev-loader, and it just always discards comments. Even though
pdfjsdev-loader supported multiple values for that option, it was
effectively ignored due to `acorn` dropping comments by default.",False
f5bb9bc21bbcfb8fbc125254fcf64cc6d7ad5ee2,2024-01-23 17:43:43,Nicolò Ribaudo,"Rename preprocessor2.mjs to babel-plugin-pdfjs-preprocessor.mjs

This is in preparation for the next commit, which will convert
preprocessor2.mjs to a Babel plugin. The purpose of this commit
is to help git track the rename regardless of the large amount
of changes.",False
8b247221138fb8885e1e48a18ea1a6257eb7b560,2024-01-23 15:05:27,Jonas Jenwald,"Merge pull request #17562 from Snuffleupagus/evaluator-more-async

Add more `async` code in the `PartialEvaluator`",True
fa583427eff9f453fba0c836e660e70c6db706ae,2024-01-22 17:36:32,Jonas Jenwald,"Always export the ""raw"" /ToUnicode-data from `PartialEvaluator.preEvaluateFont` (PR 13354 follow-up)

This, ever so slightly, simplifies the implementation in the `PartialEvaluator.extractDataStructures`-method.",False
f21a30dfb4c7812e4b31acbb15206f24611ae58b,2024-01-22 17:17:06,Jonas Jenwald,Convert the `PartialEvaluator.readToUnicode` method to be async,False
f5c01188dc8fbb586664bf68ef492c26813d5253,2024-01-22 17:17:06,Jonas Jenwald,Convert the `PartialEvaluator.extractDataStructures` method to be async,False
cf0797dfbd7fe1f7dcd9f1d4e60848a3a2a5de19,2024-01-22 17:17:06,Jonas Jenwald,Use `await` consistently in the `PartialEvaluator.setGState` method,False
1cc83c4fdc614c41cf314296cf0160693c9b60da,2024-01-22 17:17:06,Jonas Jenwald,Use `await` consistently in the `PartialEvaluator.buildFormXObject` method,False
bba831821d71df9fba1a5fc5e63d95e0eb6bac91,2024-01-22 16:53:06,calixteman,"Merge pull request #17558 from calixteman/bug1669097

Print correctly documents containing chars with an unicode greater than 0xFFFF (bug 1669097)",True
06601fd90c0e9b74d1f7ae18517f19680b93772d,2024-01-22 15:18:00,Calixte Denizet,Print correctly documents containing chars with an unicode greater than 0xFFFF (bug 1669097),False
49b2d9b5aff9d598323e9de80f8a545a8e65b4ea,2024-01-22 01:28:09,Tim van der Meij,"Merge pull request #17556 from Snuffleupagus/issue-17554

Ensure that `EvaluatorPreprocessor.opMap` has a null-prototype (issue 17554)",True
1ed68933e54203cc86e3cd87ab932b1d2eedb734,2024-01-22 01:04:22,Tim van der Meij,"Merge pull request #17555 from timvandermeij/gulpfile-exit-code

Don't ignore `test.mjs` child process exit codes in the Gulpfile",True
d549c2ef4cd1417423d4dfda1a7f39a40d328b34,2024-01-22 00:30:29,Tim van der Meij,"Merge pull request #17553 from Snuffleupagus/async-handleSetFont

Add more `async` code when loading fonts in the `PartialEvaluator`",True
d7e41d4cb6fe42d1b7a6388eb1328792f12de883,2024-01-22 00:29:13,Jonas Jenwald,"Ensure that `EvaluatorPreprocessor.opMap` has a null-prototype (issue 17554)

This accidentally regressed in PR 16956, sorry about that!",False
6dd77b3c140dcba30289766354076facb3c0bc6d,2024-01-22 00:07:13,Tim van der Meij,"Don't ignore `test.mjs` child process exit codes in the Gulpfile

In the Gulpfile only the exit codes of `test.mjs` child processes
erroneously aren't checked. This causes failures in `test.mjs` to be
logged but not propagated to the master process, which in turn causes
test runners such as GitHub Actions to succeed because they only
monitor the master process. This is easy to reproduce by throwing an
error at the top of `test.mjs` and running `gulp makeref` or `gulp
unittest`: the error is logged, but the task that spawned the child
process succeeds and the master process exits with exit code 0. This is
problematic because it can easily cause errors to go by unnoticed.

This commit fixes the issue by making sure that the `test.mjs`
invocations are handled in the same way as the other child processes
in the file, i.e., if the child process exits with a non-zero exit code
then the master process also exits with a non-zero exit code. After this
patch the error is still logged, but the task now also fails and the
master process exits with exit code 1 to properly signal failure.",False
3c2c0ecd8851bf59c49796251d50c3863d0cb2d2,2024-01-21 22:12:33,Jonas Jenwald,Use the ESLint `arrow-body-style` rule in more spots in `src/core/evaluator.js`,False
d1bef8cb8660a5da1e250ed4888c3b8f7779bd4a,2024-01-21 22:06:50,Jonas Jenwald,Use `await` consistently in the `PartialEvaluator.translateFont` method,False
fc62eec9017721af1dae51336a1190223ba37008,2024-01-21 22:02:05,Jonas Jenwald,"Convert the `handleSetFont` methods, in `src/core/evaluator.js`, to be async",False
fce822cde0fb6bab1d976ffcad5623482e18d446,2024-01-21 21:51:32,Jonas Jenwald,"Merge pull request #17550 from Snuffleupagus/arrow-fn-shorter

Use shorter arrow functions where possible",True
10eef372ffa6c0c2019a41c9df5ebc67825babdd,2024-01-21 21:06:41,calixteman,"Merge pull request #17548 from calixteman/eslint_jasmine

Avoid to have focused tests in using eslint-plugin-jasmine",True
f9a384d711c49011737cfb1e303f3a40a2cae991,2024-01-21 20:50:55,Jonas Jenwald,"Enable the `arrow-body-style` ESLint rule

This manually ignores some cases where the resulting auto-formatting would not, as far as I'm concerned, constitute a readability improvement or where we'd just end up with more overall indentation.

Please see https://eslint.org/docs/latest/rules/arrow-body-style",False
998184a00ea6c940d75c14e28349b611eab9058e,2024-01-21 20:15:28,Jonas Jenwald,"Remove the `no-confusing-arrow` ESLint rule since it's deprecated

Please see https://eslint.org/docs/latest/rules/no-confusing-arrow",False
9dfe9c552c372c44e3af27b8749d2ec4acccdbbd,2024-01-21 14:43:12,Jonas Jenwald,"Use shorter arrow functions where possible

For arrow functions that are both simple and short, we can avoid using explicit `return` to shorten them even further without hurting readability.

For the `gulp mozcentral` build-target this reduces the overall size of the output by just under 1 kilo-byte (which isn't a lot but still can't hurt).",False
6e46304357a7088a1b3b5d7a702d7618600af866,2024-01-21 02:54:37,calixteman,"Merge pull request #17539 from calixteman/color_picker_kb

[Editor] Don't add the keyboard listener on the color-picker each time the dropdown menu is shown",True
99ee308f3d9fa8d29444a9bb783f604f70424c52,2024-01-21 02:40:42,Calixte Denizet,Avoid to have focused tests in using eslint-plugin-jasmine,False
0cca9a02404a15ad7b5f60567792e77bd7544cc1,2024-01-21 02:27:54,Calixte Denizet,"[Editor] Don't add the keyboard listener on the color-picker each time the dropdown menu is shown

and display/hide the dropdown menu when pressing arrow keys.",False
f24246150e20088cea3230f28ab4b4987756b6f3,2024-01-21 02:21:37,calixteman,"Merge pull request #17541 from calixteman/issue17540

Use the original value of a field when propagating event (fixes #17540)",True
03aa8a12d2354e8151f8feecdd7b27f14f9c8508,2024-01-21 02:20:19,calixteman,"Merge pull request #17543 from calixteman/bug1869767

[Editor] Unselect highlights when the user click on the text layer (bug 1869767)",True
626674553dc56dd26cce2b2f9ede812d7f2c2a7f,2024-01-21 00:53:37,Tim van der Meij,"Merge pull request #17547 from timvandermeij/remove-dns-resolver-workaround

Remove DNS resolver workaround from the test framework",True
c70edbced7212e086625af1cbfce6ec4e6a21088,2024-01-21 00:35:08,Tim van der Meij,"Remove DNS resolver workaround from the test framework

The `if` statement is no longer necessary because the Node.js versions
that didn't provide `dns.setDefaultResultOrder` are no longer supported,
but looking into this a bit more it turns out that the entire workaround
is no longer necessary because the issue got fixed in Firefox 105 in bug
1769994. Indeed, Firefox now starts nicely with the workaround removed.

Reverts 60ed3cd297c4045b90f4114a74e5baa4ef1c5056.",False
c9b1a8f761a5677c7f23f308222a8b95b74f5245,2024-01-20 18:34:55,Tim van der Meij,"Merge pull request #17546 from Snuffleupagus/git-blame-ignore

Ignore auto-formatting patches in `git blame`",True
9b0b0997137c6a2f7c14fee64ae259408eab8f69,2024-01-20 18:33:52,Tim van der Meij,"Merge pull request #17544 from Snuffleupagus/update-packages

Update packages and translations",True
c9755bdbc860605c70d4f75993f46a705d9365f4,2024-01-20 16:31:23,Jonas Jenwald,"Ignore auto-formatting patches in `git blame`

When using Prettier to auto-format (parts of) the code-base you usually end up with *huge* patches that touch lots of lines without making any actual changes.
This often adds unnecessary steps when using `git blame`, however it's easy enough to avoid this; please refer to https://docs.github.com/en/repositories/working-with-files/using-files/viewing-a-file#ignore-commits-in-the-blame-view",False
2dd6910aa4e38a58a8937358e38725c1fdf16fc3,2024-01-20 14:24:21,Jonas Jenwald,Update l10n files,False
a5a9357e1512af1fc2fa5f598c666629362e966b,2024-01-20 14:22:57,Jonas Jenwald,Update npm packages,False
5732c0c54ae825c489feac65dfa88c11fc37fce2,2024-01-20 02:43:51,Calixte Denizet,"Use the original value of a field when propagating event (fixes #17540)

And avoid to not format a field when the value is 0.",False
f3b76f5ae299eac332b9de89d26e3592e0d5e50a,2024-01-20 00:46:55,Calixte Denizet,[Editor] Unselect highlights when the user click on the text layer (bug 1869767),False
f8e3c79cb55daa0326da5b23e933fb92da5f95eb,2024-01-19 20:07:02,Jonas Jenwald,"Merge pull request #17537 from Snuffleupagus/rm-isArrayBuffer

Remove the `isArrayBuffer` helper function",True
f6c4b29aa27274f9138d3efa5be2bd58a7bb996c,2024-01-19 19:53:29,calixteman,"Merge pull request #17531 from calixteman/editor_free_highlight_print_save

[Editor] Add support for printing/saving free highlight annotations",True
5d2e7cf3fcac1d0536003369ab3163b006539bfa,2024-01-19 19:52:08,calixteman,"Merge pull request #17533 from calixteman/caret_mode

Make the caret visible in the text layer in caret browsing mode",True
b37536c38c3bee8dc3784d8f58dfd1b0cc170cf0,2024-01-19 18:40:52,Jonas Jenwald,"Remove the `isArrayBuffer` helper function

This old helper function can now be replaced with `ArrayBuffer.isView()` and/or `instanceof ArrayBuffer` checks, as needed depending on the situation.",False
a0e2b622456bb788b3fd9dd0e4d15a65ab76783e,2024-01-19 17:38:12,calixteman,"Merge pull request #17534 from calixteman/bug1875357

[Editor] Change the arrow direction when the dropdown is visible in the color picker (bug 1875357)",True
a1bf12537c7181effb101a8c4c328d9d0e9cd6ed,2024-01-19 17:32:11,Calixte Denizet,"[Editor] Change the arrow direction when the dropdown is visible in the color picker (bug 1875357)

and hide the dropdown when the user click outside of the color picker.",False
d64f334f98d4b7f1c2e09a731a63b68629c946f9,2024-01-19 17:28:46,Calixte Denizet,[Editor] Add support for printing/saving free highlight annotations,False
83c78dbfa8f2f532b22ba10cebca2a67c0fac8ef,2024-01-19 00:14:21,Calixte Denizet,"Make the caret visible in the text layer in caret browsing mode

In order to do that we must change the text layer opacity to 1 but
it has several implications:
 - the selection color must have an alpha component,
 - the background color of the span used for highlighted words
   must have an alpha component either, but now the opacity is 1
   we can use some backdrop-filters in HCM making the highlighted
   words more visible.
 - fix a regression caused by #17196: the css variable --hcm-highlight-filter
   has to live under the #viewer element because in HCM it's overwritten
   by js at this level, hence links annotations for example didn't
   have the right colors when hovered.",False
1cdbcfef821c7f6e81ea22fe68a8b815bca01c4e,2024-01-18 22:17:27,calixteman,"Merge pull request #17506 from calixteman/editor_free_highlight

[Editor] Add the ability to make a free highlight (i.e. without having to select some text) (bug 1856218)",True
8fbfef0c0792da5ae057c8c7851e1ccb3f6e83fe,2024-01-18 20:56:04,Calixte Denizet,"[Editor] Add the ability to make a free highlight (i.e. without having to select some text) (bug 1856218)

The free highlighting is enabled when the mouse pointer isn't on some text.
Then we draw a shape with smoothed borders corresponding to the movement of
the mouse.
Printing/saving and changing the thickness will come later.",False
a22b5a4f02d046b5113630b1c333281841cbe309,2024-01-17 02:57:14,calixteman,"Merge pull request #17528 from calixteman/highlight_not_draggable

[Editor] Avoid to move a non-draggable editor with the keyboard",True
cb38882d74d75b0c15bf985c5b064f309ac314e9,2024-01-17 02:52:49,Jonas Jenwald,"Merge pull request #17529 from Snuffleupagus/skip-web-locale

Exclude the `web/locale/` folder from linting (PR 17525 follow-up)",True
70a9d8f3bc124ffbce2f436689cbd6d0903339e4,2024-01-17 02:11:52,Calixte Denizet,[Editor] Avoid to move a non-draggable editor with the keyboard,False
9c377922efe1129b9bb745ac30da78723a3658e6,2024-01-17 01:43:56,calixteman,"Merge pull request #17527 from calixteman/color_pick_exception

[Editor] Avoid an exception when pressing space key to change the color of an highlight",True
79594ff87665c8658f9e6dd6a11b8980b9be8b35,2024-01-17 00:55:01,Jonas Jenwald,"Exclude the `web/locale/` folder from linting (PR 17525 follow-up)

Given that the contents of this folder is generated by `gulp locale` it's essentially build-output and thus shouldn't be included in linting.",False
bf6cc83e7a810c757ccecaa0b96ad5f89cc6629b,2024-01-17 00:46:56,calixteman,"Merge pull request #17525 from calixteman/prettier_json

Format json files in using prettier",True
a76cc40ab882182dd67f432d6640f94de33e3c5a,2024-01-17 00:30:23,Calixte Denizet,[Editor] Avoid an exception when pressing space key to change the color of an highlight,False
29de9bdce6c9785574994fda0e51533d796a9bb4,2024-01-17 00:10:25,Calixte Denizet,Format json files in using prettier,False
e7d782e8870220ba8c798e06cc40431bb8656466,2024-01-16 19:02:30,calixteman,"Merge pull request #17405 from calixteman/libertine

Add the font Linux Libertine as a possible substitution for Times New Roman",True
10389c5017f062cd53a3242634a86c54f3ef5f5f,2024-01-16 17:01:23,Calixte Denizet,"Add the font Linux Libertine as a possible substitution for Times New Roman

and try to load the font family (guessed from the font name) before trying
the local substitution.
The local(...) command expects to have a real font name and not a predefined
substitution it's why we try the font family.",False
51413be5b6fdd7fad66b8b760325359dd3d2ff22,2024-01-16 15:17:38,calixteman,"Merge pull request #17519 from calixteman/editor_movable_touchscreen

[Editor] Make editors draggable with touchscreens",True
b8aab5d14ed43d15b14f007d844aad7ae3e5805d,2024-01-16 03:50:55,Calixte Denizet,[Editor] Make editors draggable with touchscreens,False
3110865484872a199d927d25baa46c54a6b75fe5,2024-01-15 23:20:37,calixteman,"Merge pull request #17517 from calixteman/editor_highlight_simplify_ser

[Editor] Slightly simplify the serialization of an highlight annotation",True
ee72b32dc28d69ae49a7bd784f4400e9ced3e1bc,2024-01-15 22:52:01,Calixte Denizet,"[Editor] Slightly simplify the serialization of an highlight annotation

We were computing width and height of the annotation before serializing
which is useless because the rect already contains this information.",False
7769018316cc1d82c5294d879f5b0760b2e0887b,2024-01-15 18:53:04,calixteman,"Merge pull request #17514 from calixteman/issue17418

[Editor] Draw a line instead of a Bezier curve when an Ink has only one point",True
e9946fa22af4aef4e7f62b675e4e2dbbb0c6c837,2024-01-15 18:02:36,Calixte Denizet,"[Editor] Draw a line instead of a Bezier curve when an Ink has only one point

Fixes #17418.",False
2ca20dea43699c5e85dd2af5aec30a79b1b29bdb,2024-01-15 17:14:14,calixteman,"Merge pull request #17512 from calixteman/issue17492

Take into account empty lines when extracting text content from the appearance",True
e98a813e09b30f3e56fb8259abb033a62a49e32c,2024-01-15 15:10:49,calixteman,"Merge pull request #17511 from calixteman/issue17079

[Editor] Extract all the lines when adding a FreeText annotation",True
d3b5f609952e317c36ab1ff0236d237b74638811,2024-01-15 14:48:46,calixteman,"Merge pull request #17513 from calixteman/update_l10n

Update l10n files",True
7580770aac0ac4a107b8e5677594251790e084ac,2024-01-15 01:48:58,Calixte Denizet,Update l10n files,False
9765d57a26779dd8bf753255c3cfa74a19563f0a,2024-01-15 01:41:51,Calixte Denizet,"[Editor] Extract all the lines when adding a FreeText annotation

Fixes #17079.",False
405f573d709c431fb153c943fcfbb2d8a7b03ef6,2024-01-15 00:53:29,Calixte Denizet,"Take into account empty lines when extracting text content from the appearance

Fixes #17492.",False
dc92ab850a21c4c5fb69ac4a2225c40d791b11d3,2024-01-14 20:51:29,Tim van der Meij,"Merge pull request #17508 from Snuffleupagus/pr-14388-followup

Consistently remove the ""visibilitychange"" listener in `PDFViewer` (PR 14388 follow-up)",True
704747b143db9de0c8eace9987e812f8643be2f0,2024-01-14 20:48:26,Tim van der Meij,"Merge pull request #17489 from nicolo-ribaudo/gulp-cli-dep

Update `gulp-cli` to 2.3.0 and explicitly add it as a dependency",True
07cb42243c72a86990953a993ecb5cbfe1342dd8,2024-01-14 20:39:18,Tim van der Meij,"Merge pull request #17507 from Snuffleupagus/version-4.1

Bump library version to `4.1`",True
ff93dfc560b9561e331ccfc85cc40665f8b64374,2024-01-14 20:34:54,Tim van der Meij,"Merge pull request #17490 from nicolo-ribaudo/macos-m2-note

Add note about running `npm install` on MacOS",True
b168f71fde2c6a0f4ffdbd3386fe9be89a8f02ae,2024-01-13 15:21:26,Jonas Jenwald,"Consistently remove the ""visibilitychange"" listener in `PDFViewer` (PR 14388 follow-up)

By always removing the ""visibilitychange"" listener in the `PDFViewer.#onePageRenderedOrForceFetch`-method we can (ever so slightly) reduce duplication in the code.",False
6dc225bdbbcb060dacc7f510040dcb3e39529e25,2024-01-13 13:58:56,Jonas Jenwald,Bump library version to `4.1`,False
56ca2fd65858bf0045734fae11c295e290728463,2024-01-13 13:53:29,Jonas Jenwald,"Merge pull request #17504 from Snuffleupagus/GlobalWorkerOptions-validate

[api-minor] Validate the `workerPort`/`workerSrc` options",True
f0af52032b69f75705804629748e9c6c299fecaf,2024-01-12 21:43:32,Jonas Jenwald,"[api-minor] Validate the `workerPort`/`workerSrc` options

Ensure that users cannot provide incorrect values when trying to set the global worker-options.
This patch was prompted by occasionally seeing users manually loading the `pdf.worker.mjs`-file and then assigning it to the `workerSrc`-option, something that obviously doesn't make sense and will cause fake-workers to be used (with poor performance as a result).",False
0d011472a4c20c1d5c7d1533e862cf709c7041d3,2024-01-12 21:12:59,calixteman,"Merge pull request #17501 from calixteman/editor_highlight_serialization

[Editor] Correctly serialize highlight data (regression from #17499)",True
fc7c320bd8c97950975fe529df72a47d65c657a7,2024-01-12 20:07:01,Calixte Denizet,[Editor] Correctly serialize highlight data (regression from #17499),False
61e5dae7fdd2259219fa5499282ecd9657cb65e8,2024-01-12 18:29:26,calixteman,"Merge pull request #17499 from calixteman/editor_outliner

[Editor] Move the code to generate the SVG path from draw_layer.js to outliner.js",True
94ad3afab6f2e08f855e90c3e2e0c3717dc1baa3,2024-01-11 23:40:33,Calixte Denizet,"[Editor] Move the code to generate the SVG path from draw_layer.js to outliner.js

It'll be useful to avoid too much duplicated code when adding the free highlighting tool.",False
35daccf34b54f6fa0bcd3dafbc33c77d73c72f00,2024-01-11 23:04:01,calixteman,"Merge pull request #17498 from calixteman/editor_dont_throw_highlight_color

[Editor] Don't throw when changing the color of an invisible highlight",True
b4a7007397b719088edee52ef8945dc1dc76fd51,2024-01-11 22:18:06,Calixte Denizet,[Editor] Don't throw when changing the color of an invisible highlight,False
12875359c387d7e2d312c50748833b3c52d986aa,2024-01-11 14:29:21,Jonas Jenwald,"Merge pull request #17494 from mozilla/dependabot/npm_and_yarn/follow-redirects-1.15.4

Bump follow-redirects from 1.15.3 to 1.15.4",True
7d15d2314709c584487411e7b8b16faf4e61a24f,2024-01-11 10:24:43,dependabot[bot],"Bump follow-redirects from 1.15.3 to 1.15.4

Bumps [follow-redirects](https://github.com/follow-redirects/follow-redirects) from 1.15.3 to 1.15.4.
- [Release notes](https://github.com/follow-redirects/follow-redirects/releases)
- [Commits](https://github.com/follow-redirects/follow-redirects/compare/v1.15.3...v1.15.4)

---
updated-dependencies:
- dependency-name: follow-redirects
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>",False
4197f6a284790d323b5c11c6cb0a0de1f9eaff12,2024-01-10 19:51:15,Nicolò Ribaudo,Add note about running `npm install` on MacOS,False
d2a52104751c7cda70a44f46db969e46af11c5dc,2024-01-10 19:29:32,Nicolò Ribaudo,Update `gulp-cli` to 2.3.0 and explicitly add it as a dependency,False
903af4ee0009afbb5e42f5866b966fdefe4185b7,2024-01-10 14:33:52,calixteman,"Merge pull request #17487 from calixteman/fix_final_spaces

Remove terminal white spaces when extracting text from annotation appearances",True
0392feaee4f2101947fa022c90ac1299d7079a0a,2024-01-09 15:12:53,Calixte Denizet,Remove terminal white spaces when extracting text from annotation appearances,False
29faa38dd78d319ac99ab35aed7e659f3b070f4f,2024-01-06 18:46:56,Tim van der Meij,"Merge pull request #17482 from Snuffleupagus/update-packages

Update packages and translations",True
2cb93cc344d396352cf9038fd40a249f244dffcc,2024-01-06 14:40:22,Jonas Jenwald,Update l10n files,False
c5a69544af9ae938a95e02c96bc4b2f59339a77a,2024-01-06 14:39:12,Jonas Jenwald,Update npm packages,False
6c5e237a40ae7f8599e03fb6da917dcd2c879abd,2024-01-06 02:30:08,calixteman,"Merge pull request #17481 from calixteman/editor_default_init

[Editor] Init the default highlight color before creating the first editor instance",True
17e1519410aedf1cd337a5e99d234635643810af,2024-01-05 22:22:54,Calixte Denizet,"[Editor] Init the default highlight color before creating the first editor instance

We want to be able to draw an highlight with the default color but without having an
instance of the HighlightEditor.",False
130a0fef3d96d28c50dd40d89cf75b2d1ed12e24,2024-01-05 18:51:27,calixteman,"Merge pull request #17458 from calixteman/bug1871353

Preserve the whitespaces when getting text from FreeText annotations (bug 1871353)",True
7839e7b495e174a34b9885dfab76c92fd5b44741,2024-01-05 14:50:32,Calixte Denizet,"Preserve the whitespaces when getting text from FreeText annotations (bug 1871353)

When the text of an annotation is extracted in using getTextContent, consecutive white spaces
are just replaced by one space and. So this patch add an option to make sure that white
spaces are preserved when appearance is parsed.
For the case where there's no appearance, we can have a fast path to get the correct string
from the Content entry.
When an existing FreeText is edited, space (0x20) are replaced by non-breakable (0xa0) ones
to make to see all of them on screen.",False
1019b9f821c30ae3e26fbe654b799d371579d38b,2024-01-05 02:33:35,calixteman,"Merge pull request #17476 from calixteman/bug1869001

Avoid to have the text layer mismatching the rendered text with mismatching locales (bug 1869001)",True
f84f48b5d0f8d82a0f5ac344c6e9cdb4f13b0097,2024-01-04 23:50:20,Calixte Denizet,"Avoid to have the text layer mismatching the rendered text with mismatching locales (bug 1869001)

The system locale (used in OffscreenCanvas) can be different from the one guessed by Fluent,
consequently, in order to avoid any mismatch, we just use an attached canvas element.
The original issue can easily be reproduced locally in adding a lang=""ja"" in viewer.html
(or with an other language for Japanese users).",False
7873ad98bb3cf1e692dd83ba59ca2d4db584c946,2024-01-04 23:30:30,calixteman,"Merge pull request #17477 from calixteman/puppeteer21.7.0

Update Puppeteer to version 21.7.0",True
e5ccb70efb2b4e6b3092e87e0147f41c83b9917c,2024-01-04 20:41:09,Calixte Denizet,Update Puppeteer to version 21.7.0,False
dc01782633432642fe8b56e3c25bdc9a430d9e02,2024-01-03 18:13:31,calixteman,"Merge pull request #17475 from calixteman/bug1872721

[Editor] Take into account the crop box when saving/printing some highlighted text (bug 1872721)",True
35863cd54ba12f8c0e7e965f750a8dd1938a676a,2024-01-02 23:23:33,Calixte Denizet,[Editor] Take into account the crop box when saving/printing some highlighted text (bug 1872721),False
231c79800b4e0bb5b705353a98c7e8c8cff70393,2023-12-31 20:04:28,Tim van der Meij,"Merge pull request #17474 from timvandermeij/bump

Bump the stable version in `pdfjs.config`",True
fea192fbf93060e5cdf577c8074ad6da0eb37319,2023-12-31 20:01:03,Tim van der Meij,Bump the stable version in `pdfjs.config`,False
9e14d04fd95adefa7a56f01789fc9747cc87d60c,2023-12-29 17:17:20,Tim van der Meij,"Merge pull request #17464 from Snuffleupagus/rm-toolbar-reset-events

Remove the internal ""toolbarreset""/""secondarytoolbarreset"" events and slightly re-factor the code",True
afa65dc766f6ab27bc863396a1e3aafe6ab892a4,2023-12-29 16:57:35,Tim van der Meij,"Merge pull request #17461 from mozilla/dependabot/github_actions/actions/deploy-pages-4

Bump actions/deploy-pages from 3 to 4",True
aef9f7a0cd29dfda0650f5eff990889b2167c9b3,2023-12-29 16:56:29,Tim van der Meij,"Merge pull request #17460 from mozilla/dependabot/github_actions/actions/upload-artifact-4

Bump actions/upload-artifact from 3 to 4",True
b1ca27016217b641f3287c33b31292fb67a2dffc,2023-12-26 15:33:07,Jonas Jenwald,"Remove the internal ""secondarytoolbarreset"" event and slightly re-factor the code

With modern JavaScript class features we can move the relevant event handling into private methods, and thus invoke it directly when resetting the toolbar UI-state.

*Please note:* This patch slightly reduces the size of the `web/secondary_toolbar.js` file.",False
234b57bb45ac8be7d7b9866382db92781a0358eb,2023-12-26 15:27:02,Jonas Jenwald,"Remove the internal ""toolbarreset"" event and slightly re-factor the code

With modern JavaScript class features we can move the relevant event handling into private methods, and thus invoke it directly when resetting the toolbar UI-state.

*Please note:* This patch slightly reduces the size of the `web/toolbar.js` file.",False
4e786f68bcc41fd1eb086d60b38311c16e07beaa,2023-12-25 17:41:47,dependabot[bot],"Bump actions/deploy-pages from 3 to 4

Bumps [actions/deploy-pages](https://github.com/actions/deploy-pages) from 3 to 4.
- [Release notes](https://github.com/actions/deploy-pages/releases)
- [Commits](https://github.com/actions/deploy-pages/compare/v3...v4)

---
updated-dependencies:
- dependency-name: actions/deploy-pages
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>",False
f56d6802ad3e9a3a494c03873c713d58c8ef4858,2023-12-25 17:41:44,dependabot[bot],"Bump actions/upload-artifact from 3 to 4

Bumps [actions/upload-artifact](https://github.com/actions/upload-artifact) from 3 to 4.
- [Release notes](https://github.com/actions/upload-artifact/releases)
- [Commits](https://github.com/actions/upload-artifact/compare/v3...v4)

---
updated-dependencies:
- dependency-name: actions/upload-artifact
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>",False
3b94e9fdce616a9b4899800559cbca15169acca6,2023-12-23 18:04:32,Tim van der Meij,"Merge pull request #17456 from Snuffleupagus/update-packages

Update packages and translations",True
0324187734e31e63ef5930d328a0d14127ac48b1,2023-12-23 17:02:00,Jonas Jenwald,Update l10n files,False
3793a561166e1fb67244dec2609951c4015d0d15,2023-12-23 16:59:51,Jonas Jenwald,Update npm packages,False
faa24e8ce233f0038d2ff8452ffc12b62cb18374,2023-12-22 14:55:46,Jonas Jenwald,"Merge pull request #17428 from Snuffleupagus/cacheGlobally-CopyImage

Attempt to further reduce re-parsing for globally cached images (PR 11912, 16108 follow-up)",True
9f02cc36d48d349011916ac1878dede898528934,2023-12-22 01:56:21,Jonas Jenwald,"Attempt to further reduce re-parsing for globally cached images (PR 11912, 16108 follow-up)

In PR 11912 we started caching images that occur on multiple pages globally, which improved performance a lot in many PDF documents.
However, one slightly annoying limitation of the implementation is the need to re-parse the image once the global-caching threshold has been reached. Previously this was difficult to avoid, since large image-resources will cause cleanup to run on the main-thread after rendering has finished. In PR 16108 we started delaying this cleanup a little bit, to improve performance if a user e.g. zooms and/or rotates the document immediately after rendering completes.

Taking those two PRs together, we now have a situation where it's much more likely that the main-thread has ""globally used"" images cached at the page-level. Hence we can instead attempt to *copy* a locally cached image into the global object-cache on the main-thread and thus reduce unnecessary re-parsing of large/complex global images, which significantly reduces the rendering time in many cases.

For the PDF document in issue 11878, the rendering time of *the second page* changes as follows (on my computer):
 - With the `master`-branch it takes >600 ms to render.
 - With this patch that goes down to ~50 ms, which is one order of magnitude faster.

(Note that all other pages are, as expected, completely unaffected by these changes.)

This new main-thread copying is limited to ""large"" global images, since:
 - Re-parsing of small images, on the worker-thread, is usually fast enough to not be an issue.
 - With the delayed cleanup after rendering, it's still not guaranteed that an image is available in a page-level cache on the main-thread.
 - This forces the worker-thread to wait for the main-thread, which is a pattern that you always want to avoid unless absolutely necessary.",False
e547b198a3e44b0198afe58ab74b0c7c74d8006a,2023-12-22 01:56:21,Jonas Jenwald,"Compute the length of the final image-bitmap/data on the worker-thread

Currently this is done in the API, but moving it into the worker-thread will simplify upcoming changes.",False
b09f238436237c5b7d2c058972cb268c0bc1c5af,2023-12-22 01:56:21,Jonas Jenwald,"Add iteration support in the `PDFObjects` class

This (obviously) only includes ""resolved"" data, and will be used in an upcoming patch.",False
7ea0e40e588864cd938d1836ec61f1928d3877d3,2023-12-21 00:57:15,Jonas Jenwald,"Merge pull request #17441 from Snuffleupagus/outlineOptionsContainer-CSS-toggle

Toggle the visibility of the `outlineOptionsContainer`, in the sidebar, using only CSS",True
13da916885822c3a0e7502dd118666f67677f61a,2023-12-21 00:55:36,Jonas Jenwald,"Merge pull request #17445 from pulsejet/pulsejet/fix-destroy

Prevent errors in `AnnotationEditorUIManager.destroy` if the `altTextManager` is undefined",True
4d34107228b431029a18920d441e01c3aa411159,2023-12-20 23:18:34,Varun Patil,Prevent error in AnnotationEditorUIManager.destroy if altTextManager is null,False
82464294b9845d159b390686111c6d534cfeb030,2023-12-19 14:31:16,Jonas Jenwald,"Toggle the visibility of the `outlineOptionsContainer`, in the sidebar, using only CSS

Now that `:has()` is available we no longer need to use JavaScript to toggle the visibility of this DOM element.",False
52ffd26da91c432e9afacd008b0b120621c45675,2023-12-18 19:34:32,Jonas Jenwald,"Merge pull request #17436 from mozilla/revert-17435-dependabot/github_actions/actions/upload-artifact-4

Revert ""Bump actions/upload-artifact from 3 to 4""",True
933e107073b6e0ebd27660090f4a8bed4969d061,2023-12-18 19:31:19,Jonas Jenwald,"Revert ""Bump actions/upload-artifact from 3 to 4""",False
6fc3b438f7bf2eb87ecaf4a0d147ff38d08940c4,2023-12-18 19:24:11,Jonas Jenwald,"Merge pull request #17434 from mozilla/dependabot/github_actions/github/codeql-action-3

Bump github/codeql-action from 2 to 3",True
8d49a508f283d98faa5e6903a07811b4790c4fb8,2023-12-18 19:23:52,Jonas Jenwald,"Merge pull request #17435 from mozilla/dependabot/github_actions/actions/upload-artifact-4

Bump actions/upload-artifact from 3 to 4",True
648c8f4abb8de32ba8431d778605ea6adacb0481,2023-12-18 18:36:36,Jonas Jenwald,"Merge pull request #17429 from jdanyow/patch-1

Center radio button checkmark",True
25a0a68deff339faa6b5b4855ff9baa5ee611ef1,2023-12-18 18:09:30,dependabot[bot],"Bump actions/upload-artifact from 3 to 4

Bumps [actions/upload-artifact](https://github.com/actions/upload-artifact) from 3 to 4.
- [Release notes](https://github.com/actions/upload-artifact/releases)
- [Commits](https://github.com/actions/upload-artifact/compare/v3...v4)

---
updated-dependencies:
- dependency-name: actions/upload-artifact
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>",False
2e82d947a61a2e929ff48204208105e3dcdd78af,2023-12-18 18:09:26,dependabot[bot],"Bump github/codeql-action from 2 to 3

Bumps [github/codeql-action](https://github.com/github/codeql-action) from 2 to 3.
- [Release notes](https://github.com/github/codeql-action/releases)
- [Changelog](https://github.com/github/codeql-action/blob/main/CHANGELOG.md)
- [Commits](https://github.com/github/codeql-action/compare/v2...v3)

---
updated-dependencies:
- dependency-name: github/codeql-action
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>",False
34eb6fecaca7019c71b4b523502d3e6b0f945d17,2023-12-18 02:37:09,Tim van der Meij,"Merge pull request #17431 from timvandermeij/modernize-test

Modernize the code in the `test/downloadutils.mjs` file",True
f9a0d4efe8290dcb857d87f0888044041200d027,2023-12-18 02:23:50,Tim van der Meij,"Modernize the `rewriteWebArchiveUrl` test helper function

This commit changes the code to use a template string and to use `const`
instead of `var`. Combined with the previous commits this allows for
enabling the ESLint `no-var` rule for this file now.",False
0a10a7b57b3aaa020283118e9f69c883dddc0863,2023-12-18 02:23:50,Tim van der Meij,"Modernize the `downloadManifestFiles`/`ensurePDFsDownloaded` test helper functions

The test helper code largely predates the introduction of modern
JavaScript features and should be refactored to improve readability.
In particular callbacks make the code harder to understand and maintain.

This commit:

- replaces the callback argument with returning a promise;
- replaces the recursive function calls with a simple loop;
- uses `const`/`let` instead of `var`;
- uses arrow functions for shorter code;
- uses template strings for shorter string formatting code.",False
86bee4409a51578503b548fad649a5b23ec50904,2023-12-18 02:23:50,Tim van der Meij,"Modernize the `downloadFile` test helper function

The test helper code largely predates the introduction of modern
JavaScript features and should be refactored to improve readability.
In particular callbacks make the code harder to understand and maintain.

This commit:

- replaces the callback argument with returning a promise;
- uses `const` instead of `var`;
- uses arrow functions for shorter code;
- uses template strings for shorter string formatting code;
- uses `Array.includes` for shorter response code checking code.",False
12999127440201d177db1be106c40b741e501f39,2023-12-16 20:58:03,Jeremy Danyow,"Center radio button checkmark

fixes #12238",False
91188cf2f8d8b95cfa23f60c78c1466d998479e9,2023-12-13 00:47:18,calixteman,"Merge pull request #17414 from calixteman/fix_l11y_highlight

[Editor] Add some missing strings to localize for highlighting",True
eff8b2c67b9222d808f70ea37f19a5bdb839fd3d,2023-12-13 00:27:38,Calixte Denizet,[Editor] Add some missing strings to localize for highlighting,False
76e3e5202195503b414aa0070fc2e3a2fa19706c,2023-12-12 03:00:53,Tim van der Meij,"Merge pull request #17415 from emielmolenaar/fix-viewer-button-closing-tag

Adds missing button closing tag",True
27d4fff5f215a06105fe512806ba306139ce2dc3,2023-12-12 02:54:13,Tim van der Meij,"Merge pull request #17412 from mozilla/dependabot/github_actions/actions/deploy-pages-3

Bump actions/deploy-pages from 2 to 3",True
51187dce060f64808c4dcf2b751487ec6abd85fd,2023-12-12 02:53:38,Tim van der Meij,"Merge pull request #17411 from mozilla/dependabot/github_actions/actions/setup-python-5

Bump actions/setup-python from 4 to 5",True
844c4ebad3dc6949c6c9fd30a234d986032b73b3,2023-12-11 22:12:43,Emiel Molenaar,Adds missing button closing tag,False
b388d407a8cad2ad06a75a072dcd208ef992034e,2023-12-11 17:44:23,dependabot[bot],"Bump actions/deploy-pages from 2 to 3

Bumps [actions/deploy-pages](https://github.com/actions/deploy-pages) from 2 to 3.
- [Release notes](https://github.com/actions/deploy-pages/releases)
- [Commits](https://github.com/actions/deploy-pages/compare/v2...v3)

---
updated-dependencies:
- dependency-name: actions/deploy-pages
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>",False
93143c03fa9915bc7afee51cb75ef121ff2acb46,2023-12-11 17:44:19,dependabot[bot],"Bump actions/setup-python from 4 to 5

Bumps [actions/setup-python](https://github.com/actions/setup-python) from 4 to 5.
- [Release notes](https://github.com/actions/setup-python/releases)
- [Commits](https://github.com/actions/setup-python/compare/v4...v5)

---
updated-dependencies:
- dependency-name: actions/setup-python
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>",False
39a1fc6992ce15f186ed69fbba5dbc674b15b711,2023-12-10 00:42:45,Tim van der Meij,"Merge pull request #17400 from calixteman/autoprint_test

Set a print listener as soon as possible in the autoprint integration test",True
82be74d03614979fea6c346cd0f4d9086a01e819,2023-12-09 21:29:43,Calixte Denizet,"Set a print listener as soon as possible in the autoprint integration test

This test intermittently fails, likely because the auto-print is triggered fast enough
that we don't manage to get it.
So this patch aims to try to set a listener very early in order to be sure that
we'll be aware that a print has been triggered.",False
056e6393d0cd8a18cf5d659a600329ceea9c259e,2023-12-09 19:34:00,Tim van der Meij,"Merge pull request #17398 from calixteman/test_dont_run_beforeunload

Don't run beforeunload callback when closing page in integration tests",True
553729869b7d125549f336a54b70f6d589389ee6,2023-12-09 19:03:42,Jonas Jenwald,"Merge pull request #17397 from Snuffleupagus/app-createScripting-move-options

Re-factor how the `sandboxBundleSrc` option is passed to `PDFScriptingManager`",True
92c15a61f1e62733d1221e4767e2f11d229a4feb,2023-12-09 18:59:31,Jonas Jenwald,"Re-factor how the `sandboxBundleSrc` option is passed to `PDFScriptingManager`

Given that this option isn't used in the Firefox PDF Viewer, we can (ever so slightly) reduce the amount of code needed.",False
988d3a188f8f536b5ad13e262d9e50bd00e942a4,2023-12-09 18:48:29,Jonas Jenwald,"Merge pull request #17395 from Snuffleupagus/pypdf-2332

Support Annotations with corrupt /BS-entries",True
e25cf1ba6f92d1d650705742d0fe6b39f49d77f7,2023-12-09 18:45:18,Calixte Denizet,"Don't run beforeunload callback when closing page in integration tests

For now, running such callbacks is disabled in Firefox but there are some
plan to reenable them: https://bugzilla.mozilla.org/show_bug.cgi?id=1824220
Having them blocks us to switch to bidi with Chrome.",False
a1d859c0829d50ed4cab610a0216e7ef4d8f718d,2023-12-09 18:43:11,Jonas Jenwald,"Disable the ""should compress and save text"" unit-test in Node.js (PR 17202 follow-up)

It seems this unit-test now fails consistently in ""all"" up-to-date Node.js versions. We should probably try and understand why, but for now just disable it to get passing CI tests.",False
d6b9e6246361c51d8eae84f8b7b962657ca7f58b,2023-12-09 18:29:38,Tim van der Meij,"Merge pull request #17391 from Snuffleupagus/AppOptions-collect-non-MOZCENTRAL

Collect a few non-MOZCENTRAL `AppOptions` default values together",True
c908f2d55cf249835eaf59d4ec0ce44f1e8d2b26,2023-12-09 18:27:23,Tim van der Meij,"Merge pull request #17372 from Snuffleupagus/fuzzing-VerbosityLevel-ERRORS

Limit the amount of console ""spam"" during fuzz tests (PR 17337 follow-up)",True
63eb8991a3e2d86aa562e0a444fe90dc01e7f7bb,2023-12-09 15:06:18,Jonas Jenwald,"Support Annotations with corrupt /BS-entries

There's obviously a few things wrong with the Annotations in the referenced PDF document, however parsing of an Annotation shouldn't just break if the /BS-entry isn't a dictionary.",False
07aa706f1c81a86e52b73378f01023e3270ce547,2023-12-09 03:32:37,calixteman,"Merge pull request #17172 from whimboo/webdriver-bidi

Switch Puppeteer tests from CDP to WebDriver BiDi",True
d04d28a56d1454d2721513b451223c2333ffb8e3,2023-12-09 02:29:18,Henrik Skupin,Remove unnecessary loop for closing open pages,False
4db01746d8e7dc2c5aa86d584db285b4f28e1c50,2023-12-09 01:02:50,Henrik Skupin,Run integration tests with WebDriver BiDi instead of CDP for Firefox.,False
15103600ea8368cc93f8bb8bc7b7355a0ffa448d,2023-12-08 23:29:25,calixteman,"Merge pull request #17393 from whimboo/puppeteer_21.6.0

Update Puppeteer to version 21.6.0 and force ""CDP"" protocol",True
a067d38ce32102170384811cc16e44a6908c8058,2023-12-08 16:57:44,Henrik Skupin,"Update Puppeteer to version 21.6.0 and force ""CDP"" protocol",False
d56453289c4a37beb3dbbd108e78c18b6d34fa90,2023-12-07 21:51:43,calixteman,"Merge pull request #17387 from calixteman/integration_test_promises

Use page.evaluateHandle when we want to await on document promises in integration tests",True
c63af10191cfb13a7f1db1da68fb652e0b40f931,2023-12-07 21:30:12,Calixte Denizet,"Use page.evaluateHandle when we want to await on document promises in integration tests

For reference: https://github.com/mozilla/pdf.js/pull/17378#issuecomment-1842864939",False
628054ee5323c90d4da0f6ab4869c941cd81c9e8,2023-12-07 21:28:09,Jonas Jenwald,"Collect a few non-MOZCENTRAL `AppOptions` default values together

Ideally we want as few build-specific branches as possible when defining the default values, to improve readability, hence this change cannot hurt.",False
f54cfe065ac82ad3f38ebbdfb66d75def6e38a3d,2023-12-06 20:59:33,calixteman,"Merge pull request #17388 from calixteman/no_double_color_picker

[Editor] Avoid to have a color picker for highlighting twice in the main toolbar",True
a692f8681ba61e4018b008e24cb6ece4705441a5,2023-12-06 20:51:18,Jonas Jenwald,"Merge pull request #17386 from Snuffleupagus/issue-17361

Remove focus from the toggleButton when closing the sidebar with a mouse (issue 17361)",True
cb9c855993736a56d55c5b551011c469f22ccd3c,2023-12-06 20:40:33,Calixte Denizet,"[Editor] Avoid to have a color picker for highlighting twice in the main toolbar

When opening a pdf from the secondary toolbar, a second color picker is added.
So in order to avoid that, we just stop listening for annotationeditoruimanager
in the toolbar.",False
6b6b7867af4c0e00ea107b673a98398db3ef5e91,2023-12-06 15:41:11,Jonas Jenwald,Remove focus from the toggleButton when closing the sidebar with a mouse (issue 17361),False
8702e1bbb21815cb56bd11f4f8fa909ed1af7ded,2023-12-06 15:36:55,calixteman,"Merge pull request #17359 from calixteman/editor_highlight_color_picker

[Editor] Add a color picker with predefined colors for highlighting text (bug 1866434)",True
7e64f8213d74da72fd31cbb456d8829634fc4095,2023-12-06 15:18:32,calixteman,"Merge pull request #17385 from calixteman/bug1868503

Set text field value as a string when it's for a date or a time (bug 1868503)",True
c8f6b39fc1793c3c430eb99adaa86c342caa3a16,2023-12-06 14:58:39,calixteman,"Merge pull request #17381 from calixteman/editor_highlight_selected

[Editor] Highlight must keep selected after the document has been scrolled",True
098cc16c460549534fec9b31f07a623fbe0982a8,2023-12-06 14:14:30,Calixte Denizet,Set text field value as a string when it's for a date or a time (bug 1868503),False
ff23d37fa23fbfac05e7a17d8b9e3755b089d4a8,2023-12-06 03:57:22,Calixte Denizet,"[Editor] Add a color picker with predefined colors for highlighting text (bug 1866434)

The doorhanger for highlighting has a basic color picker composed of 5 predefined colors
to set the default color to use.
These colors can be changed thanks to a preference for now but it's something which could
be changed in the Firefox settings in the future.
Each highlight has in its own toolbar a color picker to just change its color.
The different color pickers are so similar (modulo few differences in their styles) that
this patch introduces a new class ColorPicker which provides a color picker component
which could be reused in future editors.
All in all, a large part of this patch is dedicated to color picker itself and its style
and the rest is almost a matter of wiring the component.",False
621b7af60d255608e44746454131242dba92a018,2023-12-06 03:52:35,Calixte Denizet,[Editor] Highlight must keep selected after the document has been scrolled,False
c0436013a091ba35b283b3e5a44fc93424e4d825,2023-12-06 03:33:12,calixteman,"Merge pull request #17380 from calixteman/issue17379

[Editor] Don't remove elements from the draw layer after it has been destroyed",True
f7fec8c6d763b29b2bded2ef7871f65950fa8d84,2023-12-06 03:11:20,Calixte Denizet,"[Editor] Don't remove elements from the draw layer after it has been destroyed

Fixes issue #17379.",False
319e85449ea6b49bb89a5542def5f88894c812ee,2023-12-05 19:36:13,Jonas Jenwald,"Merge pull request #17377 from Snuffleupagus/pr-17352-follow-up

Remove the unused `--editor-toolbar-active-bg-color` CSS variable (PR 17352 follow-up)",True
7f04ce4d2210722c1e9a77ebca3b703e24ab1b25,2023-12-05 19:20:15,calixteman,"Merge pull request #17374 from calixteman/bug1865341

[Editor] Avoid conflicts between new persistent refs and the ones created when saving (bug 1865341)",True
c0bc5f901340b02b4a92ca9db8ed5f51ebbd01bf,2023-12-05 18:31:23,Jonas Jenwald,"Remove the unused `--editor-toolbar-active-bg-color` CSS variable (PR 17352 follow-up)

This CSS variable became unused in PR 17352 but we apparently forgot to remove it there, which causes issues when trying to update PDF.js in mozilla-central; see https://treeherder.mozilla.org/push-health/push?repo=try&revision=0701bd2c189d85cd9ff050d6d3e8336d8f36e625&tab=tests&testGroup=pr&selectedTest=browserbasecontentteststaticbrowserparsablecssjs&selectedTaskId=",False
ae5828c968482fcbac7a7fd0dcf62215bbd8c955,2023-12-05 17:03:21,Calixte Denizet,"[Editor] Avoid conflicts between new persistent refs and the ones created when saving (bug 1865341)

When a pdf as a FreeText without appearance, we use a fake font in order to render it
and that leads to create few new refs for the font.
But then when we're saving, we create some new refs which start at the same number
as the previous created ones.
Consequently, when saving we're using some wrong objects (like a font) to check if
we're able to render the newly added FreeText.
In order to fix this bug, we just remove the persistent refs (which are only used
when rendering/printing) during the saving.",False
795c63e400c127cb2704890a96d209ff581ad44a,2023-12-05 15:24:11,calixteman,"Merge pull request #17375 from calixteman/bug1867588

[Editor] Always give the focus to the ink editor when starting drawing (bug 1867588)",True
11610a9e6636e7a1c8b4110e78a1daa077d031ea,2023-12-05 14:56:59,Calixte Denizet,"[Editor] Always give the focus to the ink editor when starting drawing (bug 1867588)

This way, when the editor is blurred, it can be committed and everything works fine.
It fixes issue #17373.",False
a3637e653fd1b8570b998e93c0e123c398411c79,2023-12-04 21:28:41,calixteman,"Merge pull request #17370 from calixteman/issue17368

[Editor] Make sure that all layers are disabled when an editing session is done",True
d7bec1b527dad0c0645234a492ad011ba1abf10a,2023-12-04 21:09:45,Jonas Jenwald,"Limit the amount of console ""spam"" during fuzz tests (PR 17337 follow-up)

Having just tested PR 17337 locally I noticed that especially the `JpxImage`-test causes a ""ridiculous"" amount of warning messages to be printed, which doesn't seem helpful.
Given that only actual `Error`s should be relevant here, we can easily disable this logging during the tests.",False
476cb84d9267283189e96753cee5502641f090e0,2023-12-04 20:33:19,Jonas Jenwald,"Merge pull request #17367 from timvandermeij/modernize-test

Modernize the `calculateMD5` and `verifyManifestFiles` test helper functions",True
43eea0b38e87d3ed75a88a4027c6ea6d3954b8b3,2023-12-04 17:57:39,Calixte Denizet,"[Editor] Make sure that all layers are disabled when an editing session is done

Fixes issue #17368.",False
ac5667166e5a74e07918872115259ac0f418280a,2023-12-04 01:12:50,Tim van der Meij,"Modernize the `verifyManifestFiles` test helper function

The test helper code largely predates the introduction of modern
JavaScript features and should be refactored to improve readability.
In particular callbacks and recursive function calls make the code
harder to understand and maintain.

This commit:

- replaces the callback argument with returning a promise;
- replaces the recursive function calls with a simple loop;
- uses `const`/`let` instead of `var`;
- uses template strings for shorter string formatting code;
- improves the error messages to have more details.",False
c9a923066ba85cacd58900a85712e720cd161790,2023-12-04 01:12:45,Tim van der Meij,"Modernize the `calculateMD5` test helper function

The test helper code largely predates the introduction of modern
JavaScript features and should be refactored to improve readability.
In particular callbacks and recursive function calls make the code
harder to understand and maintain.

This commit:

- replaces the callback argument with returning a promise;
- uses `const` instead of `var`;
- uses arrow functions for shorter code;
- uses template strings for shorter string formatting code;
- improves the error messages to have more details.",False
5111b6d37169822e18a9bf27f298c8612724df01,2023-12-03 19:42:18,Tim van der Meij,"Merge pull request #17337 from manunio/initial-fuzzing-support

fuzz: initial integration",True
8bb807011603840a9cd9bac8977f08531059de45,2023-12-03 18:52:48,manunio,"fuzz: initial integration
  - Adds initial fuzz_target for image decoders.
  - Adds jazzer.js as dev-dependency.
  - Adds a .eslintrc rule to ignore import/no-unresolved error.",False
6b3ae4492e92d369ce982bb947a8821233c19644,2023-12-01 23:19:52,calixteman,"Merge pull request #17364 from calixteman/editor_disable_highlight

[Editor] Disable mouse events when leaving the highlight mode",True
a1d84f5ecfb20f7dab3dc0c3cea5bc2eb85d4773,2023-12-01 22:42:52,Jonas Jenwald,"Merge pull request #17363 from Snuffleupagus/issue-17353

[Firefox] Restore opening of PDF attachments (issue 17353, bug 1867764)",True
83d0b6cb55744365d6a811e320bbdd7a3f3f012c,2023-12-01 21:40:19,Calixte Denizet,[Editor] Disable mouse events when leaving the highlight mode,False
4c92ec900894172cd9e16ffd7b388e544f3e7018,2023-12-01 16:46:56,Jonas Jenwald,"[Firefox] Restore opening of PDF attachments (issue 17353)

This unfortunately broke in PR 17060, since I had completely forgotten about https://bugzilla.mozilla.org/show_bug.cgi?id=1632644#c5 when writing that patch.
The easiest solution, while slightly unfortunate, seems to be to add a couple of non-standard hash parameters specifically for the PDF attachment use-case in the Firefox PDF Viewer. (Note that we cannot use ""nameddest"" here, since we also need to support the stringified destination-Array case.)",False
096426f073e0f095f03e4d0f505dd5985a7ccd7f,2023-12-01 14:52:42,Jonas Jenwald,"Merge pull request #17360 from Snuffleupagus/issue-17347

Remove the ""transitionend"" event listener from the default viewer (issue 17347)",True
fe3bc575deef2b6caa31db067bf5b834a76ca29d,2023-12-01 01:17:15,Jonas Jenwald,"Disable the ""should compress and save text"" unit-test in additional Node.js versions (PR 17202 follow-up)

It seems this unit-test started failing in Node.js version 20.10 as well. We should probably try and understand why, but for now just disable it to get passing CI tests.",False
412502370d2efee794d934524ade39a1ddfe79c8,2023-12-01 00:59:40,Jonas Jenwald,"Remove the ""transitionend"" event listener from the default viewer (issue 17347)

Given that this event listener is only used to trigger rendering after the sidebar has been opened/closed, we can utilize the existing one in the `PDFSidebar` class for this purpose instead. That one is registered on the sidebar DOM-element, and is needed to remove a CSS-class indicating that the sidebar is moving.",False
d65dca781192470267e6af779773637afb83ecae,2023-11-30 14:42:37,calixteman,"Merge pull request #17358 from whimboo/mouse_click_count

Use ""count"" and not ""clickCount"" when calling page.mouse.click()",True
9052327e07e95d95a1085bb9aba596180d63f33e,2023-11-30 14:10:57,Henrik Skupin,"Use ""count"" and not ""clickCount"" when calling page.mouse.click()",False
9ac1ac6ed3be13183746c465d9183df1181eabb7,2023-11-30 00:51:16,calixteman,"Merge pull request #17352 from calixteman/move_button_hcm

[Editor] Fix the colors in HCM when hovering a button in the editor toolbar",True
91eda77f63b23b1fe6a3f789e2b4e281e7a7839f,2023-11-30 00:23:03,Calixte Denizet,"[Editor] Fix the colors in HCM when hovering a button in the editor toolbar

It fixes few errors in the CSS for HCM.
It now complies to the specs from UI/UX.
Only the foreground must change in HCM and not the background, similarly to what
we had for the alt-text button before moving it.",False
6a35e4206e825737ee910b435c29e40d46ffb630,2023-11-29 16:18:42,calixteman,"Merge pull request #17351 from calixteman/fix_mc_test

[Editor] Fix subtype for telemetry data (follow-up of #17329)",True
05ca005eebed9b11515240728315ad4b390d87e5,2023-11-29 15:39:22,Calixte Denizet,"[Editor] Fix subtype for telemetry data (follow-up of #17329)

Fix a test failure in m-c.",False
59cf2ee5a9c38a730e78cf84ba99656f1b467dab,2023-11-28 20:56:32,calixteman,"Merge pull request #17338 from Snuffleupagus/rm-FirefoxCom-requestSync

[Firefox] Remove the `FirefoxCom.requestSync` method",True
b03ce966051a85a5f0f2ceb267667e65beab5ee0,2023-11-28 20:49:58,Jonas Jenwald,"[Firefox] Remove the `FirefoxCom.requestSync` method, since it's unused

After the two previous commits, which removed the remaining call-sites, this method is no longer used and can thus be removed.
As mentioned in the JSDocs for the now removed method, synchronous communication between the viewer and the platform code isn't really a good idea.

Once this patch has landed in mozilla-central some additional clean-up of the platform code will also be possible.",False
9ca504e538a04cd989c9d6c5828479d636e530e4,2023-11-28 20:49:58,Jonas Jenwald,"[Firefox] Don't send the ""abortLoading"" message synchronously

Despite the comment, I believe that changing this should be fine for two separate reasons:
 - The platform code has an ""unload"" event listener, see [this code](https://searchfox.org/mozilla-central/rev/edb2612db13e89f1c44ab95b1e4d4366c16eb9fb/toolkit/components/pdfjs/content/PdfStreamConverter.sys.mjs#533-538), that invokes the same method. Hence we should still be guaranteed that the relevant platform method will run.

 - The `FirefoxComDataRangeTransport.abort` method is never actually invoked in the Firefox PDF Viewer.
   Note that the [`PDFDataRangeTransport.abort` method](https://github.com/mozilla/pdf.js/blob/f4b396f6c88e951174879a52390fa89223326b36/src/display/api.js#L759) is only invoked via the [`PDFDataTransportStream.cancelAllRequests` method](https://github.com/mozilla/pdf.js/blob/f4b396f6c88e951174879a52390fa89223326b36/src/display/transport_stream.js#L167-L175), which in turn is only invoked via the [`WorkerTransport.destroy` method](https://github.com/mozilla/pdf.js/blob/f4b396f6c88e951174879a52390fa89223326b36/src/display/api.js#L2485-L2487). That method is invoked via the [`PDFDocumentLoadingTask.destroy` method](https://github.com/mozilla/pdf.js/blob/f4b396f6c88e951174879a52390fa89223326b36/src/display/api.js#L630), which in the viewer is only invoked via the [`PDFViewerApplication.close` method](https://github.com/mozilla/pdf.js/blob/f4b396f6c88e951174879a52390fa89223326b36/web/app.js#L919) which is never actually called in the Firefox PDF Viewer.

All-in-all, given the existing platform code *and* the current viewer-implementation it should thus be safe to not wait for the ""abortLoading"" message to complete.",False
ddebb0f954b0fea89136e706d23955123da71870,2023-11-28 20:49:58,Jonas Jenwald,"[Firefox] Don't send the ""initPassiveLoading"" message synchronously

The return value is not, nor has it ever been, used for anything and we should thus be able to just send the message.
Note that the responses are already handled by the ""message"" event listener registered above.",False
f4952399a426528146b57cce1352fe78a9064b6a,2023-11-28 20:27:35,calixteman,"Merge pull request #17329 from calixteman/move_alt_text_button

[Editor] Move the alt text button in the editor toolbar",True
59112a7730feddd70726672d9b52e21a91e79e35,2023-11-28 20:06:29,Calixte Denizet,[Editor] Move the alt text button in the editor toolbar,False
8e2507e0e8c8f6f07f5d8e55a98d00ca54c5828d,2023-11-28 19:42:43,calixteman,"Merge pull request #17317 from calixteman/editor_highlight

[Editor] Add a new editor to highlight some text in a pdf (bug 1866119)",True
1ea62939238ddffb664979afb0074dbd6667e523,2023-11-28 18:51:53,Calixte Denizet,"[Editor] Add a new editor to highlight some text in a pdf (bug 1866119)

This patch is first big step for the new highlight feature.
Few patches will follow in order to conform to the specs UX/UI gave us.",False
4bf7ff20270ec5dd6458a136c79fdf1cc590a1c6,2023-11-27 21:23:48,calixteman,"Merge pull request #17344 from calixteman/issue17342

[Editor] Avoid to add a new ink editor when we aren't editing anymore",True
2be136ab700a06b7e6c4f83a1ac6b91e8989406c,2023-11-27 20:48:31,Calixte Denizet,[Editor] Avoid to add a new ink editor when we aren't editing anymore,False
b7e943bc7d31ef4e8f19c60a02eb9e70c2d17eb7,2023-11-26 23:53:25,calixteman,"Merge pull request #17340 from calixteman/issue17332

Don't throw when there isn't enough data to get block info in flate stream",True
52ea20eda4b52286442635c3c8481fa382fe46ee,2023-11-26 22:42:22,Calixte Denizet,"Don't throw when there isn't enough data to get block info in flate stream

but just ends the stream.",False
02a0189795c0431d9be2d5156402c49982b946f0,2023-11-26 18:20:08,Tim van der Meij,"Merge pull request #17339 from timvandermeij/bump

Bump the stable version in `pdfjs.config`",True
dd07267da6558612bcc4e8a6808550b90ce2059e,2023-11-26 18:16:23,Tim van der Meij,Bump the stable version in `pdfjs.config`,False
f4b396f6c88e951174879a52390fa89223326b36,2023-11-26 00:12:40,Tim van der Meij,"Merge pull request #17334 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
ab692f805a45d2fcd6f12d0f2c1e5c2946af7240,2023-11-26 00:04:44,Tim van der Meij,Update translations to the most recent versions,False
dd7ff7e6620bb14866c2512327213a2552a22623,2023-11-26 00:04:44,Tim van der Meij,"Update the JSDoc comments for the new TypeScript version

This commit fixes the JSDoc comment for the `annotationEditorMode` setter.
The types tests fail on that now because the input value was changed from
a number to an object with various properties in recent patches, but the
JSDoc comment was not updated accordingly.

Moreover, the types tests also fail because TypeScript 5.3 assumes that
getters and setters have equal return and input value types, which is
arguably also what one would expect, but our `annotationEditorMode`
getter and setter deviate from that because the getter returns a number
while the setter accepts an object. Given that it seems more important
to document the setter entirely, including the meaning and types of its
properties, and the type of the getter can easily be inferred from this
comment and the other JSDoc comments that have `annotationEditorMode` in
it, we remove the getter type to make the types tests pass again.",False
8aa26fad243e6f018a38dd60dd00c1b3897f60f9,2023-11-25 22:45:09,Tim van der Meij,"Update the code style for the new Prettier version

This patch is automatically generated using `gulp lint --fix`.",False
7381515e20a40225315b724ed41a615fb12e6e93,2023-11-25 21:55:35,Tim van der Meij,Update dependencies to the most recent versions,False
9d863f5180ab4d28b2ee9d602012fdc7178f86d1,2023-11-25 21:13:37,calixteman,"Merge pull request #17331 from calixteman/lang_marker

Remove language codes from text strings.",True
eb5f610d18a0613fce115452929ee3b4349eb38e,2023-11-25 19:39:31,Calixte Denizet,"Remove language codes from text strings.

And take care to have an even number of bytes with utf16 strings.",False
4b1de1537fc7d01d9d0bf4f77bc287e519047c34,2023-11-25 17:19:04,Tim van der Meij,"Merge pull request #17320 from tamuratak/fix_webpack_readme

Fix examples/webpack/README.md.",True
3d9f68cb9781fc2a3ec1916fd272a064cb4e9013,2023-11-25 13:01:12,Jonas Jenwald,"Merge pull request #17328 from Snuffleupagus/fetchData-blob

Use the `fetchData` helper function in more cases",True
58316369e5dba7455f0149a3ede0c215da4d6738,2023-11-24 23:39:18,calixteman,"Merge pull request #17330 from calixteman/issue17327

[Editor] Only focus the canvas for mouse events when drawing in the canvas",True
42147e88398a77394f06563765953da7f5cb3f11,2023-11-24 20:30:04,Calixte Denizet,"[Editor] Only focus the canvas for mouse events when drawing in the canvas

And if we've to focus it, we must prevent scrolling to avoid to draw at an
unexpected position.",False
fd7a7e285914bf224a6b112b15fb95e75363398c,2023-11-24 17:35:57,Jonas Jenwald,"Use the `fetchData` helper function in more cases

 - Extend the `fetchData` helper function to also support fetching of ""blob"" data.

 - Use the `fetchData` helper function more in the code-base, when fetching non-PDF data. Given that the Fetch API isn't supported for all protocols, this should improve compatibility for the PDF.js library.",False
d679078beb45314aa45f12c212ea9e21d3f3154f,2023-11-24 13:10:23,calixteman,"Merge pull request #17318 from calixteman/bug1864136_2

Make sure that only one radio button is checked in its group (bug 1864136)",True
1f0f51613a958d661ce1b91c10d66c59f215e66d,2023-11-23 21:31:49,Calixte Denizet,"Make sure that only one radio button is checked in its group (bug 1864136)

When the first checked radio is met, the others in the group are set to false.",False
6e7381bc20b9152b51ce5cef2fbc0601c1e90d05,2023-11-23 05:55:20,Takashi Tamura,Fix examples/webpack/README.md. The `.mjs` extension is necessary. Close #17319,False
5781e722bf1c56168b5cbd8d4b40184d30381a71,2023-11-22 18:36:24,Jonas Jenwald,"Merge pull request #17294 from Snuffleupagus/toolbarViewerRight-reorder

Move the editor-buttons in the main toolbar",True
5df7c970742f16c809c2543858e9290a00832aa1,2023-11-22 17:34:05,Jonas Jenwald,"Move the editor-buttons in the main toolbar

By introducing a CSS variable for the editor-toolbars we're able to handle resizing of the viewer without complicating the code too much.",False
09ff1b98ee9ff9f781506b484309a9d44b5d62fe,2023-11-22 16:53:27,calixteman,"Merge pull request #17304 from calixteman/editor_highlight2

[Editor] Add support for saving/printing a newly added Highlight annotation (bug 1865708)",True
f8f44329617e045c5610f6860efeb5919352e124,2023-11-22 15:11:55,Calixte Denizet,[Editor] Add support for saving/printing a newly added Highlight annotation (bug 1865708),False
83f00292129674c3b1c92c8629a8b50d3c5a6edd,2023-11-21 18:41:55,Jonas Jenwald,"Merge pull request #17287 from Snuffleupagus/CSS-loading-icon

Re-factor the loading-icons used in the viewer toolbars",True
625d4f794e449ffb022685507a979387ca778e1c,2023-11-21 18:25:36,Jonas Jenwald,"Re-factor the loading-icons used in the viewer toolbars

Currently the SVG images for the loading-icons exist in two versions, for the light- respectively dark-theme, which nowadays are the only ""duplicated"" icons left.
The reason for this is that these icons are being used in `input`-elements, where the regular `mask-image` approach used for all buttons don't work.

To address this we add containers for the `input`-elements, such that we have a ""regular"" DOM-element where we can use `mask-image`.",False
02ccdbb2b1b81b501f5b755217481387cdd40883,2023-11-21 15:26:18,calixteman,"Merge pull request #17291 from calixteman/editor_highlight1

[Editor] Add a way to extract the outlines of a union of rectangles",True
086a5921dc34dfd0e06dd994032dcf7e69305fe0,2023-11-20 23:23:35,Jonas Jenwald,"Merge pull request #17303 from Snuffleupagus/issue-17302

Throw a `JpegError` when a JPEG image has no frame data (issue 17302)",True
31d9b9f574d61cd8f275f86628dfd9459a281769,2023-11-20 23:15:19,Calixte Denizet,"[Editor] Add a way to extract the outlines of a union of rectangles

The goal is to be able to get these outlines to fill the shape corresponding
to a text selection in order to highlight some text contents.
The outlines will be used either to show selected/hovered highlights.",False
a6f0609a6e40db3f8b741b19aacff354f9d4647b,2023-11-20 22:03:49,Jonas Jenwald,"Throw a `JpegError` when a JPEG image has no frame data (issue 17302)

Given that there's nothing to parse in this case, since we're dealing with an invalid JPEG image, throwing an *explicit* Error makes sense here.",False
d8424a43baf4c18dd19c77f466bbfff2b15cd8f4,2023-11-20 20:15:53,calixteman,"Merge pull request #17300 from calixteman/issue17299

[Editor] Make the alt-text button large enough to display correctly whatever string",True
bd6c2a192c4727b952976db90038f905ac9e0358,2023-11-20 17:52:02,Calixte Denizet,[Editor] Make the alt-text button large enough to display correctly whatever string,False
3459615ec3dad8221194c35b003031a6ea6b9225,2023-11-19 02:18:09,calixteman,"Merge pull request #17293 from calixteman/dark

Restore the option to set light/dark mode for chromium and generic builds",True
53101b379b3aa5986f0fa61b6cad9e3ecb8dc852,2023-11-19 02:02:25,Calixte Denizet,Restore the option to set light/dark mode for chromium and generic builds,False
ffbfd680ec418c05afdcafb6b3e6e962f978f8b0,2023-11-15 17:29:52,calixteman,"Merge pull request #17281 from calixteman/delete_button_tooltip

[Editor] Add a tooltip to the delete button",True
b7d28a3bf68bf38827d62cee35818e12cd386c83,2023-11-15 15:21:39,Calixte Denizet,[Editor] Add a tooltip to the delete button,False
1df648733e9736d8fcb6d9dcc2a3b3b7f3b1bc94,2023-11-14 20:39:05,Jonas Jenwald,"Merge pull request #17277 from Snuffleupagus/L10n-fetchData

Re-factor how the `GenericL10n` class fetches localization-data",True
5099dc4699022c16ded060ac0c4217f58faa1cb9,2023-11-14 20:29:13,Jonas Jenwald,"Merge pull request #17273 from Snuffleupagus/L10n-lowercase-locales

Re-factor the `L10n`-implementations to use lowercase language-codes internally",True
709d89420edc930d4011eadc5e3686a38a956dbe,2023-11-14 18:15:14,Jonas Jenwald,"Re-factor how the `GenericL10n` class fetches localization-data

 - Re-factor the existing `fetchData` helper function such that it can fetch more types of data, and it now supports ""arraybuffer"", ""json"", and ""text"".
   This only needed minor adjustments in the `DOMCMapReaderFactory` and `DOMStandardFontDataFactory` classes.[1]

 - Expose the `fetchData` helper function in the API, such that the viewer is able to access it.

 - Use the `fetchData` helper function in the `GenericL10n` class, since this should allow fetching of localization-data even if the default viewer is run in an environment without support for the Fetch API.

---
[1] While testing this I also noticed a minor inconsistency when handling standard font-data on the worker-thread.",False
1f9533bae9b4567508a9f06c2e014d1ba71825e2,2023-11-14 01:36:03,Jonas Jenwald,"Re-factor the `L10n`-implementations to use lowercase language-codes internally

This is consistent with the implementation used in the (now removed) webL10n-library, and by only using lowercase language-codes internally in the `L10n`-implementations we should avoid future issues e.g. when users manually set the `locale`-option (in the default viewer).",False
44cde3ccca05162b5d1c4908000f6907ba21fb9a,2023-11-13 22:13:08,Jonas Jenwald,"Merge pull request #17263 from timvandermeij/font-tests

Introduce a GitHub Actions workflow for running the font tests",True
787d092ecb2aad6603a18f739453430c096835f3,2023-11-13 20:27:42,calixteman,"Merge pull request #17271 from calixteman/maif

Get the field name from its parent when it doesn't have one when collecting fields (bug 1864136)",True
09b4fe6a3059ca2536318f287c56f00fbd9f5082,2023-11-13 19:11:14,Calixte Denizet,"Get the field name from its parent when it doesn't have one when collecting fields (bug 1864136)

Some fields, somewhere under the Fields entry in Acroform, could have no name (in T)
but with a parent which has a name but which isn't somewhere under Fields.
As a side-effect, this patch prevents infinite loops because of potential cycles
under Fields.",False
096c5fe2b53fa6c862dc3ca182c5444822f5f076,2023-11-13 16:04:02,Jonas Jenwald,"Merge pull request #17272 from Snuffleupagus/issue-17254

Fix typo in the `--hcm-highlight-filter` CSS variable name (issue 17254)",True
90864a5672fe4f9a9a1fd5fbaf3d94c6ce51cb0d,2023-11-13 15:48:35,Jonas Jenwald,Fix typo in the `--hcm-highlight-filter` CSS variable name (issue 17254),False
7b89e7e0d2d14fce7521fcc084c24827990ecb0b,2023-11-13 15:40:33,Jonas Jenwald,"Merge pull request #17270 from Snuffleupagus/issue-17269

[GENERIC viewer] Fallback to the short-format of the language code (issue 17269)",True
3f7fd2f035209e0b916216f9a980eae228041a79,2023-11-13 14:34:48,Jonas Jenwald,"[GENERIC viewer] Fallback to the short-format of the language code (issue 17269)

This shouldn't cause any issues, since `GenericL10n.#createBundle` has an early return for languages that don't exist in the `locale.json` file.",False
8157f39c62fa0d73c734f5de187c835cdd29da9f,2023-11-12 22:18:04,Tim van der Meij,"Introduce a GitHub Actions workflow for running the font tests

This commit migrates the font tests away from the bots. Not only are the
font tests broken on the Windows bot since some time, they also run on
Python 2 (end of life since January 2020) and `ttx` 3.19.0 (released in
November 2017). The latter is installed via a submodule, which requires
more complicated logic for finding and running `ttx`.

We solve the issues by implementing a modern workflow that installs the
most recent stable Python and `ttx` (`fonttools` package) versions. This
simplifies the `ttx` driver code as well because it can now assume `ttx`
is available on the path (just like we do for e.g. `node` invocations).
GitHub Actions takes care of creating a virtual environment with
`fonttools` in it so that the `ttx`  entrypoint is available. Locally
the font tests can be run in a similar way by creating and sourcing a
virtual environment with `fonttools` in it before running the font
tests, and a README file is included with instructions for doing so.",False
69452bb60e65da7ebfbabe384a7aad6a6ea9054b,2023-11-12 22:18:04,Tim van der Meij,"Implement optionally running the tests in headless mode

This commit prepares for running the font tests on GitHub Actions where
we can't spin up headful browsers because there are no display
capabilities on the workers. This will also be useful for porting other
test targets to GitHub Actions at a later time, as well as running the
tests locally in headless mode.",False
a1d84f8ce1ae4459ee237a6b1220c90b27d967e5,2023-11-12 19:29:25,Tim van der Meij,"Refactor parameter passing for the `startBrowser(s)` functions in `test.mjs`

This commit prepares for the introduction of extra options in later
commits by changing the function signatures of the `startBrowser(s)`
functions to take parameter objects instead of plain parameters. This
makes the call sites explicitly state which parameters they pass,
improving overall readability as well.",False
24fcc042f4b23153e8dce3a2315a7828800ee92b,2023-11-12 18:36:45,Tim van der Meij,"Refactor URL handling for the `startBrowsers` function in `test.mjs`

The current logic is more complicated than it needs to be because it's
passing a callback function to `startBrowsers` instead of a string.
This commit simplifies the logic by passing the base URL as a string to
`startBrowsers` and having it do further augmentation internally,
thereby removing all indirection of the function calls to `makeTestUrl`
and the inner function it returned.",False
78841199750f50cd94033850bdd53910a11133b9,2023-11-12 18:34:02,Tim van der Meij,"Merge pull request #17268 from Snuffleupagus/ci-test-refactor

Clean-up the CI workflow a bit",True
5687326046c6eede62578c4891ced5074364ff65,2023-11-12 18:18:02,Jonas Jenwald,"Clean-up the CI workflow a bit

After recent PRs the size and scope of the CI workflow is now reduced, and this patch tries to simplify things further. More specifically we can directly specify the gulp-tasks in the workflow, and thus clean-up the `gulpfile` a tiny bit.

Note that this will technically be slower, since the tests are now run in series (rather than in parallel), however `gulp externaltest` runs so quickly that it really won't matter in practice.",False
af3147c3fe5e5885ae74a2320c0b74c17eb1ca1c,2023-11-12 18:02:20,Tim van der Meij,"Merge pull request #17266 from Snuffleupagus/typestest-workflow

Move `gulp typestest` to a separate GitHub Actions workflow",True
d89ca978876e14edb8ebdd5cd30c85af8dcceaea,2023-11-12 17:57:29,Jonas Jenwald,"Move `gulp typestest` to a separate GitHub Actions workflow

This way we introduce more parallelism in the GitHub Actions tests, which should reduce overall runtime and thus cannot hurt.",False
e0e5be2c62967c583bc262771a742baee388c215,2023-11-12 17:38:26,Tim van der Meij,"Merge pull request #17267 from Snuffleupagus/lint-workflow

Move linting to a separate GitHub Actions workflow",True
9172d649ed17711f232803343cb26c2bf88b2ed6,2023-11-12 17:34:13,Tim van der Meij,"Merge pull request #17264 from calixteman/issue17262

[Editor] Avoid to click on the delete button in the freetext integration tests",True
290b4831671b64d129e511e700883a8939ad1427,2023-11-12 17:32:34,Tim van der Meij,"Merge pull request #17255 from Snuffleupagus/issue-17228

Ensure that the viewer waits for the library to complete loading (issue 17228)",True
2869b638006c41d652f35548097c4d3138690da3,2023-11-12 17:30:44,Tim van der Meij,"Merge pull request #17252 from tamuratak/to_mts

Rename *.d.ts to *.d.mts",True
37a8311b4c3c58ddd5516c59c62d18cbfe8e0ba2,2023-11-12 17:28:21,Tim van der Meij,"Merge pull request #17265 from Snuffleupagus/createCDNWrapper-blob-type

Set a type for the `Blob` used in `createCDNWrapper` (issue 17259)",True
2f70369d023275beba87617a55c825b7d6fa60f3,2023-11-12 14:51:29,Jonas Jenwald,"Move linting to a separate GitHub Actions workflow

This way we introduce more parallelism in the GitHub Actions tests, which should reduce overall runtime and thus cannot hurt.",False
ade692ff2e1fe86e635c9fe571afe3f5ee1a1d44,2023-11-12 14:00:26,Jonas Jenwald,"Set a type for the `Blob` used in `createCDNWrapper` (issue 17259)

Hopefully this is enough to address the problem of initializing the Worker in Chromium-based browsers.
Locally I've tried to *force* use of `createCDNWrapper` in development mode, by commenting out the `isSameOrigin` checks, and worker-loading fails against `master` and works with this patch.",False
61ed77cfb4baf530c2814066ab2c9cbdd42e4328,2023-11-12 04:00:36,Takashi Tamura,"Rename *.d.ts to *.d.mts. Close #17241

Add a type test for legacy.

- https://www.typescriptlang.org/docs/handbook/modules/reference.html#file-extension-substitution",False
2d42c0454346d4a7371a3e78678f0ed836104566,2023-11-12 01:17:05,Calixte Denizet,[Editor] Avoid to click on the delete button in the freetext integration tests,False
26fcd261fbe4e7992b26dd8066b50498ab4f90b7,2023-11-11 23:16:18,Tim van der Meij,"Merge pull request #17260 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
4b7a0d1841a983e37a10d4fcb0fa82d026ff6000,2023-11-11 20:28:30,Tim van der Meij,Update translations to the most recent versions,False
8e2c9a30d79f4f48d31edb05b4ead492c1d4d50e,2023-11-11 20:27:28,Tim van der Meij,Update dependencies to the most recent versions,False
8e5311ebf7743e4a3e8b04438809ef0bb09554df,2023-11-11 03:34:30,Jonas Jenwald,"Merge pull request #17256 from Snuffleupagus/editorParamsToolbar-color

Tweak the background-color of the `editorParamsToolbar`s",True
e61b8327645170643556b6b189ef7f34cb1a404c,2023-11-10 22:49:39,Jonas Jenwald,"Tweak the background-color of the `editorParamsToolbar`s

Currently the background-color of the `editorParamsToolbar`s don't match that of the arrow, which is especially noticable in dark mode (see zoomed-in screen-shots below).
The simplest solution seem to be to just style the `editorParamsToolbar`s like the `secondaryToolbar`, to limit the amount of CSS changes required.",False
17213062cc456bd4d4991d5b72acc83b9f68f5a8,2023-11-10 22:27:33,calixteman,"Merge pull request #17253 from calixteman/issue16839

Fix the maxp table version in font to make it visible on Windows",True
f56215f24638da5827d28e972a20b7052beaf5ca,2023-11-10 21:31:31,calixteman,"Merge pull request #17243 from calixteman/editor_bin

[Editor] Add a toolbar to selected editors with a button to delete it  (bug 1863763)",True
334f0eb06050884cdde9abd09a2d769da0bf5f47,2023-11-10 19:49:43,Calixte Denizet,[Editor] Add a toolbar to selected editors with a button to delete it (bug 1863763),False
59ce1a4a3fdac2a59b32e615ce68fb2ef310946f,2023-11-10 18:46:20,Calixte Denizet,Fix the maxp table version in font to make it visible on Windows,False
823d375b8b979680a0932f3e199a76fbdb453ac8,2023-11-10 17:52:49,Jonas Jenwald,"Ensure that the viewer waits for the library to complete loading (issue 17228)

This should *hopefully* fix 17228, by tweaking the build scripts to give the GENERIC viewer something to await to avoid breaking third-party users of the standalone viewer components.",False
1b88aad0db542d7bc04babffa137c4662c6b971a,2023-11-10 14:54:30,Jonas Jenwald,"Merge pull request #17244 from Snuffleupagus/rm-openFile-button

Remove the ""Open file""-button from the main toolbar",True
f1122f048ec745e503ae9a8cd9c57b8d2e7183bb,2023-11-10 00:35:53,calixteman,"Merge pull request #17247 from calixteman/bug1863910

Don't avoid to execute the Blur callback when blurring a text field (bug 1863910)",True
ec396c215025e17e777e77711aed4b64313fc566,2023-11-09 18:20:33,Calixte Denizet,Don't avoid to execute the Blur callback when blurring a text field (bug 1863910),False
bf016743fc9fcf6da3df5c9ab85ecbfd028a17c3,2023-11-09 12:38:17,Jonas Jenwald,"Remove the ""Open file""-button from the main toolbar

This button is *only* used in the GENERIC viewer, and will currently be visible either in the main or secondary toolbars (depending on the viewer width).
To simplify upcoming changes, and to avoid then having to complicate the relevant CSS rules unnecessarily, let's place the ""Open file""-button permanently in the secondary toolbar instead.

(Note that the GENERIC viewer also, since five years, supports drag-and-drop in order to open local files.)",False
42f3d57365dc173d13e54d3e54f6bf8db292adcd,2023-11-08 19:58:11,Jonas Jenwald,"Merge pull request #17242 from Snuffleupagus/fieldObjects-async-fetch

Ensure that `fieldObjects` and `#collectFieldObjects` handles References correctly",True
ff62fc8e2c7b805f5ce6ee36828b08cf85cb277a,2023-11-08 19:09:13,Jonas Jenwald,"Skip `fieldObjects` that are not actually References

The `fieldObjects`-getter is implemented in the `PDFDocument` class, which means that the `this._localIdFactory`-property that we pass to `AnnotationFactory.create` doesn't actually exist.
The reason that this hasn't caused any bugs, that I'm aware of, is that all /Fields-entries need to be References to actually make sense.",False
65c827b0ebf566631f49dc602681e326513982c7,2023-11-08 19:08:57,Jonas Jenwald,"Ensure that `fieldObjects` and `#collectFieldObjects` handles References correctly

The `fieldObjects`-getter itself is called, from `src/core/worker.js`, in a way that'll ensure that any `MissingDataException`s are handled. However the problem is that the actual data-lookups in `fieldObjects` and `#collectFieldObjects` are done inside of a Promise, which means that `MissingDataException`s won't be handled and parsing could thus break.

To address this we change all data-lookups to be asynchronous instead.",False
c6a717f90061267d199102b874ff9a47cb11073b,2023-11-08 03:20:55,calixteman,"Merge pull request #17233 from calixteman/issue17232

Don't try to collect a nonexistent field because of an invalid ref",True
acc62f80de3a3df966275908d64b48aa5ab0e0bb,2023-11-08 00:28:29,Calixte Denizet,Don't try to collect a nonexistent field because of an invalid ref,False
72338ce05df18f77746ab256efb71c310db9f45e,2023-11-05 23:31:34,Tim van der Meij,"Merge pull request #17226 from timvandermeij/bump

Bump the stable version in `pdfjs.config`",True
f16401bd678bac29ca2560dca0dfbde7be48de39,2023-11-05 23:28:09,Tim van der Meij,Bump the stable version in `pdfjs.config`,False
50f52b43a5daf0cb17e275b809ae1845825ea652,2023-11-04 22:10:03,Jonas Jenwald,"Merge pull request #17222 from Snuffleupagus/rm-viewerCssTheme

Remove the `viewerCssTheme`-option, since it's partially broken",True
87c83ab31c9a333f840f22fc175b216576fbf0fa,2023-11-04 19:59:14,Tim van der Meij,"Merge pull request #17220 from Snuffleupagus/pr-17176-followup

Also pause translation when expanding the current outline-item (PR 17176 follow-up)",True
0d574f66bc6d8f9dd4ebce95717fc94bb3f608e3,2023-11-04 19:56:35,Tim van der Meij,"Merge pull request #17224 from Snuffleupagus/dist-webpack

Update `external/dist/webpack.js` to account for outputting of JavaScript modules (PR 17055 follow-up)",True
13ca668be03d3aa375818727ceb53243309c2d85,2023-11-04 17:34:26,Jonas Jenwald,"Update `external/dist/webpack.js` to account for outputting of JavaScript modules (PR 17055 follow-up)

Hopefully this makes sense, since I don't know enough about Webpack to tell exactly how this file is being used in practice.",False
9eb9d3f949205ea1e075d8d0ca28f4dcc6284804,2023-11-04 17:23:18,Tim van der Meij,"Merge pull request #17218 from Snuffleupagus/app-open-API-options

Re-factor how some API-options are handled in `PDFViewerApplication.open` (PR 17208 follow-up)",True
71a6c749d0231f962c5fe71f263fa886629b699c,2023-11-04 17:15:03,Tim van der Meij,"Merge pull request #17202 from Snuffleupagus/node-ci-latest

Also test the latest Node.js version in GitHub Actions",True
09f45e6e5258d5a054d2f236fb8e7213b1add24c,2023-11-04 17:06:32,Tim van der Meij,"Merge pull request #17217 from Snuffleupagus/more-optional-chaining-5

Use even more optional chaining in the code-base",True
5e6d80ad0758e022728e8c53e965eda9e5506231,2023-11-04 17:00:22,Tim van der Meij,"Merge pull request #17223 from Snuffleupagus/update-packages

Update packages and translations",True
89bb0c9e6637d9cc01e25a2bf49176c6dd642b3d,2023-11-04 14:17:38,Jonas Jenwald,Update l10n files,False
e0898a7ee36cf76a7a149f2f32568b6f159d2a6f,2023-11-04 14:17:31,Jonas Jenwald,"Update npm packages

The new major version of `gulp-zip` shouldn't be a problem, given the changes listed in https://github.com/sindresorhus/gulp-zip/releases/tag/v6.0.0",False
d46578e9591743c87f4a6cf316c4deb7e1470185,2023-11-04 13:49:01,Jonas Jenwald,"Remove the `viewerCssTheme`-option, since it's partially broken

The `viewerCssTheme`-implementation has always been somewhat hacky, and now it's also *partially* broken ever since we've started using CSS nesting.
Trying to support nested media queries would thus require a lot more parsing of the CSS rules, which seems inefficient and thus generally undesirable.[1]

As discussed on Matrix, let's try to remove the `viewerCssTheme`-option and see if there's any (significant) fallout from this.

---
[1] If this option is brought back, it seems to me that it (in Firefox) should probably be set through the platform-code that handles theming.",False
bf7e8126df79a50fced589e93c13c2f095e592d3,2023-11-03 17:56:36,Jonas Jenwald,"Also pause translation when expanding the current outline-item (PR 17176 follow-up)

Depending on the structure of the outline we could potentially need to expand a few levels, especially in long PDF documents, hence it cannot hurt to pause translation in that case as well.",False
84aaafcd3e5ff54390e302f3dff385f04e0b49ae,2023-11-03 15:23:19,Jonas Jenwald,"Use a limit when splitting URL-strings in `web/app.js`

This should be a *tiny* bit more efficient, since it avoids parsing substrings that we don't care about.",False
e20dabb65bf208d3d1a6bba23e2c28fdf8aaa2dd,2023-11-03 15:22:31,Jonas Jenwald,"Simplify how the `docBaseUrl`-option is handled in `PDFViewerApplication.open`

Reduce the ""special"" handling a bit here, by setting the viewer-option such that it'll be automatically included in the API-parameters.",False
8bbfcd3bef0d265c928a776fcdd66f2100fbb554,2023-11-03 15:22:27,Jonas Jenwald,"Re-factor how the `canvasMaxAreaInBytes`-option is handled in `PDFViewerApplication.open` (PR 17208 follow-up)

With the changes in PR 17208, where browser-preferences are now handled as ""regular"" viewer-options, we can tweak the definition of `canvasMaxAreaInBytes` to slightly simplify things in the `PDFViewerApplication.open` method.",False
99522c32012d13b583c72fbb463118991565934d,2023-11-02 21:28:03,Jonas Jenwald,"Also test the latest Node.js version in GitHub Actions

Hopefully this will allow us to catch bugs in new Node.js versions earlier, rather than having to wait for bug reports.

Given that `CompressionStream` is (currently) only potentially used when saving a *modified* PDF document, which is unlikely to be a common use-case in Node.js environments, let's just disable the affected unit-test for now.",False
155a302e740bc8e36841c5d6117e11603a7af045,2023-11-02 21:17:33,Jonas Jenwald,Use even more optional chaining in the code-base,False
f528f6f07bfb13a5e805aa20235a68ce6bc6c4e1,2023-11-02 21:12:01,calixteman,"Merge pull request #17216 from calixteman/issue17215

Render rich text with only one text element",True
085aa4207deefbafabca056ada75b237b85d4ac5,2023-11-02 20:05:52,Calixte Denizet,Render rich text with only one text element,False
20adb2c44db15195b451eb088d5a7e30beb12e38,2023-11-02 17:58:09,Jonas Jenwald,"Merge pull request #17201 from Snuffleupagus/node-ci-lts

Update the GitHub Actions workflows to use the current Node.js LTS version",True
6df897267f2617d80a04ea154431e8b71a88822b,2023-11-02 00:04:57,Jonas Jenwald,"Merge pull request #17208 from Snuffleupagus/browser-prefs-async-init

[Firefox] Fetch browser preferences/options together with the viewer preferences (bug 1862192)",True
ce9cfa2d729d3550fc24894e139393d07e3f90b6,2023-11-01 00:43:13,Jonas Jenwald,"Skip the PREFERENCE-branch in `AppOptions.getAll` in official builds

Given that this branch is only necessary in development mode and *during* building, but is never actually used in the final viewer-bundles, we can utilize the pre-processor to ignore this code.",False
eebc230cf17ba7bfc9c405dec505d41dabf47fc7,2023-10-31 20:02:01,Jonas Jenwald,"[Firefox] Fetch browser preferences/options together with the viewer preferences (bug 1862192)

Currently we *synchronously* fetch a number of browser preferences/options, from the platform code, during the viewer respectively PDF document initialization paths.
This seems unnecessary, and we can re-factor the code to instead include the relevant data when fetching the regular viewer preferences.",False
50c0fccda6b6f58fb421179a5e371ad66164e6e6,2023-10-30 15:00:38,calixteman,"Merge pull request #17204 from calixteman/issue17167

[Editor] Don't steal the keyboard events when editing mode is enabled",True
77475ac61044e2ca3e6183232eb252930301b0b7,2023-10-30 14:33:44,Calixte Denizet,[Editor] Don't steal the keyboard events when editing mode is enabled,False
1ab0f8a0ecf15dc6b134dba76f8aa35fd5b066dc,2023-10-30 03:53:09,calixteman,"Merge pull request #17205 from calixteman/issue17200

Fix the intermittent failures with PageOpen/PageClose test",True
66b1a1f34b2a4f47fd38eb29538037f0359d8793,2023-10-30 00:41:51,Calixte Denizet,Fix the intermittent failures with PageOpen/PageClose test,False
f95a2bbe2944d63fc39916113c617339194dcbf1,2023-10-29 19:55:57,Tim van der Meij,"Merge pull request #17203 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
447eeeba4d47f23a4173ad28ff96b7dbadb5b107,2023-10-29 18:59:56,Tim van der Meij,Update translations to the most recent versions,False
ecba5b7c6dc4a188da03e1de88eab7aeebc62613,2023-10-29 18:52:30,Tim van der Meij,Update dependencies to the most recent versions,False
d00c7d5cdcdc51dc6303d6cd5550424bbd8d5f04,2023-10-29 17:12:11,Jonas Jenwald,"Update the GitHub Actions workflows to use the current Node.js LTS version

The active LTS version is now based on Node.js version 20, hence let's update the relevant workflows to use that one instead; see https://en.wikipedia.org/wiki/Node.js#Releases

Given that we still support Node.js version 18, i.e. the maintenance LTS version, in the PDF.js library we'll keep testing both versions in GitHub Actions to prevent regressions.",False
0329b5e130d4db21b897967daa02e6652c1f44af,2023-10-29 16:29:32,Tim van der Meij,"Merge pull request #17153 from Snuffleupagus/src-navigator-checks

Guard `navigator`-object accesses in `src/`-files (issue 15728)",True
355bce28f5933eae532f3b735a227f147ed50326,2023-10-29 16:14:28,Tim van der Meij,"Merge pull request #17199 from timvandermeij/setup-node-4

Upgrade `setup-node` to version 4 in the GitHub Actions workflows",True
26fc69f2413e9a91cfc6e7412d5ceb9faf741db6,2023-10-29 14:01:09,Jonas Jenwald,"Merge pull request #17192 from Snuffleupagus/textLayer-pause-l10n

Pause translation when appending the textLayer and structTreeLayer to the page",True
80612f371474f388e2be0964db9ba2faf7e5f99a,2023-10-29 02:03:17,Jonas Jenwald,"Merge pull request #17184 from Snuffleupagus/xfaLayer-append-print

Handle appending consistently in the xfaLayer regardless of rendering intent (PR 17177 follow-up)",True
b798415147e801842505927c128a9d10baaa3820,2023-10-29 01:38:45,Jonas Jenwald,"Merge pull request #17081 from Snuffleupagus/examples-modules

Update the `examples/`-folder to account for outputting of JavaScript modules (PR 17055 follow-up)",True
6dff90ac1f671dd0c06111e396d2af8ffb9f02ba,2023-10-29 00:38:02,Tim van der Meij,"Upgrade `setup-node` to version 4 in the GitHub Actions workflows

This major version mainly involves not using Node.js 16 internally
anymore, which will be end of life on September 11th. This prevents the
workflows from using an unsupported version of Node.js as well as
deprecation warnings getting printed in the workflow logs.

For more information please refer to
https://github.com/actions/setup-node/releases/tag/v4.0.0 and
https://github.com/actions/setup-node/issues/850.",False
973cbb000b7cd653895de1a4a8344452e2006319,2023-10-29 00:18:34,Tim van der Meij,"Merge pull request #17198 from timvandermeij/python-3.12-lint

Update the GitHub Actions workflow for the Fluent linter",True
4845d35c50d1e75ba5c521d7b07eee40c29dc77e,2023-10-28 23:45:25,Tim van der Meij,"Fix the configuration path in the GitHub Actions workflow for the Fluent linter

I noticed the following warning in the GitHub Actions workflow logs:

`Configuration file not found: .github/linter_config.yml`

The configuration file is called `fluent_linter_config.yml` instead, so
this commit fixes the path so it points to the correct file.

Fixes 487816b.",False
9d6cdf216d501c410bfc89fc42b40b9f9ecae3b6,2023-10-28 23:40:15,Tim van der Meij,"Use Python 3.12 in the GitHub Actions workflow for the Fluent linter

The current stable version of Python is Python 3.12, see
https://www.python.org/downloads, so we should switch to that since
Python 3.10 is older and only receives security updates.",False
4be44a370e9fab55ed7686b5fbdf6a05a00cdbfc,2023-10-28 23:32:39,Tim van der Meij,"Improve consistency in the GitHub Actions workflow for the Fluent linter

This commit tweaks the Fluent linter workflow to match the other
workflow files we have, so we make sure the steps have a newline between
them for better readability and align names and descriptions of steps
with how they are called in the other workflow files we have.",False
c1fef7d2f2e213a460165e050032fbf479dcc719,2023-10-28 18:11:46,Jonas Jenwald,"Guard `navigator`-object accesses in `src/`-files (issue 15728)

There are environments that include *incomplete* polyfills for the `navigator`-object, which may thus cause the PDF.js library to break.
Despite that clearly not being our fault, it may still result in bug reports filed against the PDF.js project; see e.g. 15728.

Currently this even seem to affect *the latest* version of Node.js; see e.g. [here].

*Please note:* Thanks to the pre-processor none of these changes affect the Firefox PDF Viewer, however it does add ""overhead"" when working with and reviewing the affected code (which is why I'm not crazy about this).",False
238f3e728f1f4c0b4acc58e7a3560573816610a8,2023-10-28 17:51:19,Tim van der Meij,"Merge pull request #17185 from Snuffleupagus/annotationLayer-modifier

Fix `WidgetAnnotationElement._getKeyModifier` to account for Linux",True
d7b39fe696e13e0be808e263aacb9839239a9cc8,2023-10-28 13:56:34,Jonas Jenwald,"Update the `webpack` example to account for outputting of JavaScript modules (PR 17055 follow-up)

*Please note:* While following the steps in the README still works with this patch, in the sense that the example runs and successfully renders a PDF document, I unfortunately cannot tell if it illustrates Webpack best practices.",False
9ec2fda09f6eab90af3117bbff9771a682bbce05,2023-10-28 13:56:34,Jonas Jenwald,"Simplify the l10n-handling in the `mobile-viewer` example

 - Remove the `errorWrapper`-element, since it simplifies the example and is consistent with the default viewer; see PR 15533.

 - Simplify the l10n-handling, since the `NullL10n` should be able to translate everything e.g. without fallback values; see PR 17146.",False
59c4041a49a792b9be8b2ca2e0f666bbbb58b76f,2023-10-28 13:56:25,Jonas Jenwald,"Update the `examples/`-folder to account for outputting of JavaScript modules (PR 17055 follow-up)

This patch also changes most examples to use ""top level await"", since that's now supported and slightly simplifies the code.",False
3f0b3b15def5a8eb40cab518da2002c9377252fe,2023-10-27 23:20:10,Jonas Jenwald,"Merge pull request #17196 from Snuffleupagus/annotationLayer-css-nesting

Use CSS nesting in the annotationLayer",True
7d5b970eee6b095a3aa72db4737e6c6f67c77dd6,2023-10-27 22:59:33,Jonas Jenwald,Collect the forced-colors CSS rules for `linkAnnotation` in one spot,False
d30bf4482f30301ae5343313ffa4cebc6a0c0994,2023-10-27 22:54:15,Jonas Jenwald,"Merge pull request #17195 from Snuffleupagus/textLayer-css-nesting

Use CSS nesting in the textLayer",True
b779e418a54cfb9f8b99c3b001ede25a83ac2779,2023-10-27 22:16:47,Jonas Jenwald,Use CSS nesting in the annotationLayer,False
525be9afeac29d69c61a260ca0687ab0c0492b16,2023-10-27 21:08:01,Jonas Jenwald,Use CSS nesting in the textLayer,False
d293048c5dd8baba9411a65276f50ce44c6fb2b1,2023-10-27 20:25:46,Jonas Jenwald,"Pause translation when appending the textLayer and structTreeLayer to the page

Note that we must append the textLayer to the DOM *before* enabling the `highlighter` and `accessibilityManager`, to avoid breaking e.g. a pending searching operation.
The least invasive solution, that I was able to come up with, is to introduce a new `TextLayerBuilder` callback-function for this purpose.",False
6115a328eabf29b2d2eb6cae49f551c8728fb273,2023-10-27 20:15:46,calixteman,"Merge pull request #17189 from calixteman/mac_integration_test

Fix integration tests on Mac",True
d72fd9ce4f1c4727cc07652fa3dc6c1208cd7d53,2023-10-27 19:40:06,Calixte Denizet,Fix intermittents failure on mac,False
517a262fb1f1dedf946ecd022c32637c96e86113,2023-10-27 19:39:35,Calixte Denizet,"Fix keyboard shortcuts on mac and for some tests make sure that all
the page is displayed in using page-fit in order to make all tested
elements visible.",False
34781121cd0eff5a98d4c8c97ee8d30aa2707def,2023-10-26 21:17:08,Jonas Jenwald,"Merge pull request #17186 from flodolo/fluent_linter

Add workflow to lint Fluent en-US files",True
487816bd680d3a7f2c35990be6a048fe40bfad15,2023-10-26 20:57:42,Francesco Lodolo,Add workflow to lint Fluent en-US files,False
069096e78f0fce430037eb27f4f56b281fdbcf7b,2023-10-26 17:06:42,Jonas Jenwald,"Fix `WidgetAnnotationElement._getKeyModifier` to account for Linux

Currently the `WidgetAnnotationElement._getKeyModifier` method will always be falsy on Linux, which seems like a simple oversight. Looking at all the other `FeatureTest.platform` accesses we only handle the `isMac`-case specially, and it seems reasonable to do the same thing here.
The reason that this hasn't led to any bug reports is most likely that the `modifier`-property seems completely unused in the scripting-implementation.

Finally, with these changes we can (slightly) simplify the `FeatureTest.platform` implementation.",False
097f214222a70ef1f2cb8cd12e146b0a19ddf907,2023-10-26 15:35:33,Jonas Jenwald,"Handle appending consistently in the xfaLayer regardless of rendering intent (PR 17177 follow-up)

After PR 17177 the interface of `XfaLayerBuilder` is now inconsistent, since whether or not we directly append the xfaLayer to the DOM now depends on the rendering intent.",False
fbfacf8828eddd0c458a330f162c5a3f7f5dc948,2023-10-26 01:16:49,calixteman,"Merge pull request #17177 from Snuffleupagus/xfaLayer-pause-l10n

Pause translation when appending the xfaLayer to the page",True
399f444c84a60dde13a66ee0732bf87d35973626,2023-10-26 00:03:39,Jonas Jenwald,Pause translation when appending the xfaLayer to the page,False
b31e77df175f89ca9484c983d1169c843933f5ff,2023-10-25 21:58:38,calixteman,"Merge pull request #17166 from calixteman/improve_oc_parsing

Improve performance of optional content parsing",True
806ac67ea4064dde1a0ec46907967a04e1e675ed,2023-10-25 21:21:39,Jonas Jenwald,"Merge pull request #17176 from Snuffleupagus/BaseTreeViewer-pause-l10n

Pause translation when appending the outline/attachment/layer trees to the sidebar",True
0c38c6e10340b417f5cebbec36658e4cbff80126,2023-10-25 21:20:53,Calixte Denizet,Improve performance of optional content parsing,False
6b265b3a15633e2e0f168d7718ee892100ca9f59,2023-10-25 21:08:02,Jonas Jenwald,"Pause translation when appending the outline/attachment/layer trees to the sidebar

Also, pause translation when collapsing/expanding subtrees.",False
0fc899338c607ac375f306a6f3a67de2b760eb86,2023-10-25 19:54:49,Jonas Jenwald,"Merge pull request #17006 from Snuffleupagus/rm-enableStampEditor-pref

Remove the `enableStampEditor` preference",True
f27f2bb4036058572853d413807ede9d3a52ce98,2023-10-25 18:31:32,calixteman,"Merge pull request #17165 from calixteman/improve_removenullchars

Slightly improve the performance of removeNullCharacters",True
5d3823a81a41ddcab13d2e8c33b11adb992e2a9d,2023-10-25 18:21:33,Jonas Jenwald,"Merge pull request #17173 from Snuffleupagus/ConstL10n-setL10n

Fix error that's breaking the `ConstL10n` class (PR 17161 follow-up)",True
31243230afba6d0d0f078a3021087d03259b8617,2023-10-25 18:10:22,calixteman,"Merge pull request #17174 from calixteman/update_import_l10n

Update the path to get all locales and update locales",True
3ba68f68dcea5f4c7a7ef8e0a3b38275c8a35f61,2023-10-25 17:30:12,calixteman,"Merge pull request #17171 from calixteman/issue17169

Don't take into account the INVISIBLE flag for well-known annotations",True
bd9b39be282b3580a848c56efe7c65c10465f4d8,2023-10-25 17:16:13,Jonas Jenwald,"Merge pull request #17175 from Snuffleupagus/rm-lint-ignores

Remove obsolete entries in the lint-ignore files",True
b575de98603243e499d01c06d9b1515ab0e644ef,2023-10-25 17:08:51,Jonas Jenwald,"Remove obsolete entries in the lint-ignore files

 - The `external/webL10n/` directory was removed in PR 17115.

 - The `src/shared/{cffStandardStrings, fonts_utils}.js` files were removed in PR 17120.",False
2967eca605919d2ee9ef319a2d572ddd487a9bfb,2023-10-25 16:17:06,Calixte Denizet,Update the path to get all locales and update locales,False
846bd86520c671ad25900b9791e0d328f5bc0604,2023-10-25 15:41:57,Jonas Jenwald,"Fix error that's breaking the `ConstL10n` class (PR 17161 follow-up)

I forgot to include `web/l10n_utils.js` in PR 17161, which currently breaks `ConstL10n` since there's no longer a method called `setL10n`; sorry about that!",False
133ed96f8f4f8efca120a893a62e9df20639f5b1,2023-10-25 13:46:14,Calixte Denizet,Don't take into account the INVISIBLE flag for well-known annotations,False
651057c039df95e81338f860dab40565161ea887,2023-10-25 13:41:14,Calixte Denizet,"Slightly improve the performance of removeNullCharacters

Most of the strings shouldn't contain special chars (<= 0x1F) so we can
have a fast path which just checks if the string contains at least one such
a char.",False
f098121644fb665ad40c847a9fe7fefa2bdbf2a0,2023-10-24 23:58:34,Jonas Jenwald,"Merge pull request #17161 from Snuffleupagus/NullL10n-test

Add a unit-test to ensure that `NullL10n` won't diverge from the `L10n`-class",True
3f2072eaee5b2b2698433a99dd21a5c2a35863b7,2023-10-24 20:20:18,calixteman,"Merge pull request #17159 from calixteman/bug1860602

[Annotation] Use the field V entry when there is no Parent one for a radio button (bug 1860602)",True
bcb01e5e2b8d80927f0c9f983fbd6f7e2b85b629,2023-10-24 16:47:02,Jonas Jenwald,"Tweak the `matchCount` l10n-args handling slightly (PR 17146 follow-up)

Given that providing unused parameters in the l10n-args shouldn't be a problem, let's simplify the relevant JavaScript code a tiny bit.",False
e2af77fd6cb014536d00bc3c14cb8d13a732503f,2023-10-24 16:43:14,Jonas Jenwald,"Add a unit-test to ensure that `NullL10n` won't diverge from the `L10n`-class

To prevent the *standalone* viewer-components from breaking, we need to ensure that the `NullL10n`-interface won't accidentally diverge from the actual `L10n`-implementations.",False
2f3797db343bbbe081b809c6a2618c4bdc1e3dfc,2023-10-24 01:41:30,Calixte Denizet,[Annotation] Use the field V entry when there is no Parent one for a radio button (bug 1860602),False
377af6892b6c9e22a5fc545dfd454ad73f411990,2023-10-23 18:06:30,calixteman,"Merge pull request #17157 from calixteman/auto_update_locale

Update locale on *.ftl change",True
cc18d9749ab21db75811d5a7d4a5431cf10441f5,2023-10-23 18:03:13,Jonas Jenwald,"Merge pull request #17156 from Snuffleupagus/landmark-pageLabel

Update the ""aria-label"" of the page when a `pageLabel` exists",True
31cfec63c32d3a6505d1f0ce50ae818bb5118c82,2023-10-23 17:33:31,Calixte Denizet,Update locale on *.ftl change,False
04696080f800c2f551f430f67a58010b00db90e0,2023-10-23 17:12:06,Jonas Jenwald,"Update the ""aria-label"" of the page when a `pageLabel` exists

Looking at the `PDFThumbnailView.setPageLabel` method you'll see that we update e.g. the ""aria-label"" of the thumbnail-image for documents that contain (valid) pageLabels.
This isn't done in `PDFPageView`, which seems inconsistent, hence this patch.",False
8376b3fb054937ee615a2685f6e893959b46fd93,2023-10-23 16:28:59,Jonas Jenwald,"Merge pull request #17141 from Snuffleupagus/l10n-more-setAttribute

[api-minor] Use ""data-l10n-id""/""data-l10n-args"", rather than manually updating DOM-elements, to trigger translation (PR 17146 follow-up)",True
17af706070a598de72782f71d26539758500bb95,2023-10-22 17:47:47,Jonas Jenwald,"[api-minor] Use ""data-l10n-id""/""data-l10n-args"", rather than manually updating DOM-elements, to trigger translation (PR 17146 follow-up)

This patch changes almost all viewer-components[1] to use ""data-l10n-id""/""data-l10n-args"" for localization, which means that in many cases we no longer need to pass around the `L10n`-instance any more.

One part of the code-base where the `L10n`-instance is still being used ""directly"" is the AnnotationEditors, however while it might be possible to convert (most of) that code as well that's not attempted in this patch.

---
[1] The one exception is the `PDFDocumentProperties` dialog, since the way it's currently implemented makes that less straightforward to fix without a lot of code changes.",False
898cc2e399e47ae70e08624a72852954030370b0,2023-10-22 16:03:34,Tim van der Meij,"Merge pull request #17151 from Snuffleupagus/Fluent-PDFDocumentProperties-fixes

A couple of `PDFDocumentProperties` tweaks (PR 17115 follow-up)",True
da186d1b89e359e7910155462e0388fc4868250a,2023-10-21 21:23:30,Jonas Jenwald,"Merge pull request #17146 from Snuffleupagus/NullL10n-refactor

[api-minor] Re-factor `NullL10n` and remove the hard-coded l10n strings (PR 17115 follow-up)",True
4c4676e5a4be2886f9927e039e4bed1561513c2d,2023-10-21 21:16:30,Jonas Jenwald,"Merge pull request #17152 from Snuffleupagus/findbar-resizeObserver

Use a `ResizeObserver` to update the layout of `PDFFindBar`",True
e20ef39f594492c3735206829b076ee981fe06d0,2023-10-21 19:47:49,Jonas Jenwald,"Use a `ResizeObserver` to update the layout of `PDFFindBar`

*Please note:* In the Firefox PDF Viewer this findbar is only used for PDF documents placed in e.g. `<iframe>` elements.

By registering a `ResizeObserver` when the `PDFFindBar` is open we slightly unify and simplify how the findbar layout (row vs column) is handled.
This will be especially helpful with upcoming changes, where we'll make use of ""data-l10n-id""/""data-l10n-args"" to trigger translation in the viewer.",False
7df082fce3909dedf0f298f45a3edf31156a7f4d,2023-10-21 13:57:47,Jonas Jenwald,"A couple of `PDFDocumentProperties` tweaks (PR 17115 follow-up)

 - The old translation engine handled language code casing slightly differently, hence we need to tweak the non-metric locale check in `PDFDocumentProperties` to account for that.

 - Use only lowercase names for the pre-defined page names, to improve overall consistency.",False
f07675a6a8af919b867ad19b4777bb7411a9d923,2023-10-21 01:19:33,Jonas Jenwald,"[api-minor] Re-factor `NullL10n` and remove the hard-coded l10n strings (PR 17115 follow-up)

*Please note:* These changes only affect the GENERIC build, since `NullL10n` is only a stub elsewhere (see PR 17135).

After the changes in PR 17115, which modernized and improved l10n-handling, the `NullL10n`-implementation is no longer a good fallback for the ""proper"" `L10n`-classes.
To improve this situation, especially for the *standalone* viewer-components, this patch makes the following changes:
 - Let the `NullL10n`-implementation extend an actual `L10n`-class, which is constant and lazily initialized, to ensure that it works *exactly* like the ""proper"" ones.

 - Automatically bundle the ""en-US"" l10n-strings in the build, via the pre-processor, such that we don't need to remember to manually update them.

 - Ensure that the *standalone* viewer-components register their DOM-elements for translation, similar to the default viewer, since this will allow future code improvements by using ""data-l10n-id""/""data-l10n-args"" in most (if not all) parts of the viewer.

 - Remove the `NullL10n` from the `AnnotationLayer`, to avoid affecting bundle size too much.
   For third-party users that access the `AnnotationLayer`, as exposed in the main PDF.js library, they'll now need to *manually* register it for translation. (However, the *standalone* viewer-components still works given the point above.)",False
a4cd2ef1db506d175c0ae768488596085a6511c9,2023-10-20 20:55:55,Jonas Jenwald,"Merge pull request #17148 from JT-External/support-rotated-imagemask

Fix size of maskCanvas to draw image masks correctly",True
0eacd5c107b68710efead9a1a41428a9e642babb,2023-10-20 20:16:24,JT-External,"Fix size of maskCanvas to draw image masks correctly

Use existing helper to calculate the Box

Co-authored-by: Jonas Jenwald <jonas.jenwald@gmail.com>

Ensure that there are non-zero

Co-authored-by: Jonas Jenwald <jonas.jenwald@gmail.com>

Add a reference test for #17147",False
5f0e5609499374c01cb9ee534f2d44bbd2ae14fb,2023-10-19 23:43:33,Jonas Jenwald,"Merge pull request #17140 from Snuffleupagus/l10n-move-init

Initialize the `L10n`-instance as soon as possible in Firefox (PR 17115 follow-up)",True
5c14c559dde1e89344138f7982c11918fac1b64e,2023-10-19 22:10:52,Jonas Jenwald,"Initialize the `L10n`-instance as soon as possible in Firefox (PR 17115 follow-up)

Given that there's now a bit more asynchronicity in the l10n-initialization in the Firefox PDF Viewer, after PR 17115, try to limit the impact of that by moving it to occur a tiny bit earlier in the default viewer initialization.",False
d094e8aab00f74640da8737088d3a3602d5983c3,2023-10-19 21:59:25,calixteman,"Merge pull request #17142 from calixteman/no_connect_root

[L10n] Don't try to connect the root element when it has already been done",True
a0b9c937ae99247a5928dd18759e0bcb56d88ff4,2023-10-19 21:49:05,Calixte Denizet,"[L10n] Don't try to connect the root element when it has already been done

In Firefox debug builds, there is an assertion to check that we don't connect
a subelement of an already connected root. Thanks to this assertion, we can see
that the root has already been added to Fluent, hence we don't need to do it
a second time.
We don't need to await anymore on the translation in order to update the
toolbar: it'll be done by Fluent, so we can safely remove the ""localized""
event and avoid to wait for it.",False
e820688510e2c1c24088e76a178a82ef8ebcaf4d,2023-10-19 19:15:07,Jonas Jenwald,Remove the `enableStampEditor` preference,False
c60401a765f40c4926d300378cb0529805524aae,2023-10-19 19:11:40,Jonas Jenwald,"Merge pull request #17133 from Snuffleupagus/rm-builder-merge

Use object destructuring, rather than the `merge` helper, in the gulpfile",True
d6cfbd283969f2a19be324d94b85c16d853ccc9b,2023-10-19 18:42:30,Jonas Jenwald,"Merge pull request #17130 from Snuffleupagus/AppOption-move-init

Try to make the `Preferences`/`AppOptions` initialization slightly more efficient",True
5ddc949159cab4ba9731a12529b181805a24d341,2023-10-19 18:14:55,Jonas Jenwald,"Try to make the `Preferences`/`AppOptions` initialization slightly more efficient

*Please note:* This patch contains a couple of micro-optimizations, hence I understand if it's deemed unnecessary.

Move the `AppOptions` initialization into the `Preferences` constructor, since that allows us to remove a couple of function calls, a bit of asynchronicity and one loop that's currently happening in the early stages of the default viewer initialization.

Finally, move the `Preferences` initialization to occur a *tiny* bit earlier since that cannot hurt given that the entire viewer initialization depends on it being available.",False
929311fb9d10cbd67951aa9ea068311c667603fc,2023-10-19 18:05:01,Jonas Jenwald,"Merge pull request #17135 from Snuffleupagus/bug-1859818

Only bundle `NullL10n` in GENERIC builds (bug 1859818)",True
69ad0d9861cca421b837a66724556c9c1b6c4d68,2023-10-19 17:21:00,Jonas Jenwald,Only bundle `NullL10n` in GENERIC builds (bug 1859818),False
f39bedd06c394d713b3642d13b52c4bed279f840,2023-10-19 17:19:05,Jonas Jenwald,"Merge pull request #17138 from Snuffleupagus/issue-17137

Use a CSS-only solution to set the `dropdownToolbarButton` width (issue 17137)",True
482b789edf3f52beafd5af7945669869ad2456c0,2023-10-19 17:14:02,Jonas Jenwald,"Use a CSS-only solution to set the `dropdownToolbarButton` width (issue 17137)

Note that CSS-features such as e.g. `flex` didn't exist, or had poor cross-browser support, back when the JavaScript-based solution was initially implemented.",False
5d8be997822eb138a8aeb2b41a1a3389a788bc4d,2023-10-19 17:10:50,calixteman,"Merge pull request #17115 from calixteman/mv_to_fluent

[api-minor] Move to Fluent for the localization (bug 1858715)",True
6a6f6f122c447895dcc05f599f9d714027b2a871,2023-10-19 14:55:47,Jonas Jenwald,"Merge pull request #17131 from Snuffleupagus/openOrDownloadData-caching

Re-factor the blob-URL caching in `DownloadManager.openOrDownloadData`",True
66982a2a11646472e85128f93ba24129e447de2c,2023-10-19 14:50:41,Calixte Denizet,"[api-minor] Move to Fluent for the localization (bug 1858715)

- For the generic viewer we use @fluent/dom and @fluent/bundle
- For the builtin pdf viewer in Firefox, we set a localization url
  and then we rely on document.l10n which is a DOMLocalization object.",False
2a3090224fa60110ad80097002beb42d0f5547cb,2023-10-18 20:25:04,Jonas Jenwald,"Merge pull request #17134 from Snuffleupagus/writeStream-less-type-conversion

Reduce unnecessary type conversion in `writeStream`",True
25a1a9d28fd83b1d41a273af0f0de0ce0841565e,2023-10-18 19:09:01,Jonas Jenwald,"Reduce unnecessary type conversion in `writeStream`

Currently we're unnecessarily converting data between strings and typed-arrays, when dealing with compressible data, in the `writeStream` function.
Note how we're *first* getting a string-representation of the stream, which involves converting the underlying typed-array into a string, only to immediately convert this back into a typed-array. This seems completely unnecessary, and is easy enough to avoid, and we'll now only do a *single* type-conversion in this function.",False
ae664ea8e07edce17d546a62df714b95300076c5,2023-10-18 17:19:26,Jonas Jenwald,"Use object destructuring, rather than the `merge` helper, in the gulpfile

This helper function was originally added in PR 1953, eleven years ago, at which point object destructuring didn't exist.",False
674052d3fc6998371b8f152d09c152b73398cc6d,2023-10-17 13:48:34,Jonas Jenwald,"Re-factor the blob-URL caching in `DownloadManager.openOrDownloadData`

Cache blob-URLs on the actual data, rather than DOM elements, to reduce potential duplicates (note the updated unit-test).",False
22d6d95f030a9a48b6e86e709ddaca6330b9d909,2023-10-15 22:02:17,Tim van der Meij,"Merge pull request #17125 from timvandermeij/find-intermittent

Fix intermittent problems on Windows in the XFA search integration test",True
2bae8af96ad63a5b0648092955fd3bb3b04e750a,2023-10-15 18:32:41,Tim van der Meij,"Fix intermittent problems on Windows in the XFA search integration test

The current test fails intermittently only on Windows for unknown
reasons: the code is correct and on Linux it always passes. However, we
have already spent quite a lot of time on this test, so rather than
spending even more time on it I figured we should look at what behavior
the test is trying to check and find an alternative way to do it that
can't trigger this intermittent issue anymore.

This commit changes the test to use a term that only exists once in the
entire document so we cannot accidentally highlight another match
anymore. This doesn't change anything about the behavior that this test
aims to check: we still test searching in the XFA layer, we still test
that the original term is matched case-insensitively and we still test
that that match is actually highlighted. Note that the only objective of
the test is confirming that the search functionality covers the XFA
layer, so the exact phrase/match is not the interesting bit.",False
a9a1195582455bb00a4016656785432b1808d8fc,2023-10-15 15:36:54,Tim van der Meij,"Merge pull request #17123 from Snuffleupagus/eslint-globals

Update the ESLint `globals` list (PR 17055 follow-up)",True
93f24dd5d79850cff2d7f76969fedf68093a5f9c,2023-10-15 15:20:57,Jonas Jenwald,"Remove the ESLint ""amd"" environment (PR 17055 follow-up)

Please see https://eslint.org/docs/latest/use/configure/language-options#specifying-environments",False
d5acbbccd3fd499036711556778b6dcd20f8b062,2023-10-15 15:08:10,Jonas Jenwald,"Update the ESLint `globals` list (PR 17055 follow-up)

Given that we only use standard `import`/`export` statements now, after recent PRs, the ""exports"" global is unused.
Instead we add ""__non_webpack_import__"" to the `globals` to avoid having to sprinkle disable statements throughout the code.

Finally, the way that `globals` are defined has changed in ESLint and we should thus explicitly specify them as ""readonly""; please find additional details at https://eslint.org/docs/latest/use/configure/language-options#specifying-globals",False
76bf3da4b1888e9f898e59556073d9fa578e597b,2023-10-15 14:59:11,Tim van der Meij,"Merge pull request #17122 from timvandermeij/autoprint

Remove Escape key press from the `autoprint` integration test, and tweak the protocol timeout configuration for Puppeteer",True
0c763d6c5a5e8b334968ab82e189567aacbf1ec5,2023-10-14 21:50:22,Tim van der Meij,"Tweak the protocol timeout configuration for Puppeteer

The previous change that set the timeout had effect because we have seen
quite a few protocol timeouts now correctly being raised in the context
of the active test, however we have also still seen a handful of cases
where this wasn't the case and the one second difference turned out to
be too low (likely because the operation was started slightly after one
second into the test run). We therefore tweak the value to be 75% of the
Jasmine timeout. This should be enough to catch operations that happen
later on in the test run, and if a single operation takes that long any
hope for success is already gone anyway.",False
48e41617f57040bd6f5abb157d58c77424c4eae7,2023-10-14 21:47:29,Tim van der Meij,"Remove Escape key press from the `autoprint` integration test

It's not necessary because we have configured silent printing for
Firefox and Chrome in the browser arguments we pass in `test.mjs`. This
means that the print dialog is not even shown at all or disappears
automatically once printing is done, so the Escape key press serves no
purpose. Since it has been shown to time out, likely because the page
loses focus during printing, and because the page itself doesn't know
when the printing dialog is shown and we therefore can't possibly do the
key press at the right time anyway, this commit gets rid of it to
stabilize the test.",False
5c45dfa0ae97d03d171229b2609c97f6b10cdba7,2023-10-14 18:06:25,Tim van der Meij,"Merge pull request #17119 from timvandermeij/updates

Update translations/dependencies to the most recent versions and fix dependency vulnerabilities",True
d53e166538eddd523992ee6fe24adf85924145a4,2023-10-14 17:56:35,Tim van der Meij,"Merge pull request #17120 from timvandermeij/code-scanning-alerts

Remove obsolete `src/shared/{cffStandardStrings,fonts_utils}.js` files",True
58e4fcdc6f15e9ab7aafc000510becfba6e55069,2023-10-14 17:37:49,Tim van der Meij,"Remove obsolete `src/shared/{cffStandardStrings,fonts_utils}.js` files

Those files only contain old debugging code that is not used/imported
anywhere anymore, which is generating code scanning alerts. Moreover,
they rely on globals/platform-specific code and don't import/export
logic properly.",False
4c17f99fab8985463303e1a5da5df1ce3b2bbb0c,2023-10-14 17:20:24,Tim van der Meij,Fix dependency vulnerabilities with `npm audit fix`,False
e1307fdba8602fad908f289610171c545555cac7,2023-10-14 17:20:19,Tim van der Meij,Update dependencies to the most recent versions,False
e79bb25086cc24614184c3eede49a7c35e905004,2023-10-14 17:20:12,Tim van der Meij,Update translations to the most recent versions,False
23b8dbb7308ffdb46d3ff5602eaf8b178b8bdd58,2023-10-14 16:41:37,Tim van der Meij,"Merge pull request #17117 from Snuffleupagus/eslint-import-no-commonjs

Enable the `import/no-commonjs` ESLint plugin rule",True
d53093045a6ba07cbf6c58c140934ea85d7b4a04,2023-10-14 16:19:17,Jonas Jenwald,"Enable the `import/no-commonjs` ESLint plugin rule

Given the amount of work put into removing `require`-calls from the code-base, let's ensure that new ones aren't accidentally added in the future.

Note that we still have a couple of files where `require` is being used, in particular:
 - The Node.js examples, however those will be updated to use `import` in PR 17081.
 - The Webpack examples, and related support files, however I unfortunately don't know enough about Webpack to be able to update those. (Hopefully users of that code will help out here, once version `4` is released.)
 - The `statcmp`-tool, since *some* of those `require`-calls cannot be converted to `import` without other code changes (and that file is only used during benchmarking).

Please find additional details at https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/no-commonjs.md",False
57866cd31ba1624b6ff8c8bb3f996a7e6ef65fab,2023-10-14 15:37:39,Tim van der Meij,"Merge pull request #14743 from Snuffleupagus/native-import-maps

Use native `import maps` in development mode",True
7dfe08a0ee5063dc1026ded5b0592242e9f4ec66,2023-10-14 15:35:46,Tim van der Meij,"Merge pull request #17098 from Snuffleupagus/createCDNWrapper-import

Tweak `PDFWorkerUtil.createCDNWrapper` to account for JavaScript modules (PR 17055 follow-up)",True
af9a7b0003d5300ebc98a08cd3ab02204a293825,2023-10-14 15:04:40,Jonas Jenwald,Tweak `PDFWorkerUtil.createCDNWrapper` to account for JavaScript modules (PR 17055 follow-up),False
5e986cb5142147e7b72c1f96b0acd2bef0d5fa4c,2023-10-14 00:05:34,Jonas Jenwald,"Use native `import maps` in development mode

This patch seem to work fine locally now, and `mozregression` points to it being fixed in bug https://bugzilla.mozilla.org/show_bug.cgi?id=1803984 which landed in Firefox 116.

By using the native `import maps` functionality, we can remove a development dependency. Please find the specification at https://wicg.github.io/import-maps/",False
36c3c0a4c15d1ae878676885a9e3ab967150ce42,2023-10-14 00:03:35,Jonas Jenwald,"Merge pull request #17114 from Snuffleupagus/lib-modules

Output JavaScript modules for the `LIB` build-target (PR 17055 follow-up)",True
38245500fde2ac10c993c1690057cacd6b2b0383,2023-10-13 22:24:33,Jonas Jenwald,"Output JavaScript modules for the `LIB` build-target (PR 17055 follow-up)

This *finally* allows us to mark the entire PDF.js library as a ""module"", which should thus conclude the (multi-year) effort to re-factor and improve how we import files/resources in the code-base.

This also means that the `gulp ci-test` target, which is what's run in GitHub Actions, now uses JavaScript modules since that's supported in modern Node.js versions.",False
96258449e36f9b97142fa0dd78195d02ffcbfaf0,2023-10-13 22:23:52,Jonas Jenwald,"Merge pull request #17112 from Snuffleupagus/integration-test-modules

Convert the `integration` test-files to JavaScript modules",True
4ac44b9d6d821471679f7f90eab4cd222b7c09a6,2023-10-12 20:49:57,calixteman,"Merge pull request #17113 from calixteman/bug1858700

Remove useless chrome.properties file (bug 1858700)",True
cabda362c66cfc165cf724cd139c85e293e71979,2023-10-12 20:02:44,Calixte Denizet,Remove useless chrome.properties file (bug 1858700),False
9878d058fe1f5d2c2874fd31e3a19c5ec418bec5,2023-10-12 16:48:20,Jonas Jenwald,Convert the `integration` test-files to JavaScript modules,False
33456d370454f20d61cd8e79603f60c17edccd9a,2023-10-12 16:47:56,Jonas Jenwald,"Rename the `integration` test-files, in preparation for converting them to modules

This is done separately to ensure that Git is able to track the history correctly.",False
158ab5bf3764474ac9700fe6d84819ef6c994fe1,2023-10-12 14:17:23,Jonas Jenwald,"Merge pull request #17106 from Snuffleupagus/bug-1854145

Don't store page-level data, in the API, after cleanup has run (bug 1854145)",True
0238cf134d1689d010e81bd81f837fbc650a8d8c,2023-10-11 15:21:42,Jonas Jenwald,"Don't store page-level data, in the API, after cleanup has run (bug 1854145)

For large/complex images it's possible that the image-data arrives in the API *after* the page has been scrolled out-of-view and thus been cleaned-up. In this case we obviously shouldn't cache such page-level data, since it'll first of all be unused and secondly can increase memory usage *a lot*.
Also, ensure that we *immediately* release any `ImageBitmap` data in this case to help reclaim memory faster.",False
2c39a739f552faa914b4f6e20a4274e6578cf0cd,2023-10-10 13:23:14,Jonas Jenwald,"Merge pull request #17105 from Snuffleupagus/interactive-examples-update

Update the ""Interactive examples"" links (PR 17055 follow-up)",True
734caab74705cf6b4f4522154fed8515220bc35f,2023-10-10 13:11:01,Jonas Jenwald,"Update the ""Interactive examples"" links (PR 17055 follow-up)

The examples themselves were updated to account for JavaScript modules, which didn't require changing the actual URLs.
However, since it seems that JSFiddle doesn't support JavaScript modules in its separate ""JavaScript"" editing-area we need to change how we embed the examples to avoid showing a blank ""JavaScript""-tab.",False
2c87c4854a486d5cd0731b947dd622f8abe5e1b5,2023-10-09 18:04:58,calixteman,"Merge pull request #17073 from calixteman/debug_subst_font

[Debugger] Add some info about substitution font",True
7851c0da8d93cfa9cbce32ba547d3f9c45b6347e,2023-10-09 15:36:33,Calixte Denizet,"[Debugger] Add some info about substitution font

When pdfBug is true, the substitution font is used in the text layer in order
to be able to know what is the font really used thanks to the devtools.
And to be sure that fonts are loaded, the font cache isn't cleaned up when
the debugger is active.",False
b4cd8ad215a2f9f464d0cf0cd2ba14694ee187ab,2023-10-09 13:13:51,Jonas Jenwald,"Merge pull request #17095 from timvandermeij/protocol-timeout

Fix the protocol timeout configuration for Puppeteer",True
ede65e11c62cb6a5fd1423fe7234d0ef66a4c6e9,2023-10-08 21:52:02,Tim van der Meij,"Fix the protocol timeout configuration for Puppeteer

The default protocol timeout is 180 seconds according to the
documentation at https://pptr.dev/api/puppeteer.browserconnectoptions,
but the Jasmine timeout we configure in the individual boot files is 30
seconds. The consequence of this is that if a protocol (CDP) error
occurs after 30 seconds Jasmine will fail the test, but the actual
protocol error from Puppeteer is raised much later in the context of
another test, which causes unrelated failures or tracebacks.

This commit fixes the problem by configuring Puppeteer to always use a
lower protocol timeout than the Jasmine timeout so that protocol errors
are always raised in the context of the test that actually triggered it.",False
d64f223d034ad74fb62571c3acff566d25eca413,2023-10-08 17:26:37,Jonas Jenwald,"Merge pull request #17094 from Snuffleupagus/debugger-module

Rename `web/debugger.js` since it's actually a JavaScript module (PR 17055 follow-up)",True
6ac3da0d1fae221ff7305c96985fea08f3ccc664,2023-10-08 16:46:42,Jonas Jenwald,"Rename `web/debugger.js` since it's actually a JavaScript module (PR 17055 follow-up)

It's been loaded as a JavaScript module for a long time, and given that the file is bundled as-is (without building) it seems reasonable to just change the file extension now.",False
f04967017f22e46d70d11468dd928b4cdc2f6ea1,2023-10-08 13:38:49,Jonas Jenwald,"Merge pull request #17093 from mozilla/dependabot/npm_and_yarn/postcss-8.4.31

Bump postcss from 8.4.30 to 8.4.31",True
67b5c69d152c9fdacc29120eb0b4c708bae9d3b1,2023-10-08 09:36:58,dependabot[bot],"Bump postcss from 8.4.30 to 8.4.31

Bumps [postcss](https://github.com/postcss/postcss) from 8.4.30 to 8.4.31.
- [Release notes](https://github.com/postcss/postcss/releases)
- [Changelog](https://github.com/postcss/postcss/blob/main/CHANGELOG.md)
- [Commits](https://github.com/postcss/postcss/compare/8.4.30...8.4.31)

---
updated-dependencies:
- dependency-name: postcss
  dependency-type: direct:development
...

Signed-off-by: dependabot[bot] <support@github.com>",False
60a458de29acedd35af35546e7b1f2e9ea0063ea,2023-10-08 00:04:16,Tim van der Meij,"Merge pull request #17090 from timvandermeij/autoprint-intermittent

Activate the selector check for the `autoprint` integration test as soon as possible",True
2c1d95b1531d7fee6b0d78825be3d6caf6c3cc1e,2023-10-07 22:57:34,Tim van der Meij,"Activate the selector check for the `autoprint` integration test as soon as possible

The Windows bot is usually slower than the Linux bot, and therefore
text layer rendering is as well. However, the `autoprint` test awaited
text layer rendering to complete before activating the selector check,
which makes it timing-sensitive and causes it to never resolve because
the page is already printed (and the printed page div removed) by then.

This commit should fix the issue by activating the selector check as
soon as possible, namely as soon as the viewer appears, which should
ensure we're always registering the selector check in time because we're
doing it even before rendering is starting.",False
f2c9b64cb2001fd36ccabed09f32d43420f03b50,2023-10-07 21:56:28,Tim van der Meij,"Merge pull request #17086 from Snuffleupagus/rm-structuredClone-polyfill

[api-minor] Stop polyfilling `structuredClone` in legacy builds",True
8bd3cc031359eab0ec175f677bfc62a1a9886f2f,2023-10-07 20:22:47,Jonas Jenwald,"[api-minor] Stop polyfilling `structuredClone` in legacy builds

Comparing the currently supported browsers/environments, see [the FAQ](https://github.com/mozilla/pdf.js/wiki/Frequently-Asked-Questions#faq-support) and the [MDN compatibility data](https://developer.mozilla.org/en-US/docs/Web/API/structuredClone#browser_compatibility), the `structuredClone` polyfill is *only* needed in Google Chrome versions < 98. Because of some limitations in the core-js polyfill we're currently forced to special-case the `transfer` handling to prevent bugs, and it'd be nice to avoid that.

Note that `structuredClone`, with transfers, is only used in two spots:
 - The `LoopbackPort` class, which is only used with fake workers. Given that fake workers should *never* be used in browsers, breaking that edge-case in older Google Chrome versions seem fine.
 - The `AnnotationStorage` class, when Stamp-annotations have been added to the document. Given that Google Chrome isn't the main focus of development, breaking *part* of the editing-functionality in older Google Chrome versions should hopefully be acceptable.",False
e6c325717570b9db2c8cf46342663b6c80c9cef7,2023-10-07 19:39:39,Jonas Jenwald,"Merge pull request #17080 from Snuffleupagus/scripting-module

Output `pdf.scripting.js` as a JavaScript module (PR 17055 follow-up)",True
4b489cd4e68591063fe81ca908401c18d8dd56e9,2023-10-07 18:57:26,Jonas Jenwald,"Output `pdf.scripting.js` as a JavaScript module (PR 17055 follow-up)

To avoid problems with `export` statements in the QuickJS Javascript Engine, we can work-around that by *explicitly* exposing `pdfjsScripting` globally instead.",False
bab4c7f617a289eadcb331156d40ff7ed33cc495,2023-10-07 18:32:59,Tim van der Meij,"Merge pull request #17055 from Snuffleupagus/output-modules

[api-major] Output JavaScript modules in the builds (issue 10317)",True
89d8c639fa11fabb377f04751603abe22541f95e,2023-10-07 16:03:48,Tim van der Meij,"Merge pull request #17077 from Snuffleupagus/css-rm-unneeded-alpha

Remove unnecessary alpha-value from CSS `rgb` colors",True
927e50f5d48a67e76f2a51c112ea5a98867822fe,2023-10-07 13:01:08,Jonas Jenwald,"[api-major] Output JavaScript modules in the builds (issue 10317)

At this point in time all browsers, and also Node.js, support standard `import`/`export` statements and we can now finally consider outputting modern JavaScript modules in the builds.[1]

In order for this to work we can *only* use proper `import`/`export` statements throughout the main code-base, and (as expected) our Node.js support made this much more complicated since both the official builds and the GitHub Actions-based tests must keep working.[2]
One remaining issue is that the `pdf.scripting.js` file cannot be built as a JavaScript module, since doing so breaks PDF scripting.

Note that my initial goal was to try and split these changes into a couple of commits, however that unfortunately didn't really work since it turned out to be difficult for smaller patches to work correctly and pass (all) tests that way.[3]
This is a classic case of every change requiring a couple of other changes, with each of those changes requiring further changes in turn and the size/scope quickly increasing as a result.

One possible ""issue"" with these changes is that we'll now only output JavaScript modules in the builds, which could perhaps be a problem with older tools. However it unfortunately seems far too complicated/time-consuming for us to attempt to support both the old and modern module formats, hence the alternative would be to do ""nothing"" here and just keep our ""old"" builds.[4]

---
[1] The final blocker was module support in workers in Firefox, which was implemented in Firefox 114; please see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#browser_compatibility

[2] It's probably possible to further improve/simplify especially the Node.js-specific code, but it does appear to work as-is.

[3] Having partially ""broken"" patches, that fail tests, as part of the commit history is *really not* a good idea in general.

[4] Outputting JavaScript modules was first requested almost five years ago, see issue 10317, and nowadays there *should* be much better support for JavaScript modules in various tools.",False
0a970ee4434e62ed9ab5f134a9fc86ba8da81247,2023-10-06 15:42:30,Jonas Jenwald,"[api-major] Remove the `fallbackWorkerSrc` functionality in browsers

The user should *always* provide a correct `GlobalWorkerOptions.workerSrc` value when using the PDF.js library in browser environments. Note that the fallback:
 - Has been deprecated ever since PR 11418, first released in version `2.4.456` over three years ago.
 - Was always a best-effort solution, with no guarantees that it'd actually work correctly.
 - With upcoming changes, w.r.t. outputting JavaScript modules, it'd now be more diffiult to determine the correct value.",False
8158628a9085c6c989e82c9b2631c8ecc819e0a7,2023-10-06 15:42:30,Jonas Jenwald,"[api-minor] Stop building a minified default viewer

The minified default viewer has never been distributed in either official releases or through pdfjs-dist, which means that it's most likely unused, and it's has never been tested nor actively maintained.",False
905ad1fe68a15d9b1429a147d72de0ab8e3bbf45,2023-10-06 15:14:07,calixteman,"Merge pull request #16761 from calixteman/editor_add_new_with_keyboard

[Editor] Add the possibility to create a new editor in using the keyboard (bug 1853424)",True
4ebddcb09252e26ce299207b32df02b784191c9b,2023-10-06 13:20:03,Jonas Jenwald,"Remove unnecessary alpha-value from CSS `rgb` colors

Setting the alpha-value explicitly to `1` in `rgb` colors is unnecessary, since that's the default value, and this way we ever so slightly reduce the size of our CSS files.
Unfortunately I've not found a Stylelint rule to enforce this automatically, and the patch was generated using search and replace.",False
ea5eafa265c2062cb0d7c0a04f05fa193b5939af,2023-10-06 02:19:15,Calixte Denizet,"[Editor] Add the possibility to create a new editor in using the keyboard (bug 1853424)

When an editing button is disabled, focused and the user press Enter (or space), an
editor is automatically added at the center of the current page.
Next creations can be done in using the same keys within the focused page.",False
2453b79fa8d8a7e03a7c0364c88cf7aba24f75a4,2023-10-05 23:58:56,calixteman,"Merge pull request #17074 from calixteman/issue17071

Make the toolbar buttons usable with keyboard when Page Fit is used",True
3747c02d4cc91c7b1379296f405d039584c9b199,2023-10-05 22:48:35,Jonas Jenwald,"Merge pull request #17076 from Snuffleupagus/stylelint-color-rules

Enable some Stylelint color-related rules to slightly reduce file sizes",True
3263fd0307d311e1e140d44f454a514fa1003022,2023-10-05 22:03:03,Calixte Denizet,Make the toolbar buttons usable with keyboard when Page Fit is used,False
4277205d7833d6fe89cb43ea3a4d3313cb4157d7,2023-10-05 21:21:21,Jonas Jenwald,"Enable some Stylelint color-related rules to slightly reduce file sizes

 - Use a consistent format for all alpha-values (this rule didn't require any code changes); see https://stylelint.io/user-guide/rules/alpha-value-notation
 - Use modern and slightly shorter color notation, since [according to MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/rgb#browser_compatibility) that should be supported ""everywhere"" nowadays; see https://stylelint.io/user-guide/rules/color-function-notation/
 - Use ""short"" hexadecimal colors whenever possible; see https://stylelint.io/user-guide/rules/color-hex-length/
 - Help avoid adding broken hexadecimal colors (this rule didn't require any code changes); see https://stylelint.io/user-guide/rules/color-no-invalid-hex/",False
a60f90ae9456ec183a70896bb9286ba71f4e329e,2023-10-05 18:47:58,calixteman,"Merge pull request #17075 from calixteman/issue17069_followup

Add a HTML containter for locked FreeText annotations in order to be able to display a popup (follow-up of #17070)",True
e737638a404b3aa9d66f73d6a688eccaf6b6ee91,2023-10-05 17:31:34,Calixte Denizet,Add a HTML containter for locked FreeText annotations in order to be able to display a popup (follow-up iof #17070),False
c4c24c6d18225e74ce1fec9e8b1b82b3c134cc95,2023-10-05 14:40:40,calixteman,"Merge pull request #17070 from calixteman/17069

Update the noHTML flag to take into account the hasOwnCanvas one (fixes #17069)",True
66c3b239ae9191a2621759ed37ebc783102903bd,2023-10-05 02:43:44,calixteman,"Merge pull request #17072 from calixteman/resizer_role

[Editor] Add role=spinbutton to resizers when they're used with the keyboard",True
335cea22b32f3cf953b96faf0b415f2f4210344d,2023-10-05 01:00:06,Calixte Denizet,[Editor] Add role=spinbutton to resizers when they're used with the keyboard,False
40b1d92044fa0cdd7f98b7b9f5724077cfc5f88e,2023-10-04 21:36:21,Calixte Denizet,"Update the noHTML flag to take into account the hasOwnCanvas one (fixes #17069)

When an element has the hasOwnCanvas flag we must have an HTML container to attach
the canvas where the element will be rendered.
So the noHTML flag must take this information into account:
 - in some cases the noHTML flag is resetted depending on the hasOwnCanvas value;
 - in some others, the hasOwnCanvas flag is set depending on the value of noHTML.",False
40d6b0e1bf306ef16b4cdcdc093df7cedc2dddad,2023-10-04 17:25:04,calixteman,"Merge pull request #17062 from calixteman/resize_keyboard

[Editor] Support resizing editors with the keyboard (bug 1854340)",True
05ca3fd99b25dbc248ae94b1debaafadd3a9704a,2023-10-04 16:27:37,Calixte Denizet,[Editor] Support resizing editors with the keyboard (bug 1854340),False
c377f2d48860ce7c9aba9dbf1f6f4835762c7d77,2023-10-04 15:06:42,Jonas Jenwald,"Merge pull request #17060 from Snuffleupagus/issue-17056

Add support for ""GoToE"" actions with destinations (issue 17056)",True
bf9c33e60f810c328aca152e0548ece44c9fb93f,2023-10-04 14:44:23,Jonas Jenwald,"Add support for ""GoToE"" actions with destinations (issue 17056)

This shouldn't be very common in practice, since ""GoToE"" actions themselves seem quite uncommon; see PR 15537.",False
da4fdc76a320f0dc1c220780df909865ba65eb61,2023-10-04 14:40:27,Jonas Jenwald,"Merge pull request #17063 from Snuffleupagus/version-4

Bump library version to `4.0`",True
0e6d0ca7b6a9fe869cd4ac46eca94a547b5f3bb6,2023-10-04 03:28:11,calixteman,"Merge pull request #17067 from calixteman/issue17065

Compute correctly the bounding box of a transformed rectangle (fixes #17065)",True
1be9bbd2e1d0d53d3211d0a9e7d19051dbf77cc9,2023-10-04 03:20:59,Calixte Denizet,Compute correctly the bounding box of a transformed rectangle (fixes #17065),False
4245d87de55bf9fd654886c2b3fb0a4dbe1712fd,2023-10-04 02:43:41,Jonas Jenwald,"Merge pull request #17066 from Snuffleupagus/issue-17064

Ensure that readonly TextWidget-annotations are rendered when forms are disabled (issue 17064)",True
f113320bd5ce052fe250b5c647446f7d1c994ff0,2023-10-04 00:56:08,Jonas Jenwald,"Ensure that readonly TextWidget-annotations are rendered when forms are disabled (issue 17064)

To reduced the risk of regressing something else, given that the issue only applies to a (for the default viewer) non-default configuration, this patch is purposely limited to only TextWidget-annotations in the display layer.",False
9cca13bb039a4da220ac30827187a397856b0c2f,2023-10-03 19:27:54,Jonas Jenwald,Bump library version to `4.0`,False
426209c6e6262d58a851d04544c702dac2911950,2023-10-03 18:43:14,Jonas Jenwald,"Merge pull request #16699 from Snuffleupagus/rm-svg

[api-major] Remove the SVG back-end (PR 15173 follow-up)",True
0edc490e1beeb9fea62162738d9effef30c70af7,2023-10-03 18:42:39,Jonas Jenwald,"Merge pull request #16774 from Snuffleupagus/rm-deprecated-options

[api-major] Remove various deprecated functionality and options",True
0cc8c6671cd133ac78588190c32208b19da4793b,2023-10-03 16:57:13,calixteman,"Merge pull request #17059 from calixteman/fix_copy_paste_integration_test

Remove timeouts from the copy_paste integration test",True
bb59f445a999de779d3839dfed571d70a4831881,2023-10-03 15:25:18,Calixte Denizet,Remove timeouts from the copy_paste integration test,False
0986e408428113f35355a3ce899778a3bafc23bc,2023-10-03 14:31:11,calixteman,"Merge pull request #17058 from calixteman/alt_text_canvas

[Editor] Use the alt text to descibe the canvas used to display the image",True
e3fbe2908aa823a47950a631163e26132b7f117a,2023-10-03 02:58:11,Calixte Denizet,[Editor] Use the alt text to descibe the canvas used to display the image,False
59d94b549ff487895f96f1ab0f151ce550e06175,2023-10-03 01:49:18,calixteman,"Merge pull request #17032 from calixteman/alt_text_rm_button

[Editor] Don't show the alt-text button when the alt-text dialog is visible",True
eebd251552ff2435352a0fb4e0f16e0225d235e1,2023-10-03 00:04:30,Calixte Denizet,"[Editor] Don't show the alt-text button when the alt-text dialog is visible

This way, the button doens't cover the image.",False
f5367f01ca33bbdfb9165850776f7b9de0a65f55,2023-10-02 21:40:00,calixteman,"Merge pull request #17051 from calixteman/test_stamp_svg

Fix new intermittent failures with ink and stamp tests",True
077d239b96c51e1fe8f5f8550751ec25ded85bc1,2023-10-02 18:34:44,Calixte Denizet,"Fix new intermittent failures with ink and stamp tests

It happens only on windows with chrome.
For any reason, click event isn't correctly triggered and it seems work correctly
with pointerup.
And it seems that when drawing a svg on an OffscreenCanvas we need to wait
a little in order to be able to transfer it: it's why this patch adds
a check on the canvas content.",False
3ced0dec1ba41dbf4da1ef6cfd6b3cfe4122d29c,2023-10-02 02:44:29,Jonas Jenwald,"[api-major] Remove the SVG back-end (PR 15173 follow-up)

This has been deprecated since version `2.15.349`, which is a year ago.
Removing this will also simplify some upcoming changes, specifically outputting of JavaScript modules in the builds.",False
be53c7d6f5cc546093d2af34b1924d19c94fd9d4,2023-10-01 21:41:24,Tim van der Meij,"Merge pull request #17053 from calixteman/issue17044

Add alt-text svg images to the dist (issue #17044)",True
0d9aef1a5ef6e0008e08d323446ce3206bd76024,2023-10-01 20:17:34,Calixte Denizet,Add alt-text svg images to the dist (issue #17044),False
71bffcc7a94a74eff4fbd9728d1b5ad14476c1c1,2023-10-01 15:39:36,Tim van der Meij,"Merge pull request #17052 from Snuffleupagus/web-pdfjsLib-export

Use a standard `export` statement in the `web/pdfjs.js` file",True
9624505f0fa884c2f53b41b2c03864098421a9c1,2023-09-30 15:40:02,Jonas Jenwald,"Use a standard `export` statement in the `web/pdfjs.js` file

This removes the only remaining old and non-standard handling of exports in the `web/`-folder, since some initial attempts at outputting JavaScript modules in the builds have identified this file as a potential problem.
While this uses a hard-coded list, for overall simplicity, I don't believe that that's a big problem since:
 - Generating this file automatically would require a bunch more parsing *every single time* that the library is built.
 - The official API-surface doesn't change often enough for this to really impede development in any significant way.
 - The added unit-test helps ensure that this list cannot accidentally become outdated.",False
3ca63c68eacba4d5391872647cd2df4710a8d6a7,2023-09-29 21:36:55,calixteman,"Merge pull request #17050 from calixteman/editor_delete_invisible

[Editor] Make a deleted (when it was invisible) editor undoable",True
7d7a7a46a0f30c6549e8c49d68527574acba6954,2023-09-29 20:32:10,calixteman,"Merge pull request #17049 from calixteman/fix_stamp_tests

Remove the timeouts from the stampEditor integration tests",True
12ca22ba446c8ca29d9bcc3cf4a334ea30b3bca3,2023-09-29 20:00:07,calixteman,"Merge pull request #17048 from calixteman/fix_ink_tests

Remove the timeouts from the inkEditor integration tests",True
b65b079cebd0f64868306b2299b44503409455ea,2023-09-29 19:49:11,Calixte Denizet,"[Editor] Make a deleted (when it was invisible) editor undoable

When the editor is invisible (because on a non-rendered page) its parent is null.
But when we undo its deletion, we need to have a parent to attach it.",False
b8c118db227252f9feada0153a5b65b3288673d5,2023-09-29 19:27:16,Calixte Denizet,Remove the timeouts from the stampEditor integration tests,False
627249f889e3ed60b4a6c41626b5ce8ae577691e,2023-09-29 18:31:52,Calixte Denizet,Remove the timeouts from the inkEditor integration tests,False
46940a5a5214eb62dc99c9744349d6a13cd03bcc,2023-09-29 15:11:53,calixteman,"Merge pull request #17036 from calixteman/fix_test_freetext

[Editor] Remove almost all the waitForTimeout from the freetext integration tests",True
55e5af2d01625847f9c1cd0e3d3f5d3c60dbbcf9,2023-09-29 14:44:21,Calixte Denizet,[Editor] Remove almost all the waitForTimeout from the freetext integration tests,False
52862893f5bef7ff6c7b8f816154d8fec00f49e7,2023-09-28 22:14:32,Jonas Jenwald,"Merge pull request #17026 from Snuffleupagus/layerProperties-Object

Convert `layerProperties` to an Object (PR 15811 follow-up)",True
46d8d36721dc3bc3056dc04b274c2a242932f922,2023-09-28 22:13:52,Jonas Jenwald,"Merge pull request #17027 from Snuffleupagus/update-Puppeteer

Update Puppeteer to the latest version",True
b6d75e736adaf18d87370e418f27d0cc537e64a0,2023-09-28 20:53:33,calixteman,"Merge pull request #17038 from ayushmourya/master

Make downloadManager optional in JSDoc types",True
790b480bbc3c9f465556cc45a0af752c6c3643e5,2023-09-28 20:51:07,Jonas Jenwald,"Update Puppeteer to the latest version

This also required updating the `postinstall`-step to account for recent changes in Puppeteer.",False
03ce3b2d54bf893c99e7dbaf713154a04c4d8402,2023-09-28 20:50:23,Jonas Jenwald,"Convert `layerProperties` to an Object (PR 15811 follow-up)

Given that this is accessed multiple times per page in the viewer, that leads to a number of (strictly speaking unneeded) function calls and allocated Objects for each invocation. By converting `layerProperties` to a, lazily initialized, Object we can avoid this.",False
3072efa064cf92dabd5191e5be4ffef02102df0d,2023-09-28 19:24:06,Jonas Jenwald,"Merge pull request #17035 from Snuffleupagus/postcss-discard-comments

Remove comments from the *built* CSS files",True
d7d900c65d08802e5ecb09baf1eac18d5bb7b10e,2023-09-28 19:21:53,calixteman,"Merge pull request #17045 from calixteman/resize_disable_mouse

[Editor] Disable pointer events in the parent layer while an editor is resized",True
4f6fa35a28fdba805d17205392bed244af455f48,2023-09-28 18:39:50,Calixte Denizet,[Editor] Disable pointer events in the parent layer while an editor is resized,False
f78a5ff79ef69fcb6359e95e657a4025720fbbec,2023-09-28 18:13:18,calixteman,"Merge pull request #17043 from calixteman/bug1855641

StructParents entry isn't required on pages with no tagged contents (bug 1855641)",True
f2196f78036fe2266d86fa68a56ab3b82a68c088,2023-09-28 17:53:10,Calixte Denizet,StructParents entry isn't required on pages with no tagged contents (bug 1855641),False
2daf9515b33438de8e8c5af43595c9641c01b211,2023-09-28 15:57:20,calixteman,"Merge pull request #17041 from calixteman/rm_timeouts

[Editor] Clear the different timeouts when destroying",True
8417eee0c191b64b89db4b1105aabd3db182e507,2023-09-28 15:33:11,Calixte Denizet,[Editor] Clear the different timeouts when destroying,False
00c8fbe7e00cb7a89f8e6e7888bd24649308abc1,2023-09-27 19:59:16,Jonas Jenwald,"Merge pull request #17040 from Snuffleupagus/rm-save-disabled-CSS

[Editor] Remove unused CSS rules for the altText ""Save""-button (PR 17015 follow-up)",True
fb16151247cd66239ec80df5d09ab577b506feb3,2023-09-27 19:07:38,calixteman,"Merge pull request #17039 from calixteman/alt_text_no_tooltip_when_resizing

[Editor] Disabled the alt-text button when the editor is being resized",True
bdb8410ad477b035267537163295b6d0f75ede52,2023-09-27 18:43:17,Calixte Denizet,[Editor] Disabled the alt-text button when the editor is being resized,False
880abd910e18f91a5699277710338608ba4faba6,2023-09-27 18:28:22,Jonas Jenwald,"[Editor] Remove unused CSS rules for the altText ""Save""-button (PR 17015 follow-up)

When PR 17015 removed the `disabled` handling for the ""Save""-button it left a bunch of now unused CSS rules behind, which seems like a simply oversight.
Rather than shipping ""dead"" CSS rules, let's remove those until such a time that they're actually needed.",False
87a1baf29f6120681238569e287d109d2ae0bb92,2023-09-27 12:47:50,ayush,docs: Make downloadManager optional in JSDoc,False
7413546e16d672605e0ba9ed786ea88cdab2db65,2023-09-26 17:08:26,Jonas Jenwald,"Remove comments from the *built* CSS files

The old pre-processor used for CSS, and HTML, files leaves comments intact which unnecessarily contributes to the overall size of the *built* CSS files (note that the built JavaScript files don't include comments).
Rather than trying to ""hack"" comment removal into the pre-processor it seems easier to use a PostCSS plugin instead. The one potential issue is that it also affects *some* whitespaces, and it's not clear to me if this'll work with the various CSS-related tests that run in mozilla-central.

Please refer to https://www.npmjs.com/package/postcss-discard-comments for additional information.",False
3f7060e77743a2d3244c95d364b52e0331ed4ed2,2023-09-26 15:34:50,calixteman,"Merge pull request #17034 from calixteman/bug1855157

[Editor] Don't try to add data to the struct tree when there is no accessibilityData (bug 1855157)",True
3ee5268a239e5056f706f67106163bc3dcb681ef,2023-09-26 14:32:14,Calixte Denizet,[Editor] Don't try to add data to the struct tree when there is no accessibilityData (bug 1855157),False
5f75404bc39d7c45225c7cf37821d93c8834d96f,2023-09-25 23:14:50,calixteman,"Merge pull request #17030 from calixteman/editor_remove_editing_class

[Editor] Remove the class fooEditing from the layer when destroying it",True
549c414ff5ed15baff1519d4ab97e4dbf4ce4157,2023-09-25 23:14:27,calixteman,"Merge pull request #17031 from calixteman/bug1854991

[Editor] Slightly postpone the move in the DOM in order to not block the UI (bug 1854991)",True
71376f089c10bc4695bfe00b28ebf274ef80619d,2023-09-25 22:26:11,Calixte Denizet,"[Editor] Remove the class fooEditing from the layer when destroying it

and simplify the way to handle the different types of editors.",False
29bc103fada21d4d392de5527e83ff0b64cbfb28,2023-09-25 21:48:01,Calixte Denizet,[Editor] Slightly postpone the move in the DOM in order to not block the UI (bug 1854991),False
57d196e3497e77c81c19f852715ce79d9fb91492,2023-09-24 23:32:49,Tim van der Meij,"Merge pull request #17024 from timvandermeij/bump

Bump the stable version in `pdfjs.config`",True
a93ac2a32bbb41bf800eb4728b8eb2e48555d02e,2023-09-24 23:27:55,Tim van der Meij,Bump the stable version in `pdfjs.config`,False
ce87167432819f85df49b6b16c7a78556e9a4ee0,2023-09-24 22:17:18,Tim van der Meij,"Merge pull request #17022 from timvandermeij/fix-intermittent-us

Fix integration test ""Interaction in issue14307.pdf (1) must check input for US zip format""",True
6112f3ee74035b4273858642fe77113d76f0c78f,2023-09-24 21:16:55,Jonas Jenwald,"Merge pull request #17023 from Snuffleupagus/altText-padding

[Editor] Add padding to the altText-button to account for different locales",True
fc898e1b38ee14af35bc0ec1f0e8e9d322fbbab9,2023-09-24 19:43:16,Jonas Jenwald,"[Editor] Add padding to the altText-button to account for different locales

*For many non-English locales the translated strings will be longer, which is easy to forget about during development/review.*

Note how for some locales (e.g. Swedish) the altText-button end up looking horizontally ""cramped"", hence it seems reasonable to add a bit of inline padding to improve this.",False
6e584adfc5a0205b21e4ae84a57641671cd5eff9,2023-09-24 19:17:21,Tim van der Meij,"Use realistic typing delays for the scripting integration tests

In the scripting integration tests we use a few different typing
delays, mostly 100 or 200 milliseconds. According to for example
https://www.typingpal.com/en/documentation/school-edition/pedagogical-resources/typing-speed,
a fast typing speed is around 300 characters per minute, which is 5
characters per second and therefore a delay of 200 milliseconds between
each keystroke. Note that this is already above average, so in practice
the delay will be even larger. Therefore the 100 milliseconds variant
is unrealistically fast and therefore not suitable for the integration
tests which aim to simulate the average user behavior.

On top of that, the quick typing speeds are problematic for the tests
that involve validation alert dialogs appearing during typing. In those
tests a handler is registered to close the dialog once it pops up, but
it takes time for Puppeteer to notice the dialog, trigger the handler
and close it. If the typing delay, which is the delay between the key
down and key up events according to the Puppeteer source code at
https://github.com/puppeteer/puppeteer/blob/master/packages/puppeteer-core/src/cdp/Input.ts#L209-L215,
is too short, the key up event will be fired before the dialog is
closed. In that time the text box we're typing in is not focused, so
when the dialog is closed the `page.type()` call on the text box will
never resolve because the key up event never reached the text box.

This commit aims to fix the issues by converting all 100 millisecond
delays to 200 milliseconds. For instance the ""must check input for US
zip format"" failed pretty consistently locally before and hasn't failed
anymore with a 200 millisecond delay.",False
48d75599d39e8340bee53a1339ec396e87d2af6f,2023-09-24 18:04:58,calixteman,"Merge pull request #17018 from calixteman/alt_text_test

[Editor] Add an integration test for the new alt-text flow",True
de553456ce4136b0191332b4377315ef3c2d14b8,2023-09-24 17:09:18,Calixte Denizet,[Editor] Add an integration test for the new alt-text flow,False
9b464047bc3fd245d14ada62378ac8b6bf482e6f,2023-09-24 17:07:18,Tim van der Meij,"Merge pull request #17021 from timvandermeij/fix-intermittent-autoprint

Fix integration test ""Interaction in autoprint.pdf must check if printing is triggered when the document is open""",True
b41bca7da9d65f2e5f2a2300f782c73e21eec3bf,2023-09-24 16:18:58,Tim van der Meij,"Don't wait for scripting to be ready in the `autoprint` integration test

This integration test fails often because we wait for scripting to be
ready before we check the printed page, but most of the time the PDF
is already done printing before scripting is reported to be ready.

This happens because the print trigger is on the `Open` event, which is
one of the first events to be dispatched and, most notably, before
scripting is marked as ready; please see
https://github.com/mozilla/pdf.js/blob/master/web/pdf_scripting_manager.js#L176-L191.
Given that the PDF document is only one page, printing it is usually
finished between triggering the `Open` event and scripting reported
to be ready. If this happens the printed page is already destroyed
before we get to our actual test, which will then timeout because it
will never find the printed page in the DOM.

This commit fixes the problem by not awaiting scripting to be ready
because the fact that the printed page appears is already enough to know
that autoprint was triggered (after all, there is no other user
interaction involved here). While we're here we also switch to the
shorter `page.waitForSelector` function.",False
57f548c989f8c982fc6ce0887adca70951e01518,2023-09-24 16:12:50,Jonas Jenwald,"Merge pull request #17019 from calixteman/bug1854818

[Editor] The ::before containter containing the border of a selected editor mustn't catch mouse events (bug 1854818)",True
587a3a2eaecac1bfa00605a607408ff4148f8563,2023-09-24 15:41:43,Tim van der Meij,"Merge pull request #17020 from Snuffleupagus/update-packages

Update packages and translations",True
073a1da6f550d77324812920b1ffcad0b1354510,2023-09-24 14:35:37,Jonas Jenwald,Update l10n files,False
1b95ab7cfae0caedd89d79acd96d22b4ee361ddf,2023-09-24 14:33:19,Jonas Jenwald,Update npm packages,False
57caa4601cdf5da873d048d1f51467ec49f8ca04,2023-09-24 03:23:19,Calixte Denizet,[Editor] The ::before containter containing the border of a selected editor mustn't catch mouse events (bug 1854818),False
f87ec67ab1f0280631918a035d460e46eee7622a,2023-09-23 21:14:09,Jonas Jenwald,[api-major] Remove various deprecated functionality and options,False
0fc0dc39608dbe31fd1654345f13961128809709,2023-09-23 19:48:26,Jonas Jenwald,"Merge pull request #17017 from Snuffleupagus/one-noContextMenu

Use one `noContextMenu` function in both the src/- and web/-folders",True
1df31c0284844d7193c1f79c5cd9ec717247a306,2023-09-23 19:07:13,Jonas Jenwald,"Use one `noContextMenu` function in both the src/- and web/-folders

Currently we duplicate this event handler function in multiple places, which seems unnecessary.",False
a09b7228fb9eace1810b6585c3f33e4dbccaaa61,2023-09-23 18:05:07,Tim van der Meij,"Merge pull request #16970 from timvandermeij/fix-intermittent-border

Fix integration test ""Interaction in issue15053.pdf must check that a button and text field with a border are hidden""",True
f9eda5b30e949c3fc9825024d38a79827f9f8778,2023-09-23 18:04:43,Tim van der Meij,"Merge pull request #16967 from timvandermeij/fix-intermittent-freetext

Fix integration test ""FreeText Editor FreeText (edit existing in double clicking on it) must move an annotation""",True
d2e34dff93e205416772e33f397e54a9510e0342,2023-09-23 17:52:30,calixteman,"Merge pull request #17016 from calixteman/alt_text_button_no_menu

[Editor] Disable context menu on alt-text button and in the associated dialog",True
88f3ed7745d35021be7e13d5cd3cfc81613013a8,2023-09-23 02:57:55,Calixte Denizet,"[Editor] Disable context menu on alt-text button and in the associated dialog

but keep it for the text area.
Disable pointerdown on the alt-text button to disable dragging the editor
when the button is clicked (especially when slightly moving the mouse
between the down and the up).",False
85568bd6ccf391818569190894e4f7ade7f1284d,2023-09-23 02:15:13,Jonas Jenwald,"Merge pull request #17012 from Snuffleupagus/altText-telemetry-on-close

[Editor] Report telemetry when closing the altText dialog with `Esc` (PR 16987 follow-up)",True
9e0e67918fb2ec5388b9fe70379416315f7a5896,2023-09-23 01:50:49,Jonas Jenwald,"[Editor] Report telemetry when closing the altText dialog with `Esc` (PR 16987 follow-up)

The dialog element handles closing with <kbd>Esc</kbd> automatically, however we're not reporting telemetry in that case.
In order to fix that the easiest solution, as far as I'm concerned, seem to be moving the telemetry reporting into the dialog-close handler since it's always invoked.",False
d555f351d38901d38741317f4e93553c07c4da09,2023-09-23 01:48:02,Jonas Jenwald,"Merge pull request #17011 from Snuffleupagus/altText-destroy-keep-#currentEditor

Don't reset `this.#currentEditor` when destroying the dialog",True
8c5da23f67a955251112e67e74035fcef02e0d57,2023-09-23 01:23:26,Jonas Jenwald,"Don't reset `this.#currentEditor` when destroying the dialog

This patch addresses an edge-case that'll probably never happen, but it nonetheless seems like something that we want to fix.

Note how we're using the `#currentEditor`-field to prevent opening the dialog when it's already active, and it being reset once the dialog has been closed.
By also resetting the `#currentEditor`-field during destruction, instead of waiting until the dialog has actually closed (assuming it's currently open), there's a *tiny* window of time[1] during which we could theoretically allow to (incorrectly) re-open the dialog and thus getting out-of-sync state in the viewer-component.

---
[1] Since the ""close"" event, on a dialog-element, is dispatched asynchronously by the browser.",False
c027aaeefad51f384d11dbb3eee50871b1c431e8,2023-09-23 00:48:30,calixteman,"Merge pull request #17015 from calixteman/alt_text_save_button

[Editor] Let the Save button always enabled in the alt-text dialog",True
d5936d9a153039e92f67206b3fe48d582a6f7248,2023-09-23 00:16:29,Calixte Denizet,[Editor] Let the Save button always enabled in the alt-text dialog,False
f66613c8e401cd548dc53d0037f28a683daf4cb8,2023-09-22 21:15:49,calixteman,"Merge pull request #17005 from calixteman/alt_text_tweak_save_flow

[Editor] Tweak the save flow in the alt-text dialog",True
a68845c902cb929d194acfcc889da2937d94bfa4,2023-09-22 21:05:55,Jonas Jenwald,"Merge pull request #17014 from Snuffleupagus/reporttelemetry-tweaks

Don't bother trying to unregister the ""reporttelemetry"" event listener",True
43c7e88fa91b6ed4a8f8933b7c52d6eb6dc404db,2023-09-22 20:54:32,Jonas Jenwald,"Don't bother trying to unregister the ""reporttelemetry"" event listener

Note that both event-unbind methods are unused in MOZCENTRAL builds; see https://searchfox.org/mozilla-central/rev/48b6992e03fa66f77ac9688ba61c95d31a451bc1/toolkit/components/pdfjs/content/web/viewer.js#1864-1869",False
050093c9f519154f26f3d5757ffc7290fd98ba8f,2023-09-22 20:40:20,Calixte Denizet,"[Editor] Tweak the save flow in the alt-text dialog

When the user edit an existing alt-text and remove it, we want to be able
to save this state and consequently remove the done state from the
alt-text button.
Remove the button from its parent when the editor is removed: it should
help to save few Kb of memory.",False
3f859f76e64fae4d75f8b791b3da4f05290c2291,2023-09-22 17:04:57,calixteman,"Merge pull request #17010 from calixteman/alt_text_mask_1

[Editor] Darken the toolbar when the alt-text dialog is opened",True
eff7ed580d436449b6991e6be890c3ff9f84aa51,2023-09-22 16:56:57,Jonas Jenwald,"Merge pull request #17009 from Snuffleupagus/altText-label-clicks

[Editor] Make the altText dialog labels part of telemetry (PR 16987 follow-up)",True
0237e2eb2b2e0f72403ab846fc3741247a9fa1d5,2023-09-22 16:41:37,Calixte Denizet,"[Editor] Darken the toolbar when the alt-text dialog is opened

It aims to fix the issue spotted in:
https://github.com/mozilla/pdf.js/pull/17002#issuecomment-1730962273",False
ee5b8bcf9ec65b24c3a059bd0437397800e2a11b,2023-09-22 15:56:03,Jonas Jenwald,"[Editor] Make the altText dialog labels part of telemetry (PR 16987 follow-up)

Radio-buttons can also be toggled by clicking on their associated `label`-elements, and not only the `input`-elements itself, however it seems that ""pointerdown"" event listeners don't cover that case.
Hence it's possible that telemetry could miss certain cases of a mouse being used, and the easiest solution seem to be to instead use ""click"" event listeners and just ignore keyboard-based events.",False
2fc8ab3477d7418777146bd3593986e47465b419,2023-09-22 15:47:21,calixteman,"Merge pull request #17002 from calixteman/alt_text_mask

[Editor] Avoid to darken the current editor when opening the alt-text dialog",True
edb83ffec20bdb311910322da665f81632a56ac4,2023-09-22 12:49:19,Jonas Jenwald,"Merge pull request #17004 from Snuffleupagus/dialog-disable-zooming

Prevent wheel/touch zooming in the viewer when a dialog is open",True
988222d7de23c2bda40a22a5feef97b3eac3ea2b,2023-09-22 12:41:52,Jonas Jenwald,"Merge pull request #17003 from Snuffleupagus/issue-17000

Restore the `collectFields` parameter in the Annotation code (issue 17000)",True
6545551e761330d9cc98036c392182ef3a6bfb9d,2023-09-22 00:14:53,Calixte Denizet,[Editor] Avoid to darken the current editor when opening the alt-text dialog,False
9b21f17b032464a839ca59a35c27d1d75888d60b,2023-09-21 23:38:08,Jonas Jenwald,Prevent wheel/touch zooming in the viewer when a dialog is open,False
4cedc12341caf70407f9e4aee8bf61d4ea8a4754,2023-09-21 23:19:31,Jonas Jenwald,"Restore the `collectFields` parameter in the Annotation code (issue 17000)

Rather than trying to be ""clever"" here, and possibly affect code readability negatively, let's just restore the `collectFields` parameter to address the unneeded parsing that now happens when printing new Annotations.",False
e9f707ce3fe73e29701e94b43365bccdc7a0f16c,2023-09-21 22:56:50,Jonas Jenwald,"Merge pull request #16999 from Snuffleupagus/issue-16994

[GeckoView] Exclude `annotation_editor_layer_builder.css` in the build (issue 16994)",True
5711d0f95d7d53cf16ec8730d4baf799356ad0c7,2023-09-21 19:21:33,Jonas Jenwald,"[GeckoView] Exclude `annotation_editor_layer_builder.css` in the build (issue 16994)

Given the limitations of the old pre-processor that's used for CSS/HTML files, this unfortunately isn't as ""easy"" to implement as it is for JavaScript code.
Since this is the first case where we've wanted to do conditional CSS imports, rather than trying to completely re-write the pre-processor, this patch settles for handling it explicitly in the `expandCssImports` function.",False
a7894a4d7bf61899b98ea928e2b26a55138f1755,2023-09-21 17:49:51,calixteman,"Merge pull request #16993 from Snuffleupagus/gv-no-AltTextManager

[GeckoView] Avoid bundling the `AltTextManager` class, since it's unused",True
9de432ba7ae4468f1bde2e0a4e49669c30b2fd22,2023-09-21 17:44:56,calixteman,"Merge pull request #16998 from calixteman/fix_css_linter_issue_1

Make one of the m-c linters happy",True
61c77c7d8b7af5ef29c233390d7c473809b99250,2023-09-21 17:39:48,Calixte Denizet,Make one of the m-c linters happy,False
b002d16f04014348546328900453d086b9cefd8e,2023-09-21 17:22:54,calixteman,"Merge pull request #16996 from Snuffleupagus/issue-16995

Enable the Stylelint `declaration-block-no-duplicate-properties` rule (issue 16995)",True
80e691d2ad151847575862b3b1e8c5be23a002a2,2023-09-21 17:12:05,Jonas Jenwald,"Enable the Stylelint `declaration-block-no-duplicate-properties` rule (issue 16995)

Please refer to https://stylelint.io/user-guide/rules/declaration-block-no-duplicate-properties",False
e2b7896826a9fa2ab239f73b1b557bfde0affc80,2023-09-21 16:21:34,Jonas Jenwald,"[GeckoView] Avoid bundling the `AltTextManager` class, since it's unused",False
561aea530b1e68e5be02200557cdf0b88ca7e375,2023-09-21 14:34:06,calixteman,"Merge pull request #16991 from Snuffleupagus/alt_text_edit-boolean

Ensure that all ""alt_text_*"" save-telemetry values are boolean (PR 16987 follow-up)",True
237b8ce4a85d8167ccac9354dad99cc8fdb4f958,2023-09-21 14:33:19,calixteman,"Merge pull request #16988 from calixteman/alt_text_dialog_others

[Editor] Tweak few values after review from UX",True
67ddabcbc2e1aac1d7a019c548fc5670882f19d0,2023-09-21 14:26:25,calixteman,"Merge pull request #16990 from calixteman/alt_text_aria_label

[Editor] Add an aria-label to the alt-text button depending on its state",True
b5d18006a72a10d4410e175ffb74befa271e6384,2023-09-21 14:22:58,Calixte Denizet,[Editor] Tweak few values after review from UX,False
5660cdfe6807c7b356cc1170be0cb5e3188c0660,2023-09-21 12:06:41,Jonas Jenwald,"Ensure that all ""alt_text_*"" save-telemetry values are boolean (PR 16987 follow-up)

Looking at the save-telemetry values they're all boolean *except* for ""alt_text_edit"" in one instance, since `this.#previousAltText` may be an empty string (looking at the `editAltText` method) and this value may thus become an empty string as well.",False
34506f8874ce86ea21b9db54d0552947208bf4bb,2023-09-21 01:36:14,Jonas Jenwald,"Merge pull request #16989 from Snuffleupagus/more-reporttelemetry-event

Use the new ""reporttelemetry"" event in more viewer components",True
c90ea2314e32445b8807f406073620376fa3a0f3,2023-09-21 01:26:16,Calixte Denizet,[Editor] Add an aria-label to the alt-text button depending on its state,False
fe60db27b120c6a646a9c85d833e7d955bbeafc6,2023-09-20 23:48:10,Jonas Jenwald,"Use the new ""reporttelemetry"" event in more viewer components

By utilizing the recently added ""reporttelemetry"" event, we can avoid having to manually pass in `externalServices` to a number of viewer components.",False
f2d75d92216ad56e1aab91f1b8db630f8c9fd6dd,2023-09-20 22:33:01,calixteman,"Merge pull request #16985 from calixteman/btn_bg

[Editor] Change the colors for the disabled Save button in alt text dialoag in HCM",True
7d0bf376d0e1f810a16db449a24f077d34eb3e71,2023-09-20 22:28:31,Calixte Denizet,[Editor] Change the colors for the disabled Save button in alt text dialoag in HCM,False
67646387c8551aa960c07b55c4938c9465513a12,2023-09-20 22:22:37,calixteman,"Merge pull request #16986 from calixteman/alt_text_contents

[Editor] Change some strings in the alt-text dialog",True
9a677d0d4d3f469b38e8b06955a8a23eebfe16f6,2023-09-20 22:14:56,Calixte Denizet,[Editor] Change some strings in the alt-text dialog,False
0317d3e1683ad60cf06db80afed2dfb8aeb2b693,2023-09-20 21:04:59,calixteman,"Merge pull request #16987 from calixteman/alt_text_telemetry

[Editor] Add more telemetry for the 'add image' feature (bug 1853960)",True
0a278ef0bc382bb86e703205e911c1e617da8657,2023-09-20 20:53:23,Calixte Denizet,[Editor] Add more telemetry for the 'add image' feature (bug 1853960),False
b80e0d881dc9b3282b02acd2fe7feadd7c25bde6,2023-09-20 14:44:28,calixteman,"Merge pull request #16984 from Snuffleupagus/altText-close

Don't try to close the `altText` dialog if it's not open (PR 16977 follow-up)",True
b7fa4fb0f7c81ad51851f8de2f39b92ecce9e8fe,2023-09-20 14:30:31,calixteman,"Merge pull request #16983 from calixteman/alt_text_tooltip

[Editor] Add a tooltip showing the alt text when hovering the alt-text button (bug 1844952)",True
7952a36384481822607516859160286c2fa50623,2023-09-20 14:20:28,Calixte Denizet,[Editor] Add a tooltip showing the alt text when hovering the alt-text button (bug 1844952),False
21c55b56bfca1262c3f68918274f82abd37883f7,2023-09-20 11:29:46,Jonas Jenwald,"Don't try to close the `altText` dialog if it's not open (PR 16977 follow-up)

When closing a document in the viewer, e.g. by running `PDFViewerApplication.close()` in the console, the `AltTextManager.#finish` method currently throws *unless* the `altText` dialog is actually open.
Similar to e.g. the PasswordPrompt, we should thus only attempt to close the `altText` dialog when it's open.",False
8d326e5e30ad06b2b31f604e0e033c21b952fb3c,2023-09-20 02:22:49,calixteman,"Merge pull request #16982 from calixteman/alt_text_rm_copy_listeners

[Editor] Remove copy/paste listener when alt text dialog is displayed",True
c162b004ce43306303946403950dfb3613ac8bff,2023-09-20 02:11:47,Calixte Denizet,[Editor] Remove copy/paste listener when alt text dialog is displayed,False
54f6264d5b805a6ad8434bd441fc0b2bc419436d,2023-09-20 01:29:59,calixteman,"Merge pull request #16977 from calixteman/add_alt_text

[Editor] Allow the user to add and save an alt-text for images (bug 1844952)",True
c12049db0740377a6c8f121c575a36887e8b6044,2023-09-20 01:16:48,Calixte Denizet,[Editor] Allow the user to add and save an alt-text for images (bug 1844952),False
29a48f947994f1e799bf544c6782aaa7b96590ea,2023-09-19 18:45:00,Jonas Jenwald,"Merge pull request #16981 from Snuffleupagus/optionalContent-type-missing

Ignore optional content with missing /Type-entries",True
0ac8f33e1358f67762152704bb363f9cf1febb9b,2023-09-19 17:41:03,Jonas Jenwald,"Ignore optional content with missing /Type-entries

In the rare situation that an optional content dictionary lacks a /Type-entry we currently throw, which may prevent e.g. Form XObjects from rendering completely.

Fixes https://bugs.ghostscript.com/show_bug.cgi?id=707147",False
daae6589b65648994fb17dde7310e9e7baf7eb25,2023-09-19 14:06:50,calixteman,"Merge pull request #16979 from calixteman/alt_text_change_str1

[Editor] Update alt text dialog description",True
b9469c2059f356264aad49824b47a1ba33875632,2023-09-19 13:42:11,calixteman,"Merge pull request #16980 from calixteman/rounded_resizers

[Editor] Make the border of the resizers slightly rounded",True
f7870c04ae0fca27ec129deab0e85bdde618a437,2023-09-19 13:27:00,Calixte Denizet,"[Editor] Make the border of the resizers slightly rounded

It's a part of the UX specifications. There's a drawing issue in Firefox
(see bug https://bugzilla.mozilla.org/1853288) but setting the
background-clip property to content-box seems to be a good workaround.",False
0df9d1d93445de6a5e5eb2fb4ab584fa95fba72f,2023-09-19 12:57:43,Calixte Denizet,[Editor] Update alt text dialog description,False
5ac40b71c0676f0cc6367ff600c2e5c701c5eb9e,2023-09-19 01:19:33,calixteman,"Merge pull request #16952 from calixteman/alt_text_window

[Editor] Add a dialog box in order to get alt-text data (bug 1844952)",True
df0da86b643eeac70e79b201ca5014f652704d4a,2023-09-19 01:12:52,Calixte Denizet,"[Editor] Add a dialog box in order to get alt-text data (bug 1844952)

Implement the specifications provided by UX for light, dark and HCM modes.",False
c0ed7fff2c1924f65c8a1c3948ef24fedd95263e,2023-09-18 23:23:48,calixteman,"Merge pull request #16975 from calixteman/alt_text_fix_icon_dims

[Editor] Use the same height as in the svg for icons for the alt-text button",True
60ccce5cb197adfed554d314949030b48c63f807,2023-09-18 22:37:36,Calixte Denizet,[Editor] Use the same height as in the svg for icons for the alt-text button,False
c8727d9c70cf53bada7ff4db2c5f4d835832997e,2023-09-18 22:31:33,calixteman,"Merge pull request #16974 from calixteman/fix_css_linter_issue

Fix a CSS linter issue in removing a useless comma",True
2bd7bb3847d715db2f6e891b2346ae903cae5083,2023-09-18 22:16:46,calixteman,"Merge pull request #16972 from calixteman/alt_text_icon_alpha

[Editor] Avoid to have some transparency in the icon used in the 'Alt text' button",True
9b6e37c2cd09380015cac3cc16fd7151e1572b7f,2023-09-18 22:15:14,Calixte Denizet,Fix a CSS linter issue in removing a useless comma,False
9dbe95c63c6cccf9dd607d4e6a4479ab1c879e40,2023-09-18 21:55:03,Calixte Denizet,[Editor] Avoid to have some transparency in the icon used in the 'Alt text' button,False
b85281914f77d55de5cdcb8caac141a556bd5ef4,2023-09-18 19:20:10,calixteman,"Merge pull request #16955 from calixteman/alt_text_button

[Editor] Add a button to trigger a dialog for adding an alt text (bug 1844952)",True
a216836fd55046b4bd999fa2d945e7d4218f3441,2023-09-18 18:37:09,Calixte Denizet,[Editor] Add a button to trigger a dialog for adding an alt text (bug 1844952),False
3afb717eed03da260e5f9f2e7c066d3e101de287,2023-09-18 16:34:52,calixteman,"Merge pull request #16938 from calixteman/update_struct_tree

[Editor] Add the ability to create/update the structure tree when saving a pdf containing newly added annotations (bug 1845087)",True
01428f1e2379ea3ef628aeb70e29290914bf9844,2023-09-17 23:18:14,Tim van der Meij,"Wait for visibility change in the `issue15053` integration test

Especially on slower bots there is some time between clicking the
element and the actual visibility change, but we didn't await this and
checked the visibility state immediately after clicking. This can be
reproduced 100% of the time by introducing a delay in the `display` and
`hidden` handlers of the `_commonActions` shadow call.

This commit fixes the problem by waiting until the first visibility
change actually happened before continuing with the assertions.",False
1b3ccf1321e344ad8b75772c6376793ee2459a1b,2023-09-17 22:19:11,Tim van der Meij,"Wait for selector instead of timeout in the freetext double click move integration test

This integration test currently fails intermittently on the bots because
of the fixed timeout in the test, which is sometimes too low on slower
systems. The issue can be reproduced 100% of the time by introducing a
delay just before dispatching the `switchannotationeditormode` event.

Puppeteer also discourages this and instead recommends waiting for a
selector instead, which we now do here. This ensures that the test only
continues if the element under test is available and therefore prevents
any timing problems.",False
97819891b6b61f32d4db25edd9565a06b2125a5f,2023-09-17 21:16:19,Tim van der Meij,"Merge pull request #16964 from timvandermeij/fix-intermittent-annotations-move

Fix off-by-one errors in the ""FreeText must move several annotations"" integration test",True
306cca930fa5791ded87bc88000d40a566ed3f37,2023-09-17 19:26:51,Tim van der Meij,"Fix off-by-one errors in the ""FreeText must move several annotations"" integration test

The x/y-coordinates are floats instead of integers like one might
expect. The current approach rounds both the old and the new
coordinates in order to do integer comparison. However, rounding each
coordinate individually causes too much loss of precision because,
depending on the decimal value, they are either rounded up or down
which causes intermittent off-by-one errors.

This commit fixes the problem by comparing coordinate differences
instead of the coordinates themselves. The precision loss is avoided
by subtracting the old from the new coordinate as-is and only rounding
the final result.",False
e37e7b6f39d7abab90ed9d5ad9d33ed61bdb7f25,2023-09-17 17:42:55,Tim van der Meij,"Merge pull request #16962 from timvandermeij/fix-intermittent-bug1844576

Fix integration test ""Interaction in bug1844576.pdf must check that a field has the correct formatted value""",True
0d3fbc18187c7d35bbeef6d6d8b11a87e58a8bda,2023-09-17 16:45:53,Tim van der Meij,"Wait for selector instead of timeout in the `bug1844576` integration test

This integration test currently fails intermittently on the bots because
of the fixed timeout in the test, which is sometimes too low on slower
systems. The issue can be reproduced 100% of the time by introducing a
delay in the `WidgetAnnotationElement.showElementAndHideCanvas` method.

Puppeteer also discourages this and instead recommends waiting for a
selector instead, which we now do here. This ensures that the test only
continues if the element under test is available and therefore prevents
any timing problems.",False
dd46110f6b4b4c9703504765b08ddfc89d7c452f,2023-09-17 16:39:39,Tim van der Meij,"Use the `page.$eval` method in the `bug1844576` integration test

We already use `page.$eval` in most other integration tests and it's
simpler because it already takes the selector as argument, so we don't
have to do a separate `querySelector` call ourselves.",False
518590ac7d1054d5b1353044103f34e5f0b7b401,2023-09-17 15:15:14,Tim van der Meij,"Merge pull request #16961 from Snuffleupagus/debugger-rm-closure

Remove (some) closures from `web/debugger.js`",True
98671c36187ffe3d5c5f729102f9c7c06efecde1,2023-09-17 15:12:20,Tim van der Meij,"Merge pull request #16959 from Snuffleupagus/rm-CipherTransformFactory-closure

Remove the closure from the `CipherTransformFactory` class",True
2d79be941e125d32deae9446576abc573724fa85,2023-09-17 11:36:43,Jonas Jenwald,"Convert `PDFBug`, in `web/debugger.js`, to a class with static methods

This gets rid of one more closure from the code-base.",False
c9cd934f8a1e779f59888dbcf7d7154b6650a84b,2023-09-17 11:36:33,Jonas Jenwald,"Stop hard-coding the panel width in `web/debugger.js`

Thanks to CSS variables we can avoid hard-coding the panel width in the JavaScript code.",False
22cd0c6ff855a8272a1229c2b663c833f28801f4,2023-09-17 11:36:26,Jonas Jenwald,Remove the closure from the `Stepper` class in `web/debugger.js`,False
a8573d4e1bfe90307235297eb29c120dcd9fcbf2,2023-09-16 22:04:58,Calixte Denizet,"[Editor] Add the ability to create/update the structure tree when saving a pdf containing newly added annotations (bug 1845087)

When there is no tree, the tags for the new annotions are just put under the root element.
When there is a tree, we insert the new tags at the right place in using the value
of structTreeParentId (added in PR #16916).",False
0304b65fcda7e96cd433cf19f7a2fb8bc64ff375,2023-09-16 20:04:24,Jonas Jenwald,"Remove the closure from the `CipherTransformFactory` class

Now that modern JavaScript is fully supported also in the worker-thread we no longer need to keep old closures, which slightly reduces the size of the code.",False
b49fe5baacf54e14fb94a16dbaa36e1d515713ea,2023-09-16 18:39:56,Tim van der Meij,"Merge pull request #16958 from timvandermeij/puppeteer

Update Puppeteer to version 21.2.1",True
7f8de83e9655b163696f19eb8d961c7d798647ff,2023-09-16 18:01:05,Tim van der Meij,"Merge pull request #16957 from Snuffleupagus/SaveDocument-more-await

Use `await` even more in the ""SaveDocument"" worker-thread handler",True
6c5d5f3cb90ace84616ff57f0e5dee76abaad5f0,2023-09-16 17:35:26,Tim van der Meij,"Update Puppeteer to version 21.2.1

This release fixes the upstream bug that caused old Firefox revisions to
not be removed from the cache.

Fixes #16904.",False
89c8f90a14079a586fdecd050d71ee180c10a0c8,2023-09-16 17:21:33,Tim van der Meij,"Merge pull request #16956 from Snuffleupagus/opMap-rm-getLookupTableFactory

Simplify the `EvaluatorPreprocessor.opMap` getter a little bit",True
ff96c413d3efdc3ec08ff6c7596d57b555c1af99,2023-09-16 16:36:48,Jonas Jenwald,"Use `await` even more in the ""SaveDocument"" worker-thread handler

Given that the function is already asynchronous we can make use of `await` even more and reduce the amount of indentation a little bit.",False
4dd197ae3f4536e4240904e731c18887b14ff1a2,2023-09-16 15:58:32,Tim van der Meij,"Merge pull request #16954 from Snuffleupagus/rm-colorspace-closure

Remove the remaining closures in the `src/core/colorspace.js` file",True
316d1ec5ef337727c045c2c46842bd5fc1a9882c,2023-09-16 15:56:38,Jonas Jenwald,"Simplify the `EvaluatorPreprocessor.opMap` getter a little bit

Given that this is a shadowed getter, the `opMap` is already lazily initialized and it shouldn't be necessary to *also* use the `getLookupTableFactory` helper function here. Looking at the history of the code, it seems that this is simply a leftover from before JavaScript classes existed.",False
8cb5d01acd547b369ea98c188caf36245fd4fae6,2023-09-16 15:50:14,Jonas Jenwald,"Remove the closure from the `LabCS` class

Now that modern JavaScript is fully supported also in the worker-thread we no longer need to keep old closures, which slightly reduces the size of the code.",False
52fa66a98be7e56561be57396ce3cb9caea85800,2023-09-16 15:50:12,Jonas Jenwald,"Remove the closure from the `CalRGBCS` class

Now that modern JavaScript is fully supported also in the worker-thread we no longer need to keep old closures, which slightly reduces the size of the code.",False
4d615f087f2f158056297a68dc45f35d1fe339c6,2023-09-15 19:23:16,Jonas Jenwald,"Remove the closure from the `CalGrayCS` class

Now that modern JavaScript is fully supported also in the worker-thread we no longer need to keep old closures, which slightly reduces the size of the code.",False
d2c8997380460bf2f59e8c46d315840a08b49568,2023-09-15 19:23:05,Jonas Jenwald,"Remove the closure from the `DeviceCmykCS` class

Now that modern JavaScript is fully supported also in the worker-thread we no longer need to keep old closures, which slightly reduces the size of the code.",False
586d3add465fa9179c85a8fd5f10b874707a22eb,2023-09-15 17:36:51,Jonas Jenwald,"Merge pull request #16951 from Snuffleupagus/tweak-pattern-getB

Make it possible to clear the cache, used by the `getB` function in `src/core/pattern.js`",True
628ca737ddea46dbbe1536e2de1ffa6ba31f795b,2023-09-15 15:53:06,Jonas Jenwald,"Make it possible to clear the cache, used by the `getB` function in `src/core/pattern.js`

While this cache will not contain a huge amount of data in practice, it's nonetheless a *global* cache that currently will never be cleared.

This patch also removes the existing closure, since it shouldn't really be necessary nowadays given that the code is a JavaScript module which means that only explicitly listed properties will be exported.",False
4c0fbe51e57f0bb0aa61a1efbed0828c23aa803e,2023-09-15 15:22:27,calixteman,"Merge pull request #16950 from calixteman/resizers_hcm

[Editor] Change the colors of the outline and the resizers for selected editors in HCM",True
93ce7c5a895b1ab499087d129fd228f07fc6a4e3,2023-09-15 15:16:00,Jonas Jenwald,"Change the `getB` function, in `src/core/pattern.js`, to use the exponentiation operator",False
38f60a7effcd23b6bc7c6d7c8ab2025300b9c7b2,2023-09-15 13:59:49,Calixte Denizet,[Editor] Change the colors of the outline and the resizers for selected editors in HCM,False
8d695c982f5536ea66babb4c7f0f8dd2aaa17739,2023-09-14 14:12:18,calixteman,"Merge pull request #16943 from calixteman/new_resizers

[Editor] Change the style of the bounding box and the resizers (bug 1852897)",True
01f9f385d7e0e71aa065097154274bcea33608b6,2023-09-14 13:15:41,Calixte Denizet,[Editor] Change the style of the bounding box and the resizers (bug 1852897),False
920e51a1e6050ed9b8ddad51a3fb0a39dc4fa5ee,2023-09-13 16:04:21,calixteman,"Merge pull request #16944 from calixteman/move_dom_after_position

[Editor] Move an editor in the DOM just after having moved it on the screen",True
720963bbe6d48e2c28ec326377d0459a8cab96a2,2023-09-13 14:21:25,Calixte Denizet,"[Editor] Move an editor in the DOM just after having moved it on the screen

It avoids to have to remember to call moveInDOM after fixAndSetPosition is called.",False
b1578225fc83875094fd89765f3e75a3503d5360,2023-09-12 21:04:34,Jonas Jenwald,"Merge pull request #16941 from Snuffleupagus/SaveDocument-await-requestLoadedStream

Ensure that the entire PDF document is loaded *before* we begin saving it",True
50937a3539720e92b0090ac0d6c191fd48eb1612,2023-09-12 16:56:57,Jonas Jenwald,"Ensure that the entire PDF document is loaded *before* we begin saving it

When I started looking at PR 16938 it occurred to me that some of the new structTree-methods are synchronously accessing certain dictionary-data (not used during ""normal"" structTree-parsing), which may not be generally safe since everything in a dictionary could be a reference (and the relevant data may not have been loaded yet).

Rather than suggesting that we make all those new methods even more asynchronous, to me the overall simplest and safest solution is to ensure that the *entire* PDF document has been loaded *before* we begin saving it. In practice this shouldn't really affect ""performance"" of saving noticeably, since it's always depended on the entire PDF document being downloaded.

Finally note that with the exception of the PDF document possibly not having been fully downloaded when saving is triggered, all other ""global"" document properties are pretty much guaranteed to already be available at this point.",False
953f271425281e00b2ca3e4b2e0901f14bc78fea,2023-09-12 16:52:47,calixteman,"Merge pull request #16940 from calixteman/get_back_focus_when_required

[Editor] Only get back the focus when it has been lost after an editor has been moved in the DOM",True
56466048832b935e80c878c262e644861cfefe47,2023-09-12 15:47:24,Calixte Denizet,[Editor] Only get back the focus when it has been lost after an editor has been moved in the DOM,False
221ee6ca373f452bbdaa7b7a3f0264408d751243,2023-09-10 21:42:56,Tim van der Meij,"Merge pull request #16932 from timvandermeij/unit-test-enable

Enable unit test ""creates pdf doc from non-existent URL""",True
66507ccae8aa55792d306ca350443d6b95d67b42,2023-09-10 19:17:04,Tim van der Meij,"Enable unit test ""creates pdf doc from non-existent URL""

The unit test is re-enabled because it no longer seems to fail after 10
runs on Linux where this used to fail often. Code inspection also shows
that the code is correct and should raise the previous exception
(anymore). Finally, a lot has changed since this test was disabled such
as new Jasmine versions, new Linux bot OS version and new browser
versions.",False
5f936380451c8d0076901d123a9cf200d62c9768,2023-09-10 15:00:56,Tim van der Meij,"Merge pull request #16925 from timvandermeij/updates

Update packages and translations",True
981ef9e31ed823cae29d534e64e8dc449dc9c827,2023-09-09 21:23:43,Tim van der Meij,Update translations,False
f42d70a24e2138f00bd696808aa30990125152ef,2023-09-09 21:23:43,Tim van der Meij,Update packages,False
18a661b6a09fc3b7f4bfaaf4205d760aed61ab3b,2023-09-09 13:25:49,Jonas Jenwald,"Merge pull request #16920 from Snuffleupagus/annotationGlobals

Slightly reduce asynchronicity when parsing Annotations",True
cf7efdb0404155606b32a421e4ba64544dbb8968,2023-09-09 00:55:44,calixteman,"Merge pull request #16921 from calixteman/simplify_write

Simplify writeObject function",True
52cc1220e46ead4d74ba127ae263a4a191f7598a,2023-09-08 23:29:59,Calixte Denizet,"Simplify writeObject function

It'll avoid to have the duplication of the code to get the encrypt transform,
and last but not least, it'll avoid to forget about encryption.",False
b903b3030a5856fbfe996ef89f1da1dc02fa1f9d,2023-09-08 19:54:47,calixteman,"Merge pull request #16916 from calixteman/parent_in_struct_tree

[Editor] Add the parent tag id (if any) to the serialized editors (bug 1845087)",True
b5b061cdb6a2798d433207189d4d3b9d69508045,2023-09-08 16:57:31,Jonas Jenwald,"Slightly re-factor the parameter handling in `Catalog.parseDestDictionary`

While it makes sense to check that the `destDict` parameter is indeed a Dictionary, since that data comes from the PDF document itself, the `resultObj` parameter is an internal PDF.js implementation detail that should always be correct (or tests will fail).",False
df9cce39c09cde3a4fa5f523c1115e83280a163f,2023-09-08 16:57:27,Jonas Jenwald,"Slightly reduce asynchronicity when parsing Annotations

Over time the amount of ""document level"" data potentially needed during parsing of Annotations have increased a fair bit, which means that we currently need to ensure that a bunch of data is available for each individual Annotation.
Given that this data is ""constant"" for a PDF document we can instead create (and cache) it lazily, only when needed, *before* starting to parse the Annotations on a page. This way the parsing of individual Annotations should become slightly less asynchronous, which really cannot hurt.

An additional benefit of these changes is that we can reduce the number of parameters that need to be explicitly passed around in the annotation-code, which helps overall readability in my opinion.

One potential drawback of these changes is that the `AnnotationFactory.create` method no longer handles ""everything"" on its own, however given how few call-sites there are I don't think that's too much of a problem.",False
c6f7e722c95615bd0871a47cb6dd9e844f183421,2023-09-07 21:52:33,Calixte Denizet,"[Editor] Add the parent tag id (if any) to the serialized editors (bug 1845087)

The tag id will be useful in order to update the StructTree when saving
the pdf.",False
3e32d87be72284643ae3727e5eccaeb6e10bd129,2023-09-07 20:16:33,calixteman,"Merge pull request #16915 from calixteman/issue16914

Construct the correct field name and strip out classes when searching",True
a8a50c567a4784440f23a7bfce373a6f0a4824b1,2023-09-07 19:26:47,Calixte Denizet,"Construct the correct field name and strip out classes when searching

The classes were stripped out during when creating the field name but
it led to a wrong name.
Since class components in a path are irrelevant, they're just ignored
when searching for a node in the datasets.",False
5ffa23c7f15c8848dfea663ea7ddbac2b3b8f84f,2023-09-07 18:29:47,calixteman,"Merge pull request #16911 from calixteman/issue16872

[Editor] Avoid to use parent of editors in destroyed pages",True
8ab4e2e6e7aa39288d502b16016de2208be10d67,2023-09-07 16:00:29,Calixte Denizet,[Editor] Avoid to use parent of editors in destroyed pages,False
cf5a1d60a61e13108afffbb1046521b5bb46f918,2023-09-05 21:16:48,Jonas Jenwald,"Merge pull request #16897 from mozilla/dependabot/github_actions/actions/checkout-4

Bump actions/checkout from 3 to 4",True
03eabae61342ae7f229b452b0693b9f7da549c94,2023-09-05 18:49:36,calixteman,"Merge pull request #16905 from calixteman/bug1851517

Only call the focus/blur callbacks when it's necessary (bug 1851517)",True
d03494eeff496547bfd9001c3ccacd7a89ecae6f,2023-09-05 17:48:51,Calixte Denizet,"Only call the focus/blur callbacks when it's necessary (bug 1851517)

Focus callback must be called only when the element has been blurred.
For example, blur callback (which implies some potential validation) is not called
because the newly focused element is an other tab, an alert dialog, ... so consequently
the focus callback mustn't be called when the element gets its focus back.",False
92792a8215952f30363a32dbb9aaa0c0a80f1f76,2023-09-05 16:15:04,Jonas Jenwald,"Merge pull request #16902 from Snuffleupagus/FileAttachment-keyboard-download

Support downloading FileAttachment annotations with the keyboard",True
e7800c22ddff9be4462900b1f6581676fc1ecb3f,2023-09-05 15:01:30,Jonas Jenwald,"Support downloading FileAttachment annotations with the keyboard

While reviewing PR 16898 it occurred to me that it's currently impossible to trigger downloading of FileAttachment annotations using the keyboard.
Hence this patch adds `Ctrl + Enter` as the keyboard shortcut to download those, thus supplementing the existing double-clicking when using a mouse.",False
f2a4f2adaffcd35033641e61624fe37bb4f07ed1,2023-09-05 14:58:23,calixteman,"Merge pull request #16899 from calixteman/bug1851498

Unconditionally render non-form annotations in the annotation layer (bug 1851498)",True
a00b542f2f58cde6117fa0985a5a2416051b0225,2023-09-05 14:11:01,Calixte Denizet,"Unconditionally render non-form annotations in the annotation layer (bug 1851498)

The goal is to always have something which is focusable to let the user select
it with the keyboard.
It fixes the mentioned bug because, the annotation layer will now have a container
to attach the canvas for annotations having their own canvas.",False
08f9e48280dafb7d3a672e812afd760d59613430,2023-09-04 21:38:58,calixteman,"Merge pull request #16898 from calixteman/make_annotation_focusable

Make annotations focusable (bug 1851489)",True
7f44f353b3eccd135e7b090260b8ecd6374bed5b,2023-09-04 20:42:23,Calixte Denizet,"Make annotations focusable (bug 1851489)

When the annotation has a popup then the popup can be toggled in using
the Enter key and hidden in using the Escape key.",False
48a2c29f98d322a23596bc389b87c805f82c72f5,2023-09-04 18:21:59,dependabot[bot],"Bump actions/checkout from 3 to 4

Bumps [actions/checkout](https://github.com/actions/checkout) from 3 to 4.
- [Release notes](https://github.com/actions/checkout/releases)
- [Changelog](https://github.com/actions/checkout/blob/main/CHANGELOG.md)
- [Commits](https://github.com/actions/checkout/compare/v3...v4)

---
updated-dependencies:
- dependency-name: actions/checkout
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>",False
b18a1669ac1590838b88e78de4f7e0263a0e159e,2023-09-04 13:53:12,Jonas Jenwald,"Merge pull request #16896 from Rob--W/grab-to-pan-css-fix

Drop redundant styles from .grab-to-pan-grab:active",True
28bda9f68b57925ddd281c3c3c3f64aef6f1495d,2023-09-03 23:15:18,Rob Wu,"Drop redundant styles from .grab-to-pan-grab:active

`.grab-to-pan-grab:active` is `#viewerContainer` when the mouse is
pressed down.  It is supposed to have a `cursor: grabbing` appearance
immediately on mousedown,

`.grab-to-pan-grabbing` is the overlay that is supposed to cover
everything, and also has the `cursor: grabbing` appearance. The ""cover
everything"" result is achieved through `position:fixed`, `inset:0`, etc.

The block with these CSS properties for ""cover everything"" is currently
shared by `.grab-to-pan-grab:active` and `.grab-to-pan-grabbing`, but
only ""cursor"" need to be shared. The original JS and CSS code at
https://github.com/Rob--W/grab-to-pan.js shows that these were supposed
to be associated with the overlay only.

The PR that added this to PDF.js also shows that the ""cover everything""
CSS properties were supposed to be limited to the overlay only:
https://github.com/mozilla/pdf.js/pull/4209#discussion-diff-9285917

But the final version of the PR mistakenly merged them together.
This patch rectifies that mistake.",False
1e7c907fbfa92b98ec8aa2546368095b97b8f56b,2023-09-03 16:35:31,Tim van der Meij,"Merge pull request #16881 from Snuffleupagus/InternalRenderTask-tweaks

A couple of small `InternalRenderTask` changes",True
11c5213185d9656fcd4ed559a7a41ba044371694,2023-09-03 16:33:28,Tim van der Meij,"Merge pull request #16895 from Snuffleupagus/update-packages

Update packages and translations",True
07cca3ddd9bb1208a39d2d28ade01c07bff59d8b,2023-09-03 13:31:37,Jonas Jenwald,Update l10n files,False
92831455bfd1fca461ff6b760fb964bf17a052bb,2023-09-03 13:29:08,Jonas Jenwald,Update npm packages,False
87ea2ed4e2b63b2a610ee25dc0222551d7df0154,2023-09-01 15:30:27,Jonas Jenwald,"Merge pull request #16890 from stof/fix_type_generator

[Type-definitions] Fix type generator to support import maps",True
46f2c5893db2944f868789383170ac5c4534ccb6,2023-09-01 13:18:39,Christophe Coevoet,"Revert ""Temporarily stop running `gulp typestest` in GitHub Actions""

This reverts commit d9350c38997b31ee9f0058f438b332997eb53e07.",False
d0f14b1ce301a269a56358579263c59e8ffa5cdd,2023-09-01 13:18:39,Christophe Coevoet,"Add support for the import map in the type generator

The typescript compiler is now configured to know about the import map
to be able to resolve those imports and find the associated types.
As tsc outputs declaration files using the original module identifiers
and not the resolved ones, tsc-alias is used to post-process the
declaration files by resolving those paths.",False
bbf11a5783801d5a711235f1357a1d2f68d83be4,2023-09-01 13:18:34,Christophe Coevoet,"Migrate the typescript options to a config file

Some configurations settings like `paths` cannot be provided through CLI
arguments but only in a configuration file. And when using a
configuration file, only a few options (like `--outDir` can still be
provided) through the CLI.",False
b5c88491114848619d47ebbb53ed0bc4ebace183,2023-09-01 01:22:44,Jonas Jenwald,"Merge pull request #16892 from Snuffleupagus/addLinkAttributes-rm-removeNullCharacters

Stop using `removeNullCharacters` in the `addLinkAttributes` helper function",True
c5ee72bb950e97bcb7362399f942baab94c2b89b,2023-08-31 23:40:50,Jonas Jenwald,"Stop using `removeNullCharacters` in the `addLinkAttributes` helper function

Using `removeNullCharacters` on the URL should be completely redundant, given the kind of data that we're passing to the `addLinkAttributes` helper function. Note that whenever we're handling a URL, originating in the worker-thread, in the viewer that helper function is always being used.

Furthermore, on the worker-thread all URLs are parsed with the `createValidAbsoluteUrl` helper function, which uses `new URL()` to ensure that a valid URL is obtained. Note that the `URL` constructor will either throw, or in some cases just ignore them, when encountering `\u0000`-characters during parsing.

Hence it should be *impossible* for a valid URL to contain `\u0000`-characters and we can thus simplify the viewer-code a tiny bit. The use of `removeNullCharacters` is most likely a left-over from back when `new URL()` wasn't generally available in browsers.",False
9190445a21e1b75f589b4e0459475f3273c5c4c1,2023-08-31 21:39:04,Jonas Jenwald,"Merge pull request #16891 from Snuffleupagus/structElement-removeNullCharacters

Ignore null-chars when using structTree-data in the viewer",True
b159cc9e4be1c34db199c5a4fade2496b51e344e,2023-08-31 20:06:09,Jonas Jenwald,"Merge pull request #16888 from stof/fix_jsdoc_types

Fix JSDoc types",True
284f32f50bd515016bd08c1dd5343a922a57d66a,2023-08-31 19:59:10,Jonas Jenwald,"Ignore null-chars when using structTree-data in the viewer

Testing the `tagged_stamp.pdf` document locally in the viewer, I noticed that e.g. the /Alt entry for the StampAnnotation contains ""Secondary text for stamp\u0000"".
Elsewhere in the viewer we're skipping null-chars and it's easy enough to do that in the `StructTreeLayerBuilder` class as well. (Note that we generally let the API itself return the data as-is.)",False
14b2a31e78f64f751da9dfcd12a1cfe0fcfeae6c,2023-08-31 19:36:11,calixteman,"Merge pull request #16889 from calixteman/fix_aria_controls_id

Fix the id used in aria-controls used to make a relationship between the popup and its parent",True
e7229854bdfc872c660af24916748f63ff046415,2023-08-31 19:18:32,Calixte Denizet,Fix the id used in aria-controls used to make a relationship between the popup and its parent,False
20b0be973c23e576b884b928c6a0b5934aed9def,2023-08-31 17:35:55,calixteman,"Merge pull request #16886 from calixteman/struct_tree_annotation

Add tagged annotations in the structure tree (bug 1850797)",True
f84f2646f4928b3d45acd73759b3dc8661e140dd,2023-08-31 16:39:52,Christophe Coevoet,"Fix JSDoc types

This fixes invalid type references (either due to invalid paths for the
import or missing imports) in the JS doc, as well as some missing or
invalid parameter names for @param annotations.",False
d185db2b7046d013ceaa16b3553dfb119bbae082,2023-08-31 16:05:32,Calixte Denizet,Add tagged annotations in the structure tree (bug 1850797),False
1b8441dacc055e0c4469e49f7a1c71f4b5d76559,2023-08-28 19:44:22,Jonas Jenwald,"Don't pass in unused `pageColors` to `CanvasGraphics.endDrawing` (PR 16380 follow-up)

This became unnecessary in PR 16380, however we forgot to update one of the API call-sites.",False
9b4efe2c2fa6c69965e9482790230a3d798522db,2023-08-28 19:40:33,Jonas Jenwald,"Use `WeakSet.prototype.delete()` unconditionally in the `InternalRenderTask` class

It's not necessary to check if an object exists before trying remove it from a `WeakSet`; see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/delete#return_value",False
92f7653cfbc2b8e824991f496564cf17fc3ee09b,2023-08-27 21:39:29,Tim van der Meij,"Merge pull request #16876 from timvandermeij/bump

Bump versions in `pdfjs.config`",True
fd32a53a862c61029ae6f96a64428e9a7aa3dd90,2023-08-27 21:34:05,Tim van der Meij,Bump versions in `pdfjs.config`,False
e142baecb15dd84d6058e217f227a4a188209fe4,2023-08-27 14:46:56,Tim van der Meij,"Merge pull request #16875 from Snuffleupagus/more-optional-chaining-4

Introduce more optional chaining in the code-base",True
ec3d2be761fb3c73ef28eddfed87ffd69df8c2d7,2023-08-26 14:22:23,Jonas Jenwald,"Introduce more optional chaining in the code-base

Also, use logical OR assignment a bit more.",False
598421b11f067dacfb2cf81897c19b10db3c9988,2023-08-24 19:28:32,Jonas Jenwald,"Merge pull request #16856 from Snuffleupagus/limit-lineEndings

Exclude `lineEndings`, in Annotation-data, in MOZCENTRAL builds (PR 14899 follow-up)",True
62a294bb52bf55811fcfb7fbfb972255cad98cf6,2023-08-24 19:26:11,calixteman,"Merge pull request #16864 from calixteman/issue16863

Don't reset all fields when the resetForm argument is an array",True
24b480fabe152b0d38d448eb6b963eb5de933c47,2023-08-24 18:40:27,Calixte Denizet,"Don't reset all fields when the resetForm argument is an array

correctly set the readonly property in the annotation layer and set the default checkbox value to Off when none is provided.",False
08f26be7b41a0d98e7e841fcc2750920d3e7680a,2023-08-23 22:53:59,calixteman,"Merge pull request #16862 from calixteman/revert_1838855

Revert fix for bug 1838855 (bug 1849876)",True
ee3ac35e0553f5614c58a76952da451a35529466,2023-08-23 22:04:41,Calixte Denizet,"Revert fix for bug 1838855 (bug 1849876)

The issue described in the mentioned bug is reall because
Acrobat is rendering the XFA instead of the Acroform.
The original patch just tried to workaround the issue but it
induces some regressions.",False
847da21c95559ba9f4870b9aa0b354feba1a6ecf,2023-08-23 20:47:52,Jonas Jenwald,"Merge pull request #16858 from Snuffleupagus/stamp-aria-controls

Add the ""aria-controls"" attribute to the StampEditor toolbar-button",True
6da4fe5778b76f867c86bd3008cc78534477b4b2,2023-08-23 20:46:50,Jonas Jenwald,"Merge pull request #16860 from Snuffleupagus/editorconfig-mjs

Add the `.mjs` file-extension to the EditorConfig",True
89779b3f6c51b8867f39a6a8b9ed6b8accbcf179,2023-08-23 14:52:25,Jonas Jenwald,"Add the `.mjs` file-extension to the EditorConfig

Given that this file-extension is used for JavaScript modules, those files should obviously be formatted just like any ""normal"" JS file.",False
de52c98ddf32b59535b742a27906ffdeca0a718b,2023-08-22 13:35:21,Jonas Jenwald,"Add the ""aria-controls"" attribute to the StampEditor toolbar-button

Given that the other Editor toolbar-buttons use this attribute, it seems that the StampEditor should as well.",False
cd181eb74632789a6c64b10d56b01ec5eddbaa04,2023-08-21 13:45:04,Jonas Jenwald,"Exclude `lineEndings`, in Annotation-data, in MOZCENTRAL builds (PR 14899 follow-up)

This was added in PR 14899, over a year ago, however it's still completely unused in the PDF.js library/viewer. In hindsight I think that it was a mistake to add unused functionality, and the issue should probably have been WONTFIXed instead, however we probably can't just remove it now.
Thanks to the pre-processor, we can at least exclude this code in the *built-in* Firefox PDF Viewer.",False
a7d829155b54ad82f6575d970689a076168f4962,2023-08-20 16:15:41,Tim van der Meij,"Merge pull request #16852 from Snuffleupagus/less-workerPort

Initialize the `PDFWorker.#workerPorts` WeakMap lazily",True
988ce2820ba2085ed8d21413abc100970dafefe1,2023-08-19 19:48:38,Jonas Jenwald,"Initialize the `PDFWorker.#workerPorts` WeakMap lazily

By default this WeakMap isn't needed, and it's simple enough to initialize it lazily instead.",False
2993c7725b48baed5010d8531500bc33b17b2881,2023-08-19 19:22:00,Jonas Jenwald,"[Firefox] Exclude more `workerPort` related code in MOZCENTRAL builds

Given that this code is (and has always been) unused in the Firefox PDF Viewer, we don't need to include it in that build-target.",False
5828ac0ee3302302ea8bfd6abb3d3fc3cad423c1,2023-08-19 17:08:16,Tim van der Meij,"Merge pull request #16834 from Snuffleupagus/globalWorkerPort-parallel-test

Add a unit-test for the ""correct"" way of using the global `workerPort` in parallel (PR 16830 follow-up)",True
05fa7dcc7ebd9b4fccaba296e9c797185b40d1b4,2023-08-19 17:03:48,Tim van der Meij,"Merge pull request #16850 from Snuffleupagus/update-packages

Update packages and translations",True
d762986bb09b172c907ac17c93a49a6f5cae1839,2023-08-19 13:00:41,Jonas Jenwald,Update l10n files,False
4d19db0b1939230b92826a22945a475f694ff52a,2023-08-19 13:00:34,Jonas Jenwald,"Re-format the code to account for `prettier` and `globals` updates

The `prettier` update slightly changed the formatting of some await-expressions; please see https://github.com/prettier/prettier/blob/main/CHANGELOG.md#302

The `globals` update removed the need for some eslint-disable statements; please see https://github.com/sindresorhus/globals/releases/tag/v13.21.0",False
c5ebfa51a798df41a7fe801996c7e0429ce5766c,2023-08-19 12:38:11,Jonas Jenwald,Update npm packages,False
60581c427e3c57df2b5fae056246d33351f5adf5,2023-08-19 00:10:09,Jonas Jenwald,"Merge pull request #16844 from Snuffleupagus/StampEditor-isEmpty

Update the `StampEditor.isEmpty` method to handle File (PR 16828 follow-up)",True
520397e1e8d8ed38b5b3e05b9d794ce35377b1f6,2023-08-19 00:08:55,Jonas Jenwald,"Merge pull request #16840 from Snuffleupagus/Stamp-#getBitmapFetched

Add a helper method to reduce duplication in `StampEditor.#getBitmap`",True
d513899fc78ac512b96d11d86f4b83cbc13a0839,2023-08-17 12:55:58,Jonas Jenwald,"Update the `StampEditor.isEmpty` method to handle File (PR 16828 follow-up)

After the changes in PR 16828 the `StampEditor` can now be initialized with a File, in addition to a URL, hence it seems that the `isEmpty` method ought to take that property into account as well.

Looking at this I also noticed that the assignment in the constructor may cause the `this.#bitmapUrl`/`this.#bitmapFile` fields be `undefined` which ""breaks"" the comparisons in the `isEmpty` method.
We could obviously fix those specific cases, but it seemed overall safer (with future changes) to just update the `isEmpty` method to be less sensitive to exactly how these fields are initialized and reset.",False
df9cb772d9ad04b73acd8e593ee24766b2c5b4bb,2023-08-17 12:06:07,Jonas Jenwald,"Add a helper method to reduce duplication in `StampEditor.#getBitmap`

Currently we're repeating virtually the same code *four times* when fetching the bitmap-data, which seems unnecessary.

Also, ensure that the `#bitmapPromise` is always `null`ed by moving that into the `StampEditor.#getBitmapDone` method.",False
c72cb5436def2d6f2e703447c8b901e92b4dd403,2023-08-15 20:14:18,Jonas Jenwald,"Merge pull request #16835 from Snuffleupagus/improve-Annotation-compression-test

Improve the ""write a new annotation, save the pdf and check that the text content is correct"" unit-test (PR 16559 follow-up)",True
29b2050ac20442e69390a758bd294486537bce43,2023-08-15 18:42:17,Jonas Jenwald,"Improve the ""write a new annotation, save the pdf and check that the text content is correct"" unit-test (PR 16559 follow-up)

Currently this unit-test will pass just fine if compression is disabled, e.g. by commenting out the relevant code in the `src/core/writer.js` file.
While we don't have a simple way of *directly* checking that the Annotation text-content is compressed, we can however use the resulting file-size as a fairly good proxy. (Note that if compression is disabled the file-size is more than doubled.)",False
2422492ee35cb1e40a979dea473000436be955b5,2023-08-15 16:15:54,Jonas Jenwald,"Add a unit-test for the ""correct"" way of using the global `workerPort` in parallel (PR 16830 follow-up)

Please note that for performance reasons it's not really advised to use the same worker-thread *in parallel* for parsing multiple PDF documents, since they will then unnecessarily compete for resources.
However, given that it's still possible to do that e.g. when using the global `workerPort` it probably won't hurt to add a unit-test for this particular situation.",False
8cf2f6d3527b70353599a77f26d2bce1362d47a1,2023-08-13 15:48:28,Tim van der Meij,"Merge pull request #16830 from Snuffleupagus/issue-16777-2

Avoid using the global `workerPort` when destruction has started, but not yet finished (issue 16777)",True
43ab1d2da7936399bf34842c8219fcfd6c94fbb9,2023-08-13 15:39:43,Tim van der Meij,"Merge pull request #16831 from Snuffleupagus/rm-no-babel-preset

Remove the ""no-babel-preset"" comment used with the LIB build-target (PR 16829 follow-up)",True
6669a992992c5636c866c6b31acafcae0a47465c,2023-08-13 12:25:58,Jonas Jenwald,"Remove the ""no-babel-preset"" comment used with the LIB build-target (PR 16829 follow-up)

Similar to the changes in PR 16829, this no longer seems necessary now.",False
66437917dbe6501ee67df5a4201ae94b0b635fa2,2023-08-13 00:51:50,Jonas Jenwald,"Avoid using the global `workerPort` when destruction has started, but not yet finished (issue 16777)

Given that the `PDFDocumentLoadingTask.destroy()`-method is documented as being asynchronous, you thus need to await its completion before attempting to load a new PDF document when using the global `workerPort`.
If you don't await destruction as intended then a new `getDocument`-call can remain pending indefinitely, without any kind of indication of the problem, as shown in the issue.

In order to improve the current situation, without unnecessarily complicating the API-implementation, we'll now throw during the `getDocument`-call if the global `workerPort` is in the process of being destroyed.
This part of the code-base has apparently never been covered by any tests, hence the patch adds unit-tests for both the *correct* usage (awaiting destruction) as well as the specific case outlined in the issue.",False
690b8738973565f4c4ed11952dee36f1c3ff0d4f,2023-08-12 17:05:31,Tim van der Meij,"Merge pull request #16829 from Snuffleupagus/gulpfile-rm-src-babel-excludes

Remove the `src/core/` Babel excludes, since they no longer seem necessary",True
1810191be200d719c7d521830990cbae4dcf1001,2023-08-12 13:39:03,Jonas Jenwald,"Remove the `src/core/` Babel excludes, since they no longer seem necessary

 - The `src/core/unicode.js` exclude ought to have become unnecessary already with PR 16200, which significantly shortened and simplified that file.
 - The `src/core/glyphlist.js` exclude no longer seems necessary in practice either, possibly because of improvements in Babel.",False
890550653a8a68fa410d94df21cc025d58adbb2d,2023-08-12 01:58:33,calixteman,"Merge pull request #16828 from calixteman/editor_paste_image

[Editor] Add the possibility to paste an image from the clipboard (bug 1848317)",True
2dd6f07b5727c6c733f0c36446fbda574d1d9c2b,2023-08-11 23:19:18,Calixte Denizet,[Editor] Add the possibility to paste an image from the clipboard (bug 1848317),False
4b2eebf32e5edb1d142d53791420143be571d470,2023-08-11 20:47:45,calixteman,"Merge pull request #16826 from calixteman/editor_remove_empty_stamp

[Editor] Remove the stamp editor displayed when the image was loading (bug 1848313)",True
d527fb3ff2a76fefe3a26580967f5fc72498efac,2023-08-11 20:16:23,Calixte Denizet,"[Editor] Remove the stamp editor displayed when the image was loading (bug 1848313)

Make the annotation editor layer unclickable while the image is loading and
change the cursor to 'wait'.",False
4eca3ca199779f9388b9c54231121fb7106d0257,2023-08-11 19:02:47,calixteman,"Merge pull request #16819 from calixteman/editor_stamp_button

[Editor] Add a button to explicitly add an image (bug 1848108)",True
659fbc50201aa18d8f503e26a90786bff1881ecf,2023-08-11 18:35:46,Calixte Denizet,"[Editor] Add a button to explicitly add an image (bug 1848108)

The main stamp button will be used to just enter in a add/edit image mode:
 - the user can add a new image in using the new button.
 - the user can edit an image in resizing, moving it.
In image mode, when the user clicks outside on the page but not on an editor,
then all the selected editors will be unselected.",False
d57e3ebbe42e28c9b1f460c31e4d8081d04a4484,2023-08-11 12:19:45,Jonas Jenwald,"Merge pull request #16810 from Snuffleupagus/_initializeAutoPrint-refactor

Re-factor `PDFViewerApplication._initializeAutoPrint` slightly (PR 16779 follow-up)",True
caebe335b261961efc8ba1f1d521532a88054d0d,2023-08-11 01:06:08,Jonas Jenwald,"Re-factor `PDFViewerApplication._initializeAutoPrint` slightly (PR 16779 follow-up)

After the `src/core/`-changes in PR 16779 the `PDFDocumentProxy.getJSActions` method should no longer be able to return *empty* entries, which means that we can simplify the ""JavaScript support is not enabled""-warning in the viewer.
Furthermore, improve the auto-printing hack used when scripting is disabled.",False
1d523d3ec1457206a11b425a062cd108d59e798a,2023-08-10 22:07:59,calixteman,"Merge pull request #16825 from calixteman/editor_avoid_right_click

[Editor] Avoid showing the context menu or resizing when a resizer is right clicked",True
0dd70c4e662f6af7a53dbe3d28f3604801f87b43,2023-08-10 22:07:42,calixteman,"Merge pull request #16824 from calixteman/editor_dont_unselect_on_render

[Editor] Avoid to unselect when a new page is rendered",True
96a1f323c4048d06e9c76bbbeb77d52a753638af,2023-08-10 21:54:57,Calixte Denizet,[Editor] Avoid showing the context menu or resizing when a resizer is right clicked,False
f1bd98c6d84af9106077b421ebdc758fc2648ce7,2023-08-10 21:36:54,Jonas Jenwald,"Merge pull request #16823 from Snuffleupagus/_getPageIndex-fallback

Fallback to check all pages when getting the pageIndex of FieldObjects",True
71f5050ed299b56613f75b76c477198261375990,2023-08-10 21:32:27,Calixte Denizet,[Editor] Avoid to unselect when a new page is rendered,False
389a26c115de8e6de8df800ddaddaac9d59e3355,2023-08-10 20:40:04,Jonas Jenwald,"Fallback to check all pages when getting the pageIndex of FieldObjects

Given that the FieldObjects are parsed in parallel, in combination with the existing caching in the `getPage`-method and `annotations`-getter, adding additional caches for this fallback code-path doesn't seem entirely necessary.",False
4be6c90796b9b9aaa7796922669702343e4e0a79,2023-08-10 19:48:17,calixteman,"Merge pull request #16822 from calixteman/issue16821

[Editor] Don't forget to encrypt image streams (see issue #16821)",True
ea259710faea75e9c72bbdb40b41e88669cc0602,2023-08-10 18:53:34,calixteman,"Merge pull request #16811 from calixteman/editor_drag_selected

[Editor] Add the possibility to move all the selected editors with the mouse (bug 1847894)",True
7a5b3423d63d5106aa7fc3602d5cf189ddf69eec,2023-08-10 18:49:45,Calixte Denizet,"[Editor] Don't forget to encrypt image streams (see issue #16821)

and encrypt a compressed stream after having been compressed.",False
402e3fed95888c1e1c5ec6cb6bf879421642a5fe,2023-08-10 18:15:36,Calixte Denizet,[Editor] Add the possibility to move all the selected editors with the mouse (bug 1847894),False
d4ba312f0041f13a070e03c5ec8faf2b759e4b46,2023-08-10 17:46:46,calixteman,"Merge pull request #16820 from calixteman/editor_stamp_integer_dims

[Editor] Avoid to have slightly truncated images because of non-integer canvas dimensions",True
b6b51f57ed7f9f9aad23003e3c36583c325a5cf9,2023-08-10 17:41:42,Calixte Denizet,[Editor] Avoid to have slightly truncated images because of non-integer canvas dimensions,False
4962d005f844f8493689d69923a680b32af95d64,2023-08-10 17:03:20,Jonas Jenwald,"Merge pull request #16815 from Snuffleupagus/more-optional-chaining-3

Introduce even more optional chaining in the code-base",True
f66072b658f016b91a819966962c68ebcf09fe77,2023-08-10 16:49:20,calixteman,"Merge pull request #16818 from calixteman/no_cancelled_stamp_in_unod

[Editor] Avoid to add a cancelled added image in the undo/redo stack",True
b6432ef9defaa816bf51c7e9f184f7ae6b6b6033,2023-08-10 15:48:15,Calixte Denizet,"[Editor] Avoid to add a cancelled added image in the undo/redo stack

We're adding the action in the undo/redo stack whatever the status of the
operation was. This patch aims to add the action only when the image has been
successfully added.",False
ec7746350d4bea66c342df2af41a213e4bd0287c,2023-08-09 20:34:54,Jonas Jenwald,"Introduce even more optional chaining in the code-base

This replaces a few more small/simple if-statements with optional chaining.",False
f89020e9b1d155e7dac7a641945cbcc9f1363d08,2023-08-09 17:36:21,calixteman,"Merge pull request #16813 from calixteman/editor_move_params

[Editor] Move the parameter elements for FreeText and Ink annotations at the right place (follow-up of #16802)",True
14470495131c531ab131c7ac53b6c9e57b835608,2023-08-09 17:36:04,calixteman,"Merge pull request #16812 from calixteman/editor_dont_lose_selection_on_bluring

[Editor] Avoid to unselect some editors when the main window is focused",True
149f18b76657aebbc9560a644983421aa4ba86cc,2023-08-09 17:05:45,Calixte Denizet,[Editor] Move the parameter elements for FreeText and Ink annotations at the right place (follow-up of #16802),False
9ae7ad0fa6ffa44c9652297525ace053bb87f870,2023-08-09 15:39:15,Calixte Denizet,"[Editor] Avoid to unselect some editors when the main window is focused

When several editors are selected and the window loses and then gets back its focus,
the previously focused editor is triggering its focus callback making it the only
selected one.
This patch aims to avoid triggering the focus callback called when the main window
gets its focus back.",False
77392dfce42eb902cedbc23140b7d0f5a2dcfcac,2023-08-09 13:40:28,calixteman,"Merge pull request #16809 from calixteman/editor_focus_after_moving_in_dom

[Editor] Move an the editor div in the DOM once a translation with the keyboard is done",True
7d8b53bf7a456bed9a041bc10794a6383edc96c6,2023-08-09 00:32:05,Calixte Denizet,"[Editor] Move an the editor div in the DOM once a translation with the keyboard is done

When moving an element in the DOM, the focus is potentially lost, so we need to make sure
that the focused element before the translation will get back its focus after it.
But we must take care to not execute any focus/blur callbacks because the user didn't
do anything which should trigger such events: it's a detail of implementation. For example,
when several editors are selected and moved, then at the end the same must be selected, so
no element receive a focus event which will set it as selected.",False
ec2b7177054afdc7d8740ef71d40493341b7eab6,2023-08-08 23:45:10,calixteman,"Merge pull request #16808 from calixteman/editor_no_newline_freetext

[Editor] Avoid to add a new line when hitting enter with a selected freetext editor",True
8f6635bacfa792a2bc3701bcfb44159f5e571b60,2023-08-08 21:54:48,Calixte Denizet,[Editor] Avoid to add a new line when hitting enter with a selected freetext editor,False
e914870c1410733e737a0184d1c748442ed92ed8,2023-08-08 21:54:20,calixteman,"Merge pull request #16793 from calixteman/editor_resize_rotated

[Editor] Fix the resizing of an editor when it's rotated (bug 1847268)",True
a47600027144c3223b0f7100e103b40b7c909790,2023-08-08 20:39:13,calixteman,"Merge pull request #16802 from calixteman/editor_bug1847707

[Editor] Move the stamp button on the right of the pen one (bug 1847707)",True
2e9f2e630c193de2d544b8f526b5585403f9df6a,2023-08-08 20:09:37,Jonas Jenwald,"Merge pull request #16804 from Snuffleupagus/issue-16800

Take fill-alpha into account with default icons for FileAttachment annotations (issue 16800)",True
007b46279decf174eb7d59f8520a35b06e0cda38,2023-08-08 19:44:23,calixteman,"Merge pull request #16807 from calixteman/bug1847733

[Annotation] Strip out the array index in the path only when the path is from a terminal node (bug 1847733)",True
e2819d0c676753397ea930c287081961499c84b8,2023-08-08 19:23:48,Jonas Jenwald,Take fill-alpha into account with default icons for FileAttachment annotations (issue 16800),False
e2f20a1afe3b58ad3b42aa3a2020da6a30aca51a,2023-08-08 18:35:27,Calixte Denizet,[Annotation] Strip out the array index in the path only when the path is from a terminal node (bug 1847733),False
15c21d7758e955d25b6659fb693d8dd3aeab310e,2023-08-08 17:36:50,calixteman,"Merge pull request #16798 from calixteman/issue16797

[Editor] Fix the dimensions of the annotation editor layer (follow-up of #16794)",True
aa71619c2d733bbbd119400814db0bde4d347b1e,2023-08-08 16:24:12,Calixte Denizet,"[Editor] Fix the resizing of an editor when it's rotated (bug 1847268)

There are 2 rotation we've to deal with: the viewer one and the editor one.
The previous implementation was a bit complex and having to deal with these
rotation would have potentially increase it.
So this patch aims to simplify the implementation and deal with all the possible
cases.
The main idea is to transform the mouse deltas according to the rotations and then
apply the resizing in the page coordinates system.",False
35d1f5485e3cb444c7b25a7f59e12ea68ed2892a,2023-08-08 15:05:51,Calixte Denizet,[Editor] Move the stamp button on the right of the pen one (bug 1847707),False
400699687e15f1c8ed118fbc0fd76c3b044bc30e,2023-08-08 14:49:04,Calixte Denizet,[Editor] Fix the dimensions of the annotation editor layer (follow-up of #16794),False
19c712c2d0e2a8bb4973a3f0ff022d8b6ff43e73,2023-08-07 12:04:26,Jonas Jenwald,"Merge pull request #16799 from Snuffleupagus/editor-resize-cursors

[Editor] Change the resize cursors to bidirectional variants",True
8bd45cb260a05a5a5be14f8973527bb9276e31c7,2023-08-07 01:39:15,Jonas Jenwald,"[Editor] Change the resize cursors to bidirectional variants

When resizing an editor we're currently using unidirectional cursors, please refer to https://developer.mozilla.org/en-US/docs/Web/CSS/cursor
Given that editors can (generally) be resized to become either smaller or larger, it seems overall more appropriate to use bidirectional cursors to make this clearer to the user.

Note that as mentioned in the MDN article some environments, which seems to apply to e.g. Windows 11, doesn't differentiate between the two cursor formats and simply use bidirectional ones unconditionally.

One additional benefit of these changes is that the relevant CSS rules become slightly more compact.",False
de1f31aae8bf6c2c440bc88081e81439e15cdf5a,2023-08-06 16:52:07,Tim van der Meij,"Merge pull request #16794 from Snuffleupagus/CSS-round

Use the `round` CSS function in the `setLayerDimensions` helper function",True
b67c60922fae8e6cf875a53e927ed6c0eecca8e0,2023-08-06 16:28:58,Tim van der Meij,"Merge pull request #16790 from Snuffleupagus/addGlobalExports

Attempt to expose e.g. `pdfjsLib` globally regardless of how the library is imported (issue 16778)",True
64b33da236c2ab182657f4df51f57fd52358a188,2023-08-06 16:18:30,Tim van der Meij,"Merge pull request #16795 from Snuffleupagus/update-packages

Update packages and translations",True
1182f4965d672a2c2ac1165943036a58d29ecc33,2023-08-06 12:55:38,Jonas Jenwald,Update l10n files,False
d50237da3cadce8d4d431987147839e5b7ec2eca,2023-08-06 12:55:30,Jonas Jenwald,Update npm packages,False
e414dfcff7a6555246399339a122cf42c2916289,2023-08-04 18:03:06,Jonas Jenwald,"Use the `round` CSS function in the `setLayerDimensions` helper function

This has now been enabled unconditionally in Firefox, see https://bugzilla.mozilla.org/show_bug.cgi?id=1814589

For the `page`-containers in the viewer, this patch should restore the behaviour prior to PR 15770; see e.g. https://github.com/mozilla/pdf.js/pull/15770/files#diff-c48e3561004f5db8f11d5ebab2fd661591222ba911cb4173fbced15f026bac6bL182-L183
Note that these changes this will lead to a tiny bit of movement in some `text` and `annotations` reference tests.

Please find additional information at https://developer.mozilla.org/en-US/docs/Web/CSS/round",False
399475247feeffb3184d1c865530930a8638aa0e,2023-08-03 19:08:12,calixteman,"Merge pull request #16781 from calixteman/editor_rewrite_dragging

[Editor] Refactor dragging and dropping an editor (bug 1802895, bug 1844618)",True
b59b1a81a98c6aefe476a550538e6e7ebd15ec5f,2023-08-03 18:17:16,Calixte Denizet,"[Editor] Refactor dragging and dropping an editor (bugs 1802895, 1844618)

It'll help to have a full control on what's happening when moving an editor.",False
be29a4dce5fda34d12b02ba7617b50b87b4f3eb2,2023-08-03 17:17:11,calixteman,"Merge pull request #16786 from calixteman/editor_resizers_blur

[Editor] Stop the resize session when the window is blurred",True
42e6243ebf8717beb2a186bb040463ceb78bc17a,2023-08-03 16:23:27,Jonas Jenwald,"Attempt to expose e.g. `pdfjsLib` globally regardless of how the library is imported (issue 16778)

We obviously don't want to re-introduce any `require` usage in e.g. the viewer, since we should strive to only use native `import` statements wherever possible.[1]
Hopefully exposing e.g. the library globally in more cases won't break anything, however it's somewhat difficult for me to imagine all the ways in which third-party users may be accessing the PDF.js library. (Given the lack of a runnable test-case in the issue, I also cannot guarantee that this is enough to fully address the problem.)

---
[1] Ideally we should probably not rely on e.g. `pdfjsLib` being globally available in the *built* viewer, and rather always `import` the library instead.
Unfortunately this would require larger (possibly breaking) changes in the builds that we provide, however note that Firefox only recently got support for `import` in workers and that Webpack still only have *experimental* support for outputting ""proper"" modules.",False
99c62f9248e78c2606b70bda5af8a4ca52230c4c,2023-08-03 14:21:47,Calixte Denizet,[Editor] Stop the resize session when the window is blurred,False
2747928a5498daac37dcf7a15d7eca8f7139dd72,2023-08-03 13:46:28,calixteman,"Merge pull request #16784 from calixteman/editor_fix_rescale_svg

[Editor] Use a getter and not a function for the _checkIfSVGFitsInCanvas (bug 1846727)",True
fcfb2457bc4c7862102d9939f164d0b08b27931c,2023-08-03 13:16:31,Calixte Denizet,"[Editor] Use a getter and not a function for the _checkIfSVGFitsInCanvas (bug 1846727)

It's a followup of #16780.",False
0725b6299f122632a7d5b97f82fe584ae1584c5d,2023-08-02 17:51:21,calixteman,"Merge pull request #16780 from calixteman/editor_fix_rescale_svg

[Editor] Let SVG images be resized horizontally/vertically without keeping the aspect ratio (bug 1846727)",True
556f42fe52ddc9e5410b5d3de17eee7b127b18dc,2023-08-02 16:13:39,Calixte Denizet,[Editor] Let SVG images be resized horizontally/vertically without keeping the aspect ratio (bug 1846727),False
e6728f94f4fa1ca162d6ee5394c4c6131d121036,2023-08-02 00:28:36,Jonas Jenwald,"Merge pull request #16779 from Snuffleupagus/deprecate-getJavaScript

[api-minor] Deprecate the `PDFDocumentProxy.getJavaScript` method",True
4735ed8f161297f0b117de3d1896f8fe362be600,2023-08-01 18:51:10,calixteman,"Merge pull request #16776 from calixteman/gv_print_or_save

[GeckoView] Allow to query pdf.js to know if we can avoid to print a pdf (bug 1846296)",True
8bd4a181905e1eb041a09e6ec6ac0b7e490528ca,2023-08-01 18:45:04,Calixte Denizet,[GeckoView] Allow to query pdf.js to know if we can avoid to print a pdf (bug 1846296),False
64e8557fb52bb7fceac9b5e98dca225a1875ec27,2023-08-01 12:32:05,Jonas Jenwald,"[api-minor] Deprecate the `PDFDocumentProxy.getJavaScript` method

This method is very old, however with the exception of the auto-print hack (when scripting is disabled) in the viewer it's never actually been used.

Most likely the idea with `PDFDocumentProxy.getJavaScript` was that it'd be useful if scripting support was added, however it turned out that it was a bit too simplistic and instead a number of new methods were added for the scripting use-cases.",False
5b8f6804809a36ce5c2426fa8772b5cb51f6620d,2023-07-31 23:44:43,calixteman,"Merge pull request #16029 from calixteman/bug1815196

[api-minor] Don't print hidden annotations (bug 1815196)",True
71960bea649ffb20f1eafac24bf899afbb590855,2023-07-31 16:34:15,Calixte Denizet,"Don't print hidden annotatons (bug 1815196)

and handle correctly the NoView and NoPrint flags when they're changed
from JS.",False
ce9f94848c059ed6cb7175c1a53ed7d51e7a604c,2023-07-31 14:36:21,calixteman,"Merge pull request #16773 from calixteman/editor_stamp_input_filter

[Editor] Limit image types to the ones supported by the browser (bug 1846230)",True
f2bf0ccc4f3fd89a6da59341c3a1ab7444e0154d,2023-07-31 14:31:28,Calixte Denizet,[Editor] Limit image types to the ones supported by the browser (bug 1846230),False
0e6d141edf11c83dd6b7707c0516460d6c36e85c,2023-07-30 23:15:09,Jonas Jenwald,"Merge pull request #16771 from Snuffleupagus/gv-dialog-css-vars

[GeckoView] Add missing CSS variables for the dialog functionality",True
621c92dbddeee552b491fd0287b29e788deb320c,2023-07-30 22:07:26,calixteman,"Merge pull request #16766 from calixteman/fix_willprint

Make sure WillPrint ran before starting printing",True
ffb932b84a247389763c1528b90e2ba6294d00e8,2023-07-30 20:53:21,Jonas Jenwald,"[GeckoView] Add missing CSS variables for the dialog functionality

Without this patch the password dialog is pretty difficult to use in the GeckoView-viewer, because of a number of missing CSS variables.

*Please note:* This patch makes no effort at actually styling the dialog to better suite the overall look of the GeckoView-viewer, but focuses solely on making it actually usable (since password protected PDF documents are somewhat rare).",False
02aa5610034bdbfb2f9b410038126dd407203853,2023-07-30 20:43:39,Jonas Jenwald,"Ensure that the password dialog is always closed with the document

If the current PDF document is closed while the password dialog is open, e.g. manually by calling `PDFViewerApplication.close()` from the console, the password dialog wouldn't be closed as intended.

*Please note:* This could only affect the GENERIC viewer, although it's very unlikely to ever happen, since that's the only one that supports opening more than one PDF document.",False
f7155ad8faf325856469c92cf2a4a872029ce209,2023-07-30 20:28:53,Tim van der Meij,"Merge pull request #16770 from Snuffleupagus/fix-baseVersion

Fix typo in the `baseVersion` commit hash (PR 16769 follow-up)",True
1ca3bbd2b6fa106c0d8da42a58fbc46f71e82e9a,2023-07-30 18:51:49,Jonas Jenwald,"Fix typo in the `baseVersion` commit hash (PR 16769 follow-up)

Looking at the demo-viewer I noticed that the version number seems to be stuck at version `3.10.0` despite a couple of PRs having landed since the version bump in PR 16769.

Searching for the current `baseVersion` doesn't find an actual commit, see https://github.com/search?q=repo%3Amozilla%2Fpdf.js+1ef6fbc525856318e78a6035b200ba1c6ec02d491&type=commits

However, looking at the commit hash it seems to be too long and removing the trailing `1` appears to fix things; see https://github.com/search?q=repo%3Amozilla%2Fpdf.js+1ef6fbc525856318e78a6035b200ba1c6ec02d49&type=commits",False
7bdd3491b0cb352999894ac5e5df3b837373fafa,2023-07-30 18:47:27,calixteman,"Merge pull request #16767 from calixteman/color_storage

Add the color changes in the annotation storage",True
d16d1f0d23ffb8c4c9102d590a7776b5a9958b08,2023-07-30 17:33:27,Calixte Denizet,Add the color changes in the annotation storage,False
8ad0f08099065dc19a4f17c07a130ac64ce124e9,2023-07-30 16:47:48,Tim van der Meij,"Merge pull request #16769 from timvandermeij/bump

Bump versions in `pdfjs.config`",True
445ffa920a4df422cd4dbe71966f95d6f739fdcd,2023-07-30 16:43:09,Tim van der Meij,Bump versions in `pdfjs.config`,False
8439e1116002af3592f2d7d2008d010b86061099,2023-07-30 16:08:46,Calixte Denizet,Make sure WillPrint ran before starting printing,False
1ef6fbc525856318e78a6035b200ba1c6ec02d49,2023-07-30 15:48:49,Tim van der Meij,"Merge pull request #16768 from Snuffleupagus/pr-15335-followup

Ensure that failing to open the password dialog once won't permanently disable it (PR 15335 follow-up)",True
930cbc4d27dfbf386004cc99d14491b325f6febb,2023-07-30 15:15:35,Jonas Jenwald,"Make the `passwordCapability` field, in `WorkerTransport`, actually private as intended",False
81dfa61777ee52cbae52ff2b609fffc2f8568bed,2023-07-30 12:16:11,Jonas Jenwald,"Ensure that failing to open the password dialog once won't permanently disable it (PR 15335 follow-up)

*Please note:* This situation should never happen in practice, but it nonetheless cannot hurt to fix this.

If the `PasswordPrompt.open` method would ever be called synchronously back-to-back *and* if opening of the dialog fails the first time, then the second invocation would remain pending indefinitely since we just clear out the capability.",False
7ae5a0fef79703ee5fff9f7dcff21c1922f7be68,2023-07-29 17:37:45,Tim van der Meij,"Merge pull request #16731 from Snuffleupagus/rm-useOnlyCssZoom

[api-minor] Replace the `useOnlyCssZoom` option with `maxCanvasPixels = 0` instead (PR 16729 follow-up)",True
0ee2a352ecd0ab587123918f6d5ea29b5feccf47,2023-07-29 17:28:03,Jonas Jenwald,"[api-minor] Replace the `useOnlyCssZoom` option with `maxCanvasPixels = 0` instead (PR 16729 follow-up)

Given that the `useOnlyCssZoom` option is essentially just a special-case of the `maxCanvasPixels` functionality, we can combine the two options in order to simplify the overall implementation.
Note that the `useOnlyCssZoom` functionality was only ever used, by default, in the PDF Viewer for the B2G/FirefoxOS project (which was abandoned years ago).",False
2a77f0877c27b8dc97827260044f94488fee70bc,2023-07-29 17:18:30,Tim van der Meij,"Merge pull request #16765 from Snuffleupagus/bug-858128-test

Add an `eq` test for bug 858128",True
aea13b44784c22eed3d2f1895177fecacc74880e,2023-07-29 17:11:01,Tim van der Meij,"Merge pull request #16744 from Snuffleupagus/app-small-simplifications

A few small `web/app.js` simplifications",True
69a9d777d70e90f453523a13a9dcf6dc27baefb1,2023-07-29 16:07:58,Jonas Jenwald,"Add an `eq` test for bug 858128

The ten year old bug 858128 was recently fixed upstream, see https://bugzilla.mozilla.org/show_bug.cgi?id=858128#c25, and it seems like a good idea for us to add a test-case to help catch any future regressions here.",False
cfd179f23f08255b2f9d36fd62305fef1eb485d9,2023-07-28 17:58:57,calixteman,"Merge pull request #16163 from Snuffleupagus/bug-1810111

[GeckoView] Bundle the Firefox printing code in the viewer (bug 1810111)",True
e77c7f336d49f21e007e1ddbc28de19262230ae5,2023-07-28 17:40:40,Jonas Jenwald,"[GeckoView] Bundle the Firefox printing code in the viewer (bug 1810111)

This may not be enough, on its own, to completely fix [bug 1810111](https://bugzilla.mozilla.org/show_bug.cgi?id=1810111) however it's impossible for printing to work in GeckoView without this patch.",False
0b715e2a7364d9ce3fb250821a3218388cbf73df,2023-07-28 01:01:24,calixteman,"Merge pull request #16762 from calixteman/editor_focus

[Editor] When an editor is unselected give the focus to the current page",True
9d576d5097a56ac0b394b98adadd3318a6d29ddb,2023-07-28 00:42:26,Calixte Denizet,"[Editor] When an editor is unselected give the focus to the current page

Follow-up of #16756.",False
0ad5a5551a0770980ab0ecf05306a706f0028a0a,2023-07-27 22:09:50,Jonas Jenwald,"Merge pull request #16760 from Snuffleupagus/issue-16759

Avoid eagerly matching ""trailer""-strings when searching for incomplete objects in `XRef.indexObjects` (issue 16759, PR 15854 follow-up, bug 1845762)",True
d6c095038910178a5218b385ebd26a6520c58e86,2023-07-27 21:27:12,Jonas Jenwald,"Avoid eagerly matching ""trailer""-strings when searching for incomplete objects in `XRef.indexObjects` (issue 16759, PR 15854 follow-up, bug 1845762)

When searching for ""endobj""-operators, make sure that we don't accidentally match a ""trailer""-string in /Content-streams without /Filter-entries (i.e. streams that contain ""raw"" and thus human-readable data).",False
5560643597c7bf4c20d2ec557d96c9e2a083685a,2023-07-27 21:22:57,Jonas Jenwald,"Merge pull request #16758 from Snuffleupagus/cMapUrl-standardFontDataUrl-validation

Tweak the `useWorkerFetch` default value checks (PR 15879 follow-up)",True
8679199a2f9c0a4cb91019cf26c2fbd2fc3b7fbe,2023-07-27 20:27:20,calixteman,"Merge pull request #16756 from calixteman/editor_blur_unselected

[Editor] Blur unselected editors",True
c09bd5568c42db209476ddd205592716b182e62a,2023-07-27 19:56:39,Jonas Jenwald,"Tweak the `useWorkerFetch` default value checks (PR 15879 follow-up)

Currently we accidentally accept `cMapUrl` and `standardFontDataUrl` parameters that are empty strings or `null`, since e.g. `new URL(null, document.baseURI)` doesn't throw, when validating the `useWorkerFetch` parameter via the `isValidFetchUrl` helper function.
Please note that we are currently failing gracefully in this case, as intended, however the warning-messages printed in the console are perhaps less helpful without this patch.",False
59bcfd9b9e25e8ddc78ad622b9ea8c5a8857d144,2023-07-27 19:56:38,Calixte Denizet,"[Editor] Blur unselected editors

When an editor is selected in using the keyboard then it has the focus.
But then if the editor is unselected with Escape key then the focus must
be removed otherwise we still have a blue outline around it.
And add few missing timeout in the integration tests.",False
611acf52c46ab78a30f6b600fa15ff61cdd7fe24,2023-07-27 16:13:11,Jonas Jenwald,"Merge pull request #16755 from Snuffleupagus/_keyboardManager-proto

[Editor] Reduce a bit of duplication on `_keyboardManager` initialization",True
2fbfd9517f52c6ec1a1964bf0c4f73d794f362e5,2023-07-27 15:44:14,Jonas Jenwald,"Remove the unneeded error-handling at the end of `PDFViewerApplication.run`

This is quite old code, however the error-handling no longer seems necessary for a couple of reasons:
 - The `PDFViewerApplication.open` method is asynchronous, which means that it cannot throw a ""raw"" `Error` and the try-catch is not needed in that case.
 - None of the other affected methods should throw, and if they do that'd rather indicate an *implementation* error in the code.
 - Finally, and most importantly, with the `PDFViewerApplication.run` method now being asynchronous an (unlikely) `Error` thrown within it will lead to a rejected `Promise` and not affect execution of other code.",False
ecf95e552ffab723eafde2eadbbef77290a9e0d6,2023-07-27 15:42:19,Jonas Jenwald,"Simplify handling of any `ViewHistory` errors during document loading in the viewer

We can use modern JavaScript features, in this case optional chaining, to (ever so slightly) simplify how `ViewHistory` errors are handled.

Also, use arrow functions when handling a few other (very rare) errors during loading since that's a tiny bit shorter.",False
34f2e7d4f9b52556766dd61e9fb574518d6a4efe,2023-07-27 15:12:01,Jonas Jenwald,"[Editor] Reduce a bit of duplication on `_keyboardManager` initialization

The way that the callback-methods are specified feels unnecessarily verbose, however we can introduce a short-hand to improve this.

Also, adds a couple of new-lines to improve overall readability.",False
82faae26c043224b84bece7e61e118ca03858f4c,2023-07-27 15:08:17,calixteman,"Merge pull request #16750 from calixteman/editor_keeboard_freetext

[Editor] Add the possibility to move an empty freetext editor with the keyboard (bug 1845088)",True
ef776eaacd5e2cd656d0a7d8a777ebfdb9f62641,2023-07-27 14:09:12,Jonas Jenwald,"Merge pull request #16753 from Snuffleupagus/eslint-prefer-ternary

Enable the `unicorn/prefer-ternary` ESLint plugin rule",True
93b09f6320fcc0f2c648165b68dcac198e6ee349,2023-07-27 13:26:26,Calixte Denizet,[Editor] Add the possibility to move an empty freetext editor with the keyboard (bug 1845088),False
c0fe96b8fe2fd73450dadbec2be42ccf869c890d,2023-07-27 13:18:24,Jonas Jenwald,"Additional *manual* `unicorn/prefer-ternary` changes

Not all cases could be automatically fixed, and the changes also triggered a number of `prefer-const` errors that needed to be handled manually.",False
674e7ee381e9f2b818cbbe28559cf5d032d35108,2023-07-27 12:48:26,Jonas Jenwald,"Enable the `unicorn/prefer-ternary` ESLint plugin rule

To limit the readability impact of these changes, the `only-single-line` option was used; please find additional details at https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-ternary.md

These changes were done automatically, using the `gulp lint --fix` command.",False
8f83a1359eb759507c66205ed40ab35bf83ccf13,2023-07-27 01:10:20,calixteman,"Merge pull request #16749 from calixteman/editor_mac_shortcut

[Editor] Use the same keyboard shortcut as in Preview to move an editor on mac",True
9078587422bc3bbad9e36f7ccbd4fc1c2fc8de87,2023-07-27 00:53:38,Calixte Denizet,[Editor] Use the same keyboard shortcut as in Preview to move an editor on mac,False
7f634e468fdc1d0bf7c5883e68f74046135c082f,2023-07-27 00:47:15,calixteman,"Merge pull request #16746 from calixteman/editor_keyboard_movable

[Editor] Make editors movable in using the keyboard (bug 1845088)",True
bb6936c9318156ad7e28089723839e4a9744c50f,2023-07-27 00:35:26,Calixte Denizet,"[Editor] Make editors movable in using the keyboard (bug 1845088)

Selected editors can be moved in using the arrows:
 - up/down/left/right will move the editors of 1 in page unit;
 - ctrl (or meta)+up/down/left/right will move them of 10 in page unit.",False
a2eca47ed1882c0c5c59b1943ca1e9333397a49e,2023-07-26 20:50:38,calixteman,"Merge pull request #16748 from calixteman/hcm_toolbar_button

Improve rendering of buttons in the toolbar in HCM (bug 1845515)",True
7ce4e288e1c74f8c9e369be60565dba4d2d5efd8,2023-07-26 20:19:55,Calixte Denizet,"Improve rendering of buttons in the toolbar in HCM (bug 1845515)

With this patch, in HCM, make a button visible when it's active and
add an outline around toggled buttons when they're hovered.",False
48cc67f17e2892145c37d0496e34787b7ae9b251,2023-07-25 23:55:30,calixteman,"Merge pull request #16741 from calixteman/editor_no_ed_when_pinching

[Editor] Avoid to trigger an editor creation when pinching on a touchscreen",True
e40fd171e97f1a77f558b7ee56bedfe26587584f,2023-07-25 23:24:29,calixteman,"Merge pull request #16740 from calixteman/editor_keyevent_on_window

[Editor] Set keyboard events on window instead of the main container",True
7448e89d1fd3f09d134ba3124508a61c905ec5d8,2023-07-25 23:01:15,Jonas Jenwald,"Merge pull request #16738 from Snuffleupagus/debugger-import

Re-factor how the `debugger` accesses API-functionality",True
6b545d666efed8a7387160ce6448e47adc44c19a,2023-07-25 22:30:05,Calixte Denizet,[Editor] Avoid to trigger an editor creation when pinching on a touch screen,False
76caaab1955a5adfd79fe4c7fd271166ce47df2c,2023-07-25 22:08:31,Calixte Denizet,"[Editor] Set keyboard events on window instead of the main container

The keyboard shortcuts (copy, paste, ...) didn't work correctly when the
main container was not focused.
This patch adds few waitForTimeout in the integration test for FreeText
in order to avoid possible intermittent failures.",False
86165a7ba6d843f3520aa697933d14e6607e1394,2023-07-25 18:47:29,calixteman,"Merge pull request #16737 from calixteman/insets

[Editor] Use inset instead of top/left in css",True
690adb093e7b245d7587029052a613e4642e6250,2023-07-25 18:38:02,Jonas Jenwald,"Re-factor how the `debugger` accesses API-functionality

Given that the `debugger` is loaded as a module we can use ""top level await"" in development mode to access the necessary API-functionality, which removes the need to manually pass in the required properties.",False
84e6154b0fd5bea255d4dff4efbae382961c9f58,2023-07-25 18:35:35,Calixte Denizet,[Editor] Use inset instead of top/left in css,False
e00629966ddf5d6fdad69887ee9be7f1c53eedfc,2023-07-25 17:47:09,calixteman,"Merge pull request #16732 from calixteman/editor_resize

[Editor] Add some resizers all around an editor (bug 1843302)",True
2688bf2ebd1f338bf7e320b4fbcb646bc6ab9c60,2023-07-25 17:23:30,Calixte Denizet,"[Editor] Add some resizers all around an editor (bug 1843302)

- it'll improve the way to resize images: diagonally (in keeping ratio between dimensions)
  or horizontally/vertically.
- the resizer was almost invisible in HCM.
- make a resize undoable/redoable.",False
24d01ec68238f813d32af55fcfba70ada8264d9a,2023-07-25 01:27:12,Jonas Jenwald,"Merge pull request #16735 from Snuffleupagus/reduced-Planck-constant-copy

Fix copying of the reduced Planck constant",True
f508084c216ff505417a12d1f91ed1b16da84d10,2023-07-25 00:33:45,calixteman,"Merge pull request #16736 from calixteman/editor_avoid_text_selection

[Editor] Avoid spurious text selection when double clicking to add a FreeText",True
3f58e259619c5d0ee644b3bcaa281602538a3593,2023-07-24 23:08:00,Calixte Denizet,"[Editor] Avoid spurious text selection when double clicking to add a FreeText

In order to reproduce the original issue:
 - switch to freetext mode
 - add a text somewhere
 - double click outside and add some text
 - repeat the previous step several times

no text is selected during the edition.",False
3b6d2554a88ddc75f74878e972c2199db053c590,2023-07-24 22:12:46,Jonas Jenwald,"Fix copying of the reduced Planck constant

Please see https://en.wikipedia.org/wiki/H_with_stroke",False
fb3ae8282001361fce46d655bd67a014a61c64b4,2023-07-24 18:20:56,Jonas Jenwald,"Merge pull request #16733 from Snuffleupagus/node-polyfills-catch

[api-minor] Attempt to prevent Node.js-specific polyfill errors from completely breaking the library",True
d188b66af633e620358faed1b61469a516845902,2023-07-24 16:30:34,Jonas Jenwald,"[api-minor] Attempt to prevent Node.js-specific polyfill errors from completely breaking the library

The existing Node.js-specific polyfills depend on the `node-canvas` package, which has unfortunately (repeatedly) shown to cause trouble for many users. We attempted to improve the situation by listing the relevant packages as `optionalDependencies`, but that didn't seem to really fix the problem.

With this patch the library should be able to load in Node.js-environments even if polyfilling fails, and any errors will instead occur during rendering. Obviously this is *not* a proper solution, since it basically moves the problem to another part of the code-base.
However for certain ""simpler"" use-cases, such as e.g. text-extraction, these changes should hopefully improve general usability of the PDF.js library in Node.js-environments.

*Please note:* For most PDF documents rendering should still work though, since `DOMMatrix` is *currently* only used with Patterns and `Path2D` only with Type3-fonts and Patterns.",False
71f113bf8599ab7698b34839abe6af871dc9b020,2023-07-24 13:30:43,calixteman,"Merge pull request #16718 from calixteman/bug1844572

Don't replace Acroform dictionary if nothing has changed when saving (bug 1844572)",True
1e69b6a03deb4363ad40497dbabae7a5ddc0d7d9,2023-07-24 13:24:41,calixteman,"Merge pull request #16726 from calixteman/gv_fix_dl_button

[GeckoView] Fix string for download button",True
4a0468a60136c935b7f5b08641ec35943eed572d,2023-07-23 22:13:28,Tim van der Meij,"Merge pull request #16730 from timvandermeij/vinyl-fs

Remove the `vinyl-fs` dependency",True
b7b3636ec2f1eac211187411df20675606f950ca,2023-07-23 22:03:20,Tim van der Meij,"Remove the `vinyl-fs` dependency

In Gulp 4, which we use for years now, the `gulp.src()` function
supports the `removeBOM` option to disable the default BOM stripping,
so this commit uses that to get rid of our `vinyl-fs` dependency.

Note that this actually makes disabling BOM stripping work again. It's
currently broken because in `vinyl-fs` 3, that we already use since 2018
in commit 95de23e, the `stripBOM` option was renamed to `removeBOM`, so
the current code doesn't actually disable BOM stripping which we now
confirmed and sadly broke for years without anyone noticing. Most likely
this is because the BOM is not required for UTF-8 documents, but while
not necessary it also can't hurt to have it for tools that use it to
determine if a document is UTF-8.",False
8b2380823cdcf9a1bc6e344912147eaf6fd228c3,2023-07-23 17:02:09,Tim van der Meij,"Merge pull request #16729 from Snuffleupagus/rm-useOnlyCssZoom-pref

Remove the `useOnlyCssZoom` preference",True
7e8ee4f0b91e94c3200d1defe759f8d6ec0d600d,2023-07-23 17:00:34,Tim van der Meij,"Merge pull request #16728 from Snuffleupagus/update-packages

Update packages and translations",True
66645d30ccec4c919bceaef6beb16d8b0eb0a12f,2023-07-23 14:50:36,Jonas Jenwald,"Remove the `useOnlyCssZoom` preference

*Please note:* This only removes the preference itself, however both the viewer-option and the actual implementation is still available.

The `useOnlyCssZoom` functionality was only ever used, by default, in the PDF Viewer for the B2G/FirefoxOS project (which was abandoned years ago). Given that CSS-only zooming can easily make the document look blurry even at low zoom levels, this functionality was only intended for low-powered mobile devices.
Hence it seems reasonable to remove the `useOnlyCssZoom` preference now, since neither the default viewer nor the GeckoView-specific viewer uses this functionality.",False
fd6b9d7b481e2a1fdf39d637a820d47a9bc3d4b2,2023-07-23 13:24:11,Jonas Jenwald,Update l10n files,False
c0734842419af022c68e47dec3ad625ec4b96d8a,2023-07-23 13:19:53,Jonas Jenwald,Update npm packages,False
33fdec139224cbcba4eeb248068d48422f31b455,2023-07-22 21:21:06,Calixte Denizet,Don't replace Acroform dictionary if nothing has changed when saving (bug 1844572),False
74642b59afc271c758813a9e9bad91d902635349,2023-07-22 20:24:48,Calixte Denizet,[GeckoView] Fix string for download button,False
aed7f6edcf19ddddbe4f404216d26cd460e9658e,2023-07-22 17:25:52,Tim van der Meij,"Merge pull request #16725 from Snuffleupagus/stylelint-update

Update Stylelint to the latest version",True
4f72251322cab87d2eb116c2a6535240c5d8ec51,2023-07-22 17:23:58,Tim van der Meij,"Merge pull request #16724 from Snuffleupagus/eslint-no-var-firefox

Enable the ESLint `no-var rule` in the `extensions/firefox/` folder",True
198f89ffcec22a20ae2ea743b6d073fcd13f1e6b,2023-07-22 15:04:14,Jonas Jenwald,"Update Stylelint to the latest version

Trying to update Stylelint to version `15.10.1`, and beyond, broke linting. Looking at the changes the issue appears to be that the `bin/stylelint.js` file was replaced with `bin/stylelint.mjs` instead, which our `gulp lint` runner wasn't able to automatically find; see https://github.com/stylelint/stylelint/compare/15.10.0...15.10.1",False
8a2320bd18e0076300d84a228aa5d106acd8ee86,2023-07-22 13:42:43,Jonas Jenwald,"Use modern JavaScript more in the `extensions/firefox/tools/l10n.js` file

 - Introduce optional chaining in a few spots.
 - Use more logical OR assignment in the code.",False
25cb4883e914769b861cfb811c8a769ad4ed0842,2023-07-22 13:35:37,Jonas Jenwald,"Enable the ESLint `no-var rule` in the `extensions/firefox/` folder

This was done automatically, using the `gulp lint --fix` command.",False
6d783d27226f9d13e3a1c582bb80f050ad604157,2023-07-22 13:03:48,Jonas Jenwald,"Merge pull request #16715 from Snuffleupagus/eslint-no-lonely-if

Enable the `no-lonely-if` ESLint rule",True
c018070e80ee178c23e0bdade7a1be7bc6fd42d7,2023-07-21 23:40:44,Jonas Jenwald,"Enable the `no-lonely-if` ESLint rule

These changes were mostly done automatically, using `gulp lint --fix`, and only a few spots with comments needed manual tweaking; please see https://eslint.org/docs/latest/rules/no-lonely-if",False
abb24f82fb0a39c8b8f647768a77623e67d649f6,2023-07-21 23:39:32,Jonas Jenwald,"Merge pull request #16714 from TaTo30/xfa-select-storage

XFA - Set storage values to select and option elements",True
18619ce4c968ecb1adec0818294826fdf85baa22,2023-07-21 22:02:33,TaTo30,"[XFA] Update select and option element attributes with the stored data and
removes the 'selected' attribute from option element if it's not actually selected.",False
d74b68cd09b0d811b5f16ac9f709225b00bf3819,2023-07-21 18:07:54,calixteman,"Merge pull request #16722 from calixteman/dont_set_filter

Don't uselessly change the filter when drawing (bug 1508765)",True
d9278200d7f6cd41e17dd1e9531fcf2e88b15714,2023-07-21 17:24:50,calixteman,"Merge pull request #16721 from calixteman/bug1844583

Don't get the text content for an annotation when /NeedAppearances is true (bug 1844583)",True
9a4750fee5888962ec745af34e06bc87d9b7dc5d,2023-07-21 16:59:29,Calixte Denizet,"Don't uselessly change the filter when drawing

When profiling the pdf in https://bugzilla.mozilla.org/show_bug.cgi?id=1508765,
I noticed that half a second was spent to set the filter to ""none"".",False
d470e912231f874b08c929ef07ca7c13bedbaad6,2023-07-21 15:56:27,Calixte Denizet,"Don't get the text content for an annotation when /NeedAppearances is true (bug 1844583)

When the flag is set, the appearance has to be generated from the value so it's
useless/meaningless to extract the content from the existing appearance.",False
1a69b6ad64103ebf521444a6362291e2e796d5c4,2023-07-21 14:00:55,calixteman,"Merge pull request #16720 from calixteman/bug1844576

Text annotations must use their own canvas when their appearance is generated (bug 1844576)",True
9277801493691da0f2de8b282fa3d2d4a9c0d537,2023-07-21 13:21:50,Calixte Denizet,"Text annotations must use their own canvas when their appearance is generated (bug 1844576)

When a pdf has /NeedAppearances set to true, the annotation appearance must be
generated from its value and we must take into account the hasOwnCanvas property.",False
2a508b95e185d190ce1e65e8e364997a279ae46f,2023-07-20 23:12:38,calixteman,"Merge pull request #16719 from calixteman/bug1844625

[Editor] Allow to delete an editor in using the Delete key (aka fn+backspace) (bug 1844625)",True
cd97fcb4143e441f494184bd77523f7497f253e0,2023-07-20 22:38:54,Calixte Denizet,[Editor] Allow to delete an editor in using the Delete key (aka fn+backspace) (bug 1844625),False
7220b93911686f698e38495140bdaf6d53a2c4ae,2023-07-20 21:28:18,Jonas Jenwald,"Merge pull request #16717 from Snuffleupagus/saveDocument-resetNewTemporaryRef

Don't reset temporary XRef-entries during saving (PR 16392 follow-up)",True
88524bf9aee39b18801f7ce4bc73ee9f74790517,2023-07-20 19:19:59,Jonas Jenwald,"Don't reset temporary XRef-entries during saving (PR 16392 follow-up)

*Please note:* I'm not aware of any bugs caused by this, however that might be more luck than anything else.

In PR 16392 the `incrementalUpdate` function, and all of its various helpers, were made asynchronous. However the call-site in `src/core/worker.js` wasn't updated, which means that we currently reset temporary XRef-entries while saving is ongoing.",False
0702663b7d994bf363328d6b818ded30605a5378,2023-07-20 18:31:27,calixteman,"Merge pull request #16492 from calixteman/clip_path

[Annotation] Use the clip-path property when an annotation has some quad points",True
8daf2f1eb1ded5a91294ada50357a4e7e9a5f01f,2023-07-20 14:23:23,Calixte Denizet,"[Annotation] Use the clip-path property when an annotation has some quad points

This way it'll avoid to split a div in multiple divs having the same id (which
is supposed to be unique).",False
dca4bc0f24cd755f5e22b6992dd99fcf8066a6af,2023-07-20 00:48:04,calixteman,"Merge pull request #16713 from calixteman/draw_bg

Draw correctly background images in ref tests",True
7cd062ec684981f381e8266b61f7788edee75a27,2023-07-19 23:59:54,Calixte Denizet,"Draw correctly background images in ref tests

It's a workaround for bug https://bugzilla.mozilla.org/show_bug.cgi?id=1844414.
It should be reverted (in order to avoid a perf penalty) once the bug is fixed
in Firefox.",False
9f390755b0e3e5b8112f00823bf01d2c8031b7c0,2023-07-19 15:31:58,calixteman,"Merge pull request #16709 from calixteman/bug1844293

[Editor] Bind redo action on meta+shift+z on mac (bug 1844293)",True
295eb13a44fa2a2d1c66cf92ddfc6c5a290c1f5a,2023-07-19 14:47:50,Calixte Denizet,[Editor] Bind redo action on meta+shift+z on mac (bug 1844293),False
f19991a36f81de1213512355da7cccd04620d78f,2023-07-19 12:11:03,Jonas Jenwald,"Merge pull request #16707 from mozilla/dependabot/npm_and_yarn/word-wrap-1.2.4

Bump word-wrap from 1.2.3 to 1.2.4",True
186a6fd0cbda998520b6f59ea34f0ceb3b8c63c7,2023-07-19 01:44:51,dependabot[bot],"Bump word-wrap from 1.2.3 to 1.2.4

Bumps [word-wrap](https://github.com/jonschlinkert/word-wrap) from 1.2.3 to 1.2.4.
- [Release notes](https://github.com/jonschlinkert/word-wrap/releases)
- [Commits](https://github.com/jonschlinkert/word-wrap/compare/1.2.3...1.2.4)

---
updated-dependencies:
- dependency-name: word-wrap
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>",False
e83febcbb6113d97331e169a1ad71ab3134abac0,2023-07-18 20:31:10,calixteman,"Merge pull request #16706 from calixteman/bug1844036

[Editor] Don't forget to generate non-missing images when printing (bug 1844036)",True
7ac3bf6f1727d8e51916718a8b4bb7df8ea9c5e5,2023-07-18 19:09:18,Calixte Denizet,[Editor] Don't forget to generate non-missing images when printing (bug 1844036),False
43fc78899fea71cdadb4883aeeec51b849c29b3d,2023-07-18 15:05:57,Jonas Jenwald,"Merge pull request #16698 from Snuffleupagus/src-display-rm-require

Remove most build-time `require`-calls from the `src/display/`-folder",True
d9350c38997b31ee9f0058f438b332997eb53e07,2023-07-18 12:37:32,Jonas Jenwald,"Temporarily stop running `gulp typestest` in GitHub Actions

This is necessary to unblock the previous patch, which removes more build-time `require`-calls from the `src/display/` folder.",False
d02291271924ea5afe2ee4fbb400a5ae4f3157ef,2023-07-17 23:17:13,Jonas Jenwald,"Remove most build-time `require`-calls from the `src/display/`-folder

By leveraging import maps we can get rid of *most* of the remaining `require`-calls in the `src/display/`-folder, since we should strive to use modern `import`-statements wherever possible.
The only remaining cases are Node.js-specific dependencies, since those seem very difficult to convert unless we start producing a bundle *specifically* for Node.js environments.",False
e81c084a9269a86f676d770a6d3217324743863e,2023-07-17 23:15:06,Jonas Jenwald,"Merge pull request #16703 from Snuffleupagus/babel-corejs

[api-minor] Let Babel handle the necessary `core-js` polyfills automatically",True
3a886e7264f15289e5cb391f3287c17fea5b3bb9,2023-07-17 20:12:25,Jonas Jenwald,"Move the `isNodeJS`-helper into the `src/shared/util.js` file

With the changes in the previous patch the `isNodeJS`-helper no longer needs to live in its own file, which helps get rid of a closure in the *built* files.",False
67303b16f1f708fd1c430eccd11719f4e4e8d65b,2023-07-17 20:12:08,Jonas Jenwald,"[api-minor] Let Babel handle the necessary `core-js` polyfills automatically

In the last couple of years we've been quicker to remove support for older browsers/environments, which means that at this point in time we don't bundle that many polyfills. (The polyfills are also generally simpler nowadays, ever since we removed support for e.g. Internet Explorer.)
Rather than having to *manually* handle the polyfills, we can actually let Babel take care of bundling the necessary polyfills for us; please refer to https://babeljs.io/docs/babel-preset-env

The only exception here is the Node.js-specific compatibility-code, which is moved into the `src/display/node_utils.js` file. This ought to be fine since workers are not available/used in Node.js-environments.

*Please note:* For the `legacy`-builds this will increase the size of the *built* files, however that seems like a very small price to pay in order to simplify maintenance of the general PDF.js library.",False
9db65ad0835c0d5932dec707f58687161f9e8913,2023-07-17 19:13:26,calixteman,"Merge pull request #16702 from calixteman/editor_2_decimals

[Editor] Use 2 decimals for editor positions and dimensions",True
983b269e267737c98042b51da9f95d01f7ffcaa2,2023-07-17 18:38:09,Calixte Denizet,"[Editor] Use 2 decimals for editor positions and dimensions

I noticed that after adding an image in issue16278.pdf, the image was constantly
resizing itself.
It appears that it's because of rounding errors.",False
67e19171c4ddcd858e0eeefa2e9cbd0f6407fdc9,2023-07-17 18:29:21,calixteman,"Merge pull request #16689 from calixteman/bug1843303

[Editor] Avoid to have some part of an editor outside its page (bug 1843303)",True
a8867cf68ae6b30fea59086df6c930a21bf4b3ae,2023-07-17 17:57:15,Calixte Denizet,[Editor] Avoid to have some part of an editor outside its page (bug 1843303),False
717c766a42edb359cbfddaccdee228553febea88,2023-07-17 16:46:49,Jonas Jenwald,"Merge pull request #16701 from Snuffleupagus/gv-fix-toolbar-l10n

[GeckoView] Fix l10n of the download toolbar-button (PR 16340 follow-up)",True
8614621d8d90bee6504e37635eb954caf267e07e,2023-07-17 15:17:11,Jonas Jenwald,"[GeckoView] Fix l10n of the download toolbar-button (PR 16340 follow-up)

Localization of this button broke in PR 16340, which I assume was completely accidental, since the download-button now tries to access a l10n-id that was removed some time ago (see PR 15617).
Note how loading even the development viewer, i.e. http://localhost:8888/web/viewer-geckoview.html#locale=en-US, currently logs l10n-warnings on the `master` branch.",False
d03a8d0efc020abd414b0c6130baf8248b541882,2023-07-16 18:46:07,Tim van der Meij,"Merge pull request #16687 from Snuffleupagus/rm-more-require

Re-factor the `PDFScriptingManager`-class for the viewer-components",True
8765306203f88a46ace73955a49a0fe5fafad9ae,2023-07-16 18:40:35,Tim van der Meij,"Merge pull request #16697 from Snuffleupagus/eslint-more-unicorn

Enable more ESLint `unicorn` plugin rules",True
9660ca53afc488f90db8b1f26e0e4b5fa2da3373,2023-07-16 12:54:14,Jonas Jenwald,"Enable more ESLint `unicorn` plugin rules

 - `prefer-array-some`, which didn't require any code changes; please find additional details at https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-array-some.md

 - `prefer-modern-math-apis`, which should be fine given the currently supported browsers; please find additional details at https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-modern-math-apis.md",False
bad4bfffdf4bfc15c66039eb1b8731d86f154dfa,2023-07-16 12:21:46,Jonas Jenwald,"Remove the `require` from the `web/pdfjs.js`

Having a `require` in this file has never made sense in e.g. the Firefox PDF Viewer and shouldn't really be necessary.
Possibly the idea was to facilitate some kind of third-party bundling, however the *built* `pdf.js` file has always exposed the API-contents globally.",False
86a868189c58c2028482ef0cc8da7c40b34f8414,2023-07-16 12:21:46,Jonas Jenwald,"Re-factor the `PDFScriptingManager`-class for the viewer-components

Currently this class contains a few ""special"" code-paths for the COMPONENTS build-target, which normally wouldn't be a problem. However, in this particular case that means accessing code that we don't want to include unconditionally in all builds.
This is currently implemented using build-time `require`-calls which we nowadays want to avoid, and we should strive to remove all such cases from the code-base. (Generally speaking `import` is the future, and build-tools may not always play well with a mix of both formats.)

We can easily improve things here by using sub-classing for the COMPONENTS build-target, and then use the ability to re-name when exporting (to avoid breaking existing code).",False
337cba736e4a0c6ac14f6a2d494941abd3f2eae6,2023-07-16 12:21:46,Jonas Jenwald,[ESM] Remove the remaining `require` from the gulpfile,False
bd67f7841f238e341d7fe4fbb05470ba74999add,2023-07-16 12:02:43,Jonas Jenwald,"Merge pull request #16695 from Snuffleupagus/tests-NaN

Ensure that a test-suite that runs no tests is treated as a failure",True
22c0bf4ec2d2dc5e2fd515bf0b0b99731ba409e4,2023-07-16 11:51:13,Jonas Jenwald,"Merge pull request #16693 from Snuffleupagus/update-packages

Update packages and translations",True
b019c13b3372e4bdbd7b4b5f1b4a243a7274b031,2023-07-15 15:33:47,Jonas Jenwald,"Ensure that a test-suite that runs no tests is treated as a failure

Occasionally some test-suites may fail to start on the bots, however that's not correctly reflected in the botio-output posted to GitHub which makes it easy to accidentally overlook this situation.
Looking at the raw logs when that happens they always seem to contain a line such as `Run NaN tests` which means that we should be able to easily make this situation a *failure* as intended.",False
b05c2e034316260b225969743973791c9b2382c9,2023-07-15 14:14:39,Jonas Jenwald,Update l10n files,False
f84657d837b3ca93db385dc7c88d30a5215e3cac,2023-07-15 14:14:39,Jonas Jenwald,Address formatting changes from Prettier version 3,False
1a4bfd2fc3822f364b70213038a49f8500b82c4d,2023-07-15 14:14:30,Jonas Jenwald,"Update npm packages

Note that while some packages increased the *major* version, it doesn't appear to cause any breakage as far as I can tell.",False
ee373b313bfd6bdeb87889fd7a8b373881645ec6,2023-07-14 15:46:44,calixteman,"Merge pull request #16690 from calixteman/stamp_resize

[Editor] Resize the image when the page is zoomed",True
5a692b2c33f07151228f3744dc98bcfcff266a63,2023-07-14 00:06:23,Calixte Denizet,"[Editor] Resize the image when the page is zoomed

In order to reproduce the issue:
 - scale down the image
 - zoom the page and the image is pixellated
So this patch allow to redraw the image when zooming.",False
36fc34ebe8144373424e3004afb8057cba210354,2023-07-13 18:42:49,calixteman,"Merge pull request #16686 from calixteman/bug1843255

[Editor] Always use the data url when loading a SVG in order to avoid CSP issue (bug 1843255)",True
ed42577d9ccd8bdfb8e66ef1a8a104b65cb35cdb,2023-07-13 17:40:28,Calixte Denizet,[Editor] Always use the data url when loading a SVG in order to avoid CSP issue (bug 1843255),False
762d86a59ebd7cc2f7733f519de70610089344e6,2023-07-13 01:14:34,Jonas Jenwald,"Merge pull request #16683 from Snuffleupagus/app-isOffscreenCanvasSupported

Access the `isOffscreenCanvasSupported` option *once* in `PDFViewerApplication._initializeViewerComponents`",True
b449da31ca489affd46613cfe02f2befb1760f32,2023-07-13 01:13:01,Jonas Jenwald,"Merge pull request #16678 from Snuffleupagus/writeStream-tweaks

Tweak the `writeStream` implementation slightly",True
040d5bb294ed3d17774550771f5bdb39d1f732a4,2023-07-13 01:11:43,Jonas Jenwald,"Merge pull request #16675 from Snuffleupagus/pr-16659-followup

Re-enable editing, if necessary, when exiting PresentationMode (PR 16659 follow-up)",True
46cec969009df9d639db85219cab35f83701973c,2023-07-13 00:38:16,calixteman,"Merge pull request #16642 from calixteman/issue16633

[Editor] Try to make the position of an edited FreeText the more accurated as possible",True
944c68ee8545eae5e6360985b5ef89ea30d10d37,2023-07-12 23:23:57,Calixte Denizet,"[Editor] Try to make the position of an edited FreeText the more accurated as possible

- Take into account the page translation,
- Take into account the correct translation for the editor border,
- Take into account the position of the first glyph in the annotation,
- Take into account the rotation of the editor.

Close #16633.",False
7e04ca395fb12ee261dd0611d17c89ca1774ee6c,2023-07-12 21:03:20,Jonas Jenwald,"Access the `isOffscreenCanvasSupported` option *once* in `PDFViewerApplication._initializeViewerComponents`

There's no good reason for getting this option multiple times in the same method. Also, we can slightly re-factor how the `editorStampButton` is made visible.",False
5cfe792349016ffd02642738e9f78a6583ae37d1,2023-07-12 16:54:02,Jonas Jenwald,"Tweak the `writeStream` implementation slightly

 - Do the /Filter and /DecodeParms lookup in parallel, since that ought to be a *tiny* bit more efficient.
 - Avoid code-duplication when `CompressionStream` isn't supported, since we already have a fallback code-path at the end of the function.",False
7daa6b5fd886136c7aaf8bf58cdfebe4dabeeda9,2023-07-12 02:04:20,Jonas Jenwald,"Re-enable editing, if necessary, when exiting PresentationMode (PR 16659 follow-up)

This regressed in PR 16659, when the signature of the `PDFViewer.annotationEditorMode`-setter was changed, and it currently leads to an Error being thrown when exiting PresentationMode.",False
73d650af3e88037c03f89aecdadf4824ac99f2a7,2023-07-11 15:59:33,Jonas Jenwald,"Merge pull request #16669 from Snuffleupagus/esm-builder

[ESM] Convert the `external/builder/`-folder to use standard modules",True
51742323260ae4c9040f392d11a70dbb40522775,2023-07-11 15:08:59,Jonas Jenwald,[ESM] Convert the `external/builder/`-folder to use standard modules,False
bcf14a49c0bcd019af680bbe0eac1137c032434f,2023-07-11 15:08:24,Jonas Jenwald,"Merge pull request #16668 from Snuffleupagus/esm-gulpfile

[ESM] Convert the `gulpfile` to use standard modules",True
09d1be72f4f30a8c3066c503075c142d83174985,2023-07-11 13:29:32,calixteman,"Merge pull request #16672 from calixteman/cheat_editorStamp_svg

[Editor] Cheat the stamp editor icon to make a linter in m-c happy",True
414ea4a365f50650e3850dbb8a7b96d81322c608,2023-07-11 00:48:05,Calixte Denizet,"[Editor] Cheat the stamp editor icon to make a linter in m-c happy

At some point we won't use this icon anymore in the build-in pdf viewer
but we'll the one already in the m-c tree.",False
0bc9012b8f3b0dd5ce3c2ba5393ec032b899de28,2023-07-09 19:28:19,Jonas Jenwald,"[ESM] Convert the `gulpfile` to use standard modules

This is a necessary intermediate step to allow converting files in the `external/builder/` folder.",False
35202ec0f390e63035aba6906f454fd395650e58,2023-07-09 19:08:30,Tim van der Meij,"Merge pull request #16671 from Snuffleupagus/esm-parseDefaultPreferences

[ESM] Convert the ""default preferences""-handling to use `import()` syntax",True
1972b7311bd1b167b984495ae4628eeb246c0d1a,2023-07-09 19:03:57,Tim van der Meij,"Merge pull request #16667 from Snuffleupagus/esm-cmaps

[ESM] Convert the ""cmaps""-task to use `import()` syntax",True
c0cc7f3eca7c980fbd6e82fcad3594543d769a59,2023-07-09 19:02:10,Tim van der Meij,"Merge pull request #16666 from Snuffleupagus/esm-wintersmith

[ESM] Convert the ""wintersmith""-task to use `import()` syntax",True
5a8ecbf56020a2684f50d7ef1ca4573ab729ed0a,2023-07-09 19:00:13,Tim van der Meij,"Merge pull request #16665 from Snuffleupagus/esm-test

[ESM] Convert *most* of `test`-folder to use standard modules",True
6c601d3922f761d73c503833d16312e7ab00355e,2023-07-09 15:24:11,Jonas Jenwald,"[ESM] Convert the ""default preferences""-handling to use `import()` syntax

Unfortunately I wasn't able to come up with a *simple* way to just replace the synchronous `require`-call, since we need to ensure that the default preferences are available when bundling starts.
Hence this patch adds a new intermediate parsing-step in all the relevant gulp-tasks, but this shouldn't affect build-times noticeable since the amount of extra parsing is very small.

*Please note:* It's very possible that there's a better way to handle this, however I figured that unblocking further ESM-work is more important than a ""perfect"" solution.",False
3efb27669526e4aa32aab06e1a14e6efc89da951,2023-07-08 23:13:02,Tim van der Meij,"Merge pull request #16664 from Snuffleupagus/esm-terser

[ESM] Convert `parseMinified` to use `import()` syntax",True
656c6d86fcfbfb64bf9f60c4b7a027c91b93e9a1,2023-07-08 23:10:52,Tim van der Meij,"Merge pull request #16663 from Snuffleupagus/esm-importL10n

[ESM] Convert the `external/importL10n`-folder to use standard modules",True
f012fc5e70d8723846d3e05d28bbd08311c4a3fa,2023-07-08 22:22:58,Jonas Jenwald,"[ESM] Convert the ""cmaps""-task to use `import()` syntax",False
42edc4d8950ca86c46600e73f02c6be0ef3ed897,2023-07-08 17:35:33,Tim van der Meij,"Merge pull request #16630 from Rob--W/crx-url-hash-init

Correct recognition of fragments at document load",True
1567d022d93e2845f69ced2530dd6edc45134bbb,2023-07-08 17:32:30,Tim van der Meij,"Merge pull request #16631 from Rob--W/crx-remove-old-chrome-compat-code

[CRX] Drop code supporting ancient Chrome versions",True
ac3661972bac968c053e80e470cd7aafbd835e46,2023-07-08 17:20:19,Jonas Jenwald,"[ESM] Convert the ""wintersmith""-task to use `import()` syntax",False
a209ce811d3e9f042797fce8c06bb582d836885f,2023-07-08 16:43:04,Jonas Jenwald,[ESM] Convert *most* of `test`-folder to use standard modules,False
adfee2a7238226fbedfc657eacd893471ac3cb6a,2023-07-08 13:31:16,Jonas Jenwald,[ESM] Convert `parseMinified` to use `import()` syntax,False
cec2a9a03fce65b464366137b3c58e05ef28c5ee,2023-07-08 13:06:47,Jonas Jenwald,Update l10n files,False
a650fcd6341ad40a9d4108592ce254e363204ee8,2023-07-08 13:06:32,Jonas Jenwald,[ESM] Convert the `external/importL10n`-folder to use standard modules,False
5696c3aa3a745ac2efad402c11a826d9344e584e,2023-07-08 11:46:57,Jonas Jenwald,"Merge pull request #16658 from Snuffleupagus/test-more-APIs

Add unit-tests to check that more PDF.js APIs expose the expected functionality",True
52c98eb75115fce946221a5d1c618c28704ef9bb,2023-07-08 01:32:11,calixteman,"Merge pull request #16659 from calixteman/edit_freetexts

[Editor] Edit an existing FreeText annotation in double-clicking on it (bug 1787298)",True
c625230c711abffc7c913614454782e9422b8fb1,2023-07-08 00:17:38,Jonas Jenwald,"Merge pull request #16661 from Snuffleupagus/issue-16660

Don't try to hide an already invisible PopupAnnotation (issue 16660)",True
559ea194f28ab93c192dc6eb025e307017449de2,2023-07-07 22:43:48,Jonas Jenwald,Don't try to hide an already invisible PopupAnnotation (issue 16660),False
5c5f9af803187d616703c19987eca5d7d39d9420,2023-07-07 21:14:45,Calixte Denizet,[Editor] Edit an existing FreeText annotation in double-clicking on it (bug 1787298),False
c33e6ceb03fd3e824dd1bd4c88bec78f5ccd1657,2023-07-07 20:00:12,calixteman,"Merge pull request #16650 from calixteman/editor_allow_svg

[Editor] Support svg images in the stamp annotation",True
4fcc2ef23f40c2077de542b896ab89058a35a911,2023-07-07 19:29:13,Calixte Denizet,"[Editor] Support svg images in the stamp annotation

createImageBitmap doesn't work with svg files (see bug 1841972), so we need to workaround
this in using an Image.
When printing/saving we must rasterize the image, hence we get the biggest bitmap as image
reference to avoid duplications or poor quality on rendering.",False
506bca5e6da00fc4b29d7f1fa3686fe1b235c0fa,2023-07-07 16:06:21,Jonas Jenwald,"Add unit-tests to check that more PDF.js APIs expose the expected functionality

Similar to e.g. PR 16587, let's ensure that the `pdf.worker.js` and `pdf.image_decoders.js` files expose the expected functionality.",False
eb2527e9d72a78cb037a4b7caab670c21bdf1ca5,2023-07-06 22:41:44,calixteman,"Merge pull request #16652 from calixteman/rm_all_exceptions

[Editor] Avoid to throw when deleting some invisible editors",True
091266c6fe4abdb07a387d664e5d13cc670e3057,2023-07-06 22:00:17,Jonas Jenwald,"Merge pull request #16648 from Snuffleupagus/AppearanceStreamEvaluator-setFillColorSpace

Improve `parseAppearanceStream` to handle more ""complex"" ColorSpaces",True
c5caa98e8d08cc5ad3ec0b39e1b636d1c1c89af1,2023-07-06 21:34:08,Jonas Jenwald,"Merge pull request #16649 from Snuffleupagus/stamp-l10n

[Editor] Add l10n-strings for the Stamp-editor (PR 16585 follow-up)",True
7a896d1c4b7531a932d1b6b509c22c2b03335894,2023-07-06 21:27:29,Jonas Jenwald,"[Editor] Add l10n-strings for the Stamp-editor (PR 16585 follow-up)

This ought to have been included in PR 16585, since we obviously need default (en-US) l10n-strings for this feature.",False
e4b4d222fa01ac6924ebe2b7eaf7a9265a3534e1,2023-07-06 20:25:51,Calixte Denizet,[Editor] Avoid to throw when deleting some invisible editors,False
6442a6cc4e6ce8d3d297fdcd68463cc351e94e0f,2023-07-06 19:28:09,Jonas Jenwald,"Improve `parseAppearanceStream` to handle more ""complex"" ColorSpaces

The existing code is unable to *correctly* extract the color from the appearance-stream when the ColorSpace-data is ""complex"". To reproduce this:
 - Open `freetexts.pdf` in the viewer.
 - Note the purple color of the ""Hello World from Preview"" annotation.
 - Enable any of the Editors.
 - Note how the relevant annotation is now black.",False
8281bb8858b21328b4406847235f832715a8de51,2023-07-06 15:51:50,calixteman,"Merge pull request #16585 from calixteman/editor_stamp_1

[Editor] Add a basic stamp editor  (bug 1790255)",True
716493f10a972ee9c42614fe40891a26a4bbb956,2023-07-06 15:35:06,Jonas Jenwald,"Merge pull request #16646 from Snuffleupagus/default_appearance-CMYK-typos

Fix typos when handling CMYK colors in `src/core/default_appearance.js`",True
37bd78c7078a6a09a1e4f52a0d88f1e5ba471645,2023-07-06 14:57:50,Calixte Denizet,"[Editor] Add a basic stamp editor (bug 1790255)

For now it allows to add a stamp annotation with an image selected from the file system.",False
174d04fd27d24adaf50ea3363c6655f994526e6d,2023-07-06 14:42:16,Jonas Jenwald,"Fix typos when handling CMYK colors in `src/core/default_appearance.js`

Note how we're accidentally using the wrong operator when trying to parse CMYK colors. I'm not aware of any bugs caused by this, since it seems uncommon in practice for annotations to specify text-colors in CMYK format.",False
2a837ba0b50be433016e67a5c1da43e36be593d8,2023-07-06 13:47:03,calixteman,"Merge pull request #16645 from calixteman/editor_simplify_aspectratio

[Editor] Use css aspect-ratio property to keep the aspect ratio during resize",True
fab1157549cc840a8caa156cda7a30e53fe0b09d,2023-07-06 12:51:37,Calixte Denizet,"[Editor] Use css aspect-ratio property to keep the aspect ratio during resize

It slightly simplifies the implementation and it avoids some possible artifacts
when resizing too quickly.",False
683cdf44dbe08cb4f18b10d0d7bac97f6923d214,2023-07-06 00:33:00,calixteman,"Merge pull request #16641 from calixteman/mv_aspectratio_to_editor

[Editor] Move the 'keep aspect ratio' stuff to the AnnotationEditor level",True
caf3462911dfc1740555959fd41a3903bdbeb2da,2023-07-05 22:02:58,Calixte Denizet,"[Editor] Move the 'keep aspect ratio' stuff to the AnnotationEditor level

It'll help to avoid code duplication between the different editors having
this feature.",False
66fc19b2723bcd19b558cfb624d6e317aab106b6,2023-07-05 21:23:36,calixteman,"Merge pull request #16640 from calixteman/freetext_ap

[Editor] When saving/printing a FreeText, use the identity matrix for the AP and set the cm when rendering it",True
77656ce88170b30c186f36e3264609343083de8a,2023-07-05 20:07:01,Calixte Denizet,"[Editor] When saving/printing a FreeText, use the identity matrix for the AP and set the cm when rendering it

When there was a rotation, the generated bbox was wrong because of an inversion
between width and height.
This patch aims to fix this issue in re-writing the FreeText code generation
to have something similar to what Acrobat does.
And fix the name of the font which wasn't the correct one when calling the
evaluator.",False
6d82f7f66fff60308a07d26b5a72ca6000fe57ba,2023-07-05 13:11:49,calixteman,"Merge pull request #16637 from calixteman/issue16636

[Editor] Fix dimensions of a rotated FreeText after a dimensions change",True
1ce6668a7071178bd08e5b817473eea780cd4d07,2023-07-05 03:26:24,Calixte Denizet,[Editor] Fix dimensions of a rotated FreeText after a dimensions change,False
9802bd805e4169b9bb34df3d42bdc963d7845923,2023-07-04 16:55:16,Jonas Jenwald,"Merge pull request #16635 from Snuffleupagus/README-tweaks

Tweak the README slightly",True
e96c89d7a15edbc5fbebe2addfcd4cd358068c5e,2023-07-04 15:02:25,Jonas Jenwald,"Tweak the README slightly

 - Update the ""Getting the Code"" section to specifically mention Mozilla Firefox, since while the development viewer *works* it may look slightly ""broken"" in Chromium-based browsers. (This is caused by a lack of support for unprefixed CSS properties, e.g. `mask-image`, however this does *not* affect the built PDF.js viewer.)

 - Remove the Twitter-link, since that account has not been updated since 2016 (i.e. over seven years ago).",False
70db938fe7223d5cd5f4b3c1639ed3dd8b79c077,2023-07-02 20:53:18,Rob Wu,[CRX] Drop code supporting ancient Chrome versions,False
f2753d62204b1a41f2ece87ab854c0b919013686,2023-07-02 19:01:35,Rob Wu,"[CRX] Avoid encoding the fragment in file key

Semantically, it is more correct to encode the fragment in the URL
instead of the URL-encoded `file` query parameter. This shouldn't matter
in practice, because `rewriteUrlClosure` in `chromecom.js` decodes the
`file` parameter and restores the fragment. However, as #16625 shows,
there was a case where this did not work as expected.",False
8b50836d76bbfd33f203887f4ea431e23f0344e4,2023-07-02 18:58:47,Tim van der Meij,"Merge pull request #16629 from timvandermeij/bump

Bump versions in `pdfjs.config`",True
1d07ef401ec16580360252ebe0bf218e979f7513,2023-07-02 18:58:33,Rob Wu,"[CRX] Re-initialize initialBookmark after URL rewrite

`PDFViewerApplication` reads from `location.hash` to initialize
`initialBookmark`. But when extensions/chromium/pdfHandler.js prepares
the redirect URL, the reference fragment is encoded instead of bare.
`rewriteUrlClosure` in `chromecom.js` is responsible for decoding the
URL, but that currently runs too late.

To fix this, update `initialBookmark` after rewriting the URL.

This was not a problem in the past because `rewriteUrlClosure` in
`chromecom.js` executed before the initialization of `initialBookmark`.",False
f3df202a319c9bb567d26d5371b75bcdf6db34d0,2023-07-02 18:52:05,Tim van der Meij,Bump versions in `pdfjs.config`,False
2c74323e3d687faedebd7b9ccc1eb1b3f9f58f7d,2023-07-02 16:57:12,Tim van der Meij,"Merge pull request #16628 from Snuffleupagus/app-webViewerInitialized-inline

Inline the `webViewerInitialized` function in `PDFViewerApplication.run`",True
58252a528d48cb7cd2ab72e6aeb8ffd6f06b6a53,2023-07-02 15:13:28,Jonas Jenwald,"Inline the `webViewerInitialized` function in `PDFViewerApplication.run`

Given the size of this function respectively method, it seems reasonable to simply inline the `webViewerInitialized`-code here.",False
cae8fe4c7e930f63b2c03a95e23f8cfbaa2a2602,2023-07-02 15:13:16,Jonas Jenwald,"Move the `setTitleUsingUrl`-call into `PDFViewerApplication.initPassiveLoading`

This seems overall nicer, rather than having to ""manually"" call this when initializing passive loading.",False
73b6ee532579599afaa70af3ed7eb22fde96c042,2023-07-01 17:00:37,Tim van der Meij,"Merge pull request #16612 from erm1116/fix-contentscript-updateEmbedElement

Fix reading property of null object in chrome extension's updateEmbedElement function",True
8a954823b54322372e27905a6737a2203a12bf1d,2023-07-01 16:34:44,Tim van der Meij,"Merge pull request #16616 from Snuffleupagus/PDFCursorTools-tweaks

A couple of small tweaks of the `PDFCursorTools` class",True
e070e730c79c7cceaf74c4743696859d24c7018e,2023-07-01 16:30:19,Tim van der Meij,"Merge pull request #16627 from Snuffleupagus/rm-Node-Buffer

[api-minor] Stop ""supporting"" binary data provided as `Buffer` in Node.js environments (PR 16055 follow-up)",True
366a4ff1e99a490ba20cec0875a8dc74f83f2c5c,2023-07-01 16:28:30,Tim van der Meij,"Merge pull request #16626 from Snuffleupagus/rm-pageColors-supports-check

[api-minor] Remove the `CSS.supports` checks for the `pageColors`-option in the GENERIC viewer",True
94015c71add74efaf125da2356e26bd4bb192088,2023-07-01 16:24:45,Tim van der Meij,"Merge pull request #16601 from Rob--W/crx-maintained-again

Revert ""Temporarily stop listing the official Chrome extension in the main README""",True
d057caedf5f55d3a1a175b3c1928141a0ed8bfd9,2023-07-01 16:23:56,Tim van der Meij,"Merge pull request #16607 from Rob--W/lint-chromium-actionable-warnings

Improve lint-chromium to output actionable information",True
25bac064d88c0b14653c62a619e52c8e0d4c705e,2023-07-01 14:04:18,Jonas Jenwald,"[api-minor] Stop ""supporting"" binary data provided as `Buffer` in Node.js environments (PR 16055 follow-up)

Given that the PDF.js library has never officially supported/documented that binary data can be provided as a `Buffer`, and that it's been explicitly deprecated in *four* releases, it seems reasonable that we outright reject such data instead (to reduce the amount of Node.js specific code-paths).",False
be775143b21f2f086dd0241ae11eb0c77bf30741,2023-06-30 22:07:16,Jonas Jenwald,"[api-minor] Remove the `CSS.supports` checks for the `pageColors`-option in the GENERIC viewer

Given the browsers that we currently support it's probably not necessary to keep the checks for the color-values.",False
ac937a9b3c734ce673b95b2048989c4cf0aab503,2023-06-30 20:48:45,Jonas Jenwald,"Merge pull request #16622 from Snuffleupagus/image_decoders-rm-polyfill-comment

Remove outdated polyfill comment from `src/pdf.image_decoders.js`",True
fcf38f6ae9623a01bd67d0dff8f99042255f993f,2023-06-30 19:08:59,erm1116,fix: use node.insertBefore for adding embed element,False
ffa9795ca9d35047e7b8ae9fbe3073e9881e5848,2023-06-30 17:58:55,Jonas Jenwald,"Merge pull request #16620 from Snuffleupagus/AnnotationStorage-transfers

Move the `transfers` computation into the `AnnotationStorage` class",True
2f80fc1b3d9d944acbfb637cbd054c344e423484,2023-06-30 13:55:45,Jonas Jenwald,"Merge pull request #16623 from Snuffleupagus/fully-rm-render-canvasFactory

Fully remove the `canvasFactory` option from `PDFPageProxy.render` (PR 16242 follow-up)",True
64aa28953d5d5cdf118d8df5f15646f5164a9367,2023-06-30 12:51:45,Jonas Jenwald,"Fully remove the `canvasFactory` option from `PDFPageProxy.render` (PR 16242 follow-up)

We've now been throwing an Error in *three* releases if the `canvasFactory` option is provided, hence it ought to be fine to stop doing that and simply ignore the option instead.",False
d3723cec95c0005a9c61d0b2acb20e7bec1be8c3,2023-06-30 10:59:45,Jonas Jenwald,"Remove outdated polyfill comment from `src/pdf.image_decoders.js`

Given that none of the mentioned polyfills are used any more, the comment is no longer helpful.",False
39113baa3302ea2bff27ec1f128b3f3741f7bfa2,2023-06-29 23:21:57,Jonas Jenwald,"Move the `transfers` computation into the `AnnotationStorage` class

Rather than having to *manually* determine the potential `transfers` at various spots in the API, we can let the `AnnotationStorage.serializable` getter include this.
To further simplify things, we can also let the `serializable` getter compute and include the `hash`-string as well.",False
f373fcb35689f0f6e4b69a3f6a3464e3f0934438,2023-06-29 16:46:10,Jonas Jenwald,"Remove a couple of unused options from the `GrabToPan` constructor

These options are completely unused in the PDF.js viewer, and given that the last update of the `GrabToPan`-code from upstream was in 2016 it shouldn't hurt to remove them.",False
88c7c8b5bfae61a20d7cb5fb27b3749b98a48d02,2023-06-29 02:12:54,calixteman,"Merge pull request #16588 from calixteman/editor_stamp_2

[Editor] Add support for printing/saving newly added Stamp annotations",True
d32926792677bd1f11db2f49dfefdaf12bffba44,2023-06-28 16:13:36,Jonas Jenwald,"Use `Element.scrollTo` unconditionally in the `GrabToPan` class

According to the MDN compatibility data this is available in all browsers that we currently support; please see https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo#browser_compatibility",False
4f82dd39326968da7f313eeee592d3e4bb632cfe,2023-06-28 16:13:36,Jonas Jenwald,"Create a `GrabToPan`-instance lazily in the `PDFCursorTools` class

Unless the user enables the ""HandTool"" we don't actually need to create a `GrabToPan`-instance.",False
789e318cf745edea9ff11c42112905a86dc1e30e,2023-06-28 16:13:34,Jonas Jenwald,"A couple of small tweaks of the `PDFCursorTools` class

 - Introduce a few private fields for internal state.

 - Inline a small method at its only call-site.",False
8330390757156c4be39a501a5cc5454db6a08113,2023-06-28 16:00:21,Rob Wu,"Improve lint-chromium to output actionable information

Before this commit, lint-chromium complained without an obvious course
of action:

> Warning: Pref objects doesn't have the same length.
> Error: chromium/preferences_schema is not in sync

With this commit, the error message is more actionable:

> Warning: extensions/chromium/preferences_schema.json does not contain an entry for pref: enableFloatingToolbar
> Error: chromium/preferences_schema is not in sync",False
50488d7a47299f3843c77df1d180265bc3817bc2,2023-06-27 18:43:00,Jonas Jenwald,"Merge pull request #16608 from Snuffleupagus/PDFPageView-refactor-filterFactory

Re-factor how HCM highlight-filters are handled in the viewer components (PR 16593 follow-up)",True
a024cd0127680499135e8abea731c3fd177ad62d,2023-06-27 03:07:39,Jonas Jenwald,"Re-factor how HCM highlight-filters are handled in the viewer components (PR 16593 follow-up)

This is something that I completely overlooked during review of PR 16593, since the idea is (obviously) that the viewer-components should be usable as-is without the user needing to manually pass in any *additional* parameters.

To support this we can very easily expose the current `FilterFactory`-instance on the `PDFPageProxy`-class[1], and if needed initialize the highlight-filters when initializing the page (again limited to the viewer-components).",False
9aedf00ffe86a4e63131934abc9af0891f1d06ca,2023-06-26 22:24:11,Rob Wu,"Revert ""Temporarily stop listing the official Chrome extension in the main README""

This reverts commit afabbc28c52ff74fa8ddca5b36c2e005094415e1.",False
c4a61a7692a11126a162ed659b32da0f8c07d756,2023-06-26 20:04:17,calixteman,"Merge pull request #16593 from calixteman/popup_hcm

Improve highlightments and popups in HCM (bug 1830850)",True
d357906c3fafebc760526a7af400b9c814605f8e,2023-06-26 19:26:14,Jonas Jenwald,"Merge pull request #16605 from Snuffleupagus/rm-enableFloatingToolbar-pref

[GeckoView] Remove the `enableFloatingToolbar` preference",True
599b9498f229360096f506720157cbe87727cd71,2023-06-26 19:17:05,Calixte Denizet,"[Editor] Add support for printing/saving newly added Stamp annotations

In order to minimize the size the of a saved pdf, we generate only one
image and use a reference in each annotation using it.
When printing, it's slightly different since we have to render each page
independantly but we use the same image within a page.",False
80b4708fa32721dd3630973a11fe21f474d63e3e,2023-06-26 18:47:03,Jonas Jenwald,"[GeckoView] Remove the `enableFloatingToolbar` preference

Note that we'll now display the toolbar unconditionally in GeckoView.",False
21383fb2d162fa7867f25030c2e9c7d0685baa95,2023-06-26 18:24:45,Jonas Jenwald,"Merge pull request #16602 from Snuffleupagus/gulpfile-TESTING-nullish-coalescing

Use nullish coalescing when handling the `TESTING` build-target",True
d7ae2f86e87b19ef0a6b1443769cca90fff7eb98,2023-06-26 18:20:45,Jonas Jenwald,"Merge pull request #16604 from Snuffleupagus/pdfviewer_api-test-Node

Run the PDF.js-viewer API unit-test in Node.js environments (PR 16592 follow-up)",True
c519cc821bc216ac7c24dc68448e4292b1f803a4,2023-06-26 18:15:03,Calixte Denizet,"Improve highlightments and popups in HCM (bug 1830850)

- Modify the text and background colors in popup to fit a11y requirements
- Add a backdrop filter on clickable areas in using a svg filter mapping
  canvas colors to Highlight and HighlightText ones.",False
5f5db4b160a3d4f6c4e375ae6d2e254222f2edf3,2023-06-26 13:07:34,Jonas Jenwald,"Run the PDF.js-viewer API unit-test in Node.js environments (PR 16592 follow-up)

It occurred to me that we can actually run this unit-test in Node.js environments by making use of the preprocessor to stub out the browser globals there.",False
9e7023776e3a8d8b7c452c918d68bad6425e0b2a,2023-06-25 19:32:31,Jonas Jenwald,"Use nullish coalescing when handling the `TESTING` build-target

Given that nullish coalescing is now available in all environments/browser that we support, we can (ever so slightly) simplify handling of the `TESTING` build-target.",False
ccb72073b0bef9e9809e3230c3cede34f41dc757,2023-06-25 18:49:01,Tim van der Meij,"Merge pull request #16598 from Snuffleupagus/update-packages

Update packages and translations",True
0126774e98ff2455f926d1fcca341d6f154fcabd,2023-06-25 18:44:20,Tim van der Meij,"Merge pull request #16600 from Rob--W/crx-min-version-88

[CRX] Set minimum_chrome_version to 88",True
1f29baad226c8c0a58c54fe26acad7c06271c2fe,2023-06-25 17:49:50,Rob Wu,"Set minimum_chrome_version to 88

Set minimum_chrome_version to 88 to not distribute an incompatible
version of the extension to older Chrome versions.

See https://github.com/mozilla/pdf.js/issues/13669#issuecomment-1510485564",False
a4ddf7baaa81aca1a14e72030fc068188db03af7,2023-06-25 12:49:03,Jonas Jenwald,Update l10n files,False
744b01b6377d2753eb18bf89dc3cf9b71baa906c,2023-06-25 12:48:41,Jonas Jenwald,Update npm packages,False
fa95bbce12ae4d043dad8c2fe131aa3eb9bc52d4,2023-06-24 23:20:17,Tim van der Meij,"Merge pull request #16569 from Snuffleupagus/PDFScriptingManager-private

[api-minor] Re-factor the `PDFScriptingManager` class to use private fields/methods",True
436699b0db4e404f65c121d79af46f9dfeccf1c1,2023-06-24 23:09:37,Tim van der Meij,"Merge pull request #16592 from Snuffleupagus/rm-viewer-component-default-factory

[api-minor] Remove the default-factories from the viewer components (PR 15811 follow-up)",True
1ea502aaf946b1936426a00b8b5ad52b3fe8856e,2023-06-24 23:06:11,Tim van der Meij,"Merge pull request #16590 from Snuffleupagus/rm-util-unused-const

Remove a couple of unused constants from `src/shared/util.js`",True
371ee778ffb8001b07957270760cf6fb54fa2334,2023-06-24 23:04:42,Tim van der Meij,"Merge pull request #16597 from Snuffleupagus/firefox-getPreferences-cleanup

[Firefox] Simplify `FirefoxPreferences._readFromStorage` (PR 16583 follow-up)",True
7667f55e45665bcb19a510836de80ba6417dc928,2023-06-24 22:07:43,Jonas Jenwald,"[Firefox] Simplify `FirefoxPreferences._readFromStorage` (PR 16583 follow-up)

Now that https://bugzilla.mozilla.org/show_bug.cgi?id=1840064 has landed in mozilla-central we can implement the final piece of clean-up for the `FirefoxPreferences._readFromStorage` method.",False
e153e3a7419c43b16955af1c5a9beff2ddfce792,2023-06-24 16:53:02,Jonas Jenwald,Expose `FindState` in the viewer-components (issue 16589),False
f596490a1b8c31b65600bb435a81d5505a8ed255,2023-06-23 15:52:54,Jonas Jenwald,"Add a unit-test to check that the *official* PDF.js-viewer API exposes the expected functionality

Until now we've not actually had *any* tests that ensure that the *official* PDF.js-viewer API exposes the intended functionality, which means that things can easily break accidentally.

*Please note:* This unit-test cannot (easily) be run in Node.js-environments, since the `external/webL10n/l10n.js` file contains various browser-specific functionality.",False
c5e4a22ee0567d08a8bf410c0df79f81b308f52b,2023-06-23 15:24:30,Jonas Jenwald,"[api-minor] Remove the default-factories from the viewer components (PR 15811 follow-up)

The changes in PR 15811 have now been included in no less than six official releases, hence it should hopefully be OK to remove this now.",False
b4b941984172a201c5106262cc02ab507bb66de5,2023-06-23 14:14:08,Jonas Jenwald,"Remove a couple of unused constants from `src/shared/util.js`

These constants were added ""speculatively"" in PR 10820, almost four years ago, but have never actually been used. We already have issue 10982 that tracks *potentially* extending support for the affected annotation-format, however until that happens I really don't think that we should keep shipping completely unused code in the PDF.js library.

For the MOZCENTRAL build-target, i.e. the Firefox PDF Viewer, this reduces the total bundle size by 1.1 kilo-byte.",False
e9ccbd28561d4c9aa2d666cdd337aa943f44a6f9,2023-06-22 21:23:45,Jonas Jenwald,"Merge pull request #16587 from Snuffleupagus/test-pdfjs-API

Add a unit-test to check that the *official* PDF.js API exposes the expected functionality",True
0bbadce066b84fa9eed8ab32f47562f8fedd64d7,2023-06-22 18:51:10,Jonas Jenwald,"Add a unit-test to check that the *official* PDF.js API exposes the expected functionality

Until now we've not actually had *any* tests that ensure that the *official* PDF.js API exposes the intended functionality, which means that things can easily break accidentally.",False
25a07d92d0b3127aa8b47cce776a4382341a1551,2023-06-22 18:32:54,Jonas Jenwald,"[Firefox] Stub out the `isValidFetchUrl` function in MOZCENTRAL builds

This helper function is completely unused in the Firefox PDF Viewer.",False
547b8276e60f73c3bc617b4301b02eb09d7ef4ed,2023-06-22 11:39:58,Jonas Jenwald,"[api-minor] Re-factor the `PDFScriptingManager` class to use private fields/methods

 - Change (most) fields/methods into private ones, since that's now supported.
 - Tweak the constructor-parameters, and simplify the sandbox initialization w.r.t. the viewer components.
 - Remove some unused function/method parameters.
 - Slightly simplify the ""updatefromsandbox""-handler by using local variables and inverting some conditions.",False
cca299eeb9993dcbc5791ffcf22bb37d38c1ae00,2023-06-22 11:39:58,Jonas Jenwald,"[GeckoView] Ignore Scroll/Spread-modes in the `PDFViewer` setters

Rather than sprinkling pre-processor statements throughout the viewer-code, simply ""disable"" the relevant `PDFViewer` setters instead.

Also, given that the GeckoView-specific viewer doesn't have a sidebar we don't actually need to explicitly ignore a `pageMode` during loading.",False
03059e1f866e4c0b587607f879dc1a26f8b26820,2023-06-22 01:48:26,Jonas Jenwald,"Merge pull request #16573 from Snuffleupagus/move-fixupLangCode

Move the `fixupLangCode` helper function into the `web/genericl10n.js` file",True
fe1c36a0ed1a745283b3a5e065193e2e2f75aa21,2023-06-22 01:12:53,Jonas Jenwald,"Move the `fixupLangCode` helper function into the `web/genericl10n.js` file

This helper function was added almost two years ago, in PR 13696, and it still has only a single call-site. Furthermore, with the changes made in PR 16572 it also cannot hurt to reduce the size of the `web/l10n_utils.js` file slightly.",False
24b2c3a5e3513515b5c029171e8265c01b0c21f1,2023-06-22 00:37:28,Jonas Jenwald,"Merge pull request #16583 from Snuffleupagus/Firefox-disable-pref-changes

[Firefox] Disable the ability to change preferences directly from the viewer",True
5c0872d1b09440f729168503b799cddcc3befc49,2023-06-21 23:44:46,Jonas Jenwald,"[Firefox] Avoid unnecessary string-parsing when reading preferences

Note how the [`ChromeActions.getPreferences` method](https://searchfox.org/mozilla-central/rev/4e8f62a231e71dc53eb50b6d74afca21d6b254e9/toolkit/components/pdfjs/content/PdfStreamConverter.sys.mjs#497-530) returns the preferences as a string, which we then have to convert back into an Object in the viewer.
Back when that code was originally written it wasn't possible to send Objects from the platform-code, however that's no longer the case and we should be able to (eventually) remove this unnecessary string-parsing now.

*Please note that in order to prevent breakage we'll need to land these changes in stages:*
 - Land this patch in mozilla-central, as part of regular the PDF.js updates.
 - Change the return type in the `ChromeActions.getPreferences` method, in a mozilla-central patch.
 - Remove the string-handling from the `FirefoxPreferences._readFromStorage` method.",False
1f9d1f369609fac818ddadb5c51ed94ea7e46f6a,2023-06-21 23:44:16,Jonas Jenwald,"[Firefox] Disable the ability to change preferences directly from the viewer

Please note that we've never had any functionality in the viewer itself that *set* preferences, and we've thus only ever read them.
For the GENERIC viewer it obviously makes sense for the user to be able to modify preferences, e.g. via the console, but that doesn't really apply to the *built-in* Firefox PDF Viewer since preferences are already accessible via `about:config` there. Hence it does seems somewhat strange to expose, a limited part of, the Firefox preference system in this way when we're not even using it.

Note that the unused preference setting-code also include a fair amount of *additional* validation on the platform-side, such as limiting any possible preference changes to the `pdfjs.`-branch and also an explicit white-list of preference names[1], to make sure that this is safe; please see:
 - https://searchfox.org/mozilla-central/rev/4e8f62a231e71dc53eb50b6d74afca21d6b254e9/toolkit/components/pdfjs/content/PdfStreamConverter.sys.mjs#458-495
 - https://searchfox.org/mozilla-central/rev/4e8f62a231e71dc53eb50b6d74afca21d6b254e9/toolkit/modules/AsyncPrefs.sys.mjs#21-48

Assuming that this patch lands, I'll follow-up with a mozilla-central patch to remove the code mentioned above.

---
[1] This hard-coded list contains preferences that no longer exist, and also at least one (fairly obvious) typo.",False
7742d6e4a6e02d63b6831e097f6274a4206fbc72,2023-06-21 19:04:55,Jonas Jenwald,"Merge pull request #16581 from Snuffleupagus/Lexer-getNumber-sign

Simplify the `sign` handling in the `Lexer.getNumber` method",True
fe869aca3823f2b5e0ff8b69b2ab07857cb02a11,2023-06-21 18:17:29,Jonas Jenwald,"Simplify the `sign` handling in the `Lexer.getNumber` method

After the changes in PR 15606, we can (slightly) simplify the `sign` handling.",False
9a6f439dc775d0210e4f4cba5858f90b8b1ef558,2023-06-21 17:25:51,calixteman,"Merge pull request #16578 from calixteman/issue16576

[Editor] Hide visible popups when editing",True
71c60d523da122b644ea92ae33e097933878a7b0,2023-06-21 16:53:07,Jonas Jenwald,"Merge pull request #16580 from Snuffleupagus/rm-OverlayManager-unregister

Remove the `OverlayManager.unregister` method since it's completely unused",True
7f53fb82a5a85a49bd57a37fcfd3dceca6150976,2023-06-21 16:43:53,Jonas Jenwald,"Remove the `OverlayManager.unregister` method since it's completely unused

This method was added only for consistency with the `register`-method, however it's never actually been used. To avoid including dead code in the builds, let's just remove the `unregister`-method for now.

*Please note:* If this method ever becomes useful, it'll be trivial to revert this commit.",False
8ae1c8dd813f1466f475b9a388105e803c2d55ad,2023-06-21 16:00:05,Calixte Denizet,[Editor] Hide visible popups when editing,False
b8f5a1492578abef599581ff8fd87db2a7b3d246,2023-06-21 15:56:02,calixteman,"Merge pull request #16579 from calixteman/issue16577

[Editor] Don't make editable an empty freetext annotation",True
19f7a8b89919e09a3a463c2c78e099c82d5c84ea,2023-06-21 15:18:20,Calixte Denizet,[Editor] Don't make editable an empty freetext annotation,False
7588418b0912109348674c9c1993f564da340549,2023-06-21 00:50:19,Jonas Jenwald,"Merge pull request #16572 from Snuffleupagus/annotationLayer-NullL10n

[api-minor] Ensure that the `AnnotationLayer` gets a default l10n-instance in GENERIC builds (PR 16552 follow-up)",True
19880fcf9ac8cbbafee3aab2993aca2338f3b370,2023-06-20 23:58:35,Jonas Jenwald,"[api-minor] Move the l10n-translation into the `AnnotationLayer`

With the changes in PR 16552 we can now move general translation into the `AnnotationLayer` itself, which should improve things ever so slightly in third-party implementations where the default viewer isn't used.",False
197e806c8605bf5f8e5c451cf4297e79054e20b6,2023-06-20 23:58:29,Jonas Jenwald,"[api-minor] Ensure that the `AnnotationLayer` gets a default l10n-instance in GENERIC builds (PR 16552 follow-up)

*This is something that I completely overlooked during review of PR 16552, despite leaving a l10n-related comment.*

The new l10n-handling of PopupAnnotations assume that the `AnnotationLayer` is always initialized with a l10n-instance, which might not actually be the case in third-party implementations where the default viewer isn't used.
To work-around that we'll now bundle, and fallback on, the existing `NullL10n`-implementation in GENERIC builds of the PDF.js library. This will only result in a slight file-size increase for the *built* `pdf.js` file, again limited to GENERIC builds, since the `web/l10n_utils.js` file has no dependencies.

Also, tweaks a couple of TESTING pre-processor checks to *only* include that code when running the reference tests.",False
a656d719594c918a2f3e646155284dec5166ead6,2023-06-20 21:40:50,calixteman,"Merge pull request #16570 from calixteman/it

Fix integration tests",True
5ffaa6416791089b5ffcd18ac433e9aca2bb95f0,2023-06-20 21:22:20,Calixte Denizet,Fix integration tests,False
fc487c8aa99f5910315ad55dcb413c3fc0cf243e,2023-06-20 19:40:45,calixteman,"Merge pull request #16552 from calixteman/simplify_popup

[api-minor] Make the popup independent of their associated annotations",True
d1e172458fea9f94d044620bd7fd6ab70ba03d5b,2023-06-20 19:00:39,Calixte Denizet,"[api-minor] Make the popup independent of their associated annotations

- it'll help to be able to move popups on screen to let the user read the text
- popups won't inherit some properties from their parent:
  - the popup can be misrendered if for example the parent has a clip-path property.
- add an outline to the popup when the parent is focused.
- hide a popup when it's clicked.",False
d01efc6767487251145cf018b38ac1009d91a0f7,2023-06-20 03:20:40,calixteman,"Merge pull request #16567 from calixteman/issue16566

[Editor] Show hidden annotations once editing is finished",True
ae3cee95a6df3b561875bc65f6e0b5578d6faf3e,2023-06-20 02:33:45,Calixte Denizet,[Editor] Show hidden annotations once editing is finished,False
a5c10b6d89854448da0963bdfae00b3e463c46e7,2023-06-17 00:10:34,calixteman,"Merge pull request #16563 from calixteman/bug1838855

Guess that a checkbox belongs to a group in using its T value (bug 1838855)",True
5c0054d58dc0ea3b8869a7c62311fe19a7a18656,2023-06-16 22:15:09,Calixte Denizet,Guess that a checkbox belongs to a group in using its T value (bug 1838855),False
46b8f9e2f29bd6a3afca6f644bbba9016e5f2c27,2023-06-16 18:17:55,calixteman,"Merge pull request #16561 from calixteman/editor_copy_existing

[Editor] Avoid an exception when copying an existing editor",True
ca3e45755cfa336b7be77eb8d386ebf931085beb,2023-06-16 17:49:37,Calixte Denizet,[Editor] Avoid an exception when copying an existing editor,False
04c31a55d2d1d7c907238a314b24eaa3c55ddeaf,2023-06-16 16:37:41,Jonas Jenwald,"Merge pull request #16558 from Snuffleupagus/writeStream-filter-fixes

Improve handling of /Filter-entries in `writeStream`",True
2cb113b545bc940d14b1554e70c38fba14e2bc3c,2023-06-16 13:57:23,Jonas Jenwald,"Improve handling of /Filter-entries in `writeStream`

Fix handling of /Filter-entries, since the current implementation could potentially corrupt the data if there's multiple filters present.
Please note that filters are applied *sequentially* during decoding, starting from the first one in the Array, hence the first Array-entry needs to be /FlateDecode in order for things to actually work correctly.

To prevent a future bug, if we want to save more ""complex"" data such as images, also ensure that we include any existing /DecodeParms-entries when updating the /Filter-entry.",False
bd46a934ece88f3ba6580a6ba89c801bb2656c0f,2023-06-16 13:57:10,Jonas Jenwald,"Merge pull request #16559 from calixteman/test_compression

Add a test to check that the compression is ok when saving an annotation",True
85b38fc247d9b36b9e687469456d54f18c9bcd3e,2023-06-16 13:35:42,Calixte Denizet,Add a test to check that the compression is ok when saving an annotation,False
8937cac621c7756c1231184dfc3ae938beab9790,2023-06-16 03:17:25,calixteman,"Merge pull request #16556 from calixteman/no_dup_when_saving

[Editor] Avoid to have duplicated entries in the Annot array when saving an existing and modified annotation",True
5f1fba503ca8513d29784c843d8ba3684fb655b4,2023-06-16 01:48:12,calixteman,"Merge pull request #16557 from calixteman/no_events_on_canvas

Disable events on canvas in the annotation layer",True
71479fdd21518ba43422c19b40228126e5519d42,2023-06-16 01:32:10,Calixte Denizet,[Editor] Avoid to have duplicated entries in the Annot array when saving an existing and modified annotation,False
dd21139405a19e36040fafe379eebb36379ab8f4,2023-06-16 00:40:40,Calixte Denizet,Disable events on canvas in the annotation layer,False
64520a0c63902a329ffecdf878ca8f396408b9a2,2023-06-15 23:14:13,calixteman,"Merge pull request #16555 from calixteman/empty_freetext

[Editor] Don't add an editor for empty FreeText annotations",True
1ab34d2ae4e455b6b737ebe698bbd57d65a130cd,2023-06-15 22:03:03,Calixte Denizet,[Editor] Don't add an editor for empty FreeText annotations,False
5581e22cc776f40d06267f10b8f52faa3fdd8396,2023-06-15 21:40:41,calixteman,"Merge pull request #16535 from calixteman/restore_freetext

[Editor] Allow to edit FreeText annotations",True
9f60686c5943c0b328993e6a015b75e1069346c9,2023-06-15 19:50:54,calixteman,"Merge pull request #16554 from calixteman/issue16553

Add a container for Signature with their own canvas",True
be25ee12bbd2958e88e132dea746c3461e2791a7,2023-06-15 19:41:52,Calixte Denizet,Add a container for Signature with their own canvas,False
0116a8f484a2585c54adce2366a51e619ba9db25,2023-06-15 19:36:29,Calixte Denizet,[Editor] Allow to edit FreeText annotations,False
a37f7d24771ce5c21151e7cf90fd323fb208f639,2023-06-15 17:28:52,Jonas Jenwald,"Merge pull request #16543 from Snuffleupagus/limit-more-to-GENERIC

Limit more code to GENERIC builds",True
877884029d5f2a8645549dcd3ace2aa131f99eb7,2023-06-15 15:56:57,Jonas Jenwald,"Merge pull request #16551 from Snuffleupagus/page-destroyed-complete

Ensure that `cleanup` during rendering is actually ignored, to prevent a blank canvas",True
0650be4641224cda99f5d03cc8ffec52e8a8c90d,2023-06-15 15:56:27,Jonas Jenwald,"Merge pull request #16550 from Snuffleupagus/rm-RenderingCancelledException-type

[api-minor] Remove the `type` from `RenderingCancelledException` (PR 16226 follow-up)",True
033228a2fc06fa71c9e7014ab9ae9310db39d49e,2023-06-15 15:55:42,Jonas Jenwald,"Merge pull request #16544 from Snuffleupagus/eslint-prefer-optional-catch-binding

Enable the `unicorn/prefer-optional-catch-binding` ESLint plugin rule",True
a591c3de848f1efaeb1b28dddb5ee9dbf227ba79,2023-06-15 15:09:26,Jonas Jenwald,"Ensure that `cleanup` during rendering is actually ignored, to prevent a blank canvas

The existing unit-test doesn't work as intended, since the page never actually renders. Note how `cleanup` is *not* allowed to run when parsing and/or rendering is ongoing, however an (old) incorrect condition could prevent rendering from ever starting.

This is very old code, which has been slightly re-factored a couple of times (many years ago), however this doesn't appear to affect e.g. the default viewer since the incorrect behaviour seem highly dependent on ""unlucky"" timing.
Note also how at the start of the `PDFPageProxy.prototype.render`-method we purposely cancel any pending `cleanup`-call, to prevent unnecessary re-parsing for multiple sequential `render`-calls.

Finally, avoid running `cleanup` when document/page destruction has already started since it's pointless in that case.",False
89f29192a5072cb68ffb2f839518a3197d0c92f6,2023-06-15 01:08:10,Jonas Jenwald,"Actually limit `SVGGraphics` to GENERIC builds (PR 16226 follow-up)

After PR 16226 the deprecated SVG back-end is now unused in development mode, with the exception of unit-tests, hence we can re-factor how it's exposed in the API to avoid including a useless webpack-closure in e.g. the *built-in* Firefox PDF Viewer.",False
a8d4aad8b910e8b2d23c780d62b9b2e2704c5060,2023-06-15 01:03:22,Jonas Jenwald,"Limit `PDFPageProxy.getOperatorList` to development mode and GENERIC builds

Given that this API method isn't used anywhere within the PDF.js library itself, except for the unit-tests, we can avoid including what's effectively dead code in e.g. the *built-in* Firefox PDF Viewer.",False
225734dd00cf1359dcd46c990e150ac3c313d8bf,2023-06-14 19:10:25,Jonas Jenwald,"[api-minor] Remove the `type` from `RenderingCancelledException` (PR 16226 follow-up)

After PR 16226 we're only using `RenderingCancelledException` together with canvas-rendering, hence the `type`-property is no longer necessary.",False
fee850737bcb544172b54279576458bb630af17b,2023-06-12 15:16:11,Jonas Jenwald,"Enable the `unicorn/prefer-optional-catch-binding` ESLint plugin rule

According to MDN this format is available in all browsers/environments that we currently support, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#browser_compatibility

Please also see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-optional-catch-binding.md",False
9af50dc358fe4e4fa1ca93db1f5eb5560391f382,2023-06-11 16:31:45,Tim van der Meij,"Merge pull request #16541 from Snuffleupagus/inline-image-mask-checks

Improve SMask/Mask lookup when parsing inline images",True
1e2f82050fed64054a2ebe3434648baa005ca7ce,2023-06-11 16:29:07,Tim van der Meij,"Merge pull request #16542 from Snuffleupagus/update-packages

Update packages and translations",True
68b05fb9cd865ddaf162758c660b514da7d6655a,2023-06-11 15:02:48,Jonas Jenwald,Update l10n files,False
8415ff51b471d4aaba497f48597c8eabaf2b6b9f,2023-06-11 15:00:39,Jonas Jenwald,Update npm packages,False
1f42aaf21bade94283e9deacfc2d4355244ffc33,2023-06-10 16:49:43,Jonas Jenwald,"Improve SMask/Mask lookup when parsing inline images

 - Don't attempt to lookup an ""SM"" entry, since we're only using ""SMask"" in the `PDFImage` code and I also cannot find any mention in the PDF specification about that being a valid abbreviation for a Soft Mask entry. (There's only a `SM = Smoothness Tolerance` Graphics State parameter, which is obviously something completely different.)

 - Don't lookup the /SMask and /Mask entries unless it's actually an inline image, since it's pointless otherwise.

 - Last, but most importantly, only check for the *existence* of /SMask and /Mask entries but don't actually fetch the data. Note that if either one exists it'll contain a Stream, and those cannot be cached on the `XRef`-instance, which leads to unnecessary parsing/allocations and in this case we're not using the actual data for anything.",False
b8447eb49f8cf3dc06925d2a4f0db4b4263b8699,2023-06-09 22:56:42,calixteman,"Merge pull request #16523 from calixteman/restore_save

[Editor] Add the possibility to update an existing annotation with some new properties when saving or printing",True
1a047f843c8b97811451a43702dc1ecf66a7e8ee,2023-06-09 20:44:53,Calixte Denizet,[Editor] Add the possibility to update an existing annotation with some new properties when saving or printing,False
f8a84a6f033e732443d060db3740cbdd5601841d,2023-06-09 20:39:49,calixteman,"Merge pull request #16539 from calixteman/issue16538

Concat data when push fails in the CFF compiler",True
3d0ce1cff2443445ed3c9bf768378816bef8ba70,2023-06-09 19:18:01,Calixte Denizet,Concat data when push fails in the CFF compiler,False
f2a29e858f0e1320c809190d1afa7b937a063be8,2023-06-08 18:00:39,calixteman,"Merge pull request #16533 from calixteman/fix_freetext_undo

[Editor] Fix test failures in m-c because of the new FreeText undo/redo stuff",True
baebf7b26daf5c641b17efaf330dd3c8d15ec792,2023-06-08 17:08:52,Calixte Denizet,[Editor] Fix test failures in m-c because of the new FreeText undo/redo stuff,False
22d350cae6df4caa13f3781074f978ae47f4f956,2023-06-06 15:43:14,calixteman,"Merge pull request #16528 from calixteman/bug1831574

[Editor] Commit the text when the user hits ctrl+s (bug 1831574)",True
3d98fb3c0b82040bbb3dae05c8fa43b8d866183d,2023-06-06 15:10:54,Calixte Denizet,[Editor] Commit the text when the user hits ctrl+s (bug 1831574),False
a2b9e23f83591f479db40ea0dcfdf6dd7ef4e9a6,2023-06-06 14:23:35,calixteman,"Merge pull request #16525 from calixteman/editor_undo_text_change

[Editor] Allow to undo/redo committed text modifications for FreeText",True
2f0bb9dc2feb0464affadba5bfb9d929ace7cad9,2023-06-06 01:01:19,Calixte Denizet,[Editor] Allow to undo/redo committed text modifications for FreeText,False
9cd84aa0b2f695e7e6d33e455c1d7bb774acae62,2023-06-05 21:38:58,calixteman,"Merge pull request #16522 from calixteman/restore_get_freetext_info_from_as

[Editor] Guess font size and color from the AS of FreeText annotations",True
ba8c996623c66703d5b2b97cfa3850486a40d057,2023-06-05 20:45:17,Calixte Denizet,[Editor] Guess font size and color from the AS of FreeText annotations,False
77fb6834d6c1ba088e6560495abf6568b0963438,2023-06-05 17:50:24,calixteman,"Merge pull request #16521 from calixteman/restore_connect_layers

[Editor] Connect then annotation layer and the editor one",True
9f861c39f4c902d0a6a72fd18859d9fdd3778675,2023-06-05 17:35:52,Calixte Denizet,[Editor] Connect then annotation layer and the editor one,False
184cad3daf657288545fd961ee2be016e12be8f7,2023-06-04 21:13:18,Tim van der Meij,"Merge pull request #16520 from Snuffleupagus/issue-16518

Remove unused variables in `InkAnnotation.createNewAppearanceStream` (issue 16518, PR 16494 follow-up)",True
8a5af64749f82f2f015e1edb8e8f9e27229967fd,2023-06-04 18:05:30,Tim van der Meij,"Merge pull request #16519 from timvandermeij/puppeteer

Improve Puppeteer's `trimCache` API usage",True
046b9050ddb53df65b2f420f02ce632b7606e97a,2023-06-04 17:21:24,Jonas Jenwald,"Remove unused variables in `InkAnnotation.createNewAppearanceStream` (issue 16518, PR 16494 follow-up)",False
a5d0af38f7f90bca2cbddb0b0fc473ebe7c7942e,2023-06-04 17:20:17,Jonas Jenwald,"Merge pull request #16515 from Snuffleupagus/eslint-import-no-cycle

Enable the `import/no-cycle` ESLint plugin rule",True
a9093a7f4d3fde209a2a160a6d6fad171f598084,2023-06-04 17:19:44,Tim van der Meij,"Improve Puppeteer's `trimCache` API usage

The original `trimCache` functionality was intended to be exposed on the
top-level `puppeteer` module, but due to a bug in Puppeteer this didn't
work correctly and we had to call `trimCache` on the default Puppeteer
node instance instead, which was fortunately exposed. However, since
this didn't feel like intended API usage, this bug was reported and is
now fixed in Puppeteer 20.5.0, so this commits updates Puppeteer to that
version so we can use the intended API.

The full history of this issue can be found at
https://github.com/puppeteer/puppeteer/issues/10174.",False
cf3a35e9daaa5a456109943b4cfc87c0471118b8,2023-06-04 17:14:15,Jonas Jenwald,"Enable the `import/no-cycle` ESLint plugin rule

Having cyclical imports is obviously not a good idea, and this ESLint plugin rule can help detect those; please see https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/no-cycle.md",False
605d9f492f8fa09f0ab1fb180e95896143fff8e6,2023-06-04 15:52:21,Tim van der Meij,"Merge pull request #16517 from Snuffleupagus/eslint-import-more

Enable more `import` ESLint plugin rules",True
5fad931a3f111665828a7b74e163c1fd9f2818b4,2023-06-04 13:28:25,Jonas Jenwald,"Enable more `import` ESLint plugin rules

This patch enables more `import` rules to help prevent bugs/inconsistencies, and most of these rules didn't require code changes; please find additional details here:
 - https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/export.md
 - https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/exports-last.md
 - https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/first.md
 - https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/no-empty-named-blocks.md
 - https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/no-mutable-exports.md
 - https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/no-self-import.md",False
bb5d38acc1805fb488de0f855a7e3e26c502a5d8,2023-06-03 16:03:18,Tim van der Meij,"Merge pull request #16495 from Snuffleupagus/PDFRenderingQueue-components

Limit some `PDFRenderingQueue`-related code to the GENERIC viewer",True
63b61ca0823be403b38af8b605bf8d94c4ad7870,2023-06-03 02:42:50,calixteman,"Merge pull request #16508 from calixteman/restore_mk_annotation_layer_an_object

[api-minor] Make the AnnotationLayer an object in order to use it in the AnnotationEditorLayer",True
4351708ae62e68f42efe77ca15c1eed2d96ecb73,2023-06-03 02:14:14,Calixte Denizet,"[api-minor] Make the AnnotationLayer an object in order to use it in the AnnotationEditorLayer

It'll be useful to make the Freetext and Ink annotations editable.",False
cccdc8dba44d7e7e80c540b99ab34311520aa0df,2023-06-02 21:41:05,Jonas Jenwald,"Merge pull request #16513 from Snuffleupagus/issue-7454

Improve handling of mismatching /BaseFont and /FontName entries for non-embedded fonts (issue 7454)",True
666e35301be2428f6df9c36317193bd8ea6bc13f,2023-06-02 20:46:22,Jonas Jenwald,"Merge pull request #16499 from Snuffleupagus/Chrome-92

[api-minor] Update the minimum supported Google Chrome version to 92",True
459d26edec951fcc049928d3a07f8c933a26d3e5,2023-06-02 20:40:25,Jonas Jenwald,"Improve handling of mismatching /BaseFont and /FontName entries for non-embedded fonts (issue 7454)

This patch is the result of me going through some old issues regarding non-embedded Wingdings support.

There's a few different things wrong in the referenced PDF document:
 - The /BaseFont and /FontName entries don't agree on the name of the fonts, with one font using `/BaseFont /Wingdings-Regular` and `/FontName /wg09np` which obviously makes no sense.
   To address this we'll compare the font-names against our lists of known ones and ignore /FontName entries that don't make sense iff the /BaseFont entry is a known font-name.
 - The non-embedded Wingdings font also set an incorrect /Encoding, in this case /MacRomanEncoding, which should have been fixed by PR 16465. However this doesn't work since the font has *bogus* font-flags, that fail to categorize the font as Symbolic.
   To address this we'll also compare the font-name against the list of known symbol fonts.",False
ba67bd717a3ba21e5bb3f7b7677ce21dce85470d,2023-06-02 19:47:31,Jonas Jenwald,"Merge pull request #16516 from Snuffleupagus/lazy-KeyboardManager-init

[editor] Initialize `KeyboardManager`-instances lazily",True
ea93c507f5f462503a08e43a0a129f6ec1eae908,2023-06-02 19:33:22,Jonas Jenwald,"[editor] Initialize `KeyboardManager`-instances lazily

As far as I can tell there's no particular reason for initializing `KeyboardManager`-instances eagerly, since the user may never use editing, and we can easily do this lazily instead by utilizing shadowed getters.",False
0023c4a51185190085532a79b0e918683828603b,2023-06-02 19:29:16,Jonas Jenwald,"Merge pull request #16514 from Snuffleupagus/eslint-import-named

Enable the `import/named` ESLint plugin rule",True
9fe0423a4ce9cb251f53b36c9a50eedb4f3ab211,2023-06-02 17:04:10,Jonas Jenwald,"Merge pull request #16497 from Snuffleupagus/more-Util-getAxialAlignedBoundingBox

Use the `Util.getAxialAlignedBoundingBox` helper function more",True
89a17abadf5fc9195c8b5f62619087f379b45ecf,2023-06-02 16:52:26,Jonas Jenwald,"Enable the `import/named` ESLint plugin rule

This would've prevented issue 16512, please see https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/named.md",False
a43b1246c8f2dabd8f975587805d0b7c778c69ab,2023-06-02 16:40:08,Jonas Jenwald,"Merge pull request #16511 from Snuffleupagus/pr-15618-followup

Fix incorrect `USERACTIVATION_CALLBACKID` import (15618 follow-up)",True
2db0eff70f6b202ff894136b84d1bf148f1641c8,2023-06-02 13:32:23,Jonas Jenwald,"Fix incorrect `USERACTIVATION_CALLBACKID` import (15618 follow-up)

This constant is currently imported from the wrong file, where it doesn't exist; see PR 15618.",False
665ff78051777308a1d40957876d2cdfdbf6438b,2023-06-02 13:18:23,Jonas Jenwald,"Merge pull request #16505 from maxired/fix/export-image-kind

export ImageKind",True
6b16d903b19a7bd1e28f6b0d26faa36cdff3dd9c,2023-06-02 12:56:09,Jonas Jenwald,"Merge pull request #16507 from Snuffleupagus/zooming-regressions-2

Fix more regressions from PR 15812",True
e4ecf59727b665ae6caa73ef9182cb1bee56e371,2023-06-02 12:21:18,Maxence Dalmais,export ImageKind type externally,False
a60bb5f93694ff7f8d3ff2079af8b8ebfe32d760,2023-06-01 22:31:57,Jonas Jenwald,"Don't use partially rendered pages to generate thumbnails when `drawingDelay` is used (PR 15812 follow-up)

While it's slightly difficult to trigger in practice, unless the `defaultZoomDelay`-value is increased, it's currently possible to generate thumbnails from *partially* rendered pages when doing *temporary* CSS-only zooming.",False
af8df207bb04687b746833c93cb71342362a4d66,2023-06-01 22:31:50,Jonas Jenwald,"Don't dispatch ""pagerendered""-events on the *temporary* CSS-only zooming done when `drawingDelay` is used (PR 15812 follow-up)

We shouldn't dispatch a ""pagerendered""-event when doing *temporary* CSS-only zooming, but simply wait until the actual rendering is done.
While I don't believe that this regression has caused any actual bugs, dispatching *duplicate* events is nonetheless inconsistent and should be fixed.",False
32964db6ef5158fa1b8101d3185e390e7ce60d8c,2023-06-01 20:58:24,Jonas Jenwald,"Merge pull request #16504 from wojtekmaj/fix-canvasMaxAreaInBytes

Fix canvasMaxAreaInBytes type",True
1add9bc1310b924a7de1d9adf65751b4004982a9,2023-06-01 19:11:43,Wojciech Maj,"Fix canvasMaxAreaInBytes type

Fixes #16503",False
1ef918239c66112a7c2cb2273d2fc15b8e21f6c0,2023-06-01 15:35:58,calixteman,"Merge pull request #16501 from calixteman/issue16500

Try to not omit some values when printing a choice list with several selected items",True
0e610cab0422d05446df1037e3b6fef409d76d6a,2023-06-01 00:47:22,Calixte Denizet,Try to not omit some values when printing a choice list with several selected items,False
a2118f52b0583100474a32763c9650ecb9a988cb,2023-05-31 19:26:45,calixteman,"Merge pull request #16494 from calixteman/save_more_info_for_ink

[Editor] Add few more info when saving ink data (thickness, opacity, …)",True
133d10318630d73828dc4cb336a1e18e569802a8,2023-05-31 19:13:07,Calixte Denizet,"[Editor] Add few more info when saving ink data (thickness, opacity, ...)

Fix the InkList entry: the coordinates were relative to the page and not
to the bounding box of the annotation.",False
c60a3ce96a6c2ee944592e3708e001b16e1a9cb2,2023-05-31 14:33:39,Jonas Jenwald,"[api-minor] Update the minimum supported Google Chrome version to 92

This patch updates the minimum supported browsers as follows:
 - Google Chrome 92, which was released on 2021-07-20; see https://support.google.com/chrome/a/answer/10314655

Note that nowadays we usually try, where feasible and possible, to support browsers that are about two years old. By limiting support to only ""recent"" browsers we reduce the risk of holding back improvements of the *built-in* Firefox PDF Viewer, and also (significantly) reduce the maintenance/support burden for the PDF.js contributors.

*Please note:* As always, the minimum supported browser version assumes that a `legacy`-build of the PDF.js library is being used; see https://github.com/mozilla/pdf.js/wiki/Frequently-Asked-Questions#faq-support",False
d3c0928121b0780f2baad33fcc3267c07e29ef3f,2023-05-31 13:02:19,Jonas Jenwald,"Use the `Util.getAxialAlignedBoundingBox` helper function more

There's a couple of spots in the code-base that effectively re-implement this helper function, which seems like unnecessary repetition.",False
e8c727742c234e10cafcf47a2e41c6a1f214a000,2023-05-31 00:54:19,Jonas Jenwald,"Limit some `PDFRenderingQueue`-related code to the GENERIC viewer

Given that this functionality is only relevant in third-party use-cases, for example the viewer-components, we can avoid needlessly including it in e.g. the MOZCENTRAL build.",False
071e6bc7e77754d9f1f13a84a05851d23a657971,2023-05-29 22:26:10,Tim van der Meij,"Merge pull request #16489 from timvandermeij/puppeteer

Update Puppeteer to version 20",True
ca620e4cc9e415190c012a7031be803cb0f76f80,2023-05-29 19:15:24,Tim van der Meij,"Update Puppeteer to version 20

This commit makes the following required changes:

- Replace custom cache trimming logic in favor of the (per our request)
  newly added `trimCache` method in Puppeteer. Not only does this greatly
  simplify our code and prevents having to import Puppeteer internals,
  it's also necessary because Puppeteer 20 removed the `BrowserFetcher`
  API in favor of the new separate `@puppeteer/browsers` package.
- Start browsers in series instead of in parallel. Parallel browser
  starts broke since Puppetter 19.1.0 and it turns out that it has never
  been supported officially, so it worked more-or-less by accident.
  Starting browsers in series is the supported way, is almost equally
  fast and ensures that we avoid any race conditions during startup.
  Finally, it also allows us to remove the `browserPromise` state on our
  session objects.

Fixes #15865.",False
7f6f33da3c2c27d1895c92555339e9443c6550c8,2023-05-29 17:53:44,Tim van der Meij,"Merge pull request #16487 from timvandermeij/bump

Bump versions in `pdfjs.config`",True
1096e69879fa01c59baccb185379fec105b3468a,2023-05-29 17:46:43,Tim van der Meij,Bump versions in `pdfjs.config`,False
036f855dca765a92e41ccf71f5da3bfba31dc829,2023-05-29 16:26:24,Tim van der Meij,"Merge pull request #16484 from Snuffleupagus/PDFSidebar-onUpdateThumbnails

Re-factor updating of thumbnails in the `PDFSidebar`-class",True
f06d0b2a9e50e9c9628cbf1bee948322934735a2,2023-05-29 00:12:59,calixteman,"Merge pull request #16483 from calixteman/bug1529502

[OTS] Remove cntrmask instruction with no stem in charstring (bug 1529502)",True
78e6020a6e9ead3c207ef8ea4a82fce5a9a8301a,2023-05-28 22:33:37,Calixte Denizet,[OTS] Remove cntrmask instruction with no stem in charstring (bug 1529502),False
c4c8227d20b2a1662e8e119bfcabe2ca6e8738cc,2023-05-28 21:24:34,Jonas Jenwald,"Re-factor updating of thumbnails in the `PDFSidebar`-class

This patch does two things:
 - Moves the updating of thumbnails into `web/app.js`, via a new `PDFSidebar` callback-function, to avoid having to include otherwise unnecessary parameters when initializing a `PDFSidebar`-instance.
 - Only attempt to generate thumbnail-images from pages that are *cached* in the viewer. Note that only pages that exist in the `PDFPageViewBuffer`-instance can be rendered, hence it's not actually meaningful to check every single page when updating the thumbnails.
   For large documents, with thousands of pages, this should be a tiny bit more efficient when e.g. opening the sidebar since we no longer need to check pages that we know have not been rendered.",False
0e604f8f42c378f4385f7498f44078c51a03c348,2023-05-28 19:03:23,Jonas Jenwald,Use local variables more in `PDFViewerApplication._initializeViewerComponents`,False
60feb2d5b65353659df0102635dc194a26742ded,2023-05-28 17:45:24,Tim van der Meij,"Merge pull request #16470 from Snuffleupagus/thumbnailrendered-event

Introduce a ""thumbnailrendered"" event to simplify cleanup after thumbnail rendering (PR 12613 follow-up)",True
9b3e1d41ae2aded6fa519b89ddd19ec8be8c5c55,2023-05-28 17:42:32,Tim van der Meij,"Merge pull request #16481 from Snuffleupagus/update-packages

Update packages and translations",True
b51bbdf055853ab9ac6c119d929b35d82d7bee7a,2023-05-28 13:14:15,Jonas Jenwald,Update l10n files,False
0e129c9e5e1bee113e6ab64ff8aa335146dc3623,2023-05-28 13:09:34,Jonas Jenwald,Update npm packages,False
bc8523ac2947d0bacc6b13a6105a037b8d9c5dcd,2023-05-26 19:00:22,Jonas Jenwald,"Introduce a ""thumbnailrendered"" event to simplify cleanup after thumbnail rendering (PR 12613 follow-up)

The way that the cleanup was implemented in PR 12613 has always bothered me slightly, since the `isPageCached`-method that I introduced there always felt quite out-of-place in the `IPDFLinkService`-implementations.
By introducing a new ""thumbnailrendered"" event, similar to the existing ""pagerendered"" one, we're able to move the cleanup handling into the `PDFViewer`-class instead.",False
6d8810b55c42ec15b15e7fa6d2d1372c8ec98e72,2023-05-26 18:55:55,Jonas Jenwald,"Merge pull request #16479 from Snuffleupagus/PDFFindController-onIsPageVisible

Re-factor the `isPageVisible`-handling in the find-controller (PR 10217 follow-up)",True
d0bf505312c7fd00024d2f55e094c519a0bb86b0,2023-05-26 17:29:39,Jonas Jenwald,"Re-factor the `isPageVisible`-handling in the find-controller (PR 10217 follow-up)

The way that this was implemented in PR 10217 has always bothered me slightly, since the `isPageVisible`-method that I introduced there always felt quite out-of-place in the `IPDFLinkService`-implementations.
Hence this is instead replaced by a callback-function in `PDFFindController`, to handle the page-visibility checks. Note that since the `PDFViewer`-constructor always sets this callback-function, e.g. the viewer-component examples still work as-is.",False
cbc4b20b12dd3a424039e25a94ce705b4649e0e1,2023-05-26 14:13:40,calixteman,"Merge pull request #16474 from calixteman/issue16473

Reset the formatted value when after a text field has been modified",True
be5db130051cfd3528b0b2c582a8970d94f27bbe,2023-05-26 13:47:14,Calixte Denizet,Reset the formatted value when after a text field has been modified,False
2bf68f3c7fc0aa2ac1632761aaf6d6596e84e913,2023-05-26 13:03:48,Jonas Jenwald,"Merge pull request #16472 from calixteman/issue16471

Extract all the text of text annotations",True
35a58ed9871159d5f46a33037c3d480b39824ce5,2023-05-26 02:41:42,Calixte Denizet,Extract all the text of text annotations,False
2890c464da10e4ada1d1df0dbf0f5454109f471e,2023-05-26 01:53:10,Jonas Jenwald,"Merge pull request #16466 from Snuffleupagus/gv-rm-Toolbar-stub

[GeckoView] Remove the `Toolbar`-stub since the viewer has an actual toolbar now",True
8d5da54cd5982707d3fb33307a09a28302741a69,2023-05-24 20:30:14,calixteman,"Merge pull request #16467 from calixteman/non_null_ultimate

Avoid to have a null fallback if none has been provided",True
ba654343e131bbe4ff9165d4befacf1ad0b522bc,2023-05-24 19:34:12,Jonas Jenwald,"Merge pull request #16451 from Snuffleupagus/Wingdings

Attempt to improve non-embedded Wingdings font support (bug 1652224)",True
5a7beb9f3021239dfed97248133e4b847298de28,2023-05-24 18:29:13,Jonas Jenwald,"Attempt to improve non-embedded Wingdings font support (bug 1652224)

Now that font-substitution has been implemented, we should be able to do much a better job at supporting non-embedded Wingdings fonts.
Given that this is a Windows-specific font, see https://en.wikipedia.org/wiki/Wingdings, this is however not guaranteed to work (well) on other platforms.",False
7dce0a27f6abfe59066e71c7ab0f175fc0ec08b9,2023-05-24 18:14:36,Calixte Denizet,Avoid to have a null fallback if none has been provided,False
76ca395c32affa72b950edbd3c71f76f0b5e9e9f,2023-05-24 16:01:27,Jonas Jenwald,[GeckoView] Remove the `Toolbar`-stub since the viewer has an actual toolbar now,False
daa48e5305decb72c9a12b5d991200b5e90e8f2a,2023-05-24 15:26:59,Jonas Jenwald,"Merge pull request #16465 from Snuffleupagus/issue-16464

Ignore named encoding for non-embedded symbol fonts (issue 16464)",True
aeed6f2b678ec84bf3491435f6d881bcd4f35094,2023-05-24 14:18:47,Jonas Jenwald,"Ignore named encoding for non-embedded symbol fonts (issue 16464)

The affected font is non-embedded ZapfDingbats, however the PDF document for some inexplicable reason specifies the encoding as ""WinAnsiEncoding"" (which is obviously wrong).
To work-around this bug in the PDF generator, we'll simply ignore any explicitly specified named encoding for non-embedded symbol fonts.",False
a6f9505a394f7b6e4c941c6f3303ecbc9e15dcb4,2023-05-24 01:53:22,Jonas Jenwald,"Merge pull request #16461 from Snuffleupagus/issue-16454

Improve ""EI"" detection in inline images (PR 12028 follow-up, issue 16454)",True
188601287463b38bc70160d6f630fc33e9ce5d75,2023-05-24 00:56:58,calixteman,"Merge pull request #16462 from calixteman/last_elem_TJ

Take into account the final space if any in the TJ command",True
7cfe00a19014157c563d8b64d214b89a5838c958,2023-05-23 22:50:24,calixteman,"Merge pull request #16445 from calixteman/smoothing

[Editor] Improve curve smoothing for Ink tool (bug 1789443)",True
d2b4ed3ceac4f3fca48508b5e6a9a9a647da5fe8,2023-05-23 20:45:21,Calixte Denizet,"[Editor] Improve curve smoothing for Ink tool (bug 1789443)

- Remove the dependency on fit-curve;
- Improve the way to draw the current line in using a Path2D and
  in clearing only the last part of the curve instead of clearing
  all the canvas;
- Smooth the curve when drawing to avoid to have some changes after
  the drawing ends;
- Make the smoothing a bit less agressive.",False
a76a69e1ed765f8bad2f3a172aa980514e78b294,2023-05-23 20:39:32,Calixte Denizet,"Take into account the final space if any in the TJ command

The final space was just ignored and that led to wrongly position
the next chunk of text.",False
dfbbb8c0ac4a9d5c56a537a0ce376efde218270c,2023-05-23 20:34:51,Jonas Jenwald,"Improve ""EI"" detection in inline images (PR 12028 follow-up, issue 16454)

Given that inline images may contain ""EI""-sequences in the image-data itself, actually finding the end-of-image operator isn't always straightforward.
Here we extend the implementation from PR 12028 to potentially check all of the following bytes, rather than stopping immediately. While we have fairly decent test-coverage for this code, whenever you're changing it there's unfortunately a slightly higher than normal risk of regressions. (You'd really wish that PDF generators just stop using inline images.)",False
094fb3c783ce171b02b34c365968986ea7846de5,2023-05-22 20:38:43,calixteman,"Merge pull request #16453 from calixteman/gv_telemetry

[GeckoView] Add some telemetry for the toolbar buttons (bug 1829216)",True
7f1e8d1920f0a74d997b891742df48b86198b83c,2023-05-22 20:13:09,Calixte Denizet,[GeckoView] Add some telemetry for the toolbar buttons (bug 1829216),False
1c4e4b4092f7c6a7c75c8378dcf6db6fd83e116e,2023-05-21 21:10:36,calixteman,"Merge pull request #16450 from calixteman/issue16300

Sanitize the glyph bounding box",True
ca12bca2764c3b80cd4490cdd53b49804582ec4e,2023-05-21 19:54:41,Calixte Denizet,"Sanitize the glyph bounding box

- if the contours count is lower than -1, the glyph is really likely wrong
so just remove it from the font;
- if a contour has the repeat flag then repeats count mustn't be 0.",False
d09c27d231e64f51ec8776b4ebc28f3366097e78,2023-05-21 15:55:28,Tim van der Meij,"Merge pull request #16449 from Snuffleupagus/attachments-viewer-rm-sort

Stop trying to sort the attachments in the sidebar",True
14fd59c4d0d787557363212b9e4684fc975345d2,2023-05-21 13:24:24,Jonas Jenwald,"Stop trying to sort the attachments in the sidebar

Looking at the behaviour in Adobe Reader it doesn't appear that attachments are sorted alphabetically, hence it doesn't seem necessary for us to do so either in the viewer.
An additional benefit of *not* sorting the attachments is that any ""actual"" attachments are now always placed at the top of the list in the sidebar, and if any `FileAttachment`-annotations exist in the document they will now be appended at the end.",False
65e23432cdaaec515aa49f6387585e4134271410,2023-05-21 00:36:40,calixteman,"Merge pull request #16448 from calixteman/improve_rescaleandstroke

Improve performance of canvas::rescaleAndStroke by around 30% (bug 1135277)",True
e5454be0f2a16401e6fb15cef7e541f76a4434a4,2023-05-20 21:51:25,Calixte Denizet,"Improve performance of canvas::rescaleAndStroke by around 30%

The pdf linked in bug 1135277 contains a lot of stroke instructions.
In using the Firefox profiler, this patch helps to reduce the overall
spent time in this function by 30%.",False
1d74936ea9fd755c3e17462a5b0b5d48cc9dedbf,2023-05-20 15:50:52,Tim van der Meij,"Merge pull request #16446 from Snuffleupagus/bug-1365930

Extend `getNonStdFontMap` for non-embedded Impact fonts (bug 1365930)",True
f657de7de2c615b4c7d861ceaa8fd95f3865fd2d,2023-05-19 22:10:03,Jonas Jenwald,"Extend `getNonStdFontMap` for non-embedded Impact fonts (bug 1365930)

According to https://en.wikipedia.org/wiki/Impact_(typeface) this font should be available on all current versions of Windows, and with the recently added font-substitution we should actually be able to render it correctly (at least on Windows).",False
38287d943532eee939ceffbe6861163f93805ca7,2023-05-19 15:06:06,Tim van der Meij,"Merge pull request #16443 from Snuffleupagus/idFactory-shorter

[api-minor] Slightly shorten some `idFactory` strings",True
8c4821ceda4cc70d478b471f4174972c25a38437,2023-05-19 02:02:10,Jonas Jenwald,"[api-minor] Slightly shorten the marked-content ids used in the textLayer

Generally we try to keep the ids that we create short, hence we can slightly shorten the ""static"" parts of them.",False
04de155aaa495c9075e154c4c2c5e428a536e2cf,2023-05-19 01:57:11,Jonas Jenwald,"Slightly shorten the `loadedName`-ids used with font-substitutions

Generally we try to keep the ids that we create short, hence we can slightly shorten the ""static"" part of them.",False
3be66f59d62250c5e2686547fde98a1736149a8d,2023-05-19 00:26:00,Jonas Jenwald,"Merge pull request #16440 from Snuffleupagus/more-modern-JS

Introduce even more modern JavaScript features in the code-base",True
e8537e4d308dfac8a29501d92ddcad42f1106913,2023-05-18 23:40:31,calixteman,"Merge pull request #16439 from calixteman/issue14755

Flush the current chunk when the font changed because of a restore op (issue #14755)",True
3091e70aad24a3024ba7afc0f3e502248152068c,2023-05-18 23:07:16,Calixte Denizet,Flush the current chunk when the font changed because of a restore op (issue #14755),False
e8030752f37a66ec73399d5494bb45ad5220deb5,2023-05-18 22:25:41,Jonas Jenwald,"Introduce even more modern JavaScript features in the code-base

After PR 12563 we're now free to use e.g. logical OR assignment, nullish coalescing, and optional chaining in the entire code-base.",False
a24d5b629ecebccca4e2758a87635b743d74c9cc,2023-05-18 20:57:39,calixteman,"Merge pull request #16438 from mozilla/loc_note_openinapp

Add a localization note to explain that 'Open in app' strings are for mobile (bug 1833858)",True
77f8fd91ecd41434f61a291769211f8eb4355405,2023-05-18 20:13:12,Marco Castelluccio,Add a localization note to explain that 'Open in app' strings are for mobile (bug 1833858),False
356f3cf2856db4113c4489c0398ac7b32cbc93c5,2023-05-18 17:06:00,Jonas Jenwald,"Merge pull request #16437 from Snuffleupagus/loadFont-simpler-fontID

Simplify the `fontID` handling in `PartialEvaluator.loadFont`",True
4355e76c603f2944228c380ba66770ecd4227ab1,2023-05-18 16:39:08,Jonas Jenwald,"Simplify the `fontID` handling in `PartialEvaluator.loadFont`

The `fontID` handling is quite old and predates the use of the `idFactory` to generate a unique id for each font, hence we can simplify this code a little bit.",False
ac8032628bea81c71959d4a435f615967f384e12,2023-05-18 16:10:08,Tim van der Meij,"Merge pull request #16424 from Snuffleupagus/core-optional-chaining

Introduce more optional chaining in the `src/core/` folder",True
839be801a0d943d3426d4115f8f42b93de69e102,2023-05-17 20:18:59,calixteman,"Merge pull request #16433 from calixteman/bug1825002

For text widgets, get the text from the AP stream instead of from the format callback (bug 1825002)",True
177036e6aee6c7b31d8aa0b5ab0de3cd3aef824e,2023-05-17 17:37:28,Calixte Denizet,"For text widgets, get the text from the AP stream instead of from the format callback (bug 1825002)

When fixing bug 1766987, I thought the field formatted value came from
the result of the format callback: I was wrong. The format callback is ran
but the value is unused (maybe it's useful to set some global vars... or
it's just a bug in Acrobat). Anyway the value to display is the one rendered
in the AP stream.
The field value setter has been simplified and that fixes issue #16409.",False
46bbabbd5df2682a3498ff5a89f227eb1f7e79b3,2023-05-17 16:00:08,Jonas Jenwald,"Merge pull request #16434 from Snuffleupagus/issue-16432

Attempt to fallback to a default font, for non-available ones, in more cases (issue 16432)",True
bfb374dbf66cc061b015853a57a85fed76d9119b,2023-05-17 15:11:08,Jonas Jenwald,"Attempt to fallback to a default font, for non-available ones, in more cases (issue 16432)

This essentially extends PR 11218 to also apply when looking up the final font-reference, via the XRef-table, fails because the font isn't available.

This patch also changes `PartialEvaluator.fallbackFontDict` to simply use ""Helvetica"" as the default font-name, since that seems generally reasonable given the now existing font-substitution code.",False
5ae353cf4da5e7fb6e01c166aa5f4f02f12e083a,2023-05-16 18:55:16,calixteman,"Merge pull request #16431 from calixteman/warn_missing_os_font

Warn when pdf.js can't load an OS font",True
385f275ad994217bc839f93d62a011fe635cbaaf,2023-05-16 18:28:38,Calixte Denizet,Warn when pdf.js can't load an OS font,False
95ab2b8b178ed3e667ec37fe34401ebb725ac04a,2023-05-16 13:44:00,Jonas Jenwald,"Merge pull request #16430 from Snuffleupagus/npm-lockfile-version-3

Update `package-lock.json` to lockfileVersion=3",True
cc46d303e9e5f5b0ccb2f5bd38f4f51d57a54440,2023-05-16 13:20:57,Jonas Jenwald,"Update `package-lock.json` to lockfileVersion=3

This reduces the size of the `package-lock.json` file a lot, and given that we recently updated the minimum supported Node.js version to 18 this shouldn't be a problem; please also see
 - https://docs.npmjs.com/cli/v9/configuring-npm/package-lock-json#lockfileversion
 - https://docs.npmjs.com/cli/v9/using-npm/config?v=true#lockfile-version",False
2c0478ecb2aa144230f8afbda5f411f82cb2b4fa,2023-05-16 00:55:29,calixteman,"Merge pull request #16426 from calixteman/generate_fallback_one_time

For non-embedded fonts, don't generate the fallback several times",True
4e8dd54e8e74495af41e862fd01fdd12dae93398,2023-05-15 23:32:45,Calixte Denizet,"For non-embedded fonts, don't generate the fallback several times",False
107874fcd4855116d6258983345be616ff03f289,2023-05-15 23:28:53,calixteman,"Merge pull request #16420 from calixteman/simplify_subst

Simplify the code to generate font substitution information",True
b264e0301a87c76e6d137163198e6bb92e1f2a87,2023-05-15 22:47:52,Calixte Denizet,Simplify the code to generate font substitution information,False
5f91d39f13caba20467c46e60be5d2e178071189,2023-05-15 21:56:28,calixteman,"Merge pull request #16425 from calixteman/gv_nimbus

[GeckoView] Add a Nimbus experiment for the toolbar (bug 1833093)",True
4ed512ab2cfb564ced6a0beb98d20a0bc4b455c4,2023-05-15 20:48:14,Calixte Denizet,[GeckoView] Add a Nimbus experiment for the toolbar (bug 1833093),False
1b4a7c5965dee7fbce8f801fa30d5f3fc92be183,2023-05-15 16:08:28,Jonas Jenwald,"Introduce more optional chaining in the `src/core/` folder

After PR 12563 we're now free to use optional chaining in the worker-thread as well. (This patch also fixes one previously ""missed"" case in the `web/` folder.)

For the MOZCENTRAL build-target this patch reduces the total bundle-size by `1.6` kilobytes.",False
c20c1b336216e8f4e986930714e9a5ed095eb22f,2023-05-15 13:39:17,Jonas Jenwald,"Merge pull request #16422 from Snuffleupagus/getFontSubstitution-css-tests

Check the `css` property in the `getFontSubstitution` unit-tests",True
cb1a10e3587c185bc2d047d44551ab144da65ed6,2023-05-14 22:41:35,Jonas Jenwald,"Check the `css` property in the `getFontSubstitution` unit-tests

Given that the `css` property isn't constant, since it contains document/font ids, we cannot just check it directly. However, we can make use of regular expressions to ensure that the format is generally correct.",False
4101128c09a2b946f8cbc23efb3b1022dc3defde,2023-05-14 21:53:12,calixteman,"Merge pull request #16421 from calixteman/font_subst_test

Add tests for the font substitution",True
89140fcd982043718ebcd5d90d8e10bbce764f33,2023-05-14 21:37:03,Calixte Denizet,Add tests for the font substitution,False
9cbc2c389fed0a2e48790d4e0baf7393ea1b5297,2023-05-14 17:33:46,Jonas Jenwald,"Merge pull request #16418 from Snuffleupagus/jasmine-5

Update `jasmine` to version 5",True
95ac708fbddda11b36f5c781c08ef1caddaf168a,2023-05-14 16:34:08,Jonas Jenwald,"Update `jasmine` to version 5

Despite this being a *major* version increase, it doesn't appear to require any updates in our test-suites.
Note in particular that the minimum supported browsers/environments were updated, however this isn't a problem given our recent support-changes in the PDF.js library.

Please find additional details at https://github.com/jasmine/jasmine/blob/main/release_notes/5.0.0.md",False
693092c9802afb901a2af975818686cd48d17b32,2023-05-14 16:11:11,Tim van der Meij,"Merge pull request #16415 from Snuffleupagus/no-useless-promise-resolve-reject

Enable the `unicorn/no-useless-promise-resolve-reject` ESLint plugin rule",True
521bea4f8fbfc9c0c80e54c4209cf846c7a230ea,2023-05-14 16:10:22,Tim van der Meij,"Merge pull request #16417 from Snuffleupagus/update-packages

Update packages and translations",True
202496a7ca682130874ac7bf284fe7296762e5c0,2023-05-14 15:57:55,calixteman,"Merge pull request #16416 from calixteman/use_local_font_2

For missing font, use a local font if it exists even if there's no standard substitution",True
62f47588b402b5803eaa45f3a731f3fc29b13e99,2023-05-14 13:45:01,Jonas Jenwald,Update l10n files,False
d25994e85df21c03191bc28f7b5c6bb02a0416c5,2023-05-14 13:42:06,Jonas Jenwald,Update npm packages,False
d4b70ec30664a5ebc10dbdd401197e1d644617b7,2023-05-14 01:24:27,Calixte Denizet,"For missing font, use a local font if it exists even if there's no standard substitution

If the font foo is missing we just try lo load local(foo) and maybe
we'll be lucky.",False
8fbd6755eb19ddeab0ef3493b73e6779e1097057,2023-05-13 15:00:25,Jonas Jenwald,"Enable the `unicorn/no-useless-promise-resolve-reject` ESLint plugin rule

Please see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-useless-promise-resolve-reject.md

Note that this patch also re-sorts the existing `unicorn`-rules in proper alphabetical order.",False
e738e15aa397ef91b75fcf952abd0d368b232f20,2023-05-12 13:45:35,Tim van der Meij,"Merge pull request #16413 from Snuffleupagus/PDFSidebar-inline-resizing

Move the sidebar-resizing handling into the `PDFSidebar` class",True
a5336d9d79f81956c563453e9ff9bf155661c136,2023-05-12 13:41:53,Tim van der Meij,"Merge pull request #16401 from Snuffleupagus/Safari-15.4

[api-minor] Update the minimum supported Safari version to 15.4",True
8f3940fbf30c8584a74bb1ec5d0fc3c65ceab524,2023-05-12 13:30:12,Jonas Jenwald,"Move the sidebar-resizing handling into the `PDFSidebar` class

Originally the `PDFSidebarResizer` class was slightly larger, since the code used to contain e.g. feature testing for older (and no longer supported) browsers.
Given that there's some amount of overlap, when it comes to what DOM-elements and state that these classes need, it now seems reasonable to simply move the sidebar-resizing into the `PDFSidebar` class.

For the MOZCENTRAL build-target this patch reduces the size of the *built* `web/viewer.js` file by just over `1.1` kilobytes.",False
9417a37c718811b8c5212f17737e6a45d07573e8,2023-05-11 16:40:39,Jonas Jenwald,"Merge pull request #16410 from Snuffleupagus/toggleExpandedBtn

Reduce some duplication when toggling ""expanded"" buttons in the viewer toolbars",True
0305b04e267c6de74fef946ab99a2781f13a03e3,2023-05-11 15:34:16,Jonas Jenwald,"Add the ""aria-controls"" attribute to the editor-toolbar buttons

Similar to other toolbar/secondaryToolbar buttons that open toolbars or dialogs, it seems reasonable to use ""aria-controls"" for the editor-toolbar buttons as well.",False
362be760e3af10de9f5361c0342cfb88336cd153,2023-05-11 15:34:14,Jonas Jenwald,"Reduce some duplication when toggling ""expanded"" buttons in the viewer toolbars

This is very similar to PR 16281, but for buttons that use the ""aria-expanded"" attribute.",False
d520754bcf32990259503682956bc24399c6bc76,2023-05-11 00:11:51,calixteman,"Merge pull request #16408 from calixteman/local_font_cache

Add a cache to avoid to load several times a local font",True
cfb908c999359e32ac87a8e3aa3d391fd4635dd4,2023-05-10 23:31:21,Calixte Denizet,"Add a cache to avoid to load several times a local font

On my computer, it takes few tenths of a second to load a local font.
Since a font can be used several times in a document, the cache will
improve performances.",False
2d2f7b315e6ec8d6b15f80751e4513bd4f273991,2023-05-10 17:49:05,calixteman,"Merge pull request #16363 from calixteman/use_local_font

[api-minor] Use a local font or fallback on an embedded one (if it exists) for non-embedded fonts (bug 1766039)",True
53134c0c0bb2d19244dd8c31aa4e8e6d01a657e4,2023-05-10 17:40:23,Calixte Denizet,"[api-minor] Use a local font or fallback on an embedded one (if it exists) for non-embedded fonts (bug 1766039)

- Replace FoxitSans with LiberationSans: LiberationSans is already there (for XFA) and we can use
it as a good replacement of FoxitSans.
- For now we just try to substitue standard fonts, the strategy is the following:
  * we try to find a font locally from a hardcoded list;
  * if it fails then we use Liberation as fallback (only for Helvetica for the moment);
  * else we just fallback on the system serif/sansserif/monospace font.",False
1a2e787e47cfb6178f5eeedc608fd9bd571cf0b3,2023-05-09 20:56:46,calixteman,"Merge pull request #16392 from calixteman/compress

Compress the data when saving annotions",True
248653684378ce118f152d260c2f7ab46b6aec57,2023-05-09 18:16:50,Calixte Denizet,"Compress the data when saving annotions

CompressionStream API has been added in Firefox 113
(see https://bugzilla.mozilla.org/show_bug.cgi?id=1823619)
hence we can use it to compress the streams with added/modified
annotations.",False
8f2d8f62f34e3a788673d9a622ba8dafaff05eef,2023-05-09 00:46:49,calixteman,"Merge pull request #16397 from calixteman/issue14565

Make something similar to Acrobat when Underline annotation has no appearance",True
d1adab8c7b9724ffd4e3111e7e64ac9df7ed5802,2023-05-07 18:31:15,Jonas Jenwald,"[api-minor] Update the minimum supported Safari version to 15.4

This patch updates the minimum supported browsers as follows:
 - Safari 15.4, which was released on 2022-03-15; see https://en.wikipedia.org/wiki/Safari_version_history#Safari_15

Nowadays we usually we try, where feasible and possible, to support browsers that are about two years old. The reasons for limiting support to a *somewhat* more recent Safari version include:
 - Throughout the history of the PDF.js project, Safari has always been the worst browser to attempt to support. Compared to other browsers there's a disproportionate number of bugs affecting Safari, especially on iOS, and in most cases those are browser-specific issues that we simply cannot address.[1]
 - Safari has often been a lot slower, compared to other browsers, at implementing new web-platform features. Historically this has sometimes blocked usage of new features, for the benefit of the Firefox PDF Viewer, and it's very often meant having to include and maintain polyfills *only* for Safari.
 - The current (minimum) supported Safari version lack enough functionality that polyfills placed in the `src/shared/compatibility.js` file are unfortunately not sufficient, but it also requires a bunch of special-cases in both the `gulpfile` and in the `web/`-code.
 - Given that the *built-in* Firefox PDF Viewer is the primary development target for the PDF.js library, and the general development pace these days, we need to limit the maintenance ""overhead"" caused by other browsers.

 ---
 [1] In a few cases a work-around might be possible, however it'd negatively affect e.g. performance, readability, and/or maintainability of the code.",False
2c2acdfd1c402d7b51b55264c05e4e2777e77739,2023-05-07 18:30:42,Jonas Jenwald,"Revert ""Add a `<dialog>` polyfill for the `generic-legacy` build""

This reverts commit c9f262c480e0d22fdcc6991700f9ce92b72812b2 now that Safari-compatibility is updated.",False
c5eb79577ae9926111e68382aa6f47fe8086166a,2023-05-07 18:30:42,Jonas Jenwald,"Revert ""Bundle the `<dialog>` polyfill-CSS in the GENERIC `legacy/`-viewer (PR 14710 follow-up)""

This reverts commit bb8f5ec20bf6a2fed1f962178b06bc4d99d1e2ef now that Safari-compatibility is updated.",False
cfa15bbf59aed5a34dc321a94f462368e44c0ccd,2023-05-07 18:30:42,Jonas Jenwald,"Revert ""Compatible with ResizeObserver borderBoxSize in legacy safari""

This reverts commit 6ca702d6804097514ecf4f5ded84efa87771182a now that Safari-compatibility is updated.",False
bfb664b9a1499b4d541fd5787a39136d915762ed,2023-05-07 18:24:05,Tim van der Meij,"Merge pull request #16398 from Snuffleupagus/xfa-optional-chaining

Introduce some optional chaining in the `src/core/xfa/` folder",True
7ecb3236f0134765c822165cc10b3297feeb01ea,2023-05-07 18:18:26,Tim van der Meij,"Merge pull request #16293 from Snuffleupagus/Node-18

[api-minor] Update the minimum supported Node.js version to 18",True
dcd55a71647d9cfc4914a55a27c7df450f78c1b7,2023-05-07 17:13:19,Jonas Jenwald,"Enable `unicorn/prefer-at` unconditionally (PR 15014 follow-up)

Now that Node.js version 18 is required, we should be able to use `Array.prototype.at()` everywhere in the code-base.",False
f79f48c2b43688f284425887b492a9bc42c3d185,2023-05-07 17:13:19,Jonas Jenwald,"Remove the IMAGE_DECODERS special-case when polyfilling `structuredClone`

Originally we only used the `structuredClone` polyfill in the `LoopbackPort`-implementation, and that obviously isn't used anywhere within the various image decoders.
At this point in time we've started to use `structuredClone` a little bit more, hence it seems overall simpler to just bundle the polyfill even in the `legacy`-version of the IMAGE_DECODERS built-target.",False
1753e321cd1b62198925741ba902e8e92de19e6c,2023-05-07 17:13:19,Jonas Jenwald,"Remove the compatibility checks in `WorkerMessageHandler.createDocumentHandler`

For some time these checks have only targeted Node.js environments, since the features in question exist in all supported browsers (even when a `legacy`-build is used).

Now that we've updated the minimum supported Node.js version to 18, a number of polyfills are thus (finally) no longer necessary in that environment. Hence for certain *basic* functionality, such as e.g. text-extraction, it's now possible to use either a modern- or a `legacy`-build of the PDF.js library in Node.js environments.

*Please note:* For e.g. canvas-rendering in Node.js environments it's still necessary to use a `legacy`-build, since that functionality requires various polyfills.",False
ed8be6f88243056830f6f8e797cde25c11cadc90,2023-05-07 17:13:19,Jonas Jenwald,"[api-minor] Update the minimum supported Node.js version to 18

This patch updates the minimum supported environments as follows:
 - Node.js 18, which was released on 2022-04-19; see https://en.wikipedia.org/wiki/Node.js#Releases

Note also that Node.js 16 will soon reach EOL, and thus no longer receive any security updates.",False
eca40773b80bd0befa058fef95c203af08c3ea8b,2023-05-07 17:03:09,Tim van der Meij,"Merge pull request #16399 from timvandermeij/bump

Bump versions in `pdfjs.config`",True
594ce65a47a9e6b71b4f8d483826c0e54ff80de8,2023-05-07 16:52:16,Tim van der Meij,Bump versions in `pdfjs.config`,False
89f768322d088421d6ee076de6e605c8dd184a72,2023-05-07 16:19:07,Jonas Jenwald,"Introduce some optional chaining in the `src/core/xfa/` folder

After PR 12563 we're now free to use optional chaining in the worker-thread as well.",False
6c0fdc6ec20856574de7f2097cb2d1417b3d660b,2023-05-07 00:49:25,Calixte Denizet,Make something similar to Acrobat when Underline annotation has no appearance,False
4d3dfe254ffe90afff336ec28024e951b15ffad0,2023-05-06 20:29:05,Jonas Jenwald,"Merge pull request #16396 from Snuffleupagus/issue-16395

Improve handling of JPEG images with non-standard /Decode-entries (issue 16395)",True
722e5910e1f2a5a6dc695507fb923369a4f17886,2023-05-06 17:25:39,Jonas Jenwald,"Improve handling of JPEG images with non-standard /Decode-entries (issue 16395)

The /Decode-implementation in the our JPEG decoder, i.e. `src/core/jpg.js`, seems to only handle *inverting* of images properly. To support arbitrary /Decode-entries correctly we'll always use the `PDFImage.decodeBuffer` method, even for ""simple"" JPEG images, which should be fine since non-default /Decode-entries aren't a very common occurrence.

*Please note:* This patch will lead to a little bit of movement in some existing test-cases, however it should be virtually imperceivable to the naked eye.",False
3aa96e071b98839fa2782c5629a957336a6d13aa,2023-05-06 16:29:52,Tim van der Meij,"Merge pull request #16394 from Snuffleupagus/no-invalid-remove-event-listener

Enable the `unicorn/no-invalid-remove-event-listener` ESLint plugin rule",True
b4aa10bb868573d41525bd7dadbe00df16dc155b,2023-05-06 12:38:11,Jonas Jenwald,"Enable the `unicorn/no-invalid-remove-event-listener` ESLint plugin rule

This rule won't only be helpful when writing code, but will also help during reviews to make sure that we don't accidentally leave any event-listeners attached; please see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-invalid-remove-event-listener.md",False
da03d322ed4f9cbb0954938d7c6cc75d68c08cd0,2023-05-05 20:08:46,calixteman,"Merge pull request #16391 from calixteman/gv_open_in_app

[GeckoView] Add a button to download and open the file in an external app (bug 1829367)",True
a652dc85e4a6b9b9519d9b7b82470bd6a8af6db2,2023-05-05 19:22:15,Calixte Denizet,[GeckoView] Add a button to download and open the file in an external app (bug 1829367),False
f151a39d147fd725eb1bf863b427503f27bee9e5,2023-05-05 01:19:08,calixteman,"Merge pull request #16387 from calixteman/issue16384

[Annotations] Draw readonly annotations on their own canvas and show the HTML elements when there is a JS interaction (issue #16384)",True
72da14f005892d5e958426f6fc72244718596772,2023-05-04 23:38:32,Calixte Denizet,[Annotations] Draw readonly annotations on their own canvas and show the HTML elements when there is a JS interaction (issue #16384),False
a24e11a91cb289dded4241fba6818d9cf1bfb100,2023-05-04 23:18:57,calixteman,"Merge pull request #16106 from bungeman/improve_color_stop_detection

Better approximate gradient color stops",True
2fab583fb41b599b0509820618cd739042089529,2023-05-04 16:42:16,Jonas Jenwald,"Merge pull request #16379 from Snuffleupagus/sidebar-forceRendering

Simplify the `PDFSidebar.#forceRendering` method",True
9dcc50402e421c6f65cb74996db607cb83c8c4a5,2023-05-04 16:21:30,Jonas Jenwald,"Simplify the `PDFSidebar.#forceRendering` method

The fallback code-path has never really been used, since the `PDFSidebar` is only used in the default viewer (and has never been exposed in e.g. the COMPONENTS-build).",False
4931f293ebc868d0b94f78dace1df84d125086c5,2023-05-04 15:54:58,Jonas Jenwald,"Merge pull request #16374 from Snuffleupagus/thumbnail-styles

Simplify the thumbnail styling in the viewer",True
74c615b5b03a1c2cc8004fd21ae821585220459e,2023-05-04 15:47:51,Jonas Jenwald,Remove unused `canvas` clean-up code in `PDFThumbnailView.reset` (PR 13357 follow-up),False
1b6a83da4a0f32b309df5e1fb4143df7970f1915,2023-05-04 15:47:49,Jonas Jenwald,"Simplify the thumbnail styling in the viewer

This patch tries to simplify, and improve, the thumbnail styling:
 - For rendered thumbnails there's one less DOM-element per thumbnail, which can't hurt in longer documents.
 - Use CSS-variables to set the dimensions of all relevant DOM-elements at once.
 - Simplify the visual styling of the thumbnails, e.g. remove the border since the viewer no longer has visible borders around pages, since the relevant CSS-rules are quite old code.
   These changes also, at least in my opinion, makes the relevant CSS-rules much easier to understand and work with.
 - Make it easier to work on e.g. [bug 1690428](https://bugzilla.mozilla.org/show_bug.cgi?id=1690428) without affecting the other sidebarViews.",False
e89da6d9405b040a8f35a8557b62dcf3abae2e3c,2023-05-04 15:43:21,Jonas Jenwald,"Merge pull request #16375 from Snuffleupagus/pageViewsReady-tweak

Re-factor the `PDFViewer.pageViewsReady` getter slightly",True
667085ee33602e5315c98c956328f81011011efd,2023-05-04 15:39:04,Jonas Jenwald,"Merge pull request #16368 from Snuffleupagus/rm-GlobalImageCache-addPageIndex

Inline the `addPageIndex` method in `GlobalImageCache.shouldCache`",True
001acfb5aca9c0c4edfd621599f1af00601a6abb,2023-05-04 04:00:05,Jonas Jenwald,"Merge pull request #16381 from Snuffleupagus/rm-isStandardFont-prop

Remove the unused `isStandardFont` font-property (PR 15880 follow-up)",True
f31b3201132e74b2556919844e238829faf010d9,2023-05-04 03:27:17,Jonas Jenwald,"Merge pull request #12563 from Snuffleupagus/rm-SystemJS-worker

[api-minor] Remove SystemJS usage, in development mode, from the worker",True
ade1e52227f2441b7758168ae812206bd256fb29,2023-05-04 02:00:21,calixteman,"Merge pull request #16380 from calixteman/hcm_annotation_canvas

Apply HCM filters on annotations which have their own canvas (bug 1830850)",True
24a75bda5d442f930125641117307692d2cf8583,2023-05-03 15:22:54,Jonas Jenwald,"Remove the unused `isStandardFont` font-property (PR 15880 follow-up)

This property was added in PR 12726 specifically for use in the `getFontType` function, indirectly used by the `PDFDocumentProxy.stats` getter in the API.
In PR 15880 that functionality was removed, but I forgot to remove this now unused font-property.",False
c07149a44f0e1adb45ff0fcb02f7441fdd88fd6d,2023-05-03 13:49:59,Calixte Denizet,Apply HCM filters on annotations which have their own canvas (bug 1830850),False
c8246b072005b31562578f6ce6c565541e42fa2a,2023-05-01 02:02:13,Jonas Jenwald,Re-factor the `PDFViewer.pageViewsReady` getter slightly,False
88616f77aec785fe7f2bad36026e8118a775a2af,2023-04-29 17:19:39,Jonas Jenwald,Remove the closure from `BitModel` in the `src/core/jpx.js` file,False
b0a1af306da6ef5bf1aa9b567b15c21fcec6fb22,2023-04-29 17:19:38,Jonas Jenwald,"Simplify initialization of `static` class properties in the worker-thread

Now that we no longer depend on the old Babel version in SystemJS we can remove the `static get ...` work-arounds used to define constants, which leads to slightly more compact code.",False
d950b91c4eb1cbeb10a258981d08d39d902f9692,2023-04-29 17:19:37,Jonas Jenwald,Introduce some logical assignment in the `src/core/` folder,False
317abd6d0795b4b6c32ae8083c488ab5a6227fd2,2023-04-29 17:13:24,Jonas Jenwald,"Change the `createPromiseCapability` helper function into a `PromiseCapability` class

This is not only slightly more compact, but it also simplifies the handling of the `settled` getter.",False
f9c2a8d437d1b3c95088dba2758f99d62d0d2ff1,2023-04-29 17:13:24,Jonas Jenwald,Introduce some optional chaining in the `src/shared/` folder,False
94c2d089751dee63d7ad0da6b6e74856c5019d57,2023-04-29 17:13:24,Jonas Jenwald,"Revert ""Add a `getArrayLookupTableFactory` helper function and use it to re-format `src/core/{glyphlist, unicode}.js`""

This reverts commit 56fa6d414cb1115e03f9c1aa9f1d5bc52efcb7ac now that SystemJS is gone.",False
95bf9fc17f3827f24f01b223cf1838cfa4666c6f,2023-04-29 17:13:24,Jonas Jenwald,"Remove SystemJS usage, in development mode, from the worker

Now that https://bugzilla.mozilla.org/show_bug.cgi?id=1247687 has landed in Firefox, we're able to use worker-modules during development :-)

This removes the final piece of SystemJS usage from the PDF.js library, thus allowing a fair bit of clean-up, and we now use *only* native `import`/`export` statements everywhere in development mode.",False
797f8d3dca5e0770c83788b3b65387884031caa0,2023-04-29 15:06:33,Tim van der Meij,"Merge pull request #16370 from Snuffleupagus/publish-website-only-master

Limit the `publish_website.yml` work-flow to only the `master` branch (issue 16369)",True
16017d666994310068cde0e94f3d3c000a7e1f9e,2023-04-29 15:04:51,Tim van der Meij,"Merge pull request #16371 from Snuffleupagus/issue-16366

Include the entire `git` history in the work-flows (issue 16366)",True
7c1e505f6a557c03be9ba39df87a0c94621bed8f,2023-04-29 14:20:37,Jonas Jenwald,"Include the entire `git` history in the work-flows (issue 16366)

Without this change we're not able to correctly determine the version number, please refer to https://github.com/actions/checkout#fetch-all-history-for-all-tags-and-branches",False
09edd6657f0e9c6d47b31427ccae113d46a3764d,2023-04-28 14:01:52,Jonas Jenwald,"Limit the `publish_website.yml` work-flow to only the `master` branch (issue 16369)

This is a tentative patch, based on https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#using-filters",False
f28d915a4289a92261fcb0084564aa7ac47f8191,2023-04-28 13:49:08,Jonas Jenwald,"Merge pull request #16362 from SebCorbin/update-types

Update type documentations for #16307, #16359",True
bb1228cb64966ad2b42e621c0326b0e26004dd3d,2023-04-28 13:10:32,Jonas Jenwald,"Inline the `addPageIndex` method in `GlobalImageCache.shouldCache`

When the `GlobalImageCache` implementation originally landed, back in PR 11912, the image handling was slightly more complex (with e.g. browser-decoding of some JPEG images). At this point it no longer seems necessary to manually handle pageIndexes in this way, and we should be able to simply inline that in the `GlobalImageCache.shouldCache` method.",False
d18b9ee472dd6ffdd1544f6cc6a3f3adf45057c5,2023-04-28 12:58:21,Sebastien Corbin,Update type documentations for #16307 and #16359,False
9eea9993df57496a0ae7ee97dd00fb6732261953,2023-04-28 02:47:16,Marco Castelluccio,"Merge pull request #16364 from timvandermeij/github-pages

Introduce a GitHub Actions workflow for publishing the website",True
de42ecb59f695144d1402594ac81b768a7d7a374,2023-04-28 00:03:16,calixteman,"Merge pull request #16365 from calixteman/chmod_1

Chmod ugo-x gv-toolbarButton-download.svg",True
263ef59fc7dec2fab68f73e5f3688296d1f2e7d4,2023-04-27 23:57:27,Calixte Denizet,Chmod ugo-x gv-toolbarButton-download.svg,False
30ca27ac48ec9fde81e9388e23a917359941a7d0,2023-04-27 22:48:03,Tim van der Meij,"Introduce a GitHub Actions workflow for publishing the website

This commit migrates this functionality away from the bots. Nowadays
it's possible to build and deploy the website to GitHub Pages directly
through the GitHub Actions, which provides a nice simplication of the
process. Not only does this remove the requirement to have a `gh-pages`
branch in the repository, it also avoids the complexity of having to
configure the workflow to commit to Git branches and allows us to remove
the Git committing code from the Gulpfile.

Note that deploying directly though GitHub Actions workflows needs to be
enabled in the repository settings, but this is easy and well documented
on the link below.

The following resources are relevant for this patch:

- Enabling deployment to GitHub Pages directly through GitHub Actions:
  https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site#publishing-with-a-custom-github-actions-workflow
- Uploading GitHub Pages artifacts example:
  https://github.com/actions/upload-pages-artifact#usage
- Deploying GitHub Pages artifacts example:
  https://github.com/actions/deploy-pages#usage",False
4dee3b83d521347541072c597ffd30376aa90897,2023-04-27 20:48:41,calixteman,"Merge pull request #16344 from calixteman/intermittent_integration_test

Fix two intermittents issues in integration tests",True
cefa8c601a4d710ffd8be68f7332f1266be4d07f,2023-04-27 20:46:32,Jonas Jenwald,"Merge pull request #16361 from timvandermeij/jsdoc-pdfvieweroptions

Declare the `linkService` and `l10n` properties as optional in the `PDFViewerOptions` documentation",True
8259fb4d2f9a38e4e070c042d2f1c593c468f713,2023-04-27 19:09:29,Tim van der Meij,"Declare the `linkService` and `l10n` properties as optional in the `PDFViewerOptions` documentation

Both properties have a fallback to `SimpleLinkService` respectively
`NullL10n` if no other value is provided explicitly.",False
34ee77396c97a8793f7b6ca9c6143c32ae0d88d1,2023-04-27 17:53:18,Tim van der Meij,"Merge pull request #16356 from Snuffleupagus/issue-16355

Update the styling of the findbar `findMsg`-element (issue 16355)",True
0ee0fcc6b3e6f602f5df97d29d09294d359ba525,2023-04-27 17:31:55,Tim van der Meij,"Merge pull request #16350 from Snuffleupagus/dist-rm-lib

[api-minor] Stop including the ""lib""-build in the `pdfjs-dist` repository",True
a86265f7b7e8bde6d6a12ef75f62f4a255bf2b63,2023-04-27 17:30:50,Tim van der Meij,"Merge pull request #16354 from Snuffleupagus/crypto-less-stringToBytes

Avoid some repeated `stringToBytes`-calls in the `src/core/crypto.js` file",True
13b168f1bb70faa3d25c42f1332fd0daed993c92,2023-04-27 17:29:23,Tim van der Meij,"Merge pull request #16357 from Snuffleupagus/network-rm-getXhr

Remove the unused `getXhr`-option in the `NetworkManager` constructor",True
924a8901d151596617ea4cdb8ac98be553795109,2023-04-27 15:02:32,Jonas Jenwald,"Remove the unused `getXhr`-option in the `NetworkManager` constructor

Originally this file was shared, using pre-processor statements, between the generic PDF.js library and the *built-in* Firefox PDF Viewer. In the latter case the `getXhr`-option is being used, see https://searchfox.org/mozilla-central/rev/f32d5f3949a3f4f185122142b29f2e3ab776836e/toolkit/components/pdfjs/content/PdfStreamConverter.sys.mjs#612-621",False
89ea6b3bb68ddf769254ceaf8f2fad355cffc093,2023-04-27 01:41:02,Jonas Jenwald,"Update the styling of the findbar `findMsg`-element (issue 16355)

This patch tries to mimic the look of the message-element in the Firefox browser-findbar, and thus makes the following changes:
 - Remove the red colour, since it didn't take the light/dark themes into account.
 - Display the ""notFound"" message in bold.",False
e12535457fe01f93c66fec3c3a9f90460badad52,2023-04-26 21:22:46,Jonas Jenwald,"Avoid some repeated `stringToBytes`-calls in the `src/core/crypto.js` file

Currently we repeatedly lookup, and convert to bytes, the ""O"" and ""U"" encryption-dictionary entries.",False
62a9435190463cc3c78f63aec810c330db92a715,2023-04-26 15:41:13,Jonas Jenwald,"[api-minor] Stop including the ""lib""-build in the `pdfjs-dist` repository

The `pdfjs-dist/lib/` directory contains a README file that explicitly advises against using those files, however based on a fairly large number of issues filed over the years users seem to be (mostly) overlooking that warning.
In particular it unfortunately seems to be somewhat common for users to attempt to ""combine"" proper builds from `pdfjs-dist/build/` together with individual components from the `pdfjs-dist/lib/web/` directory, which more often than not leads to subtle bugs and general problems.

When we receive bug reports about this it's often not immediately obvious what the problem is, given that many issues lack enough details (such as runnable test-cases), but after some back-and-forth it usually turns out that usage of `pdfjs-dist/lib/` is the culprit.
Considering that keeping the general PDF.js library working is challenging and time-consuming enough nowadays, this patch thus proposes that we stop including the ""lib""-build in the `pdfjs-dist` repository to both reduce user confusion and the support burden.",False
598408b7af9688e4a85d47fe47227ce32f993017,2023-04-26 11:54:17,Jonas Jenwald,"Merge pull request #16347 from Snuffleupagus/getAllTextInProgress-no-copy

Prevent incomplete copy-all behaviour while text-extraction is running (PR 16286 follow-up)",True
2de6fd8e70b271ab85cc4e0af5b5aeee5b128691,2023-04-26 01:09:16,Jonas Jenwald,"Prevent incomplete copy-all behaviour while text-extraction is running (PR 16286 follow-up)

Currently we only prevent triggering the actual text-extraction multiple times in ""parallel"", when using the ""copy all text"" feature, however the ""copy""-event itself is not prevented.
The result is that if the user selects all text in a long PDF document and then uses the copy-shortcut multiple times in quick succession, we'll actually populate the clipboard with ""incomplete"" contents (via a `TextLayerBuilder` copy-listener) until all text-extraction finishes.",False
b4264e964830422b70242b479b6c6349249e3c69,2023-04-25 16:01:36,Calixte Denizet,Fix two intermittents issues in integration tests,False
495819fbc66ae53fcb086149d217de377fe0264c,2023-04-25 15:02:21,Jonas Jenwald,"Merge pull request #16333 from Snuffleupagus/enablePermissions-allow-text-selection

Allow text-selection, but not copying, when `enablePermissions` is set (PR 16320 follow-up)",True
8a9d7a18cc3d8065d3401eca143ed74b1f3efef8,2023-04-25 14:37:05,Jonas Jenwald,"Allow text-selection, but not copying, when `enablePermissions` is set (PR 16320 follow-up)",False
1b79b0cd210e38aab6e3420de5fe862a1c7f56c7,2023-04-24 18:05:35,calixteman,"Merge pull request #16340 from calixteman/gv_new_toolbar

[GeckoView] Change the toolbar for a static one on the top of the viewer (bug 1829366)",True
e00d26798ccb69663227c2deef1488c896c5700b,2023-04-24 17:33:23,Calixte Denizet,[GeckoView] Change the toolbar for a static one on the top of the viewer (bug 1829366),False
28f96d2ac2452ab6138a3c5001c708b74f466eda,2023-04-23 19:36:10,Tim van der Meij,"Merge pull request #16336 from timvandermeij/custom-event

Don't use the deprecated `CustomEvent.initCustomEvent` method anymore",True
870b94256819b347eebb96765226f404d3a0d3df,2023-04-23 19:11:02,Tim van der Meij,"Don't use the deprecated `CustomEvent.initCustomEvent` method anymore

In PR #16295 one occurrence of this was changed, but a few more remained
in the codebase. This commit fixes the other occurrences so that we
don't use the deprecated way of creating custom events anywhere anymore.

According to MDN, see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/initCustomEvent,
using the `CustomEvent.initCustomEvent` method is deprecated and the
`CustomEvent` constructor should be used instead.

Extends d9bf571f5c49e1cac9054cf6b7acfc0b5b719876.",False
2f86f5bb756903777045f0cddb94db8be4f2c48d,2023-04-23 19:09:06,Tim van der Meij,"Merge pull request #16338 from timvandermeij/updates

Update translations and packages",True
edb09855dc3991c71850f2deadc8ba52ce89680e,2023-04-23 18:07:51,Tim van der Meij,"Fix package vulnerabilities reported by `npm audit`

This commit is generated automatically using `npm audit fix`.",False
f6f33065efb98281a09913ae9acc31611998d8f2,2023-04-23 18:07:40,Tim van der Meij,"Update `mkdirp` to version 3.0.0

The only change in this major version is the removal of the default
export, so we must simply use the named export instead.",False
1b228091fa3dd81743efeeba09ed96db570f5d73,2023-04-23 17:42:17,Tim van der Meij,Update packages to the most recent versions,False
9c023c847ccc365ca4f6c70171567c6372146838,2023-04-23 17:42:05,Tim van der Meij,Update translations to the most recent versions,False
d6d3fdc489b602746c944c3e0b4c5bdf11f1f398,2023-04-23 16:23:18,Tim van der Meij,"Merge pull request #16335 from timvandermeij/npm-install-force

Don't force-install packages in the CI job anymore",True
43d390759b8c494e8eff0372bbaf1a3e0c4f1afe,2023-04-23 16:15:29,Tim van der Meij,"Don't force-install packages in the CI job anymore

In PR #16327 the `eslint-plugin-mozilla` package was updated so we no
longer have to force-install packages, and the force-install flags for
`npm install` were removed. However, the CI job was missing from this
commit, which we fix here. In general force-installing packages
shouldn't be necessary unless there are problems with dependencies,
which we would like to know about, so especially in the CI job it seems
like a good idea to not force-install packages to catch upcoming defects
early on.

Extends 19526d2322fabd4425688bb7c5504fa9ea015c5c.",False
bf01edb452165ef06103958b9c3b6b20d86b1f7d,2023-04-23 15:09:49,Tim van der Meij,"Merge pull request #16334 from Snuffleupagus/rm-PDF20-closure

Remove the `PDF20` closure, in the `src/core/crypto.js` file",True
74585c7c59df39cdea39c5440b2f318fe0579d7f,2023-04-23 13:43:46,Jonas Jenwald,"Remove the unused `PDF20.hash` method

This method was added in PR 4938, almost nine years ago, however it doesn't appear to ever have been used.
Given the similarities between the `PDF17` and `PDF20` classes, and how they're used, if the `PDF20.hash` method was actually necessary you'd also expect a similiar method in the `PDF17` class.",False
5e0722e4c262c13921176aa5f33df4b14d364595,2023-04-23 13:38:17,Jonas Jenwald,"Remove the `PDF20` closure, in the `src/core/crypto.js` file

To allow doing this the existing helper function was changed into a ""private"" method instead.",False
6e1b234c6ba2c462af4d368b19ae3a1452548ff4,2023-04-22 19:25:10,Jonas Jenwald,"Merge pull request #16332 from Snuffleupagus/rm-primitives-closures

Remove the remaining unnecessary closures in the `src/core/primitives.js` file",True
9cb3236ac045a110508243c7bd77b32a202ba0f9,2023-04-22 19:03:04,Jonas Jenwald,Remove the remaining unnecessary closures in the `src/core/primitives.js` file,False
e304423ba1d9862b0b2d2dc4630cc7f28ec472c3,2023-04-22 18:28:13,Tim van der Meij,"Merge pull request #16331 from Snuffleupagus/cmap-rm-closure

Remove unnecessary closures in the CMap code",True
2588924b0ffacd2e01a68f75cf5dbdfaffff6b14,2023-04-22 18:24:50,Tim van der Meij,"Merge pull request #16326 from Snuffleupagus/limit-Chrome-CSS

Don't include Chrome-specific CSS rules in MOZCENTRAL builds",True
c9359957e60682f17e66bf574065a662cf10ce69,2023-04-22 18:23:30,Tim van der Meij,"Merge pull request #16305 from Snuffleupagus/PDFJSDev-skip-PRODUCTION

Remove the `PRODUCTION` build-target",True
bc7aa8a585aa5d456bf41d1703bb851703e5ca9c,2023-04-21 15:51:31,Jonas Jenwald,"Re-factor some `String.fromCharCode` usage in the `src/core/binary_cmap.js` file

We can replace one case of `apply` with rest parameters, and avoid doing repeated `String.fromCharCode` calls within a loop.",False
cabc98f3104758d7ec8698975026fc1c4b5d0d94,2023-04-21 15:51:31,Jonas Jenwald,"Remove the remaining closure in the `src/core/cmap.js` file

With modern JavaScript we (usually) no longer need to keep old closures, which slightly reduces the size of the code.",False
244002502bf08e56d97437229e51795ae64563ac,2023-04-21 15:51:20,Jonas Jenwald,"Move the `BinaryCMapReader` into its own file

The ""binary"" CMap-format is specific to the PDF.js library, and is used to reduce the size of the built-in CMap data-files.
By moving this code to its own file we can remove the nowadays unnecessary closures, which helps to slightly reduce the size of this code.",False
434445973d33447966f7e247efce4c365cf0aed3,2023-04-20 19:50:31,Jonas Jenwald,"Merge pull request #16327 from Snuffleupagus/update-eslint-plugin-mozilla

Update `eslint-plugin-mozilla` to avoid having to force-install packages (issue 15429)",True
19526d2322fabd4425688bb7c5504fa9ea015c5c,2023-04-20 19:44:31,Jonas Jenwald,"Update `eslint-plugin-mozilla` to avoid having to force-install packages (issue 15429)

The latest version of `eslint-plugin-mozilla` removed the Prettier dependency, see https://bugzilla.mozilla.org/show_bug.cgi?id=1677562, which means that we no longer need to use `npm install --force` in the PDF.js library.",False
d4e8657e8f9f6eb8572e0265d98962f6eb45a0fc,2023-04-20 18:47:03,Jonas Jenwald,"Merge pull request #16324 from Snuffleupagus/debugger-CSS-is

Introduce some `:is` usage in the debugger CSS",True
1b2b6910acf97b63186a78941da86f23fdc8bb45,2023-04-20 17:44:33,Jonas Jenwald,Don't include Chrome-specific CSS rules in MOZCENTRAL builds,False
f675bfe17816140b7952392c5216f02c63162df8,2023-04-20 13:04:46,Jonas Jenwald,"Merge pull request #16323 from Snuffleupagus/viewer-CSS-is

Introduce some `:is` usage in the viewer CSS",True
7926c1bc88e587eaab4c784f806b315f5eb5d6f3,2023-04-20 12:56:19,Jonas Jenwald,Introduce some `:is` usage in the viewer CSS,False
3e05d7e7fded371af62d16c9d4d403c6210ae704,2023-04-20 00:17:57,Jonas Jenwald,"Introduce some `:is` usage in the debugger CSS

Also adds one more instance of `:is` in the `web/annotation_editor_layer_builder.css` file.",False
58b5eb89b896814b5a7b7b084e6074afb6298973,2023-04-19 19:02:10,Jonas Jenwald,"Merge pull request #16315 from Snuffleupagus/annotationLayer-CSS-is

Introduce some `:is` usage in the annotationLayer CSS",True
36ff19c53b0a724156ed555d635cee699e0d2802,2023-04-19 18:58:53,Jonas Jenwald,"Merge pull request #16314 from Snuffleupagus/pdfViewer-CSS-is

Introduce some `:is` usage in the PDFViewer CSS",True
5119e7fd6aeeb0ac183226cdeb87ba9398afbb9a,2023-04-19 18:47:22,Jonas Jenwald,"Merge pull request #16313 from Snuffleupagus/textLayer-CSS-is

Introduce some `:is` usage in the textLayer CSS",True
f98358aa45122a4208f487c3c7cbdd18714effd1,2023-04-19 18:45:38,Jonas Jenwald,"Merge pull request #16310 from Snuffleupagus/xfaLayer-CSS-is

Introduce some `:is` usage in the xfaLayer CSS",True
3420b2fe8a1fcbd8c39561eb13b6a2e9f5e8aa6f,2023-04-19 18:44:01,Jonas Jenwald,"Merge pull request #16317 from Snuffleupagus/css-before-after

Enforce double-colon notation for CSS pseudo-elements",True
42faecf31036232aefcadaceef7a45c71be3f9e1,2023-04-19 01:43:19,Jonas Jenwald,"Merge pull request #16320 from Snuffleupagus/enablePermissions-disable-copy-all

Disable the ""copy all text"" feature when `enablePermissions` is set (PR 16286 follow-up)",True
6bfcc9665150a583f2e0e96506f1a946a29de05f,2023-04-19 00:42:18,Jonas Jenwald,"Disable the ""copy all text"" feature when `enablePermissions` is set (PR 16286 follow-up)

When permissions are enabled and the PDF document doesn't have the COPY-flag set, it shouldn't be possible for the user to trigger the ""copy all text"" feature.",False
3e292dc2228ce957a912f6e52b211a59edb55bcd,2023-04-18 21:18:51,calixteman,"Merge pull request #16318 from calixteman/issue16316

Correctly clip the text in the text layer (fixes #16316)",True
19ca41896e913587b05a584e4735c54204958c65,2023-04-18 20:30:42,Calixte Denizet,Correctly clip the text in the text layer (fixes #16316),False
529dbf9b6522b796d16674de4572d38868249f25,2023-04-18 19:20:22,Jonas Jenwald,"Enforce double-colon notation for CSS pseudo-elements

These changes are part of https://phabricator.services.mozilla.com/D170496, and thanks to a Stylelint rule we can both enforce and fix this automatically; see also https://stylelint.io/user-guide/rules/selector-pseudo-element-colon-notation/",False
88e2d04b90cde1b82f557c0ca64798a1dfdc706e,2023-04-18 16:35:13,Jonas Jenwald,"Merge pull request #16311 from linxianxi/fix-viewer-browser-compatibility

Compatible with ResizeObserver borderBoxSize in legacy safari",True
fcc535706a3e6331bdce5fe7a313b9e1d9e6809d,2023-04-18 16:12:13,Jonas Jenwald,"Introduce some `:is` usage in the annotationLayer CSS

While this slightly reduces duplication in the CSS rules, some of the auto-formatting done by Prettier is perhaps not great. (Given the overall advantage of using Prettier, we'll probably have to simply accept this.)",False
04ed5ddebac287849a1787c07f5ee0fad1b03f31,2023-04-18 15:31:08,Jonas Jenwald,Introduce some `:is` usage in the PDFViewer CSS,False
6ca702d6804097514ecf4f5ded84efa87771182a,2023-04-18 15:10:26,linxianxi,"Compatible with ResizeObserver borderBoxSize in legacy safari

See https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry/borderBoxSize\#browser_compatibility",False
5cb99321d738dcbaa78e74fab4317d372a16bc1a,2023-04-18 15:09:09,Jonas Jenwald,Introduce some `:is` usage in the textLayer CSS,False
9be2ba6170dae034ee8bb5e03c8612ece551de0c,2023-04-18 03:02:04,Jonas Jenwald,"Introduce some `:is` usage in the xfaLayer CSS

Hopefully these changes make sense (since this functionality is new to me), however the existing `xfa`-tests should help avoid any outright regressions.",False
f1b005d7b805e38e731d929b47d78b125765aabe,2023-04-17 20:23:33,calixteman,"Merge pull request #16308 from calixteman/gv_remove_button_hover

[GeckoView] Don't change style for the download button when focused/hovered",True
dbe0c4e60c6324b703411b5b97e07da79fea77f9,2023-04-17 20:20:26,calixteman,"Merge pull request #16200 from calixteman/dont_normalize

[api-minor] Don't normalize the text used in the text layer.",True
dde79edba17bae05ecbf71d307bd4839336351ef,2023-04-17 20:17:05,Calixte Denizet,[GeckoView] Don't change style for the download button when focused/hovered,False
117bbf7cd9ff624607f37a4f106499171eaabb73,2023-04-17 18:01:23,Calixte Denizet,"[api-minor] Don't normalize the text used in the text layer.

Some arabic chars like \ufe94 could be searched in a pdf, hence it must be normalized
when creating the search query. So to avoid to duplicate the normalization code,
everything is moved in the find controller.
The previous code to normalize text was using NFKC but with a hardcoded map, hence it
has been replaced by the use of normalize(""NFKC"") (it helps to reduce the bundle size
by 30kb).
In playing with this \ufe94 char, I noticed that the bidi algorithm wasn't taking into
account some RTL unicode ranges, the generated font wasn't embedding the mapping this
char and the unicode ranges in the OS/2 table weren't up-to-date.

When normalized some chars can be replaced by several ones and it induced to have
some extra chars in the text layer. To avoid any regression, when copying some text
from the text layer, a copied string is normalized (NFKC) before being put in the
clipboard (it works like this in either Acrobat or Chrome).",False
89b0fd96280264ffd7ec4afe8f1ea5ec32dd513c,2023-04-17 15:37:20,Jonas Jenwald,"Remove the remaining `PRODUCTION` build-target usage

After the previous patch we now have only *a single* `PRODUCTION` occurrence in the entire code-base, more specifically in the `web/viewer.html` file.
This special build-target can be replaced with any condition that always evaluate to `false`, such as e.g. a comment.

*Please note:* This patch might be considered too hacky, hence I completely understand if it's rejected.",False
804aa896a7eb41fc096d64d4f594d1ba9c071e49,2023-04-17 15:34:34,Jonas Jenwald,"Stop using the `PRODUCTION` build-target in the JavaScript code

This *special* build-target is very old, and was introduced with the first pre-processor that only uses comments to enable/disable code.
When the new pre-processor was added `PRODUCTION` effectively became redundant, at least in JavaScript code, since `typeof PDFJSDev === ""undefined""` checks now do the same thing.

This patch proposes that we remove `PRODUCTION` from the JavaScript code, since that simplifies the conditions and thus improves readability in many cases.
*Please note:* There's not, nor has there ever been, any gulp-task that set `PRODUCTION = false` during building.",False
3e08eee511b04e127fcd41d2a1d07dd3b5a68a92,2023-04-17 13:12:07,calixteman,"Merge pull request #16301 from calixteman/issue16278

[Editor] Take into account the initial rotation (issue #16278)",True
8e5f4c06229b8761a35603f01b1eb3842891a70d,2023-04-17 01:06:26,Calixte Denizet,[Editor] Take into account the initial rotation (issue #16278),False
1503701d9eb41143279072daf29f367835379af8,2023-04-16 20:17:20,Jonas Jenwald,"Merge pull request #16295 from Pascal-D/updateDeprecatedCustomEvents

Use CustomEvent when dispatching the ""webviewerloaded"" event",True
d9bf571f5c49e1cac9054cf6b7acfc0b5b719876,2023-04-16 19:06:19,Pascal Drinkuth,"Use `CustomEvent` when dispatching the ""webviewerloaded"" event


According to MDN, see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/initCustomEvent, using initCustomEvent() is deprecated.",False
f46ed43b81b242a296faad63e768469e8035d8c7,2023-04-16 17:53:41,Tim van der Meij,"Merge pull request #16247 from Snuffleupagus/issue-7442

[api-minor] Add support, in `PDFFindController`, for mixing phrase/word searches (issue 7442)",True
67ce8f18c661afebff0d290a4a55d77820157fda,2023-04-16 17:44:22,Tim van der Meij,"Merge pull request #16299 from Snuffleupagus/TypeScript-5

Update TypeScript to version `5`",True
6de59e6b3e5bcaefe23848ef672c4ad1b8b69668,2023-04-16 17:38:05,Tim van der Meij,"Merge pull request #16296 from Snuffleupagus/update-packages

Update packages and translations",True
6b4c087e9c8b1d36e08f061e85dd27ac17b14971,2023-04-16 16:16:42,Jonas Jenwald,"Merge pull request #16298 from Snuffleupagus/generate-hiddenCopyElement

Create the ""hiddenCopyElement"" in the `PDFViewer` constructor (PR 16286 follow-up)",True
5f7e43a2b15df1ae0358492f83fc4ae2bf5ea11a,2023-04-16 16:15:16,Jonas Jenwald,"Merge pull request #16297 from Snuffleupagus/copy-all-null-chars

Remove null chars, i.e. `\u0000`, when getting all text (PR 16286 follow-up)",True
de03731e92ca2407c0024903866d50ffa794a5e8,2023-04-16 15:04:45,Jonas Jenwald,"Update TypeScript to version `5`

Note that this is a major version increase, however the `gulp types` and `gulp typestest` tasks seem to work as-is; please see https://devblogs.microsoft.com/typescript/announcing-typescript-5-0/",False
2fbbdd68cc234d513b2718d63cb59f057abfa9a9,2023-04-16 12:44:05,Jonas Jenwald,"Create the ""hiddenCopyElement"" in the `PDFViewer` constructor (PR 16286 follow-up)

To make this functionality work out-of-the-box in custom implementations, see e.g. the ""viewer components"" examples, it'd be slightly easier if we dynamically create/insert the ""hiddenCopyElement"" in the `PDFViewer` constructor.
Given that the ""copy all text"" feature still appears to work just as before with this patch, hopefully I'm not overlooking any reason why doing this would be a bad idea.",False
4736767b76eb7018310873f6b06c1ead13da3cf8,2023-04-16 12:13:20,Jonas Jenwald,"Remove null chars, i.e. `\u0000`, when getting all text (PR 16286 follow-up)

I was playing with the new ""copy all text"" feature, and stumbled upon one document where the copied text was truncated; see http://mirrors.ctan.org/info/lshort/english/lshort.pdf

The problem turns out to be that on [page 83](https://ftp.acc.umu.se/mirror/CTAN/info/lshort/english/lshort.pdf#page=83) the textLayer contains `\u0000` and apparently copying just stops when a null char is encountered.
To fix this we can simply use an existing helper function, and with this patch we're able to successfully copy all the text in that document.",False
a6409e9887b673bae139846784fc4a6cd592b9d5,2023-04-16 01:48:24,Jonas Jenwald,Update l10n files,False
877c867a92f95f8b8e1bace88a5f96d6affb68fc,2023-04-16 01:40:02,Jonas Jenwald,Update npm packages,False
92baf14531b2252ae3c1559e96b8652755e94282,2023-04-15 23:13:13,calixteman,"Merge pull request #16286 from calixteman/copy_all

Add the possibility to copy all the pdf text whatever the rendered pages are (bug 1788035)",True
ca54ea12b3d8fa2de690129dac3da6c2bf203dc2,2023-04-15 22:29:40,Calixte Denizet,Add the possibility to copy all the pdf text whatever the rendered pages are (bug 1788035),False
0e19c3a12061b93b7f6e86f0c4461293a8fd0913,2023-04-15 17:02:37,Jonas Jenwald,"[api-minor] Add support, in `PDFFindController`, for mixing phrase/word searches (issue 7442)

*Please note:* This patch only extends the `PDFFindController` implementation itself to support this functionality, however it's *purposely* not exposed in the default viewer.

This replaces the previous `phraseSearch`-parameter, and a `query`-string will now always be interpreted as a phrase-search.
To enable searching for individual words, the `query`-parameter must instead consist of an Array of strings. This way it's now also possible to combine phrase/word searches, with a `query`-parameter looking something like `[""Lorem ipsum"", ""foo"", ""bar""]` which will search for the phrase ""Lorem ipsum"" *and* the words ""foo"" respectively ""bar"".",False
4d8a60b435e2bb9ce635014d1f253c46ff01fa71,2023-04-15 16:38:37,Tim van der Meij,"Merge pull request #16288 from Snuffleupagus/print-code-cleanup

Slightly modernize print-related code",True
953c29873d2296d97a66a791a2bef22f4cbf6548,2023-04-15 16:30:23,Tim van der Meij,"Merge pull request #16281 from Snuffleupagus/toggleCheckedBtn

Reduce some duplication when toggling buttons in the viewer toolbars",True
c7daa66b266ef118114387db1accd8816627a760,2023-04-15 15:47:02,Jonas Jenwald,"Merge pull request #16294 from Snuffleupagus/rm-compileGlobalSubrIndex

Remove `CFFCompiler.compileGlobalSubrIndex`, and simplify `CFFCompiler.compileTypedArray`",True
c79bdd6ae6c16bca881b57bb66e965b942ddf7e4,2023-04-15 14:43:34,Jonas Jenwald,"Simplify the `CFFCompiler.compileTypedArray` method

Rather than manually creating the Array, we can use the now existing `Array.from` method instead.",False
0ce568e7896cbda8444540f488796fed6462009e,2023-04-15 14:43:21,Jonas Jenwald,"Remove `CFFCompiler.compileGlobalSubrIndex` since it's completely unused

This method was originally added in PR 1320, eleven years ago, however it doesn't appear to ever have been used (not even from the start).
Furthermore, this method also tries to access a property that doesn't exist (`this.out`) and then call a method that also doesn't exist (`writeByteArray`).",False
ab2773416b47aca6c258e4e02a8ed75fc702cbe2,2023-04-15 00:56:12,Jonas Jenwald,"Merge pull request #16291 from Snuffleupagus/issue-16289

Limit the `Path2D`-checks in the worker-thread to Node.js (PR 16238 follow-up, issue 16289)",True
a44173ea51919d9d23c079ea17a14806f4bcaa2c,2023-04-15 00:47:53,calixteman,"Merge pull request #16292 from calixteman/improve_cff_compiling

Avoid when it's possible to use Array.concat when compiling a CFF font",True
5eab8ec610d82ff842de8a342663d40b41ffe678,2023-04-14 22:31:01,Calixte Denizet,"Avoid when it's possible to use Array.concat when compiling a CFF font

In looking at https://bugs.ghostscript.com/show_bug.cgi?id=706451 I noticed that bug2.pdf was pretty
slow to load for such a basic file.
In profiling I noticed that a lot of time is spent in Array.concat, hence this patch use Array.push when
it's possible (it's now ~3 times faster).",False
edd13895dd1d851c62d6262046f9d2f8092de32e,2023-04-14 15:21:11,Jonas Jenwald,"Limit the `Path2D`-checks in the worker-thread to Node.js (PR 16238 follow-up, issue 16289)

The changes in PR 16238 were intended specifically for Node.js environments, however they accidentally applied to older browsers as well.

*Please note:* In up-to-date browsers `Path2D` is available in Workers, which should be connected to the introduction of `OffscreenCanvas`.",False
aeb8e36cdb2e8e9ea433ff8bd66e3efc3a704f56,2023-04-14 13:32:28,Jonas Jenwald,"Convert `FirefoxPrintService` and `PDFPrintService` into standard classes

Note that both of the affected files are old enough to predate the general availability of `class`.",False
ebf493f72680e28ca119601c91264021a85d08b4,2023-04-14 13:32:25,Jonas Jenwald,"Slightly modernize the print `layout`-methods

By getting the width/height of the first page initially, we can slightly reduce the amount of code needed both in the `hasEqualPageSizes`-check and when building the print-styles.",False
342dc760dabf9749eb33730a1eb07ecf1ee13b38,2023-04-14 00:47:32,calixteman,"Merge pull request #16284 from calixteman/gv_keep_button

[GeckoView] Show the download button by default and add a pref to disable it (bug 1827963)",True
7f0d45ce47970a2d17c12c72262c42fcf21b34e2,2023-04-14 00:03:03,Calixte Denizet,"[GeckoView] Show the download button by default and add a pref to disable it (bug 1827963)

For the moment there is no real consensus on how we should download a pdf on Android.
Hence we keep this solution for the moment but behind a pref (which will be true on
nightly only).",False
2a195beb308070f0866f4323b8054623b9db39c0,2023-04-13 16:48:37,Jonas Jenwald,"Reduce some duplication when toggling buttons in the viewer toolbars

Currently we repeat the same code in lots of places, to update the ""toggled"" class and ""aria-checked"" attribute, when various toolbar buttons are clicked.

For the MOZCENTRAL build-target this patch reduces the size of the *built* `web/viewer.js` file by just over `1.2` kilo-bytes.",False
b3932f70edc6dc1f2aab1265079a7f002bb7bc44,2023-04-13 13:50:11,Jonas Jenwald,"Merge pull request #16279 from Snuffleupagus/structuredClone-transfer-legacy

Skip transfers, in `LoopbackPort.postMessage`, for PDF.js `legacy`-builds (issue 16255)",True
82a0bcecfa6a52ad2716e62cfa397c8850f231d2,2023-04-12 17:48:29,Jonas Jenwald,"Skip transfers, in `LoopbackPort.postMessage`, for PDF.js `legacy`-builds (issue 16255)

Apparently the `structuredClone` polyfill doesn't handle transfers correctly, and `DOMException`s may thus be thrown. This is particularly problematical in Node.js environments, where that exception (obviously) isn't available.

To work-around these issues we'll simply ignore any transfers in `legacy`-builds, since those *may* use the `structuredClone` polyfill. This will obviously lead to slightly higher memory usage in those builds, however this really only affects Node.js environments. (Browsers are only affected if workers are disabled, however that's never been an officially recommended/supported configuration.)",False
7571842d84147df28296492114e828bfc204010c,2023-04-12 01:22:56,calixteman,"Merge pull request #16275 from calixteman/ifx_search_with_fractions

Fix search of numbers inside fractions",True
d8795f9f8f260d52515c8bd741fea6497dd5f2e9,2023-04-12 00:27:26,Calixte Denizet,Fix search of numbers inside fractions,False
3a36a9d33707d16c8e7b2378ec44693132cb0ccd,2023-04-11 15:36:29,Jonas Jenwald,"Merge pull request #16268 from Snuffleupagus/RegionalImageCache

Attempt to also cache images at the ""page""-level (issue 16263)",True
c1c372c320f86ff028c5990f2f8fe64c7d33f99f,2023-04-11 14:43:16,calixteman,"Merge pull request #16225 from calixteman/16224

Thin whitespaces must have their own span",True
a43151103efbc96c98a9cda62bf9a51e8d9f0337,2023-04-10 20:06:28,Jonas Jenwald,"Merge pull request #16265 from Snuffleupagus/float-inline

[Firefox] Use `float: inline-start/inline-end` directly in MOZCENTRAL builds (PR 15968 follow-up)",True
d3d16b15ac1720a7df61222f416cb657b57a9d28,2023-04-10 19:56:19,Jonas Jenwald,"[Firefox] Use `float: inline-start/inline-end` directly in MOZCENTRAL builds (PR 15968 follow-up)

Currently `float: inline-start/inline-end` is only supported in Firefox, see https://developer.mozilla.org/en-US/docs/Web/CSS/float#browser_compatibility, and in order to support other browsers we're thus forced to jump through some hoops.
This leads to slightly less nice code in the *built-in* Firefox PDF Viewer, and this patch attempts to improve the current situation:
 - Use Stylelint to forbid direct use of `float: inline-start/inline-end` in the CSS files, to prevent future bugs in the general PDF.js viewer.
 - Do a build-time replacement, only in MOZCENTRAL builds, to replace the CSS-variables with raw `float: inline-start/inline-end` instances.",False
8398cabd17784521e3bc74255fbd4109071d7455,2023-04-10 19:11:42,Tim van der Meij,"Merge pull request #16249 from Snuffleupagus/Chrome-88

[api-minor] Update the minimum supported Google Chrome version",True
20f79f870e651a8e00c2ad8387f41088244168f6,2023-04-10 19:10:09,Tim van der Meij,"Merge pull request #16246 from Snuffleupagus/dist-install-force

Force-install when using `gulp dist-install` (issue 15435)",True
9881dbf92712dbae18ec6f9874eba7789a2cfb80,2023-04-10 15:04:41,Jonas Jenwald,"Attempt to also cache images at the ""page""-level (issue 16263)

Currently we have two separate image-caches on the worker-thread:
 - A local one, which is unique to each `PartialEvaluator.getOperatorList` invocation. This one caches both names *and* references, since image-resources may be accessed in either way.
 - A global one, which applies to the entire PDF documents and all its pages. This one only caches references, since nothing else would work.

This patch introduces a third image-cache, which essentially sits ""between"" the two existing ones. The new `RegionalImageCache`[1] will be usable throughout a `PartialEvaluator` instance, and consequently it *only* caches references, which thus allows us to keep track of repeated image-resources found in e.g. different /Form and /SMask objects.

---
[1] For lack of a better word, since naming things is hard...",False
195db2cff52d9db7176861b642c1569661f0f946,2023-04-08 23:49:12,Jonas Jenwald,"Merge pull request #16262 from Snuffleupagus/pageNumber-rtl

Tweak the `pageNumber` CSS to better support RTL locales",True
c95a09047a381d9942021f0ec33b66c9c22fb608,2023-04-08 23:47:09,Jonas Jenwald,"Merge pull request #16261 from Snuffleupagus/loadingBar-rtl

Tweak the `loadingBar` CSS to better support RTL locales",True
61860ff56f888286704bca1629ffdae2a812cbdb,2023-04-08 17:27:17,Jonas Jenwald,"Tweak the `pageNumber` CSS to better support RTL locales

This effectively implements some of the changes from https://phabricator.services.mozilla.com/D170496, but in such a way that the loading-icon won't overlay the page-number in RTL locales.",False
1e9e3cafb8f2dab6a4593a7370fe4c77cc4f054e,2023-04-07 22:50:44,calixteman,"Merge pull request #16260 from calixteman/gv_add_dl_button

[GeckoView] Add a basic toolbar with a download button for GV (bug 1823164)",True
6419e5903607fade0049e36dc63e666eed12a04a,2023-04-07 17:06:06,Jonas Jenwald,"Tweak the `loadingBar` CSS to better support RTL locales

This effectively implements some of the changes from https://phabricator.services.mozilla.com/D170496, but using our existing ""direction aware"" CSS-variable to limit the amount of code changes needed.",False
3b147205baaf77fe7c6163a63e4a0d42cc3ac2b0,2023-04-07 15:24:16,Calixte Denizet,[GeckoView] Add a basic toolbar with a download button for GV (bug 1823164),False
08c8d310d3852b16aad0a511aec9b01216c0f590,2023-04-06 19:17:55,Jonas Jenwald,"Merge pull request #16256 from Snuffleupagus/issue-16254

Tweak the `--scale-factor` CSS-variable warning threshold (issue 16254)",True
4bf8e5c13d1fe98729dc760bd2a4a37a02636377,2023-04-06 16:41:12,Jonas Jenwald,"Tweak the `--scale-factor` CSS-variable warning threshold (issue 16254)

This is apparently needed to account for the rounding used in Chromium-browsers, such that the warning message isn't displayed unnecessarily.",False
65c4a4b3fe81b20cd262193c55a6f4519362184c,2023-04-06 00:33:46,Jonas Jenwald,"Merge pull request #16241 from fchasen/bug_1820651

[Firefox] Add CSS at-page size when printing from FirefoxPrintService (bug 1820651)",True
3c326974a0d4c821a6bddba4e4a30dd37bacdd2b,2023-04-05 23:03:56,Fred Chasen,"[Firefox] Add CSS at-page size when printing from FirefoxPrintService (bug 1820651)
- Duplicates at-page size method from PDFPrintService
- Updates getPagesOverview to rotate pages to fit the initial orientation",False
184076fe7acfae9c1e5938151d5d4f95e9e94ea5,2023-04-04 18:40:27,Jonas Jenwald,"Merge pull request #16226 from Snuffleupagus/rm-svg-viewer

[api-minor] Remove SVG-rendering from the viewer (PR 15173 follow-up)",True
96a3210501e5f36ed350f903616f8e2f5b3544f8,2023-04-03 17:02:33,Jonas Jenwald,"Merge pull request #16248 from Snuffleupagus/editor-params-dispatchEvent

Reduce duplication when dispatching the ""switchannotationeditorparams"" event",True
ce3ea587785b45b7819facebbadf360fe78b154b,2023-04-03 16:53:26,Jonas Jenwald,"[api-minor] Update the minimum supported Google Chrome version

The patch changes the minimum supported version of Google Chrome as follows:
 - Chrome 88, which was released on 2021-01-19; see https://en.wikipedia.org/wiki/Google_Chrome_version_history

This is done to allow use of modern CSS features, such as e.g. `:is()` and `:where()` in the code-base.",False
d256168b62d95d81db4bde718cbc1a28921bdb8e,2023-04-03 12:35:07,Jonas Jenwald,"Reduce duplication when dispatching the ""switchannotationeditorparams"" event

Currently we repeat virtually the same code multiple times, which can be avoided by the introduction of a simple helper function.",False
bf57a8f660013c519ef678dc6cd994e10f0fcd81,2023-04-02 19:36:36,Jonas Jenwald,"Force-install when using `gulp dist-install` (issue 15435)

When installing the PDF.js project itself it's currently necessary to use `--force` in order for all packages to install correctly, see issue 15429, hence the same is also necessary when using the `gulp dist-install` command for local development/testing.",False
484da62f50e6516c0ed7fab9ab201d435d0a7637,2023-04-02 18:53:45,Jonas Jenwald,"Inline `PDFPageView.paintOnCanvas` in the `draw` method, now that SVG-rendering is removed",False
92cf183f56388ee2bba43b8ded641c2772a6edf5,2023-04-02 18:53:45,Jonas Jenwald,"Re-factor the `showCanvas` function, reducing function calls during rendering",False
6858dae1c31f4326efd719d05ce80a414190c462,2023-04-02 18:53:45,Jonas Jenwald,Change the `finishPaintTask`/`finishPaintTask` helpers into private methods,False
c2f1e65cc3454a9b3e18c91b460622b13e805674,2023-04-02 18:53:45,Jonas Jenwald,[api-minor] Remove SVG-rendering from the viewer (PR 15173 follow-up),False
b135dadb17793f02821910921a1277005c03a516,2023-04-02 18:38:44,Tim van der Meij,"Merge pull request #16244 from timvandermeij/bump

Bump versions in `pdfjs.config`",True
4eecd9e308f20edfb686f354e0fce7066b2ddc8e,2023-04-02 18:33:13,Tim van der Meij,Bump versions in `pdfjs.config`,False
be0f6ee080f8c47145136d030aec2989df79909c,2023-04-02 17:21:01,Tim van der Meij,"Merge pull request #16242 from Snuffleupagus/rm-render-canvasFactory

[api-minor] Remove the `canvasFactory` option from `PDFPageProxy.render` (PR 16100 follow-up)",True
1c7e2defead1fd261a5b88c15ab7c3ce3c28e16a,2023-04-02 17:19:03,Tim van der Meij,"Merge pull request #16243 from Snuffleupagus/toolbars-object-spread

Use object-spread when dispatching events in the toolbars",True
51113c17e948c5917dbc6846024c60479ddb304f,2023-04-02 15:40:15,Jonas Jenwald,"Use object-spread when dispatching events in the toolbars

This format is more compact, and should be available in all browsers that we currently support; please see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#browser_compatibility",False
b35c03ac3a064d8c27f775ed6e225e40309206fb,2023-04-01 19:30:31,Jonas Jenwald,[api-minor] Remove the `canvasFactory` option from `PDFPageProxy.render` (PR 16100 follow-up),False
8b7e44682c53271c773370e04e5c2f278f6e2e08,2023-04-01 19:27:46,Jonas Jenwald,"Merge pull request #16159 from nmtigor/b-Object_in_api

Write some {Object} in api.js more precise",True
b384d3bc249710dbe07bbcdf100d09812d266210,2023-04-01 19:07:51,Tim van der Meij,"Merge pull request #16232 from Snuffleupagus/firefox-rm-linkService-baseUrl

[Firefox] Stop using a `baseUrl` in the `PDFLinkService` (PR 16153 follow-up)",True
13f2426aabca659b3a17ac35f9eca5bfff1ed46b,2023-04-01 17:50:33,Tim van der Meij,"Merge pull request #16238 from Snuffleupagus/update-Node-compat-check

Update the Node.js compatibility-check in the worker-thread",True
a9af0a6cc27d0a3977b8da1a78cbc7710ccd9e2d,2023-04-01 17:48:00,Tim van der Meij,"Merge pull request #16234 from Snuffleupagus/rm-disableCombineTextItems

[api-minor] Remove the `disableCombineTextItems` option",True
57a307d0cd92b92e7c22b911cc37a7227780bb79,2023-03-30 22:06:15,Jonas Jenwald,"Update the Node.js compatibility-check in the worker-thread

*Please note:* In Node.js environments a `legacy`-build must be used since only those versions include any polyfills.

Previously we'd only check if `ReadableStream` is natively supported, however since Node.js version 18 that's now been implemented; please see https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream#browser_compatibility
Hence we'll also check for the availability of `Path2D`, since that's browser-specific functionality not expected to be available in Node.js environments; please see https://developer.mozilla.org/en-US/docs/Web/API/Path2D#browser_compatibility",False
2358757b66739e26e125f6df6b8d51c582b2b739,2023-03-30 21:32:09,Jonas Jenwald,"Merge pull request #16235 from Standard8/bug-1825522-generate-cleanup

Remove now unnecessary eslint-disable statement generated for PdfJsDefaultPreferences.sys.mjs. (bug 1825522).",True
bb5467789be61929711f9231d0e17af6ff56755b,2023-03-30 19:17:31,Mark Banner,Remove now unnecessary eslint-disable statement generated for PdfJsDefaultPreferences.sys.mjs. (bug 1825522).,False
5063a6f2a9281fcf832d0e87abdacae2306b55d0,2023-03-30 17:53:38,Jonas Jenwald,"[api-minor] Remove the `disableCombineTextItems` option

*Please note:* This parameter has never been used within the PDF.js library/viewer itself, and it was only ever added for backwards compatibility reasons.

This parameter was added in PR 7475, over six years ago, to try and optionally maintain the previous *default* text-extraction behaviour.
However as part of the general text-extraction improvements in PR 13257, almost two years ago, the `disableCombineTextItems` functionality was accidentally ""broken"" in various ways. Note how the only (very basic) unit-test was updated in a way that doesn't really make sense, since generally speaking you'd expect that using the option should result in *more* (or at least the same number of) text-items. Furthermore there's also the recent issue 16209, where the option causes almost all textContent to be concatenated together.

Hence this patch proposes that we simply remove the `disableCombineTextItems` option since it's essentially unused/untested functionality, as evident from the fact that it took almost two years for someone to notice that it's broken.",False
40a96a2524e6c8da2ee3643d7021efeb5f731731,2023-03-30 15:21:25,Jonas Jenwald,"[Firefox] Stop using a `baseUrl` in the `PDFLinkService` (PR 16153 follow-up)

With the changes in PR 16153 we're no longer setting a `<base href>` in the Firefox PDF Viewer, hence it shouldn't be necessary to keep setting a `baseUrl` in the `PDFLinkService`-class.
Given that the original document URL is now kept, the browser itself will handle relative URLs and we can thus slightly reduce the amount of string parsing required when handling various links in the viewer.",False
09da8026b6fd803d60451aaf0aa8349383468baa,2023-03-29 18:27:58,Jonas Jenwald,"Merge pull request #16228 from Snuffleupagus/firefox-imageResourcesPath

[Firefox] Set the `imageResourcesPath` correctly (PR 16153 follow-up)",True
e0e56e9e9c7822f03d0269006bffa849aedfc27c,2023-03-29 18:03:08,Jonas Jenwald,"[Firefox] Set the `imageResourcesPath` correctly (PR 16153 follow-up)

We missed updating this path in PR 16153, which breaks loading of annotation-icons in the Firefox PDF Viewer.",False
43917796c211c78cc3360c4ad5158b8706f22d9a,2023-03-29 15:45:26,Jonas Jenwald,"Merge pull request #16227 from Snuffleupagus/zooming-regressions

Fix various zooming regressions (PR 15812 follow-up)",True
4b7eb1436d6577f664796b51d29b3b82b535e15c,2023-03-29 14:53:58,Calixte Denizet,Thin whitespaces must have their own span,False
7bca3c81a9440ae50d7b37d4f88630b742e8830a,2023-03-29 14:06:48,Jonas Jenwald,"Fix CSS-only zooming in the viewer (PR 15812 follow-up)

Currently if you e.g. enable the `useOnlyCssZoom` option rendering may no longer finish as intended. To reproduce:
 - Enable the `useOnlyCssZoom` option.
 - Load https://github.com/mozilla/pdf.js/files/1522715/wuppertal_2012.pdf (in the development viewer).
 - When rendering starts, *immediately* change the zoom-level.

In this case the document will never finish rendering, since the `postponeDrawing`-functionality will (here incorrectly) abort rendering and with CSS-only zooming rendering is only expected to happen once per page.
To fix this we'll simply ignore any `drawingDelay` when CSS-only zooming is used (regardless if it's triggered via the option or the zoom-level being very large).",False
2c5a2d112c23667349b6b462439183fac3736bbc,2023-03-29 13:34:20,Jonas Jenwald,"Fix rotation of the `zoomLayer` (PR 15812 follow-up)

Currently the `zoomLayer` isn't rotated correctly in all cases. To reproduce:
 - Load https://github.com/mozilla/pdf.js/files/1522715/wuppertal_2012.pdf
 - Let the document render.
 - Rotate the document *four* times, such that the original rotation is restored.

The easiest solution, as far as I can tell, is that we always set the `transform` just as we did (for years) prior to the changes in PR 15812.",False
622465dc20c588d6c47888d22aaa6c6e76092b44,2023-03-28 19:00:14,calixteman,"Merge pull request #16223 from calixteman/16221

Create a new chunk when the char is too rised compared to the previous one",True
a96f10e55d79028588262491a5c25e6d23adef92,2023-03-28 17:26:46,Calixte Denizet,Create a new chunk when the char is too rised compared to the previouse one,False
d584513cb29816016cc62afbdf8ed417b402aa25,2023-03-28 16:10:23,Jonas Jenwald,"Merge pull request #16213 from Snuffleupagus/validateCSSFont-quotes

Reduce duplication in the `validateCSSFont` helper function",True
ec08bd5c413235b879afa19c23fc701cd44d657b,2023-03-28 14:46:25,Jonas Jenwald,"Merge pull request #16218 from Snuffleupagus/isPDFFunction-simplify

Simplify the `isPDFFunction` helper function",True
b292d1ab951d10312ccce5a5408cb8adb6b4db8a,2023-03-28 14:31:35,calixteman,"Merge pull request #16217 from calixteman/bug1824610

ESMify some modules for m-c (bug 1824610)",True
5f5256b4c4613357034b5e1d4b93bbf48ad23492,2023-03-27 15:31:31,Calixte Denizet,ESMify some modules for m-c (bug 1824610),False
20cbb894125c5e58e0481dbdc0b1fe2e761a2cbe,2023-03-27 15:04:20,Jonas Jenwald,"Simplify the `isPDFFunction` helper function

Originally we used helper functions for checking if something was a Dictionary or Stream, and then having an initial `typeof` check probably made sense.
However, given that we're using `instanceof` nowadays the additional check longer seems necessary.",False
384bd961657a444b9ec3cb05042ee5f220565122,2023-03-26 19:31:08,Tim van der Meij,"Merge pull request #16212 from Snuffleupagus/geckoview-rm-transition-CSS

[GeckoView] Remove unused `transition` CSS-rules",True
ef70988027598d591481c533100cd9613ea642af,2023-03-26 15:42:49,Jonas Jenwald,"Reduce duplication in the `validateCSSFont` helper function

Currently we're *virtually* duplicating the same code, for validating quotation marks, twice in this helper function.

The size decrease is quite small (107 bytes) and this makes the code slightly harder to reader, hence I completely understand if this patch is rejected.",False
71fdf804de226cafb1d4b7ae7d2ecc3c02d9fe03,2023-03-26 14:05:19,Jonas Jenwald,"[GeckoView] Remove unused `transition` CSS-rules

Given that the GeckoView-viewer doesn't have a sidebar, there's no reason to have CSS-rules for it (and the variables are also undefined).",False
167b363eb3f5fe82a56976bf738300be66e18544,2023-03-26 02:30:06,nmtigor,Write some {Object} in api.js more precise,False
8a2dfdb032ff2da5475add30cd21ddc578b05ce3,2023-03-26 01:24:29,Jonas Jenwald,"Merge pull request #16211 from Snuffleupagus/occur-spelling

Fix spelling of `occurred` in a couple of comments",True
007c367018fe9df26b6e5c61d9c057fb1d8597f1,2023-03-26 01:16:02,Jonas Jenwald,Fix spelling of `occurred` in a couple of comments,False
a1685fd0d87601b016b421e117d75247f4cf193d,2023-03-25 19:57:01,Tim van der Meij,"Merge pull request #16199 from Snuffleupagus/commonobj-FontInspector

Slightly reduce the size of the `FontInspector`-integration in the API",True
ca03b0a811643b69821d305bb30f973b2c38fb9c,2023-03-25 19:53:31,Tim van der Meij,"Merge pull request #16206 from Snuffleupagus/update-packages

Update packages and translations",True
35322bcbaac145de7a647af72cdf2a5fa05c9369,2023-03-25 19:52:01,Tim van der Meij,"Merge pull request #16207 from Snuffleupagus/declaration-block-no-redundant-longhand-properties

Enable the `declaration-block-no-redundant-longhand-properties` Stylelint rule",True
b3e2e260791e6de203c7621c1a43603a58abbe97,2023-03-25 19:50:33,Tim van der Meij,"Merge pull request #16208 from Snuffleupagus/recoverJsURL-replaceAll

Use `replaceAll` in the `recoverJsURL` helper function",True
035a273d3008ee234a8e5913bf38744c13bb53c3,2023-03-25 17:01:39,Jonas Jenwald,"Use `replaceAll` in the `recoverJsURL` helper function

We can just do direct replacement when building the regular expression, rather than splitting the string into an Array and then re-joining it.",False
a4dfa04a0b91595fb3a1c1e68b81f15122a2f451,2023-03-25 14:38:27,Jonas Jenwald,"Enable the `declaration-block-no-redundant-longhand-properties` Stylelint rule

Note that these changes were done automatically, using `gulp lint --fix`.
This rule will help avoid unnecessary repetition in the CSS; please see https://stylelint.io/user-guide/rules/declaration-block-no-redundant-longhand-properties/",False
a8af946bdc5e70f193be2116d921c6f17d9bb1af,2023-03-25 14:16:07,Jonas Jenwald,Update l10n files,False
ee15ec91449c758049b3ce8fd535784bffd8f26c,2023-03-25 14:11:15,Jonas Jenwald,Update npm packages,False
c706c6c34f4c47e75b116027b68987d9a238ca78,2023-03-24 16:42:11,Jonas Jenwald,"Merge pull request #16185 from Snuffleupagus/prefer-negative-index

Enable the `unicorn/prefer-negative-index` ESLint plugin rule",True
96e34fbb7d7bb556392646a7a6720182953ac275,2023-03-24 14:48:32,Jonas Jenwald,"Enable the `unicorn/prefer-negative-index` ESLint plugin rule

Please see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-negative-index.md",False
b119cde030fbaeb8ae8d1e4f78e3bdb55e6978ef,2023-03-24 14:37:22,Jonas Jenwald,"Merge pull request #16198 from Snuffleupagus/viewer-ChangeScale-cap

Reduce some duplication in the `PDFViewer.{increaseScale, decreaseScale}` methods",True
378caa72039667566cef5a0b7863c7dbfb882489,2023-03-23 18:37:10,Jonas Jenwald,"Slightly reduce the size of the `FontInspector`-integration in the API

Given that this functionality only applies in the viewer, when `PDFBug` is being enabled and used, it can't hurt to slightly reduce the size of this code.",False
184f5701e917d8315d161adcefa2b51c82c30b18,2023-03-23 18:29:59,Jonas Jenwald,"Merge pull request #16196 from Snuffleupagus/String-replaceAll

Use `String.prototype.replaceAll()` where appropriate",True
1fc09f02355df3c9303bf9720116562b9be86063,2023-03-23 17:27:10,Jonas Jenwald,"Enable the `unicorn/prefer-string-replace-all` ESLint plugin rule

Note that the `replaceAll` method still requires that a *global* regular expression is used, however by using this method it's immediately obvious when looking at the code that all occurrences will be replaced; please see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll#parameters

Please find additional details at https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-string-replace-all.md",False
56b46996508cbfb7e3aa5cf690b809322f5b52f1,2023-03-23 13:55:23,Jonas Jenwald,"Reduce some duplication in the `PDFViewer.{increaseScale, decreaseScale}` methods

 - Reduce a little bit of duplication by enforcing the max/min scale-values once, at the end, in the `increaseScale`/`decreaseScale` methods.
 - Convert the ""private"" `PDFViewer` scale-related methods into actually private ones, now that JavaScript supports that.",False
c3e62e1e4ed9663ed0a346dfd394d86f33c65b58,2023-03-22 20:45:11,Jonas Jenwald,"Merge pull request #16192 from nchevobbe/cursor-draggable

Use cursor:move for draggable texts and drawings (Bug 1804252)",True
5f64621d46339b2548e10d387eeddfa3e261d064,2023-03-22 20:01:10,Jonas Jenwald,"Use `String.prototype.replaceAll()` where appropriate

This fairly new method allows replacing *multiple* occurrences within a string without having to use regular expressions.

Please refer to:
 - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll
 - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll#browser_compatibility",False
076bb30b6cca6841167d8ccb53dd16d9b5c7cd03,2023-03-22 17:29:10,Jonas Jenwald,"Merge pull request #16182 from Snuffleupagus/inset-block

Introduce `inset-block` usage in the viewer CSS",True
915bdd657686891bda72d5c7299bef70bc470766,2023-03-22 17:27:57,Jonas Jenwald,"Merge pull request #16173 from Snuffleupagus/inset

Introduce `inset` usage in the CSS files",True
39bbd8c94f982bf7eb32ce92812f52751571904d,2023-03-22 16:57:54,Jonas Jenwald,"Merge pull request #16193 from Snuffleupagus/non-standard-ligatures

Add even more non-standard ligatures (PR 15517 follow-up)",True
137a2d6e30f9473ca45ae4be5088fd875316ab57,2023-03-22 15:12:52,Jonas Jenwald,"Add even more non-standard ligatures (PR 15517 follow-up)

Given that we already create multi-byte ToUnicode entries in other cases, see e.g. the `getNormalizedUnicodes` table, this is hopefully fine.",False
f39ff20485014a8782ca71844ed01d72f7c2ac91,2023-03-22 14:55:53,Jonas Jenwald,"Merge pull request #16191 from Snuffleupagus/XRefStm-Set

Track previous ""XRefStm""s in a `Set`, rather than an `Object`",True
7f80052fdfa78cc65341228ccd67786fe17c5793,2023-03-22 14:19:43,Nicolas Chevobbe,Use cursor:move for draggable texts and drawings (Bug 1804252),False
122d5e549a28d6b4909ca51525fc02c8260f376c,2023-03-22 14:11:19,Jonas Jenwald,"Track previous ""XRefStm""s in a `Set`, rather than an `Object`

Having just reviewed a patch touching this code, I couldn't help noticing that an `Object` isn't really the optimal data-structure for this and nowadays we can do better by using a `Set` instead.",False
9321758d912c296647569574f60c62fe767f4a9f,2023-03-22 02:47:18,Jonas Jenwald,"Merge pull request #16186 from Snuffleupagus/issue-16176

Support multi-byte ToUnicode entries, when using predefined CMaps (issue 16176)",True
d4bcfe8c16aec6c9c944437e9ae91a2a2a7e7981,2023-03-22 02:05:57,Jonas Jenwald,"Support multi-byte ToUnicode entries, when using predefined CMaps (issue 16176)

Hopefully this makes sense, since we already ""create"" multi-byte ToUnicode entries in other cases (see e.g. the `getNormalizedUnicodes` table).",False
8bfebf1c24e090695007eb8eec3dbe7660379f79,2023-03-22 01:51:49,calixteman,"Merge pull request #16188 from calixteman/bug1823296

Use the position of the previous xref stream if any when saving a pdf (bug 1823296)",True
2d0f30a67c97657194a6e9d77cb6eafbf9172183,2023-03-21 23:57:24,Calixte Denizet,Use the position of the previous xref stream if any when saving a pdf (bug 1823296),False
a3ab2f679077ea5a3058934c8ee5de70f1c2c685,2023-03-20 21:12:39,Jonas Jenwald,"Introduce `inset-block` usage in the viewer CSS

Given that the viewer always set the `dir`-attribute, to either LTR or RTL, we should be able to use this logical CSS property to (very slightly) reduce the size of the CSS; please see https://developer.mozilla.org/en-US/docs/Web/CSS/inset-block",False
b1e0253f29176751c9762f88b5b9765fcf9fc07c,2023-03-20 18:52:09,Jonas Jenwald,"Merge pull request #16175 from Snuffleupagus/LoopbackPort-transfer

Fix the `transfer` parameter, for `structuredClone`, in the `LoopbackPort`",True
a29c131e905615df452cd830da65264019e54091,2023-03-20 18:51:37,Jonas Jenwald,"Merge pull request #16181 from Snuffleupagus/pr-16162

Only warn about missing `--scale-factor` CSS-variable for visible textLayers (PR 16162 follow-up)",True
8bf5e96af9481dea976b034853095bbf2a3e348e,2023-03-20 17:21:26,Jonas Jenwald,"Only warn about missing `--scale-factor` CSS-variable for visible textLayers (PR 16162 follow-up)

This is something that I completely overlooked in PR 16162, which in some cases cause the default viewer to incorrectly print warnings.
This can be reproduced with the PAGE scrolling-mode, and/or the PresentationMode, and this patch simply work-around it by checking the visibility as well (since the warning is a best-effort solution anyway).",False
fb2367d14f4870e740cfeccb5c063586859c5eb2,2023-03-20 17:11:03,Jonas Jenwald,"Merge pull request #16180 from Snuffleupagus/appendFeFunc

Add a helper, in `DOMFilterFactory`, to reduce duplication when creating `<feFuncX>`s",True
cc9f6650a8c595bd3b2a2723a6f193e63790a122,2023-03-20 16:11:57,Jonas Jenwald,"Stop passing in `pageColors` to the `CanvasGraphics`-constructor (PR 16075 follow-up)

The `pageColors`-option was removed from the `CanvasGraphics`-constructor in PR 16075, hence the code in the API no longer needs to pass in that option; this is something that I missed during review.",False
86cf62699c11a6f346e42fd7ed4f21461ad75fa0,2023-03-20 15:57:47,Jonas Jenwald,"Add a helper, in `DOMFilterFactory`, to reduce duplication when creating `<feFuncX>`s

Currently we repeat the same code verbatim multiple times in the `DOMFilterFactory`, which seems completely unnecessary.",False
3903391f3cbed25806adc4a9874979f7725ec883,2023-03-20 14:48:25,calixteman,"Merge pull request #16075 from calixteman/svg_filter_hcm

[api-minor] Use a SVG filter when rendering pages in HCM",True
c4a725fe981fb0d1f1b5ece7cad378027d25fe98,2023-03-20 02:34:01,Jonas Jenwald,"Fix the `transfer` parameter, for `structuredClone`, in the `LoopbackPort`

The way that we handle the `transfer` parameter is unfortunately wrong, ever since PR 14392 which introduced the code, given that the MDN article originally contained incorrect information; please see https://github.com/mdn/content/pull/23164

By updating the `structuredClone` call such that it works correctly, we can enable more unit-tests in Node.js environments; please refer to https://developer.mozilla.org/en-US/docs/Web/API/structuredClone#parameters",False
553c2e05cdb039d00413e888512b1b7967e3edd4,2023-03-19 19:02:37,Jonas Jenwald,"Introduce `inset` usage in the CSS files

The `inset` property is a nice shorthand that can be used to avoid having to specify the positions individually; please see
 - https://developer.mozilla.org/en-US/docs/Web/CSS/inset
 - https://developer.mozilla.org/en-US/docs/Web/CSS/inset-inline",False
33f5d94f23f16073dd35cecebe88065b0d4bc43d,2023-03-19 17:13:44,Tim van der Meij,"Merge pull request #16172 from Snuffleupagus/margin-inline

Use `margin-inline` in the `web/pdf_viewer.css` file (PR 14670 follow-up)",True
6b89e66bd09a26eb1fea7bd10ea664c0620d93b4,2023-03-19 17:04:11,Tim van der Meij,"Merge pull request #16169 from Snuffleupagus/viewer-html-preprocessor-cleanup

Clean-up the pre-processor statements in `web/viewer.html`",True
1efe41c24871d3110ef0b2c15d500cfd6ce25449,2023-03-19 17:01:34,Jonas Jenwald,"Use `margin-inline` in the `web/pdf_viewer.css` file (PR 14670 follow-up)

Given that the viewer always set the `dir`-attribute, we should be able to use logical margins in this CSS file as well; please also see https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline",False
27fe7e9e722c546dbec226517942488069d73910,2023-03-19 17:00:11,Tim van der Meij,"Merge pull request #16171 from Snuffleupagus/PDFViewer-cleanup-scale-methods

Clean-up the `PDFViewer.{increaseScale, decreaseScale}` methods",True
9060757064576aa1bc5ac0d4b34f8c8e66642d52,2023-03-19 16:17:02,Jonas Jenwald,"Clean-up the `PDFViewer.{increaseScale, decreaseScale}` methods

The signatures of these methods were changed in PR 15886, which has now been included in a couple of releases, hence it should hopefully be OK to remove the fallback code-paths now.
Also, the methods are updated slightly to be explicit about what options are supported and we'll no longer pass along any arbitrary options to the ""private"" methods.",False
7d688769cfcff98db7a05a74579b44feef3656c3,2023-03-18 21:47:46,Jonas Jenwald,"Clean-up the pre-processor statements in `web/viewer.html`

Some of these pre-processor statements are *many* years old, and could thus do with some clean-up. Note that the pre-processor originally didn't support else-if statements, and by using those the code becomes a bit less verbose.",False
9db450966498123e23b816168de1626bf522afe1,2023-03-18 18:36:42,Tim van der Meij,"Merge pull request #16166 from Snuffleupagus/pr-16151-followup

Simplify the `applyTransferMapsToCanvas` method (PR 16151 follow-up)",True
da080cc26ead8653f615ba42d197a2e33ef2a1ea,2023-03-18 17:15:10,Calixte Denizet,"[api-minor] Use a SVG filter when rendering pages in HCM

The idea is to apply an overall filter on each page: the main advantage
is to have some filtered images which could help to make them visible for
some users.",False
2fea9ee21bc8209626fae105e49399aeef7db995,2023-03-17 17:28:35,Jonas Jenwald,"Simplify the `applyTransferMapsToCanvas` method (PR 16151 follow-up)

During review of PR 16151 this method was simplified, however I overlooked the fact that we now can (and really should) improve this by removing duplication.",False
85166c60fd8363b428176f0e62adb3db560f7c70,2023-03-16 21:11:13,Jonas Jenwald,"Merge pull request #16162 from Snuffleupagus/issue-16139

Warn about missing/incorrect `--scale-factor` CSS-variable in `renderTextLayer` (issue 16139)",True
0e54a3c37afab75473b81e4fe6af90db2b5a027c,2023-03-16 16:23:12,Jonas Jenwald,"Warn about missing/incorrect `--scale-factor` CSS-variable in `renderTextLayer` (issue 16139)

Unfortunately I don't believe that we can simply add a default `--scale-factor` CSS-variable to the `container`-element, since that might not be entirely appropriate/correct in all cases.[1]
However, we can at least print a console-error to hopefully make this situation more apparent to users. (This is purposely not using the `warn` helper-function, since those messages can be disabled.)

---
[1] One example is in our reference-tests, where we don't need to add it to the `container`-element itself.",False
5e4b3d13ebc6eb2453f0cad12f33964e2d4fc6fc,2023-03-14 18:33:26,Jonas Jenwald,"Merge pull request #16151 from Snuffleupagus/DefaultFilterFactory

[api-minor] Extend general transfer function support to browsers without `OffscreenCanvas`",True
07a3283e53476ec9d7da510d80221e21b9334241,2023-03-14 17:54:51,Jonas Jenwald,"Merge pull request #16152 from Snuffleupagus/type-fixes

Miscellaneous small TypeScript fixes",True
50c844c5b84cf6f8b8fb5cc95246d1975e3cccd4,2023-03-14 17:39:20,Jonas Jenwald,"Stop including `isOffscreenCanvasSupported` in the ""StartRenderPage"" message

With the previous commit this is now completely unused in API, hence it can be removed. This is done in a separate commit to make it easier to re-instate it, would the need ever arise.",False
fc055dbd80a3ed66d9996a80a84effd4658c7086,2023-03-14 17:39:08,Jonas Jenwald,"[api-minor] Extend general transfer function support to browsers without `OffscreenCanvas`

This patch extends PR 16115 to work in all browsers, regardless of their `OffscreenCanvas` support, such that transfer functions will be applied to general rendering (and not just image data).
In order to do this we introduce the `BaseFilterFactory` that is then extended in browsers/Node.js environments, similar to all the other factories used in the API, such that we always have the necessary factory available in `src/display/canvas.js`.

These changes help simplify the existing `putBinaryImageData` function, and the new method can easily be stubbed-out in the Firefox PDF Viewer.

*Please note:* This patch removes the old *partial* transfer function support, which only applied to image data, from Node.js environments since the `node-canvas` package currently doesn't support filters. However, this should hopefully be fine given that:
 - Transfer functions are not very commonly used in PDF documents.
 - Browsers in general, and Firefox in particular, are the *primary* development target for the PDF.js library.
 - The FAQ only lists Node.js as *mostly* supported, see https://github.com/mozilla/pdf.js/wiki/Frequently-Asked-Questions#faq-support",False
945855a2b812ea46f2297e919501fa052c9621a4,2023-03-14 15:10:15,calixteman,"Merge pull request #16153 from calixteman/rm_base

Remove <base> tag from the Firefox built-in viewer (bug 1821408)",True
ea1d090109512045e68833a8f2c5626142c25def,2023-03-14 14:42:42,Calixte Denizet,"Remove <base> tag from the Firefox built-in viewer (bug 1821408)

The tag <base> is used to resolve relative URIs within the document.
Newly added SVG filters use a relative URI which then use the URI in base
but this one mismatches with the document URI and consequently filters are
not found in the Firefox viewer.
So this patch just removes <base> and replace few relative URLs by absolute
ones.",False
103fda1d9195c31b1b1bd4261aa01ba8a05ae7d7,2023-03-13 21:26:36,Jonas Jenwald,"Update the `canvasContext` parameter, in RenderParameters (issue 16133)

Hopefully this works correctly (since I don't know anything about TypeScript), given that `CanvasRenderingContext2D` is a standard name; please see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",False
e981badb9479cbb8684fbbf062ac76e7a8a481d6,2023-03-13 21:16:33,Jonas Jenwald,"Mark `updateMatchesCountOnProgress`, in the PDFFindControllerOptions, as optional (issue 15990)",False
351d11c9bd52c6209322964efe1576871031f03b,2023-03-12 17:59:51,Tim van der Meij,"Merge pull request #16147 from Snuffleupagus/update-packages

Update packages and translations",True
c6c9eb4ccbfd15f2562d33cd58ca3c0571cb8094,2023-03-12 15:10:53,Jonas Jenwald,Update l10n files,False
1d0652336613c53f6c1376b7de0366cbd7ebdb6b,2023-03-12 15:06:00,Jonas Jenwald,Update npm packages,False
9819f1cc6b1a85e418c2cf599e47c84854b7467f,2023-03-11 20:22:12,Tim van der Meij,"Merge pull request #16108 from Snuffleupagus/delay-cleanup

Slightly delay cleanup, after rendering, in documents with large images",True
05f29c872075293b1af683cb277c5c5aa7fc4b8c,2023-03-11 20:15:42,Tim van der Meij,"Merge pull request #16141 from Snuffleupagus/FilterFactory-docId

Include the document-id in the SVG-filter names (PR 16062 follow-up)",True
1234d207e99b4c75406dc3e788f62089e0657503,2023-03-11 19:23:21,Tim van der Meij,"Merge pull request #16142 from Snuffleupagus/issue-16134

Fix the JSDoc `returns`-type for two `PageViewport`-methods (issue 16134)",True
cc499505dfdd09016b752140b9d329b66ff3026f,2023-03-11 19:19:59,Tim van der Meij,"Merge pull request #16123 from Snuffleupagus/Node-16

[api-minor] Update the minimum supported Node.js version to 16",True
b2a86350fcf056e349a4ae985e4680f30d497e0d,2023-03-11 19:02:23,calixteman,"Merge pull request #16096 from bungeman/fix_trig_functions

Correct PostScript trigonometric operators",True
4a4c5d0fe27cff7295eab05307b38603c1777893,2023-03-10 22:15:29,calixteman,"Merge pull request #16145 from calixteman/issue16135

Move the svg definitions in its own div",True
f9539e57efcfeef33f992c07ff8bcb5d1f9af4fc,2023-03-10 21:33:40,Calixte Denizet,"Move the svg definitions in its own div

This way the svg element doesn't take up space in the viewer.
Fixes issue #16135.",False
0338df2f6d70d87b412d1899a2047b7a2175eb01,2023-03-09 23:45:49,calixteman,"Merge pull request #16138 from calixteman/bug1820909

Fix search in pdf a containing some UTF-32 characters (bug 1820909)",True
9232264b8a960de48486eccb71c7161e06043b03,2023-03-09 20:27:16,Jonas Jenwald,"Fix the JSDoc `returns`-type for two `PageViewport`-methods (issue 16134)

The affected methods have always returned Arrays, however the JSDoc did not accurately reflect that.",False
92296fa6a11f5fa19edd041585e7807f0e1787a2,2023-03-09 20:05:29,Jonas Jenwald,"Include the document-id in the SVG-filter names (PR 16062 follow-up)

In the general PDF.js library multiple PDF documents may be opened on the same web-page, which is why we many years ago started using document-specific identifiers to prevent issues with global data such e.g. with fonts.
Hence we need to treat the identifiers generated by the `FilterFactory` in the same way, since the SVG-filters for two separate PDF documents may otherwise get identical ids.",False
07b094729e139f372569f36cf7fe2839d058bfbb,2023-03-09 19:33:01,Calixte Denizet,"Fix search in pdf a containing some UTF-32 characters (bug 1820909)

Some chars were supposed to have a length equals to 1 but UTF-32 chars
can be longuer.",False
5fad91a680fb1da4fb27d0201e1dd62fc5341563,2023-03-09 19:19:50,Ben Wagner,"Better approximate gradient color stops

PDF gradients do not have color stops but an arbitrary PDF function of
the type f(t) -> color. CSS gradients are only based on color stops.
Most PDF gradient functions are produced from color stop oriented
gradients.

Take advantage of this by sampling the PDF function at a higher
frequency but not converting any samples which could be interpolated to
color stops. The sampling frequency is chosen to be the least common
multiple of as many values as practical to exactly re-create the common
case of the PDF function implementing equally spaced linearly
interpolated stops in RGB color space. This also allows for better
approximation of other smooth PDF functions (non-linear, or non-equally
spaced, or in different color space).

Fixes: #10572, #14165",False
c0671ac13341dde2b0378771dc846cad84352a9c,2023-03-08 21:36:10,Jonas Jenwald,"Slightly increase the maximum image sizes that we'll cache

The current value originated in PR 2317, and in the decade that have passed the amount of RAM available in (most) devices should have increased a fair bit.
Nowadays we also do a much better job of detecting repeated images at both the page- and document-level, which helps reduce overall memory-usage in many documents.

Finally the constant is also moved into the `src/shared/util.js` file, since it was implicitly used on both the main- and worker-thread previously.",False
15d9faba57a1d8994e39dbba0e3b41da5abf7ef4,2023-03-08 21:36:09,Jonas Jenwald,"Slightly delay cleanup, after rendering, in documents with large images

Currently in PDF documents with large images we immediately cleanup once rendering has finished, in order to reduce memory-usage.
Normally that shouldn't be a big problem, however when e.g. repeated zooming happens in the viewer that could easily lead to a lot of wasted resources (and waiting).

Hence this patch, which introduces a new `PDFPageProxy` method that will slightly delay cleanup after rendering.",False
e7a7f02f4c1a4f650c3fae1c933a8641bef4eef4,2023-03-08 21:36:09,Jonas Jenwald,"Convert a couple of fields/methods into properly private ones in `PDFPageProxy`

These were always intended to be *private*, so let's use modern JS features to actually enforce that.",False
a0ef5a4ae1ff7a5ed225d1ecac78695f10b3348b,2023-03-08 19:23:41,calixteman,"Merge pull request #16115 from calixteman/issue16114

Apply transfer filters to any graphic commands",True
32e2f7c8e5423f8d3e291b65f8bd24be577ae15f,2023-03-08 17:27:18,calixteman,"Merge pull request #16131 from calixteman/issue16049

Partially revert PR 15578",True
6839f15a32adb39da842669ceb15b580a4ebabe4,2023-03-08 16:51:53,Jonas Jenwald,"Merge pull request #16128 from Snuffleupagus/issue-16127

Support (rare) Type3 fonts with Pattern resources (issue 16127)",True
e5427ab11b1bf2e11d2145ac87a70d9721fa1504,2023-03-08 16:46:27,Jonas Jenwald,"Merge pull request #16122 from Snuffleupagus/rm-onUnsupportedFeature

[api-minor] Remove the deprecated `onUnsupportedFeature` functionality (PR 15758 follow-up)",True
dabfbc623e5b71fdec5263349c4c6903ef91d7af,2023-03-08 16:40:27,Calixte Denizet,"Partially revert PR 15578

The dimensions still need to be fixed (from times to times they're in px)
but it doesn't have to be postponed anymore.
To test it: draw something and when resizing look at the dimensions of the div
in devtools, the units must be %.",False
cc555a389b12e6d446c366a7b21a7605b72b4f4e,2023-03-08 15:42:56,calixteman,"Merge pull request #16117 from calixteman/workaround_bug1820511

Avoid to have a factor too close to 2 when downscaling image",True
1617ee6c3f45aa061300482844ec2bd0526dc2e8,2023-03-08 15:35:46,Calixte Denizet,"Avoid to have a factor too close to 2 when downscaling image

It's a workaround for bug 1820511: it only affects Firefox on Windows
using the D2D backend.",False
39ff039b8ab040fa355d33e9b4e3ef0288e0b36c,2023-03-08 15:26:03,calixteman,"Merge pull request #16125 from calixteman/firefox_max_area

[api-minor] Add an option to set the max canvas area",True
e9474f1c84fe5207da21be3acb29bc6c4125d40e,2023-03-08 15:07:06,Calixte Denizet,[api-minor] Add an option to set the max canvas area,False
471aef5fc650f8549c1ee6b792ffff852f677282,2023-03-08 13:50:52,Jonas Jenwald,"Support (rare) Type3 fonts with Pattern resources (issue 16127)

This simply extends the approach in PR 10727 to also cover Patterns, which shouldn't be a common occurrence in Type3 fonts (since this is the first issue we've seen).",False
8304df2520ad414b013ae7e98444b3808156b8ff,2023-03-08 02:47:19,Calixte Denizet,Apply transfer filters to any graphic commands,False
e0d934ac9dd0e5c5bac6a31e60826cd140978265,2023-03-08 02:42:02,calixteman,"Merge pull request #16124 from calixteman/issue16119

Slightly modify the max width of a tracking space",True
b8dda089e21514f5e796c9907bd64b6003ae7758,2023-03-08 00:08:49,Calixte Denizet,Slightly modify the max width of a tracking space,False
6d3506548dcd698e44c78cd114276cd4f242267a,2023-03-07 21:03:56,Jonas Jenwald,"[api-minor] Update the minimum supported Node.js version to 16

This patch updates the minimum supported environments as follows:
 - Node.js 16, which was released on 2021-04-20; see https://en.wikipedia.org/wiki/Node.js#Releases

Note also that Node.js 14 will very soon reach EOL, and thus no longer receive any security updates.",False
ec5288caa53cb5fb0acca3df2378899e0156c35f,2023-03-07 20:13:50,calixteman,"Merge pull request #16121 from calixteman/issue16120

Use appearance stream to render locked annotations (bug 1723568)",True
8db77cc3619b464ea724a88cd0b462dfbbb54fff,2023-03-07 19:31:31,Calixte Denizet,Use appearance stream to render locked annotations (bug 1723568),False
076fdbf6df9ec189041a53cbcd55ee156fb76b82,2023-03-07 18:08:30,Jonas Jenwald,"Merge pull request #16118 from Snuffleupagus/revert-update-rimraf

Revert ""Update `rimraf` to version 4""",True
2f3dcc2327a64b09e2c6159d3c3bdbc1df06c35a,2023-03-07 14:48:43,Jonas Jenwald,"[api-minor] Remove the deprecated `onUnsupportedFeature` functionality (PR 15758 follow-up)

This was deprecated in PR 15758, which has now been included in three official PDF.js releases.
While PR 15880 did limit the bundle-size impact of this functionality on e.g. the Firefox PDF Viewer, it still leads to some unnecessary ""bloat"" that these changes remove.
Furthermore, with this being deprecated there'd also be no effort put into e.g. extending the `UNSUPPORTED_FEATURES` list when handling future error cases.",False
2f2f1e5088e3a426b0d6263393ff617976041876,2023-03-07 00:27:00,Jonas Jenwald,"Revert ""Update `rimraf` to version 4""

This reverts commit 32357e3d172a552e0408b3e1ed743e87fe7d5a21.",False
e11371c75f91bf871cc7d33abbd324857fbfbb05,2023-03-06 23:47:44,calixteman,"Merge pull request #16110 from calixteman/norotate

[Annotation] Don't rotate an annotation when it has the NoRotate flag",True
3849063d3621ced13987d66157748b530f5d77da,2023-03-06 21:57:11,Calixte Denizet,[Annotation] Don't rotate an annotation when it has the NoRotate flag,False
652a6df62bdc6a1765f64714d96b9454433f847f,2023-03-05 20:08:51,calixteman,"Merge pull request #16077 from calixteman/large_image

Render large images even if they're larger than the canvas limits (bug 1720282)",True
05b0c9d7e67d282cb1eb7a8c7198d24c9eaf1f1b,2023-03-05 18:37:07,Calixte Denizet,"Render large images even if they're larger than the canvas limits (bug 1720282)

The idea is to encode large image in BMP format (which is very simple and doesn't
require to compute any checksums) and then use createImageBitmap with a BMP blob
(which doesn't suffer of the Canvas/ImageData limits).
From a performance point of view, it isn't crazy (generating a large blob + decoding
it on the main thread is really not ideal) but at least we've something to display
which is a way better than a blank page (and one can notice that most of the time is
spent in decoding the image from the pdf stream).",False
d7e4be9cdbe37d4d4d9ada34208820470bcd14ed,2023-03-04 14:40:37,Jonas Jenwald,"Merge pull request #16107 from mozilla/dependabot/npm_and_yarn/minimist-1.2.7

Bump minimist from 1.2.5 to 1.2.7",True
5cc65d193f1e8122edc3aaa0200280412aa28e4c,2023-03-04 08:12:21,dependabot[bot],"Bump minimist from 1.2.5 to 1.2.7

Bumps [minimist](https://github.com/minimistjs/minimist) from 1.2.5 to 1.2.7.
- [Release notes](https://github.com/minimistjs/minimist/releases)
- [Changelog](https://github.com/minimistjs/minimist/blob/main/CHANGELOG.md)
- [Commits](https://github.com/minimistjs/minimist/compare/v1.2.5...v1.2.7)

---
updated-dependencies:
- dependency-name: minimist
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>",False
158c836e26fd2a07eabb5bc52341bcccffafbb7c,2023-03-04 03:55:11,Ben Wagner,"Correct PostScript trigonometric operators

PDF 32000-1:2008 7.10.5.1 ""Type 4 (PostScript Calculator) Functions""
defers to the PostScript Language Reference for the description of these
functions. The PostScript Language Reference, third edition chapter 8
""Operators"" defines the `angle` type as a ""number of degrees"". Section
8.1 defines ""angle `sin` real"", ""angle `cos` real"", and ""num den `atan`
angle"". The documentation for `atan` further states that it will return
an angle in degrees between 0 and 360.

Handle these operators correctly in `PostScriptEvaluator.execute`.
Convert the inputs to `sin` and `cos` from degrees to radians for use
with `Math.sin` and `Math.cos`. Correctly pop two values from the stack
for `atan`, use `Math.atan2`, and convert from radians to (positive)
degrees.",False
4e52bcee4484a1c755a90af48a507b4532542f82,2023-03-02 22:55:00,Jonas Jenwald,"Merge pull request #16103 from Snuffleupagus/rm-direct-PDFDataRangeTransport

[api-minor] Remove calling `getDocument` directly with a `PDFDataRangeTransport`-instance (PR 15943 follow-up)",True
ceec93c8326f3b413ddf9e4ec1b92befaa959023,2023-03-02 19:42:01,Jonas Jenwald,"[api-minor] Remove calling `getDocument` directly with a `PDFDataRangeTransport`-instance (PR 15943 follow-up)

This was deprecated in PR 15943, which has now been included in two official PDF.js releases.
Given that `PDFDataRangeTransport` is somewhat unlikely to be used outside of the *built-in* Firefox PDF Viewer, it doesn't seem necessary to wait longer before removing this.

Also, removes the specific error-message for GENERIC builds to not unnecessarily ""advertise"" using non-objects when calling the `getDocument`-function.

*Please note:* This patch is written using the GitHub UI, since I'm currently without a dev machine, so hopefully it works correctly.",False
d4216264e82daf9aca0cda069264e031243bd640,2023-03-02 18:04:50,calixteman,"Merge pull request #16062 from calixteman/create_image_in_worker

[api-minor] Generate images in the worker instead of the main thread.",True
fd03cd5493f4d47f05fcfbb7cd0e73a3714f3011,2023-03-01 22:10:12,Calixte Denizet,"[api-minor] Generate images in the worker instead of the main thread.

We introduced the use of OffscreenCanvas in #14754 and this patch aims
to use them for all kind of images.
It'll slightly improve performances (and maybe slightly decrease memory use).
Since an image can be rendered in using some transfer maps but because of
OffscreenCanvas we don't have the underlying pixels array the transfer maps
stuff is re-implemented in using the SVG filter feComponentTransfer.",False
9640add1f76c8ae379862baf6d3dc828c5906df9,2023-03-01 15:04:11,Jonas Jenwald,"Merge pull request #16100 from Snuffleupagus/getDocument-canvasFactory

[api-minor] Move the `canvasFactory` option into `getDocument`",True
f42a2e845110c110111c5e40a7f7e156990bbbf5,2023-03-01 13:37:16,Jonas Jenwald,"[api-minor] Move the `canvasFactory` option into `getDocument`

Rather than repeatedly initializing a `canvasFactory`-instance for every page, move it to the document-level instead.

*Please note:* This patch is written using the GitHub UI, since I'm currently without a dev machine, so hopefully it works correctly.",False
22c997030925cc88a9c39b52c097d592ad1c5c2f,2023-02-28 12:55:50,Jonas Jenwald,"Merge pull request #16095 from Snuffleupagus/worker-isOffscreenCanvasSupported

Check `OffscreenCanvas` support once on the worker-thread",True
45c332110e1056e3d1c426231f826f8f70dbc1f2,2023-02-27 16:57:28,Jonas Jenwald,"Check `OffscreenCanvas` support once on the worker-thread

Currently we repeat the `FeatureTest.isOffscreenCanvasSupported` checks all over the worker-thread code, and with upcoming changes this will become even ""worse"".

Hence this patch, which changes the *worker-thread* default value for the `isOffscreenCanvasSupported`-parameter to `false` and moves the feature-testing into the `BasePdfManager`-constructor.

*Please note:* This patch is written using the GitHub UI, since I'm currently without a dev machine, so hopefully it works correctly.",False
2da2ac492ef3fdba4bc9f6fb992bda2fb57dbb82,2023-02-26 17:52:23,Tim van der Meij,"Merge pull request #16093 from timvandermeij/bump

Bump versions in `pdfjs.config`",True
580180a720546855698424f293a152f4b96c1773,2023-02-26 17:45:43,Tim van der Meij,Bump versions in `pdfjs.config`,False
af64149885482cbbe577ef90abf06272f34327bb,2023-02-25 03:10:18,Jonas Jenwald,"Merge pull request #16086 from mozilla/Snuffleupagus-textLayer-OffscreenCanvas

Use `OffscreenCanvas` as intended for all code-paths in `src/display/text_layer.js` (PR 15722 follow-up)",True
5075d0495b422b8f0245bb10dad355899672d8d7,2023-02-24 15:59:58,Jonas Jenwald,"Use `OffscreenCanvas` as intended for all code-paths in `src/display/text_layer.js` (PR 15722 follow-up)

Currently some `getCtx` calls will have `isOffscreenCanvasSupported === undefined` set, meaning that `OffscreenCanvas` isn't being used as intended, since no `TextLayerRenderTask._isOffscreenCanvasSupported` property exists.

*Please note:* This patch is written using the GitHub UI, since I'm currently without a dev machine, so hopefully it works correctly.",False
9c58d4f7f204357899db2dd549e3022bf31db771,2023-02-23 18:08:54,calixteman,"Merge pull request #16082 from calixteman/fix_class_in_path

[Acroform] Use the full path to find the node in the XFA datasets where to store the value",True
3a2142338614b3ff507932b1bee41f327b6fdc8c,2023-02-23 16:39:39,Calixte Denizet,"[Acroform] Use the full path to find the node in the XFA datasets where to store the value

I noticed several 'Path not found' errors because of a field called #subform[2].
From the XFA specs, the hash is used for a class of elements in the template tree.
When we're looking for a node in the datasets tree, it doesn't make sense to search
for a class. Hence the path element starting with a hash are just skipped.",False
e676c9388df184151eecd81ec9592fd857cfeb73,2023-02-23 01:01:51,calixteman,"Merge pull request #16080 from calixteman/link_hcm

[a11y] Improve the visibility of link annotations in HCM",True
a074525bfbfc5ba7a225be27068de5c88692f780,2023-02-23 00:09:28,Calixte Denizet,"[a11y] Improve the visibility of link annotations in HCM

In order to help to identify a link, we add a border around it with the LinkText color.
And backdrop colors are inverted when the mouse pointer hovers them, this way it should
help to identify the link where the pointer is.",False
3f33fbf8cf1d7eb5f29de32288ebaa4dd4922501,2023-02-22 18:21:12,Jonas Jenwald,"Merge pull request #16079 from mozilla/Snuffleupagus-PDFObjects-bitmap

Move the `ImageBitmap` clean-up into the `PDFObjects` class",True
1b076b7a359e10c8b2fd38cdf00f088767ad12ba,2023-02-21 16:30:45,Jonas Jenwald,"Move the `ImageBitmap` clean-up into the `PDFObjects` class

With upcoming changes we'll potentially start to cache `ImageBitmap` data at the document-level, in addition to just at the page-level.
Hence we need to ensure that such data is actually released on clean-up, and rather than duplicating the existing *manual* handling this code is instead moved into the `PDFObjects.clear` method. (In my opinion, this is an overall improvement even without globally cached `ImageBitmap` data.)

*Please note:* This patch is written using the GitHub UI, since I'm currently without a dev machine, so hopefully it's correct and makes sense.",False
534b22aec5eaa88d796a17b9732d82f3fcd25b3a,2023-02-20 15:45:20,calixteman,"Merge pull request #16071 from calixteman/issue16067

[JS] Send a Validate action on change on Choice widget",True
dca54c8f8a34e1ac63b6a746fbf09fac6df34df5,2023-02-19 21:03:05,Calixte Denizet,[JS] Send a Validate action on change on Choice widget,False
255e982542c5e2983c783de9cead4912c9b2d8b3,2023-02-19 16:52:10,Tim van der Meij,"Merge pull request #16056 from Snuffleupagus/xfaLayer-on-top

Don't try to place the `xfaLayer` ""on top"" in regular PDF documents",True
f2baa486087fced398156a2f49c97f2d18847e50,2023-02-19 16:50:09,Tim van der Meij,"Merge pull request #16055 from Snuffleupagus/deprecated-Node-Buffer

[api-minor] Deprecate providing binary data as `Buffer` in Node.js environments",True
9fac676796e71f309a55dd8619a913754839bd39,2023-02-19 16:42:07,Tim van der Meij,"Merge pull request #16054 from Snuffleupagus/Driver-getDocument-cleanup

A little clean-up of the `getDocument` call in `test/driver.js`",True
13af3f3442d1e6c0b08c39a54605f6bd5b564b1c,2023-02-17 18:10:54,calixteman,"Merge pull request #16065 from calixteman/issue16063

Don't replace an eol by a whitespace when the last char is a Katakana-Hiragana diacritic",True
fc7d74385fb9903154942ebe49be23c344c831e4,2023-02-16 16:01:58,Calixte Denizet,Don't replace an eol by a whitespace when the last char is a Katakana-Hiragana diacritic,False
3c66b031e33d9cc20c728179f826fdef344b6560,2023-02-14 17:24:44,Jonas Jenwald,"Don't try to place the `xfaLayer` ""on top"" in regular PDF documents

Given that we only create an `xfaLayer` in ""pure"" XFA-documents, this code can be moved into the appropriate branch instead.",False
b6ba8cc84a0cef762aa5349dcb18cc0799f5d946,2023-02-14 16:00:40,Jonas Jenwald,"[api-minor] Deprecate providing binary data as `Buffer` in Node.js environments

The `Buffer`-object is Node.js specific functionality[1], thus (obviously) not found in browsers. Please note that the PDF.js library has never officially supported/documented that binary data can be passed as a `Buffer`, and that *internally* in the `src/core`-code we only work with standard `Uint8Array`s.
This means that if, in Node.js environments, a `Buffer` is passed to the API we need to wrap it into a `Uint8Array`, which essentially means creating a copy of the data and thus increasing memory usage.

---
[1] Refer to https://nodejs.org/api/buffer.html#buffer",False
df3b3592806734accfcc37e33a99624e40078388,2023-02-14 15:20:22,Jonas Jenwald,"Remove ""else after return"" from the `getUrlProp`/`getDataProp` helper functions

This helps readability of this code a little bit, in my opinion, and it's actually ever so slightly less code in the *built* `pdf.js` file.",False
0e840f1c399cde258e349fdf66420439e1fe2fdd,2023-02-13 19:19:33,Jonas Jenwald,"A little clean-up of the `getDocument` call in `test/driver.js`

 - Pass the `URL`-object directly to `getDocument`, since that's been supported since PR 13166.
 - Remove support for the `disableRange`-option in the test-manifest, since it's completely unused. Please note that it's originally added in PR 2719, however there's never actually been any reference tests using it (not even from the start).
   Given that the option is `false` by default everywhere (e.g. in the Firefox PDF Viewer) and that we have unit-tests for `disableRange = true`, it doesn't seem necessary to add new reference tests for it now.",False
546902df63b4fcfad419bc8109d128040d7b27ab,2023-02-13 16:26:12,Jonas Jenwald,"Merge pull request #16053 from Snuffleupagus/test-set-annotationStorage

Reduce duplication for reference tests with an `annotationStorage` entry",True
8026ed6b0ae180c88fbc94937ecb64bd45c7b654,2023-02-13 15:39:16,Jonas Jenwald,"Reduce duplication for reference tests with an `annotationStorage` entry

Currently we duplicate the same code more than once in the `test/driver.js` file, which we can avoid by adding a new `AnnotationStorage` helper method instead.",False
f66cbb0b5e3793a698afe898c55f6563c447e3bd,2023-02-12 23:59:52,Tim van der Meij,"Merge pull request #16051 from Snuffleupagus/rm-PDFThumbnailViewer-eventBus

Remove the unused `eventBus` option in `PDFThumbnailViewer` (PR 15215 follow-up)",True
6985286300ccf1e7f9e8dfe95a251b49df54986a,2023-02-12 23:08:31,Jonas Jenwald,"Remove the unused `eventBus` option in `PDFThumbnailViewer` (PR 15215 follow-up)

This became unused with PR 15215, but I unfortunately forgot to remove it.",False
22618213c7f69060d5e7c4823f3f9863588236df,2023-02-12 16:17:57,Tim van der Meij,"Merge pull request #16040 from Snuffleupagus/arrayBuffersToBytes

Re-factor the `arraysToBytes` helper function (PR 16032 follow-up)",True
6d4d402a78510dddd59fe8360eeed30f0ca93ea8,2023-02-12 02:04:37,Jonas Jenwald,"Move the `arrayBuffersToBytes` helper function into the worker-thread

Given that this helper function is only used on the worker-thread, there's no reason to duplicate it in both of the *built* `pdf.js` and `pdf.worker.js` files.",False
25a6bc4e018f5a4daea8e2b97fdc1f6c5a3ccc9f,2023-02-11 23:33:51,Tim van der Meij,"Merge pull request #16013 from Snuffleupagus/COMPONENTS-rm-inline-attachment-open

Remove inline opening of PDF attachments in the COMPONENTS build",True
ddf05b0795e0864dfc2faf76b8fa1663730f88ae,2023-02-11 23:32:32,Tim van der Meij,"Merge pull request #16028 from Snuffleupagus/move-CHROME-rewriteUrlClosure

Move `rewriteUrlClosure` into the `web/chromecom.js` file",True
3daf4274e8c9f99acad369aceb34301f4a998a22,2023-02-11 23:31:31,Tim van der Meij,"Merge pull request #16045 from Snuffleupagus/viewer-initializeOptions

Slightly re-factor preferences/options initialization in the viewer",True
ec4c84176f1d8f5abb6181d4616adf082045a46b,2023-02-11 23:28:29,Tim van der Meij,"Merge pull request #16047 from Snuffleupagus/BasePdfManager-args

Improve the consistency between the `LocalPdfManager`/`NetworkPdfManager` constructor",True
5c3017b6aeb7b28645821681709777e9898424da,2023-02-11 23:19:52,Tim van der Meij,"Merge pull request #16048 from Snuffleupagus/update-Stylelint

Update Stylelint to version 15",True
5023a41fb7532267379d03cf531d06a7e3eaa2fb,2023-02-11 19:11:32,Jonas Jenwald,"Update Stylelint to version 15

Notably this obsoletes the `stylelint-config-prettier` package; please see https://github.com/stylelint/stylelint/blob/main/docs/migration-guide/to-15.md for additional details.",False
fd1c9e34ac63bbe0287c5b218ccaa9cb1f15cf9d,2023-02-11 18:40:09,Tim van der Meij,"Merge pull request #16046 from Snuffleupagus/update-packages

Update packages and translations",True
18042163cee98c09a4df94d9bd40a6c67f5a563c,2023-02-11 18:09:52,Jonas Jenwald,"Improve the consistency between the `LocalPdfManager`/`NetworkPdfManager` constructor

Currently these classes take a bunch of parameters (somewhat randomly ordered), probably because this is very old code that's been extended over the years.
Hence this patch changes the constructors to use parameter-objects instead, which improves consistency and (slightly) reduces the amount of code as well.

*Please note:* Also removes the `msgHandler`-property on these classes, since I cannot find a single call-site that accesses it.",False
34ec3caaa79edceb06f9710ffa5233a52fa90cfb,2023-02-11 15:05:21,Jonas Jenwald,Update l10n files,False
650fd79f9269da448ef34dc04c81c02455c5a061,2023-02-11 15:00:43,Jonas Jenwald,Update npm packages,False
0e070c805ec30ab6e2b6d5781ea4a543eaa91e59,2023-02-10 20:15:39,Jonas Jenwald,"Slightly re-factor preferences/options initialization in the viewer

Given that the debugging hash-parameters will only be used when the `pdfBugEnabled` option is manually set[1], we can skip a *tiny* bit of asynchronicity for ""regular"" users.

---
[1] Note that it's enabled by default in the development viewer, i.e. in `gulp server` mode.",False
6c158da5a84e5dc8553f90d95b396235edb7aa1d,2023-02-10 20:07:51,Jonas Jenwald,"Limit `AppOptions._hasUserOptions` to only GENERIC builds

It's completely unused elsewhere, e.g. in the Firefox PDF Viewer.",False
903adc8708d11d2367ce3faab8f6b5f26fd97f24,2023-02-10 17:25:19,Jonas Jenwald,"Merge pull request #16042 from Snuffleupagus/GetAnnotations-rethrow

Ensure that ""GetAnnotations"" errors are propagated to the main-thread (PR 15267 follow-up)",True
14b0e8c0b633ca07bf66e942d81cc41905cc3055,2023-02-10 16:48:35,Jonas Jenwald,"Ensure that ""GetAnnotations"" errors are propagated to the main-thread (PR 15267 follow-up)

With the changes in PR 15267 we're now accidentally swallowing ""GetAnnotations"" errors, rather than propagating them to the main-thread as intended.",False
c56f25409d8e74b14371730083a470955cc72bcd,2023-02-10 14:56:35,Jonas Jenwald,"Re-factor the `arraysToBytes` helper function (PR 16032 follow-up)

Currently this helper function only has two call-sites, and both of them only pass in `ArrayBuffer` data. Given how it's implemented there's a couple of code-paths that are completely unused (e.g. the ""string"" one), and in particular the intended fast-paths don't actually work.
This patch re-factors and simplifies the helper function, and it'll no longer accept anything except `ArrayBuffer` data (hence why it's also re-named).

Note that at the time when `arraysToBytes` was added we still supported browsers without TypedArray functionality, and we'd then simulate them using regular Arrays.",False
5ba596786ccd898ff3c70b9b738678d3fefc59c6,2023-02-10 02:31:16,Jonas Jenwald,"Change `WorkerTasks`, in `WorkerMessageHandler.createDocumentHandler`, to a use a Set

This is a tiny bit more compact, thanks to the `Set.prototype.delete` method.",False
0fca6e187c192c931a28395b258a29dc6b4104e2,2023-02-10 00:26:16,calixteman,"Merge pull request #16035 from calixteman/fix_combo_value

[Annotation] A combo can have a value other than one in the options",True
1fc8350795859357da8b07a1abc1201ce24c82a4,2023-02-09 23:26:20,Jonas Jenwald,"Merge pull request #16032 from Snuffleupagus/less-arrayByteLength

Reduce usage of the `arrayByteLength` helper function",True
cb1638530d83707bb772cdc15d80517a7cdfff0f,2023-02-09 23:20:57,Calixte Denizet,"[Annotation] A combo can have a value other than one in the options

When printing the pdf in #12233 in Acrobat, we can see that the combo for country
is empty: it's because the V entry doesn't have to be one of the options.",False
972744a68f8e3d0aea03225c7142693da76d0569,2023-02-09 22:53:59,calixteman,"Merge pull request #16033 from calixteman/bug1640217

Ignore position of combining diacritics when getting text (bug 1640217)",True
533a461db01d3b6cf6f15d8740591b52d1da6cb9,2023-02-09 22:31:28,calixteman,"Merge pull request #16031 from calixteman/bug1770750

[Annotation] For choice widget, use the I entry instead of the V one (bug 1770750)",True
58e4d92884a118937abb1569c16b501cbba42b68,2023-02-09 21:56:13,Calixte Denizet,"[Annotation] For choice widget, use the I entry instead of the V one (bug 1770750)

It isn't really conform to the specifications but Acrobat is working like that...",False
4e9f26afa3d6f70f97569d7c9e7e97b4e74252a2,2023-02-09 21:43:57,Calixte Denizet,Ignore position of combining diacritics when getting text (bug 1640217),False
96d338e437b98c765b8f753fe5ff823063147e58,2023-02-09 20:20:38,Jonas Jenwald,"Reduce usage of the `arrayByteLength` helper function

We're using this helper function when reading data from the [`PDFWorkerStreamReader.read`](https://github.com/mozilla/pdf.js/blob/a49d1d1615c87130e12f3542deac6c2de314813d/src/core/worker_stream.js#L90-L98) and [`PDFWorkerStreamRangeReader.read`](https://github.com/mozilla/pdf.js/blob/a49d1d1615c87130e12f3542deac6c2de314813d/src/core/worker_stream.js#L122-L128) methods, and as can be seen they always return `ArrayBuffer` data. Hence we can simply get the `byteLength` directly, and don't need to use the helper function.

Note that at the time when `arrayByteLength` was added we still supported browsers without TypedArray functionality, and we'd then simulate them using regular Arrays.",False
323d3d246a58911775fe078949c1ed5fd310b0e4,2023-02-09 20:03:06,Jonas Jenwald,"Re-factor the `readChunk` function in `ChunkedStreamManager.sendRequest`

Move the `done` branch to the top of the function, similar to how we usually format things when `ReadableStream`s are used.",False
a49d1d1615c87130e12f3542deac6c2de314813d,2023-02-09 17:28:14,Jonas Jenwald,"Merge pull request #16030 from Snuffleupagus/LoopbackPort-Set

Change the `LoopbackPort` class to use a Set internally",True
9d29abdfa04241ec206d86e072818138f0846153,2023-02-09 17:04:41,Jonas Jenwald,"Change the `LoopbackPort` class to use a Set internally

This is a tiny bit more compact, thanks to the `Set.prototype.delete` method.",False
ff3b9ccf6e26f034eeb4c1031de5d6a57caf8956,2023-02-09 16:02:28,calixteman,"Merge pull request #16017 from calixteman/hide_struct_tree

Hide the struct tree layer during zooming",True
8df06f62bc496a08d147651d5689036843a7761b,2023-02-09 16:01:27,calixteman,"Merge pull request #16025 from calixteman/no_display_for_spinner

Avoid a useless animation when the spinner is invisible",True
40a3de8c37f6a08f773b747aef990cbd13cad249,2023-02-09 15:48:08,Jonas Jenwald,"Move `rewriteUrlClosure` into the `web/chromecom.js` file

Given that this is only used for the Chrome-addon, we can move this code into the relevant file instead.",False
9cea76483a7714c3f8f9f237a19fdacc3169cc89,2023-02-08 19:46:59,calixteman,"Merge pull request #16026 from calixteman/ptz_mac

Fix pinch-to-zoom on mac for the Firefox builtin viewer",True
c92ba393c2934b0b29b2d6e993484529b281252a,2023-02-08 19:34:41,Calixte Denizet,"Fix pinch-to-zoom on mac for the Firefox builtin viewer

In the mac case we don't want to care about the scaleFactor threshold
because else if too big another move could start and then subsequent
events aren't considered as wheel events.
It isn't really ideal and at some point we'll need to find a way at
least for the Firefox case to get the real events instead of the fake
wheel ones.",False
9faf2fa8a0b7f998473c95b7490f587d328153b6,2023-02-08 19:32:40,Jonas Jenwald,"Merge pull request #16019 from Snuffleupagus/viewer-rm-require

Remove most build-time `require` statements from the viewer (PR 16009 follow-up)",True
bb89daa2a8f09095c4965199bc72ea0547ab9f0b,2023-02-08 16:27:53,Calixte Denizet,"Avoid a useless animation when the spinner is invisible

In looking at a profile, I noticed in Marker chart that there's an animation
for loading-icon.gif even if this icon isn't visible.
This patch doesn't completely remove it but just slightly postpones it.",False
c8d9ad894bd75534ec7443e713ae4d3c4a78afc7,2023-02-08 03:47:16,calixteman,"Merge pull request #16023 from calixteman/issue16021

[Annotation] Take into account the stroke alpha for a FreeText without appearance",True
90ffbc1d397684509248551b87b26b818f7e2c0e,2023-02-08 03:15:19,Jonas Jenwald,"Remove most build-time `require` statements from the viewer (PR 16009 follow-up)

This further extends the web-specific import maps introduced in PR 16009, to allow removing *most* of the build-time `require` statements from the viewer. The few remaining ones are fallbacks used for the COMPONENTS respectively the `legacy` GENERIC builds.",False
a25895bf72bd52b09e455c58e65c391c5067b555,2023-02-08 02:45:27,Calixte Denizet,[Annotation] Take into account the stroke alpha for a FreeText without appearance,False
8f37301d1fc15a9d91c9f5155025833338ba12f0,2023-02-08 02:07:41,Jonas Jenwald,"Remove the ""div-css"" gulp task (PR 15968 follow-up)

After the compatibility updates in PR 15968 it's no longer strictly necessary to build the `viewer.css` file in order for the *development viewer* to work in Chromium-based browsers.

*Please note:* Given that Chromium-based browsers still don't support the *unprefixed* `mask-image` property the icons won't look right, however the development viewer itself works.
Given that Firefox is the *primary* development target, and that running `gulp generic` locally will generate polyfilled CSS, it seems reasonable to make this simplification here.",False
72abcedf487ec0f5ddaa7e3f44b9b11e54db5e82,2023-02-08 02:06:30,Jonas Jenwald,"Merge pull request #16018 from Snuffleupagus/GeckoView-skip-pageLabels

[GeckoView] Skip fetching/parsing of pageLabels",True
ecd86ccffc3e666346ee00923ba365e786a341c2,2023-02-08 01:27:49,calixteman,"Merge pull request #16020 from calixteman/bug1815476

[Annotation] Avoid to encrypt the appearance stream two times (bug 1815476)",True
ea7b4b4d6c6bfd24d8d8e066dda228857eb2fb9e,2023-02-07 23:56:46,Calixte Denizet,[Annotation] Avoid to encrypt the appearance stream two times (bug 1815476),False
00560ed8301970328377c8f3727e164b9b437e55,2023-02-07 22:58:44,Jonas Jenwald,"Merge pull request #16009 from Snuffleupagus/GeckoView-viewer-bundle-size

[GeckoView] Reduce the size of the *built* viewer",True
a348162c5bc4c80144e3ff1595f383dcc3dd2518,2023-02-07 20:50:27,Jonas Jenwald,"[GeckoView] Skip fetching/parsing of pageLabels

Currently there's no toolbar in the GV-viewer, hence invoking the pageLabels functionality isn't meaningful and just leads to unnecessary parsing on both the main- and worker-threads. (And if a toolbar is added at some point, it's not clear to me if we'd want to support pageLabels in the GV-viewer anyway.)",False
8c4843f69a85e85fe42ce983699213043d8ee505,2023-02-07 20:37:12,Jonas Jenwald,"[GeckoView] Introduce a development mode constant to tell the viewers apart

Currently we have a couple of pre-processor checks, specifically for the GV-viewer, spread throughout the code. This works fine when *building* the viewer, however they're obviously ignored in development mode (i.e. `gulp server`).
This leads to a situation where the GV development viewer, i.e. http://localhost:8888/web/viewer-geckoview.html, behaves subtly different from its built version. This could easily lead to bugs, hence this patch introduces a development mode constant to hopefully improve things here.

Finally, in a follow-up to PR 15842, also ignores the `pageMode`-state since there's no sidebar available.",False
5bd352f69bc242c7e36842be9b3005fd4f54a92f,2023-02-07 20:03:01,Calixte Denizet,Hide the struct tree layer during zooming,False
c971f4a0a9bde06d6cf5daa5eace80099d006807,2023-02-07 17:55:02,Jonas Jenwald,"Merge pull request #16016 from Snuffleupagus/GeckoView-skip-sidebar-fetching

[GeckoView] Avoid unused outline, attachments, and layers fetching",True
0cf4fbd471930f9ff961d1cc3e48e5168d23d7e9,2023-02-07 17:00:05,Jonas Jenwald,"[GeckoView] Avoid unused outline, attachments, and layers fetching

Currently there's no UI for this functionality in the GV-viewer, however we still call the API methods. This potentially leads to a bunch of worker-thread parsing, for PDF documents with these features, despite the result being completely unused.
Given that mobile devices are usually more resource constrained than desktop/laptop computers, not to mentioned battery life, we can avoid doing work that'll just be ignored anyway.",False
c00e237421f7e77a7e4841edd92c0c8a942c5c11,2023-02-06 16:32:22,Jonas Jenwald,"Remove inline opening of PDF attachments in the COMPONENTS build

The `DownloadManager.openOrDownloadData` method is written for the default-viewer specifically, assuming a viewer able to handle e.g. URL search/hash parameters. In the viewer components there's obviously no such functionality, and we should thus trigger downloading of PDF attachments directly instead.",False
a98e80c4ff7b58f3ac19fae4ac09483aee31ee08,2023-02-05 18:42:32,Jonas Jenwald,"[GeckoView] Reduce the size of the *built* viewer

Given that the GV-viewer isn't using most of the UI-related components of the default-viewer, we can avoid including them in the *built* viewer to save space.[1]
The least ""invasive"" way of implementing this, at least that I could come up with, is to leverage import maps with suitable stubs for the GV-viewer.

The one slightly annoying thing is that we now have larger import maps across multiple html-files, and you'll need to remember to update all of them when making future changes.

---
[1] With this patch, the built `viewer.js` size is 391 kB and `viewer-geckoview.js` is 285 kB.",False
05d821e6803eee366ff07279500b5af733631ca6,2023-02-05 17:46:59,Tim van der Meij,"Merge pull request #16007 from Snuffleupagus/getDocument-params-init

Re-factor the parameter parsing/validation in `getDocument`",True
ab6b4ca1f2effa6ed4b5556edfa26e1fdb00196c,2023-02-05 17:23:17,Tim van der Meij,"Merge pull request #16006 from Snuffleupagus/viewer-rm-pdfDocument-checks

Miscellaneous small viewer improvements",True
0a0f3fc733c38a94eb89e9ffdbc7f8064ae772f3,2023-02-05 16:22:35,Jonas Jenwald,"Move the main-thread CMap/StandardFontData factory initialization to `getDocument`

By default we're using worker-thread fetching (in browsers) of this data nowadays, however in Node.js environments or if the user provides custom factories we still fallback to main-thread fetching.
Hence it makes sense, as far as I'm concerned, to move this initialization into the `getDocument` function to ensure that the factories can actually be initialized *before* attempting to load the document.

Also, this further reduces the amount of `getDocument` parameters that we need to pass into into the `WorkerTransport` class.",False
ce8ac6d96a46ad6602d61882c29be745e995ebd1,2023-02-05 16:22:33,Jonas Jenwald,"Only pass the necessary parameters to `_fetchDocument` and `WorkerTransport`

Currently we're passing all available parameters to this function respectively class, despite that not actually being necessary.
By splitting the parameters we not only improve the structure, and basically ""document"" the code a little bit, but we can also simplify the `_fetchDocument` function considerably.",False
512aa50fddc336552b5c5b63739f620e778451db,2023-02-05 16:22:25,Jonas Jenwald,"Re-factor the parameter parsing/validation in `getDocument`

This is very old code, where we loop through the user-provided options and build an internal parameter object. To prevent errors we also need to ensure that the parameters are correct/valid, which is especially important for the ones that are sent to the worker-thread such that structured cloning won't fail.[1]

Over the years this has led to more and more code being added in `getDocument` to validate the user-provided options, and at this point *most* of them have at least basic validation. However the way that this is implemented feels slightly backwards, since we first build the internal parameter object and only *afterwards* validate those parameters.[2]

Hence this patch changes the `getDocument` function to instead check/validate the supported options upfront, and then *explicitly* build the internal parameter object with only the needed properties.

---
[1] Note the supported types at https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm#supported_types

[2] The internal parameter object may also, because of the loop, end up with lots of unnecessary properties since anything that the user provides is being copied.",False
d9181236b27fbbb2f99473b24550f34e7585950e,2023-02-05 03:46:04,Jonas Jenwald,"[GENERIC viewer] Simplify the keyboard find-again state building

By using modern JavaScript features, we can ever so slightly reduce the amount of code needed here.",False
d6178a13d7384290db2b0582a4e3c1c9c592d2db,2023-02-05 03:46:04,Jonas Jenwald,Reduce a tiny bit of duplication in the `webViewerInitialized` function,False
d930f267f6b268466afb8b18415a26f048eb8a8b,2023-02-05 03:45:56,Jonas Jenwald,"Remove a couple of unnecessary PresentationMode-checks in `webViewerKeyDown`

Given that the `PDFViewerApplication.{zoomIn, zoomOut}` methods already contain PresentationMode-checks, this is just unnecessary duplication.",False
ea1ec7ffab891f3d79cd5aec3e544f51a4c84cb7,2023-02-05 02:47:53,Jonas Jenwald,"Remove a couple of unnecessary `pdfDocument` checks in `web/app.js`

These functions invoke the `PDFViewer.currentPageNumber` setter, which already checks that a `pdfDocument` is currently active. Also, given that they're event handlers for the First/Last-page buttons (in the SecondaryToolbar) they can't be invoked before the viewer has been fully initalized.",False
e69866492735c36623fbdbc9a96ce5e51a065f55,2023-02-04 19:43:12,Tim van der Meij,"Merge pull request #16004 from Snuffleupagus/WorkerTransport-cacheSimpleMethod

Improve how we cache Promises in `WorkerTransport`",True
b75dafba877f5d2494e818f3f7abfa3d352bb709,2023-02-04 19:37:42,Tim van der Meij,"Merge pull request #15987 from Snuffleupagus/onOpenWithTransport-params

Remove unused parameters from the `onOpenWithTransport` method in `PDFViewerApplication.initPassiveLoading`",True
bdb6d978a984b487411149aa2844076a86088a5a,2023-02-04 19:34:29,Tim van der Meij,"Merge pull request #15968 from Snuffleupagus/rm-postCSS-logical

[api-minor] Update the minimum supported browsers, and remove the PostCSS `logical` plugin",True
e848a0e61c626b2152337b34d1fd05b978cac5e7,2023-02-04 19:30:26,Tim van der Meij,"Merge pull request #15981 from Snuffleupagus/cMapPacked-true

[api-minor] Let the `cMapPacked` parameter, in `getDocument`, default to `true`",True
df71f82037c0cea9714b35f47eb43385a0ccd3ef,2023-02-04 18:53:43,Jonas Jenwald,"Merge pull request #16003 from Snuffleupagus/scaleSelect-width-CSS-var

Move the `--scale-select-width` CSS variable to the relevant DOM element",True
eb341cadd77e4805e0e1e0929e5f033e33245758,2023-02-04 18:49:51,Jonas Jenwald,"Merge pull request #16005 from Snuffleupagus/rm-isEmptyObj

Remove the `isEmptyObj` unit-test helper function",True
849b492b337bdfe95658aa4e61de3ebbd593d759,2023-02-04 18:48:48,Jonas Jenwald,"Move the `--scale-select-width` CSS variable to the relevant DOM element

The default value of the `--scale-select-width` CSS variable has been choosen such that it should be large enough for most locales. This means that in many locales we don't even update the CSS variable at all, and for those locales where we do the update happens *one time* early during the viewer initialization (i.e. before the PDF document has loaded).

*Please note:* Compared to other recent PRs, the effect of these changes ought to be really tiny and are mostly done to promote better coding patterns.",False
3a7fce49a35e8e5ca630396cce9194344f46b9d3,2023-02-04 17:13:55,Jonas Jenwald,"A tiny improvement of the `MetadataParser._repair` method

We can just insert the initial greater-than sign at the start of the buffer, rather than doing that manually at the end.",False
851c394e648f5b13adf00f28f7b23682666bea6b,2023-02-04 17:13:53,Jonas Jenwald,"Remove the `isEmptyObj` unit-test helper function

We should be able to let Jasmine simply compare directly against an actually empty Object, rather than using a manually implemented helper function for that.",False
2de03a7d9179eff7d622408411cff43b6006228a,2023-02-04 16:27:37,Jonas Jenwald,"Improve how we cache Promises in `WorkerTransport`

A number of methods have their Promises cached, to avoid repeated worker round-trips, since they're expected to be called more than once from the default viewer. The way that the caching is currently implemented means that we need to remember to manually clear these Promises on document cleanup/destruction, and it'd be nice to avoid that.

With this patch the relevant Promises are now instead placed in just one `Map`, which is easy to clear, and a new helper method is also introduced to reduce duplication for *simple* `WorkerTransport` methods.",False
25253034d5ed17f61deaa0ab14a5eff05706c369,2023-02-03 23:20:42,Jonas Jenwald,"Merge pull request #16001 from Snuffleupagus/rm-GeckoView-cursor-tools

[GeckoView] Don't initalize the cursor-tools, since they're unused",True
94a235db93a221cbf27a4a9a0475be9d211014df,2023-02-03 22:50:36,Jonas Jenwald,"[GeckoView] Don't initalize the cursor-tools, since they're unused

The reasons for making this change are:
 - There's no UI available to toggle the cursor-tools in the GeckoView-specific viewer.
 - The `HandTool`-implementation basically *simulates* touch scrolling, and is thus unlikely to be helpful/useful anyway.
 - PR 15831 already changed the relevant call-sites to handle `PDFViewerApplication.pdfCursorTools` being undefined.",False
cbe4912a167d6390300881c570b20f348b9689fd,2023-02-03 20:13:30,Jonas Jenwald,"Merge pull request #15991 from Snuffleupagus/PDFViewerApplication-open-loops

Remove a couple of manual loops in the `PDFViewerApplication.open` method",True
72bf36ea70a7fb3de497fd3b3e4371b817452a50,2023-02-03 19:34:33,Jonas Jenwald,"Merge pull request #15998 from Snuffleupagus/limit-removePageBorders

Limit the `removePageBorders` option, in `PDFViewer`, to only GENERIC builds",True
2c2443ffac9d8260a7907ca8df52da7242ac8aee,2023-02-03 19:32:56,Jonas Jenwald,"Merge pull request #15999 from Snuffleupagus/rm-GeckoView-CSS

[GeckoView] Remove unused `@media` CSS rules",True
d906a383ca3edb7461a390538754fe46f8b6cf68,2023-02-03 19:25:07,Jonas Jenwald,"Remove a couple of manual loops in the `PDFViewerApplication.open` method

Some of the code in this method is *very* old, and we could thus modernize it a little bit by removing a couple of the loops used to build the `getDocument` argument.",False
aba39d271b7b84865b0a4fb0f9602b796440d24f,2023-02-03 18:53:58,Jonas Jenwald,"[GeckoView] Remove unused `@media` CSS rules

These `@media` rules were most likely just copy-pasted from the regular viewer, however none of them are currently necessary since the GeckoView-specific viewer doesn't have any toolbars.
Note that the whole purpose of these CSS rules are to make the toolbar, of the regular viewer, responsive. If we in the future add toolbars for the GeckoView-specific viewer, these rules most likely wouldn't be usable as-is anyway.",False
ddf5563174a8a5fbe15986ae098de870847e5083,2023-02-03 14:45:26,Jonas Jenwald,"Limit the `removePageBorders` option, in `PDFViewer`, to only GENERIC builds

This option was added specifically for third-party users, but has never been used in the PDF.js project itself. Furthermore there's no preference that can be used to enable it, and you need to provide the `removePageBorders` option when initializing a `PDFViewer`-instance.

This patch thus get rid of a little bit more unused code in the Firefox PDF Viewer.",False
39bdd0944706fce61eb3a8a1d000c5fe430d4273,2023-02-03 02:50:53,Jonas Jenwald,"Merge pull request #15997 from Snuffleupagus/loadingIcon-INITIAL-remove

Remove the `loadingIcon` in all cases when resetting the page (PR 15992 follow-up)",True
f94b34878229b84048a85b53178f6dc943054408,2023-02-03 01:59:11,Jonas Jenwald,"Remove the `loadingIcon` in all cases when resetting the page (PR 15992 follow-up)

*Unfortunately I missed this during testing/reviewing of PR 15992.*

With the changes in PR 15992 we're now only adding the `loadingIcon`-class when rendering is actually `RUNNING`, in order to improve overall performance.
However when resetting the page, i.e. the `INITIAL` state, we also need to remove the `loadingIcon` completely. Without this patch if you scroll through a document where the pages don't load instantaneously, see e.g. issue 2504, we'll leave the `loadingIcon`-class attached to pages that have had their rendering cancelled *and* also been evicted from the `PDFPageViewBuffer`-instance.",False
9261daa2334c46c12735c6492a08e72fca0be560,2023-02-02 22:43:49,Jonas Jenwald,"Merge pull request #15996 from Snuffleupagus/skip-CSS-singlePageView

Limit the `singlePageView` CSS rules to only the COMPONENTS build",True
fc8494b2c23e4acdce3908954ecf4a04f7984f59,2023-02-02 22:30:12,Jonas Jenwald,"Limit the `singlePageView` CSS rules to only the COMPONENTS build

These CSS rules exist solely for the `pageviewer` viewer-component example, see https://github.com/mozilla/pdf.js/tree/master/examples/components, and consequently it doesn't make sense in other builds.",False
1ba1b8c71133d5336600c9ca2bf13a5781272967,2023-02-02 21:10:44,calixteman,"Merge pull request #15992 from calixteman/remove_loading_icon

Remove the loading icon div and replace it by a pure css solution using :after.",True
aac073feeb9cebb5c8c24fc8a249f8ea2d809fdb,2023-02-02 20:03:53,Calixte Denizet,"Remove the loading icon div and replace it by a pure css solution using :after.

This way we don't have a lot of useless divs and we let the css engine handle the
creation/destruction of the :after pseudo-element.
It'll help to slightly improve performance when zooming.",False
1bdee0b59b9df507c8e1cc5efd24d78e8946e663,2023-02-02 01:55:32,calixteman,"Merge pull request #15970 from calixteman/editor_invisible

[Editor] Make the annotation editor layer invisible when disabled and empty",True
185281957d2f5c0c12e621f380d8ab59803c39c2,2023-02-01 22:23:44,Calixte Denizet,"[Editor] Make the annotation editor layer invisible when disabled and empty

It'll help to avoid to consider them when the browser is restyling.",False
cf8ee475894f1739e9550f9848600093773196b1,2023-02-01 14:03:22,Jonas Jenwald,"Remove unused parameters from the `onOpenWithTransport` method in `PDFViewerApplication.initPassiveLoading`

The only parameter that we actually need here is the `PDFDataRangeTransport`-instance, since the others are not necessary.
 - The `url` parameter, as passed to the `getDocument` function in the API, is simply being ignored; see https://github.com/mozilla/pdf.js/blob/2d87a2eb1ccce55b8099bf2b8fcc7ed51bd6fbc9/src/display/api.js#L447-L458
 - The `length` parameter, as passed to the `getDocument` function in the API, is always being overwritten; see https://github.com/mozilla/pdf.js/blob/2d87a2eb1ccce55b8099bf2b8fcc7ed51bd6fbc9/src/display/api.js#L519-L525",False
2d87a2eb1ccce55b8099bf2b8fcc7ed51bd6fbc9,2023-01-31 17:35:59,Jonas Jenwald,"Merge pull request #15984 from Snuffleupagus/optional-workerModules

Allow, optionally, using worker-modules during local development",True
5e8822876763142f1ab91e6802480eee78518a32,2023-01-31 16:39:44,Jonas Jenwald,"Allow, optionally, using worker-modules during local development

Until PR 12563 is deemed safe to land, I'd still like to be able to use worker-modules in the viewer during local development.
Hence this patch which *temporarily* adds a new `workerModules` hash-parameter, only available in non-PRODUCTION mode, that allows using worker-modules in the development viewer.

To enable this functionality, simply use http://localhost:8888/web/viewer.html#workerModules=true",False
c5d63918980068a1b28987e28cf30051070dab69,2023-01-30 20:05:02,Jonas Jenwald,"[api-minor] Let the `cMapPacked` parameter, in `getDocument`, default to `true`

The initial CMap support was added in PR 4259 using the ""raw"" Adobe files, however they were quickly deemed to be unnecessarily large. As a result PR 4470 introduced the more compact ""binary"" CMap format, with both of those PRs being included in the very same release (version `0.8.1334`) .

Please note that we've thus never shipped anything *except* the ""binary"" CMap files with the PDF library, and furthermore note that we've not even once updated the CMap files since they were originally added almost nine years ago.

Requiring users to remember that `cMapPacked = true` is necessary, in addition to setting the `cMapUrl` parameter, in order for CMap loading to work feels like a less than ideal API.
Hence this patch, which suggests that we simply let `cMapPacked` default to `true` now.",False
3d35b48f46d5a8d4d47aed8153db5d7bf51fc3fb,2023-01-30 19:16:43,Jonas Jenwald,"Merge pull request #15979 from Snuffleupagus/issue-15977

Extend `getGlyphMapForStandardFonts` with additional entries (issue 15977)",True
808ca828f1d9262c9e0bb7ca45571b7d4abb8468,2023-01-30 16:43:21,Jonas Jenwald,Extend `getGlyphMapForStandardFonts` with additional entries (issue 15977),False
2ebbeb7499f3674ac66b3ab9513ff8a3bf2fc5d0,2023-01-30 15:56:16,calixteman,"Merge pull request #15973 from calixteman/1813138

Remove the transition when displaying the sidebar when the user prefers reduced motion (bug 1813138)",True
f14413989ce226b8f6d726328d6a5c06c9de589a,2023-01-30 15:26:37,Calixte Denizet,"Remove the transition when displaying the sidebar when the user prefers reduced motion (bug 1813138)

In Firefox, it can be easily testesd in setting the pref `ui.prefersReducedMotion` to 1.",False
ca996d25461f12d998c0519b3c8087dcd99abedf,2023-01-30 00:55:05,Jonas Jenwald,"[api-minor] Update the minimum supported browsers, and remove the PostCSS `logical` plugin

The patch updates the minimum supported browsers/environments as follows:
 - Chrome 87, which was released on 2020-11-17; see https://en.wikipedia.org/wiki/Google_Chrome_version_history
 - Firefox ESR (no change); see https://wiki.mozilla.org/Release_Management/Calendar
 - Safari 14.1, which was released on 2021-04-26; see https://en.wikipedia.org/wiki/Safari_version_history#Safari_14
 - Node.js 14 (no change); see https://en.wikipedia.org/wiki/Node.js#Releases

The recent *major* release of the PostCSS `logical` plugin effectively removed support for all of the things that we used it for, which includes (but may not be limited to): preserving the original CSS code (for up-to-date browsers), re-writing the `:dir` pseudo-class, and support for re-writing `float: inline-start;`/`float: inline-end;` properties.
Please find additional details at https://github.com/csstools/postcss-plugins/blob/main/plugins/postcss-logical/CHANGELOG.md#600-january-24-2023
Hence the primary reason for these changes are related to native support for *logical* CSS properties/values. Currently, in the default viewer, we're using the following ones:
 - https://developer.mozilla.org/en-US/docs/Web/CSS/inset-inline-start#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/CSS/inset-inline-end#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-start#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-end#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-start#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-end#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/CSS/text-align#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/CSS/float#browser_compatibility

By updating the minimum supported browsers, we thus only have to worry about the *last* case here. Thankfully there's not that many `float: inline-start;`/`float: inline-end;` occurrences, and we can utilize CSS variables together with the pre-processor to support those in a way that won't affect the Firefox PDF Viewer.",False
f492d96301f45f3dc0c0c151d31f3b7e7b26a689,2023-01-29 18:23:41,Tim van der Meij,"Merge pull request #15974 from timvandermeij/bump

Bump versions in `pdfjs.config`",True
e3aaaa378dd70c6b22b2ee8d95bb4da01fb68b48,2023-01-29 18:17:28,Tim van der Meij,Bump versions in `pdfjs.config`,False
5620456072246f4f9f9eda37137b580863e6526c,2023-01-28 23:40:01,Tim van der Meij,"Merge pull request #15972 from Snuffleupagus/PDFViewerApplication-open-signature

Change the `PDFViewerApplication.open` method to only accept objects",True
ee3be2f9798a80fec78cb0cb5cc6cdc753a03642,2023-01-28 23:36:54,Tim van der Meij,"Merge pull request #15951 from Snuffleupagus/polyfill-Path2D

Polyfill `Path2D` in Node.js environments",True
6129be7b6886161d511da44400093afb3c71a1d4,2023-01-28 23:25:22,Jonas Jenwald,"Change the `PDFViewerApplication.open` method to only accept objects

If this method was added today, I really can't imagine that we'd support anything *except* objects. Unfortunately we cannot just remove this now, since the code has existed since ""forever"", however we can deprecate this and limit it to only the GENERIC build.

Furthermore, we can avoid a redundant `PDFViewerApplication.setTitleUsingUrl` call in the Firefox PDF Viewer since the title has already been set previously in that case.",False
e539d2da1e1061fd994a670d35d59da85cbe8d3e,2023-01-28 23:12:09,Tim van der Meij,"Merge pull request #15964 from Snuffleupagus/getDocument-non-object

Only accept non-objects passed to `getDocument` in GENERIC builds",True
cf0369d622ef3a65da898efd3ef649ef44e2f940,2023-01-28 22:58:22,Jonas Jenwald,"Polyfill `Path2D` in Node.js environments

Until just recently the only existing `Path2D` polyfill didn't have support for Node.js and/or the `node-canvas` package. Given that this was just fixed, in the latest version, we can now finally remove our inline-checks at the relevant call-sites; please also see https://github.com/nilzona/path2d-polyfill#usage-with-node-canvas",False
cb5a28ceca32d9b34e321ea619c2d5d7a6769c36,2023-01-28 22:48:17,Tim van der Meij,"Merge pull request #15954 from Snuffleupagus/getDocument-URL-tweaks

Tweak the internal handling of the `url`-parameter in `getDocument` (PR 13166 follow-up)",True
16aef95937ebac364b8ba667e2db7bed4cf2aa50,2023-01-28 22:45:32,Tim van der Meij,"Merge pull request #15966 from Snuffleupagus/GlobalWorkerOptions-defaults

Simplify setting the `GlobalWorkerOptions` default values (PR 9480 follow-up)",True
42caf64ae87b8abd975a14045125731ee6868b52,2023-01-28 22:40:16,Tim van der Meij,"Merge pull request #15963 from Snuffleupagus/README-support-info

Update various README files to be less specific about the supported JavaScript features",True
7c6324f3d4cb8f7ef49fee7052c1169b9bb47921,2023-01-28 22:38:46,Tim van der Meij,"Merge pull request #15971 from Snuffleupagus/update-packages

Update packages and translations",True
52d61acedadaff8997501abeec7e6e98bee7d360,2023-01-28 12:45:21,Jonas Jenwald,Update l10n files,False
07ba3529035debb9fe222aeb124f4a7cea648768,2023-01-28 12:43:13,Jonas Jenwald,Update npm packages,False
075cc8d8dfa182c9f9ab95273e9e1c90002c535b,2023-01-26 20:40:29,calixteman,"Merge pull request #15965 from calixteman/bug1811510

[JS] Correctly format field with numbers (bug 1811694, bug 1811510)",True
6f4d037a8eed3fc8d1f0d824a57784533abe9a72,2023-01-26 19:27:02,Calixte Denizet,"[JS] Correctly format field with numbers (bug 1811694, bug 1811510)

In PR #15757, a value is automatically converted into a number when it's possible
but the case of numbers like ""000123"" has been overlooked and their format must
be preserved.
When a script is doing something like ""foo.value + bar.value"" and the values are
numbers then ""foo.value"" must return a number but the displayed value must be what
the user entered or what a script set, so this patch is just adding a a field
_orginalValue in order to track the value has it has defined.
Some people are used to use a comma as decimal separator, hence it must be considered
when a value is parsed into a number.
This patch is fixing a regression introduced by #15757.",False
1c4af2727c6d8ed7fa1c4dd73d8f80e4cb3db6c3,2023-01-26 18:46:01,Jonas Jenwald,"Simplify setting the `GlobalWorkerOptions` default values (PR 9480 follow-up)

There's really no need for these ""complicated"" default value assignments, since `GlobalWorkerOptions` is a local variable at this point, and this is rather a case of too much copy-and-paste.
Note that years ago, when all options were set using a global `PDFJS` object, it's possible that options had been set (from the outside) *before* the object had been properly initialized; see e.g. https://github.com/mozilla/pdf.js/blob/a89071bdefb90733fc2e671fcca61f6d03964e04/src/display/global.js",False
4758e6649cfdcbffb029fae5ec7091444135df36,2023-01-26 15:18:58,Jonas Jenwald,"Only accept non-objects passed to `getDocument` in GENERIC builds

In general it's always recommended to pass a *parameter object* when calling the `getDocument`-function in the API, since that's the only way to provide additional options, and the fact that it also accepts a URL or TypedArray directly is now mostly for backwards compatibility reasons.
Unfortunately we cannot really remove this, since that code has existed since ""forever"", however we can limit it to only the GENERIC build to avoid completely unnecessary checks in e.g. the Firefox PDF Viewer.

Finally, note that the default-viewer always provides a *parameter object* when calling the `getDocument`-function and it's thus completely unaffected by these changes.",False
c0a023eaf97bd764ac0d226093c30bd87015a563,2023-01-25 20:16:53,Jonas Jenwald,"Update various README files to be less specific about the supported JavaScript features

By being less specific about which *exact* JavaScript features are required for the default vs `legacy` build, we don't need to worry about keeping multiple README files up-to-date.
These README files will now refer back to the FAQ for current browser/environment support information.",False
1b1ebf6a77b9419d8862ace23b44ce0285ed4b0f,2023-01-25 16:47:24,Jonas Jenwald,"Merge pull request #15960 from Snuffleupagus/issue-15958

Move `ProgressBar`-related CSS variables into the `loadingBar` DOM-element (issue 15958)",True
ce941255e24a5b8b494c261770ef176b7ba2f78a,2023-01-25 15:43:50,Jonas Jenwald,"Merge pull request #15959 from Snuffleupagus/normalizeWheelEventDelta-tweaks

Tweak the `normalizeWheelEventDelta` helper function",True
9d5085347af995d2bb5a690e8b8362302983f0ff,2023-01-25 15:39:28,Jonas Jenwald,"Move `ProgressBar`-related CSS variables into the `loadingBar` DOM-element (issue 15958)

This way we avoid reflowing the entire viewer when e.g. updating the loading progress.",False
85fd76546271b0d6025e4a35ca125524e700ac59,2023-01-25 15:17:03,Jonas Jenwald,"Tweak the `normalizeWheelEventDelta` helper function

This function is only used in PresentationMode these days, but we can still improve it a little bit:
 - Use the existing web-platform `deltaMode` constants, rather than defining our own constants for those values.
 - Access the `deltaMode` first, before the `delta{X, Y}` properties, to avoid being affected by bug 1392460 (similar to the default viewer).",False
0b9d32bdadf46feb60bf720c79772cf6ff1ad894,2023-01-25 02:05:12,calixteman,"Merge pull request #15957 from calixteman/1810800

Try to avoid to interpret wheel events as pinch-to-zoom ones (bug 1810800)",True
1cb482be6afa340412e97e4a20eee32113c257c9,2023-01-25 00:42:12,Calixte Denizet,Try to avoid to interpret wheel events as pinch-to-zoom ones (bug 1810800),False
755319130e6d3135a286cab86bd12de9d4c6ff41,2023-01-24 15:48:41,Jonas Jenwald,"Tweak the internal handling of the `url`-parameter in `getDocument` (PR 13166 follow-up)

 - Use a `URL`-instance directly, since it's by definition an absolute URL.
 - Actually limit the ""raw"" url-string handling to Node.js environments, as intended.
 - Skip the warning, since we're already throwing an Error if the `url`-parameter is invalid.",False
673f6820d119e6a96f2461e78d030f6b44aac274,2023-01-23 01:14:37,calixteman,"Merge pull request #15952 from calixteman/l10n

Set up automated l10n review for new English strings",True
be93a2a7d4487cd5c69b03384de2445d5cc7d150,2023-01-23 00:09:31,Calixte Denizet,Set up automated l10n review for new English strings,False
edfdb693e5b11057252f8cef9388d063678d95cd,2023-01-21 18:32:40,Tim van der Meij,"Merge pull request #15948 from Snuffleupagus/bug-1811668

Tweak `adjustType1ToUnicode` for fonts with a predefined *named* encoding (bug 1811668, PR 14050 follow-up)",True
8278abb3f33a729a1c2c183aa381c53bcd8e0526,2023-01-21 18:24:18,Tim van der Meij,"Merge pull request #15949 from Snuffleupagus/ProgressBar-setDisableAutoFetch

Move the `disableAutoFetch` functionality into the `ProgressBar`-class",True
a27d7ba52411705854934220c046f2b74845a7b7,2023-01-21 18:20:20,Tim van der Meij,"Merge pull request #15943 from Snuffleupagus/deprecate-direct-PDFDataRangeTransport

[api-minor] Deprecate calling `getDocument` directly with a `PDFDataRangeTransport`-instance",True
d7013bee54f4b6f3ff174c3381062d1e2474eb62,2023-01-21 17:02:34,Jonas Jenwald,"Move the `disableAutoFetch` functionality into the `ProgressBar`-class

It seems nicer overall, since we're exporting the `ProgressBar` in the viewer-components, to move this functionality into the `ProgressBar`-class itself rather than handling it ""manually"" in the default-viewer.",False
40a46e4397798bca90495830275d5a3ae1468497,2023-01-21 16:51:21,Jonas Jenwald,"Tweak `adjustType1ToUnicode` for fonts with a predefined *named* encoding (bug 1811668, PR 14050 follow-up)

*Please note:* I cannot reproduce the problem reported in bug 1811668, regarding the context menu, and in any case it's not clear that that part is even a PDF Viewer bug.

Looking at bug 1811668 I couldn't help but noticing that the textLayer isn't correct, and it's unfortunately once again a problem with the `adjustType1ToUnicode` function. That's intended to help improve text-selection for fonts without a /ToUnicode-entry, and in many cases it does help (the original PR fixed lots of issues) however it's also caused some problems.

In order to improve text-selection in bug 1811668, we'll now properly ignore fonts that have a predefined *named* encoding specified since that's really the intention with PR 14050.",False
7b95788248adb0524f725f54211552c477c5337d,2023-01-20 23:18:39,calixteman,"Merge pull request #15947 from calixteman/gv_dont_update_find

[GV] Avoid to update the finder when the results aren't complete",True
dc94b750de030649675b8ae5975ab6d3202ab16f,2023-01-20 22:43:16,Calixte Denizet,"[GV] Avoid to update the finder when the results aren't complete

At the beginning of a search we can an update can be triggered with 0 over 0
found matches.
In the GeckoView context, we can't update the finder whenever we want but only
when it has been required.",False
deb07aee06fd1da8bbc4e045ed7f499e19414015,2023-01-20 15:29:18,calixteman,"Merge pull request #15941 from calixteman/change_current_view

Change 'Current View' to 'Current Page' in the secondary toolbar",True
29cd5ab24ef3b10a45205558d80611ff4abed2d7,2023-01-20 01:44:47,Jonas Jenwald,"Merge pull request #15945 from Snuffleupagus/issue-15942

[JBIG2] Ensure that the `decodeInteger` function returns valid integers (issue 15942)",True
f2fce93826ff2e7a94b948cd7961f1ae3f8bc784,2023-01-19 21:44:17,Jonas Jenwald,"[JBIG2] Ensure that the `decodeInteger` function returns valid integers (issue 15942)

The JBIG2 images in this PDF document are corrupt enough that even Adobe Reader warns about it when opening the file.
*Please note:* I don't really know the JBIG2 image format at all, however from a very brief look at the specification it seems that integers should be 32-bit.",False
7976fc7851a486cc04f2f393ed5e15981366e9ab,2023-01-19 18:55:55,Jonas Jenwald,"[api-minor] Deprecate calling `getDocument` directly with a `PDFDataRangeTransport`-instance

In general it's recommended to pass a *parameter object* when calling the `getDocument`-function in the API, since that's the only way to provide additional options, and the fact that it also accepts a URL or TypedArray directly is now mostly for backwards compatibility reasons.
However, the `getDocument`-function also accepts a direct `PDFDataRangeTransport`-instance which just seems unnecessary.

*Please note:* The `PDFDataRangeTransport`-implementation was added specifically for the *built-in* Firefox PDF Viewer, however it's most likely not commonly used by any third-party (given that it requires manual PDF-data loading).
Furthermore, the default-viewer always provides a *parameter object* when calling the `getDocument`-function and it's thus completely unaffected by these changes.",False
c629a85a5cb16db364017afaa5d35a99938dab47,2023-01-19 18:55:10,Jonas Jenwald,"Merge pull request #15935 from Snuffleupagus/_centerAtPos

Add a `PDFViewerApplication` helper method to center the position after wheel/pinch-zooming",True
1a958907284df89b06a6bd9630909a9ac55caf0b,2023-01-19 18:08:58,Jonas Jenwald,"Merge pull request #15937 from Snuffleupagus/textLayer-highlight-color-vars

Use CSS variables for the textLayer `highlight` colors (PR 15921 follow-up)",True
eee65e4b6e99f422fb444204dc8020d439d73f7d,2023-01-19 18:05:35,Jonas Jenwald,"Add a `PDFViewerApplication` helper method to center the position after wheel/pinch-zooming

This avoids having to repeat the same code twice, now that we support both wheel- and pinch-zooming.",False
31ae3a4ba0f8eb61e8b79e933175891b964583e2,2023-01-19 14:24:25,Calixte Denizet,"Change 'Current View' to 'Current Page' in the secondary toolbar

Content Design team (UX) proposed this change.",False
f25e33ee7fe20c8bdb77927be979d30514b26399,2023-01-19 03:06:21,Jonas Jenwald,"Merge pull request #15940 from Snuffleupagus/license_header_2023

Update the year in the `license_header` files",True
7b36686fcaa09d4db2625e8a508d7cf5ab8a55c4,2023-01-19 02:58:18,Jonas Jenwald,Update the year in the `license_header` files,False
4b5817f8ffe33feccde2b7e068e2838f193b1484,2023-01-18 15:19:52,Jonas Jenwald,"Use consistent `forced-colors` media-queries throughout the CSS files

Note how e.g. the `viewer.css` and `pdf_viewer.css` files already used this format.",False
67b1d153847bffe5e0e1364e5fff5f9ab56c273b,2023-01-18 15:12:22,Jonas Jenwald,"Use CSS variables for the textLayer `highlight` colors (PR 15921 follow-up)

Rather than adding `@media (forced-colors: active) { ... }`-blocks throughout the CSS code, we should utilize CSS variables instead as in our other CSS files.",False
42b1cff7b065ecaec0c4986aa2153b1d53f1f961,2023-01-18 03:31:23,Jonas Jenwald,"Merge pull request #15934 from Snuffleupagus/issue-15910-2

Fallback to using the `name` table to infer the encoding for TrueType fonts missing such data (issue 15910)",True
e65f1767ab7bb1331d4baf1fcc6f07b42eaf693c,2023-01-17 21:07:49,calixteman,"Merge pull request #15930 from calixteman/15929

Move --scale-factor variable in the viewer container (fix #15929)",True
d6be5141e9b4332e43f045544ea3716929fea3fa,2023-01-17 20:34:51,Jonas Jenwald,"Fallback to using the `name` table to infer the encoding for TrueType fonts missing such data (issue 15910)

The relevant TrueType font is missing both /ToUnicode *and* /Encoding entires, either of which would have prevented the (current) broken textLayer rendering.
My first idea was that we could use the `post` table in the TrueType font, see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6post.html, to get the actual glyphNames and amend the fallback ToUnicode-map that way. Unfortunately that didn't work, since the `post` table only contained "".notdef"" and """" (i.e. empty string) entries.

Instead we try to use the `name` table in the TrueType font, see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6name.html, to determine if the platform is Windows and thus fallback to generate a ToUnicode-map from the `WinAnsiEncoding`.",False
089ed6fb6522257017741d5737ac205bc745b565,2023-01-17 15:20:53,Calixte Denizet,"Move --scale-factor variable in the viewer container (fix #15929)

When a css variable is update in a node then all the children under this
node are updated.
In order to avoid to update all the UI when a page is rescaling, this
patch moves the --scale-factor from the :root to the viewer container.",False
d8d5545e03d2c7a17b414a65684a745389f2a614,2023-01-16 19:30:12,Jonas Jenwald,"Merge pull request #15926 from Snuffleupagus/annotation-appearance-stream

Ensure that Annotation `appearance`-entries are actually Streams",True
8f3fa18c93df5277d24206bfc7fa303a3b2e378b,2023-01-16 17:50:57,Jonas Jenwald,"Merge pull request #15920 from Snuffleupagus/transfer-pdf-data

[api-minor] Enable transferring of TypedArray PDF data by default (PR 15908 follow-up)",True
cefaecc2e8df1dff20ce3beb6ede9ef16dcdac28,2023-01-16 17:32:53,Jonas Jenwald,"Ensure that Annotation `appearance`-entries are actually Streams

Note how all over the `src/core/annotation.js`-code we're assuming that if an `appearance`-entry exists it's also a Stream. However, we're not actually checking that thoroughly enough which causes issues in some badly generated PDF documents.",False
e9c8aa63e3da4d127fceee75ee9223d481787b8a,2023-01-16 15:46:22,calixteman,"Merge pull request #15921 from fchasen/forced-colors-highlights

Update highlight background when forced colors are active (bug 1759886)",True
0e563ee6da62d08bf1291622fd79d793611006a9,2023-01-15 22:45:59,Tim van der Meij,"Merge pull request #15925 from Snuffleupagus/update-rimraf

Update `rimraf` to version 4",True
32357e3d172a552e0408b3e1ed743e87fe7d5a21,2023-01-15 20:08:30,Jonas Jenwald,"Update `rimraf` to version 4

The primary change is that the `rimraf` function now returns a Promise instead of taking a callback; please see https://github.com/isaacs/rimraf#major-changes-from-v3-to-v4",False
1ca0a7a26ce236dbf7fe961a22812315a5d0802d,2023-01-15 16:59:06,Jonas Jenwald,"Merge pull request #15923 from Snuffleupagus/zoom-black-canvas

[Regression] Avoid showing a black canvas during zooming with a `drawingDelay` set (PR 15812 follow-up)",True
bc3b59fa5e16eab871b564aaf02f53a2a59cd17f,2023-01-15 16:05:16,Tim van der Meij,"Merge pull request #15924 from Snuffleupagus/update-packages

Update packages and translations",True
cbf9843a79378b600a36a3f5d1f2c6b72148ff84,2023-01-15 15:13:46,Jonas Jenwald,Update l10n files,False
d527bd0d92790d1edc44062a8ca712e6af9db949,2023-01-15 15:04:56,Jonas Jenwald,Update npm packages,False
906745de38d3b552e28910c9ce4ab88ef7f43ee5,2023-01-15 03:55:04,Jonas Jenwald,"[Regression] Avoid showing a black canvas during zooming with a `drawingDelay` set (PR 15812 follow-up)

After the changes in PR 15812 we'll now *intermittently* display completely black canvases during zooming. To reproduce this, try switching to wrapped-scrolling and zoom in/out very quickly using either the mouse-wheel or pinching.",False
517d7a6dc3f3d2b205f045281bfa2001e198d931,2023-01-14 19:54:53,Tim van der Meij,"Merge pull request #15905 from timvandermeij/core-utils-unit-tests

Improve unit test coverage of `src/core/core_utils.js`",True
9e3adb5ec70f62ecc9dd7c2b3cb15a02286b3d45,2023-01-14 19:39:58,Tim van der Meij,Implement unit tests for the `numberToString` utility function,False
a6dfcc89fab6a82000b3bf07a851a1b913190fc5,2023-01-14 19:39:58,Tim van der Meij,Implement unit tests for the `recoverJsURL` utility function,False
397f943ca327dadade6af2eb58685331d3c03065,2023-01-14 15:09:36,Jonas Jenwald,"[api-minor] Enable transferring of TypedArray PDF data by default (PR 15908 follow-up)

This patch removes the recently introduced `transferPdfData` API-option, and simply enables transferring of TypedArray data *by default* instead of copying it. This will help reduce main-thread memory usage, however it will take ownership of the TypedArrays. Currently this only applies to the following cases:
 - TypedArrays passed to the `getDocument`-function in the API, in order to open PDF documents from binary data.
 - TypedArrays passed to a `PDFDataRangeTransport`-instance, used to support custom PDF document fetching/loading (see e.g. the Firefox PDF Viewer).

*PLEASE NOTE:* To avoid being affected by this, please simply *copy* any TypedArray data before passing it to either of the functions/methods mentioned above.

Now that we transfer TypedArray data that we previously only copied, we need to be more careful with input validation. Given how the `{IPDFStreamReader, IPDFStreamRangeReader}.read` methods will always return ArrayBuffer data, which is then transferred to the worker-thread[1], the actual TypedArray data passed to the API thus need to have the same exact size as its underlying ArrayBuffer to prevent issues.
Hence we'll check for this and only allow transferring of *safe* TypedArray data, and fallback to simply copying the data just as before. This obviously shouldn't be an issue in the Firefox PDF Viewer, but for the general PDF.js library we need to be more careful here.

---
[1] See https://github.com/mozilla/pdf.js/blob/e09ad99973b1dcb82a06c001da96d52fc5bcab9d/src/display/api.js#L2492-L2506 respectively https://github.com/mozilla/pdf.js/blob/e09ad99973b1dcb82a06c001da96d52fc5bcab9d/src/display/api.js#L2578-L2590",False
0a6b1cd2e9c548a8ac66aeffaebebcdc831653c3,2023-01-14 04:05:12,Fred Chasen,Update highlight background color for forced colors,False
99cfab18c10a77f4c2f5fe17eb719ea67df82e61,2023-01-13 17:58:44,Jonas Jenwald,"Combine the array-like and ArrayBuffer branches, when handling binary data, in `getDocument`",False
e09ad99973b1dcb82a06c001da96d52fc5bcab9d,2023-01-13 17:58:12,Jonas Jenwald,"Merge pull request #15916 from Snuffleupagus/fetch-transfer

[api-minor] Enabling transferring of data fetched with the `PDFFetchStream` implementation",True
1d683708e80931a0a25ad025d53002a8f79de259,2023-01-12 20:02:59,Jonas Jenwald,"Merge pull request #15917 from Snuffleupagus/pr-15908-followup

Improve input validation in `PDFDataTransportStream._onReceiveData` (PR 15908 follow-up)",True
1362cd91d0f9816825e5f179eed174e92c4f2ccd,2023-01-12 19:54:59,Jonas Jenwald,"Improve input validation in `PDFDataTransportStream._onReceiveData` (PR 15908 follow-up)

The mozilla-central [method `PdfDataListener.readData`](https://searchfox.org/mozilla-central/rev/893a8f062ec6144c84403fbfb0a57234418b89cf/toolkit/components/pdfjs/content/PdfStreamConverter.jsm#207-210) can return `null`, hence it seems like a very good idea to update `PDFDataTransportStream._onReceiveData` to handle that gracefully since the current code will throw in that case.

Also, improves the JSDocs for the `PDFDataRangeTransport` class in the API.",False
cee97fcd15cda22953f1eacf42f82a0039f362b7,2023-01-12 18:29:21,Jonas Jenwald,"[api-minor] Enabling transferring of data fetched with the `PDFFetchStream` implementation

Note how in the API we're transferring the PDF data that's fetched over the network[1]:
 - https://github.com/mozilla/pdf.js/blob/f28bf23a314e36d9e255037f5716ae1eb8e16fbf/src/display/api.js#L2467-L2480
 - https://github.com/mozilla/pdf.js/blob/f28bf23a314e36d9e255037f5716ae1eb8e16fbf/src/display/api.js#L2553-L2564

To support that functionality we have the `PDFDataTransportStream`, `PDFFetchStream`, `PDFNetworkStream`, and `PDFNodeStream` implementations. Here these stream-implementations vary slightly in how they handle `ArrayBuffer`s internally, w.r.t. transferring or copying the data:
 - In `PDFDataTransportStream` we optionally, after PR 15908, allow transferring of the PDF data as provided externally (used e.g. in the Firefox PDF Viewer).
 - In `PDFFetchStream` we're currenly always copying the PDF data returned by the Fetch API, which seems unnecessary. As discussed in PR 15908, it'd seem very weird if this sort of browser API didn't allow transferring of the returned data.
 - In `PDFNetworkStream` we're already, since many years, transferring the PDF data returned by the `XMLHttpRequest` functionality. Note how the `getArrayBuffer` helper function simply returns an `ArrayBuffer` response as-is.
 - In `PDFNodeStream` we're currently copying the PDF data, however this is unfortunately necessary since Node.js returns data as a `Buffer` object[2].

Given that the `PDFNetworkStream` has been, indirectly, supporting transferring of PDF data for years it would seem really strange if this didn't also apply to the `PDFFetchStream`-implementation.
Hence this patch simply enables transferring of PDF data, when accessed using the Fetch API, unconditionally to help reduced main-thread memory usage since the `PDFFetchStream`-implementation is used *by default* in browsers (for the GENERIC build).

---
[1] As opposed to PDF data being provided as e.g. a TypedArray when calling `getDocument` in the API.

[2] This is a ""special"" Node.js object, see https://nodejs.org/api/buffer.html#buffer, which doesn't exist in browsers.",False
f28bf23a314e36d9e255037f5716ae1eb8e16fbf,2023-01-11 22:04:51,Jonas Jenwald,"Merge pull request #15908 from Snuffleupagus/bug-1809164

[api-minor] Add a new `transferPdfData` option to allow transferring more data to the worker-thread (bug 1809164)",True
dafcf82365901cc267d2346a85076c2baf452d0e,2023-01-11 20:56:21,calixteman,"Merge pull request #15909 from calixteman/pinch_trackpad

Add support for smooth pinch-to-zoom on a trackpad (bug 1659492)",True
f5dcc69ea11795caa229339233abae076bb3fd8a,2023-01-11 19:44:33,Calixte Denizet,"Add support for smooth pinch-to-zoom on a trackpad (bug 1659492)

- Scale factor is rounded to only scale by integer percent, hence the unused
  ticks are accumulated (like we already do for zoom with the mouse wheel).
- Use the same thing for the pinch-to-zoom on a touchscreen: it led to slightly
  refactor the code because it happened to ignore a not so small scale which
  led to a not so smooth zooming.",False
633d5e7af023ae0561d215d4eebd8851e5d7cf92,2023-01-11 18:37:52,calixteman,"Merge pull request #15914 from calixteman/15894_followup

Simplify PDFViewerApplication::supportsPrinting (follow-up of #15894)",True
8068dff9d153d7196ccc2f70adbde6b3f5824954,2023-01-11 17:03:33,Calixte Denizet,Simplify PDFViewerApplication::supportsPrinting (follow-up of #15894),False
bbe629018d80a20d31b853414879773203af1b2f,2023-01-11 01:33:44,Jonas Jenwald,"[api-minor] Add a new `transferPdfData` option to allow transferring more data to the worker-thread (bug 1809164)

Also, removes the `initialData`-parameter JSDocs for the `getDocument`-function given that this parameter has been completely unused since PR 8982 (over five years ago). Note that the `initialData`-parameter is, and always was, intended to be provided when initializing a `PDFDataRangeTransport`-instance.",False
d6f63b5fb7cc63fa5d38ff71a56b8ee46d4f1b33,2023-01-09 20:11:25,calixteman,"Merge pull request #15907 from calixteman/bug1809080

Fix pinch-to-zoom on a macbook trackpad (bug 1809080)",True
0c1cf2c237a1a74fb0792284768555aeff7dd83e,2023-01-09 18:18:46,Calixte Denizet,Fix pinch-to-zoom on a macbook trackpad (bug 1809080),False
067d3b70aa46e1b2a3dff768c36ff5ba670407f2,2023-01-09 01:02:22,Jonas Jenwald,"Merge pull request #15906 from timvandermeij/nodejs

Upgrade Node.js to version 18 in the CI workflow",True
588447aa908fadbe1cf4f9c892daa4b74da9dcca,2023-01-08 22:05:08,Tim van der Meij,"Upgrade Node.js to version 18 in the CI workflow

Version 16 that we used before is now in maintenance mode, so we should
upgrade to the most recent LTS version. For more information on the
Node.js release schedule please refer to
https://github.com/nodejs/release#release-schedule.",False
ca668dfd41033be9ae54a1ab88eff75fee480da9,2023-01-08 18:51:15,Tim van der Meij,"Merge pull request #15904 from Snuffleupagus/tweak-sidebarContent-background

Remove the `background-color` of the sidebarContent (PR 15850 follow-up)",True
8ab5476cb82b35dc0407ec76fd0d3223051dd018,2023-01-08 18:36:02,Jonas Jenwald,"Remove the `background-color` of the sidebarContent (PR 15850 follow-up)

After the changes in PR 15850, the `background-color` of the sidebar is now unnecessarily dark in the light-theme. Hence, we can simply remove this CSS rule to improve things overall (and these changes don't affect the dark-theme much at all).
This is even an overall consistency improvement, given the existing `--sidebar-narrow-bg-color` values.",False
173bd88dbd5cf648972eacd745b6a061d4df11fd,2023-01-08 16:03:15,Jonas Jenwald,"Merge pull request #15903 from mozilla/dependabot/npm_and_yarn/json5-1.0.2

Bump json5 from 1.0.1 to 1.0.2",True
f51e85e84bdf6ad4ce6da8e0afdcddfa1bce9746,2023-01-08 11:35:38,dependabot[bot],"Bump json5 from 1.0.1 to 1.0.2

Bumps [json5](https://github.com/json5/json5) from 1.0.1 to 1.0.2.
- [Release notes](https://github.com/json5/json5/releases)
- [Changelog](https://github.com/json5/json5/blob/main/CHANGELOG.md)
- [Commits](https://github.com/json5/json5/compare/v1.0.1...v1.0.2)

---
updated-dependencies:
- dependency-name: json5
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>",False
fcaeb5db88658efec7b42b77be5fa6945a18eb0a,2023-01-07 22:50:31,calixteman,"Merge pull request #15901 from calixteman/15289_followup

Avoid null ExpansionFactor in type1 fonts (follow-up of #15289)",True
74e4b515c5e47ad4cb2f19aa4092b3ed9778a36c,2023-01-07 21:25:41,Jonas Jenwald,"Merge pull request #15897 from Snuffleupagus/issue-15893

Support parsing encrypted documents in `XRef.indexObjects` (issue 15893)",True
c170245fc0744072422c9dfa9dd147264c9799a9,2023-01-07 20:55:24,Calixte Denizet,Avoid null ExpansionFactor in type1 fonts (follow-up of #15289),False
e1f7355de413d069fccf7be3461458ed6b813f21,2023-01-07 20:43:33,calixteman,"Merge pull request #15900 from calixteman/15289

Set ExpansionFactor to 0.06 when it's equals to 0 in the private dict of CFF fonts",True
e565e455e2a72b1b1fae4afe1c176a6ff0b4bdf1,2023-01-07 19:23:13,Calixte Denizet,Set ExpansionFactor to 0.06 when it's equals to 0 in the private dict of CFF fonts,False
d6984f93954a8ac9e92cc9f156f7e909d3e332de,2023-01-07 18:23:35,Tim van der Meij,"Merge pull request #15899 from Snuffleupagus/tweak-toolbar-border-color

Tweak the `--toolbar-border-color` CSS variable (PR 15850 follow-up)",True
bd84bf4ebd1c5fc42652417d5501f13158413de1,2023-01-07 18:14:21,Jonas Jenwald,"Tweak the `--toolbar-border-color` CSS variable (PR 15850 follow-up)

After the changes in PR 15850, the toolbar-border is now quite difficult to spot in the light-theme. Hence, let's tweak it slightly to improve things.",False
38e46e761456cb7d2309d29becb2a18f647b521d,2023-01-07 17:59:41,Tim van der Meij,"Merge pull request #15850 from calixteman/15836

Remove shadow around each pages (fix issue #15836)",True
69113f08f203c3b63cffee541897a0dbd5e75f1b,2023-01-07 17:46:23,Tim van der Meij,"Merge pull request #15887 from Snuffleupagus/rm-setPDFNetworkStreamFactory

Inline the `setPDFNetworkStreamFactory` functionality in `src/display/api.js`",True
b428824269e9f77dd8f8b9df380b621b07eb3dd8,2023-01-07 17:43:25,Tim van der Meij,"Merge pull request #15879 from Snuffleupagus/useWorkerFetch-defaults

[api-minor] Improve the `useWorkerFetch` default value checks",True
91c44ec7ab2618ef4992dc51b26e663dada228b0,2023-01-06 20:39:32,calixteman,"Merge pull request #15857 from calixteman/delay_loading_icon

Delay the loading icon display",True
1d5de9f4f4d9af16edcfffc642f2115c1afa7100,2023-01-06 17:53:07,Jonas Jenwald,"Inline the `setPDFNetworkStreamFactory` functionality in `src/display/api.js`

Given that this is internal functionality, not exposed in the official API, it's not entirely clear (at least to me) why we can't just initialize this directly in `src/display/api.js` instead.
When testing both the development viewer and all the ways in which we run tests, everthing still appears to work just fine with this patch.",False
7d94fdeb489ae8ac18b8c38f011abf961b5fb45c,2023-01-06 17:39:37,Jonas Jenwald,"Support parsing encrypted documents in `XRef.indexObjects` (issue 15893)

*Please note:* The reduced test-case is *not* a perfect reproduction of the original PDF document, since this one fails to open in e.g. Adobe Reader, but I do believe that it captures the most important points here.

For corrupt *and* encrypted PDF documents, it's possible that only some trailer dictionaries actually contain an /Encrypt-entry. Previously we'd could easily miss that, since we generally pick the first not obviously corrupt trailer dictionary, and the solution implemented here is to simply pre-parse all trailer dictionaries to see if there's any /Encrypt-entries.",False
dd29f8705cf35faa9dfb6d5a5e5c6aa093b6c9cf,2023-01-06 16:58:32,Calixte Denizet,"Delay the loading icon display

In most of the cases, showing the loading icon is useless because
it's for a very short time, consequently it doesn't bring any useful
information for the user.
After a delay (400ms), the icon is shown in order to inform the user
that the viewer isn't stuck but it's doing something.",False
e36564668bff56ba9a0aee50b24c1e5466483d9a,2023-01-06 16:41:20,calixteman,"Merge pull request #15896 from calixteman/gv_update_matches_count

[GV] Add an option in the find controller to update matches count only when the last page is reached (bug 1803188).",True
661f425934e20dff50ce74231d179ba421bb8d6c,2023-01-06 15:26:26,Calixte Denizet,"[GV] Add an option in the find controller to update matches count only when the last page is reached (bug 1803188).

In GeckoView, on an event, a callback must be executed with the result of an action,
but the callback can be used only one time.
So for each FindInPage event, we must trigger only one matches count update.",False
8a0ca04399cd1b4b4d1bb960685550e3f6ea4e03,2023-01-05 18:13:53,calixteman,"Merge pull request #15894 from calixteman/gv_disable_print

[GV] Remove print stuff because window.print isn't implemented (bug 1808668)",True
409c8b344f6a0a76d5a72737be5ac249446c689b,2023-01-05 17:32:29,Calixte Denizet,[GV] Remove print stuff because window.print isn't implemented (bug 1808668),False
7da591048ce9eeed70a1887dc93c86ed39f76cd1,2023-01-05 02:20:29,calixteman,"Merge pull request #15892 from calixteman/fix_autoprint

[JS] UserActivation must be enabled before running document actions",True
dea2471e961061fcc9bf8362d14dd3a57f8c2a84,2023-01-05 01:56:36,Calixte Denizet,"[JS] UserActivation must be enabled before running document actions

else auto-print is broken (it's a regression from patch #15822).",False
1e1a2fce49e3da9f9d0504c3f327691b9d3a70a1,2023-01-05 00:00:47,Jonas Jenwald,"Merge pull request #15891 from Snuffleupagus/accumulateTicks

Reduce duplication in the `accumulateWheelTicks`/`accumulateTouchTicks` methods (PR 15886 follow-up)",True
66a3aa28fd49ae09ce77b3522c2e41f977186c68,2023-01-04 22:49:39,Jonas Jenwald,"Reduce duplication in the `accumulateWheelTicks`/`accumulateTouchTicks` methods (PR 15886 follow-up)

It just occurred to me that we can reduce some duplication by having the, virtually identical, `accumulateWheelTicks`/`accumulateTouchTicks` methods use a common helper instead that takes advantage of [bracket notation](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Basics#bracket_notation).",False
4faf927030ea0b7f1febf22a805706cff83f1af8,2023-01-04 21:50:29,calixteman,"Merge pull request #15886 from calixteman/pinch_to_zoom

[api-minor] Add the pinch-to-zoom feature (bug 1677933)",True
d6b7a1f034c1c6cb2458135a088633ae87310e1f,2023-01-04 20:30:46,Calixte Denizet,[api-minor] Add the pinch-to-zoom feature (bug 1677933),False
da1365a309306fe21a4462e1cea5c2a2ef338eb3,2023-01-02 21:48:05,Jonas Jenwald,"Merge pull request #15885 from Snuffleupagus/font-update-type-subtype

Update the `type`/`subtype` at the end of font parsing",True
6bdbb5c5ca928ecd38a72dc4c72c0879cea49a3b,2023-01-02 20:51:48,Jonas Jenwald,"Update the `type`/`subtype` at the end of font parsing

This fixes a warning reported by CodeQL, and should also make general sense given that we parse the font-data to determine the *actual* `type`/`subtype` rather than trusting the PDF document.",False
42aa08563b588c60f10ec113c7e81e7d7eeb7540,2023-01-02 20:33:53,Jonas Jenwald,"Merge pull request #15880 from Snuffleupagus/rm-docStats

[api-minor] Remove the `PDFDocumentProxy.stats` getter (PR 15758 follow-up)",True
1ba6e9437ca7a2d5906dbd57bca57f8c89bbf22a,2023-01-02 20:08:29,Jonas Jenwald,"Merge pull request #15884 from Snuffleupagus/enable-defaultZoomDelay

Enable the `defaultZoomDelay` option/preference unconditionally, and other (small) improvements",True
685b5866e496345004f4fb5012dd8165906c504d,2023-01-02 19:28:53,Calixte Denizet,Remove shadow around each pages (fix issue #15836),False
9089e75cce1ed4c3cc6e9d661096e4ee52141ba8,2023-01-02 19:22:00,Jonas Jenwald,"Validate the options before adding the `ResizeObserver` in the `PDFViewer` constructor (PR 15830 follow-up)

In the GENERIC viewer, it doesn't make sense to register the `ResizeObserver` if the `container`/`viewer` options are not valid.",False
0860a5b16858775774019487ca29f42cac7f5f92,2023-01-02 18:35:33,Jonas Jenwald,"Ensure that a document is loaded in `PDFViewer.{increaseScale, decreaseScale}` (PR 14053 follow-up)

This was always ""wrong"", since these methods (just like all the zoom-related ones) don't make sense unless there's an active document.",False
9f50b0af372bf41d70f1a6b5ce3c9b09d4facc79,2023-01-02 18:30:16,Jonas Jenwald,"Enable the `defaultZoomDelay` option/preference unconditionally (PR 15812 follow-up)

This option/preference was disabled in GENERIC builds, see PR 15812, to avoid landing it *just before* a new release. Hence it should be fine to enable this now.",False
e7cea29ad4e6e90ebb5c9361754998b873566d16,2023-01-02 17:43:32,calixteman,"Merge pull request #15883 from calixteman/infinite_loop_search_diacritic

Avoid an infinite loop when searching for a single diacritic",True
69c88477a9937212a43c7db754c4aa566d5d10f3,2023-01-02 16:57:07,Calixte Denizet,Avoid an infinite loop when searching for a single diacritic,False
1a69d537c16124104948b950a07bad1f0e021609,2023-01-01 22:23:12,Jonas Jenwald,"[api-minor] Limit the `PDFDocumentLoadingTask.onUnsupportedFeature` functionality to GENERIC builds (PR 15758 follow-up)

This was deprecated in PR 15758 but it's unfortunately quite difficult to tell if third-party users are depending on this, e.g. to implement custom error reporting, and if so to what extent.
However, thanks to the pre-processor we can limit *most* of this code to GENERIC builds which still seem like a worthwhile change.

These changes reduce the bundle size of the Firefox PDF Viewer by 3.8 kB in total.",False
0c1fb4e740ba605138d743c9e437184b62edf727,2023-01-01 21:36:47,Jonas Jenwald,"[api-minor] Remove the `PDFDocumentProxy.stats` getter (PR 15758 follow-up)

This was deprecated in PR 15758 and given that it's quite unlikely that any third-party users are relying on this functionality, since it was only ever added to support telemetry reporting in the Firefox PDF Viewer, it should hopefully be fine to remove this fairly quickly.

These changes reduce the bundle size of the Firefox PDF Viewer by 4.5 kB in total.",False
2c57a4232cbee8b557b7b4da31b52db29515d276,2023-01-01 19:18:28,Jonas Jenwald,"[api-minor] Improve the `useWorkerFetch` default value checks

Given that the Fetch API only supports the http/https protocols, worker-thread fetching of CMaps and Standard-fonts may thus fail in certain cases. To improve the default behaviour we'll now also check that the `cMapUrl` and `standardFontDataUrl` options are appropriate, except in Firefox where this should always work.",False
1e3e2defe43e58d59d438386602610854170b0bf,2023-01-01 19:14:41,Tim van der Meij,"Merge pull request #15878 from timvandermeij/bump

Bump versions in `pdfjs.config`",True
195846a716583a5551a634a1d2f9044efa4271d1,2023-01-01 19:05:58,Tim van der Meij,Bump versions in `pdfjs.config`,False
3fd2a35482a03e4f07fe0be7ce9e49900dd7c980,2022-12-31 19:44:59,Tim van der Meij,"Merge pull request #15874 from Snuffleupagus/progressBar-decouple-colors

Decouple the loadingBar `background-color` from the rest of the viewer",True
c791e01bfc280fb6abc476dece21c6a88d2340df,2022-12-29 16:22:25,Jonas Jenwald,"Merge pull request #15875 from Snuffleupagus/viewer-name-consistency

Improve name consistency in the viewer (PR 15812 follow-up)",True
88432a0e3f46d5cf4a7b9e286fcf818ac47aa52b,2022-12-28 17:56:01,Jonas Jenwald,"Improve name consistency in the viewer (PR 15812 follow-up)

This tweaks a few name that originated in PR 15812, to improve overall consistency:
 - Use the `drawingDelay` parameter-name in all methods that accept a delay.
 - Use the `postponeDrawing` variable-name in all relevant methods.",False
c2d17cac34ad39b17dd80f9138709d2cde3a4128,2022-12-28 16:44:22,Jonas Jenwald,"[GeckoView] Remove the `progressBar` CSS variables, since they're unused

Given that there's no loadingBar element present in the GeckoView-viewer, we shouldn't need CSS variables for it.",False
49c09eda9bc9c5111abfa067aa1acb66a472f6d4,2022-12-28 16:37:39,Jonas Jenwald,"Decouple the loadingBar `background-color` from the rest of the viewer

With upcoming background changes elsewhere in the viewer, this should be helpful in separating the styling of the loadingBar. These changes also means that both the ""regular"" and the ""indeterminate"" loadingBar now uses the same `background-color` value.

Also, shortens the related CSS variables a little bit since that can't hurt.",False
35ca6ab3195be1cf36d564919a6071b7ae998252,2022-12-27 18:21:20,Jonas Jenwald,"Merge pull request #15867 from Snuffleupagus/loadingIcon-toggle

Only display the loadingIcons when rendering is currently running",True
4224984525a03b4826d114c1b2433cf3332ab345,2022-12-27 17:58:39,Jonas Jenwald,"Only display the pageNumber-loadingIcon when rendering is currently running

*This makes the same kind of changes as in the previous patch, but for the pageNumber-loadingIcon in the main toolbar.*

To display the pageNumber-loadingIcon when rendering starts, if the page is the most visible one, we'll utilize the existing ""pagerender"" event.
To toggle the pageNumber-loadingIcon as the user moves through the document we'll now instead utilize the ""pagechanging"" event, which should actually be slightly more efficient overall[1]. Note how we'd, in the old code, only consider the most visible page anyway when toggling the pageNumber-loadingIcon.

---
[1] Even in a PDF document as relatively short/simple as `tracemonkey.pdf`, scrolling through the entire document can easily trigger the ""updateviewarea"" event more than a thousand times.",False
a578571f59fa167712ee9717e4149f09b727fd8f,2022-12-27 17:58:39,Jonas Jenwald,"Only display the page-loadingIcon when rendering is currently running

Given that we only render one page at a time, this will lead to only *one* page-loadingIcon being displayed at a time even if multiple pages are visible in the viewer. However, this will make it clearer which page is the currently parsing/rendering one.

To simplify toggling of the page-loadingIcon visibility, the existing `PDFPageView.renderingState` is changed into a getter/setter-pair with the latter also handling the page-loadingIcon state.
An additional benefit of these changes is that the `PDFViewer` no longer needs to handling toggling of page-loadingIcon visibility during rendering, since there can only ever be *one* page rendering.
Finally, this may also simplify future changes w.r.t. page-loadingIcon visibility toggling (using e.g. a show-timeout).",False
3110d1f29a0aff4390f2f1d0fa3cfe0467ca2402,2022-12-27 17:56:43,Jonas Jenwald,"Merge pull request #15869 from Snuffleupagus/_abortOperatorList-clearTimeout

Always abort a pending `streamReader` cancel timeout in `PDFPageProxy._abortOperatorList` (PR 15825 follow-up)",True
1dce95613a28031e6df54bdf84e8cb9c15e7a9d8,2022-12-27 17:55:24,Jonas Jenwald,"Merge pull request #15870 from Snuffleupagus/rm-PDFPageProxy-getJSActions-caching

Remove `PDFPageProxy.getJSActions` caching, since it's unused, in the API",True
ec6ad91bb730bc84311b28c7abfe34699bc88603,2022-12-27 17:54:06,Jonas Jenwald,"Merge pull request #15872 from Snuffleupagus/PDFPageView-setDimensions-regression

[Regression] Ensure that documents with varying page sizes are initialized correctly (PR 15812 follow-up)",True
05169efec1fc3ff3a83ca27364fec8ad3699398f,2022-12-27 16:44:42,Jonas Jenwald,"[Regression] Ensure that documents with varying page sizes are initialized correctly (PR 15812 follow-up)

The rotation-caching added in PR 15812 completely breaks initialization of PDF documents with varying page sizes, causing all pages to wrongly get the same size; see e.g. `sizes.pdf` from the test-suite.
To fix that without having to e.g. add a new parameter, which feels error prone, this patch changes the `PDFPageView.#setDimensions` method to completely ignore the rotation-caching until the `setPdfPage`-method has been called.",False
841abb53e6e1de618a55f52bf48e381cffda8f93,2022-12-27 15:09:33,Jonas Jenwald,"Remove `PDFPageProxy.getJSActions` caching, since it's unused, in the API

Note how, in the scripting initialization in the viewer, we only ever invoke `PDFPageProxy.getJSActions` *once* per page in order to improve overall performance; see https://github.com/mozilla/pdf.js/blob/a575aa13b9e4ce7e671be7794e7a7296406a3087/web/pdf_scripting_manager.js#L372-L375

Hence it really shouldn't be necessary to cache its result in the API, especially when that is done *manually* rather than using something like `shadow`.",False
ae24dbd064648f03380c80c21917385ad85a352e,2022-12-27 14:49:39,Jonas Jenwald,"Always abort a pending `streamReader` cancel timeout in `PDFPageProxy._abortOperatorList` (PR 15825 follow-up)

When we're destroying a `PDFPageProxy`-instance, during full document destruction, we'll force-abort any worker-thread parsing of operatorLists. Hence we should make sure that any pending cancel timeout is always aborted, since a later `PDFPageProxy._abortOperatorList` call should always ""replace"" a previous one.

*Please note:* Technically this was always wrong, but with the changes in PR 15825 it became *ever so slightly* easier to trigger this thanks to the potentially longer timeout.",False
a575aa13b9e4ce7e671be7794e7a7296406a3087,2022-12-27 03:44:21,calixteman,"Merge pull request #15862 from calixteman/layers_zindex

Set a z-index for the different layers within a page (fixes #15861)",True
c677b167b60fd1c37032d7e220676cdecc47844e,2022-12-27 03:25:08,Calixte Denizet,"Set a z-index for the different layers within a page (fixes #15861)

Each layer has an absolute position, hence it induces the creation of
some stacking contexts (see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context).
Thanks to this feature, we don't have to worry about the z-index used in
the annotation layer and how form elements interact with the other layers.",False
e49dd525b03aef0ca03a4f2e3b059aa177483f07,2022-12-27 00:14:03,calixteman,"Merge pull request #15812 from calixteman/refactor_zoom

Only redraw after zooming is finished (bug 1661253)",True
663007a5c727242d42916723c3e2b3eb9f3022f4,2022-12-26 22:43:17,Calixte Denizet,"Only redraw after zooming is finished (bug 1661253)

Right now, the visible pages are redrawn for each scale change.
Consequently, zooming with mouse wheel or in pinching can be pretty janky
(even on a desktop machine but with a hdpi screen).
So the main idea in this patch is to draw the visible pages only once zooming
is finished.",False
31da2fad51c0c9f386e452899b65c34ee9c9d81a,2022-12-25 18:23:28,Jonas Jenwald,"Merge pull request #15864 from Snuffleupagus/update-packages

Update packages and translations",True
3b02d23ce27853ea053f3dd68811c8ce20ccaab1,2022-12-25 17:29:37,Jonas Jenwald,Update l10n files,False
492ce090bdbc9b06315962971f1c38de7c6ab35a,2022-12-25 17:29:34,Jonas Jenwald,Update npm packages,False
8aed0c3613743903bad280470fcdbfe0f9f55e29,2022-12-24 14:53:39,Jonas Jenwald,"Merge pull request #15854 from Snuffleupagus/issue-15803

Re-factor searching for incomplete objects in `XRef.indexObjects` (issue 15803)",True
869807406d76e31034efd1713034e4f760210c7a,2022-12-23 16:15:27,Jonas Jenwald,"Merge pull request #15860 from Snuffleupagus/loadingIcon-last

Ensure that the `loadingIconDiv` is always visible (PR 15829 follow-up)",True
d042a3ca761e1c6fdca1bfdb8d37fec8be00df03,2022-12-22 17:04:32,Jonas Jenwald,"Ensure that the `loadingIconDiv` is always visible (PR 15829 follow-up)

After the changes in PR 15829 the `loadingIconDiv` is no longer always visible when it should be, specifically in the case where we cancel and re-render a partially parsed/rendered page.
To reproduce this, try opening https://github.com/mozilla/pdf.js/files/1522715/wuppertal_2012.pdf in the viewer and change the zoom level while rendering is ongoing. In this case the `loadingIconDiv` doesn't actually become visible, despite being present in the DOM, since it's no longer at the end of the page-div.

I don't know to what extent this renders PR 15829 ""pointless"", however we're not repeatedly re-creating and re-inserting the `loadingIconDiv` but rather just *move* the existing element in the DOM.",False
a749f6cc149be7ca2aa4f84851a9aee1f21ebc45,2022-12-20 03:39:26,Jonas Jenwald,"Merge pull request #15852 from Snuffleupagus/layerProperties-followup

A couple of small viewer fixes (PR 15811 and 15831 follow-up)",True
2fcf8bb5bece5091f36be86f369ad232770a3b2f,2022-12-20 03:31:09,Jonas Jenwald,"Re-factor searching for incomplete objects in `XRef.indexObjects` (issue 15803)

When trying to find incomplete objects, i.e. those missing the ""endobj""-string at the end, there's unfortunately a number of possible operators that we need to check for. Otherwise we could miss e.g. the ""trailer"" at the end of a corrupt PDF document, which is why the referenced document didn't work.

Currently we do all searching on the ""raw"" bytes of the PDF document, for efficiency, however this doesn't really work when we need to check for *multiple* potential command-strings. To keep the complexity manageable we'll instead use regular expressions here, but we can at least avoid creating lots of substrings thanks to the `RegExp.lastIndex` property; which is well supported across browsers according to https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex#browser_compatibility

Note that this repeated regular expression usage could perhaps be slightly less efficient than the old code, however this method is only invoked for corrupt PDF documents.",False
f3d7f2e64f7644ceee4259d71a2d513eeb805ae6,2022-12-19 05:50:06,Jonas Jenwald,"Fix the `loadingBar` initialization in the ""mobile-viewer"" example (PR 15831 follow-up)

Given that the `ProgressBar`-constructor was updated, we need to update the ""mobile-viewer"" example as well; this is yet another thing I missed during review.",False
e8c7278337589d9498d2a514f10337faf87324aa,2022-12-19 05:34:04,Jonas Jenwald,"Improve the `linkService` handling in the `DEFAULT_LAYER_PROPERTIES` (PR 15811 follow-up)

We'll no longer import the `SimpleLinkService` dependency unconditionally in the file, since it's only used in COMPONENTS-builds.
Furthermore, for the COMPONENTS-builds, we'll create a `SimpleLinkService`-instance only for those layers that actually need it.",False
6a9a567670497a9d542df2e87b33cdec07ae0f17,2022-12-18 18:52:13,Tim van der Meij,"Merge pull request #15811 from Snuffleupagus/rm-web-default-factory

[api-minor] Remove the default factories, used to initialize various layers, in the viewer",True
d9cdc46f841c752b808655ca2a673ecba759a514,2022-12-18 17:56:56,Jonas Jenwald,"Update the ""pageviewer"" example to account for the previous patches

This uses a simple version number check, to prevent breakage if the example is used with older PDF.js versions.",False
8b8d89006411edacad1af3fc28bbb35ff32fd31f,2022-12-18 17:56:54,Jonas Jenwald,"[api-minor] Remove the `xfaLayerFactory` in the viewer

Please note that this functionality has never really mattered for the Firefox PDF Viewer, the GENERIC viewer, or even the ""simpleviewer""/""singlepageviewer"" component-examples. Hence, in practice this means that only the ""pageviewer"" component-example[1] have ever really utilized this.

Using factories to initialize various layers in the viewer, rather than simply invoking the relevant code directly, seems (at least to me) like a somewhat roundabout way of doing things.
Not only does this lead to more code, both to write and maintain, but since many of the layers have common parameters (e.g. an `AnnotationStorage`-instance) there's also some duplication.

Hence this patch, which removes the `xfaLayerFactory` and instead uses a lookup-function in the `PDFPageView`-class to access the external viewer-properties as necessary.
Note that this should even be an improvement for the ""pageviewer"" component-example, since most layers will now work by default rather than require manual configuration.

---
[1] In practice we generally suggest using the ""simpleviewer"", or ""singlepageviewer"", since it does *most* things out-of-the-box and given that a lot of functionality really require *a viewer* and not just a single page in order to work.",False
c393148748d2d097dfe5bbe7ebefb7fb11b713db,2022-12-18 17:56:33,Jonas Jenwald,"[api-minor] Remove the `textLayerFactory` in the viewer

Please note that this functionality has never really mattered for the Firefox PDF Viewer, the GENERIC viewer, or even the ""simpleviewer""/""singlepageviewer"" component-examples. Hence, in practice this means that only the ""pageviewer"" component-example[1] have ever really utilized this.

Using factories to initialize various layers in the viewer, rather than simply invoking the relevant code directly, seems (at least to me) like a somewhat roundabout way of doing things.
Not only does this lead to more code, both to write and maintain, but since many of the layers have common parameters (e.g. an `AnnotationStorage`-instance) there's also some duplication.

Hence this patch, which removes the `textLayerFactory` and instead uses a lookup-function in the `PDFPageView`-class to access the external viewer-properties as necessary.
Note that this should even be an improvement for the ""pageviewer"" component-example, since most layers will now work by default rather than require manual configuration.

---
[1] In practice we generally suggest using the ""simpleviewer"", or ""singlepageviewer"", since it does *most* things out-of-the-box and given that a lot of functionality really require *a viewer* and not just a single page in order to work.",False
4c78290028ff976e392aa046ffaf29a40f9c8e0a,2022-12-18 17:56:10,Jonas Jenwald,"[api-minor] Remove the `textHighlighterFactory` in the viewer

Please note that this functionality has never really mattered for the Firefox PDF Viewer, the GENERIC viewer, or even the ""simpleviewer""/""singlepageviewer"" component-examples. Hence, in practice this means that only the ""pageviewer"" component-example[1] have ever really utilized this.

Using factories to initialize various layers in the viewer, rather than simply invoking the relevant code directly, seems (at least to me) like a somewhat roundabout way of doing things.
Not only does this lead to more code, both to write and maintain, but since many of the layers have common parameters (e.g. an `AnnotationStorage`-instance) there's also some duplication.

Hence this patch, which removes the `textHighlighterFactory` and instead uses a lookup-function in the `PDFPageView`-class to access the external viewer-properties as necessary.
Note that this should even be an improvement for the ""pageviewer"" component-example, since most layers will now work by default rather than require manual configuration.

---
[1] In practice we generally suggest using the ""simpleviewer"", or ""singlepageviewer"", since it does *most* things out-of-the-box and given that a lot of functionality really require *a viewer* and not just a single page in order to work.",False
f1d1f6edfd032e956d1298d0aa21fa6bce7dd11e,2022-12-18 17:56:08,Jonas Jenwald,"[api-minor] Remove the `structTreeLayerFactory` in the viewer

Please note that this functionality has never really mattered for the Firefox PDF Viewer, the GENERIC viewer, or even the ""simpleviewer""/""singlepageviewer"" component-examples. Hence, in practice this means that only the ""pageviewer"" component-example[1] have ever really utilized this.

Using factories to initialize various layers in the viewer, rather than simply invoking the relevant code directly, seems (at least to me) like a somewhat roundabout way of doing things.
Not only does this lead to more code, both to write and maintain, but since many of the layers have common parameters (e.g. an `AnnotationStorage`-instance) there's also some duplication.

Hence this patch, which removes the `structTreeLayerFactory` and instead uses a lookup-function in the `PDFPageView`-class to access the external viewer-properties as necessary.
Note that this should even be an improvement for the ""pageviewer"" component-example, since most layers will now work by default rather than require manual configuration.

---
[1] In practice we generally suggest using the ""simpleviewer"", or ""singlepageviewer"", since it does *most* things out-of-the-box and given that a lot of functionality really require *a viewer* and not just a single page in order to work.",False
ca69da735e72dc9df2144861c4d1b2406c84dca5,2022-12-18 17:55:45,Jonas Jenwald,"[api-minor] Remove the `annotationLayerFactory` in the viewer

Please note that this functionality has never really mattered for the Firefox PDF Viewer, the GENERIC viewer, or even the ""simpleviewer""/""singlepageviewer"" component-examples. Hence, in practice this means that only the ""pageviewer"" component-example[1] have ever really utilized this.

Using factories to initialize various layers in the viewer, rather than simply invoking the relevant code directly, seems (at least to me) like a somewhat roundabout way of doing things.
Not only does this lead to more code, both to write and maintain, but since many of the layers have common parameters (e.g. an `AnnotationStorage`-instance) there's also some duplication.

Hence this patch, which removes the `annotationLayerFactory` and instead uses a lookup-function in the `PDFPageView`-class to access the external viewer-properties as necessary.
Note that this should even be an improvement for the ""pageviewer"" component-example, since most layers will now work by default rather than require manual configuration.

---
[1] In practice we generally suggest using the ""simpleviewer"", or ""singlepageviewer"", since it does *most* things out-of-the-box and given that a lot of functionality really require *a viewer* and not just a single page in order to work.",False
7aedb8ed7a7f58d185b71f43ff6b60adf2753d7e,2022-12-18 17:40:23,Jonas Jenwald,"[api-minor] Remove the `annotationEditorLayerFactory` in the viewer

Please note that this functionality has never really mattered for the Firefox PDF Viewer, the GENERIC viewer, or even the ""simpleviewer""/""singlepageviewer"" component-examples. Hence, in practice this means that only the ""pageviewer"" component-example[1] have ever really utilized this.

Using factories to initialize various layers in the viewer, rather than simply invoking the relevant code directly, seems (at least to me) like a somewhat roundabout way of doing things.
Not only does this lead to more code, both to write and maintain, but since many of the layers have common parameters (e.g. an `AnnotationStorage`-instance) there's also some duplication.

Hence this patch, which removes the `annotationEditorLayerFactory` and instead uses a lookup-function in the `PDFPageView`-class to access the external viewer-properties as necessary.
Note that this should even be an improvement for the ""pageviewer"" component-example, since most layers will now work by default rather than require manual configuration.

---
[1] In practice we generally suggest using the ""simpleviewer"", or ""singlepageviewer"", since it does *most* things out-of-the-box and given that a lot of functionality really require *a viewer* and not just a single page in order to work.",False
8fa8310ec91297a4a0c6b4894473a9e15010ec9a,2022-12-18 17:40:23,Jonas Jenwald,"Decouple the `annotationLayer` and `annotationEditorLayer` in the viewer

Currently we'll only initialize and render the `annotationEditorLayer` once the regular `annotationLayer` has been rendered.
While it obviously makes sense to render the `annotationEditorLayer` *last*, the way that the code is currently written means that if a third-party user disables the `annotationLayer` then the editing-functionality indirectly becomes disabled as well.
Given that this seems like a somewhat arbitrary limitation, this patch simply decouples these two layers while still keeping the rendering order consistent.",False
ded02941f22aeb501e5d909048f93db89bdf18dd,2022-12-18 17:40:23,Jonas Jenwald,"[api-minor] Move, most of, the `isPureXfa`-handling from `PDFViewer` and into `PDFPageView`

By moving this code the ""pageviewer""-component example will become slightly more usable on its own, it may simplify a future addition of XFA Foreground document support, and finally also serves as preparation for the following patches.",False
dd96ee1512a933c3ec3bd16a635a8efeef2cb850,2022-12-17 20:46:36,calixteman,"Merge pull request #15849 from calixteman/15744

[Editor] Avoid to scroll when an annotation is commited (fixes issue #15744)",True
a84d14b382ed825b4cd6a1a30901d266a30d41eb,2022-12-17 18:18:19,Calixte Denizet,[Editor] Avoid to scroll when an annotation is commited (fixes issue #15744),False
1ab711e2ac5c2c4b9ae873d9f1e3454df9a9f899,2022-12-17 17:04:40,calixteman,"Merge pull request #15830 from calixteman/dont_compute_rect

Avoid to compute the client rect of the viewer",True
65a476a386d64eaed72e542046d7f0010c1183d0,2022-12-17 16:28:39,calixteman,"Merge pull request #15847 from calixteman/followup_15845

Display the text layer before running the a11y stuff (follow-up of #15845)",True
f4914849df36c91529ce633dec0764eb8729d3f4,2022-12-17 02:04:12,Calixte Denizet,Display the text layer before running the a11y stuff (follow-up of #15845),False
c550953c6d73e63ddd76cef4f848687a183fce5a,2022-12-17 01:25:29,Calixte Denizet,"Avoid to compute the client rect of the viewer

The container position and dimensions should be almost constant, hence
it's pretty useless to query them on each rescale.
Finally it avoids to trigger some reflows.",False
ee7a947d1f15318bce33fac2fd9c511e479aedd5,2022-12-16 22:43:21,calixteman,"Merge pull request #15845 from calixteman/15844

[TextLayer] Hide the text layer when it's created in order to avoid reflows (fix #15844)",True
18eb1a0ffd87447085f2c463e5fa17ee22091eb4,2022-12-16 22:26:18,Jonas Jenwald,"Merge pull request #15842 from Snuffleupagus/gv-pageLayout

[GeckoView] Ignore the pageLayout, from the PDF document, to prevent issues",True
c3a3ba2ebeddb5b02a465b5db75164d6654f3165,2022-12-16 21:54:40,Calixte Denizet,[TextLayer] Hide the text layer when it's created in order to avoid reflows (fix #15844),False
cb212b24fdd8a95d14fc239833cbed0f23fa613f,2022-12-16 20:25:02,calixteman,"Merge pull request #15841 from calixteman/15784

Strip out a reserved operator (9) from CFF char strings (fixes issue #15784)",True
f80880ccaaad0b951378bcf49903c95e7bc62d33,2022-12-16 19:47:46,Calixte Denizet,Strip out a reserved operator (9) from CFF char strings (fixes issue #15784),False
0c83bebf03dc9717620992616727c9944022d434,2022-12-16 17:14:29,Jonas Jenwald,"Merge pull request #15832 from Snuffleupagus/issue-15828

Attempt to expose `OnProgressParameters` in the TypeScript definitions (issue 15828)",True
0289038961231b2e95f319e8ed7ba620b1e26ce7,2022-12-16 16:39:56,Jonas Jenwald,"[GeckoView] Ignore the pageLayout, from the PDF document, to prevent issues

First of all, given the screen-sizes of most mobile phones using Spread modes is unlikely to be useful.
Secondly, and more importantly, since there's (currently) no UI available for the user to override a PDF document-specified Spread mode this would result in a bad UX otherwise.

Also, removes an outdated comment from the `apiPageLayoutToViewerModes` helper function.",False
b518d93b459b527335bd1e3a7a9b5531f40e0b52,2022-12-16 00:18:13,Jonas Jenwald,"Merge pull request #15835 from Snuffleupagus/viewer-safe-element-access

Protect a few additional DOM element accesses in the viewer (PR 15831 follow-up)",True
4bd66a215093e4580b5db2793e3cea971bda8abd,2022-12-15 23:18:10,Jonas Jenwald,"Protect a few additional DOM element accesses in the viewer (PR 15831 follow-up)

A couple of cases that I missed during review, for code-paths that don't run by default in the viewer.",False
826c358b3aefdddac7914c28462f4db5876ba8ca,2022-12-15 21:18:14,Jonas Jenwald,"Merge pull request #15834 from Snuffleupagus/issue-15833

Always parse the entire `startXRefQueue` in `XRef.readXRef` (issue 15833)",True
0021d65dc0b9a0c6f769e334b6ae8a63bfe2d54f,2022-12-15 20:15:26,calixteman,"Merge pull request #15831 from calixteman/android_viewer

[GV] Add a viewer for GeckoView",True
26135b0313ca0926faaeb37b14d05c2be42aa2f0,2022-12-15 18:16:28,Jonas Jenwald,"Always parse the entire `startXRefQueue` in `XRef.readXRef` (issue 15833)

Previously we'd abort all parsing if an Error was encountered, despite the fact that multiple `startXRefQueue`-entries may be available and that continued parsing could thus eventually be able to find usable data.

Note that in the referenced PDF document the `startxref`-operator, at the end of the file, points to a position in the middle of an arbitrary `stream` which is why things break.",False
f19572c4ccbabc4d6c3f0ce7e157d90bfe163e08,2022-12-15 18:09:48,Calixte Denizet,[GV] Add a viewer for GeckoView,False
8587ce6afd7c9fc0b215a00031bbbef171735efd,2022-12-15 15:01:21,Jonas Jenwald,"Merge pull request #15829 from calixteman/dont_remove_spinner

Don't remove the loading icon from the DOM when a page is resetted",True
20037e9919ec5c1322ec35ff01918b7e2293fce5,2022-12-15 14:49:49,Calixte Denizet,Don't remove the loading icon from the DOM when a page is resetted,False
0ef72044e27394187041fb2230cc42352246843e,2022-12-15 02:06:31,Jonas Jenwald,"Attempt to expose `OnProgressParameters` in the TypeScript definitions (issue 15828)

Hopefully this works, since as usual I don't really know anything about TypeScript...",False
506bbb7283ba06d88070e40ef91192bb85244741,2022-12-14 23:56:39,Jonas Jenwald,"Merge pull request #15825 from Snuffleupagus/cancel-extraDelay

[api-minor] Allow specifying an extra-delay, in `RenderTask.cancel`, for worker-thread aborting of operatorList parsing",True
d90e62e806175870d5ecd0bcac4ca6b33ac0ddb3,2022-12-14 19:46:56,Jonas Jenwald,"Merge pull request #15824 from Snuffleupagus/annotationLayer-params

Handle possibly undefined parameters *once* per `AnnotationLayer.render` invocation",True
68f36d82d591208b868c3d0d1792c9784b6de4d7,2022-12-14 18:47:34,Jonas Jenwald,"Merge pull request #15826 from Snuffleupagus/lazy-textHighlighter

Initialize the `TextHighlighter`-instance lazily in `PDFPageView`",True
8ac94d65199d4e3fd6050b0470ad292cd4b4fa3e,2022-12-14 17:53:05,Jonas Jenwald,"Initialize the `TextHighlighter`-instance lazily in `PDFPageView`

Depending on e.g. the `textLayerMode` option it might not actually be necessary to always initialize this eagerly.
*Please note:* Unfortunately we cannot `shadow` a private field, hence why this is only made semi-""private"".",False
5df341ed7ef0488cbc1f5fab4dc7027de6e6e618,2022-12-14 17:42:49,Jonas Jenwald,"Make the various layer-render methods, in `PDFPageView`, properly private",False
91524d1a60ec2343eead6d9f4873da2e0bc35a47,2022-12-14 17:04:16,Jonas Jenwald,"[api-minor] Allow specifying an extra-delay, in `RenderTask.cancel`, for worker-thread aborting of operatorList parsing

This is done to support upcoming viewer-changes, and in order to prevent third-party users from outright breaking things we'll simply ignore too large values.",False
dcf9ff2182becaecf59274d59b9b56fa6ce9aee8,2022-12-14 16:53:24,Jonas Jenwald,"Handle possibly undefined parameters *once* per `AnnotationLayer.render` invocation

There's no reason to repeat this for every single annotation. Also, adds a couple of missing JSDoc-parameters.",False
e182597cb1994c26ed3b4a392e8accd638bf320f,2022-12-14 02:26:50,calixteman,"Merge pull request #15822 from calixteman/15818

[JS] Run the named actions before running the format when the file is open (issue #15818)",True
2ebf8745a24d30756ef828af354756333beb1abb,2022-12-14 01:42:32,Calixte Denizet,"[JS] Run the named actions before running the format when the file is open (issue #15818)

It's a follow-up of #14950: some format actions are ran when the document is open
but we must be sure we've everything ready for that, hence we have to run some
named actions before runnig the global format.
In playing with the form, I discovered that the blur event wasn't triggered when
JS called `setFocus` (because in such a case the mouse was never down). So I removed
the mouseState thing to just use the correct commitKey when blur is triggered by a
TAB key.",False
2d596045d1ec0afc32ac525c0b2dd0b63435dc30,2022-12-14 00:10:23,calixteman,"Merge pull request #15819 from calixteman/15815

[JS] Handle correctly choice widgets where the display and the export values are different (issue #15815)",True
0c1ec946aa3aa8d9bdfc30858570a0cc63afc6ea,2022-12-13 23:38:26,Calixte Denizet,[JS] Handle correctly choice widgets where the display and the export values are different (issue #15815),False
64786b4c93e20a30fba5eb8ba2381b29f44c2ba2,2022-12-13 20:24:47,calixteman,"Merge pull request #15820 from calixteman/fix_visual_order

The annotation layer dimensions must be set before adding some elements (follow-up of #15770)",True
1a397681fe92980c9189f3e522ffc89f667d73bf,2022-12-13 19:24:45,Calixte Denizet,"The annotation layer dimensions must be set before adding some elements (follow-up of #15770)

In order to move the annotations in the DOM to have something which corresponds
to the visual order, we need to have their dimensions/positions which means that
the parent must have some dimensions.",False
0fdac9ba708d765d75dd16522021bb22a8fd8234,2022-12-12 15:42:38,Jonas Jenwald,"Merge pull request #15797 from Snuffleupagus/PageViewport-rawDims

[api-minor] Add a new `PageViewport`-getter to access the original, un-scaled, viewport dimensions",True
cafdc481478e45f58b59a65704fb11b7bd04014f,2022-12-11 23:07:35,Jonas Jenwald,"[api-minor] Add a new `PageViewport`-getter to access the original, un-scaled, viewport dimensions

While reviewing recent patches, I couldn't help but noticing that we now have a lot of call-sites that manually access the `PageViewport.viewBox`-property.
Rather than repeating that verbatim all over the code-base, this patch adds a lazily computed and cached getter for this data instead.",False
8e11cf9b1c2115d5b19747d974f951cfa73db71f,2022-12-11 23:02:24,Jonas Jenwald,"Merge pull request #15806 from Snuffleupagus/AnnotationLayerBuilder-no-annotations

Don't attempt to re-create the `annotationLayer`, for pages without any annotations, on zooming and rotation",True
9b6d0d994dbe3df5b29b96026958c84f4bc54592,2022-12-11 22:42:10,Jonas Jenwald,"Remove the API-caching of annotation-data

This was essentially done only to compensate for the viewer calling `PDFPageProxy.getAnnotations` unconditionally on every annotationLayer-rendering invocation. With the previous patch that's no longer happening, and this API-caching should thus no longer be necessary.",False
8e56f072e0bde6706919dfbead61bc96164a7c92,2022-12-11 22:42:09,Jonas Jenwald,"Don't attempt to re-create the `annotationLayer`, for pages without any annotations, on zooming and rotation

For pages without any annotations, applies e.g. to the `tracemonkey.pdf` document, we'll repeatedly try to re-create the `annotationLayer` on every zoom and rotation operation.
The reason that this happens is because we don't insert the `annotationLayer`-div into the DOM unless there's annotations present on the page, which thus means that we miss the existing `annotationLayer`-caching present in the `PDFPageView` implementation.

This is a very old issue, and the easiest solution is to simply always insert an *empty* (and hidden) `annotationLayer`-div such that the existing code/caching starts working for the ""no annotations"" case as well.
Note that this is consistent with other layers, since e.g. the `textLayer` and/or `annotationEditorLayer` may be empty. Given that only a limited, by default ten, number of pages are ever active at once the additional DOM-elements shouldn't effect things negatively here.",False
d9f13558d646f897570827599160308269dd44db,2022-12-11 22:02:29,calixteman,"Merge pull request #15770 from calixteman/set_dims

Set the dimensions of the various layers at their creation",True
6c2f34b6bbf69fb0fdfe920cb09bc4b348824eed,2022-12-11 18:32:45,Tim van der Meij,"Merge pull request #15805 from Snuffleupagus/XfaLayerBuilder-render-async

Change the `XfaLayerBuilder.render` method to be asynchronous",True
828efd9d000ab868369ac19cbc2ed0f8cc09c92f,2022-12-11 17:38:23,Jonas Jenwald,"Change the `XfaLayerBuilder.render` method to be asynchronous

This is consistent with the `render` methods of the other layers, and reduces overall indentation in the method.
Furthermore, don't ""swallow"" errors since the `PDFPageView._renderXfaLayer` method is already able to deal with that.",False
879a7432b543f2224a6e4f668f9fd698a2b08d66,2022-12-10 19:32:43,Jonas Jenwald,"Merge pull request #15800 from Snuffleupagus/AnnotationEditorLayerBuilder-destroy

[AnnotationEditorLayerBuilder] Inline the `destroy` code in the `cancel` method",True
a989b5a87942ff728463af7a6a1dae3df691d095,2022-12-10 19:05:06,Calixte Denizet,"Set the dimensions of the various layers at their creation

- Use a unique helper function in display/display_utils.js;
- Move those dimensions in css' side.",False
bed1a1baa19e9f0f63bdb637d7c02aa3dd38a4d8,2022-12-10 14:46:20,Jonas Jenwald,"[AnnotationEditorLayerBuilder] Inline the `destroy` code in the `cancel` method

It doesn't seem necessary to have a *separate* `destroy` method given that the `cancel` method always invokes it unconditionally.
In the `PDFPageView.reset` method we currently attempt to call `destroy` directly, however that'll never actually happen since either:
 - We're keeping the annotationEditorLayer, in which case we're just hiding the layer and nothing more (and the relevant branch is never entered).
 - We're removing the annotationEditorLayer, in which case the `PDFPageView.cancelRendering` method has already cancelled *and* nulled it (and there's thus nothing left to `destroy` here).

*Please note:* Hopefully I'm not overlooking something obvious here, since both reading through the code *and* also adding `console.log(this.annotationEditorLayer);` [before this line](https://github.com/mozilla/pdf.js/blob/9d4aadbf7a32c8a994818e848fb2ec883f257702/web/pdf_page_view.js#L438) suggests that it's indeed unnecessary.",False
9d4aadbf7a32c8a994818e848fb2ec883f257702,2022-12-09 21:56:35,Jonas Jenwald,"Merge pull request #15796 from Snuffleupagus/issue-15795

Ensure that the various layers always get the correct initial size (issue 15795)",True
527258c31677ee024e093c1844714aecf4614c0f,2022-12-09 19:00:12,Jonas Jenwald,Ensure that the various layers always get the correct initial size (issue 15795),False
3155e2a63b2599e04ad563ea27cba8f482412bca,2022-12-09 18:49:09,Jonas Jenwald,"Merge pull request #15798 from Snuffleupagus/PresentationMode-spreadMode-hPadding

Fix page-switching for landscape documents with SpreadModes and PresentationMode (PR 14877 follow-up)",True
47ac706972d1c62853f8e3e1a7335eb0efcf4771,2022-12-09 18:39:56,Jonas Jenwald,"Fix page-switching for landscape documents with SpreadModes and PresentationMode (PR 14877 follow-up)

In PR 14877 I forgot to update the horizontal padding, used when computing the scale of the pages, for the case where SpreadModes and PresentationMode are being used together.

Steps to reproduce:
 1. Open the viewer with the default `tracemonkey.pdf` document.
 1. Enable any SpreadMode.
 2. Rotate the document *once*, either clockwise or counterclockwise.
 3. Enter PresentationMode.
 4. Try swithching page, e.g. by clicking on the document.

Expected result:
 The visible pages change as you click.

Actual result:
 The visible pages are ""stuck"" in the current view.",False
ba2fec98913589b7a6ae16ea62b213e9a432e456,2022-12-08 22:35:37,Jonas Jenwald,"Merge pull request #15788 from Snuffleupagus/web-small-fixes

A few small viewer-related fixes",True
baff5ad565a420f32a73c9b5f1b81c4e3ccc4c8f,2022-12-08 20:15:36,calixteman,"Merge pull request #15791 from calixteman/15789

[Editor] Take all the viewBox into account when computing the coordinates of an annotation in the page (fixes #15789)",True
d7d21f0d6e29ac292b8678aae7c1b60bc04f26a1,2022-12-08 20:10:04,Jonas Jenwald,"Change `AnnotationEditorLayerBuilder.render` to not access ""private"" API functionality

The `PDFPageProxy._pageIndex` property is a ""private"" one that shouldn't be accessed, since it could theoretically break tomorrow if we re-factor the relevant API code.

Also, try to clean-up and improve consistency in a couple of JSDoc comments.",False
6a5c1343f8b06780b5cbf5e8c792f305f66aac37,2022-12-08 20:03:57,Jonas Jenwald,"Stop trying to disable searching in PresentationMode

This change was made in PR 5552, however I cannot tell why we needed to disable searching in PresentationMode. Furthermore, with the changes in PR 13908 which effectively moved where this code is invoked, searching has now (accidentally) been working in PresentationMode in e.g. the Firefox PDF Viewer for well over a year.

So, let's just enable searching unconditionally in PresentationMode to simplify the code.",False
4f0bfabe7a095fc6e2fb2f3fed1103999511aa95,2022-12-08 19:32:20,Calixte Denizet,Take all the viewBox into account when computing the coordinates of an annotation in the page (fixes #15789),False
fe3df4dcb41f7a16390b8ee2f1a21b570b82fae0,2022-12-08 18:57:42,calixteman,"Merge pull request #15782 from calixteman/15780

[api-minor][Editor] Don't use the editor parent which can be null.",True
b93bf9f654c7a905c3eb33247e07dd7147f84a41,2022-12-08 18:36:06,Calixte Denizet,"[Editor] Don't use the editor parent which can be null.

An annotation editor layer can be destroyed when it's invisible, hence some
annotations can have a null parent but when printing/saving or when changing
font size, color, ... of all added annotations (when selected with ctrl+a) we
still need to have some parent properties especially the page dimensions, global
scale factor and global rotation angle.
This patch aims to remove all the references to the parent in the editor instances
except in some cases where an editor should obviously have one.
It fixes #15780.",False
c63906305055d27380ba2f94099a9fe9bb4c1017,2022-12-07 15:01:15,Jonas Jenwald,"Merge pull request #15776 from Snuffleupagus/rm-createDownloadManager-options

Remove the unused `DefaultExternalServices.createDownloadManager` options (PR 12191 follow-up)",True
0ca92bf2a865daab26a0e5c17ac51698588aea06,2022-12-07 15:00:47,Jonas Jenwald,"Merge pull request #15775 from Snuffleupagus/vars-all

Tighten the `vars`-argument for the ESLint `no-unused-vars` rule",True
feb6f5951c7cbcc9d2f42379b326e6cdb4cbc549,2022-12-06 23:41:33,calixteman,"Merge pull request #15786 from calixteman/15780_bis

[Editor] Add a very basic and incomplete workaround for issue #15780",True
9af89381cd0458e0c772b11a4658c86a98839031,2022-12-06 20:52:24,Calixte Denizet,"[Editor] Add a very basic and incomplete workaround for issue #15780

The main issue is due to the fact that an editor's parent can be null when
we want to serialize it and that lead to an exception which break all the
saving/printing process.
So this incomplete patch fixes only the saving/printing issue but not the
underlying problem (i.e. having a null parent) and doesn't bring that much
complexity, so it should help to uplift it the next Firefox release.",False
cdd39ec69e535e8fb485f66b8ce687d43f5d7cf4,2022-12-06 14:32:20,Jonas Jenwald,"Merge pull request #15778 from Snuffleupagus/keep-structTree

Don't re-create the `structTreeLayer` on zooming and rotation",True
96152f56e70d0c91e6d3c41cd9343515efa4465e,2022-12-06 14:28:07,Jonas Jenwald,"Merge pull request #15779 from Snuffleupagus/textContentSource

[api-minor] Combine the `textContent`/`textContentStream` parameters",True
0274245e90cbbefde1ed57aa13d199f5db3d7f5a,2022-12-05 16:19:14,Jonas Jenwald,"Remove the unused `TextLayerRenderTask._renderingDone` property (PR 15259 follow-up)

This is yet another property that I forgot to remove in PR 15259.",False
fe8fded23b569f7bb5d4819f03f3d84c826da6d8,2022-12-05 01:52:14,Jonas Jenwald,"[api-minor] Combine the `textContent`/`textContentStream` parameters

Rather than handling these parameters separately, which is a left-over from back when streaming of textContent was originally added, we can simply pass either data directly to the `TextLayer` and let it handle things accordingly.

Also, improves a few JSDoc comments and `typedef`-imports.",False
b659bacc43726de233fe1c28fd17d57bd726d788,2022-12-04 20:45:50,Jonas Jenwald,"Tighten the `vars`-argument for the ESLint `no-unused-vars` rule

Please see https://eslint.org/docs/latest/rules/no-unused-vars#vars",False
da0e6bc590b0acf41a855fe6d6f289921c396f9f,2022-12-04 14:48:58,Jonas Jenwald,"Don't re-create the `structTreeLayer` on zooming and rotation

Compared to the recent PR 15722 for the `textLayer` this one should be a (comparatively) much a smaller win overall, since most documents don't have any structTree-data and the required parsing should be cheaper. However, it seems to me that it cannot hurt to improve this nonetheless.

Note that by moving the `structTreeLayer` initialization we remove the need for the ""textlayerrendered"" event listener, which thus simplifies the code a little bit.

Also, removes the API-caching of the structTree-data since this was basically done to offset the lack of caching in the viewer.",False
cd72818438c8ee22ff1f08b2cb19f3e46dcbb53f,2022-12-04 03:28:37,Jonas Jenwald,"Remove unused `StructTreeLayerBuilder` constructor parameter

Also change the ""private"" methods into properly private ones.",False
9369adb4bd4dc07711fd0172420c549e25dd1d11,2022-12-03 17:22:36,Jonas Jenwald,Remove the unused `DefaultExternalServices.createDownloadManager` options (PR 12191 follow-up),False
67e1c37e0fea06951ece8c457c2b39d2ee2a683f,2022-12-03 00:22:44,Tim van der Meij,"Merge pull request #15773 from Snuffleupagus/view-worker-normalize

[api-minor] Normalize the `view`-getter on the worker-thread",True
99cfef882f30c19d5a55db66fd1edc8268ba78b1,2022-12-03 00:18:16,Tim van der Meij,"Merge pull request #15752 from Snuffleupagus/no-typeof-undefined

Enable the `no-typeof-undefined` ESLint plugin rule",True
5f8598abb78dcd7bcabbc608b7db01c4cf0ec0a1,2022-12-02 20:16:39,Jonas Jenwald,"[api-minor] Normalize the `view`-getter on the worker-thread

*Please note:* I don't really expect that this is will be an observable change, since virtually all PDF documents already order e.g. /MediaBox and /CropBox entries correctly.

By normalizing boundingBoxes already on the worker-thread, we can be sure that even a corrupt document won't cause issues.
Note how we're passing the `view`-getter to the `PartialEvaluator.getTextContent` method, in order to detect textContent which is outside of the page, hence it makes sense to ensure that it's formatted as expected.
Furthermore, by normalizing this once on the worker-tread we should no longer have to worry about a possibly negative width/height in the `PageViewport` constructor.

Finally, the patch also simplifies the `view`-getter a little bit.",False
e3c2af14b31222104ebfcc2efc37b81a90fcf8d8,2022-12-02 14:32:08,calixteman,"Merge pull request #15772 from calixteman/chmod

Remove execution permission on cursor-editorFreeText.svg",True
2c4bb5d91d5fabe62e864c91f407af324df30c1a,2022-12-02 14:25:19,Jonas Jenwald,"Merge pull request #15771 from mozilla/dependabot/npm_and_yarn/decode-uri-component-0.2.2

Bump decode-uri-component from 0.2.0 to 0.2.2",True
973478e704263583051c0a98b1b562f54605fee8,2022-12-02 14:22:03,Calixte Denizet,Remove execution permission on cursor-editorFreeText.svg,False
b7083d7a0ed505512a23f9fc425228a6202019f6,2022-12-02 10:18:04,dependabot[bot],"Bump decode-uri-component from 0.2.0 to 0.2.2

Bumps [decode-uri-component](https://github.com/SamVerschueren/decode-uri-component) from 0.2.0 to 0.2.2.
- [Release notes](https://github.com/SamVerschueren/decode-uri-component/releases)
- [Commits](https://github.com/SamVerschueren/decode-uri-component/compare/v0.2.0...v0.2.2)

---
updated-dependencies:
- dependency-name: decode-uri-component
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>",False
6e4968225e3e4901ef08e47d2787c8d0afb72df7,2022-12-01 23:26:02,calixteman,"Merge pull request #15722 from calixteman/refactor_textlayer

[api-minor] Refactor the text layer code in order to avoid to recompute it on each draw",True
eed9bf71c5ee16268986a743a992c61bdbcc89da,2022-12-01 23:12:43,Calixte Denizet,"Refactor the text layer code in order to avoid to recompute it on each draw

The idea is just to resuse what we got on the first draw.
Now, we only update the scaleX of the different spans and the other values
are dependant of --scale-factor.
Move some properties in the CSS in order to avoid any updates in JS.",False
47dbfc4ade2893d5cb6d3c35cfcab3e93f996511,2022-12-01 22:50:39,Jonas Jenwald,"Enable the `no-typeof-undefined` ESLint plugin rule

Please see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-typeof-undefined.md",False
4793a0717fd3f7d4cf09f7dd39b87e51ba15cb75,2022-12-01 21:36:53,Jonas Jenwald,"Merge pull request #15768 from Snuffleupagus/issue-15767

Prevent the `debugger` from breaking on unbalanced save/restore OPS (issue 15767)",True
0cf4e6620d2ef7cfcd6481d19686d7846fc16464,2022-12-01 20:13:17,Jonas Jenwald,Prevent the `debugger` from breaking on unbalanced save/restore OPS (issue 15767),False
fa54a587906100eb8198de2e95d6b1e0bfa88846,2022-11-30 01:51:45,Jonas Jenwald,"Merge pull request #15765 from Snuffleupagus/rm-textLayer-timeout

[api-minor] Remove the TextLayer `timeout` parameter (PR 15742 follow-up)",True
f3206b351f2d4300b8fcb8182f0f15f492db6f11,2022-11-30 00:34:12,calixteman,"Merge pull request #15764 from calixteman/15753

[Annotation] Send correctly the updated values to the JS sandbox",True
7c25b1b455e262baa79b38c6563117d91d646aa3,2022-11-30 00:27:38,Jonas Jenwald,"[api-minor] Remove the TextLayer `timeout` parameter (PR 15742 follow-up)

The deprecation is included in the current release, i.e. version `3.1.81`, and given the edge-case nature of this option I really don't think that we need to keep it deprecated for multiple releases.",False
20fd9099f8319a9272ac57342317172048e95c72,2022-11-29 22:04:06,Calixte Denizet,[Annotation] Send correctly the updated values to the JS sandbox,False
1f082d3e1de0beb514087f6d241eda9ca9646e4a,2022-11-29 22:02:52,Jonas Jenwald,"Merge pull request #15761 from Snuffleupagus/platform

Stop duplicating the `platform` getter in multiple files",True
a3ac8a643875da27e85a6924624d8e19c4b2e970,2022-11-29 21:07:36,calixteman,"Merge pull request #15718 from calixteman/test_text_cursor

[Editor] Change the text annotation cursor for the high dpi screens.",True
8689905a197ab3c338c1cc4cffb34c490df0b5cb,2022-11-29 20:18:55,Calixte Denizet,[Editor] Change the text annotation cursor for the high dpi screens.,False
ff9d21ff0e7ea1ebc5cdfdb5d687055155e19e3e,2022-11-29 19:46:33,Jonas Jenwald,"Merge pull request #15762 from Snuffleupagus/bug-1803050

Ignore PDF documents opened from ""data:""-URLs when handling internal links (bug 1803050)",True
0d648f531bad45af13df443efeba5a9e8f8e2e7c,2022-11-29 18:38:01,Jonas Jenwald,"Ignore PDF documents opened from ""data:""-URLs when handling internal links (bug 1803050)

This patch has been successfully tested in a local, artifact, Firefox build.

*Please note:* The only thing that'll no longer work for PDF documents opened using ""data:""-URLs is middle-clicking on internal/outline links, in order to open the destination in a new tab. This is however an extremely small loss of functionality, and as can be seen in the bug the alternative (i.e. doing nothing) is surely much worse.",False
82d127883d0e9369e8227cb34ad2a859df6130ee,2022-11-29 16:44:40,Jonas Jenwald,"Stop duplicating the `platform` getter in multiple files

Currently both of the `AnnotationElement` and `KeyboardManager` classes contain *identical* `platform` getters, which seems like unnecessary duplication.
With the pre-processor we can also limit the feature-testing to only GENERIC builds, since `navigator` should always be available in browsers.",False
5d79cc5bee9c39f7df75f96e989ea4dec16022b7,2022-11-29 15:35:56,calixteman,"Merge pull request #15760 from calixteman/15759

Don't add an extra space after a Katakana or a Hiragana at the eol when searching",True
ea1995991ba7d268f95a8d02a42e678db714621f,2022-11-29 15:16:48,Calixte Denizet,Don't add an extra space after a Katakana or a Hiragana at the eol when searching,False
44bc3154446c4417a939bba1dfc4ab96ef238afa,2022-11-29 02:24:00,calixteman,"Merge pull request #15758 from calixteman/cleanup_telemetry

[api-minor] Remove all the useless telemetry stuff in the viewer (bug 1802468)",True
b9cb651c44f0012ac90b8c24e5b38acc840a8a29,2022-11-29 01:25:15,Calixte Denizet,"[api-minor] Remove all the useless telemetry stuff in the viewer (bug 1802468)

Add a deprecation notification for PDFDocumentLoadingTask.onUnsupportedFeature and PDFDocumentProxy.stats
which are likely useless.
The unsupported feature stuff have initially been added in (#4048) in order to be able to display a
warning bar and to help to have some numbers to know how a feature was used.
Those data are no more used in Firefox.",False
f96b99c30cd3a37edfd7f5f58f4e3049539ae1df,2022-11-28 22:01:35,calixteman,"Merge pull request #15757 from calixteman/bug1802888

[JS] By default, a text field value must be treated as a number (bug 1802888)",True
ae7da6ae480f97e8a7b14fdadd9deeef0ce8790f,2022-11-28 20:54:01,Calixte Denizet,"[JS] By default, a text field value must be treated as a number (bug 1802888)",False
33f9d1aab2013fa4f29f6fd5794da9680f74d0f6,2022-11-28 20:09:36,calixteman,"Merge pull request #15755 from calixteman/rounding_printf

[JS] Fix a rounding issue in printf (bug 1802888)",True
4ee0c83548e9cf2fd86a5636fd52cacffc950512,2022-11-28 19:07:15,Calixte Denizet,[JS] Fix a rounding issue in printf (bug 1802888),False
8bac57172ac07bcd4bc4a44612b1e2d8b4ee0232,2022-11-27 18:18:54,Tim van der Meij,"Merge pull request #15751 from Snuffleupagus/modernize-isSyncFontLoadingSupported

Slightly modernize the `FontLoader.isSyncFontLoadingSupported` getter",True
f458b52bc7128b939a297a945dd52ec44007dd77,2022-11-27 17:05:50,Jonas Jenwald,"Merge pull request #15750 from Snuffleupagus/update-packages

Update packages and translations",True
85f03c0ea447b1c4a4564d086f96c1efea0963fd,2022-11-27 16:49:11,Jonas Jenwald,"Slightly modernize the `FontLoader.isSyncFontLoadingSupported` getter

This is very old code, which is unused (by default) in browsers nowadays since the Font Loading API will always be preferred.
For Node.js environments we use the same constant as elsewhere throughout the code-base, and we can also simplify the Firefox-specific check given that the lowest supported version is `102` (as of this writing).

Finally the old TODO is removed, since the general availability of the Font Loading API has made it redundant.",False
6aa8c3bd3ffd008f45a64c538ef0ca839caf2758,2022-11-27 14:52:14,Jonas Jenwald,Update l10n files,False
69a2e6d3ea93fa2a4a5f9973f83f40ac416c353b,2022-11-27 14:48:30,Jonas Jenwald,Update npm packages,False
73760144e0ab4dd681b405b19b7406120d1986c2,2022-11-26 22:29:52,Jonas Jenwald,"Merge pull request #15747 from Snuffleupagus/FileAttachment-icons

Add default icons for FileAttachment annotations (bug 1230933)",True
ba9174406c9868b7c3d1067c7899c7c19e2b6732,2022-11-26 19:31:12,Tim van der Meij,"Merge pull request #15749 from timvandermeij/bump

Bump versions in `pdfjs.config`",True
67f1a5b59a166dce17ca080fe9e80b3fdcafc5d4,2022-11-26 19:22:56,Tim van der Meij,Bump versions in `pdfjs.config`,False
0766898d5d0b108b14e88bdb4de5cffdee48bb6c,2022-11-26 17:35:54,Tim van der Meij,"Merge pull request #15720 from Snuffleupagus/issue-15695

Ensure that the initial document position is always correct with non-default Scroll/Spread modes (issue 15695)",True
aa5b678f94cb130061c9e19b37d05acfcf8f52b4,2022-11-26 15:54:59,Jonas Jenwald,"Add default icons for FileAttachment annotations (bug 1230933)

*Please note:* This ""borrows"" the icons from Thunderbird.

According to the PDF specification, see https://web.archive.org/web/20220309040754if_/https://www.adobe.com/content/dam/acom/en/devnet/pdf/pdfs/PDF32000_2008.pdf#G11.2096626, we should be providing default icons for FileAttachment annotations without appearances.",False
37c2408199974a71f1e7d52bb04ecf3f2ff1fd65,2022-11-26 14:36:29,Jonas Jenwald,"Ensure that the initial document position is always correct with non-default Scroll/Spread modes (issue 15695)

Please refer to the inline comment for additional details. The patch also improves internal consistency when `#scrollIntoView` is called directly.",False
4f1b6f345bc83fd1aca6eef3a3338a480e01251b,2022-11-25 17:08:52,Jonas Jenwald,"Merge pull request #15715 from Snuffleupagus/getQuadPoints-refactor

Re-factor and simplify the `getQuadPoints` helper function",True
4b02610e8c58d6c3c1f313f2a7c8f1f25bac1f1e,2022-11-25 15:10:16,Jonas Jenwald,"Re-factor and simplify the `getQuadPoints` helper function

The use of `Array.prototype.reduce()` is, in my opinion, hurting overall readability since it's not particularly easy to look at the relevant code and immediately understand what's going on here. Furthermore this code leads to strictly speaking unnecessary allocations and parsing, since we could just track the min/max values directly in the relevant loop instead.",False
67741aeaa94956a8f75e756cafc7fcc51d520316,2022-11-25 13:14:02,Jonas Jenwald,"Merge pull request #15742 from Snuffleupagus/deprecate-textLayer-timeout

[api-minor] Deprecate the TextLayer `timeout` parameter",True
b3e161c328bf1bce24300e8f23d20c754292e284,2022-11-25 03:38:39,Jonas Jenwald,"[api-minor] Deprecate the TextLayer `timeout` parameter

This has never really been used anywhere within the PDF.js library[1], and when streaming of textContent was introduced this parameter was effectively made redundant.
Note that when streaming of textContent is used, all text-layout has already happened by the time that this `timeout`-functionality is actually invoked (thus making it pointless).
While the `timeout`-functionality may still ""work"" when the textContent is provided upfront, although it's never been used/tested, streaming will generally perform better (in e.g. a viewer setting).

*Please note:* While unrelated here, also removes a now unused property that I forgot in PR 15259.

---
[1] At least not since the code was moved into its current file, which happened in PR 6619 and landed seven years ago.",False
8fda3f04fe290a6ed7af0f684cdef7adea8cfcbe,2022-11-24 23:39:12,Jonas Jenwald,"Merge pull request #15732 from Snuffleupagus/issue-15719

Add a fallback for non-embedded *composite* Tahoma fonts (issue 15719)",True
823723121de9e8448ecb61ed04a93e1eb4bd9799,2022-11-24 17:14:19,Jonas Jenwald,"Merge pull request #15740 from mozilla/revert-15721-issue-15714

Revert ""Remove the overflowing text special-case from `scrollIntoView` (issue 15714)""",True
9f5e1f48182c8d61e3017ead0766218b2084b536,2022-11-24 17:07:07,Jonas Jenwald,"Revert ""Remove the overflowing text special-case from `scrollIntoView` (issue 15714)""",False
5960e20cde52cb925fc72fbc2d10f51cba02bc8e,2022-11-23 20:24:41,Jonas Jenwald,"Merge pull request #15731 from Snuffleupagus/issue-15716

Add support for Optional Content in TilingPatterns (issue 15716)",True
d1c01b31648b1e2679a7ad98623b7d25ffb08e09,2022-11-23 20:21:18,Jonas Jenwald,Add a fallback for non-embedded *composite* Tahoma fonts (issue 15719),False
47682985d34c0edc79a8a4a37597e9a0ed51530c,2022-11-23 17:28:00,Jonas Jenwald,"Add support for Optional Content in TilingPatterns (issue 15716)

This can't be a particularly common feature, since we've supported Optional Content for over two years and this is the very first TilingPattern-case we've seen.",False
73c268dc1c9fae87a24b05ba67feb9ff000e873d,2022-11-23 17:22:11,Jonas Jenwald,"Merge pull request #15730 from Snuffleupagus/issue-15729

Support FileAttachments with hash-signs in the filename (issue 15729)",True
8cd2adf8a1a9af788b23a997b264a020a0aa343b,2022-11-23 16:39:12,calixteman,"Merge pull request #15727 from calixteman/bug1801341

Unblock the load event when the pdf has a password (bug 1801341)",True
f3e0f866412ac7c4d04afef9cadd9b6433e32602,2022-11-23 16:18:08,Jonas Jenwald,Simplify the `getFilenameFromUrl` helper function,False
38dd219d858da8056caeb8506479aa3836d55a35,2022-11-23 15:47:58,Calixte Denizet,Unblock the load event when the pdf has a password (bug 1801341),False
0ba242ea4a674aeb5ef0e15248931824fba5da38,2022-11-23 15:17:33,Jonas Jenwald,"Support FileAttachments with hash-signs in the filename (issue 15729)

The reason for the issue is that we use the generic `getFilenameFromUrl` helper function, which was originally intended for regular URLs.
For the filenames we're dealing with in FileAttachments, we really only want to strip the path when one exists[1].

---
[1] See [bug 1230933](https://bugzilla.mozilla.org/show_bug.cgi?id=1230933) for an example of such a case.",False
a0db81723bfcba59d6ba961ff95919660587eb6f,2022-11-22 19:21:02,Jonas Jenwald,"Merge pull request #15721 from Snuffleupagus/issue-15714

Remove the overflowing text special-case from `scrollIntoView` (issue 15714)",True
0ff43b27bb514471116fc8c2d395592b75fa48bb,2022-11-22 16:24:30,Jonas Jenwald,"Remove the overflowing text special-case from `scrollIntoView` (issue 15714)

With the changes made in PR 14564 this *should* no longer be necessary now, however we still need to keep the `scrollMatches` parameter to handle textLayers with markedContent correctly when searching.",False
748be3f70215817ef5e4eeeec412556fef31908c,2022-11-20 21:42:41,Jonas Jenwald,"Merge pull request #15713 from Snuffleupagus/annotation-no-appearance-cleanup

Reduce duplication when creating a fallback appearance for `MarkupAnnotation`s",True
2ff9799e7a16569afbb7e656836f6cba9d472389,2022-11-20 16:59:59,Jonas Jenwald,"Tweak assignment of common parameters in the `Annotation` classes

This is slightly more compact, and also unifies the format across the various classes.",False
c92de947b638eeb46f301ca89c2fb0484683d74e,2022-11-20 16:35:25,Jonas Jenwald,"Reduce duplication when creating a fallback appearance for `MarkupAnnotation`s

Currently we repeat the same color-conversion code verbatim in lots of classes, which seems completely unnecessary.",False
ae7c97aef81aa2934fbbbdc4a5511e0b274e086a,2022-11-19 15:55:15,Tim van der Meij,"Merge pull request #15710 from Snuffleupagus/issue-10791

Add localization support for the `annotationLayer` reference tests (issue 10791)",True
d6908ee145a042cee65d1182cde4962afb4b7dc7,2022-11-19 15:50:07,Tim van der Meij,"Merge pull request #15701 from Snuffleupagus/move-string-helpers

Move some string helper functions to the worker-thread",True
3d49459d642e8dfbd11f1acab9a55118bee119f9,2022-11-19 15:44:24,Tim van der Meij,"Merge pull request #15706 from Snuffleupagus/worker-rm-fn-names

Remove unnecessary function names in the `src/core/worker.js` file",True
2ff904fb2bd5d2787375845d21791cf6a4c6c06f,2022-11-19 03:38:11,Jonas Jenwald,Add localization support for the `annotationLayer` reference tests (issue 10791),False
70d362f22ca8096b7303dfa09a9a294321804f31,2022-11-17 20:01:41,Jonas Jenwald,"Remove an unnecessary variable in `getPdfManager`, in the `src/core/worker.js` file

Another tiny piece of clean-up, since adding a `catch`-handler to a Promise shouldn't require an intermediate variable.",False
a2a200175fa175829f0149a7a615c9f8d5e01735,2022-11-17 19:42:48,Jonas Jenwald,"Remove unnecessary function names in the `src/core/worker.js` file

Currently *some* functions in this file have names while others don't, and in a few cases the names are no longer entirely accurate.
For the relevant functions there should really be no need to name them, and if memory serves this was originally done since browsers (many years ago) didn't always handle anonymous functions correctly in stack traces.",False
7d029f8bfe803b1c628f0a79e61f1a3651bda880,2022-11-16 17:09:35,Jonas Jenwald,Add a basic `stringToUTF16HexString` unit-test,False
9adc7859c82b3a7a87b7971d82315fcd7795ac4c,2022-11-16 17:05:48,Jonas Jenwald,"Move the `escapeString` helper function into the worker-thread

Given that this helper function is only used on the worker-thread, there's no reason to duplicate it in both of the `pdf.js` and `pdf.worker.js` files.",False
e5859e145def0fc01a0759e7ded9bdfd54ddeaf7,2022-11-16 17:05:48,Jonas Jenwald,"Move the `isAscii` helper function into the worker-thread

Given that this helper function is only used on the worker-thread, there's no reason to duplicate it in both of the `pdf.js` and `pdf.worker.js` files.",False
2eaa708e3a6b0a07ee79e1312beaa436d9757343,2022-11-16 17:05:44,Jonas Jenwald,"Combine the `stringToUTF16String` and `stringToUTF16BEString` helper functions

Given that these functions are virtually identical, with the latter only adding a BOM, we can combine the two. Furthermore, since both functions were only used on the worker-thread, there's no reason to duplicate this functionality in both of the `pdf.js` and `pdf.worker.js` files.",False
c7d6ab2f7123c5a65155c55aa19d9d9abd8c2ff2,2022-11-15 21:48:03,Jonas Jenwald,"Merge pull request #15699 from Snuffleupagus/isOffscreenCanvasSupported-Annotation

Move the `_isOffscreenCanvasSupported` property to the base `Annotation` class",True
f358e76f5b169c339dc4ba33f9e21f2c5f6b98af,2022-11-15 21:00:53,Jonas Jenwald,"Move the `_isOffscreenCanvasSupported` property to the base `Annotation` class

Having just played around with adding FreeText-annotations and then trying to print, there were `FreeTextAnnotation: OffscreenCanvas is not supported, annotation may not render correctly.` messages printed in the console.
The reason for this is that `FreeTextAnnotation` inherits from `MarkupAnnotation`, however only `WidgetAnnotation` actually defines the `_isOffscreenCanvasSupported` property.",False
e089d0799451c7a91ac06e0e0c975d1877eff31f,2022-11-15 18:31:14,Jonas Jenwald,"Merge pull request #15698 from Snuffleupagus/DIACRITICS_EXCEPTION_STR-lazy

Initialize the find-related `DIACRITICS_EXCEPTION_STR` constant lazily",True
176e8f0ddcabdd6684cb31d1635bc31d7601a53a,2022-11-15 17:16:16,Jonas Jenwald,"Initialize the find-related `DIACRITICS_EXCEPTION_STR` constant lazily

Adding some logging with `console.{time, timeEnd}` around all the constant definitions at the top of the `web/pdf_find_controller.js` file, I noticed that computing `DIACRITICS_EXCEPTION_STR` took close to half the total time.
My first idea was just to try and make it slightly more efficient, by reducing the amount of iterations and intermediate allocations. However, with this constant only being used during ""match diacritics"" searches it thus seemed like a good candidate for lazy initialization.

*Please note:* Given that this is a micro optimization, I fully understand if the patch is rejected.",False
859335a1aea7516fd55b6c95c5a34549cd6addf0,2022-11-15 02:06:29,calixteman,"Merge pull request #15694 from calixteman/15690

Normalize fullwidth, halfwidth and circled chars when searching",True
2be64d63e1ce7dd13c76de967db3960578a43234,2022-11-14 23:57:51,Calixte Denizet,"Normalize fullwidth, halfwidth and circled chars when searching",False
3078e2c1d9c3d1e6bf79709f2680dfca6b35cc9d,2022-11-14 20:26:27,Jonas Jenwald,"Merge pull request #15692 from mozilla/dependabot/npm_and_yarn/minimatch-3.1.2

Bump minimatch from 3.0.4 to 3.1.2",True
6d7250bfca11656c751171a516278d9daa1049d9,2022-11-14 19:49:56,Jonas Jenwald,"Merge pull request #15693 from Snuffleupagus/dependabot-labels

Stop Dependabot from creating its own, otherwise unused, labels",True
26883c0d7eef8724b3610b35fc7cf73d3e62ad05,2022-11-14 19:37:55,Jonas Jenwald,"Stop Dependabot from creating its own, otherwise unused, labels

Currently all Dependabot update PRs get tagged with a ""javascript"" label, which is annoying since we don't actually use that one.
To try and avoid this we specify the labels explicitly, please see https://docs.github.com/en/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file#labels",False
497b32a0a3d77e6273cf45e2e5975b82fe20bc2a,2022-11-14 19:24:34,dependabot[bot],"Bump minimatch from 3.0.4 to 3.1.2

Bumps [minimatch](https://github.com/isaacs/minimatch) from 3.0.4 to 3.1.2.
- [Release notes](https://github.com/isaacs/minimatch/releases)
- [Commits](https://github.com/isaacs/minimatch/compare/v3.0.4...v3.1.2)

---
updated-dependencies:
- dependency-name: minimatch
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>",False
82795a3b8175155f3b5d97a788abc0c986bbbce5,2022-11-14 19:19:06,Jonas Jenwald,"Merge pull request #15688 from Snuffleupagus/bug-1799927-mask

Take the mask-offset into account when rendering repeated image masks (bug 1799927)",True
8f676e88fbf8755a6852f4027440ee38f9882616,2022-11-14 19:18:26,Jonas Jenwald,"Merge pull request #15689 from Snuffleupagus/update-packages

Update packages and translations",True
b85ce7f7619fe6b2fad88c1844ad19351f64e468,2022-11-14 02:02:12,Jonas Jenwald,Update l10n files,False
fbcc20adb7087c96b043a08c754eb8e3088c13a5,2022-11-14 01:58:21,Jonas Jenwald,Update npm packages,False
3e4caf2e13be802797f3a6a180f16102914d5060,2022-11-13 20:45:30,Jonas Jenwald,"Take the mask-offset into account when rendering repeated image masks (bug 1799927)

*Please note:* As usual when I'm working with the `src/display/canvas.js` code I don't really know what I'm doing, but it at least *appears* to work.",False
bfe6ff5893b7815a36f2b32ce60c9eba206cfd24,2022-11-13 17:50:03,Tim van der Meij,"Merge pull request #15686 from Snuffleupagus/findDefaultInlineStreamEnd-assert

Change the `assert` in `Parser.findDefaultInlineStreamEnd` to a non-PRODUCTION one",True
a1d48e3651e39530fa4695a5293a9aa08091eb27,2022-11-12 21:01:01,Jonas Jenwald,"Add a *linked* test-case for issue 2618

Given that this PDF document is an interesting test-case for performance reasons, w.r.t. inline image caching, it probably can't hurt to add it to the test-suite to make it more readily available.
Considering the contents of that PDF document I'm not sure if we can include it directly in the repository, hence why a *linked* test-case was choosen here.",False
d22eb3591e3fb34e74a67a06d11e8532ba081150,2022-11-12 21:00:58,Jonas Jenwald,"Change the `assert` in `Parser.findDefaultInlineStreamEnd` to a non-PRODUCTION one

Given that this `assert` is only intended to catch any implementation bugs in our code, and not actually to validate the PDF data directly[1], we can avoid making this function call unconditionally.

---
[1] In those cases, for example a `FormatError` should have been thrown instead.",False
2d1b1e79685bc9c432395c612b6562dc76898486,2022-11-11 18:07:49,Jonas Jenwald,"Merge pull request #15682 from Snuffleupagus/constructor-cleanup

Some small `AnnotationStorage` and `StatTimer` clean-up",True
bab1097db31e1d9a2b3588d2db8dcb079e4ba061,2022-11-11 17:01:04,Jonas Jenwald,"Remove the constructor in the `StatTimer` class

With modern EcmaScript features, we can define these fields directly instead. Please note that for backwards compatibility purposes they are still public as before, however note that this functionality is *disabled* by default (see the `pdfBug` API option).
Also, we can (slightly) simplify the two loops used in the `toString` method.",False
d6cd48e12a4a7f553d971fd622f2e3c01e59bd70,2022-11-11 17:00:02,Jonas Jenwald,"Use actually private fields in the `AnnotationStorage` class

These fields were never intended to be public, since modifying them manually would lead to inconsistent state, and with modern EcmaScript features we can now enforce this.
Also, this patch removes a couple of JSDoc comments that we generally don't use.",False
595711bd7c642e6f00b31216627961499a42aaad,2022-11-11 03:24:48,Jonas Jenwald,"Merge pull request #15679 from Snuffleupagus/bug-1799927-2

Use the *full* inline image as the cacheKey in `Parser.makeInlineImage` (bug 1799927)",True
592d92424e11e685a527979327f92ae078e7785e,2022-11-11 01:27:34,calixteman,"Merge pull request #15587 from calixteman/save_unicode

[Annotation] Fix printing/saving for annotations containing some non-ascii chars and with no fonts to handle them (bug 1666824)",True
3ca03603c29b32102961894a9ef29c81d8ad7e5a,2022-11-10 23:35:39,Calixte Denizet,"[Annotation] Fix printing/saving for annotations containing some non-ascii chars and with no fonts to handle them (bug 1666824)

- For text fields
 * when printing, we generate a fake font which contains some widths computed thanks to
   an OffscreenCanvas and its method measureText.
   In order to avoid to have to layout the glyphs ourselves, we just render all of them
   in one call in the showText method in using the system sans-serif/monospace fonts.
 * when saving, we continue to create the appearance streams if the fonts contain the char
   but when a char is missing, we just set, in the AcroForm dict, the flag /NeedAppearances
   to true and remove the appearance stream. This way, we let the different readers handle
   the rendering of the strings.
- For FreeText annotations
  * when printing, we use the same trick as for text fields.
  * there is no need to save an appearance since Acrobat is able to infer one from the
    Content entry.",False
e8ec6af73e10a45a37b225e3d3dcdb07a2485731,2022-11-10 22:57:26,Jonas Jenwald,"Remove a couple of unnecessary temporary variables in `MurmurHash3_64.hexdigest`

These variables are left-over from the initial implementation, back when `String.prototype.padStart` didn't exist and we thus had to pad manually (using a loop).",False
7abb6429b0bd39b063e1f8d43cbdd79f42f618ba,2022-11-10 22:57:26,Jonas Jenwald,"Initialize the dictionary *lazily* when parsing inline images

This helps improve performance for some PDF documents with a huge number of inline images, e.g. the PDF document from issue 2618.
Given that we no longer create `Stream`-instances unconditionally, we also don't need `Dict`-instances for cached inline images (since we only access the filter).",False
b46e0d61cf5b641cec247af441029aa7454a9703,2022-11-10 22:57:26,Jonas Jenwald,"Use the *full* inline image as the cacheKey in `Parser.makeInlineImage` (bug 1799927)

*Please note:* This only fixes the ""wrong letter"" part of bug 1799927.

It appears that the simple `computeAdler32` function, used when caching inline images, generates hash collisions for some (very short) TypedArrays. In this case that leads to some of the ""letters"", which are actually inline images, being rendered incorrectly.
Rather than switching to another hashing algorithm, e.g. the `MurmurHash3_64` class, we simply cache using a stringified version of the inline image data as the cacheKey to prevent any future collisions. While this will (naturally) lead to slightly higher peak memory usage, it'll however be limited to the current `Parser`-instance which means that it's not persistent.

One small benefit of these changes is that we can avoid creating lots of `Stream`-instances for already cached inline images.",False
f7449563ef8722df30c2988fe571236ab9eb89f9,2022-11-09 02:26:49,Jonas Jenwald,"Merge pull request #15659 from sxyuan/system-font-name-fix

[api-minor] Propagate the translated font name to TextContentItem for system fonts",True
36fb5c1e2bb453469145af130bc8c16040bd9661,2022-11-09 00:46:21,Samuel Yuan,"Propagate the translated font name to TextContentItems.

This allows font data for system fonts to be looked up in the
PDFObjects.",False
7e5008f0ff013cc2b8f2af10db7f007e7cafe0de,2022-11-05 19:56:57,Jonas Jenwald,"Merge pull request #15665 from Snuffleupagus/Glyph-category

[api-minor] Initialize the unicode-category *lazily* on the `Glyph`-instance",True
c8868a1c7a8e70ffc5844799f4e8273690699224,2022-11-05 14:42:17,Jonas Jenwald,"[api-minor] Initialize the unicode-category *lazily* on the `Glyph`-instance

The purpose of this patch is twofold:
 - Initialize the unicode-category data *lazily* during text-extraction, since this is completely unused during general parsing/rendering.
 - Stop exposing this data in the API, since it's unused on the main-thread and it seems like it was *accidentally* included.

Obviously these changes are API-observable, but hopefully no user is depending on this. Furthermore, it's trivial for a user to re-create this unicode-category data manually with a regular expression (from the exposed `unicode` property).",False
26f6f77db6644ffaeb20f059bd904acf059ad239,2022-11-05 13:48:35,Jonas Jenwald,"Merge pull request #15657 from Snuffleupagus/Glyph-normalizedUnicode

Cache the normalized unicode-value on the `Glyph`-instance",True
0b27d703fa936d215d2d7a0edc56222135a8891f,2022-11-04 20:21:53,Jonas Jenwald,"Merge pull request #15663 from Snuffleupagus/viewer-classes-private-fields

Use private fields in a few more viewer classes",True
e7a6e7393a710cf4603aafc55a8cadbe916f1eec,2022-11-04 19:59:45,Jonas Jenwald,"Use private fields in a few more viewer classes

These properties were always intended to be *private*, so let's use modern JS features to actually enforce that.",False
c33b8d76924e6a033a42c7db17b8853a750b9026,2022-11-04 03:06:53,Jonas Jenwald,"Cache the normalized unicode-value on the `Glyph`-instance

Currently, during text-extraction, we're repeatedly normalizing and (when necessary) reversing the unicode-values every time. This seems a little unnecessary, since the result won't change, hence this patch moves that into the `Glyph`-instance and makes it *lazily* initialized.

Taking the `tracemonkey.pdf` document as an example: When extracting the text-content there's a total of 69236 characters but only 595 unique `Glyph`-instances, which mean a 99.1 percent cache hit-rate. Generally speaking, the longer a PDF document is the more beneficial this should be.

*Please note:* The old code is fast enough that it unfortunately seems difficult to measure a (clear) performance improvement with this patch, so I completely understand if it's deemed an unnecessary change.",False
eda51d1dcc583120fae8953cb98bf41de6deddf9,2022-11-03 20:11:39,Jonas Jenwald,"Merge pull request #15613 from Snuffleupagus/issue-15590

[api-minor] Let `Catalog.getAllPageDicts` return an *empty*  dictionary when loading the first /Page fails (issue 15590)",True
23930a249e1a135d2cc00c489179aac293d2742a,2022-11-03 17:21:48,Jonas Jenwald,"[api-minor] Let `Catalog.getAllPageDicts` return an *empty* dictionary when loading the first /Page fails (issue 15590)

In order to support opening certain corrupt PDF documents, particularly hand-edited ones, this patch adds support for letting the `Catalog.getAllPageDicts` method fallback to returning an *empty* dictionary to replace (only) the first /Page of the document.
Given that the viewer cannot initialize/load without access to the first page, this will thus allow e.g. document-level scripting to run as expected. Note that by effectively replacing a corrupt or missing first /Page in this way[1], we'll now render nothing but a *blank* page for certain cases of broken/corrupt PDF documents which may look weird.

*Please note:* This functionality is controlled via the existing `stopAtErrors` option, that can be passed to `getDocument`, since it's easy to imagine use-cases where this sort of fallback behaviour isn't desirable.

---
[1] Currently we still require that a /Pages-dictionary is found though, however it *may* be possible to relax even that assumption if that becomes absolutely necessary in future corrupt documents.",False
2516ffa78e829c1cf80b564860e3b47862eb4e42,2022-11-03 17:16:30,Jonas Jenwald,"Fallback to finding the first ""obj"" occurrence, when the trailer-dictionary is incomplete (issue 15590)

Note that the ""trailer""-case is already a fallback, since normally we're able to use the ""xref""-operator even in corrupt documents. However, when a ""trailer""-operator is found we still expect ""startxref"" to exist and be usable in order to advance the stream position. When that's not the case, as happens in the referenced issue, we use a simple fallback to find the first ""obj"" occurrence instead.

This *partially* fixes issue 15590, since without this patch we fail to find any objects at all during `XRef.indexObjects`. However, note that the PDF document is still corrupt and won't render since there's no actual /Pages-dictionary and the /Root-entry simply points to the /OpenAction-dictionary instead.",False
2ae90f9615effec1e465a47a0fd5cb71744fcd1f,2022-11-02 14:19:04,Jonas Jenwald,"Merge pull request #15655 from tamuratak/move_canvas_to_optionaldeps

Move canvas to optionalDependencies",True
0bb478cb239b41a9f725e74d812e6fdf501e7072,2022-11-02 05:03:31,Takashi Tamura,"Move canvas to optionalDependencies, which enables npm to continue installing pdfjs-dist
even if the installation of canvas fails. Close #15652",False
6193537cd30f24579454a2adbf9f26fc7ef374c6,2022-10-31 15:44:23,Jonas Jenwald,"Merge pull request #15648 from Snuffleupagus/issue-12232

Prevent interaction with form elements in PresentationMode (issue 12232)",True
e42e1cde6180b285a029b947c80c0583eeabca9c,2022-10-31 14:28:27,calixteman,"Merge pull request #15615 from calixteman/bug1796741

[Form] Don't use field appearances when /NeedAppearances is set to true (bug 1796741)",True
bc4e5e39ff7639a52f3918750cbfdbf18241629c,2022-10-31 13:50:18,Jonas Jenwald,"Merge pull request #15649 from SpartanApple/patch-1

Changed link for ""Gulp's getting started guide""",True
8d147b993fa68a1c09355c8461552685821afa59,2022-10-31 04:00:42,Mitchell Gale,"Changed link for ""Gulp's getting started guide""

Gulp's getting started guide changed location to https://github.com/gulpjs/gulp/tree/master/docs/getting-started. Link updated in readme to reflect that.",False
547556b5b2940fb26c8d3faed131d1a2005abab2,2022-10-31 02:27:55,Jonas Jenwald,"Prevent keyboard interaction with form elements in PresentationMode (issue 12232)

This uses the relatively new `HTMLElement.inert` property, see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert for additional information. The only ""problem"" is that this isn't yet available in all Firefox channels, but until https://bugzilla.mozilla.org/show_bug.cgi?id=1764263 is fixed we're no worse off than before.",False
f0811a4a3c49e2b75c142576d739ff361f3756c2,2022-10-31 02:25:44,Jonas Jenwald,Prevent mouse interaction with form elements in PresentationMode (issue 12232),False
c059c137851893d034d42be800f0b746c4edcafc,2022-10-29 23:41:04,Tim van der Meij,"Merge pull request #15643 from timvandermeij/bump

Bump versions in `pdfjs.config`",True
ab136c5c39ad9bc28fca627f9906119be2d29415,2022-10-29 23:34:37,Tim van der Meij,Bump versions in `pdfjs.config`,False
d0823066cc01a2f3d45ac46d8a653a74830d69ea,2022-10-29 22:49:40,Tim van der Meij,"Merge pull request #15642 from mozilla/dependabot/npm_and_yarn/minimist-and-minimist-1.2.6

Bump minimist",True
131819a15c2c80f7b74b7706195199262c64a5e1,2022-10-29 22:44:12,dependabot[bot],"Bump minimist

Bumps [minimist](https://github.com/minimistjs/minimist) and [minimist](https://github.com/minimistjs/minimist). These dependencies needed to be updated together.

Updates `minimist` from 1.2.0 to 1.2.6
- [Release notes](https://github.com/minimistjs/minimist/releases)
- [Changelog](https://github.com/minimistjs/minimist/blob/main/CHANGELOG.md)
- [Commits](https://github.com/minimistjs/minimist/compare/v1.2.0...v1.2.6)

Updates `minimist` from 1.2.5 to 1.2.6
- [Release notes](https://github.com/minimistjs/minimist/releases)
- [Changelog](https://github.com/minimistjs/minimist/blob/main/CHANGELOG.md)
- [Commits](https://github.com/minimistjs/minimist/compare/v1.2.0...v1.2.6)

---
updated-dependencies:
- dependency-name: minimist
  dependency-type: indirect
- dependency-name: minimist
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>",False
b74fbdeda75e155a1df308708f944cb283d4ee8d,2022-10-29 22:42:29,Tim van der Meij,"Merge pull request #15640 from Snuffleupagus/update-packages

Update packages and translations",True
eeca44d16263fb544fada7225e2a3c3e73da6371,2022-10-29 22:39:35,Tim van der Meij,"Merge pull request #15641 from Snuffleupagus/rm-PdfManager-onLoadedStream

Remove the `PdfManager.onLoadedStream` method (PR 15616 follow-up)",True
caef47a0cf65d978d7734b6283ab7c94bf099e59,2022-10-29 18:12:17,Jonas Jenwald,"Remove the `PdfManager.onLoadedStream` method (PR 15616 follow-up)

After the clean-up in PR 15616, the `PdfManager.onLoadedStream` method now only has a single call-site.
Hence why this patch suggests that we remove this method and replace it with an *optional* parameter in `PdfManager.requestLoadedStream` instead. By making the new behaviour opt-in, we'll thus not change any existing call-site.",False
5b4640024010c3cec3b2e62b7f4a60640fd0f6ff,2022-10-29 15:54:10,Jonas Jenwald,"Merge pull request #15633 from calixteman/cursors

[Editor] Change the cursor icons",True
67778eac60d46d702aca8144aa9daa0a5a9a48b3,2022-10-29 15:35:09,Calixte Denizet,[Editor] Change the cursor icons,False
571a986496d43d3995677e98c93526c0a5cf976b,2022-10-29 15:04:45,Jonas Jenwald,Update l10n files,False
f6746854ac96fa10cf0eb6cff5e44b8a6aec9aaf,2022-10-29 15:04:43,Jonas Jenwald,Update npm packages,False
8b970109ea2831c378fb11f642b657e278b1ebdd,2022-10-29 13:07:07,Jonas Jenwald,"Merge pull request #15632 from Snuffleupagus/issue-15629-2

[api-minor] Move the handling of unbalanced markedContent to the worker-thread (PR 15630 follow-up)",True
8f80efa4ab600e43ed2704833bc30afcc4083b92,2022-10-29 00:34:42,calixteman,"Merge pull request #15618 from calixteman/15614

[JS] Some functions (print, alert,...) must be called only after a user activation",True
0de804a256dee2ba58be8b4ecf0dbcda9febcbf8,2022-10-28 22:22:07,Calixte Denizet,"[JS] Some functions (print, alert,...) must be called only after a user activation

- Some events, which require a user interaction, will allow those functions to be called.
But after few seconds, if there are no more user interaction, it won't be possible
anymore.
The idea is to give an opportunity to the user to leave the pdf.
- Disable print function when we're printing, the same with saving and disallow to save
on open events.",False
a7232339d81eab519eb48adce6b28aafbb0c0c32,2022-10-28 21:59:02,Jonas Jenwald,"Merge pull request #15637 from Snuffleupagus/Array-from-map

Combine `Array.from` and `Array.prototype.map` calls",True
ba05e47b3ecb9d09291f1cc226ce8852825bfdcc,2022-10-28 17:16:30,Jonas Jenwald,"Combine `Array.from` and `Array.prototype.map` calls

This isn't just a tiny bit more compact, but it also avoids an intermediate allocation; please see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from#description",False
1e7274e9c60c46b351591ec5b7b1b035ee2d402d,2022-10-27 14:44:54,Jonas Jenwald,[api-minor] Move the handling of unbalanced markedContent to the worker-thread (PR 15630 follow-up),False
27b251ac99ca3375c5264dc20305ea7156cb5812,2022-10-27 13:59:25,calixteman,"Merge pull request #15631 from calixteman/15627

[JS] Avoid to trigger a commit event on 'ENTER' when the textfield is multiline",True
87f53b9cc9897772c84bdedc194009d4fd48aecf,2022-10-26 22:59:13,Calixte Denizet,[JS] Avoid to trigger a commit event on 'ENTER' when the textfield is multiline,False
05e5927c41e244d7f8b53a9f04893998faa06558,2022-10-26 22:57:23,Jonas Jenwald,"Merge pull request #15630 from Snuffleupagus/issue-15629

Prevent textLayer errors in documents with unbalanced beginMarkedContent/endMarkedContent operators (issue 15629)",True
980acddbfa2847d28d08dc4cdb4ee1599cac0af7,2022-10-26 22:05:48,Jonas Jenwald,Prevent textLayer errors in documents with unbalanced beginMarkedContent/endMarkedContent operators (issue 15629),False
9f95a14e916191b327ebe34eba41b9992b0572ca,2022-10-26 15:40:51,Calixte Denizet,"[Form] Don't use field appearances when /NeedAppearances is set to true (bug 1796741)

When a form isn't changed, we used the appearances we had in the file, but when
/NeedAppearances is true, all the appearances have to be regenerated whatever they're.",False
9a33a0fba9e08bcf1fcd95d315de83fe7a6443d1,2022-10-26 15:01:07,calixteman,"Merge pull request #15623 from calixteman/editor_int_test

Fix editor tests on Windows",True
00279d6e64faef918b1875847ea175f699332981,2022-10-26 14:32:55,calixteman,"Merge pull request #15625 from calixteman/bug1797310

Fix font for the 'current view' entry in the secondary toolbar (bug 1797310)",True
099639837220ac6580d35bf5b9b73defaa0b8f18,2022-10-26 14:19:23,Calixte Denizet,Fix font for the 'current view' entry in the secondary toolbar (bug 1797310),False
2384fbcb89a1b369064c9ab4a7c1df79ac0f2580,2022-10-26 02:18:02,Calixte Denizet,"Fix editor tests on Windows

- In #15373, we implemented copy/paste actions in using the system
clipboard.
For any reasons, on Windows, the clipboard doesn't contain the expected
data when the tests are ran in parallel, hence the tests which are
using the clipboard need to be ran sequentially.
- Make sure that we can paste after having copied.",False
098ca670d0f290fbc3f70c66080708a5e4b67155,2022-10-25 15:09:01,Jonas Jenwald,"Merge pull request #15616 from Snuffleupagus/PdfManager-requestLoadedStream-return

Let the `PdfManager.requestLoadedStream` method return the stream",True
22225a1eaa8815fa6b6053844aab9a83131dd60c,2022-10-24 22:48:30,Jonas Jenwald,"Merge pull request #15617 from Snuffleupagus/bug-1662416

Update the l10n-strings for the download-buttons (bug 1662416)",True
03775917db6b611d47a4750eb24100b385947293,2022-10-24 21:59:44,Jonas Jenwald,"Update the l10n-strings for the download-buttons (bug 1662416)

According to https://bugzilla.mozilla.org/show_bug.cgi?id=1662416#c8",False
bcffbf74f3477e0acd594f04d5a2ee9eb2100289,2022-10-24 20:30:48,Jonas Jenwald,"Let the `PdfManager.requestLoadedStream` method return the stream

*This is very old code, and it could thus do with some simplification.*

Note how in the `src/core/worker.js` file we're combining both the `PdfManager.requestLoadedStream` and `PdfManager.onLoadedStream` methods in order to access the stream-data. This seems unnecessary, and it's simple enough to always let the `PdfManager.requestLoadedStream` method return the stream-data as well.",False
987062c302c01bab72645e28a1ffa3fd457e1eb6,2022-10-22 17:39:43,Jonas Jenwald,"Merge pull request #15581 from Snuffleupagus/rm-setTransform-catch

Revert ""Avoid all rendering breaking completely when CanvasPattern.setTransform() is unsupported"" (PR 13725 follow-up)",True
497edbd0ee0248155fb9d4e733253585887f0b58,2022-10-22 14:28:51,Jonas Jenwald,"Revert ""Avoid all rendering breaking completely when CanvasPattern.setTransform() is unsupported"" (PR 13725 follow-up)

PR 13725 was only intended as a temporary work-around, and it seems that we can now revert that.
 - Firefox 102 is the currently maintained ESR-branch, and the PDF.js project only supports the active one.
 - Node.js now works, thanks to the `node-canvas` package, and I've confirmed locally that following the STR in issue 13724 generates a correct image.",False
f5711fc385bc643a2f27343f160c04f11a3497be,2022-10-21 20:53:55,Jonas Jenwald,"Merge pull request #15606 from Snuffleupagus/issue-15604

Let `Lexer.getNumber` treat more invalid ""numbers"" as zero (issue 15604)",True
5e045b8688a99da031d18f0b81c293ed4a3e0eee,2022-10-21 16:16:40,calixteman,"Merge pull request #15608 from calixteman/new_icons

Update icons (last and final update)",True
80dfd5404fc5111ed3c1d0794d63b2ffc8a8618f,2022-10-21 16:01:34,Calixte Denizet,Update icons (last and final update),False
71bd8b4de9ec45d2f00ed8793582d84d20e24506,2022-10-21 02:06:15,Jonas Jenwald,"Let `Lexer.getNumber` treat more invalid ""numbers"" as zero (issue 15604)

In the referenced PDF document there are ""numbers"" which consist only of `-.`, and while that's obviously not valid Adobe Reader seems to handle it just fine.
Letting this method ignore more invalid ""numbers"" was suggested during the review of PR 14543, so let's simply relax our the validation here.",False
7dc16c237adbcded8edde5d7c71b287d57e16f6b,2022-10-20 18:43:25,Jonas Jenwald,"Merge pull request #15603 from Snuffleupagus/pr-15593-followup

Restore a weaker version of the /Pages dictionary /Count check for corrupt documents (PR 15593 follow-up)",True
e591378ff1c48b7b88a993647d082f21c9fd091b,2022-10-20 17:52:29,Jonas Jenwald,"Restore a weaker version of the /Pages dictionary /Count check for corrupt documents (PR 15593 follow-up)

It appears that PR 15593 broke `issue12402`, and we thus need to partially restore the /Count check.
 I completely missed this when looking at the test-results for PR 15593, both locally and on the bots, since the `Driver._getLastPageNumber` method would ""swallow"" an unavailable page number.",False
36967fcedb150786cdb0f7285800be9b42e98d8e,2022-10-20 14:05:00,Jonas Jenwald,"Merge pull request #15586 from Snuffleupagus/rm-matchesForCache

Remove the `Glyph.matchesForCache` method (PR 13494 follow-up)",True
f3949ba69d1e949ca576a54879618eaa70072a11,2022-10-20 03:31:24,Jonas Jenwald,"Merge pull request #15598 from calixteman/15597

[Annotation] Replace use of id by data-element-id to have the correct id",True
6db9cefaafc03395b939744adbf71b77e61422cb,2022-10-20 03:06:28,Calixte Denizet,[Annotation] Replace use of id by data-element-id to have the correct id,False
ba3a0e104a9ec9ffbf5be99d8dc9705e8230aa3e,2022-10-19 23:03:49,calixteman,"Merge pull request #15595 from calixteman/1793419

[Editor] Make FreeText annotations visible for screen readers when in editing mode (bug 1793419)",True
238570c0da2e4f6ccb4171ef3df34c3b091bb1ca,2022-10-19 22:05:10,Jonas Jenwald,"Merge pull request #15596 from Snuffleupagus/issue-15594

Extend `getSupplementalGlyphMapForCalibri` with some umlauts (issue 15594)",True
3c046c0a21bd4a7e5bf5a7b94c5bcce3314c9583,2022-10-19 21:19:40,Jonas Jenwald,Extend `getSupplementalGlyphMapForCalibri` with some umlauts (issue 15594),False
e00a040a805b97821157456c705a392fc4c75a52,2022-10-19 19:56:14,Jonas Jenwald,"Merge pull request #15593 from Snuffleupagus/issue-9105-other

Relax the /Pages dictionary /Count check for corrupt documents (issue 9105)",True
535c624e0d0d7a636c88d3c994bc54e677b25f32,2022-10-19 19:51:04,Calixte Denizet,"[Editor] Make FreeText annotations visible for screen readers when in editing mode (bug 1793419)

- When we're editing some annotations, keeping the role=""text-box"" make them visible
as editable and VoiceOver (Mac) is able to read the contents when they're focused;
- Add an attribute ""aria-activedescendant"" in order to make the content discoverable
by NVDA on Windows.",False
cc450b405d39fc967a613734aff9d98b1cf35c53,2022-10-19 16:03:11,calixteman,"Merge pull request #15592 from calixteman/1794403

[Annotation] Take the border into account when computing the font size (bug 1794403)",True
bc13a277ce6e49fd11776f3fa7f41dbee7f2c37a,2022-10-19 15:58:25,Jonas Jenwald,"Relax the /Pages dictionary /Count check for corrupt documents (issue 9105)

After PR 14311, and follow-up patches, we no longer require that the /Count entry (in the /Pages dictionary) is either present or even valid in order to parse/render a PDF document.
Hence it seems strange to keep this requirement for *corrupt* PDF documents, when trying to find a usable `trailer` in the `XRef.indexObjects` method.",False
69b01d4398df5dc2ba85288b7357bea1836a6e7d,2022-10-19 13:57:27,Calixte Denizet,[Annotation] Take the border into account when computing the font size (bug 1794403),False
fd35cda8bc3370e1bd412b4ee7d7c5900c31e78c,2022-10-19 13:25:09,Jonas Jenwald,"Re-factor the glyph-cache lookup in the `Font._charToGlyph` method

With the changes in the previous patch we can move the glyph-cache lookup to the top of the method and thus avoid a bunch of, in *almost* every case, completely unnecessary re-parsing for every `charCode`.",False
3e391aaed99a59cc82a33a311cb50b80df71fd53,2022-10-19 13:24:35,Jonas Jenwald,"Remove the `Glyph.matchesForCache` method (PR 13494 follow-up)

This method, and its class, was originally added in PR 4453 to reduce memory usage when parsing text. Then PR 13494 extended the `Glyph`-representation slightly to also include the `charCode`, which made the `matchesForCache` method *effectively* redundant since most properties on a `Glyph`-instance indirectly depends on that one. The only exception is potentially `isSpace` in multi-byte strings.

Also, something that I noticed when testing this code: The `matchesForCache` method never worked correctly for `Glyph`s containing `accent`-data, since Objects are passed by reference in JavaScript. For affected fonts, of which there's only a handful of examples in our test-suite, we'd fail to find an already existing `Glyph` because of this.",False
782d098baf4eb556d7f8a62a10174aa34253dcca,2022-10-19 13:14:18,Jonas Jenwald,"Merge pull request #15589 from Snuffleupagus/issue-15577

Fallback and try a *previous* generation if all else fails in `XRef.indexObjects` (issue 15577)",True
de99f99a01e996158c544768d70471b264071471,2022-10-18 23:54:01,Jonas Jenwald,"Fallback and try a *previous* generation if all else fails in `XRef.indexObjects` (issue 15577)

When we fail to find a usable PDF document `trailer` *and* there were errors during parsing, try and fallback to a *previous* generation as a last resort during fetching of uncompressed references.
*Please note:* This will not affect ""normal"" PDF documents, with valid /XRef data, and even most *corrupt* documents should be completely unaffected by these changes.",False
9355b72931274a4ef3ca52d1db9dc5faa001ef1f,2022-10-17 16:26:21,calixteman,"Merge pull request #15583 from calixteman/15582

[Editor] Commit the current editor before setting the new viewport",True
6fb694658e1e7a3cf027bf92cb67cdf76feede3b,2022-10-17 15:28:29,Calixte Denizet,[Editor] Commit the current editor before setting the new viewport,False
54c97d295fac65187ae31cc73eb9988c7bb43b6f,2022-10-16 16:55:40,Tim van der Meij,"Merge pull request #15580 from Snuffleupagus/update-packages

Update packages and translations",True
8bf56078c5ab4ca1c575343c038c51a1931265cf,2022-10-16 16:51:11,Tim van der Meij,"Merge pull request #15579 from Snuffleupagus/sidebar-notification-position

Tweak the vertical position of the sidebar notification icon",True
db215fe2891ee15e1a33804c6f6f65b45c214076,2022-10-16 13:09:00,Jonas Jenwald,Update l10n files,False
7bd484ebd374a7388c30a776d3f01ed725771510,2022-10-16 13:08:58,Jonas Jenwald,Update npm packages,False
0983ebb2571719eb4c9594cc990dc5ae0773905d,2022-10-16 01:49:24,Jonas Jenwald,"Tweak the vertical position of the sidebar notification icon

Given that the new sidebar icon is slightly shorter than the old one, it cannot hurt to ever so slightly tweak the vertical position of the notification icon.

(While the patch also changes the CSS rule used for the horizontal position, this is a no-op and was done to improve consistency between the two values.)",False
e0cf25d109e3c8720d91363a65b1e9ac3acb12ba,2022-10-16 00:29:24,calixteman,"Merge pull request #15578 from calixteman/15571

[Editor] Ink editors must have their dimensions in percents after having been resized",True
9e2bc8853f7151397fc9a985d0e9f7ea84f0de3a,2022-10-15 23:29:10,Calixte Denizet,[Editor] Ink editors must have their dimensions in percents after having been resized,False
06599f487fc2e939fec4a6fd9e4b543883c7eba7,2022-10-15 16:33:43,Tim van der Meij,"Merge pull request #15576 from Snuffleupagus/version

Re-factor the PDF version parsing in the worker-thread",True
2508792f292b376580550f0b98e00884d6f4c4fd,2022-10-15 16:01:27,Tim van der Meij,"Merge pull request #15572 from Snuffleupagus/simpleFontToUnicode-refactor

Slightly re-factor `PartialEvaluator._simpleFontToUnicode`",True
d4700102934db36be8e18aac32b5e3cc9c5608b4,2022-10-15 15:36:39,Jonas Jenwald,"Re-factor the PDF version parsing in the worker-thread

Part of this is very old code, and back when support for parsing the catalog-version was added things became less clear (in my opinion).
Hence this patch tries to improve things, by e.g. validating the header- and catalog-version separately.",False
951564d697c15341e3726d35be41acacf44a3448,2022-10-14 20:38:25,Jonas Jenwald,"Merge pull request #15575 from Snuffleupagus/startCleanup-destroyed

Don't trigger worker-thread cleanup when destruction has already started",True
a576ea216ffcaf080f6ebbaec4bce72776d45b4a,2022-10-14 20:13:49,Jonas Jenwald,"Don't trigger worker-thread cleanup when destruction has already started

Note how we're currently skipping all main-thread cleanup when document destruction has started, but for some reason we're still dispatching the ""Cleanup"" message.
This seems like a simple oversight, since destruction will already invoke the `BasePdfManager.cleanup` method (on the worker-thread) to fully clear-out all caches.",False
9f5fd075e7a95b80ff4f91111280e2c8e79cd39d,2022-10-14 18:42:52,Jonas Jenwald,"Merge pull request #15574 from calixteman/bug1795263

Use all the current transform as key when caching some image for masks used with pattern fill (bug 1795263, #15573)",True
556513a6e7aa6b70c896cbd4c2a4a3880ed95f97,2022-10-14 18:07:58,Calixte Denizet,"Use all the current transform as key when caching some image for masks used with pattern fill (bug 1795263, #15573)",False
15d4d80d4550dec48419c7df10c9857533dcc991,2022-10-14 12:43:41,Jonas Jenwald,"Merge pull request #15563 from Snuffleupagus/issue-15559

Take the /CIDToGIDMap into account when getting the glyph mapping for CFF fonts (issue 15559)",True
d5036d7bfeb9d32de31fe91b49c3c947082a94e0,2022-10-14 12:42:10,Jonas Jenwald,"Merge pull request #15569 from Snuffleupagus/rm-worker-GetOperatorList-UnsupportedFeature

[api-minor] Stop sending ""UnsupportedFeature"" from the worker-thread GetOperatorList-handling",True
09d077dc25fda4b352b46a6de5806796326cc00c,2022-10-14 01:27:35,calixteman,"Merge pull request #15570 from calixteman/15568

[JS] Take into account all the required fields for some computations",True
fa47d4b9b114579c8dd8971921c6ec2f23555105,2022-10-14 01:12:57,Jonas Jenwald,"Slightly re-factor `PartialEvaluator._simpleFontToUnicode`

Given the sheer number of heuristics added to this method over the years, moving the *valid* unicode found case to the top should improve readability of the code.",False
e756bb69e4d39540dff014bf1cee1e9eb6176ed5,2022-10-13 22:03:12,Calixte Denizet,"[JS] Take into account all the required fields for some computations

- Fix Field::getArray in order to collect only the fields which have a value;
- Fix AFSimple_Calculate:
  * allow to have a string with a list of field names as argument;
  * since a field can be non-terminal, use Field::getArray to collect
    the field under it and then apply the calculation on all the descendants.",False
f2f0a1e871dc80c8b7bc209345385de639e8edd4,2022-10-13 15:16:17,Jonas Jenwald,"[api-minor] Stop sending ""UnsupportedFeature"" from the worker-thread GetOperatorList-handling

This code was added all the way back in PR 6698, almost seven years ago, for backwards compatibility reasons. At this point in time, it seems that we can remove that since:
 - We have more fine-grained ""UnsupportedFeature"" reporting elsewhere in the worker-thread code nowadays.
 - The GetOperatorList-handling is now using `ReadableStream`s, which means that errors are being forwarded to the main-thread anyway.
 - We're also no longer displaying a notification-bar, in the *built-in* Firefox PDF Viewer, for any of these ""UnsupportedFeature"" messages.",False
858d941ff8aaa94f8126cb133b72a80c9698d3f5,2022-10-13 13:32:25,Jonas Jenwald,"Take the /CIDToGIDMap into account when getting the glyph mapping for CFF fonts (issue 15559)

*Please note:* I don't really know what I'm doing here, however the patch appears to fix the referenced issue when comparing the rendering with Adobe Reader (with the caveat that I don't speak the language in question).",False
c6cc7c6e6a1e59bab1096fc7ab14e96d1ae4ed53,2022-10-12 14:21:46,calixteman,"Merge pull request #15567 from calixteman/bug1794717

[Editor] Change the caret cursor into the arrow one only when a text editor isn't empty (bug 1794717)",True
bc51571a0099f77b829ad65b7e277d2abebbc5e6,2022-10-12 13:35:34,Calixte Denizet,"[Editor] Change the caret cursor into the arrow one only when a text editor isn't empty (bug 1794717)

When a text editor is empty, clicking outside will create a new editor, hence it makes sense
to keep a caret cursor.",False
c42f58c235c079a016c8d509ace13f6ec85ff110,2022-10-12 12:56:14,Jonas Jenwald,"Merge pull request #15565 from Snuffleupagus/issue-15564

[GENERIC viewer] Ensure that the we register the `editorTypes` for each `AnnotationEditorUIManager`-instance (issue 15564)",True
00c3bc3aab6c3a3a0ad4edea30307be373e85bec,2022-10-12 12:32:23,Jonas Jenwald,"[GENERIC viewer] Ensure that the we register the `editorTypes` for each `AnnotationEditorUIManager`-instance (issue 15564)

When a new PDF document is opened in the GENERIC viewer we (obviously) create a new `AnnotationEditorUIManager`-instance, since those are document-specific, and thus we need to ensure that we actually register the `editorTypes` for each one.",False
21c2d0c7b01e46c78d7583e2a829dcd93898fcfe,2022-10-11 18:57:41,Jonas Jenwald,"Merge pull request #15562 from Snuffleupagus/checkHeader-prefix

Slightly re-factor the version fetching in `PDFDocument.checkHeader`",True
5bc6f964db66aff8b8dd2e8611a8f5d63773cbb5,2022-10-11 16:45:01,Jonas Jenwald,"Slightly re-factor the version fetching in `PDFDocument.checkHeader`

Note how after having found the ""%PDF-"" prefix we then read both the prefix and the version in the loop, only to then remove the prefix at the end.
It seems better to instead advance the stream position past the ""%PDF-"" prefix, and then read only the version data.

Finally the loop-condition can also be simplified slightly, to further clean-up some very old code.",False
348665934e195a7d7af7f09ecfe26cbc7f2f9751,2022-10-10 14:59:33,calixteman,"Merge pull request #15558 from Snuffleupagus/issue-15557

Ensure that `Page.getOperatorList` handles Annotation parsing errors correctly (issue 15557, bug 1794351)",True
081e897588ecef6ea7cf06a7413a66ef5b644a6c,2022-10-10 13:18:01,Jonas Jenwald,"Ensure that `Page.getOperatorList` handles Annotation parsing errors correctly (issue 15557)

*Fixes a regression from PR 15246, sorry about that!*

The return value of all `Annotation.getOperatorList` methods was changed in PR 15246, however I missed updating the error code-path in `Page.getOperatorList` which thus breaks all operatorList-parsing for pages with corrupt Annotations.",False
dff444d44141d640e545803bb48c18a08394fdc1,2022-10-09 17:40:44,Tim van der Meij,"Merge pull request #15555 from Snuffleupagus/improve-GetDocRequest

Clean-up the data that we're sending with ""GetDocRequest""",True
bf6e287572731dc8e48406fadea7422331900292,2022-10-09 17:07:15,Tim van der Meij,"Merge pull request #15552 from Snuffleupagus/simplify-dropdownToolbarButton

Simplify the `dropdownToolbarButton`-select width computation",True
229d21b50dc3882cd82161b9a06d4479982ee1a1,2022-10-09 17:03:54,Tim van der Meij,"Merge pull request #15553 from Snuffleupagus/rm-CMapCompressionType-STREAM

Remove the unused `CMapCompressionType.STREAM` value",True
8a4f6aca979fc29af4c53ea5fd2ffd85d2cc505c,2022-10-09 16:15:24,Jonas Jenwald,"Stop using the `source`-object when sending ""GetDocRequest""

Looking at the code on the worker-thread, there doesn't appear to be any particular reason for placing *some* of the properties in a `source`-object when sending them with ""GetDocRequest"".
As is often the case the explanation for this structure is rather ""for historical reasons"", since originally we simply sent the `source`-object as-is. Doing that was obviously a bad idea, for a couple of reasons:
 - It makes it less clear what is/isn't actually needed on the worker-thread.
 - Sending unused properties will unnecessarily increase memory usage.
 - The `source`-object may contain unclonable data, which would break the library.",False
c84b717773a4280b2a9ff228560a6959638e5d6b,2022-10-09 16:01:03,Jonas Jenwald,"Group the `evaluatorOptions` on the main-thread, when sending ""GetDocRequest""

Rather than sending all of these parameters individually and then grouping them together on the worker-thread, we can simply handle that in the API instead.",False
447915af9da0c2eae8764fb2f5bb4bb4a396a259,2022-10-09 16:00:46,Jonas Jenwald,"Stop sending the unused `source.url` property in ""GetDocRequest""

It seems that this property became *effectively* unused already in PR 8617, however we missed removing it as part of the clean-up in PR 10376.",False
30f968fd7f019e1d21350230db1153fd58a22ef2,2022-10-09 12:46:11,Jonas Jenwald,"Merge pull request #15554 from Snuffleupagus/rm-deprecated-constants

[api-major] Remove some deprecated constants",True
484e81ef6ea120e1173b3dc94aaed52afb73472e,2022-10-08 21:43:53,Jonas Jenwald,"[api-major] Remove some deprecated constants

All of the these constants have been deprecated for a while, and with the upcoming *major* version this seems like a good time to remove them.
For the string-constants we can simply remove them, but the number-constants are left commented out since we don't want to re-number the list to prevent third-party breakage.",False
4cc98de6d72e28145e4c6c681a0631f568798c05,2022-10-08 20:40:05,Jonas Jenwald,"Remove the unused `CMapCompressionType.STREAM` value

This was added in PR 8064, over five years ago, for a possible future CMap file-format that was never implemented.",False
4f5f362d60773bc0aa0b70be1b086afbd46a4a36,2022-10-08 16:04:13,Jonas Jenwald,"Remove unnecessary `size` attribute from the pageNumber-input

This attribute is overridden by the explicit `width` that's specified in the CSS rules, hence we can remove one more small piece of very old code; see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#size",False
450be1ad3eac2077750bb8a29aa8610eab917b52,2022-10-07 21:49:10,Jonas Jenwald,"Simplify the `dropdownToolbarButton`-select width computation

The way that we set the width of the `dropdownToolbarButton`-select is very old, and despite some improvements over the years this is still somewhat hacky.
In particular, note how we're assigning the select-element a larger width than its containing `dropdownToolbarButton`-element. This was done to prevent displaying *two* separate icons, i.e. the native and the PDF.js one, since it's the only way to handle this in older browsers (particularly Internet Explorer).

Given the currently supported browsers, there's however a better solution available: use `appearance: none;` to disable native styling of the select-element. [According to MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/appearance#browser_compatibility), this is supported in all reasonably modern browsers.
This way we're able to simplify both the CSS rules and the JS-code that's used to adjust the `dropdownToolbarButton` width in a localization aware way.",False
3dc9b427b9aca97a539af0962689fab3d6c41cbf,2022-10-07 19:19:14,calixteman,"Merge pull request #15549 from calixteman/padding_inline

[XFA] Add some padding inline in selects",True
b27753aa3d688548597691313b97537cc7d3f39e,2022-10-07 19:18:41,calixteman,"Merge pull request #15548 from calixteman/simplify_remainder

Simplify the way to compute the remainder modulo 3 in PDF20Hash function",True
24757e32d18f2a353d8b86058d3bc9a1cc1e678b,2022-10-07 18:41:58,Calixte Denizet,"[XFA] Add some padding inline in selects

Because of https://bugzilla.mozilla.org/show_bug.cgi?id=1582545, the padding-inline is by default 0.
0 is not really enough because of the outline, so just set it to 2px (it was 4px before the patch)
in order to have something visually correct.",False
9931295beaa2c3a4e4d5a97bcdfa080ebd9f138d,2022-10-07 18:33:19,Jonas Jenwald,"Merge pull request #15547 from Snuffleupagus/rm-Util-apply3dTransform

Remove the unused `Util.apply3dTransform` method",True
c0e165bf97aadbb562ad6acfd6f7a37f47a204a9,2022-10-07 18:13:31,Calixte Denizet,"Simplify the way to compute the remainder modulo 3 in PDF20Hash function

I noticed the 256 % 3 (which is equal to 1) so I slighty simplify the code.
The sum of the 16 Uint8 doesn't exceed 2^12, hence we can just take the
sum modulo 3.",False
4b39b1c76b4347a817b010b9d88b4c220a02170b,2022-10-07 17:25:36,Jonas Jenwald,"Remove the unused `Util.apply3dTransform` method

This method was originally added in PR 1157 (back in 2012), however its only call-site was then removed in PR 2423 (also in 2012).
Hence this method has been completely unused for nearly a decade, and it should thus be safe to remove it.",False
8629a55215f88e406c304ccd18dd4ac54f44d9ac,2022-10-07 14:46:22,Jonas Jenwald,"Merge pull request #15538 from Snuffleupagus/viewer-error-logging

Stop localizing error *details* in the viewer (PR 15533 follow-up)",True
3cb119cb32e8ad526e2c584656fe01282e859aa0,2022-10-07 14:44:28,Jonas Jenwald,"Merge pull request #15539 from Snuffleupagus/DecryptStream-set

Replace loop with `TypedArray.prototype.set` in the `DecryptStream.readBlock` method",True
a5a6b9f6418bbbed721e29a307dc608918d1eaf6,2022-10-07 13:35:03,Jonas Jenwald,"Merge pull request #15542 from Snuffleupagus/issue-14952

[api-minor] Make `isOffscreenCanvasSupported` configurable via the API (issue 14952)",True
1ea4c4b519157ee54da4385a7db17339f9e0db64,2022-10-07 03:40:46,Jonas Jenwald,"[api-minor] Make `isOffscreenCanvasSupported` configurable via the API (issue 14952)

This patch first of all makes `isOffscreenCanvasSupported` configurable, defaulting to `true` in browsers and `false` in Node.js environments, with a new `getDocument` parameter. While you normally want to use this, in order to improve performance, it should still be possible for users to control it (similar to e.g. `isEvalSupported`).

The specific problem, as reported in issue 14952, is that the SVG back-end doesn't support the new ImageMask data-format that's introduced in PR 14754. In particular:
 - When the SVG back-end is used in Node.js environments, this patch will ""just work"" without the user needing to make any code changes.
 - If the SVG back-end is used in browsers, this patch will require that `isOffscreenCanvasSupported: false` is added to the `getDocument`-call.",False
6877d8b9e29b0fff613048b53d692236a200cc58,2022-10-06 18:13:24,Jonas Jenwald,"Replace loop with `TypedArray.prototype.set` in the `DecryptStream.readBlock` method

There's no reason to use a manual loop, when a native method exists.",False
2f238a11c1975c49b23b9ced0ca9ff4d5f8c2c3a,2022-10-06 16:39:39,Jonas Jenwald,"Stop localizing error *details* in the viewer (PR 15533 follow-up)

While it can't hurt to localize the main error-messages, also localizing the error *details* has always seemed somewhat unnecessary since those are only intended for debugging/development purposes. However, I can understand why that's done since the GENERIC viewer used to expose this information in the UI; via the `errorWrapper` UI that's removed in PR 15533.

At this point, when any errors are simply logged in the console, it no longer seems necessary to keep localizing the error *details* in the default viewer.",False
6bd5ef29ae7a58537270057c6fda6392105b1579,2022-10-06 15:33:22,Jonas Jenwald,"Log the `build` number, in addition to the `version`, in the viewer

Given that the `build` number allows you to *directly* find the relevant commit, it cannot hurt to log that one as well.",False
7d5f7a517c8d7a4f427e163dbda8b2856d48cc0c,2022-10-06 15:04:52,Jonas Jenwald,"Merge pull request #15537 from Snuffleupagus/issue-8844

[api-minor] Add partial support for the ""GoToE"" action (issue 8844)",True
ce66fefbffe0f3a0d9b36636ec4d92afda74f959,2022-10-06 14:03:07,Jonas Jenwald,"[api-minor] Add partial support for the ""GoToE"" action (issue 8844)

*Please note:* The referenced issue is the only mention that I can find, in either GitHub or Bugzilla, of ""GoToE"" actions.
Hence why I've purposely settled for a very simple, and partial, ""GoToE"" implementation to avoid complicating things initially.[1] In particular, this patch only supports ""GoToE"" actions that references the /EmbeddedFiles-dict in the PDF document.

See https://web.archive.org/web/20220309040754if_/https://www.adobe.com/content/dam/acom/en/devnet/pdf/pdfs/PDF32000_2008.pdf#G11.2048909

---
[1] Usually I always prefer having *real-world* test-cases to work with, whenever I'm implementing new features.",False
8c59cc72a3a1e8a1b6452d9cfbef85a071736355,2022-10-05 15:02:19,Jonas Jenwald,"Merge pull request #15536 from Snuffleupagus/more-for-of-2

Use more `for...of` loops in the code-base",True
60f6272ed9e5c81af12785334dac43babdba5f09,2022-10-03 16:38:38,Jonas Jenwald,"Use more `for...of` loops in the code-base

Most, if not all, of this code is old enough to predate the general availability of `for...of` iteration.",False
4e58dabb3274941345d93b058676691f5f5bccfd,2022-10-02 17:52:51,Tim van der Meij,"Merge pull request #15534 from Snuffleupagus/FontLoader-cleanup-3

[api-minor] Stop setting an `id` on the styleElement used with CSS font-loading",True
fe5d9b4b6a3e14e54b6eaed95ee62d3875a892a3,2022-10-02 15:31:41,Jonas Jenwald,"Remove duplicated `destroy`-calls in the ""custom ownerDocument"" unit-tests

Given that `PDFDocumentProxy.destroy` is nothing but an alias for `PDFDocumentLoadingTask.destroy` calling both methods is obviously not useful.",False
8e4ef6d89d399ac6103d4fc23baca15e83148a50,2022-10-02 15:31:33,Jonas Jenwald,"[api-minor] Stop setting an `id` on the styleElement used with CSS font-loading

This is yet another small piece of clean-up of the `FontLoader`-code, since we've not used this `id`-property for anything ever since PR 6571 (which landed almost seven years ago). Furthermore, by default we're also not even using that code-path now since the Font Loading API will always be used when available.

*Please note:* This is tagged `[api-minor]` since it's technically observable from the outside, however no user ought to be directly interacting with these CSS font rules.",False
beff91381393703fb6bd2fb6f218e7cfb6464db6,2022-10-01 22:37:28,Tim van der Meij,"Merge pull request #15533 from Snuffleupagus/rm-errorWrapper

[GENERIC viewer] Remove the `errorWrapper` UI",True
284634f30d26219b8d171530984b803236ccb75e,2022-10-01 22:33:51,Tim van der Meij,"Merge pull request #15508 from timvandermeij/updates

Update dependencies and translations to the most recent versions",True
606fb8c394cd951b5b923c030ef302a28ffd4b3b,2022-10-01 21:38:15,Tim van der Meij,"Fix intermittent errors in the ""check that first text field has focus"" scripting test

This commit fixes the ""Expected null to equal '401R'"" errors that
surfaced after the Puppeteer 18 upgrade. Note that even before that
this would have been an improvement because it takes some time between
scripting being reported ready (i.e., triggering the execution of any
OpenActions) and those OpenActions actually completing execution, so
it's only safe to check which element is focused if we know an element
actually became focused.",False
9525bfaa66b61bec41ab839fdbff316b89abf9b4,2022-10-01 21:37:44,Tim van der Meij,Update translations to the most recent versions,False
b0725e75c63a67e49fe66378d883c179fe467254,2022-10-01 21:34:29,Tim van der Meij,Update dependencies to the most recent versions,False
62c1a4e8c8c28f8fbabcbc7a0ded980914b8a391,2022-10-01 21:05:43,Jonas Jenwald,"[Firefox viewer] Skip unused printing-string in `DEFAULT_L10N_STRINGS`

Given that the Firefox PDF Viewer uses the *browser* print UI, this fallback l10n-string isn't necessary in the MOZCENTRAL build.",False
75e06fddf165c0e4bf289877cd13d930820b516a,2022-10-01 21:05:35,Jonas Jenwald,"[GENERIC viewer] Remove the `errorWrapper` UI

In the Firefox PDF Viewer this has never been used, with the error message simply printed in the web-console, and (somewhat) recently we've also updated the viewer code to avoid bundling the relevant code there. Furthermore, in the Firefox PDF Viewer we're not even display the *browser* fallback bar any more; see https://bugzilla.mozilla.org/show_bug.cgi?id=1705327.

Hence it seems slightly strange to keep this UI around in the GENERIC viewer, and this patch proposes that we simply remove it to simplify/unify the relevant code in the viewer. In particular this also allows us to remove a couple of l10n-strings, which have always been unused in the Firefox PDF Viewer.",False
a93c01ae6a455c879603c69be7f888eea334c916,2022-10-01 17:17:44,Jonas Jenwald,"Merge pull request #15510 from Snuffleupagus/compatibility-loading

Change how `src/shared/compatibility.js` is imported",True
3e625994bdf6dcac693d202b576d6177796ba110,2022-10-01 16:59:54,Jonas Jenwald,"Change how `src/shared/compatibility.js` is imported

Currently the compatibility-file is loaded using a standard `import`-statement and while its code is enclosed in a pre-processor block, and thus is excluded in e.g. the MOZCENTRAL build-target, it still results in the *built* `pdf.js`/`pdf.worker.js` files having an effectively empty closure as a result.
By moving the checks from `src/shared/compatibility.js` and into `src/shared/util.js` instead, we can load the file using a build-time `require`-statement and thus avoid that closure.

Note that with these changes the compatibility-file will no longer be loaded in development mode, i.e. when `gulp server` is used. However, this shouldn't be a big issue given that none of its included polyfills could be loaded then anyway (since `require`-statements are being used) and that it's really only intended for the `legacy`-builds of the library.",False
2c38a14a14d312a7d16c10f76e833f24930b9af2,2022-10-01 16:40:32,Tim van der Meij,"Merge pull request #15530 from Snuffleupagus/sidebar-toggleButton-l10n

Re-factor the `toggleButton` l10n in the `PDFSidebar` class",True
0cca2d4f6eec7dec9483912ac0f410a8dac02864,2022-10-01 16:34:29,Tim van der Meij,"Merge pull request #15511 from Snuffleupagus/FontLoader-cleanup-2

More `FontLoader` clean-up",True
29a784c240de735ebb8f0824d0697e8b3bf8dd0c,2022-10-01 16:26:57,Tim van der Meij,"Merge pull request #15514 from Snuffleupagus/DOMMatrix-polyfill

Replace the `DOMMatrix` polyfill, used with Node.js, with the one from `node-canvas`",True
7b24931f673d68803d9dac4567ba0462ec89a835,2022-10-01 03:00:50,Jonas Jenwald,"Merge pull request #15517 from Snuffleupagus/issue-15516

Add more non-standard ligatures in the `glyphlist.js` file (issue 15516)",True
1ee096d2293a8ef3b086d5f8e4ae636031e8b708,2022-09-30 13:45:05,Jonas Jenwald,"Merge pull request #15515 from mozilla/revert-15418-pr-15319-followup

Revert ""Don't listen for window resolution changes in old browsers (PR 15319 follow-up)""",True
bad00f825acad5d7a4ddaa3dafe1f28bc7c8acd5,2022-09-30 13:29:58,Jonas Jenwald,"Re-factor the `toggleButton` l10n in the `PDFSidebar` class

Rather than ""manually"" looking up the l10n-string and then updating the button, we can (and probably even should) just update the l10n-id and then trigger proper translation for the button DOM-element.",False
0011a747f7cdabdf66b754f12ecd5f3ad2bd77bb,2022-09-30 13:02:16,Jonas Jenwald,"Merge pull request #15527 from calixteman/15523

[JS] Add the function AFExactMatch",True
330048ad6bd7318d0cf9814a6ba35218a2cbfabe,2022-09-30 05:53:56,Calixte Denizet,[JS] Add the function AFExactMatch,False
294db228bc9994f74f118b9e66d07d64207b7420,2022-09-29 14:39:44,Jonas Jenwald,"Merge pull request #15522 from Snuffleupagus/editor-disable-cursor-tools

[Editing] Disable the HandTool during editing (bug 1792422)",True
205ab958194007ef834bf02a6c243f3f9ab6f998,2022-09-29 14:14:06,Jonas Jenwald,"[Editing] Disable the HandTool during editing (bug 1792422)

This extends the approach used in PresentationMode to also cover the AnnotationEditor, and tries to handle the combination of both cases correctly.
In order to simplify the overall implementation we simply track the *first* seen ""previous"" cursorTool, and don't allow it to be reset as long as either PresentationMode or an AnnotationEditor is being used.",False
c87f90102cd6cd4fe69696bf48f60a6f4aeba2e5,2022-09-27 20:01:51,Jonas Jenwald,"Add more non-standard ligatures in the `glyphlist.js` file (issue 15516)

Note that this PR only adds the ""underscore""-variant of *actually existing* ligatures, however the referenced PDF document also uses a couple of non-standard ones (e.g. `ft`, `Th`, and `fh`) that we cannot easily support without larger changes (since they don't have official Unicode-entries).
Given that it's clearly the PDF document, and its fonts, that's the culprit here it's not entirely clear to me that we actually want to attempt a larger refactoring/rewriting of the `glyphlist.js` code, assuming it's even generally possible. Especially when this patch alone already improves our copy-paste behaviour when compared to both Adobe Reader and PDFium, and that this is only the *second* time this sort of bug has been reported.",False
4c7a03c4cbdf39159f09ead01a12def8e93eee50,2022-09-27 15:57:27,Jonas Jenwald,"Revert ""Don't listen for window resolution changes in old browsers (PR 15319 follow-up)""",False
c894be92fbce3030847ed4f38fbc97dd018a2851,2022-09-27 15:42:50,Jonas Jenwald,"Replace the `DOMMatrix` polyfill, used with Node.js, with the one from `node-canvas`

Fewer dependencies shouldn't be a bad idea in general, and given that the `node-canvas` package already include a `DOMMatrix` polyfill we can simply use that one instead.",False
5675a6ee643bd62198590d40b4c771f6960ada93,2022-09-27 01:29:58,Jonas Jenwald,"Merge pull request #15512 from Snuffleupagus/issue-15509

[JS] Override the `Doc.external`-getter to avoid `alert`-modals on load (issue 15509)",True
9769b3b71a25079e952924d90f0bdc3e95cc2b78,2022-09-27 00:25:26,Jonas Jenwald,"[JS] Override the `Doc.external`-getter to avoid `alert`-modals on load (issue 15509)

This property is documented in https://web.archive.org/web/20201112021418if_/https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/AcrobatDC_js_api_reference.pdf#G5.1977075

Given that PR 14207, which is *somewhat* similar, landed without tests that's hopefully fine here as well.",False
9ce2427e79cdcb070eab5aff5abe8fb34fd96961,2022-09-26 18:48:22,Jonas Jenwald,"[Firefox viewer] Skip some unnecessary code in the `FontLoader.bind` method

Given that Firefox supports *synchronous* font loading, when the Font Loading API isn't being used, there's really no point including code which if called would just throw in the MOZCENTRAL build. (This is safe, since the `FontLoader.isSyncFontLoadingSupported`-getter always return `true` there.)",False
2161f334a03806cfab0516f43c6b472945b2339f,2022-09-26 17:03:52,Jonas Jenwald,"Remove the ability to pass in more than one font to the `_prepareFontLoadEvent` method (PR 10539 follow-up)

After the changes in PR 10539 (which landed over three years ago) the `FontLoader.bind` method can only be called with *a single* font at a time, hence the `_prepareFontLoadEvent` method obviously don't need to support multiple fonts any more.",False
ca05b650aa5e62adc499e9357a0d434b1a1cf29a,2022-09-26 16:56:14,Jonas Jenwald,"Remove the unused `rules` parameter from the `_prepareFontLoadEvent` method (PR 3477 follow-up)

This is yet another small piece of functionality that became unused in PR 3477 (which landed nine years ago).",False
da1780f82668cfd6833e48bcb32854c90fb5b83c,2022-09-25 19:43:25,calixteman,"Merge pull request #15486 from nmtigor/fix_orders_of_prop

Fix property chain orders of Operators in isDotExpression",True
dab81f59815da008cebe40b1257eef2c4acd4b16,2022-09-25 17:01:33,Tim van der Meij,"Merge pull request #15507 from Snuffleupagus/FontLoader-cleanup

Improve the `FontLoader` code",True
ad83fbe2a18128095713e3621f6dc4ca268b65b1,2022-09-25 16:01:58,Jonas Jenwald,"Replace the `BaseFontLoader` classes with one `FontLoader` class

By having just *one* class, and using pre-processor blocks directly in the relevant methods, we reduce the size of this code in the *built* `pdf.js` file.
Originally, when the `BaseFontLoader` abstraction was added in PR 9982, the idea was probably that additional build-targets would get their own implementations. Given that this hasn't happened in the four years since that landed, it doesn't seem meaningful to keep it around.",False
9a03d36af407c2f1736405bd0754378205dfb5ef,2022-09-25 14:11:06,Jonas Jenwald,"Remove some unused code from the `_queueLoadingCallback` method (PR 3477 follow-up)

The existing `loadingContext` class-property can be simplified slightly, since we've not been using the `id`-property on the requests ever since PR 3477 (which landed nine years ago).
Furthermore, by default we're also not even using that code-path now since the Font Loading API will always be used when available.",False
5f65df774f2689bf9ecca781547defed910b1f95,2022-09-24 18:45:04,Tim van der Meij,"Merge pull request #15504 from Snuffleupagus/rm-stopImmediatePropagation-checks

Use `stopImmediatePropagation` without checking for its existence first",True
b420f0165a0e776923c77431c14b7ca87944e12c,2022-09-24 18:32:12,Jonas Jenwald,"Use `stopImmediatePropagation` without checking for its existence first

These checks were added years ago, but given the following compatibility data we should just be able to call the method directly: https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation#browser_compatibility",False
907ef467ea1170e5e5cde152041fc493a43e525b,2022-09-24 18:18:21,Tim van der Meij,"Merge pull request #15503 from Snuffleupagus/consistent-outline

Use a consistent `outline` for all UI buttons (PR 15438 follow-up)",True
27a1ab52b18940fdd867f8662ea2ba65a93e8642,2022-09-24 18:16:54,Tim van der Meij,"Merge pull request #15501 from Snuffleupagus/errorWrapper-font

Restore the old fonts in the `errorWrapper` (PR 15438 follow-up)",True
4cedbca365b0e57d02d09420bd6c181355fec39e,2022-09-24 18:15:59,Tim van der Meij,"Merge pull request #15500 from Snuffleupagus/LoopbackPort-rm-export

[api-minor] Stop exposing the `LoopbackPort` class in the API",True
369f23ff3de79df83860b270e5eb28e5d2ee6cfe,2022-09-24 18:13:45,Tim van der Meij,"Merge pull request #15499 from Snuffleupagus/support-docs

Reference supported browsers Wiki-page in more README files",True
10f6a0154fd7a2481231e7929187352798f940a4,2022-09-24 18:11:43,Tim van der Meij,"Merge pull request #15485 from Snuffleupagus/more-optional-chaining-2

Use more optional chaining in the code-base (PR 15398 follow-up)",True
5296fc991ca9d12414bfd413f672addb31a6b179,2022-09-24 17:24:34,Jonas Jenwald,"Restore the old fonts in the `errorWrapper` (PR 15438 follow-up)

This only applies to the GENERIC viewer, hence we use the pre-processor to exclude it from the Firefox PDF Viewer.",False
616535b7a7722630002ec9166bac3e5c8df0e1bd,2022-09-24 17:12:27,Jonas Jenwald,"Use a consistent `outline` for all UI buttons (PR 15438 follow-up)

Currently the `viewBookmark`-button, which is actually a `href`-element, gets an inconsistent `outline`.
Similarly, the `dialog`-buttons also have an inconsistent `outline` after the changes in PR 15438.

Finally, simplifies a couple of `border` rules since setting a border-width when ""none"" is being used doesn't seem meaningful.",False
cf038d03682e078ed6b3f086c43bb8856a537c69,2022-09-23 17:14:35,Jonas Jenwald,"[api-minor] Stop exposing the `LoopbackPort` class in the API

This was done all the way back in PR 8361, for a mozilla-central test that's since been removed. As can be seen in the following search results, there's no `LoopbackPort` invocation outside of the PDF.js code itself: https://searchfox.org/mozilla-central/search?q=LoopbackPort&path=

Given that the `LoopbackPort` is only used in connection with ""fake workers"", which is something that we don't officially recommend/support, this doesn't seem like functionality that we want to keep exposing in the public API.",False
499610779ecf7e67c5cc97baca3d7bc235556120,2022-09-23 16:55:15,Jonas Jenwald,Re-factor the `LoopbackPort` class to use *proper* private fields,False
c1c78f9e8c9c7de7c74e31c8517ef009074781f2,2022-09-23 14:36:47,Jonas Jenwald,"Reference supported browsers Wiki-page in more README files

I've just updated https://github.com/mozilla/pdf.js/wiki/Frequently-Asked-Questions#faq-support to hopefully provide better support data, and it cannot hurt to explicitly link that from a couple of places.",False
7404091787440cd67ebd7af4620e3fee438e8ec8,2022-09-23 13:53:14,Jonas Jenwald,"Merge pull request #15498 from Snuffleupagus/more-spread

Replace some `Array.prototype`-usage with spread syntax",True
65384092826eb0f8dc52dbd4bbb2ac1ff1848cbd,2022-09-23 13:05:30,Jonas Jenwald,"Replace some `Array.prototype`-usage with spread syntax

We have a few, quite old, call-sites that use the `Array.prototype`-format and which can now be replaced with spread syntax instead.",False
91bdcd8b20b275b65dcf0252bebe561a22ccd04c,2022-09-22 20:37:21,Jonas Jenwald,"Merge pull request #15495 from mozilla/revert-15459-1774427

Revert ""Don't use window.print in the Firefox builtin viewer (bug 1774427)""",True
034017d526d2ae91676661da737a21c6b81873b6,2022-09-22 20:35:49,calixteman,"Merge pull request #15494 from Snuffleupagus/issue-15492

Tweak the heuristic that handles JPEG images with a wildly incorrect SOF (Start of Frame) `scanLines` parameter (issue 15492)",True
9ded9dd4e59d18a862b69b7aac14f9f35aeed96e,2022-09-22 20:28:49,calixteman,"Revert ""Don't use window.print in the Firefox builtin viewer (bug 1774427)""",False
9bdcdeef678133877e07bb3fdbfab31cc90fd069,2022-09-22 20:24:33,calixteman,"Merge pull request #15493 from calixteman/15490

[JS] Try to guess what the date is when it doesn't follow the given format (issue #15490)",True
9e40938a2931e46522bee745e64b69e42d0d4671,2022-09-22 20:00:39,Calixte Denizet,"[JS] Try to guess what the date is when it doesn't follow the given format (issue #15490)

We use the format to guess in which order we can find month, day, ... we get the numbers
in the date and consider them as month, day, ...",False
f1b0dc6f04ac0c14a9013167b2d8150877a32e17,2022-09-22 17:39:04,Jonas Jenwald,Tweak the heuristic that handles JPEG images with a wildly incorrect SOF (Start of Frame) `scanLines` parameter (issue 15492),False
784ec3978a4e8d47bd6bdc7c0a15dd025a8579d9,2022-09-22 13:56:56,Jonas Jenwald,"Merge pull request #15491 from Snuffleupagus/annotationLayer-input-hover-border

Set a `border-radius` when hovering annotationLayer-inputs (PR 15438 follow-up)",True
1558c0e85e976fb2318a967ab446a8ff031894bc,2022-09-22 13:31:24,Jonas Jenwald,"Set a `border-radius` when hovering annotationLayer-inputs (PR 15438 follow-up)

The changes in PR 15438 added a `border-radius` when input-elements are focused, however there's no radius when the same elements are hovered. Having the radius change, and not just the `border-color`, when input goes from hovered to focused feels a bit inconsistent (at least to me).",False
547fa3ed2ca0ab9ca1d503a8105d95ebd0707a7c,2022-09-22 02:09:53,Jonas Jenwald,"Merge pull request #15489 from Snuffleupagus/debugger-fonts

Restore the old fonts in the debugger (PR 15438 follow-up)",True
2a1d536ec6ba2e435df48517e4fe47f6977dad37,2022-09-22 01:19:17,Jonas Jenwald,"Restore the old fonts in the debugger (PR 15438 follow-up)

The changes in PR 15438 affected the debugger as well, which means that some of the panels/buttons look (in my opinion) a bit less nice than before.",False
22cc9b7dc72ceea8a14dcfe58f01eff4f96034dc,2022-09-21 20:50:23,nmtigor,Fix property chain orders of Operators in isDotExpression and isSomPredicate,False
9f637966f89f71d4742f5a528410c231db06ae65,2022-09-21 20:17:36,Jonas Jenwald,"Use more optional chaining in the code-base (PR 15398 follow-up)

*Fixes a few cases that I missed in PR 15398.*",False
2146d93609162794318580eb8db693e8ee9e7a91,2022-09-21 15:43:21,Jonas Jenwald,"Merge pull request #15483 from Snuffleupagus/rm-app-duplicate-document

[JS] Remove duplicate `this._document` assignment in the `App`-class",True
01ec5e3b32ffadead647aa45e6345b50f61f886b,2022-09-21 15:10:28,nmtigor,"[JS] Remove duplicate `this._document` assignment in the `App`-class

This property is already being assigned earlier in the constructor, see https://github.com/mozilla/pdf.js/blob/ea1d35976718a87d35846748016d843ea996d2e2/src/scripting_api/app.js#L42",False
ea1d35976718a87d35846748016d843ea996d2e2,2022-09-21 00:42:10,Jonas Jenwald,"Merge pull request #15478 from calixteman/1791583

Initialize values in the path bounding box before flushing the operator list (bug 1791583)",True
198e9a3db1dceaef6532c88f85e0671f78ac43f2,2022-09-20 23:31:54,Calixte Denizet,"Initialize values in the path bounding box before flushing the operator list (bug 1791583)

OperatorList.addOp can trigger a flush if it's required, hence the values passed to it must
be correctly initialized in order to avoid some wrong values in the renderer.
Because of that a clip path was considered as empty, nothing was clipped, hence the wrong
rendering in bug 1791583.",False
ff8f8509368287310f0d2a6fd64756359e573cf9,2022-09-20 19:04:05,Jonas Jenwald,"Merge pull request #15477 from Snuffleupagus/sandbox-destroy-timeout

Access the `setTimeout`-functionRefs correctly in `SandboxSupportBase.destroy`",True
fdb7b086bdf016a531778fb9ef40c64381524364,2022-09-20 18:02:30,Jonas Jenwald,"Merge pull request #15476 from calixteman/fix_formcalc_lexer

[XFA] Fix an hidden issue in the FormCalc lexer",True
cd7ce6a295384c1d008c874c91895c00d58ba91f,2022-09-20 17:47:56,calixteman,"Merge pull request #15468 from calixteman/1791515

[Editor] Make sure to have the annotation editor layer on top of the annotation one (bug 1791515)",True
fde1e4996d6f4341f8fda659e507370e77f96fc5,2022-09-20 17:40:44,Jonas Jenwald,"Access the `setTimeout`-functionRefs correctly in `SandboxSupportBase.destroy`

*This effectively replaces PR 15465.*

As outlined in https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach, the argument order when iterating through a `Map` is actually `value, key`.
Ignoring the incorrect Array used in the old code, I cannot imagine that this would've worked anyway since we didn't use the actual `setTimeout`-functionRefs to clear the timeouts; please refer to the `setTimeout`/`setInterval` methods in the `SandboxSupportBase.createSandboxExternals` method.",False
f5b835157b4493db9955418596c7934eef22f6c6,2022-09-20 17:23:55,Calixte Denizet,"[XFA] Fix an hidden issue in the FormCalc lexer

Since there are no script engine with XFA, the FormCalc parser is not used irl.
The bug @nmtigor noticed was hidden by another one (the wrong check on `match`).",False
8dd2b484886c8758a3e48ce15cd710b8c981ff4e,2022-09-20 16:45:26,Jonas Jenwald,"Merge pull request #15474 from nmtigor/fix_bugs_10

Fix #selectEditors typo in the AnnotationEditorUIManager.unselectAll method",True
09b54a8c9e36799bb038f4bcf9f7b1ca034c017c,2022-09-20 15:45:59,Jonas Jenwald,"Merge pull request #15473 from nmtigor/fix_bugs_9

Fix commFunc typo in the SandboxSupportBase.destroy method",True
4348ffee8dfc316836602c3498a17b39c318bada,2022-09-20 15:25:42,nmtigor,Fix #selectEditors typo in the AnnotationEditorUIManager.unselectAll method,False
d7103a44396f0e7aa031502cdad95f920ecfe044,2022-09-20 15:09:13,nmtigor,Fix commFunc typo in the SandboxSupportBase.destroy method,False
3b536f2701728bf44a077775b59e5bb98bee18a5,2022-09-20 14:28:35,Calixte Denizet,"[Editor] Make sure to have the annotation editor layer on top of the annotation one (bug 1791515)

Some z-index have been added in the annotation layer because the elements inside are re-ordered
in order to improve accessibility.
Hence we must add a ""high"" z-index on the annotation editor layer in order to avoid any bad
interaction between the different layers.",False
e5fc7cf4bd403a6c814b8c8c1ba3d2359120c46a,2022-09-20 02:06:37,calixteman,"Merge pull request #15461 from calixteman/1790309

Use AccentColor as background for selected text in the text layer (bug 1790309)",True
5b4a44dbab63ae6227defca02493f747f92260ee,2022-09-20 01:52:16,calixteman,"Merge pull request #15462 from calixteman/update_xfa

[XFA] - Avoid an exception when zooming on a XFA",True
403aa5cfa0a8bcd01cbe48c15efa3cd129d1e37b,2022-09-20 01:01:52,Calixte Denizet,[XFA] - Avoid an exception when zooming on a XFA,False
68977ebc2608fdc1c763fba1e568ab3cb5286c6e,2022-09-20 00:55:56,Calixte Denizet,"Use AccentColor as background for selected text in the text layer (bug 1790309)

and use the default color for the viewer in general.",False
d262ca314dbc991f8b138a90212cce673d67997f,2022-09-19 21:02:21,Jonas Jenwald,"Merge pull request #15460 from Snuffleupagus/prefer-regexp-test

Enable the `unicorn/prefer-regexp-test` ESLint plugin rule",True
20b9887476dd2e291af828ebe77d18d482e93645,2022-09-19 20:04:01,Jonas Jenwald,"Enable the `unicorn/prefer-regexp-test` ESLint plugin rule

Please see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-regexp-test.md",False
bf78ccac30e629c3d75d0ba8c1fce65768f7b397,2022-09-19 18:37:10,calixteman,"Merge pull request #15459 from calixteman/1774427

Don't use window.print in the Firefox builtin viewer (bug 1774427)",True
620f1ef1a97bbb8c7301eafc38d9cd1b8b401940,2022-09-19 17:52:40,Calixte Denizet,"Don't use window.print in the Firefox builtin viewer (bug 1774427)

Currently, it's impossible to print a pdf in a sandboxed iframe in using window.print.",False
2642573702dcc62264ecc8c58ef8fec0c71a81b2,2022-09-19 17:44:41,Jonas Jenwald,"Merge pull request #15458 from Snuffleupagus/rm-some-search

Replace some unnecessary `String.prototype.search` usage",True
bb75b36b77a5663bf6ff837c4ae71707bb400446,2022-09-19 16:21:46,Jonas Jenwald,"Replace some unnecessary `String.prototype.search` usage

Most of the `String.prototype.search` call-sites found throughout the code-base is actually not necessary, since we usually only want a *boolean*, and those can be replaced with `RegExp.prototype.test` instead.",False
dc6c3eacbc08ab69eb38d78f148a2b96d5d67669,2022-09-18 19:34:56,calixteman,"Merge pull request #15438 from calixteman/1726183

 Improve CSS for HCM (bug 1726183)",True
07cd7cb3dce4a4af1d555002486c15a5ed4b5302,2022-09-18 19:33:24,Calixte Denizet,"Improve CSS for HCM (bug 1726183)

The default outline for a focused text input is not that bad but for any reason when changing
the background color, all the good default border/outline properties are lost (it's the same
behaviour in Edge).
So in order have something consistent in HCM/non-HCM, a 2px-border+1px-outline (on @MReschenberg
advices) is added when an input is focused with different colors depending on HCM.
While working on the above issue, I noticed few bugs I fixed when in HCM:
 - input, button and select have some default properties which have been created at a time where
   annotation layer didn't exist, hence this patch remove them and set those properties where
   they should live;
 - some elements (like the main toolbar) is using a box-shadow which is invisible in HCM, hence
   it's replaced by a border-bottom in HCM;
 - some separators are invisible in HCM, hence use GrayText color to render them correctly;
 - the options for the zoom selection were invisible in HCM with Desert (one of the Windows 11
   themes).",False
67160f4cae13ba56b5dc2156b875acccebd421e4,2022-09-18 18:05:00,Tim van der Meij,"Merge pull request #15455 from Snuffleupagus/issue-15453

Don't update the Scroll/Spread-mode in the ViewHistory while PresentationMode is active (issue 15453)",True
f7ab417757506d93affdc46207d7de007a7e11f0,2022-09-18 18:02:13,Tim van der Meij,"Merge pull request #15432 from Snuffleupagus/validateFileURL-var

Some *small* viewer clean-up for non-GENERIC builds",True
d78619cd669d4547e60bea9ecf666bf60454ce8c,2022-09-18 17:59:46,Tim van der Meij,"Merge pull request #15452 from Snuffleupagus/chrome-extension

Temporarily stop listing the official Chrome extension in the main README",True
f91cc3dd5dde897d9d24c8ec561de9241d4f5d21,2022-09-18 17:58:31,Tim van der Meij,"Merge pull request #15451 from Snuffleupagus/major-support

[api-major] Update the minimum supported browsers/environments",True
965713f3e7144820b94a81c480f6c601b800fc1f,2022-09-18 17:54:27,Tim van der Meij,"Merge pull request #15446 from Snuffleupagus/rm-component-examples-enableScripting

Remove the `enableScripting`-parameter from the component examples (PR 13816 follow-up)",True
58e30a7048f22469655a4666cf088fd8fd637803,2022-09-18 17:53:43,Tim van der Meij,"Merge pull request #15454 from Snuffleupagus/update-packages

Update packages and translations",True
2c02a2fc5cdb03303bbbf1ac28e41e253d877d7b,2022-09-18 15:12:01,Jonas Jenwald,"Don't update the Scroll/Spread-mode in the ViewHistory while PresentationMode is active (issue 15453)

By force-quitting the browser while the FullScreen API is active, we don't get a chance to exit PresentationMode *cleanly* and some of its state thus remains (via the `ViewHistory`).
To try and improve things here we can skip updating the Scroll/Spread-mode while PresentationMode is active, since they will be changed when entering PresentationMode, which seems to help and is really the best that we can do here (and what the issue describes is very much an edge-case anyway).",False
1a04a38a068801e871e7c417e1e0c334b7d88f12,2022-09-18 14:04:53,Jonas Jenwald,Update l10n files,False
6a9e5842154e5c4d343fa7f32e73d04f838b8b8c,2022-09-18 14:01:32,Jonas Jenwald,Update npm packages,False
b7f987a18549e67333c6a6562258d27d27eb64fd,2022-09-18 04:42:15,Jonas Jenwald,"[api-major] Update the minimum supported browsers/environments

In the `legacy`-builds we (obviously) support the currently maintained Firefox ESR version, and looking at the [release history](https://wiki.mozilla.org/Release_Management/Calendar) those are officially supported (by Mozilla) for about 1-1.5 years.
However, for non-Firefox browsers the `legacy`-builds currently attempt to ""support"" browsers that are approximately *three* years old.[1] Historically, in the PDF.js project, trying to support old browsers have caused some maintenance problems and even delayed adoption of new web-platform features/functionality.

To lessen the support burden, given that the primary purpose of the PDF.js library is still to develop the *built-in* Firefox PDF Viewer, this patch proposes that the upcoming *major* release changes the minimum supported browsers/environments as follows:
 - Chrome 85, which was released on 2020-08-25; see https://en.wikipedia.org/wiki/Google_Chrome_version_history
 - Firefox ESR (as before); see https://wiki.mozilla.org/Release_Management/Calendar
 - Safari 14, which was released on 2020-09-16; see https://en.wikipedia.org/wiki/Safari_version_history#Safari_14
 - Node.js 14 (as before), which is now explicitly listed to prevent it from accidentally breaking; see https://en.wikipedia.org/wiki/Node.js#Releases

---
[1] In older browsers some functionality may not be available and generally we'll ask users to update to a modern browser when bugs, specific to old browsers, are being reported.",False
afabbc28c52ff74fa8ddca5b36c2e005094415e1,2022-09-17 19:59:19,Jonas Jenwald,"Temporarily stop listing the official Chrome extension in the main README

The [official Chrome extension](https://chrome.google.com/webstore/detail/pdf-viewer/oemmndcbldboiebfnladdacbdfmadadm) has unfortunately not been updated for *three years*, which means that it's currently missing out on years worth of bug fixes, performance improvements, and new features.
In particular, the Chrome extension suffers from a known bug with non-embedded standard fonts; see issue 13669 for details.

For the time being, this patch proposes that we *temporary* make the following changes:
 - Remove the mention of the official Chrome extension from the main README, since it seems unfortunate to somewhat prominently recommend users an old and partially non-working extension.
 - Don't run the `gulp lint-chromium` task as part of the CI, since in addition to the official extension not having been updated its code is also not being actively maintained.[1]

Once the official Chrome extension has been updated, and it's being actively maintained again, this patch should be simple enough to revert.

---
[1] The last commits, which aren't e.g. linting or general code-maintenance related, happened a year ago now.",False
2f3417a5904ff3431378f5f862d8e173f5627056,2022-09-16 13:49:05,Jonas Jenwald,"Remove the `enableScripting`-parameter from the component examples (PR 13816 follow-up)

This became unnecessary with PDF.js version `2.11.338`, which was relasesed almost a year ago and is no longer supported.",False
bcdf161967b85760b195a9039b3e7d4d2be61446,2022-09-16 02:26:44,Jonas Jenwald,"Merge pull request #15445 from Snuffleupagus/issue-15443

Extend `getSupplementalGlyphMapForCalibri` with more entries (issue 15443)",True
7a19def34c5382e32a23c47a8f159a56b113df8c,2022-09-16 01:49:16,Jonas Jenwald,Extend `getSupplementalGlyphMapForCalibri` with more entries (issue 15443),False
9bfd997c1244fc01dc77ae6be025afd7b2c024e2,2022-09-15 16:41:06,Jonas Jenwald,"Merge pull request #15442 from Snuffleupagus/issue-15441

Extend `getGlyphMapForStandardFonts` with some quote-entries (issue 15441)",True
2f2ecad8fd0881c774720f5e5e7f6641e56c8f97,2022-09-15 15:07:20,Jonas Jenwald,Extend `getGlyphMapForStandardFonts` with some quote-entries (issue 15441),False
c21d00ef44af86b2fcc4338aa6c6aa752afaa0c6,2022-09-14 14:02:01,Jonas Jenwald,"Merge pull request #15430 from srmagura/webpack5

[api-minor] Use `new Worker()` syntax in webpack entrypoint",True
1c2d200918563a6b5260822a82b3d2adf9811fbe,2022-09-13 20:42:00,Sam Magura,"[api-minor] Use new Worker() syntax in webpack entrypoint

This requires Webpack 5 and will break for anyone using Webpack 4.
worker-loader no longer needs to be installed.",False
5e5aa9fb691995cab707434e8a6ccc7df078a886,2022-09-13 19:27:54,Jonas Jenwald,"Merge pull request #15339 from Snuffleupagus/enable-editor

[api-major] Enable editing by default",True
3c6b3b55c763fbbb45d56404a055ff32f52c3c37,2022-09-13 17:48:38,Jonas Jenwald,"Move the `errorWrapper` definition in the `getViewerConfiguration` function

Similar to how we handle e.g. the ""Open File""-buttons in non-GENERIC builds, we can handle the `errorWrapper` definition in the same way.",False
0988915d0656f92faa7c711c6abecfffeecfa8a7,2022-09-13 17:48:23,Jonas Jenwald,"Only define the `validateFileURL` variable in GENERIC builds

There's no point in having this variable defined (implicitly) as `undefined` in e.g. the Firefox PDF Viewer.
By defining it with `var` and using an ESLint ignore, rather than `let`, we can move it into the relevant pre-processor block instead. Note that since the entire viewer-code is placed, by Webpack, in a top-level closure this variable will thus not become globally accessible.",False
5a6cdffb4b5f95e652e50015633aecf7b49a80f2,2022-09-13 15:11:33,Jonas Jenwald,"Merge pull request #15431 from Snuffleupagus/bug-1790552

Disable the editing-indicator, in the document title, during printing (bug 1790552, PR 15351 follow-up)",True
00aef590cf738bf4b4352efc7086c0cbb2ac97f8,2022-09-13 15:03:24,Jonas Jenwald,"Disable the editing-indicator, in the document title, during printing (bug 1790552, PR 15351 follow-up)",False
3e8394ee33c01fa4996aa34831f223117b4b1ef6,2022-09-12 18:28:31,Jonas Jenwald,"[api-major] Enable editing by default

Note that this patch *at least* shouldn't land until both [bug 1784272](https://bugzilla.mozilla.org/show_bug.cgi?id=1784272) and [bug 1785248](https://bugzilla.mozilla.org/show_bug.cgi?id=1785248) are fixed.",False
493bb65005202678c5fa803859dcf70cbb6e37a6,2022-09-12 18:21:55,calixteman,"Merge pull request #15425 from Snuffleupagus/cursor-failed-fullscreen

Don't try to update the cursorTool when switching to PresentationMode failed",True
2d1d64b214cacfc905ef419eebcedca2589f3548,2022-09-12 17:29:45,calixteman,"Merge pull request #15416 from calixteman/buttons_telemetry

Add some telemetry to know how often the buttons in the secondary toolbar are used (bug 1789883)",True
71f8680d665a99bd455ffd3c7190c7a7f55b1060,2022-09-12 17:06:37,Jonas Jenwald,"Don't try to update the cursorTool when switching to PresentationMode failed

Currently this may print an Error message in the console, and while nothing breaks (since no actual Error is thrown) we should probably avoid this.",False
05e4aed787db7f9a92dc803ea69cf78faa100e1e,2022-09-12 16:07:48,Calixte Denizet,Add some telemetry to know how often the buttons in the secondary toolbar are used (bug 1789883),False
f63d584cb10ce2846f849f3bed93d4ba343d1f25,2022-09-10 17:07:04,Tim van der Meij,"Merge pull request #15414 from Snuffleupagus/mv-PDFViewer

Remove the abstract `BaseViewer`-class",True
ae12a219d1946edff565a0fd81f1398584635ae6,2022-09-10 17:01:47,Tim van der Meij,"Merge pull request #15420 from Snuffleupagus/issue-15419

Send the `verbosity` when using a workerPort (issue 15419)",True
a274f63d50ebcd25efe4973283ded17fa1428fd4,2022-09-09 22:24:37,Jonas Jenwald,"Merge pull request #15421 from Snuffleupagus/separator-followup

Fix the visibility of a separator in the secondaryToolbar (PR 15391 follow-up)",True
4189a8567e243edb88586d47675b2a3ebbc46c8e,2022-09-09 21:20:29,Jonas Jenwald,"Fix the visibility of a separator in the secondaryToolbar (PR 15391 follow-up)

After the changes in PR 15391 one separator may now become visible too soon when the viewer is narrow, applies e.g. to the MOZCENTRAL viewer, since the wrong CSS class is being used.
The reason that this happens is that only the GENERIC viewer includes the ""openFile""-buttons, and we thus need the separator to also be conditionally defined.",False
d846b8601ee509e764dddacf6374284fef0ce552,2022-09-09 15:17:26,Jonas Jenwald,"Send the `verbosity` when using a workerPort (issue 15419)

This *should* fix issue 15419, but given the lack of a runnable example it's difficult to know for sure.",False
a21ce7ac8b8f7ff0533a8f46e2a1a99b458bcd91,2022-09-09 14:48:15,Jonas Jenwald,"Merge pull request #15418 from Snuffleupagus/pr-15319-followup

Don't listen for window resolution changes in old browsers (PR 15319 follow-up)",True
c36205f10d8e6dbefeba62fe6d6f2f184135a414,2022-09-09 14:09:35,Jonas Jenwald,"Don't listen for window resolution changes in old browsers (PR 15319 follow-up)

This is a slightly speculative change, based on something that I happened to notice while browsing MDN, to hopefully prevent PDF.js from outright breaking in older browsers.
According to the following information on MDN, Safari didn't implement support for the necessary features until version 14:
 - https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/change_event#browser_compatibility

Given the browsers that we currently support only older versions of Safari should be affected, hence it seems reasonable to simply disable the functionality rather than trying to polyfill it.
(It's interesting how it's very often Safari which is *much* slower than the other browsers at implementing new features.)",False
21fe5017bb6f6fc470f6d0a34bab02efa0900cd9,2022-09-08 16:08:17,Jonas Jenwald,"Remove the abstract `BaseViewer`-class

After the changes in PR 14112 the `PDFViewer`-class is now ""identical"" to the `BaseViewer`-class and the `PDFSinglePageViewer`-class is just a very thin wrapper around the `BaseViewer`-class.
Hence we can rename these files, and also remove the abstract `BaseViewer`-class, which helps reduce some unnecessary ""closures"" in the *built* viewer.

*Please note:* These changes are made in two separate commits, to allow GitHub to preserve `blame` for the affected files.",False
6dc4c994b8f848ae2ad128fc0e516cc6e4c1cda1,2022-09-08 16:08:17,Jonas Jenwald,"Remove the abstract `BaseViewer`-class

After the changes in PR 14112 the `PDFViewer`-class is now ""identical"" to the `BaseViewer`-class and the `PDFSinglePageViewer`-class is just a very thin wrapper around the `BaseViewer`-class.
Hence we can rename these files, and also remove the abstract `BaseViewer`-class, which helps reduce some unnecessary ""closures"" in the *built* viewer.

*Please note:* These changes are made in two separate commits, to allow GitHub to preserve `blame` for the affected files.",False
b0a021d2cc3106c43d95f6905e11700607f683cf,2022-09-08 16:05:08,calixteman,"Merge pull request #15413 from calixteman/items_size

Set a display value for the secondary toolbar buttons",True
f8ae49d20b071c19ce881f8cd4d8802611b8d0f3,2022-09-08 15:49:21,Calixte Denizet,"Set a display value for the secondary toolbar buttons

and remove a useless property: visibleSmallView.",False
e56c30eb59f302b450deebaab68242a84a17722e,2022-09-08 15:48:08,Calixte Denizet,Move 'presentation mode' and 'bookmarks' buttons in the secondary toolbar (bug 1789082),False
6852001b02bfabc905a874d72989d000e69419f2,2022-09-07 15:18:27,calixteman,"Merge pull request #15384 from calixteman/icons

Update some icons in the toolbar (bug 1739965)",True
90c69876cab44e6ae3052d871dc216e2656e888e,2022-09-07 14:15:03,Calixte Denizet,Update some icons in the toolbar (bug 1739965),False
af6aacfc0eaa70f254cd6158e5cd9cbc23fb13cf,2022-09-07 00:01:03,Jonas Jenwald,"Merge pull request #15398 from Snuffleupagus/more-optional-chaining

Use more optional chaining in the code-base",True
95e3f5d49510bfa3425d7bfb9ce8be48deac30c0,2022-09-06 17:51:52,Jonas Jenwald,"Merge pull request #15402 from Snuffleupagus/rm-telemetry-tagged

Remove the ""tagged"" telemetry-reporting",True
c70ceecff40275439516a89f54d69f24db8538f3,2022-09-06 16:30:44,Jonas Jenwald,"Remove the ""tagged"" telemetry-reporting

Given that this is no longer being recorded in Firefox, it shouldn't be necessary to keep the associated code in the default viewer.",False
b4b9ce83ed8be7b2b5b07e966e5606329a1ae838,2022-09-06 13:57:37,Jonas Jenwald,"Merge pull request #15397 from Snuffleupagus/getEexecBlock-empty

Fallback to a standard font when a Type1 font program is empty (issue 15292)",True
38ee28b1d37743d0fa1a7c2093c972337e256532,2022-09-05 19:11:53,Jonas Jenwald,"Use more optional chaining in the code-base

This patch updates a bunch of older code, that makes conditional function calls, to use optional chaining rather than `if`-blocks.

These mostly mechanical changes reduce the size of the `gulp mozcentral` build by a little over 1 kB.",False
947d390421b61dedfcb79c209d49e43af0d05dbd,2022-09-05 15:37:19,Jonas Jenwald,"Fallback to a standard font when a Type1 font program is empty (issue 15292)

*Please note:* This is only a, hopefully generally helpful, work-around rather than a proper solution to issue 15292.

There's something that's ""special"" about the Type1 fonts in the referenced PDF document, since we don't manage to find any actual font programs and thus cannot render anything.
Given that it shouldn't make sense for a Type1 font program to ever be empty, since that means that there's no glyph-data to render, we simply fallback to a standard font to at least try and render *something* in these rare cases.",False
9578152ae4efde4ba4aeb61c0676b94ba75dd50c,2022-09-04 18:42:10,Jonas Jenwald,"Merge pull request #15392 from Snuffleupagus/issue-15352

Don't allow `adjustToUnicode` to extend a built-in /ToUnicode map (issue 15352)",True
72375ed652c4a2adfe8e271533259ed92dee8c78,2022-09-04 18:00:22,calixteman,"Merge pull request #15395 from calixteman/15340

Don't replace cr by a white space when the last char on the line is an ideographic char",True
6c6f6fb2b89839e8ed5f57dc1d63f64a8686f393,2022-09-04 17:51:05,Calixte Denizet,Don't replace cr by a white space when the last char on the line is an ideographic char,False
e3874dab7c1e2b725af62e759aa8d37c5cb314aa,2022-09-04 17:22:23,Tim van der Meij,"Merge pull request #15394 from Snuffleupagus/update-packages

Update packages and translations",True
a65cc8d26d9f0136086443f355d715f5e00a92f4,2022-09-04 13:46:40,Jonas Jenwald,Update l10n files,False
21042371e62fa962264d47dc1579eb84a4021fc5,2022-09-04 13:46:40,Jonas Jenwald,Update npm packages,False
12d60e0acf1d1fe3130df971b397555df4003136,2022-09-04 02:41:42,Jonas Jenwald,"Don't allow `adjustToUnicode` to extend a built-in /ToUnicode map (issue 15352)

Given that the change in PR 13393 was slightly speculative, given the lack of test-cases, let's just revert part of that to fix the referenced issue.
Based on a quick look at old issues and existing test-cases, it seems that most (if not all) PDF documents that benefit from using the font-data in this way lack any /ToUnicode maps which should mean that they're unaffected by these changes.",False
50d72fc111683ac3ee39a7678c9dd6afe94f08e6,2022-09-03 16:56:06,Tim van der Meij,"Merge pull request #15377 from Snuffleupagus/SetOCGState

[api-minor] Add basic support for the `SetOCGState` action (issue 15372)",True
d16f5911835163f92dd86bd1c8043047c4645eff,2022-09-03 16:51:28,Tim van der Meij,"Merge pull request #15390 from Snuffleupagus/rm-bower

Remove Bower support in `pdfjs-dist`",True
5b903a6e2d427534deee104a2264bfd299cc61e0,2022-09-03 16:35:59,Jonas Jenwald,"Remove Bower support in `pdfjs-dist`

Given that the official Bower website, since almost five years, has been advising users to utilize other tools it doesn't seem entirely necessary to keep including the `bower.json` file in the `pdfjs-dist` repository; see e.g. https://bower.io/blog/2017/how-to-migrate-away-from-bower/",False
783c722661b281e5492fa16807648218b7e9837b,2022-09-03 16:26:38,Tim van der Meij,"Merge pull request #15360 from Snuffleupagus/Popup-IGNORE_TYPES

Properly ignore PopupAnnotations with custom `trigger`-elements",True
41c14f84dd96048a68b4c03d59bff4b5c0d54629,2022-09-03 15:59:14,Tim van der Meij,"Merge pull request #15388 from Snuffleupagus/rm-browserify

Remove the `browserify` example",True
2075800828ddc4d9498dd01b299097e4c9c17a94,2022-09-02 21:45:42,Jonas Jenwald,"Remove the `browserify` example

This patch proposes removing the `browserify` example for the following reasons:
 - The last `browserify` release was almost two years ago, according to both https://github.com/browserify/browserify/releases and https://www.npmjs.com/package/browserify?activeTab=versions
 - The project no longer seems to be actively maintained, since so far this year there's only been *a single* (seemingly trivial) patch merged; see https://github.com/browserify/browserify/commits/master
 - Because of the previous points `browserify` doesn't support modern and up-to-date JavaScript features, as evident from e.g. issue 14731 and multiple issues found in https://github.com/browserify/browserify/issues
 - Our `browserify` example is most likely not very commonly used, judging by the very low volume of issues/PRs related to it. Looking at the `git` history of that example the only changes have been lint- or maintenance-related.[1]
 - Providing an example for a framework that's no longer actively maintained doesn't seem like a good idea in general, since we probably don't want to steer users towards using (possibly) older frameworks.
 - Given that we've never used `browserify` in the PDF.js project, it's also quite difficult to provide support for the example.

---
[1] It's interesting to compare with the `webpack` example, since that's generated both issues *and* also PRs (for missing features) from users.",False
c503006b2e3fd7db905d213b85d4578cd8d612f7,2022-09-02 21:28:00,calixteman,"Merge pull request #15386 from calixteman/text_cursor

[Editor] Change the cursor when we switch to FreeText mode (bug 1787297)",True
1b14b06e4c2d6f2d3283251373bd01ce382faa1c,2022-09-02 18:47:24,Calixte Denizet,[Editor] Change the cursor when we switch to FreeText mode (bug 1787297),False
51035194d97de8f7c7a26dc27c82db4258ab6896,2022-09-02 16:58:12,calixteman,"Merge pull request #15385 from calixteman/editor_icons

Update editing icons (bug 1785248)",True
ec165abfa13d6e8aa246c758b4cbfd2ca4e8094d,2022-09-02 16:12:25,Calixte Denizet,Update editing icons (bug 1785248),False
eab411a3797a2f23f099f68bd637a39aacad441b,2022-09-02 13:06:02,calixteman,"Merge pull request #15378 from calixteman/editor_strings

[Editor] Update some strings (bug 1787299)",True
3043423c82012820ecab647b5b9e6d641ef438ae,2022-09-02 00:08:07,calixteman,"Merge pull request #15381 from calixteman/rm_leftover

[Editor] Remove some useless code (#15373 follow-up)",True
c4aa00bee120ef08762eed03e3bebf0d26010468,2022-09-01 23:04:30,Calixte Denizet,[Editor] Remove some useless code (#15373 follow-up),False
b8fa7890224136b0c3614b005295c0d26485e515,2022-09-01 21:32:17,Calixte Denizet,[Editor] Update some strings (bug 1787299),False
cc4baa2fe9e49d69e06b25a1d2bf46c8fa3b0e39,2022-09-01 21:04:24,Jonas Jenwald,"[api-minor] Add basic support for the `SetOCGState` action (issue 15372)

Note that this patch implements the `SetOCGState`-handling in `PDFLinkService`, rather than as a new method in `OptionalContentConfig`[1], since this action is nothing but a series of `setVisibility`-calls and that it seems quite uncommon in real-world PDF documents.

The new functionality also required some tweaks in the `PDFLayerViewer`, to ensure that the `layersView` in the sidebar is updated correctly when the optional-content visibility changes from ""outside"" of `PDFLayerViewer`.

---
[1] We can obviously move this code into `OptionalContentConfig` instead, if deemed necessary, but for an initial implementation I figured that doing it this way might be acceptable.",False
e9bdbe45744a3db68b4728c0b6eb326162c82ef3,2022-08-31 20:23:16,calixteman,"Merge pull request #15373 from calixteman/copy_paste

[Editor] Use the global clipboard for the copy/paste/cut operations",True
372d4d64e3472426680119540d10cd4c46509ab2,2022-08-31 20:02:19,Calixte Denizet,"[Editor] Use the global clipboard for the copy/paste/cut operations

It slightly helps to reduce the code size and its complexity.
But the cool thing is that it allows to copy/paste some anntations from a pdf
to an other.",False
54d3b644973f91969deb7067a5c37e45f64ff535,2022-08-31 14:48:08,calixteman,"Merge pull request #15369 from calixteman/update_params

[Editor] Avoid to update default params too early",True
e91d67563f99c08a56e77ca914aaf8666404f1d8,2022-08-31 13:58:58,Calixte Denizet,[Editor] Avoid to update default params too early,False
1865bb6526d5f92f559a2d2397847e97e1058a3f,2022-08-31 01:43:29,Jonas Jenwald,"Merge pull request #15368 from Snuffleupagus/issue-15367

[api-minor] Support Named-actions in the outline (issue 15367)",True
216b86a082c604719c34615f22911c2e93dcf87f,2022-08-30 22:17:45,Jonas Jenwald,"[api-minor] Support Named-actions in the outline (issue 15367)

Apparently this is implemented in e.g. Adobe Reader, and the specification does support it, however it cannot be commonly used in real-world PDF documents since it took over ten years for this feature to be requested.",False
0ecf6458eec6a45ce7ffa14711ef13d3f21c539f,2022-08-29 20:02:47,Jonas Jenwald,"Properly ignore PopupAnnotations with custom `trigger`-elements

A number of Annotation-types are currently creating their own PopupAnnotations, since they need to use a custom `trigger`-element. However, because of where that check is currently implemented[1] we end up attaching empty/unused containers for those PopupAnnotations to the DOM[2]; see e.g. the `annotation-line.pdf` file in the test-suite for one example.

By instead moving the types-check into the `PopupAnnotationElement` constructor, we can completely skip those PopupAnnotations that are being explicitly handled elsewhere.
Note that I don't *believe* that this is a new issue, although I've not tried to bisect it, but this likely goes back quite some time (possibly even as far as PR 8228).

---
[1] In the `PopupAnnotationElement.render` method.

[2] Please note that the actual Popup-element *itself* isn't being attached/rendered here, just its container which by itself serves no purpose as far as I can tell.",False
86370bd5c5945789491c8cc4e8cf40951e6b1cde,2022-08-28 22:51:45,Tim van der Meij,"Merge pull request #15286 from Snuffleupagus/rm-deprecated

[api-major] Remove (most of) the remaining `deprecated` code",True
7b7b54ce0f609e41e44f19f8cafe042992c50b6c,2022-08-28 22:43:33,Tim van der Meij,"Merge pull request #15259 from Snuffleupagus/rm-enhanceTextSelection

[api-major] Remove the `enhanceTextSelection` functionality (PR 15145 follow-up)",True
78f24e5535f29a4c5a993649fcb349522d68c8db,2022-08-28 18:35:00,Jonas Jenwald,"[api-major] Remove (most of) the remaining `deprecated` code

There's three notable exceptions here:
 - The `saveDocument` one is converted into a permanent `warn`, since it still works when the `annotationStorage` is empty although it's (obviously) less efficient than `getData`.
 - The `fallbackWorkerSrc` functionality (for browsers), since just removing it would risk too much third-party breakage.
 - The SVG back-end, since a final decision is yet to be made. (It might be completely removed, or left as-is in an essentially ""frozen"" state.)",False
d3005603e18148ea6e2f9bc9ce808ccbfd6ba69e,2022-08-28 18:35:00,Jonas Jenwald,"Move the `saveDocument` method, within the `PDFDocumentProxy`/`WorkerTransport` classes

To improve discoverability, since these methods are very closely related, move `saveDocument` to just after `getData` instead.",False
571ce13dd670385b9c5202f4a45cd0f64c38ceff,2022-08-28 18:34:47,Jonas Jenwald,"[api-major] Remove the `enhanceTextSelection` functionality (PR 15145 follow-up)

For the `gulp mozcentral` command, this reduces the size of the *built* `pdf.js` file by `> 10` kB.",False
3f8b5449e847d787a86f789d188185c777390d2a,2022-08-28 17:18:00,Tim van der Meij,"Merge pull request #15357 from timvandermeij/bump

Bump versions in `pdfjs.config`",True
eba4da5802d87c99cb4ee0028355951fff4094bb,2022-08-28 17:04:57,Tim van der Meij,Bump versions in `pdfjs.config`,False
172ccdbe5b4b0e3f77e37749b4e87bb00a087daf,2022-08-28 16:34:11,Tim van der Meij,"Merge pull request #15356 from Snuffleupagus/Node-amend-compat-info

Update the Node.js `atob`/`btoa` compatibility info",True
ca823d1bbc8df82fa400cbcbe0f0dbb399b65abb,2022-08-28 16:28:02,Jonas Jenwald,"Update the Node.js `atob`/`btoa` compatibility info

Given that Node.js has finally implemented native support for `atob`/`btoa`, it can't hurt to update the comments in `src/shared/compatibility.js` so that we don't forget to remove the polyfills once Node.js version `16` becomes the lowest supported LTS release; see
 - https://developer.mozilla.org/en-US/docs/Web/API/atob#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/API/btoa#browser_compatibility",False
d62cce455f2226b84e02e381bc6ab37e5b991894,2022-08-27 17:34:06,Tim van der Meij,"Merge pull request #15349 from Snuffleupagus/bug-1787295

[editor] Remove the `editorNone` toolbar button (bug 1787295)",True
c5b9e9aef814370b737d1c6627f79a082a2ee6ea,2022-08-27 17:22:07,Tim van der Meij,"Merge pull request #15351 from Snuffleupagus/bug-1785854

[api-minor][editor] Indicate, in the title, if the document has been edited (bug 1785854)",True
d715094383136a6feda0b219c211ba6d81f02f8b,2022-08-27 16:46:31,Tim van der Meij,"Merge pull request #15346 from Snuffleupagus/deprecated-imageLayer

[api-minor] Deprecate the `imageLayer` functionality",True
44694534254a0c198f428f5b0ab95b47f6e5c53e,2022-08-27 16:40:39,Tim van der Meij,"Merge pull request #15341 from Snuffleupagus/PasswordPrompt-cancel-button

Improve handling of the ""Cancel""-button in the password dialog",True
a1cc9238b0b16ae036f660ceeaebf1d2272db5ab,2022-08-27 16:38:26,Tim van der Meij,"Merge pull request #15343 from Snuffleupagus/AbortController-unconditional

Use `AbortController` unconditionally with the Fetch API",True
cb8d56f988031e8636b91d3c72c7fa741dee576e,2022-08-27 16:36:41,Tim van der Meij,"Merge pull request #15344 from Snuffleupagus/prefer-array-find

Enable the `unicorn/prefer-array-find` ESLint plugin rule",True
4c63a9103651f59336d15d61f3e67078ba0d3e12,2022-08-27 14:48:19,Jonas Jenwald,"Merge pull request #15355 from Snuffleupagus/bug-1787456

Always focus the `viewerContainer` when entering PresentationMode (bug 1787456)",True
d93d21fdfd5a0e5fa4eef390e7c59319c56611ad,2022-08-27 01:12:06,Jonas Jenwald,"Always focus the `viewerContainer` when entering PresentationMode (bug 1787456)

This fixes the regression in [bug 1787456](https://bugzilla.mozilla.org/show_bug.cgi?id=1787456), assuming that it should be handled on the PDF.js side.",False
f2b5210b368e7ee4eee42d0e22ade0913bf904e1,2022-08-27 00:18:12,Jonas Jenwald,"Merge pull request #15347 from federicobond/fix-types

Update types in PDFPageViewOptions to properly declare optional parameters",True
19182d5f25a66f1b822fe491db59959d8ea6d2ab,2022-08-26 12:55:05,Jonas Jenwald,[editor] Remove the `editorNone` toolbar button (bug 1787295),False
151dfc9a256f0eedd10e22c0a1971056364a398f,2022-08-26 03:50:58,Jonas Jenwald,"[api-minor][editor] Indicate, in the title, if the document has been edited (bug 1785854)

Note that this patch prepends the document title with ""* "", rather than only ""*"" as suggested in the bug, since there's nothing that says that a PDF document cannot specify a title[1] beginning with an asterisk. To reduce possible confusion, having a space between the ""editing marker"" and the actual document title thus cannot hurt as far as I'm concerned.

In order to notify the viewer when all `AnnotationEditor`s have been removed, we utilize the existing `onAnnotationEditor`-callback to allow the document title to be updated as necessary.

Finally, this patch makes the following (slightly unrelated) changes:
 - Rename the `AnnotationStorage.removeKey` method to just `AnnotationStorage.remove` instead. This is consistent with e.g. the `has`-method and should suffice to explain what it does.
 - Remove the `AnnotationStorage.hasAnnotationEditors` getter, since the viewer now tracks the necessary state internally. This avoids unnecessarily having to iterate through the `AnnotationStorage`-instance when saving/printing the document.

---
[1] Using either an /Info dictionary or a /Metadata stream.",False
76f665d57fab7da08445a56c1b36fd746887ee75,2022-08-26 02:23:10,Jonas Jenwald,"Merge pull request #15348 from Snuffleupagus/bug-1787296

[editor] Change the focus-outline to blue (bug 1787296)",True
a4bfa7d18be80f43b5c32f31ef4f18b8a403b72e,2022-08-26 02:10:20,Jonas Jenwald,[editor] Change the focus-outline to blue (bug 1787296),False
df912e9ab6893208d8dd945dad751676db16f7c7,2022-08-25 22:06:05,Federico Bond,Update types in PDFPageViewOptions to properly declare optional parameters,False
118da8e85d9cb28c40252e6e94bee0bd2374b64f,2022-08-25 16:36:01,Jonas Jenwald,"[api-minor] Deprecate the `imageLayer` functionality

This functionality has never been used anywhere in the PDF.js library/viewer itself, since it was added in 2013.
Furthermore this functionality is, and has always been, *completely untested* and also unmaintained.
Finally, there's (at least) one old issue about `appendImage` not returning the correct position; see issue 4182.

All-in-all, it seems that keeping very old, untested, unmaintained, and partially broken code around probably isn't what we want here.
(On the off-chance that any future a11y-work requires getting access to image-positions, it'd likely be much better to re-implement the necessary functionality from scratch and also make sure that it's properly tested from the beginning.)",False
3c8aeb445a9db53de05c167ba4ce25ba9e3156aa,2022-08-25 16:36:00,Jonas Jenwald,"Remove the `CanvasGraphics.getCanvasPosition` method

This old method, which is only used with the `imageLayer` functionality, is essentially just a re-implementation of the existing `Util.applyTransform` method.",False
723584dd4f6ac33936631e2becc925cda9496a41,2022-08-24 20:16:26,Jonas Jenwald,"Enable the `unicorn/prefer-array-find` ESLint plugin rule

Please find additional information here:
 - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find#browser_compatibility
 - https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-array-find.md",False
b0a73a9388afad233ea207c9cfeb3cbe132fc5eb,2022-08-24 15:43:09,Jonas Jenwald,"Use `AbortController` unconditionally with the Fetch API

Given the browsers that we currently support in the PDF.js project and the MDN compatibility data, see links below, it should no longer be necessary to check for the availability of `AbortController` before using it.
 - https://github.com/mozilla/pdf.js/wiki/Frequently-Asked-Questions#faq-support
 - https://developer.mozilla.org/en-US/docs/Web/API/AbortController#browser_compatibility",False
de14b82af9675323447526a680d8983bf5b13939,2022-08-22 14:47:08,Jonas Jenwald,"Improve handling of the ""Cancel""-button in the password dialog

The password dialog can be cancelled in three different ways:
 - By clicking on its ""Cancel""-button.
 - By pressing the Escape-key.
 - By force-opening another dialog, although this shouldn't happen in practice.

Here the ""Cancel""-button case is slightly special since it'll trigger `PasswordPrompt.#cancel` *twice*, first directly via the click and secondly via the ""close"" event on the `dialog`-element.
While this shouldn't, as far as I know, cause any bugs it's nonetheless inconsistent with the other cases outlined above. To improve this we can simply attempt to *close* the password dialog instead, and then rely on the ""close"" event to run the `PasswordPrompt.#cancel` method.",False
14e8167df98efd38e8e163932c04f2d5238c5ffa,2022-08-21 16:22:34,Tim van der Meij,"Merge pull request #15335 from Snuffleupagus/PasswordPrompt-activeCapability

Ensure that we don't try to re-open, or update the password-callback, when the password dialog is already open",True
81a700079fd9f953e7354c557cf0f7948fe24a49,2022-08-21 15:36:43,Tim van der Meij,"Merge pull request #15332 from Snuffleupagus/Babel-targets

[api-minor] Add the Babel `targets`-option to avoid transpiling code for unsupported browsers",True
255cc8b9eb9d6223a0ebf3055fa350ce24d4b1bf,2022-08-21 15:15:46,Tim van der Meij,"Merge pull request #15338 from Snuffleupagus/update-packages

Update packages and translations",True
635db46b0d70393ab4f9fcc7541bd80fbba4c2dd,2022-08-21 13:34:47,Jonas Jenwald,Update l10n files,False
1001ae547469c70554ab61584279f6c85f4bd7cb,2022-08-21 13:34:47,Jonas Jenwald,Update npm packages,False
6e3179994869d5713b3adabdea37966c3767b79b,2022-08-20 01:49:43,Jonas Jenwald,"[api-minor] Add the Babel `targets`-option to avoid transpiling code for unsupported browsers

Currently we simply use the Babel `preset-env` in the `legacy`-builds of the PDF.js library. This has the side-effect of transpiling the code for *very old* browsers/environments, including ones that we (since many years) no longer support which unnecessarily bloats the size of the `legacy`-builds.

For the CSS files we're only targeting *the supported browsers*, and it's thus possible to extend that to also apply to Babel.
One of the most significant changes, with this patch, is that we'll no longer polyfill `async`/`await` in the `legacy`-builds. However, this shouldn't be an issue given the browsers that we currently support in PDF.js; please refer to:
 - https://github.com/mozilla/pdf.js/wiki/Frequently-Asked-Questions#faq-support
 - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function#browser_compatibility",False
89840649d9fb79862e0b9d9d9971a2b4a4bf8a24,2022-08-19 23:40:37,Jonas Jenwald,"Ensure that we don't try to re-open, or update the password-callback, when the password dialog is already open

Currently in `disableWorker=true` mode it's possible that opening of password-protected PDF documents outright fails, if an *incorrect* password is entered. Apparently the event ordering is subtly different in the non-Worker case, which causes the password-callback to be updated *before* the dialog has been fully closed.
To avoid that we'll utilize a `PromiseCapability` to keep track of the state of the password dialog, such that we can delay both re-opening and (importantly) updating of the password-callback until doing so is safe.

This patch *may* also fix issue 15330, but it's impossible for me to tell.",False
1a007164f7538ce2b61a43c8d5164d4a17e4c7fa,2022-08-19 16:24:47,calixteman,"Merge pull request #15329 from calixteman/1782564

[api-minor][Annotations] charLimit === 0 means unlimited (bug 1782564)",True
c06c5f7cbd5546f704b26570201791e9388d8ed5,2022-08-19 14:58:28,Calixte Denizet,"[Annotations] charLimit === 0 means unlimited (bug 1782564)

Changing the charLimit in JS had no impact, so this patch aims to fix
that and add an integration test for it.",False
8f74fe6e1baf89a648e3a2b02d21f864238c2df0,2022-08-17 19:45:13,Jonas Jenwald,"Merge pull request #15327 from Snuffleupagus/bug-1785218

Correctly mimic the proper event-format in `AnnotationElement._setDefaultPropertiesFromJS` (bug 1785218)",True
5e126032ffd4596579b947005ccb5230effe7651,2022-08-17 19:14:27,Jonas Jenwald,"Correctly mimic the proper event-format in `AnnotationElement._setDefaultPropertiesFromJS` (bug 1785218)

*This is a follow-up to PR 14869.*

In the old code we're accidentally ""swallowing"" part of the event-details, which explains why the annotationLayer didn't render.
One thing that made debugging a lot harder was the lack of error messages, from the viewer, and a few `PDFPageView`-methods were updated to improve this situation.",False
b05010c3ebaec4bcc7fcfb3580ceedf152cffde0,2022-08-16 18:11:36,Jonas Jenwald,"Merge pull request #15325 from Snuffleupagus/issue-15324

Ignoring ""resize"" events during printing (issue 15324)",True
f669e5dd34c29846137bfc6c8633c1a76f0f1bfa,2022-08-16 17:21:35,Jonas Jenwald,"Ignoring ""resize"" events during printing (issue 15324)

This is a quick work-around, to prevent the viewer from breaking as a result of https://bugzilla.mozilla.org/show_bug.cgi?id=774398",False
518115fddc6db2c28752b8e9369c79377f521592,2022-08-15 22:26:31,Jonas Jenwald,"Merge pull request #15315 from Snuffleupagus/type1-parser-rm-closure

Remove the remaining closures in the `src/core/type1_parser.js` file",True
bf6593372b8a5a1ed3c2af58eda8a1f1c113df48,2022-08-15 22:25:29,Jonas Jenwald,"Merge pull request #15318 from Snuffleupagus/worker-small-fixes

A couple of small `PDFWorker` changes",True
44f6b763652cb2eef04df8a944c355dee1dc6880,2022-08-15 22:24:08,Jonas Jenwald,"Merge pull request #15319 from Snuffleupagus/bug-1784850

Refresh the viewer if the window resolution changes (bug 1784850)",True
4919dae2943e8021a3b543c659368442feb63022,2022-08-15 20:26:57,Jonas Jenwald,"Refresh the viewer if the window resolution changes (bug 1784850)

*Please note:* This probably fixes bug 1784850, however I don't have the necessary hardware to reproduce the situation described in https://bugzilla.mozilla.org/show_bug.cgi?id=1784850#c0

Unfortunately it doesn't, as far as I can tell, appear possible to detect *all* resolution changes with a single media query. Instead we have to update it, and its listener, on every resolution change as outlined in [this MDN example](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio#monitoring_screen_resolution_or_zoom_level_changes).",False
c02d0aa2cbf973dfe3213fd07b0a25e3c30b65ba,2022-08-15 15:47:48,Jonas Jenwald,"A couple of small `PDFWorker` changes

 - Remove the `typeof Worker` check, since all browsers have had `Worker` support for many years now; see https://developer.mozilla.org/en-US/docs/Web/API/Worker#browser_compatibility
   Furthermore the `new Worker(...)` call is wrapped in try-catch, which means that we'll still fallback to ""fake workers"" if necessary.

 - Limit the `fallbackWorkerSrc` handling, in the `PDFWorker.workerSrc` getter, to only GENERIC builds since that's the only place where it's defined anyway.",False
6a2c2a646f625500bdddbb2fdef8bc453627ea10,2022-08-14 16:20:26,Jonas Jenwald,"Remove the remaining closures in the `src/core/type1_parser.js` file

Given that the code is written with JavaScript module-syntax, none of this functionality will ""leak"" outside of this file with these change.
By removing this closure the file-size is decreased, even for the *built* `pdf.worker.js` file, since there's now less overall indentation in the code.",False
e6fe12743357bcf1108ed9dfeacde3fde31f34f0,2022-08-14 15:44:32,Tim van der Meij,"Merge pull request #15313 from Snuffleupagus/move-binarySearchFirstItem

Move `binarySearchFirstItem` back to the `web/`-folder (PR 15237 follow-up)",True
92edfb59f79109f7bed18dbf0e2107ea4f327332,2022-08-14 15:23:00,Tim van der Meij,"Merge pull request #15310 from Snuffleupagus/cff-parser-rm-closure

Remove the remaining closures in the `src/core/cff_parser.js` file",True
0024165f1ffae9ecd4812619d1c64e1dcab726b0,2022-08-14 15:08:17,Jonas Jenwald,"Move `binarySearchFirstItem` back to the `web/`-folder (PR 15237 follow-up)

This was moved into the `src/display/`-folder in PR 15110, for the initial editor-a11y patch. However, with the changes in PR 15237 we're again only using `binarySearchFirstItem` in the `web/`-folder and it thus seem reasonable to move it back there.
The primary reason for moving it back is that `binarySearchFirstItem` is currently exposed in the public API, and we always want to avoid that unless it's either PDF-related functionality or code that simply must be shared between the `src/`- and `web/`-folders. In this case, `binarySearchFirstItem` is a general helper function that doesn't really satisfy either of those alternatives.",False
2b66ed5feff813802eab764ccd8f7ea8e40f751e,2022-08-14 13:01:29,Jonas Jenwald,"Merge pull request #15311 from Snuffleupagus/text-a11y-removed-element

Don't add `aria-owns` attributes for non-existent elements (PR 15237 follow-up)",True
6c4561f3d875a900af332857f2fbf681036d8e3b,2022-08-14 01:22:38,Jonas Jenwald,"Don't add `aria-owns` attributes for non-existent elements (PR 15237 follow-up)

Currently when the `TextAccessibilityManager.enabled` method is called, we'll update `aria-owns` for any pre-existing elements. This obviously makes sense when e.g. zooming/rotating in the viewer, since the annotationLayer/annotationEditorLayer is kept in those cases.
However when the page is *fully* reset, e.g. as result of going out-of-view and thus being evicted from the cache, we still keep the `#textNodes`-Map around. This causes us to set the `aria-owns` attribute (in the textLayer) for an element that doesn't actually exist any more, which as far as I'm concerned seems incorrect. In this case the element will simply, as already implemented, be re-inserted when the annotationLayer/annotationEditorLayer renders again.",False
e5e756c0b449a3f2de46027c1d283bb104d2140a,2022-08-13 23:18:17,Jonas Jenwald,"Remove the remaining closures in the `src/core/cff_parser.js` file

Given that the code is written with JavaScript module-syntax, none of this functionality will ""leak"" outside of this file with these changes.
For e.g. the `gulp mozcentral` command the *built* `pdf.worker.js` file-size decreases `~2 kB` with this patch, and most of the improvement comes from having less overall indentation in the code.",False
b040d64a3cfa5b6a932406204b5106552a6ade0a,2022-08-13 18:55:29,Tim van der Meij,"Merge pull request #15300 from Snuffleupagus/viewer-export-constants

[GENERIC viewer] Export some viewer constants in the default viewer (issue 15294)",True
f212341d01c9ef79bd5feebef22812e432926a1a,2022-08-13 18:53:11,Tim van der Meij,"Merge pull request #15306 from Snuffleupagus/Type3-only-Path2D

Only compile Type3 glyphs when `Path2D` is supported",True
c81903d72d632f69225a3f10a535de46d71c1114,2022-08-13 18:35:17,Tim van der Meij,"Merge pull request #15309 from Snuffleupagus/function-rm-closure

Remove the remaining closure in the `src/core/function.js` file",True
9dcfdb9578fed74bbf7ba8fa59f25aef0d4c6623,2022-08-13 16:22:36,Jonas Jenwald,"Remove the remaining closure in the `src/core/function.js` file

Given that the code is written with JavaScript module-syntax, none of this functionality will ""leak"" outside of this file with these changes.
By removing this closure the file-size is decreased, even for the *built* `pdf.worker.js` file, since there's now less overall indentation in the code.",False
3cf31a8b17d46434cfc03369b413e2daa2743803,2022-08-12 19:52:37,calixteman,"Merge pull request #15307 from calixteman/role_comment

[Annotation] Add an aria role comment for FreeText annotations",True
2916910ea1a638b36ee97fa0081a49046e7dc93b,2022-08-12 19:29:21,Calixte Denizet,[Annotation] Add an aria role comment for FreeText annotations,False
6b4c2464ad596c7ca1463e800fb927a48a62540d,2022-08-12 18:34:56,calixteman,"Merge pull request #15237 from calixteman/annotation_a11y

[Annotations] Add some aria-owns in the text layer to link to annotations (bug 1780375)",True
f3163001139969ca5652ecb6a14f1389c9a34356,2022-08-12 18:05:26,Calixte Denizet,"[Annotations] Add some aria-owns in the text layer to link to annotations (bug 1780375)

This patch doesn't structurally change the text layer: it just adds some aria-owns
attributes to some spans.
The aria-owns attribute expect to have an element id, hence it's why it adds back an
id on the element rendering an annotation, but this id is built in using crypto.randomUUID
to avoid any potential issues with the hash in the url.
The elements in the annotation layer are moved into the DOM in order to have them in the
same ""order"" as they visually are.
The overall goal is to help screen readers to present to the user the annotations as
they visually are and as they come in the text flow.
It is clearly not perfect, but it should improve readability for some people with visual
disabilities.",False
e9e9fee833dbcec423c500b1e796f86ec4dfaaa0,2022-08-12 16:36:42,Jonas Jenwald,"Only compile Type3 glyphs when `Path2D` is supported

According to MDN `Path2D` is available in all browsers that we currently support, see https://developer.mozilla.org/en-US/docs/Web/API/Path2D#browser_compatibility
Hence only Node.js is currently lagging behind here, and requires that we keep the old code as a fallback in the `compileType3Glyph` function. However, there's an open PR in the `node-canvas` repository for adding `Path2D` support.

As far as I'm concerned, there's two possible solutions here:
 - We land this patch now, since it removes unnecessary code in e.g. the Firefox PDF Viewer, which means that compilation of Type3 glyphs will be disabled in Node.js until that PR is landed.[1]
   If users report bugs about Type3 glyphs looking ""inconsistent"" in Node.js and/or being slow to render, we could perhaps encourage them to upvote and otherwise help out getting that PR landed?

 - We wait for the mentioned PR to land *first*, before moving forward with this patch. Given that there's been no updates on that PR for almost two months, this alternative may possibly take a while.

---
[1] Note that Type3 fonts are first of all not very common in PDF documents, and secondly that compilation only applies specifically to Type3 glyphs that contain /ImageMask-data (i.e. not all Type3 fonts are affected).",False
b8bb1d67d4a8af8a98cd13c82045428b8326dee2,2022-08-11 19:52:12,Jonas Jenwald,"[GENERIC viewer] Export some viewer constants in the default viewer (issue 15294)

This exports the same constants as the viewer components, but in the default viewer. To avoid bloating the global-scope the constants are added to a new `PDFViewerApplicationConstants` object[1], which also allows us to skip this in builds where it's not actually needed (e.g. the Firefox *built-in* PDF Viewer).

*Please note:* I'm not completely sold on this idea, and thus wouldn't mind the patch being rejected, since we probably don't want to export every single viewer constant this way. (And it may seem a bit arbitrary, to users, why some constants are exported and others are not.)

---
[1] Somewhat similar to the existing `PDFViewerApplicationOptions` structure.",False
69462e5e146d3102a24e074896471639ab1df5d6,2022-08-11 19:52:07,Jonas Jenwald,"Export additional constants in the viewer components

In addition to the existing `LinkTarget` constant, used by the `PDFLinkService`-constructor, this patch exports the following constants in the viewer components:
 - `ScrollMode` and `SpreadMode`, since the `BaseViewer` has getters/setters which work with those constants.
 - `RenderingStates`, since that one may be helpful when using `PDFPageView` directly.",False
ab1297f0538c51e8e7ece037768e38a9991dcc37,2022-08-11 17:42:55,Jonas Jenwald,"Merge pull request #15299 from Snuffleupagus/getDocument-ArrayBuffer

Add *official* support for passing `ArrayBuffer`-data to `getDocument` (issue 15269)",True
dd95e4f85146616d7985e81aef944bbbe9c712af,2022-08-10 17:43:01,Jonas Jenwald,"Add *official* support for passing `ArrayBuffer`-data to `getDocument` (issue 15269)

While this has always worked, as a consequence of the implementation, it's never been officially supported.
In addition to adding basic unit-tests, this patch also introduces a couple of new JSDoc `@typedef`s in the API to avoid overly long lines.",False
e1e97c6edd8729e968bde47f60a1901e8e649901,2022-08-10 14:43:00,Jonas Jenwald,"Merge pull request #15279 from Snuffleupagus/firefox-rm-README

Remove the `extensions/firefox/README.mozilla` file (bug 1778567 follow-up)",True
cef2ac99e581ffe3b1aa34e5578a6608be22e80c,2022-08-10 13:57:37,calixteman,"Merge pull request #15298 from calixteman/ink_min_size

[Editor] Ensure an ink editor has the minimal required size after having been pasted",True
3eb11fafca814dac0b4ad25500ad72a5047e797b,2022-08-10 13:57:12,calixteman,"Merge pull request #15297 from calixteman/check_pointer_down

[Editor] Avoid creation of an editor on ""wrong"" clicks",True
63361dcfc775213c78d334992d607713456808d6,2022-08-10 13:45:23,Calixte Denizet,[Editor] Ensure an ink editor has the minimal required size after having been pasted,False
fa48e90e3c09f54dc0ecc1ad2ac3c0ba2ce3d08a,2022-08-10 13:44:23,Jonas Jenwald,"Merge pull request #15296 from Snuffleupagus/toolbars-reset

Move the `reset`-calls to occur last in the toolbar-constructors",True
71ca249d2bae862b1e56107d291041ed83088715,2022-08-10 13:35:04,Calixte Denizet,"[Editor] Avoid creation of an editor on ""wrong"" clicks",False
047522a34aca0f774edb8aff7142d157a23056bc,2022-08-10 02:09:38,Jonas Jenwald,"Move the `reset`-calls to occur last in the toolbar-constructors

By invoking the `reset` methods *last* in the `Toolbar`/`SecondaryToolbar`-constructors, we ensure that the ""toolbarreset""/""secondarytoolbarreset""-events are actually handle when the viewer loads. Note that previously those events were dispatched *before* the relevant event-listeners had been attached.
With this small change we can avoid inconsistent initial toolbar-state, specifically in the case when the viewer is *reloaded* (since Firefox keeps the HTML-state on ""soft"" reloads).",False
2b0b8cd6654a9d645a3dd1f494ef0135a24f3ae6,2022-08-10 02:09:07,Jonas Jenwald,Add more private properties/methods in `web/toolbar.js`,False
0079ce4ad07f54aae303534eeedb1b50d7e613b0,2022-08-10 01:17:21,calixteman,"Merge pull request #15295 from calixteman/disable_editing

[Editing] Disable buttons until the first page is rendered",True
fbce8786d0651118534f6975b025ffd5f62bfa84,2022-08-10 00:05:35,Calixte Denizet,[Editing] Disable buttons until the first page is rendered,False
63708a1a5be74a0fe871d2bc682c4bd5b7c67de4,2022-08-09 16:43:39,Jonas Jenwald,"Remove the `extensions/firefox/README.mozilla` file (bug 1778567 follow-up)

With the changes made in [bug 1778567](https://bugzilla.mozilla.org/show_bug.cgi?id=1778567), it no longer seems correct to overwrite the mozilla-central file.",False
589f72e32570dba402ea49d9382944a8f0da07a4,2022-08-09 03:06:52,calixteman,"Merge pull request #15290 from calixteman/ots_issue

Fix OTS issue with empty index (#15289)",True
04f78c935c0e1e97675e491b32147538c627de0e,2022-08-09 02:26:26,Calixte Denizet,Fix OTS issue with empty index (#15289),False
40f9f7e9097e1168e98f1e2987726c5c31693617,2022-08-07 18:07:39,Jonas Jenwald,"Merge pull request #15287 from calixteman/inserthtml

[Editor] Remove use of innerHtml",True
5e0ddfb0e617d6144150442228985a8e5afe996f,2022-08-07 17:09:41,Calixte Denizet,[Editor] Remove use of innerHtml,False
2363fc0e5ea78dbd21956a539b26abd430ce361c,2022-08-07 16:12:03,Tim van der Meij,"Merge pull request #15284 from Snuffleupagus/update-packages

Update packages and translations",True
38cf588eee10fe5f7110c005e26e205ec3980a85,2022-08-07 13:52:40,Jonas Jenwald,Update l10n files,False
887e893fc853933ec77f7cc73a270c85bf200227,2022-08-07 13:50:21,Jonas Jenwald,Update npm packages,False
2a84a3078bd679aac42c9140df4314e7e4a94b9d,2022-08-06 18:37:09,Tim van der Meij,"Merge pull request #15283 from Snuffleupagus/sort-PopupAnnotation

[api-minor] Sort PopupAnnotations already on the worker-thread (PR 11535 follow-up)",True
d55903764e627c362f738cabe995bf58a7830b7c,2022-08-06 18:04:03,Tim van der Meij,"Merge pull request #15281 from Snuffleupagus/getTransform

Remove `mozCurrentTransform`/`mozCurrentTransformInverse` usage",True
358a0607fe8ef005e1dfaf2336cef3245d43183e,2022-08-06 17:54:57,Jonas Jenwald,"Remove `mozCurrentTransform`/`mozCurrentTransformInverse` usage

These canvas-context properties are Mozilla-specific, and has obviously never been implemented anywhere else. Currently they are in the process of being removed, see [bug 1782651](https://bugzilla.mozilla.org/show_bug.cgi?id=1782651) and [bug 1294360](https://bugzilla.mozilla.org/show_bug.cgi?id=1294360), which in practice means that in e.g. Firefox Nightly the `addContextCurrentTransform`-function is now being used in the *built-in* PDF Viewer (which was obviously never intended).

We should thus be able to replace these Mozilla-specific properties with `CanvasRenderingContext2D.getTransform()`, which is available in all browsers that we currently support: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getTransform#browser_compatibility",False
0ebd1daf30048c4dec36b2107547976e5e9accd4,2022-08-06 17:47:55,Tim van der Meij,"Merge pull request #15261 from Snuffleupagus/issue-15260

Don't include `images/toolbarButton-editorInk.svg` in the `gulp components` build (issue 15260)",True
70bcaf63ba50d4be568f9e079232151670671d3e,2022-08-06 17:42:25,Tim van der Meij,"Merge pull request #15282 from Snuffleupagus/prefer-spread

Enable the ESLint `prefer-spread` rule",True
876a02a5048b89ee9eafe93f93ce8a61d88518dd,2022-08-06 15:12:45,Jonas Jenwald,"[api-minor] Sort PopupAnnotations already on the worker-thread (PR 11535 follow-up)

By doing this in the worker-thread this code will only need to run *once*, whereas currently re-rendering of a page forces this to be repeated (e.g. after it's been scrolled out-of-view and then back into view again).",False
f6db7975c5afb910f2d2245f0dbff712cedb31fd,2022-08-06 13:47:00,Jonas Jenwald,"Enable the ESLint `prefer-spread` rule

Note that in a couple of spots the argument could be `undefined` and there we simply disable the rule instead.

Please refer to https://eslint.org/docs/latest/rules/prefer-spread",False
d6d4653d807887d1365cf0f6cbaf8875a346ea73,2022-08-05 13:06:56,Jonas Jenwald,"Merge pull request #15275 from calixteman/textbox

[Editor] Remove some a11y properties only useful when a FreeText editor is edited",True
fce83f86562ee2fa765b596c5a27157b146d583a,2022-08-04 18:58:25,Calixte Denizet,[Editor] Remove some a11y properties only useful when a FreeText editor is edited,False
e88c90e8981a5221699bc405e16e82db97a3274b,2022-08-04 16:40:23,calixteman,"Merge pull request #15274 from calixteman/missing_annotation

[Editor] A pasted FreeText editor was missing when printing/saving",True
3c8d8f0d027c37778784d26df8d125ed08e7204a,2022-08-04 16:30:45,Calixte Denizet,"[Editor] A pasted FreeText editor was missing when printing/saving

When a FreeText editor is pasted then it hasn't an editorDiv yet when added
to the layer, hence it's empty.
So this patch just move the call to addToAnnotationStorage to ensure we've
what we need.",False
b985eaa98ce691658f75877280bf4398a078589a,2022-08-04 15:19:29,calixteman,"Merge pull request #15267 from calixteman/freetext_a11y

[Annotation] Add a div containing the text of a FreeText annotation (bug 1780375)",True
31155740c35f5b270ff6222682b013f53351d427,2022-08-04 14:44:05,Calixte Denizet,"[Annotation] Add a div containing the text of a FreeText annotation (bug 1780375)

An annotation doesn't have to be in the text flow, hence it's likely a bad idea
to insert its text in the text layer. But the text must be visible from a screen
reader point of view so it must somewhere in the DOM.
So with this patch, the text from a FreeText annotation is extracted and added in
a div in its HTML counterpart, and with the patch #15237 the text should be visible
and positioned relatively to the text flow.",False
5ad8bbe8cb0b6b1ab5728def9e12fb6d65f844e9,2022-08-04 13:41:46,Jonas Jenwald,"Merge pull request #15271 from calixteman/null_field

Skip unknown fields when calculating a value in using AFSimple_Calculate",True
6916fabd511778b488995a48bf19d56357c4adc6,2022-08-04 03:10:09,Calixte Denizet,Skip unknown fields when calculating a value in using AFSimple_Calculate,False
8bad06f1580f8235c0ab4038d9211587dd39a9b5,2022-08-03 21:32:18,calixteman,"Merge pull request #15268 from calixteman/bug1777693

Fix a typo in firefox print service (bug 1777693)",True
6c9e538f5621a554c867123c57b34a9493ec646a,2022-08-03 20:55:01,Calixte Denizet,Fix a typo in firefox print service (bug 1777693),False
4f6cd05a53e6c069bb4ebee469fda6437a0971af,2022-08-03 14:58:08,Jonas Jenwald,"Merge pull request #15264 from calixteman/editing_telemetry

[Editor] Add some telemetry to know how often the editing features are used (bug 1782254)",True
94f57e5dd7c6baea1096419722f96c171d92a296,2022-08-03 13:24:27,Calixte Denizet,[Editor] Add some telemetry to know how often the editing features are used (bug 1782254),False
159f853e061b95ec45c7f476f1193411025f05c1,2022-08-02 19:05:36,Jonas Jenwald,"Merge pull request #15263 from Snuffleupagus/issue-15262

Always set a border-radius for RadioButton annotations (issue 15262)",True
899fc29eefd9e36a503c1f47a7d0aca5a433da82,2022-08-02 17:28:20,Jonas Jenwald,Always set a border-radius for RadioButton annotations (issue 15262),False
44f77c9e82ac4760e43e3ab984af095bb6f83ad0,2022-08-02 13:56:46,Jonas Jenwald,"Don't include `images/toolbarButton-editorInk.svg` in the `gulp components` build (issue 15260)

Given that this image is intended specifically for the default viewer, we simply use the CSS preprocessor to remove the image reference in the `gulp components` build.
Considering that the issue only affects a CSS file, I don't believe that replacing the *just released* PDF.js version is actually necessary here.",False
803e7af5954b8d84f8dab2b632a3167c7fd14e46,2022-07-31 22:03:47,Jonas Jenwald,"Merge pull request #15253 from Snuffleupagus/update-Safari-compat

[api-minor] Update the minimum supported Safari version",True
ad11cea33c2346d867d098069842627f7b5d7beb,2022-07-31 21:10:26,Jonas Jenwald,"[api-minor] Update the minimum supported Safari version

The Ink-editor uses `ResizeObserver`, which is supported in all reasonably modern browsers; see https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver#browser_compatibility

With the exception of Safari, `ResizeObserver` is thus available in all of the browsers that the PDF.js library currently support. Rather than trying to e.g. add a polyfill, let's just bump the compatibility (slightly) to Safari 13.1 instead; see https://en.wikipedia.org/wiki/Safari_version_history#Safari_13",False
f9c593d66cbcd6345228daab7f2ccdf16189060d,2022-07-31 17:59:15,Tim van der Meij,"Merge pull request #15251 from Snuffleupagus/thumbnail-setImage-small

Ignore too small page-canvases in `PDFThumbnailView.setImage`",True
7798252285401aeb7715cb810b0da2ff99d387ab,2022-07-31 17:52:21,Tim van der Meij,"Merge pull request #15252 from timvandermeij/bump

Bump versions in `pdfjs.config`",True
91e6830ec4c3ad0ae1d15671a68077b4770011e9,2022-07-31 17:46:06,Tim van der Meij,Bump versions in `pdfjs.config`,False
5b50a5055932b70de33b18e6d68d73ad024d8e87,2022-07-31 17:29:56,Jonas Jenwald,"Ignore too small page-canvases in `PDFThumbnailView.setImage`

It doesn't make sense to use a page-canvas that's *smaller* than the resulting thumbnail, since that causes the image to be upscaled which results in a blurry thumbnail. Note that this doesn't normally happen, unless a very small zoom-level is used in the viewer.",False
b8aa9c62217492c845ae3f27cc368aec7a58f38a,2022-07-31 15:12:55,Tim van der Meij,"Merge pull request #15246 from Snuffleupagus/thumbnail-setImage-improvements

[api-minor] Improve `thumbnail` handling in documents that contain interactive forms",True
77b34899876eb912fb077e0d965158751d4098c6,2022-07-31 14:53:16,Tim van der Meij,"Merge pull request #15247 from Snuffleupagus/css-more-cleanup

Misc. small CSS cleanup",True
37d77f29f7d554e0709ea67d1b1fb49146845652,2022-07-31 13:55:40,Jonas Jenwald,"Merge pull request #15248 from Snuffleupagus/update-l10n

Update l10n files",True
635bd12050cc7e10dda654b8c6783ce6688572bf,2022-07-31 13:53:00,Jonas Jenwald,Update l10n files,False
7543a9108636409f283fe2ab5e6550e1bf5f0584,2022-07-30 23:37:44,Jonas Jenwald,"[Firefox] Remove a couple of `webkit` CSS rules related to editing

Thanks to the CSS preprocessor, we can get rid of a couple of unnecessary CSS rules in the Firefox PDF Viewer.",False
4a389498866bee8ebd5ac31ca618d84b1068403c,2022-07-30 23:23:34,Jonas Jenwald,"Remove unnecessary `color` CSS property

This property is first of all unused, and secondly it contained a static value which means that it'd not have worked correctly in light/dark themes.",False
0c31320c12d6375a914683853eaa29765806ba85,2022-07-30 20:23:32,Jonas Jenwald,"[api-minor] Improve `thumbnail` handling in documents that contain interactive forms

To improve performance of the sidebar we use the page-canvases to generate the thumbnails whenever possible, since that avoids unnecessary re-rendering when the sidebar is open. This works generally well, however there's an old problem in PDF documents that contain interactive forms (when those are enabled): Note how the thumbnails become partially (or fully) blank, since those Annotations are not included in the OperatorList.[1]

We obviously want to keep using the `PDFThumbnailView.setImage`-method for most documents, however we need a way to skip it only for those pages that contain interactive forms.
As it turns out it's unfortunately not all that simple to tell, after the fact, from looking only at the OperatorList that some Annotations were skipped. While it might have been possible to try and infer that in the viewer, it'd not have been pretty considering that at the time when rendering finishes the annotationLayer has not yet been built.
The overall simplest solution that I could come up with, was instead to include a *summary* of the interactive form-state when doing the final ""flushing"" of the OperatorList and expose that information in the API.

---
[1] Some examples from our test-suite: `annotation-tx2.pdf` where the thumbnail is completely blank, and `bug1737260.pdf` where the thumbnail is missing the ""buttons"" found on the page.",False
c7b71a3376be4e9364ee9c50fc82724dc617499f,2022-07-30 15:34:23,Tim van der Meij,"Merge pull request #15215 from Snuffleupagus/optional-content-initial

[api-minor] Improve how we disable `PDFThumbnailView.setImage` for documents with Optional Content",True
ee8fab929ce9c2d36c6937ed0c20ca3db4487ab2,2022-07-30 00:28:53,Jonas Jenwald,"Merge pull request #15244 from calixteman/15241

[Editor] Add an editor in the annotation storage only when it's non-empty (#15241)",True
e819834505a8eb85367b33ee0587046b32778ebe,2022-07-29 21:30:52,Calixte Denizet,[Editor] Add an editor in the annotation storage only when it's non-empty (#15241),False
cfdf940c05cd99281a358c6b6892d451e59ef270,2022-07-29 20:47:40,Jonas Jenwald,"Merge pull request #15242 from calixteman/ink_avoid_move

[Editor] Avoid to slightly move ink editor when undoing/redoing",True
6bb800a7e1a003491c414d66e1152bf043d576bb,2022-07-29 20:30:20,Jonas Jenwald,"Merge pull request #15240 from Snuffleupagus/web-factory-object

[api-minor] Change the various factories, in the viewer, to accept Objects",True
9a464b70c1f6d11998e2956414ed63521343394e,2022-07-29 20:23:03,Calixte Denizet,[Editor] Avoid to slightly move ink editor when undoing/redoing,False
2e059727a99b2923c49479efd34fea1815ff34bb,2022-07-29 20:01:04,Jonas Jenwald,"[api-minor] Change the various factories, in the viewer, to accept Objects

Currently all of these factories take a bunch of (randomly ordered) parameters, which first of all doesn't look that nice in the `PDFPageView`-class when some parameters are optional.
Furthermore, it also makes deprecation/removal of any existing parameter a *potentially* breaking change.
Finally, using an Object will provide a small amount of ""documentation"" at the call-site which isn't really the case with a bunch of ""regular"" parameters.

Note that all of the `viewer component` examples still work as-is with this patch, which is why I don't believe that we necessarily have to deprecate in the usual fashion.",False
80689c64442865770def0f4bb40787a8d5841141,2022-07-29 16:52:25,Jonas Jenwald,"Merge pull request #15238 from calixteman/bug1782186

Fix wrong order of arguments when calling the CipherTransform ctor (bug 1782186)",True
d092a85b6cfb8404a819ee4ee8cc1830aa100ff1,2022-07-29 16:16:45,Calixte Denizet,Fix wrong order of arguments when calling the CipherTransform ctor (bug 1782186),False
0c5afe9269f3f065bd4bdab37bb1322b0587673f,2022-07-29 13:20:49,Jonas Jenwald,"Merge pull request #15232 from calixteman/15229

Fix text selection with hdpi screens (#15229)",True
51c8e2f3ab543bd25ac69e8ecb4a0869fb978222,2022-07-28 23:14:13,Calixte Denizet,Fix text selection with hdpi screens (#15229),False
d7cc47d73af29bec13e29daead2af30bcb0ca3aa,2022-07-28 20:34:45,Jonas Jenwald,"Merge pull request #15235 from Snuffleupagus/annot-isUsingOwnCanvas

Ensure that the `isUsingOwnCanvas`-parameter is consistently included in operatorLists (PR 14247 follow-up)",True
de02d30b00a325eb2987c2e40a9998ec15b6a4fc,2022-07-28 19:26:26,Jonas Jenwald,"Merge pull request #15236 from Snuffleupagus/editor-test-opacity

Set `opacity` in the reference tests (PR 15219 follow-up)",True
2cad5cf45b773961b74aa723eb9c5d1abcaa413e,2022-07-28 18:05:09,Jonas Jenwald,"Set `opacity` in the reference tests (PR 15219 follow-up)

Without these changes in the manifest, the affected test-cases fail to render correctly.",False
2fb083f3e2dd1bff61bb817e98dbd0d417c24290,2022-07-28 17:07:37,Jonas Jenwald,"Ensure that the `isUsingOwnCanvas`-parameter is consistently included in operatorLists (PR 14247 follow-up)

Currently some `OPS.beginAnnotation` arguments will contain a `Number` value for the `isUsingOwnCanvas`-parameter, or in some cases an `undefined` value, which is inconsistent from an API perspective.",False
b06d1904519d2270a191e44ef1290188ac8dbc46,2022-07-28 13:45:59,Jonas Jenwald,"Merge pull request #15217 from calixteman/15216

[Editor] Simplify the strings for the tools in the UI",True
a85359b031ad24dbc6be48e061f0e0b2fc506c6b,2022-07-28 13:32:59,Calixte Denizet,[Editor] Simplify the strings for the tools in the UI,False
e515a88faf66754a49e0c69bd1e5922a25b0c7c3,2022-07-28 13:13:10,calixteman,"Merge pull request #15234 from calixteman/reset_undo_queue

[Editor] Reset the queue when a command is added after having undone all the commands",True
3c10c71a9117e9c61139a23b2aeda64162ca86d9,2022-07-28 02:53:28,Calixte Denizet,[Editor] Reset the queue when a command is added after having undone all the commands,False
085dd0a6c5930b08fc3b18de90a665a9bc5b7e36,2022-07-27 23:40:26,calixteman,"Merge pull request #15233 from calixteman/lock_undo

[Editor] Avoid to add unexpected commands in the undo/redo queue when undoing/redoing (bug 1781790)",True
759116f4c52465f243e866b4610270f9b393555f,2022-07-27 22:42:06,Calixte Denizet,"[Editor] Avoid to add unexpected commands in the undo/redo queue when undoing/redoing (bug 1781790)

We can undo/redo a command which will at some point add a command in the queue: typically
it can happening when redoing an addition.
So the idea is to lock the queue when undoing/redoing.",False
89d18929591434dc8afd693234b4804ba66e3088,2022-07-27 22:27:37,calixteman,"Merge pull request #15219 from calixteman/editor_opacity

[Editor] Add the possibility to change line opacity in Ink editor",True
7831a100b3a96fd7f3cef0d228a991080e6b5766,2022-07-27 22:16:25,Calixte Denizet,[Editor] Add the possibility to change line opacity in Ink editor,False
45b9e8417ddd127bdf9ba94311f28d2e70e037ee,2022-07-27 22:15:07,calixteman,"Merge pull request #15231 from calixteman/bug1781763

[Editor] Don't set as active an editor which is not (bug 1781763)",True
c9a4062c376157dcb11271c08dc6d8473901509c,2022-07-27 21:57:55,calixteman,"Merge pull request #15230 from calixteman/bug1781762

[Editor] Avoid editor creation/selection on right click (bug 1781762)",True
ce4144eee46770d7a0d5aaddebdbe0eaf3aaf6bc,2022-07-27 21:23:22,Calixte Denizet,[Editor] Avoid editor creation/selection on right click (bug 1781762),False
59580d8986078972ffa185f0085a5328b51837d3,2022-07-27 18:16:36,Calixte Denizet,[Editor] Don't set as active an editor which is not (bug 1781763),False
8ebd2d3dfd0c32086314014f8006c91913c2f746,2022-07-25 14:44:51,Jonas Jenwald,"Merge pull request #15221 from Snuffleupagus/issue-15220

Support images with /Filter-entries that contain Arrays (issue 15220)",True
14a8b819dc44feb7a0f08c8a5fd9878135f36646,2022-07-25 13:20:45,calixteman,"Merge pull request #15218 from calixteman/mac_ctrl

[Editor] Fix few keyboard shortcuts on mac",True
fc018ea9eaf5ad546defd57d9f0700e794ce05e8,2022-07-25 12:11:37,Jonas Jenwald,"Support images with /Filter-entries that contain Arrays (issue 15220)

This patch ""borrows"" the code found in the `Parser.makeInlineImage`-method, to ensure that JBIG2 and JPX images can be rendered correctly.",False
85f3e23e7f6aa9cfaa8411fa25fbddd11268fe01,2022-07-25 01:52:27,Calixte Denizet,[Editor] Fix few keyboard shortcuts on mac,False
37dc0e7d6e152e924419c90c9d09e4802dc2acef,2022-07-24 20:59:37,Jonas Jenwald,"Limit the `PDFPageView._isStandalone` handling to the GENERIC viewer

This code is completely unnecessary in e.g. the Firefox PDF Viewer.",False
3446f15bf374e761a42695f30e5cc9e93a00dcc1,2022-07-24 20:59:37,Jonas Jenwald,"Improve how we disable `PDFThumbnailView.setImage` for documents with Optional Content (PR 12170 follow-up)

Rather than always disable `PDFThumbnailView.setImage` as soon as user has changed the visibility of the Optional Content, we can utilize the new method added in the previous patch to improve thumbnail performance. Note in particular how, in the old code, even *resetting* of the Optional Content to its default state wouldn't enable `PDFThumbnailView.setImage` again.

While slightly unrelated, this patch also removes the `PDFThumbnailViewer._optionalContentConfigPromise`-property since it's completely unused.",False
ceb4f8a6ab9e794b5e3757cf33991971d28c0509,2022-07-24 20:59:37,Jonas Jenwald,"[api-minor] Add a new method, in `OptionalContentConfig`, to detect the initial Optional Content visibility state

This will allow us to improve the `PDFThumbnailView.setImage` handling in the viewer, and thanks to the added caching this should be reasonbly efficient.",False
f3d76b42b3553afae0eaa3887f73ffb35e42c245,2022-07-24 20:58:08,Jonas Jenwald,"Ensure that `OptionalContentGroup.visible` cannot be modified from the ""outside""

Given that Optional Content visibility is only intended/supported to be updated via the `OptionalContentConfig.setVisibility`-method, this patch actually enforces that now.
Note that this will be used by the next patch in the series, and will help prevent inconsistent state in the `OptionalContentConfig`-class.

*Please note:* This patch also uncovered a pre-existing bug, related to iterating through the visibility groups in the constructor, for the `baseState === ""OFF""` case.",False
2d6ebc58017a0b70ba5829c49dc25284bfee7216,2022-07-24 17:10:59,Jonas Jenwald,"Convert the `OptionalContentConfig` to use *properly* private fields/methods

To ensure that this data cannot be directly changed from the outside, use private fields/methods now that those are available.",False
9cc5260b68d6c64c00c801d2832c060a754d4ebf,2022-07-24 15:47:47,Tim van der Meij,"Merge pull request #15214 from Snuffleupagus/update-packages

Update packages and translations",True
ca9172ddecb57e7b141f2a2450fc873ea1bef4df,2022-07-24 12:26:47,Jonas Jenwald,Update l10n files,False
878e2f726a308646a8510292ac04f451a30d610d,2022-07-24 12:24:23,Jonas Jenwald,Update npm packages,False
bf000687313b08924186f9f35a604f8cce27bd1d,2022-07-22 20:25:12,Jonas Jenwald,"Merge pull request #15211 from calixteman/selection

[Editor] Fix multi-selection on touch screens",True
a118e268af6462ee0d71cd6ae4b5c1c6ec1d5b90,2022-07-22 19:41:58,Calixte Denizet,[Editor] Fix multi-selection on touch screens,False
71db08a139c379f0b56cd057422e8624db860c0c,2022-07-22 17:44:38,calixteman,"Merge pull request #15188 from calixteman/touch

[Editor] Replace mouse events by pointer ones (bug 1779015)",True
7b25b39a17ce7979764adfb1d4801eb5ad40187e,2022-07-22 17:16:39,Calixte Denizet,"[Editor] Replace mouse events by pointer ones (bug 1779015)

The goal is to be able to edit a pdf on a touchscreen.",False
185102bd6982dfb6bb0053d43723219f9818c4b1,2022-07-22 17:01:08,calixteman,"Merge pull request #15210 from calixteman/ink_select

[Editor] Unselect correctly removed editors",True
5bbe0d078288565fc2e5dbd7794eae43db08323e,2022-07-22 16:51:08,Calixte Denizet,"[Editor] Unselect correctly removed editors

- After undoing a deletion of several editors, they appeared to be selected (they had a red border)
when in fact they were not, consequently, this patch aims to remove the selectedEditor class when
an editor is removed;
- Add a test with some ink editors.",False
6138e16ce2d0fcb9218713587c337dacb02e8a0c,2022-07-22 02:45:16,calixteman,"Merge pull request #15200 from calixteman/multiple_selection

[Editor] Add the ability to make multiple selections (bug 1779582)",True
d6b9ca48a53507ebf8903f5f15b3ca9d14ea1585,2022-07-22 02:23:52,Calixte Denizet,"[Editor] Add the ability to make multiple selections (bug 1779582)

- several editors can be selected/unselected using ctrl+click;
- and then they can be copied, pasted, their properties can be changed.",False
9fe4a667bdf8622d8b86329d1765d7d3b8bf9929,2022-07-22 01:43:49,calixteman,"Merge pull request #15206 from calixteman/simplify_command_manager

[Editor] Simplify the command manager",True
e2f6ec83d605fde5a75e19e4a8c7c045e838ca8b,2022-07-21 23:48:54,Tim van der Meij,"Merge pull request #15183 from Snuffleupagus/rm-svgviewer-example

Remove the `svgviewer` example",True
af41a5cb4933f7a3024df5e98806291bf159963f,2022-07-21 22:14:41,Calixte Denizet,"[Editor] Simplify the command manager

The previous version was maybe functional but definitely painful to maintain
(maybe more efficient... I don't know) so this patch aims to simplify it and
it adds some basic unit tests.",False
f4e60ae986bf9b6964e9ecf31252ceec12e83c21,2022-07-21 13:33:02,Jonas Jenwald,"Limit even more SVG-specific code to the GENERIC viewer

Given that the SVG back-end is not defined anywhere except in GENERIC builds, we can remove a bit more unnecessary code in e.g. the Firefox PDF Viewer.",False
bf7eef71092ac28080cc66289fd2311adad43a53,2022-07-21 13:29:10,Jonas Jenwald,"Remove the `svgviewer` example

Given that the SVG back-end is now deprecated, we probably don't need to keep this example around any more.",False
5e7eab4dd8724e8287ab24ad372f187c3c3bc725,2022-07-21 13:08:12,Jonas Jenwald,"Merge pull request #15196 from calixteman/zindex

[Editor] Add a z-index in order to draw them in the right order",True
c78fbe5282580f05a48ac1d1ccc6ee6eeadaf893,2022-07-21 12:47:41,Jonas Jenwald,"Merge pull request #15199 from mozilla/dependabot/npm_and_yarn/terser-5.14.2

Bump terser from 5.14.1 to 5.14.2",True
a5b50d06bdeba21d61a6a287923e17192998d1c1,2022-07-21 11:31:41,dependabot[bot],"Bump terser from 5.14.1 to 5.14.2

Bumps [terser](https://github.com/terser/terser) from 5.14.1 to 5.14.2.
- [Release notes](https://github.com/terser/terser/releases)
- [Changelog](https://github.com/terser/terser/blob/master/CHANGELOG.md)
- [Commits](https://github.com/terser/terser/commits)

---
updated-dependencies:
- dependency-name: terser
  dependency-type: direct:development
...

Signed-off-by: dependabot[bot] <support@github.com>",False
a7a5e98b7ed66283cbd616cc25281b8da3a98157,2022-07-20 19:17:43,Calixte Denizet,"[Editor] Add a z-index in order to draw them in the right order

The elements in the annotationEditor layer are rearranged to make them
more accessible, but we must draw them in the order they have been created,
hence this patch adds a z-index to the editors.",False
408c10b5bbd90381d152d0399588ad2fc62379d0,2022-07-20 17:59:16,calixteman,"Merge pull request #15195 from calixteman/empty_editor

[Editor] No need to click twice to create an editor when the last one is empty",True
6d0676fd86f966de75f948b78ce22888fd356cdd,2022-07-20 17:45:00,Calixte Denizet,[Editor] No need to click twice to create an editor when the last one is empty,False
a9fc8792c875baeec214bd1c1e5f2e2d1303e4bc,2022-07-20 16:15:04,Jonas Jenwald,"Merge pull request #15192 from Snuffleupagus/issue-15139

Ignore invalid /CIDToGIDMap-entries when parsing fonts (issue 15139)",True
f18a27bee95781e1fdc72326678b7bea37e05920,2022-07-20 16:08:31,calixteman,"Merge pull request #15186 from calixteman/freetext_commit

[Editor] Move the keyboard manager at the container level",True
e1f28d3504d32e7f3f0817e4e6bef0cd607f77e7,2022-07-20 15:54:30,Calixte Denizet,"[Editor] Move the keyboard manager at the container level

- This way, the keyboard callbacks are called even if the page has not
the focus, hence the user doesn't have to guess that they have to click
on the page which is a bit painful especially in Ink mode.
- Add two keyboard shortcuts to commit a Freetext editor (ctrl+enter and
escape).",False
60bd9580e2e24910fc526388615db5ee9c8a4c45,2022-07-20 15:28:44,Jonas Jenwald,"Ignore invalid /CIDToGIDMap-entries when parsing fonts (issue 15139)

In the referenced PDF document the fonts have /CIDToGIDMap-entries that cannot be loaded. Hence, only when `ignoreErrors` is set, we'll now ignore these corrupt /CIDToGIDMap-entries and fallback to simply assume that no such data is available.

Given that this is *clearly* a case of a corrupt PDF document, there's no guarantee that this will ""fix"" things in the general case since a /CIDToGIDMap may be *required* in order for some composite fonts to render correctly. However, attempting to render *something* is surely better than skipping a font altogether.",False
7a4b72ed11fdde82f3a77417ea369412f414f231,2022-07-20 14:04:37,calixteman,"Merge pull request #15185 from calixteman/ink_translation

[Editor] Ink editor was too much translated after commit",True
33d7a35515e2b5ce65b638d3a4a734f939122bb1,2022-07-20 13:34:22,calixteman,"Merge pull request #15187 from calixteman/rm_useless_ed

[Editor] Remove useless and potentially deleted editors",True
964fb77fa50e88f29ddf82d16d9d15b5ed587327,2022-07-20 02:34:33,Calixte Denizet,"[Editor] Remove useless and potentially deleted editors

After a deletion, a reference on a deleted editor can still be used
(for example in changing the font size just after having deleted all
editors).",False
f46895d750d948acf36e7ce5d9569f45d177973f,2022-07-19 23:32:53,Jonas Jenwald,"Merge pull request #15110 from calixteman/editing_a11y

[Editor] Improve a11y for newly added element (#15109)",True
98f70d87f6742b3f988726fa6213ab36b582d7c8,2022-07-19 22:34:47,Jonas Jenwald,"Merge pull request #15174 from Snuffleupagus/more-for-of

Use more `for...of` loops in the code-base",True
624b26e1de58828f2c4be08f656dc395c018fd39,2022-07-19 22:22:17,Calixte Denizet,"[Editor] Improve a11y for newly added element (#15109)

- In the annotationEditorLayer, reorder the editors in the DOM according
  the position of the elements on the screen;
- add an aria-owns attribute on the ""nearest"" element in the text layer
  which points to the added editor.",False
ad15532235074c1fd9955b246fb752a16668dada,2022-07-19 22:01:37,calixteman,"Merge pull request #15179 from calixteman/editor_cp

[Editor] Use serialized data when copying/pasting",True
642676a3b747eddb9b18a4926a863c0255c9ae39,2022-07-19 21:26:07,calixteman,"Merge pull request #15184 from calixteman/rm_allowclick

[Editor] Simplify the way to create an editor on click",True
3c17dbb43ed71021eddd548f4eddfeaf8f779119,2022-07-19 21:24:06,Calixte Denizet,"[Editor] Use serialized data when copying/pasting

- in using the global clipboard, it'll be possible to copy from a
  pdf and paste in an other one;
- it'll allow to edit a previously created annotation;
- copy the editors in the current page.",False
7024a53e79e8717a688e047025720fe910154f4d,2022-07-19 21:11:35,Calixte Denizet,"[Editor] Simplify the way to create an editor on click

Previously, we had to set the #allowClick property by hand which was
a bit painful because it's easy to overlook one case or an other.
So with this patch a new editor (for now FreeText one only because the
Ink one is a bit different) is created on the first click if none is selected
on mousedown, else the first click will just commit the data and then the
second will creater a new editor.",False
35671127d99ffbb8e3fc919fbf7f9364568eb64f,2022-07-19 21:03:34,Calixte Denizet,"[Editor] Ink editor was too much translated after commit

The problem is clearly visible when the thickness is at max.
It's mainly because the thickness was not taken into account when
translating the div but it was when the line is drawn on the canvas.",False
37ebc2875603c19e600f5851ef83f15c2637839e,2022-07-17 19:48:54,Jonas Jenwald,"Use more `for...of` loops in the code-base

Note that these cases, which are all in older code, were found using the [`unicorn/no-for-loop`](https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-for-loop.md) ESLint plugin rule.
However, note that I've opted not to enable this rule by default since there's still *some* cases where I do think that it makes sense to allow ""regular"" for-loops.",False
5bfba89b0abd82d22268b26521af666fec0e413b,2022-07-17 16:17:58,Tim van der Meij,"Merge pull request #15173 from Snuffleupagus/deprecated-svg

[api-minor] Deprecate the SVG back-end",True
290aeaf755ed1d4c9cf04ae2616ed894241e8f67,2022-07-16 14:54:09,Jonas Jenwald,"Limit more SVG-specific code to the GENERIC viewer

Given that the SVG back-end is not defined anywhere except in GENERIC builds, we can remove a little bit more unnecessary code in e.g. the Firefox PDF Viewer.",False
90bf659b29f22e9854ef795c1ba5fbc97c9667df,2022-07-16 13:54:24,Jonas Jenwald,[api-minor] Deprecate the SVG back-end,False
de7d1d2167ad55bc215c98e43d4e0dec25db9b60,2022-07-15 20:41:29,Jonas Jenwald,"Merge pull request #15170 from calixteman/js_rm_null

[JS] Embedded JS scripts can have some null chars",True
75b8647a32e57c5f3bac246a6d01e83212b22976,2022-07-15 20:10:56,Jonas Jenwald,"Merge pull request #15169 from Snuffleupagus/loadFont-fontRef

Handle errors in the ""Loading by ref"" code-path in `PartialEvaluator.loadFont`",True
acd61a138efe2fc900537322d6f57f73c8d03029,2022-07-15 20:03:36,Jonas Jenwald,"Handle errors in the ""Loading by ref"" code-path in `PartialEvaluator.loadFont`

Note how we currently throw a ""raw"" Error, which is problematical since all of the `PartialEvaluator.loadFont` call-sites expect a Promise to be returned. Furthermore, this also means that we don't benefit from the fallback code-path that now exists below.

*Please note:* Unfortunately I don't have a test-case that fails without this patch, since it's something I happened to notice when reading the code while working on another patch.",False
5f0c95e70e5b8c12d40b9da24296c92c6e3fc0b1,2022-07-15 19:35:25,Calixte Denizet,[JS] Embedded JS scripts can have some null chars,False
3256761ead52c495cb4e5ebdbaa0ebebee65538e,2022-07-15 18:13:30,calixteman,"Merge pull request #15168 from calixteman/disable_canvas_acc

Disable canvas acceleration for linux tests",True
ad62ae561ca1c0311014fee042c0a96cbdce8b63,2022-07-15 17:01:37,Calixte Denizet,Disable canvas acceleration for linux tests,False
41b2f52f70bba1c4df62ece070487d59d970f775,2022-07-13 18:15:12,calixteman,"Merge pull request #15157 from calixteman/1778484

Add unicode mapping in the font cmap to have correct chars when printing in pdf (bug 1778484)",True
680c293c3416a7c33274340641abbd9fafb1a66c,2022-07-13 18:08:27,Calixte Denizet,"Add unicode mapping in the font cmap to have correct chars when printing in pdf (bug 1778484)

It aims to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1778484.",False
b4a3fd31c88de6e6b72b1ebc44f0452b10fcbbd8,2022-07-13 13:20:04,Jonas Jenwald,"Merge pull request #15162 from Snuffleupagus/prefer-logical-operator-over-ternary

Enable the `unicorn/prefer-logical-operator-over-ternary` ESLint plugin rule",True
1301b71b7c4726aa6cbeb3f888222d5aa9aa0e26,2022-07-12 23:05:32,calixteman,"Merge pull request #15163 from calixteman/prepare_touch

[Editor] Always have an ink editor (when in ink mode)",True
2df2defa027e799a1d5bcd5f7f7af4755cd5bcc6,2022-07-12 22:48:37,Calixte Denizet,"[Editor] Always have an ink editor (when in ink mode)

Previously it was created only on mouseover event but on a touch screen
there are no fingerover event...
The idea behind creating the ink editor on mouseover was to avoid to have
a canvas on each visible page.
So now, when the editor is created, the canvas has dimensions 1x1 and
only when the user starts drawing the dimensions are set to the page ones.",False
dcc73423e59099a80f67439f13bae450482b8864,2022-07-12 14:22:37,Jonas Jenwald,"Enable the `unicorn/prefer-logical-operator-over-ternary` ESLint plugin rule

This leads to ever so slightly more compact code, and can in some cases remove the need for a temporary variable.

Please find additional information here:
https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-logical-operator-over-ternary.md",False
aa6512e70f0664fcc839f937a63f5d5357ada53a,2022-07-11 22:23:16,calixteman,"Merge pull request #15159 from calixteman/1778982

[Editor] Avoid to have the ink editor smaller than the resizer (bug 1778982)",True
1b3c0f1799aec4d1ef19c14e2c078b9df2e75281,2022-07-11 20:30:34,Calixte Denizet,[Editor] Avoid to have the ink editor smaller than the resizer (bug 1778982),False
e572bc4e765a53347f0de6c0746ba57a168342a3,2022-07-11 14:35:34,Jonas Jenwald,"Merge pull request #15158 from timvandermeij/ttx

Update `ttx` from version 2.5 to version 3.19.0",True
3d4476ac537ab31a8359e392ed3c99343e39e7c9,2022-07-11 00:48:36,Tim van der Meij,"Update `ttx` from version 2.5 to version 3.19.0

The current version 2.5 is from September 2014, which is almost 8 years
old now. The new version 3.19.0 is from November 2017, which is still
almost 5 years old, but is a step forward towards eventually using the
most recent version. Note that we currently can't update any further;
see #11802 for the details.

Fortunately using this newer version only required a few changes:

- The `ttx` output regexes needed updating to ignore comments that `ttx`
  now puts after some XML nodes (`<!-- ... -->` and `/* ... */`).
- The `ttx` invocation now explicitly uses `python2` (except on Windows
  where this alias doesn't exist) since otherwise the font tests can't
  be run on modern systems anymore given that `python` is nowadays an
  alias for `python3`, and it now points at the new location of the
  `ttx.py` file since the `Tools` folder got removed.
- The note about needing a 32-bit Python 2.6 version is dropped since
  it's obsolete: this version (and also the existing one already) work
  just fine on a 64-bit Python 2.7 as well.",False
0205597bd09fca95684a8357b275f543d940f66a,2022-07-10 19:36:17,Jonas Jenwald,"Merge pull request #15154 from Snuffleupagus/xfa-rm-id

Replace element `id`s with custom attributes in the xfaLayer",True
4b7bf74da29e23386bb4032e2e339de1f3f53f13,2022-07-10 19:14:54,Jonas Jenwald,"Replace element `id`s with custom attributes in the xfaLayer

We want to avoid adding regular `id`s to xfaLayer-elements, since that means that they become ""linkable"" through the URL hash in a way that's not supported/intended. This could end up clashing with ""named destinations"", and that could easily lead to bugs; see issue 11499 and PR 11503 for some context.

Rather than using `id`s, we'll instead use a *custom* `data-element-id` attribute such that it's still possible to access the DOM-elements directly if needed. *Please note:* This is basically the xfaLayer-equivalent of PR 15057.",False
fb1340f74b024e554e23737596e52c2b6a5242cc,2022-07-10 16:19:41,Tim van der Meij,"Merge pull request #15155 from Snuffleupagus/update-packages

Update packages and translations",True
e4a7264564af0b9b0d954fe079cc862abbbfd20d,2022-07-10 14:15:22,Jonas Jenwald,Update l10n files,False
dd10f6397f1256e09a09c22bf0a57ef1ab4e3880,2022-07-10 14:13:08,Jonas Jenwald,Update npm packages,False
220f980e12d1047d6b91facd15b74feaffbe520f,2022-07-09 16:08:41,Tim van der Meij,"Merge pull request #15145 from Snuffleupagus/deprecated-enhanceTextSelection

[api-minor] Deprecate the `enhanceTextSelection` functionality",True
2b6a67c5d05cc4ec2f686eb0ac486ae0dd9285f0,2022-07-09 00:36:53,calixteman,"Merge pull request #15153 from calixteman/1778692

[Annotation] A push button can have no action (bug 1778692)",True
8f26ba54875ac0730fe72328301085fbb456898a,2022-07-08 19:09:56,Calixte Denizet,[Annotation] A push button can have no action (bug 1778692),False
4b493c2c3315510ec54bc6bfab4e3112ddcd0d0d,2022-07-08 16:54:47,Jonas Jenwald,"Merge pull request #15152 from Snuffleupagus/validate-Resources

Ensure that the /Resources-entry is actually a dictionary (issue 15150)",True
c2f7942aea82fbbde79abf36d1f5a6fa323bad9b,2022-07-08 16:13:43,Jonas Jenwald,"Ensure that the /Resources-entry is actually a dictionary (issue 15150)

Prevent issues in *corrupt* PDF documents, if the /Resources-entry is not of the correct and expected type.",False
efbd429115b08ae1f0beeb3089aef21c2c8941bb,2022-07-08 15:28:14,Jonas Jenwald,"Merge pull request #15151 from calixteman/15149

[Editor] Remove useless and faulty code when destroying the global manager",True
cec2172225f2543b8ba66c929a849dfd5e4000e9,2022-07-08 15:19:19,Calixte Denizet,[Editor] Remove useless and faulty code when destroying the global manager,False
b0a3c9e8cf84e3d20e754c6c2ab6650f3928d62d,2022-07-08 00:00:03,calixteman,"Merge pull request #15135 from calixteman/forced_colors

Use default colors only in forced-colors mode (bug 1778068)",True
657edb38922625144aef6286d18aecae76ecb3f1,2022-07-07 23:19:59,calixteman,"Merge pull request #15147 from calixteman/editor_size

[Editor] Avoid to resize and redraw the ink canvas when it's useless",True
fe93742c8f912dc97f51531ca37e9250ad612f60,2022-07-07 23:06:03,Calixte Denizet,Use default colors only in forced-colors mode (bug 1778068),False
d6a75262d5b463d810e3b79a7e7de1a23141ea0d,2022-07-07 22:57:53,Jonas Jenwald,"Merge pull request #15143 from bernatgy/typescript-compilation-fix

[jsdoc] failing typescript builds - wrong type",True
32d8c55642163ddd58a95811352e1d8812168d03,2022-07-07 22:13:41,calixteman,"Merge pull request #15146 from calixteman/editing_cursor

[Editor] Change the cursor to a pen for the Ink editor",True
9c4077ebc4fbcfdd022fafcd9a36f275d0f8c6b2,2022-07-07 22:09:20,Calixte Denizet,"[Editor] Avoid to resize and redraw the ink canvas when it's useless

- and because of rounding errors it led to slightly resize again and again
the ink container;
- when zooming the size is changing but not the ratio, so in this case we
don't need to change the dimension of the container.",False
edc9ad13bf8f422f9495c4ede9bb9989969326e4,2022-07-07 21:53:59,Calixte Denizet,[Editor] Change the cursor to a pen for the Ink editor,False
3d62f09fbd7e397525c6508216d798da1a8d1ec1,2022-07-07 20:33:46,Bernát Gyovai,"[jsdoc] failing typescript builds - wrong type

`HTMLSectionElement` is not part of the DOM, so the generated typescript definitions contain a non-existing type.

HTML Section elements have to be handled as simple `HTMLElements`.

fixing punctuation and lint problems

[jsdoc] failing typescript builds - wrong type",False
815c28da0ed8b824cfcd311dbbe681fdefb75104,2022-07-07 19:45:31,Jonas Jenwald,[api-minor] Deprecate the `enhanceTextSelection` functionality,False
403ed07ad9a1e202409174f060e2a786a01f6a0b,2022-07-07 19:07:06,calixteman,"Merge pull request #15144 from calixteman/editing_delete

[Editor] Allow editors deletion on Backspace or Delete keys",True
a4329d326c2e7e7892e51f599af923e68f0c5c37,2022-07-07 18:46:01,Calixte Denizet,[Editor] Allow editors deletion on Backspace or Delete keys,False
7f160d49f90833800c5c951ae841e0c9b6b8d37c,2022-07-07 17:33:14,Jonas Jenwald,"Merge pull request #15142 from Snuffleupagus/fitCurve

[editor] Use the `fit-curve` package (issue 15004)",True
345bb1857556a2cb60501237802a196d1f349a2c,2022-07-07 14:13:43,Jonas Jenwald,"[editor] Use the `fit-curve` package (issue 15004)

Rather than including all of this external code in the PDF.js repository, we should be using the npm package instead.
Unfortunately this is slightly more complicated than you'd hope, since the `fit-curve` package (which is older) isn't directly compatible with modern JavaScript modules.
In particular, the following cases needed to be considered:
 - For the development viewer (i.e. `gulp server`) and the unit-tests, we thus need to build a fitCurve-bundle that can be directly `import`ed.
 - For the actual PDF.js build-targets, we can slightly reduce the sizes by depending on the ""raw"" `fit-curve` source-code.
 - For the Node.js unit-tests, the `fit-curve` package can be used as-is.",False
bde46632d4b09f459acf38b761a882c9cb1ad95d,2022-07-06 02:10:12,Jonas Jenwald,"Merge pull request #15130 from calixteman/context_menu

[Editor] Dispatch an event when some global states are changing (bug 1777695)",True
ec0f9f6dcfa46e250b1f2eaa032603c69ef5741f,2022-07-06 01:42:56,Calixte Denizet,"[Editor] Dispatch an event when some global states are changing

- this way the context menu in Firefox can take into account what we
  have in the clipboard, if an editor is selected, ...
- when the user will click on a context menu item, an action will be
  triggered, hence this patch adds what is required to handle it;
- some tests will be added in the Firefox' patch.",False
45fafb2769e5ec904f244916988d7a6d4b06c044,2022-07-06 01:30:28,Jonas Jenwald,"Merge pull request #15133 from Snuffleupagus/issue-14999

Improve text-selection for Type3 fonts with bogus /FontBBox-entries (issue 14999)",True
79cfc548fcf3270595f33bd67e70d0e3ebdd5c79,2022-07-05 17:57:14,Jonas Jenwald,"Improve text-selection for Type3 fonts with bogus /FontBBox-entries (issue 14999)

This extends PR 13461, by also building a fallback bounding box for Type3 fonts that contain a much too small /FontBBox-entry.

*Please note:* While this patch improves things overall, copy-and-pasting still doesn't work perfectly for this document. In particular the lowercase letter ""c"" cannot be selected/copied, however this can be reproduced in both Adobe Reader and PDFium (in Google Chrome) too, which is caused by a lack of proper /ToUnicode-data in the PDF document.",False
a1ac1a61b75064ef274f69da4aa0da7be9a575dd,2022-07-04 17:35:47,Jonas Jenwald,"Merge pull request #15124 from Snuffleupagus/private-setDimensions

Call `AnnotationLayer.setDimensions` as part of the `render`/`update`-methods (PR 15036 follow-up)",True
552ee9decd6be48b6d3e5452a1c2ecee58314aab,2022-07-04 15:57:20,Jonas Jenwald,"Call `AnnotationLayer.setDimensions` as part of the `render`/`update`-methods (PR 15036 follow-up)

Rather than forcing the user to *manually* call `setDimensions`, which is also breaking any existing third-party code, it seems that we can simply let the `AnnotationLayer.{render, update}`-methods handle that internally.

As far as I can tell, based on testing manually in the viewer *and* running the browser-tests, everything still appears to work correctly with this patch.",False
ca8b112e8c553c7d27f26df3778b79ed03cd0e7c,2022-07-04 14:30:24,Jonas Jenwald,"Merge pull request #15125 from Snuffleupagus/FileAttachmentAnnotationElement-trigger

Fix the Popup-trigger for `FileAttachmentAnnotationElement` (PR 15036 follow-up)",True
fda0a87cb50e2d2616fc94cc9fe8a27425af3ee4,2022-07-04 14:29:26,Jonas Jenwald,"Merge pull request #15126 from calixteman/update_l10n_id

[Editor] Update the id for a l10n string",True
ae2cf7e1e703fd3896e9c4b3385ae2739ab59453,2022-07-04 13:48:42,Calixte Denizet,[Editor] Update the id for a l10n string,False
315f450b0177e86a6bfe13c971a67c5b0b5e383d,2022-07-04 13:03:27,Jonas Jenwald,"Fix the Popup-trigger for `FileAttachmentAnnotationElement` (PR 15036 follow-up)

After the changes in PR 15036, the trigger-element created in `FileAttachmentAnnotationElement.render` is now too small. This can be fixed by using the same approach as in PR 15065, and the patch can be tested using the `annotation-fileattachment.pdf` document in the test-suite.",False
03c6febc4471c0268c1d5c6fad610791944db4d2,2022-07-02 20:16:40,Jonas Jenwald,"Merge pull request #15121 from Snuffleupagus/loadingBar-cleanup

[api-minor] Further modernize the `ProgressBar` class (PR 14918 follow-up)",True
845b7f06f94812ff04255f1199c33d4f9dd7d183,2022-07-02 20:09:38,Jonas Jenwald,"Merge pull request #15123 from Snuffleupagus/editor-presentation-disable

[editor] Disable editing while PresentationMode is active",True
ff0ff75d225bb0ddaded12dd210046920ae180c1,2022-07-02 20:08:21,Jonas Jenwald,"Merge pull request #15122 from Snuffleupagus/editor-max-width

[editor] Tweak `@media` CSS rules to account for the new toolbar buttons",True
37b61f22281e3bd7e94bd2f7660d0b411cc29640,2022-07-01 20:22:17,Jonas Jenwald,[editor] Disable editing while PresentationMode is active,False
84ae9f9c5802fc042313f0ac530f1dc26b288a4f,2022-07-01 16:57:13,Jonas Jenwald,[editor] Tweak `@media` CSS rules to account for the new toolbar buttons,False
d9ce17642f3647ec23598f32138c8298b9551be1,2022-07-01 14:01:25,Jonas Jenwald,"[api-minor] Further modernize the `ProgressBar` class (PR 14918 follow-up)

 - Simplify how we look-up the DOM-element, which should also be a tiny bit more efficent.

 - Use private class-fields, rather than property-names prefixed with underscores.

 - Inline the `#updateBar` helper-method directly in the `percent`-setter, since having a separate method doesn't seem necessary in this case.

 - Set the `indeterminate`-class on the ProgressBar DOM-element, to simplify the code.

Finally, also (slightly) re-factors the `PDFViewerApplication.progress`-method to make it a bit smaller.",False
13c01b6d4ababf039fe59ef800ebae38b1de37f5,2022-06-30 14:01:22,Jonas Jenwald,"Merge pull request #15115 from calixteman/editing_a11y_bis

[Editor] Handle correctly colors when saving a document in HCM",True
9723c5d3775ac11479a96cf7104df3b527df99a6,2022-06-30 13:26:34,Calixte Denizet,"[Editor] Handle correctly colors when saving a document in HCM

- for example in Dusk theme (Windows 11), black appears to be white, so
  the user will draw something in white. But if they want to print or
  save the used color must be black.
- fix a bug with the color input which only accepts hex string colors;
- adjust outline color of the selected/hovered editors in HCM.",False
a520fc9d9a4803bf52cca4323073e37f45a34b0c,2022-06-29 23:19:13,calixteman,"Merge pull request #15118 from calixteman/editor_selection

[Editor] Allow to select a freetext editor when in ink mode",True
a694e360a462ee25fe0a3ef1af9c8f03399494bd,2022-06-29 23:05:40,Calixte Denizet,"[Editor] Allow to select a freetext editor when in ink mode

- and when in ink mode, change the toolbar active button when
  a freetext edited.",False
2e83fa8e2dddea06b2a7a76a810568fca65175f4,2022-06-29 20:08:15,calixteman,"Merge pull request #15117 from calixteman/freetext_resize

[Editor] Set the freetext editor dimensions when the changing the font size",True
8c15f5a6392b158fbc1e867a4895022a35873976,2022-06-29 19:55:33,Jonas Jenwald,"Merge pull request #15116 from Snuffleupagus/pr-15113-followup

Fix the `annotationEditorMode`-compatibility for older browsers (PR 15113 follow-up)",True
63f2d0bb640db96cf42e996fe79c557cc4d07998,2022-06-29 19:46:48,Jonas Jenwald,Fix the `annotationEditorMode`-compatibility for older browsers (PR 15113 follow-up),False
bc5b6cd08c8974122428f87312d0c1c2393e6fdd,2022-06-29 19:41:11,Calixte Denizet,[Editor] Set the freetext editor dimensions when the changing the font size,False
ce63663282e9f7fff4adecf11cc030f436d7d4cc,2022-06-29 18:13:56,calixteman,"Merge pull request #15111 from calixteman/1776914

Add a visible page border in HCM (bug 1776914)",True
e08b07969191668915fb3111b2487dd07502b222,2022-06-29 17:09:55,Jonas Jenwald,"Merge pull request #15113 from Snuffleupagus/annotationEditorMode-pref

[editor] Introduce a proper `annotationEditorMode` option/preference (PR 15075 follow-up)",True
3e751679bacbaa3edabbdfb0af62b6b161141723,2022-06-29 15:22:19,Calixte Denizet,Add a visible page border in HCM (bug 1776914),False
44a75c2a0fac3db498f32746e0d9e602f4ac17fd,2022-06-29 15:10:54,Jonas Jenwald,"[editor] Slightly shorten the en-US `freetext_default_content` placeholder text

Now that it's possible to change the font-size, this placeholder string feels a little bit long (especially for larger font-sizes).

Given that Editing is not enabled/released yet, I hope that it should be fine to update this without changing the l10n-id.",False
f3ba02bc0029e88b4cbf8d948d740aba2799a52e,2022-06-29 15:10:54,Jonas Jenwald,"[editor] Remove the unused `name`-property from the editorParamsToolbars DOM elements

As far as I can tell, this is completely unused and can thus be removed.",False
4a4c6b98515ed233b3f078422ad805beee1cd760,2022-06-29 15:05:58,Jonas Jenwald,"[editor] Introduce a proper `annotationEditorMode` option/preference  (PR 15075 follow-up)

This replaces the boolean `annotationEditorEnabled` option/preference with a ""proper"" `annotationEditorMode` one. This way it's not only possible for the user to control if Editing is enabled/disabled, but also which *specific* Editing-mode should become enabled upon PDF document load.

Given that Editing is not enabled/released yet, I cannot imagine that changing the name and type of the option/preference should be an issue.",False
f1d4015508845f1eeedaeca1a28f7fc1e5e1a568,2022-06-28 16:55:04,Jonas Jenwald,"Merge pull request #15039 from calixteman/params

[editor] Add some UI elements in order to set font size & color, and ink thickness & color",True
1a3ef2a0aa62acd570ff0303841200243be6ca6a,2022-06-28 15:35:04,Calixte Denizet,"[editor] Add some UI elements in order to set font size & color, and ink thickness & color",False
4e025e1f084e5d47794d0be732d4c451783c71b7,2022-06-25 21:54:33,Jonas Jenwald,"Merge pull request #15105 from calixteman/15094

Always flush the current item with MarkedContent stuff when getting text (#15094)",True
f2081072767d7eb7eb6083a35783442c7774e035,2022-06-25 21:20:17,Jonas Jenwald,"Merge pull request #15104 from timvandermeij/updates

Update translations and dependencies to the most recent versions",True
3789dab307eae0a586c8da2f8c5a34b761a196a8,2022-06-25 20:49:57,Calixte Denizet,Always flush the current item with MarkedContent stuff when getting text (#15094),False
38daef065a7bce9a5e26dbacf01326d90d747ed6,2022-06-25 19:58:44,Tim van der Meij,"Update dependencies to the most recent versions

Note that even though Puppeteer got a major version bump the changelog
doesn't include compatibility changes that are relevant to us; please
see https://github.com/puppeteer/puppeteer/releases.",False
23fcdabb376471f0e818ae3529161f362a0fb137,2022-06-25 19:48:07,calixteman,"Merge pull request #15088 from calixteman/editor_rotation

Support rotating editor layer",True
f7d69aab1525bb8cc876519c5f80a95eccce726d,2022-06-25 19:15:55,Tim van der Meij,Update translations to the most recent versions,False
def1a30d3e6c52200645863d6c09d53ee7514281,2022-06-25 19:09:19,Tim van der Meij,"Merge pull request #15103 from timvandermeij/permissions

chore: Set permissions for GitHub actions",True
83ecc3f46c4d70a6c4bfd55c5b3b9a01cb034cb5,2022-06-25 19:02:33,neilnaveen,"chore: Set permissions for GitHub actions

 Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much.

- Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions

https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions

https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs

[Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/)

Signed-off-by: neilnaveen <42328488+neilnaveen@users.noreply.github.com>",False
8403bafbfcd64dd79161f12baf711ed011421195,2022-06-25 18:48:11,Tim van der Meij,"Merge pull request #15100 from turrisxyz/Dependabot-GitHub-Actions

chore: Included githubactions in the dependabot config",True
f93ab76fa83377da160c1f62f68bb092a23255f7,2022-06-25 18:28:18,Tim van der Meij,"Merge pull request #15099 from Snuffleupagus/layers-rm-id

Remove element `id`s from the layersView in the sidebar",True
b8a7cf7aedb3b9813b3f1dd1e4a11bff5b9167ec,2022-06-25 18:23:04,Tim van der Meij,"Merge pull request #15101 from Snuffleupagus/browsertest-use-viewer-css

Use the *built* `components/pdf_viewer.css` file in the reference tests",True
c0f65657a2993a08cf5254330e1335ca934532bb,2022-06-25 13:24:05,Jonas Jenwald,"Use the *built* `components/pdf_viewer.css` file in the reference tests

Currently we're loading the `web/annotation_layer_builder.css` and `web/xfa_layer_builder.css` files *directly* during the reference tests.
This becomes a problem is we want to reduce duplication in the CSS-files, e.g. by placing *common* rules in the `web/pdf_viewer.css` file.

Given that `gulp components` is already being utilized when running tests, we can thus use that to instead depend on the *entire* viewer-components CSS-file in the reference tests.",False
12c76d35a510980ff9f7ce59bd5f95f7e478759a,2022-06-25 07:00:04,naveen,"chore: Included githubactions in the dependabot config

This should help with keeping the GitHub actions updated on new releases. This will also help with keeping it secure.

Dependabot helps in keeping the supply chain secure https://docs.github.com/en/code-security/dependabot

GitHub actions up to date https://docs.github.com/en/code-security/dependabot/working-with-dependabot/keeping-your-actions-up-to-date-with-dependabot

https://github.com/ossf/scorecard/blob/main/docs/checks.md#dependency-update-tool
Signed-off-by: naveen <172697+naveensrinivasan@users.noreply.github.com>",False
9748d3eb85c16d67a3173f289c366c6ba74f98fc,2022-06-24 23:45:46,Jonas Jenwald,"Remove element `id`s from the layersView in the sidebar

Similar to other recent patches, see e.g. PR 15057, we don't want to add these kind of `id`s to DOM-elements since they shouldn't become ""linkable"" through the URL hash.

*Please note:* This patch can be tested, in the viewer, with e.g. `bug1737260.pdf` from the test-suite.",False
0c420f5135dc39e37244e74c2dc4584da5eb0f83,2022-06-24 23:32:32,Calixte Denizet,"Support rotating editor layer

- As in the annotation layer, use percent instead of pixels as unit;
- handle the rotation of the editor layer in allowing editing when rotation
  angle is not zero;
- the different editors are rotated counterclockwise in order to be usable
  when the main page is itself rotated;
- add support for saving/printing rotated editors.",False
cd35b9bfac85c00238cf0fa0f657a780f2a5ead6,2022-06-24 22:40:11,Jonas Jenwald,"Merge pull request #15095 from Snuffleupagus/Annotation-OC

Add (basic) support for Optional Content in Annotations",True
8b8b4e0e6e70f0e025ac9daf3313f2880e683628,2022-06-24 22:38:18,Jonas Jenwald,"Merge pull request #15097 from calixteman/ut_fu

Fix unit test (#15093 follow-up)",True
6e46226cd72aa92a42f26154d44aa6c56de55db4,2022-06-24 22:25:35,Calixte Denizet,Fix unit test (#15093 follow-up),False
b5fea8ff14687fc4eb6b806cb0195374db19352e,2022-06-24 19:47:59,calixteman,"Merge pull request #15093 from calixteman/issue15092

[JS] Update siblings when a field is updated after a calculation (#15092)",True
c48dc251e07482973ab14036d971cb00a241571a,2022-06-24 18:49:56,Jonas Jenwald,"Add (basic) support for Optional Content in Annotations

Given that Annotations can also have an `OC`-entry, we need to take that into account when generating their operatorLists.

Note that in order to simplify the patch the `getOperatorList`-methods, for the Annotation-classes, were converted to be `async`.",False
a334a21a1d6324637f4df37a29dfd087fd4559b3,2022-06-24 17:53:06,Calixte Denizet,[JS] Update siblings when a field is updated after a calculation (#15092),False
3fab4af94987b87908c0001c17c82bfc78479678,2022-06-24 13:00:07,Jonas Jenwald,"Merge pull request #15043 from Snuffleupagus/PrintAnnotationStorage

[api-minor] Introduce a `PrintAnnotationStorage` with *frozen* serializable data",True
eace7e4c639abd5955087394ba93819c4621ee68,2022-06-23 21:59:27,calixteman,"Merge pull request #15089 from calixteman/editor_overlap

Correctly order added annotations when saving or printing",True
e49d03985347f9e116eec882d9fc0eab5fa4aca6,2022-06-23 21:09:12,Calixte Denizet,"Correctly order added annotations when saving or printing

- the annotations must be rendered in the same order as the chronological one.
- fix a bug in document.js which avoids to read a saved pdf correctly in Acrobat:
  there is no need to reset the xref state: it's done in worker.js once everything
  has been saved.",False
1cc7cecc7b933cf3fdb2ca6e4bcb55f831ed7410,2022-06-23 20:36:46,Jonas Jenwald,"[api-minor] Introduce a `PrintAnnotationStorage` with *frozen* serializable data

Given that printing is triggered *synchronously* in browsers, it's thus possible for scripting (in PDF documents) to modify the Annotation-data while printing is currently ongoing.
To work-around that we add a new printing-specific `AnnotationStorage`, where the serializable data is *frozen* upon initialization, which the viewer can thus create/utilize during printing.",False
c5dc082da49bdf26e92ceca593451d5b63d48ab4,2022-06-22 19:49:42,calixteman,"Merge pull request #15082 from calixteman/print_freetext

[Editor] Add support for printing newly added FreeText annotations",True
30c63eb0ec5e99547c3f452590c28e02367b580c,2022-06-22 16:56:09,Calixte Denizet,[Editor] Add support for printing newly added FreeText annotations,False
d72a85fa460ed3cf0f6914834cf2fa8b65ec8071,2022-06-22 14:45:23,Jonas Jenwald,"Merge pull request #15081 from Snuffleupagus/typedef-import-IPDFXfaLayerFactory

Fix (obvious) typo in typedef-import of `IPDFXfaLayerFactory` (PR 14373 follow-up)",True
d7c9a0a79389a12aa36d308205b93c354d2b4ce6,2022-06-22 14:36:11,Jonas Jenwald,"Fix (obvious) typo in typedef-import of `IPDFXfaLayerFactory` (PR 14373 follow-up)

This only affects the viewer-components TypeScript definitions, and not any actual code.",False
eca939d90480d6b7270b6e7678c01eff67cec081,2022-06-21 22:27:51,Jonas Jenwald,"Merge pull request #15076 from Snuffleupagus/prefer-array-index-of

Enable the `prefer-array-index-of` ESLint plugin rule",True
c7a18bd77320a9c52ad1ff791bd95f1a62e88108,2022-06-21 22:03:13,calixteman,"Merge pull request #15047 from calixteman/editor_printing

[Editor] Add support for printing newly added Ink annotations",True
f27c8c4471eb1a9f0cace160d2f1ce49d6455488,2022-06-21 21:51:49,Calixte Denizet,[Editor] Add support for printing newly added Ink annotations,False
8d466f5dac00d6080d85d153ed63603568e4d941,2022-06-21 21:33:09,calixteman,"Merge pull request #15060 from calixteman/annotation_rotation

Rotate annotations based on the MK::R value (bug 1675139)",True
cdc58b7a527d8ab6b2b68186e519ad700389def3,2022-06-21 21:27:26,Calixte Denizet,"Rotate annotations based on the MK::R value (bug 1675139)

- it aims to fix: https://bugzilla.mozilla.org/show_bug.cgi?id=1675139;
- An annotation can be rotated (counterclockwise);
- the rotation can be set in using JS.",False
1c9a702f73c481e4a44722479f0b76009b0acbcf,2022-06-21 20:24:32,Jonas Jenwald,"Enable the `prefer-array-index-of` ESLint plugin rule

https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-array-index-of.md",False
05cab5c17d6d01a4bcbfbf533eb43d51f57a85fb,2022-06-21 19:29:39,Jonas Jenwald,"Merge pull request #15075 from Snuffleupagus/issue-15049

[editor] Support disabling of editing when `pdfjs.enablePermissions` is set (issue 15049)",True
db6f675baafbc9f00eb1f579b14815becca32cf4,2022-06-21 19:27:21,Jonas Jenwald,"Merge pull request #15069 from Snuffleupagus/annotationLayer-dimensions

Ensure that the annotationLayer has the correct dimensions (PR 15036 follow-up)",True
35a6a508ee5bbfd1779f55494314d7cbd1cfed9a,2022-06-21 15:24:09,Jonas Jenwald,"[editor] Support disabling of editing when `pdfjs.enablePermissions` is set (issue 15049)

For encrypted PDF documents without the required permissions set, this patch adds support for disabling of Annotation-editing. However, please note that it also requires that the `pdfjs.enablePermissions` preference is set to `true` (since PDF document permissions could be seen as user hostile).[1]

As I started looking at the issue, it soon became clear that *only* trying to fix the issue without slightly re-factor the surrounding code would be somewhat difficult.
The following is an overview of the changes in this patch; sorry about the size/scope of this!

 - Use a new `AnnotationEditorUIManager`-instance *for each* PDF document opened in the GENERIC viewer, to prevent user-added Annotations from ""leaking"" from one document into the next.

 - Re-factor the `BaseViewer.#initializePermissions`-method, to simplify handling of temporarily disabled modes (e.g. for both Annotation-rendering and Annotation-editing).

 - When editing is enabled, let the Editor-buttons be `disabled` until the document has loaded. This way we avoid the buttons becoming clickable temporarily, for PDF documents that use permissions.

 - Slightly re-factor how the Editor-buttons are shown/hidden in the viewer, and reset the toolbar-state when a new PDF document is opened.

 - Flip the order of the Editor-buttons and the pre-exising toolbarButtons in the ""toolbarViewerRight""-div. (To help reduce the size, a little bit, for the PR that adds new Editor-toolbars.)

 - Enable editing by default in the development viewer, i.e. `gulp server`, since having to (repeatedly) do that manually becomes annoying after a while.

 - Finally, support disabling of editing when `pdfjs.enablePermissions` is set; fixes issue 15049.

---

[1] Either manually with `about:config`, or using e.g. a [Group Policy](https://github.com/mozilla/policy-templates).",False
6ee538e0baee2434828efe97d9936f7ae436f5c6,2022-06-21 02:15:36,calixteman,"Merge pull request #15074 from calixteman/ink3

Only activate ink editor if none is selected",True
b00641d873a0952f63affb326419254c514a22d8,2022-06-21 01:58:39,Jonas Jenwald,"Merge pull request #15071 from calixteman/popup_area_test

Add an outline around popup trigger areas in ref-tests",True
c44ab94d2887c7c06c8ff83bb20fa0832021f2de,2022-06-21 01:54:04,Calixte Denizet,Only activate ink editor if none is selected,False
aa3fc5844af8cde3ca32517a8c12775e7828924c,2022-06-21 01:48:43,Jonas Jenwald,"Merge pull request #15062 from Snuffleupagus/save-newRefs

Simplify the `newRefs` computation in the ""SaveDocument""-handler in the worker-thread",True
fd209d9685188171e73f656821731242c3347eb5,2022-06-21 00:53:30,Calixte Denizet,"Add an outline around popup trigger areas in ref-tests

- The goal is to avoid any future regressions.",False
7cce3fb6ff1f86ab75a74fc8f0fd93997af461f4,2022-06-20 13:08:46,Jonas Jenwald,"Ensure that the annotationLayer has the correct dimensions (PR 15036 follow-up)

Note how the ""page""-div, ""canvasWrapper""-div, and `textLayer`-div all have *integer* dimensions (rounded down) rather than using the ""raw"" viewport-dimensions.
Hence it seems reasonable that the same should apply to the ""annotationLayer""-div, now that it's explicit dimensions set.",False
8d154d7f6a2af14378eb50932271d08a09cd02fa,2022-06-20 13:03:13,Jonas Jenwald,"Merge pull request #15064 from calixteman/rescale_followup

Avoid having overflowing sections (#15036 follow-up)",True
ef6142a6c7d1e1004678788648146b943ff7063d,2022-06-20 12:56:19,Jonas Jenwald,"Merge pull request #15065 from calixteman/15063

Popup trigger area must filled its parent (fix #15063)",True
2ff65dd514c75ec5d39493d8b4cd22bf19801687,2022-06-20 02:14:58,Calixte Denizet,Popup trigger area must filled its parent (fix #15063),False
af47a0b7e033a2e2437f4f0677a8bdd1bb882290,2022-06-20 01:39:02,Calixte Denizet,Avoid having overflowing sections (#15036 follow-up),False
57c10ac21397d58c0d702187d04b3bc1a9944722,2022-06-19 21:51:51,Jonas Jenwald,"Simplify the `newRefs` computation in the ""SaveDocument""-handler in the worker-thread

 - Let the `Page.save`-method filter out ""empty"" entries, similar to the `Page._parsedAnnotations`-getter, since that on its own already simplifies the ""SaveDocument""-handler a tiny bit.

 - The existing `reduce` and `concat` construction isn't exactly a wonder of readability :-)
   Thanks to modern JavaScript features it should be possible to replace all of this with `Array.prototype.flat()` instead, which at least to me feels a lot easier to understand.",False
45de73bd00d56c6f0df2edac98eccf51c7ca42ca,2022-06-19 18:06:14,Tim van der Meij,"Merge pull request #15059 from Snuffleupagus/rm-some-concat

Reduce unnecessary usage of `Array.prototype.concat()`",True
c21f4faaf80f6ba3411cb07969322ec61988f987,2022-06-19 17:10:52,Jonas Jenwald,"Reduce unnecessary usage of `Array.prototype.concat()`

There are obviously cases where using `concat` makes perfect sense, since that method doesn't change any of the existing Arrays; see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat

However, in a few cases throughout the code-base that's not an issue and using `concat` only leads to unnecessary intermediate allocations. With modern JavaScript we can thus replace those with a combination of `push` and spread-syntax, which wasn't originally possible when the code was written.",False
f516bb21747c038353485a8232fe959c67dc9e20,2022-06-19 16:51:39,Tim van der Meij,"Merge pull request #15058 from Snuffleupagus/rm-baseviewerinit-event

[api-minor] Remove the ""baseviewerinit"" event since it's unused (PR 14324 follow-up)",True
54777b42c2a0020c548938221110b24c8077659c,2022-06-19 15:06:13,calixteman,"Merge pull request #15036 from calixteman/remove_scale

[api-minor] Get rid of CSS transform on each annotation in the annotation layer",True
caaa78f7daa1f20fd3d681902de1b20a0cb1408e,2022-06-19 13:27:05,Jonas Jenwald,"[api-minor] Remove the ""baseviewerinit"" event since it's unused (PR 14324 follow-up)

Given that neither the viewer or the examples listen for this event, it seems unnecessary to keep dispatching it.",False
e2db9bacefd45d1eb20258980e36d163ce261177,2022-06-18 21:24:59,Calixte Denizet,"Get rid of CSS transform on each annotation in the annotation layer

- each annotation has its coordinates/dimensions expressed in percentage,
  hence it's correctly positioned whatever the scale factor is;
- the font sizes are expressed in percentage too and the main font size
  is scaled thanks a css var (--scale-factor);
- the rotation is now applied on the div annotationLayer;
- this patch improve the rendering of some strings where the glyph spacing
  was not correct (it's a Firefox bug);
- it helps to simplify the code and it should slightly improve the update of
  page (on zoom or rotation).",False
6dc8d1f53219c0c106b9f344a7cd5f7b692bcbef,2022-06-18 21:17:17,calixteman,"Merge pull request #15057 from Snuffleupagus/issue-15056

Replace element `id`s with custom attributes for Widget-annotations (issue 15056)",True
03757d82b70dc60a261d44eb726654adfeacabad,2022-06-18 20:13:05,Jonas Jenwald,"Replace element `id`s with custom attributes for Widget-annotations (issue 15056)

We want to avoid adding regular `id`s to Annotation-elements, since that means that they become ""linkable"" through the URL hash in a way that's not supported/intended. This could end up clashing with ""named destinations"", and that could easily lead to bugs; see issue 11499 and PR 11503 for some context.

Rather than using `id`s, we'll instead use a *custom* `data-element-id` attribute such that it's still possible to access the Annotation-elements directly.
Unfortunately these changes required updating most of the integration-tests, and to reduce the amount of repeated code a couple of helper functions were added.",False
3ca8d2c4f983cf4612849549638ec08d01dcfc1b,2022-06-18 14:59:21,Tim van der Meij,"Merge pull request #15052 from Snuffleupagus/mv-defaultUrl-option

Simplify setting the `defaultUrl`-option in the CHROME viewer (PR 12470 follow-up)",True
80af3a0d07e7d0106921e5325df998305ae6f4a5,2022-06-18 14:56:43,Tim van der Meij,"Merge pull request #15048 from Snuffleupagus/mv-renderer-option

Only define the `renderer`-option in the GENERIC viewer",True
77aa86e275897be4cfa816be1a68ef663a93e311,2022-06-18 13:13:35,Jonas Jenwald,"Stop defining the `defaultUrl`-option in the MOZCENTRAL viewer

This option is not used, nor has it ever been used, in the *built-in* Firefox PDF Viewer. Hence we can define it only for the environments where it makes sense instead.",False
abcc32ade08e2d0a1de70874038ad0db988f5c7e,2022-06-18 13:13:23,Jonas Jenwald,"Simplify setting the `defaultUrl`-option in the CHROME viewer (PR 12470 follow-up)

This should really have been done as part of PR 12470, since it's now possible to directly set the `defaultUrl`-option without having to fallback to `var`-usage.",False
be2dfe45f96fa58a1926f764fd64d2416cecc501,2022-06-17 23:07:43,Jonas Jenwald,"Merge pull request #15035 from Snuffleupagus/prefer-modern-dom-apis-2

Use modern DOM methods a bit more (PR 15031 follow-up)",True
31e342755938785838f90c4d25c412b50387dd76,2022-06-17 21:28:52,calixteman,"Merge pull request #15054 from calixteman/15053

[JS] Hide field borders and buttons (#15053)",True
7e3941da9d4647a706628cae02adb54966e80cc4,2022-06-17 21:06:38,Calixte Denizet,"[JS] Hide field borders and buttons (#15053)

- Since the border belongs to the section containing the HTML
  counterpart of an annotation, this section must be hidden when
  a JS action requires it;
- it wasn't possible to hide a button in using JS.",False
b9f5a70dede81bd75a6381b0fcba50b5f4e7cf9d,2022-06-17 13:15:12,Marco Castelluccio,"Merge pull request #15051 from Maxim-Mazurok/patch-1

Fix ""Good Beginner Bugs"" link",True
bd5e1a9540735bd9c78a6c2c4126e7d66200121e,2022-06-17 07:03:07,Maxim Mazurok,"Fix ""Good Beginner Bugs"" link

Seems like the label was changed and the link needs to be updated",False
b8688128e391aea710a45bc4e93c2f2ec041092b,2022-06-17 00:04:56,calixteman,"Merge pull request #15050 from calixteman/make_ink_better

[Editor] - Add the ability to directly draw after selecting ink tool",True
e7dc1ef4f3f691ce1343c9c5d4e6ecd15cae6a37,2022-06-16 23:23:07,Calixte Denizet,"[Editor] - Add the ability to directly draw after selecting ink tool

- Right now, we must select the tool, then click to select a page and
  click to start drawing and it's a bit painful;
- so just create a new ink editor when we're hovering a page without one.",False
a19feac21752100c81fca1d5ab81a9c140322243,2022-06-16 20:21:33,Jonas Jenwald,"Reduce some duplication for AppOptions that use `compatibilityParams`

We can check for a relevant `compatibilityParams`-entry directly in `AppOptions.{get, getAll}` instead, which removes some unnecessary duplication.",False
df79b18a31e7937c94bae7d88c088c300561c975,2022-06-16 19:41:47,Jonas Jenwald,"Only define the `renderer`-option in the GENERIC viewer

Given that the SVG back-end is not defined anywhere except in GENERIC builds, we can remove a little bit of unnecessary code in e.g. the Firefox PDF Viewer.",False
c3d08580627471432a6ad0b2fdb948df64126afa,2022-06-15 14:57:19,Jonas Jenwald,"Merge pull request #15046 from Snuffleupagus/issue-15044

Add basic support for non-embedded ArialUnicodeMS fonts (issue 15044)",True
64cce1269e3a1ac6c39a49d43bbd97f863cfb0c4,2022-06-15 14:07:20,Jonas Jenwald,"Add basic support for non-embedded ArialUnicodeMS fonts (issue 15044)

This appears to be a Microsoft-specific version of the regular Arial font, hence we simply map this to Helvetica in the same way that we treat many other Arial-named fonts.",False
89cebcb6f9b757583bc855bf0ddbde857ed6308b,2022-06-13 15:05:34,Jonas Jenwald,"Merge pull request #15034 from Snuffleupagus/issue-15033

Extend `getGlyphMapForStandardFonts` with some Hebrew entries (issue 15033)",True
4902ad89239c342aa7f649afd8e1bd305e4f6477,2022-06-13 14:17:37,Jonas Jenwald,"Use modern DOM methods a bit more (PR 15031 follow-up)

Apparently the ESLint rule added in PR 15031 wasn't able to catch all cases that can be converted, which is probably not all that surprising given how some of these call-sites look.

 - Use `Element.prepend()` to insert nodes before all other ones in the element, rather than using `firstChild` with `insertBefore`-calls; see https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend

 - Fix one *incorrect* `insertBefore` call, in the AnnotationLayer-code.
   Initially the patch simply changed that to an `Element.before()`-call, however that broke one of the integration-tests. It turns out that the `index` may try to access a non-existent select-child, which triggers undefined behaviour; note the warning in https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore#parameters",False
2dca14028d7f1a8be0b998d15b157bc9e43b69db,2022-06-13 13:38:39,Jonas Jenwald,"Extend `getGlyphMapForStandardFonts` with some Hebrew entries (issue 15033)

This only adds the minimum entries required in order to render the referenced document correctly, rather than trying to support ""all"" Hebrew glyphs, to ensure that all lines in `getGlyphMapForStandardFonts` are covered by tests.",False
1a6ae5f03480d7c655dff7aea3d39d10d05d9197,2022-06-13 00:06:40,Tim van der Meij,"Merge pull request #15031 from Snuffleupagus/prefer-modern-dom-apis

Enable the `unicorn/prefer-modern-dom-apis` ESLint plugin rule",True
0e1e265c61d5dae82cc5941a8ea28edc16b9aeaa,2022-06-12 23:46:11,Tim van der Meij,"Merge pull request #15030 from Snuffleupagus/update-packages

Update packages and translations",True
720f77c7cd10061317cdaae8bdb8c8ae697bf9bc,2022-06-12 23:42:33,Tim van der Meij,"Merge pull request #15028 from Snuffleupagus/update-compat

[api-minor] Update the minimum supported browsers/environments",True
26ae50e4494aa57b31f305df759fb44ae8be4cd7,2022-06-12 23:40:52,Tim van der Meij,"Merge pull request #15023 from Snuffleupagus/prefer-array-flat

Enable the `unicorn/prefer-array-flat` and `unicorn/prefer-array-flat-map` ESLint plugin rules",True
4d398988230adfd1859d0122960faf4e891dd2b1,2022-06-12 23:35:05,Jonas Jenwald,"Enable the `unicorn/prefer-modern-dom-apis` ESLint plugin rule

This rule will help enforce slightly shorter code, and according to MDN both `Element.replaceWith()` and `Element.before()` are available in all browsers that we currently support.

Please find additional information here:
 - https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-modern-dom-apis.md
 - https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith
 - https://developer.mozilla.org/en-US/docs/Web/API/Element/before",False
0c65926d5b939e3dc80c358ab5e291978f68bd2c,2022-06-12 23:28:37,Jonas Jenwald,"Merge pull request #15029 from Snuffleupagus/prefer-dom-node-append

Enable the `unicorn/prefer-dom-node-append` ESLint plugin rule",True
17d23808241ed6d9db9438c517ed5fd7cd6f87b8,2022-06-12 17:35:41,Jonas Jenwald,Update l10n files,False
f052a129689f979b06d02553abff69d80c475382,2022-06-12 17:32:31,Jonas Jenwald,Update npm packages,False
81298155381e60e8e7279bc575f6415180b259f8,2022-06-12 16:37:03,Jonas Jenwald,"Enable the `unicorn/prefer-dom-node-append` ESLint plugin rule

This rule will help enforce slightly shorter code, especially since you can insert multiple elements at once, and according to MDN `Element.append()` is available in all browsers that we currently support.

Please find additional information here:
 - https://developer.mozilla.org/en-US/docs/Web/API/Element/append
 - https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-dom-node-append.md",False
2f0ed3a9cab1dc12d92757646c71c16269acba34,2022-06-11 20:20:01,Jonas Jenwald,"[api-minor] Update the minimum supported browsers/environments

*Please note:* The dates below are still a little ways off, however that obviously won't affect the existing PDF.js releases. Hence I think that we can make these changes now, since by the time of the *next* official PDF.js release they'll likely match up pretty well.[1]

While we ""support"" some (by now) fairly old browsers, that essentially means that the library (and viewer) will load and that the basic functionality will work as intended.[2]
However, in older browsers, some functionality may not be available and generally we'll ask users to update to a modern browser when bugs (specific to old browsers) are reported.[3]

Since we've previously settled on only supporting browsers/environments that are approximately *three years old*, this patch updates the minimum supported browsers/environments as follows:
 - Chrome 76, which was released on 2019-07-30; see https://en.wikipedia.org/wiki/Google_Chrome_version_history
 - Firefox ESR (as before); see https://wiki.mozilla.org/Release_Management/Calendar
 - Safari 13, which was released on 2019-09-19; see https://en.wikipedia.org/wiki/Safari_version_history#Safari_13
 - Node.js 14, which was release on 2020-04-21 (all older versions have reached EOL); see https://en.wikipedia.org/wiki/Node.js#Releases

---
[1] Given that the releases usually happen every two to three months.

[2] Assuming that a `legacy/`-build is being used, of course.

[3] In general it's never a good idea to use old/outdated browsers, since those may contain *known* security vulnerabilities.",False
d7122becaf33499d9f1e98e10a53bbff648c24e8,2022-06-11 18:55:24,Jonas Jenwald,"Merge pull request #15027 from Snuffleupagus/parseFloat-fixes

Remove superfluous trailing arguments from `parseFloat`-calls (PR 14978 follow-up)",True
4b2526ebf250db299ae3fc32502c0d8588ced7e9,2022-06-11 18:41:34,Jonas Jenwald,"Remove superfluous trailing arguments from `parseFloat`-calls (PR 14978 follow-up)

Fixes two recent ""Code scanning alerts"" on GitHub, which likely happened because these calls originally used `parseInt` instead (during initial development).",False
7f4b1c21499296d1b05b3f4509f049742c5bde13,2022-06-11 18:34:51,Jonas Jenwald,"Merge pull request #15026 from Snuffleupagus/rm-unused-annotation-ops

[api-minor] Stop using the `beginAnnotations`/`endAnnotations` operators (PR 14998 follow-up)",True
bbf857d635da7d65f82e33f73c0ae9e809504326,2022-06-11 17:51:26,Jonas Jenwald,"[api-minor] Stop using the `beginAnnotations`/`endAnnotations` operators (PR 14998 follow-up)

After the changes in PR 14998, these operators are now no-ops in the `src/display/canvas.js` code and should no longer be necessary.
Given that `beginAnnotations`/`endAnnotations` are not in the PDF specification, but are rather *custom* PDF.js operators, it seems reasonable to stop using them now that they've become no-ops.",False
b5fb6cdb967970aab5595854a1b8f24ee7208cca,2022-06-11 15:04:21,Marco Castelluccio,"Merge pull request #15022 from Snuffleupagus/editorNone-icon-tweak

Tweak the `editorNone` icon to circumvent the ""duplicated files""-check",True
010d996b749f9aa40f5f1c81e6ca947846a91a1c,2022-06-11 15:03:43,Jonas Jenwald,"Enable the `unicorn/prefer-array-flat` and `unicorn/prefer-array-flat-map` ESLint plugin rules

These rules will help enforce shorter and more readable code, and according to MDN these Array-methods are available in all browsers/environments that we currently support:
 - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap#browser_compatibility

Please find additional information about these ESLint rules here:
 - https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-array-flat.md
 - https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-array-flat-map.md",False
1465471b1004380ac2a0a6e05d5b821e24d3e031,2022-06-11 14:47:08,Jonas Jenwald,"Tweak the `editorNone` icon to circumvent the ""duplicated files""-check

The update in https://bugzilla.mozilla.org/show_bug.cgi?id=1773794 failed, because the `editorNone` icon is identical to a pre-existing one. Given that all of the editor-icons are simply placeholders for now, we can just make a tiny change to the SVG-paths to prevent these kind of problems.",False
a57a4bc6c2311b13ca490a97e417eee992694168,2022-06-11 01:48:35,Tim van der Meij,"Merge pull request #15018 from Snuffleupagus/issue-15016

Expose `TextLayerRenderTask` in the TypeScript definitions (issue 15016, PR 14013 follow-up)",True
f0b5aee6b8b2c7b299cd6874f8ca30ad9c6daf34,2022-06-11 01:42:35,Tim van der Meij,"Merge pull request #15014 from Snuffleupagus/prefer-at

Enable the `unicorn/prefer-at` ESLint plugin rule (PR 15008 follow-up)",True
e046b811b7ceb419c8b7d29244dd2bdcd55f86f2,2022-06-11 01:42:32,Jonas Jenwald,"Expose `TextLayerRenderTask` in the TypeScript definitions (issue 15016, PR 14013 follow-up)

While `TextLayerRenderTask` apparently makes sense in TypeScript environments, given that it's being returned by the `renderTextLayer`-function in the API, we really don't want to extend the *public* API by simply exporting the class directly in `src/pdf.js` since it should never be called/initialized manually.
Hence we follow the same pattern as in PR 14013, and add some very basic unit-tests to ensure that `renderTextLayer` always returns a `TextLayerRenderTask`-instance as expected.",False
6e6d94ab8d6752bb6f929dff561475bcf18385ca,2022-06-10 22:48:31,calixteman,"Merge pull request #15020 from calixteman/1773680

Add an empty entry in combo list when nothing is selected (bug 1773680)",True
bfe816d0d29e52e89e824fbde9d70248d85b25ac,2022-06-10 22:15:02,Calixte Denizet,"Add an empty entry in combo list when nothing is selected (bug 1773680)

- it aims to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1773680
- the empty is removed once something is selected.",False
d45ce8d6a376b94ca8c31203a2d7b975209d30ab,2022-06-10 20:35:47,Jonas Jenwald,"Merge pull request #15015 from jerry1100/fix-container-type

Extend TextLayerRenderParameters.container type to include HTMLElement.",True
b716e82d180708d2eabdd08a3b20b4f5a6a6bde0,2022-06-10 19:20:47,jerry1100,"Extend TextLayerRenderParameters.container type to include HTMLElement.

In PR #14717, the type was changed from a HTMLElement to a DocumentFragment.
This broke TypeScript projects that use a HTMLElement container.

To remedy this, we extend the type of container to also include HTMLElement.",False
808a55e42b219a19335a19cb1623aba293d07fcf,2022-06-10 15:05:14,calixteman,"Merge pull request #15019 from mozilla/revert-15003-mc

Revert ""Change the name of the generated pdf.sandbox.external for mozilla-central""",True
c8f6cb9fcf8bb555bcc4bbe761b82bc85e939131,2022-06-10 15:04:28,calixteman,"Revert ""Change the name of the generated pdf.sandbox.external for mozilla-central""",False
9ac453669329750fefeda7aa757886d69bd291ba,2022-06-10 00:51:19,Jonas Jenwald,"Enable the `unicorn/prefer-at` ESLint plugin rule (PR 15008 follow-up)

Please find additional information here:
 - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at
 - https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-at.md",False
5d88233fbb11da28e155fa136d1abac0f7393f00,2022-06-10 00:43:53,calixteman,"Merge pull request #15006 from calixteman/ink2

[editor] Add support for saving newly added Ink",True
61a65344a30c0ae457ac09acc07b5957b8927ebe,2022-06-10 00:43:06,calixteman,"Merge pull request #14989 from calixteman/ink1

[editor] Add an Ink editor",True
c161a86ba150d65c270247c6fb5daf80e246770e,2022-06-09 23:05:59,Calixte Denizet,"[editor] Add an Ink editor

- Approximate the drawn curve by a set of Bezier curves in using
  js code from https://github.com/soswow/fit-curves.
  The code has been slightly modified in order to make the linter
  happy.",False
1eaef6645d93ba75b07b359a2716708f80d5946e,2022-06-09 20:21:31,Jonas Jenwald,"Merge pull request #15013 from Snuffleupagus/issue-15012

Render PopupAnnotations even if they have missing or empty /Rect-entries (issue 15012, PR 14439 follow-up)",True
6371a7605d4b5d0419f5b957cd2e7bd206107830,2022-06-09 18:40:58,Jonas Jenwald,Force-install npm packages to try and fix the repeated GitHub Action failures,False
3d244cb6a8d0eb7f50eb6ee7f1ad4a4b8f4a2abe,2022-06-09 18:40:54,Jonas Jenwald,"Render PopupAnnotations even if they have missing or empty /Rect-entries (issue 15012, PR 14439 follow-up)

This only applies to *corrupt* PDF documents, where Annotations are missing the required /Rect-entry. Rendering PopupAnnotations unconditionally shouldn't be a problem, since we're not using a `BaseSVGFactory`-instance in that case.",False
a1bc5a8fe27fd6cc580b2c4aeef61da964a873e6,2022-06-09 17:22:51,calixteman,"Merge pull request #15011 from Snuffleupagus/misc-review-comments

Fix a couple of old review comments",True
66bbc0e7ee03c0584dfa111ba08360b365d1ee66,2022-06-09 13:41:01,Jonas Jenwald,"Call `WidgetAnnotation._getTextWidth` correctly from the `ChoiceWidgetAnnotation`-class (PR 14720 follow-up)

In the ""no fontSize available"" code-path, in the `ChoiceWidgetAnnotation._getAppearance` method, we don't provide the necessary second argument when calling the `_getTextWidth`-method which will cause errors to be thrown.",False
b5cad9be03a11f58731bf946c6fe2d0c6b649963,2022-06-09 13:33:36,Jonas Jenwald,"Fix a bug in the `ColorConverters.CMYK_HTML` method (PR 12631 follow-up)

Because of a small oversight, this method accidentally handled the intermediate array incorrectly.",False
7a89f4a78979c2f3532d483877c0e996884660ff,2022-06-09 13:22:28,Jonas Jenwald,"Set the MIME type correctly when downloading fonts in `debugger.js` (PR 5366 follow-up)

Because of a capitalization error, the MIME type wasn't actually being set correctly. However, please note that downloading of font files still worked correctly which is probably why this has gone unnoticed since 2014.",False
14e6d8a802253b1f9e7651ee204956bc32497eb1,2022-06-09 01:56:08,Jonas Jenwald,"Merge pull request #15008 from Snuffleupagus/Array-at

Polyfill `Array.prototype.at` with core-js (PR 14976 follow-up)",True
36aae436bfea8db6d5384b53e91b76d97e281f6e,2022-06-09 01:46:01,Calixte Denizet,[editor] Add support for saving newly added Ink,False
9e24a1660e4a1816c159f806e18ab169a3792852,2022-06-09 01:40:59,Jonas Jenwald,"Polyfill `Array.prototype.at` with core-js (PR 14976 follow-up)

This Array-method is a fairly new addition to the ECMAScript specification, hence we need a polyfill to avoid the library/viewer breaking in older browsers.

Please find additional information at:
 - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at
 - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at#browser_compatibility",False
2fbf14ace86d1d9840124b65a5af3ae2e2abc041,2022-06-08 19:21:03,calixteman,"Merge pull request #14978 from calixteman/editor2

[editor] Add support for saving a newly added FreeText",True
7773b3f5beb3441793208e27101b1ca5626b5ab9,2022-06-08 18:04:09,Calixte Denizet,[edition] Add support for saving a newly added FreeText,False
c8b8db6a175364e139269bd00195193e826560f7,2022-06-08 14:14:10,Jonas Jenwald,"Merge pull request #15003 from calixteman/mc

Change the name of the generated pdf.sandbox.external for mozilla-central",True
7b37af7eb4ea6c9f406446f9bffbc2d4560e7ae5,2022-06-08 14:06:38,Calixte Denizet,"Change the name of the generated pdf.sandbox.external for mozilla-central

This patch is blocking https://phabricator.services.mozilla.com/D148600.",False
7761d2bf954f36abffef959913f34a5e6533949f,2022-06-07 23:33:38,Jonas Jenwald,"Merge pull request #15001 from marco-c/canvas_presentational

Set ""presentation"" role for page canvases (issue 14437)",True
ae9ad1d858209fe79537fc95582223ef762ea67e,2022-06-07 23:05:13,Jonas Jenwald,"Merge pull request #15000 from calixteman/1724918

Outline fields which are required (bug 1724918)",True
8c9678158eaf633ee5136654465b4cd512217f68,2022-06-07 22:26:30,Marco Castelluccio,"Set ""presentation"" role for page canvases (issue 14437)",False
2dd0c861bff6bfa53b1b3096754f7fb534203d25,2022-06-07 20:32:11,Calixte Denizet,"Outline fields which are required (bug 1724918)

- it aims to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1724918;

- it applies for both Acroform and XFA.",False
c25429be449647b9b7d15bb206465b503e61ae5e,2022-06-07 19:37:45,Jonas Jenwald,"Merge pull request #14998 from calixteman/14105

Reset all the canvas states after rendering each annotations (#14105)",True
96d0d22d66cfbab6d0f5b213251db9a2653c7745,2022-06-07 18:29:02,Calixte Denizet,"Reset all the canvas states after rendering each annotations (#14105)

- each annotation must be rendered independently of the others. So
  after having rendered each annotation, the canvas states are reset
  in order to have something clean to render the next one.",False
135b9fbcfb2e2554754082d482341b4cbe9e1b43,2022-06-06 15:58:53,Tim van der Meij,"Merge pull request #14994 from Snuffleupagus/parseJbig2-conditional

Conditionally bundle `gulp image_decoders`-specific code in `src/core/jbig2.js` (PR 9729 follow-up)",True
1816b5e92639ddc001254ed011dcadbc4851d935,2022-06-05 22:18:29,calixteman,"Merge pull request #14993 from Snuffleupagus/editor-AnnotationStorage-hash

[editor] Update the `AnnotationStorage.hash`-getter to support editing",True
e82ad79eb91937e1cf70d2a08b9e663dcb92b12b,2022-06-05 19:08:28,Jonas Jenwald,"Conditionally bundle `gulp image_decoders`-specific code in `src/core/jbig2.js` (PR 9729 follow-up)

This method/function was added only for the `gulp image_decoders`-builds, and is completely unused elsewhere (e.g. in the Firefox PDF Viewer).
While this only reduces the size of the *built* `pdf.worker.js` file by a little over 1 kB, it can't hurt to remove completely unused code from the ""normal"" builds.",False
51c47acb41c4af385acb16fc8db953f96317b15f,2022-06-05 17:35:44,Jonas Jenwald,"[editor] Update the `AnnotationStorage.hash`-getter to support editing

While calling `JSON.stringify(...)` on a class-instance obviously ""works"" (as in it doesn't throw), since it's really just an Object, it doesn't really make much sense in the context of the `AnnotationStorage.hash`-getter.

Also, access the *inverse* Viewport-transform correctly in `FreeTextEditor.serialize` to prevent errors being thrown when that method is invoked.

Finally, slightly updates the `AnnotationStorage.serializable`-getter to improve consistency within the class.",False
87fdb0eb42129d4a9855d089af578a716cf913f3,2022-06-05 16:59:56,Jonas Jenwald,"Merge pull request #14992 from Snuffleupagus/issue-14990

Lookup image-data correctly in `paintImageMaskXObjectGroup` (issue 14990)",True
59dd4ea2b0d9280996e877bd7eef61a6f72d8e63,2022-06-05 16:09:23,Jonas Jenwald,"Lookup image-data correctly in `paintImageMaskXObjectGroup` (issue 14990)

*This fixes a regression from PR 14754.*

We didn't lookup the image-data correctly, with the result that we tried to render some ImageMasks using a string rather than the intended TypedArray. To make matters worse, this code-path was apparently not *properly* covered by existing test-cases.",False
193a28431c755d50339a1a8edb9b6e554764005d,2022-06-05 15:33:05,calixteman,"Merge pull request #14991 from Snuffleupagus/editor-XFA-disable

[editor] Disable the editor-buttons in XFA documents",True
37f7995dde61bf532472c4025c74f550877016bc,2022-06-05 14:48:18,Tim van der Meij,"Merge pull request #14984 from Snuffleupagus/dialog-polyfill-CSS

Bundle the `<dialog>` polyfill-CSS in the GENERIC `legacy/`-viewer (PR 14710 follow-up)",True
d34e7fff012086a5423fe5d9197a19e57e849135,2022-06-05 13:30:08,Jonas Jenwald,"[editor] Disable the editor-buttons in XFA documents

Given the differences between XFA documents and ""normal"" PDF documents, we don't support editing of the former ones. Hence, when a XFA-document is opened, we temporarily disable the editor-buttons.",False
9b22483e0072cc77878fa37d1f626b40f7d6e696,2022-06-05 02:53:52,Jonas Jenwald,"Merge pull request #14985 from Snuffleupagus/editor-FreeText-followup

[editor] A couple of small FreeText-related fixes (PR 14976 follow-up)",True
a25d92fb1765506e6e133764bd7d4a8ee0e5b236,2022-06-05 02:50:29,Jonas Jenwald,"Merge pull request #14988 from Snuffleupagus/rm-singlefile-comment

Remove mention of `gulp singlefile`-command from `examples/node/getinfo.js`",True
dd586715890c3fb1f14eeecde0e8a0d69f608920,2022-06-05 02:40:58,Jonas Jenwald,"Remove mention of `gulp singlefile`-command from `examples/node/getinfo.js`

This comment should've been removed in PR 9385, but better late than never I suppose.",False
51bf92806185befd830c07f25e4feed01b3a1620,2022-06-05 01:18:11,Jonas Jenwald,"[editor] A couple of small FreeText-related fixes (PR 14976 follow-up)

 - Ensure that the modified-warning won't be displayed, when navigating away from the viewer, if the user has added custom Annotations and then *removed all* of them.
 - Ensure that the *initial* editor-buttons state, i.e. the `toggled`-class, is correctly displayed in the toolbar when then viewer loads.
 - Tweak the CSS-classes for the editor-buttons, such that they use the correct focus/hover-rules (similar to the sidebar-buttons).
 - Remove a no longer accurate comment from the `BaseViewer.annotationEditorMode`-setter.
 - Address a couple of *smaller* outstanding review comments, including some re-formatting changes, from PR 14976.",False
c8ef87197cbea3a88155209597505bdd80b4f3a6,2022-06-04 22:32:20,calixteman,"Merge pull request #14976 from calixteman/editor1

[editor] Add a FreeText editor (#14970)",True
be1aa119860d30c610f6f77b38b4df3c50c559e5,2022-06-04 21:50:11,Calixte Denizet,"[edition] Add a FreeText editor (#14970)
- add a basic UI to edit some text in a pdf;
- an editor can be moved, suppressed, cut, copied, pasted, selected;
- add an undo/redo manager.",False
bb8f5ec20bf6a2fed1f962178b06bc4d99d1e2ef,2022-06-04 21:41:35,Jonas Jenwald,"Bundle the `<dialog>` polyfill-CSS in the GENERIC `legacy/`-viewer (PR 14710 follow-up)

In PR 14710 we only included the JavaScript-part of the polyfill, however we probably need to include the CSS as well to reduce the risk of problems in older browsers.

With the recent CSS-related improvements in the `preprocess`-function we could probably have included this conditionally in the `viewer.css` file. However, considering that the `<dialog>` polyfill-code is only invoked when actually needed it seemed most appropriate/correct to lazy-load the polyfill-CSS as well.",False
19539676813b5df6ca4726a1bfa6765193b1067c,2022-06-02 20:22:48,Jonas Jenwald,"Merge pull request #14980 from Snuffleupagus/preprocessCSS-comments-2

Handle CSS-comments better in the preprocess-function (PR 14963 follow-up)",True
397f2e63d0b7507d94b27fbe411b54b31d283240,2022-06-02 19:36:47,Jonas Jenwald,"Handle CSS-comments better in the preprocess-function (PR 14963 follow-up)

This fixes another oversight, please see the updated tests.",False
1ac33c960dcaf531d78f9c6ce21ee4f1b3e9250e,2022-05-29 22:05:12,Jonas Jenwald,"Merge pull request #14968 from Snuffleupagus/api-release-data

A small memory-usage improvement for PDF documents opened from TypedArray-data",True
7e852851fd2e99a8ceccfb7a5a9394bc6d591c25,2022-05-29 20:07:18,Jonas Jenwald,"A small memory-usage improvement for PDF documents opened from TypedArray-data

This patch contains a small optimization specifically for the case when `getDocument` is called with TypedArray-data. In that case we'll still hold onto that data, which could obviously be large, even after the ""GetDocRequest""-message has been sent to the worker-thread.

In practice this will most likely not affect memory usage in any noticeable way, since the application calling `getDocument` will probably also be keeping a reference to the TypedArray-data. However, it seems like a good idea to ensure that the PDF.js API *itself* won't unnecessarily keep this data alive.",False
3fdf2ba4e36f372dddfbbc61da56cde940987707,2022-05-29 17:43:11,Tim van der Meij,"Merge pull request #14583 from calixteman/buttons

[Annotations] Show buttons even if they've no actions",True
839fb002eba6a6ca98b8ed176f67beebe9c49bde,2022-05-29 17:33:37,Tim van der Meij,"Merge pull request #14967 from Snuffleupagus/update-packages

Update packages and translations",True
a0eca3e34f9356a44c677a67732c8e1a111b3038,2022-05-29 17:13:54,Tim van der Meij,"Merge pull request #14962 from Snuffleupagus/sidebar-more-visibleView

Improve the `PDFSidebar` implementation",True
a43a30bb7b55b12e96b70f791e7165459fbcd18c,2022-05-29 16:56:23,Tim van der Meij,"Merge pull request #14964 from Snuffleupagus/onOpenWithData-contentDispositionFilename

Ensure that the `contentDispositionFilename` is always respected, when setting the document title (PR 13014 follow-up)",True
3e67d97f818b9178bd2e88b17cb0693a87c8af02,2022-05-29 16:52:22,Tim van der Meij,"Merge pull request #14963 from Snuffleupagus/preprocessCSS-comments

Handle CSS-comments correctly in the `preprocess`-function (PR 14886 follow-up)",True
0d3a5d7a9e2015d4866f26ce9d371af858f0ec91,2022-05-29 15:01:15,Jonas Jenwald,"Merge pull request #14966 from tamuratak/use_globalthis

Use globalThis for webpack's output.globalObject instead of this",True
db029e17b3b06a211847e650294bd20c66e4d77e,2022-05-29 13:18:14,Jonas Jenwald,Update l10n files,False
a7d2d8d929061e932ab5f2306962ee9c920f54b0,2022-05-29 13:07:24,Jonas Jenwald,Update npm packages,False
10932e3f9d38d5c41cc2bd872779fcff79416b5b,2022-05-29 07:58:17,Takashi Tamura,"Use globalThis for webpack's output.globalObject instead of this. Close #14915.
That allows us to import pdfjs-dist/build/pdf.js dynamically from modules.

- https://webpack.js.org/configuration/output/#outputglobalobject
- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis",False
66b513fc007f1bdee9fe3d50dfc639be0c6c6801,2022-05-29 03:20:50,Calixte Denizet,"[Annotations] Show buttons even if they've no actions
- it's a regression from PR #14247:
 - before the PR, the button was rendered on the canvas whatever its status was;
 - after the PR, the button image has been moved in an other canvas so when the button is not renderable
   (because it has no actions) then the image is not added the HTML element.
- the buttons in the pdf in bug 1737260 or in the pdf in #14308 were not visible
- make the button always renderable but don't add the link element if it's useless.",False
9bdf27e8e0a9087fbb4dadba997a5c99e05a0c96,2022-05-28 22:02:45,calixteman,"Merge pull request #14936 from calixteman/input_font_size

Set the text fields font size based on their height",True
9d82106d20f039c9d41e4a09080f3768e2ea5957,2022-05-28 21:30:39,Calixte Denizet,"Set the text fields font size based on their height
- right now we're using the font size from the pdf itself but we use an other font
  in the annotation layer. So this size doesn't really make sense and leads to bad
  rendering (see pdf in #14928);
- use a sans-serif font for the fields containing text (fix issue #14736);
- remove useless padding in text-based fields (fix issue #14301);
- text fields allow/disallow scrolling bars (see bit 24 in Ff entry), so use this
  value to hide/show scrollbars in annotation layer.",False
5b3fdee5f58a92d2516b3aa24fdd891878ea0f22,2022-05-28 21:22:27,calixteman,"Merge pull request #14965 from calixteman/1771477

Support Hangul syllables when searching some text (bug 1771477)",True
c7afce421015f16afb9b3f265f49dc8e290dc8dd,2022-05-28 20:20:03,Calixte Denizet,"Support Hangul syllables when searching some text (bug 1771477)
- it aims to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1771477;
- hangul contains some syllables which are decomposed when using NFD, hence
  the text must be correctly shifted in case it contains some of them.",False
d80035b7168f87ffcf25e70abb45cc1c06e74a2d,2022-05-28 19:16:06,Jonas Jenwald,"Merge pull request #14959 from Snuffleupagus/pageColors-thumbnails

Support custom `pageColors` in the thumbnails (PR 14874)",True
0599ce77ffe6bd68c50b4310046d1355a9adcb53,2022-05-28 16:09:49,Jonas Jenwald,"Ensure that the `contentDispositionFilename` is always respected, when setting the document title (PR 13014 follow-up)

Currently, when range-requests and/or streaming are not supported or for documents opened from `data`-URLs, we'll manually set the `contentDispositionFilename` (assuming it exists and is valid) from the `onOpenWithData`-callback in `PDFViewerApplication.initPassiveLoading`.
However, because of a small oversight in `PDFViewerApplication._initializeMetadata`, this *cached* `contentDispositionFilename` would be ignored and we'd only attempt to use the one returned by `PDFDocumentProxy.getMetadata` in the API (which in the cases outlined above will always be empty).

Also, to ensure that the document properties dialog always displays the *correct* fileName we'll now lookup it using the same exact method as in the viewer itself (via a new callback-function).",False
65fe0130f432945636cf3c3939987f8cb63bb4b4,2022-05-28 12:11:25,Jonas Jenwald,"Handle CSS-comments correctly in the `preprocess`-function (PR 14886 follow-up)

I overlooked this in PR 14886, sorry about that!",False
c0e7a454a1bcc8290721229e6a8b7c9988d60b7c,2022-05-27 15:06:01,Jonas Jenwald,Convert the `PDFSidebar` class to use private methods,False
d289da76a78e4ef1c4ad11e4fbf7485db23498f6,2022-05-27 15:03:01,Jonas Jenwald,"Re-factor the `PDFSidebar.{setInitialView, switchView}` methods (PR 10502 follow-up)

This removes the internal `_switchView`-method, since looking at all of this again it feels simpler to instead track the initial event dispatching.",False
13fda7caeb4904f3e3162529073a2896db1dd0cc,2022-05-26 17:57:51,Jonas Jenwald,"Remove the `view`-specific getters in the `PDFSidebar` class

With the exception of `isThumbnailViewVisible`, these getters are completely unused. Generally speaking, using the `visibleView`-getter directly works just as well and seems (at least to me) to be overall preferable considering how our classes are usually implemented.",False
e6a0a953e840a16c02f48b373efcde4a92e4f963,2022-05-26 16:34:05,Tim van der Meij,"Merge pull request #14957 from Snuffleupagus/docStyle

Introduce a viewer constant for `document.documentElement.style`",True
987176194902c08dfdd1d103b31001fb595bf84e,2022-05-26 13:37:27,Jonas Jenwald,"Support custom `pageColors` in the thumbnails (PR 14874)

Currently, when non-standard `pageColors` are specified, the thumbnails will look inconsistent depending on how they're created.
The thumbnails that are created by downsizing the *page* canvases will obviously use the `pageColors` as intended, however the thumbnails which are rendered *directly* will always use the default colors.",False
ca244d9bca2cc61dd3dd8284722b9206053ff55b,2022-05-25 13:25:54,Jonas Jenwald,"Introduce a viewer constant for `document.documentElement.style`

Over time, as we've been introducing JavaScript code to modify CSS variables, we've been adding shorthand properties to various classes to reduce unnecessary repetition when accessing the document-styles.
Rather than repeating this in multiple places, it seems overall simpler to just introduce a constant and re-use that throughout the viewer instead.",False
5b02c685d69cca319a1d35d0cf63bb1c733d6a5c,2022-05-24 17:15:34,Jonas Jenwald,"Merge pull request #14955 from Snuffleupagus/issue-14953

Skip bogus `d1` operators in Type3-glyphs (issue 14953)",True
5a2899c57ecca83454b9aa1c7a4a7ba375a990bb,2022-05-24 15:50:31,Jonas Jenwald,"Skip bogus `d1` operators in Type3-glyphs (issue 14953)

In the `src/display/canvas.js` code the `d1` operator will be used to set the clipping region, and it obviously cannot be empty since that prevents the Type3-glyph from rendering.

Also, the patch removes an outdated comment; refer to PR 12718.",False
61012b931ce95f33b4dd5e04eff91e498eb05d8e,2022-05-22 20:26:53,calixteman,"Merge pull request #14950 from calixteman/1766987

[JS] Format all the fields if any when the document is open (bug 1766987)",True
9407adc41667a79cd9f463d2493b8db8f44d2eb6,2022-05-22 19:20:42,Calixte Denizet,"[JS] Format all the fields if any when the document is open (bug 1766987)
- it aims to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1766987.",False
8fcdad022b88ff40bce089e1422c93a4056521ae,2022-05-22 19:04:15,Jonas Jenwald,"Merge pull request #14948 from Pldi23/drag&drop_not_work_from_mail

Set 'dropEffect' based on 'effectAllowed' for drag-and-drop in the viewer (issue 14942)",True
55da67e9aa4d8a66f5a68e4b60d2e253b01cc244,2022-05-22 18:27:55,Dmitry_Platonov,Set 'dropEffect' based on 'effectAllowed' for drag-and-drop in the viewer (issue 14942). See https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/effectAllowed,False
42a6217427c1532703418df26edb2ae7f2e7ce72,2022-05-21 16:04:54,Tim van der Meij,"Merge pull request #14926 from Snuffleupagus/rm-sourceEventType

Remove the `sourceEventType` from the viewer (bug 1757771 follow-up)",True
5b67202851205a4dd601c669eb3bf5b8aadf7616,2022-05-20 21:41:10,Jonas Jenwald,"Merge pull request #14929 from calixteman/14928

Display background when printing or saving a text widget (issue #14928)",True
bf211eeef56bf31d8d32d4d8daed5f146059c74d,2022-05-20 21:33:37,Jonas Jenwald,"Merge pull request #14947 from IsaacLK/master

Twitter should be capitalized.",True
e003e82c98334f4f2df94e4a2518e1d6a667a0bd,2022-05-20 19:06:10,IsaacLK,Twitter should be capitalized.,False
3c877f9520006ab302a867790e18b0167444c23f,2022-05-20 17:25:23,calixteman,"Merge pull request #14945 from calixteman/devicepixels

Allow to have float numbers when getting image information in reftest-analyzer",True
0a66e1f5ea27eb8ba9d3c098f74ab1f971ccc731,2022-05-20 16:32:22,Calixte Denizet,"Allow to have float numbers when getting image information in reftest-analyzer
- outputScale can be e.g. 1.5 in real life.",False
60498c67e4e218cb74b1b6f66b07bd8f34eab26b,2022-05-19 20:11:54,Calixte Denizet,Display background when printing or saving a text widget (issue #14928),False
8a349801dcc2f69d1a16499070f10802e046c06e,2022-05-15 21:48:37,Jonas Jenwald,"[Firefox viewer] Stop using `FirefoxCom.requestAsync` in the `DownloadManager`

After the changes in https://bugzilla.mozilla.org/show_bug.cgi?id=1757771, that simplified the MOZCENTRAL downloading code, the `ChromeActions.download`-method will no longer invoke the `sendResponse`-callback.
Hence it should no longer be necessary for the `DownloadManager`, in the MOZCENTRAL viewer, to use `FirefoxCom.requestAsync` since no response is ever provided.[1] For the allocated BlobURLs, they should (hopefully) be released when navigating away from the viewer.

---
[1] Note that that was *already* the case, for one of the previous code-paths in the `ChromeActions.download`-method.",False
4f1cd6a9c2ed44f5bc753ba76d83d880714b195d,2022-05-15 21:48:37,Jonas Jenwald,"Remove the `sourceEventType` from the viewer (bug 1757771 follow-up)

After the changes in https://bugzilla.mozilla.org/show_bug.cgi?id=1757771, that simplified the MOZCENTRAL downloading code, the `sourceEventType` is now completely unused and should thus be removed (in my opinion).

Furthermore, with these changes, we also no longer need a *separate* internal ""save""-event and can instead just use the older ""download""-event everywhere.",False
60e9065bf6d32d35a20e2efffa612275ac6079f1,2022-05-15 21:48:08,Jonas Jenwald,"Merge pull request #14898 from calixteman/progress

[api-minor] Use a CSS transform to update the progress bar instead of changing the width (bug 1768481)",True
e94b9d1d7fb96f743749531958147677945e1aad,2022-05-15 21:00:37,Calixte Denizet,"Use a CSS transform to update the progress bar instead of changing the width (bug 1768481)
- it isn't a fix for bug 1768481 but just a tiny improvement to refresh the progress bar on the compositor thread.",False
63441e8f1e0535bec938b34e2bc564cbd0dd0ad7,2022-05-15 18:32:52,Jonas Jenwald,"Merge pull request #14921 from Snuffleupagus/issue-14917

Adjust the heuristics for handling of incomplete path operators (issue 14917)",True
c06384054d9b81c5167dcfd46957610775fd26b7,2022-05-15 15:07:56,Tim van der Meij,"Merge pull request #14920 from Snuffleupagus/update-packages

Update packages and translations",True
5a774b7ed3addad20bd044890213fe33e469102b,2022-05-15 14:54:39,Jonas Jenwald,"Adjust the heuristics for handling of incomplete path operators (issue 14917)

This limits the heuristics for handling of incomplete path operators, see PR 9838, to only apply to *sequences* of such operators. In practice a couple of invalid path operators are (hopefully) unlikely to completely break rendering, whereas a sequence of them will easily lead to fairly chaotic rendering artifacts.",False
54080b68845f7c1668817ebbed65f5c9327f43cd,2022-05-15 12:42:37,Jonas Jenwald,Update l10n files,False
5320316f73eb0f9f6b5bb76193a88a1da9318760,2022-05-15 12:37:35,Jonas Jenwald,Update npm packages,False
46e4a305ebb4a2ce9078e0ffbbc5451fafaf2bf7,2022-05-14 18:17:27,Tim van der Meij,"Merge pull request #14919 from timvandermeij/bump

Bump versions in `pdfjs.config`",True
bfb088052362d3594253542ce860f51c5c7c71a4,2022-05-14 18:15:59,Tim van der Meij,Bump versions in `pdfjs.config`,False
eaaa8b4adece671301b0c386c65f0cbb88f4a0ed,2022-05-14 17:45:13,Tim van der Meij,"Merge pull request #14918 from Snuffleupagus/ProgressBar-modernize

[api-minor] Modernize and simplify the `ProgressBar` class",True
1f3da032b4e61dc766676f1cff6feb2a57148905,2022-05-14 17:19:10,Jonas Jenwald,"[api-minor] Modernize and simplify the `ProgressBar` class

The original `ProgressBar`-functionality is very old, and could thus do with some general clean-up.
In particular, while it currently accepts various options those have never really been used in either the default viewer or in any examples. The sort of ""styling"" that these options provided are *much better*, not to mention simpler, done directly with CSS rules.

As part of these changes, the ""progress"" is now updated using CSS variables rather than by directly modifying the `style` of DOM elements. This should hopefully simplify future changes to this code, see e.g. PR 14898.

Finally, this also fixes a couple of other small things in the ""mobile viewer"" example.",False
b5f2bd8bfd7da7f963a252b6edde3a77d7ec9319,2022-05-14 16:59:15,Tim van der Meij,"Merge pull request #14910 from Snuffleupagus/adjustScaleWidth-animationStarted

Ensure that setting the width of the zoom dropdown works correctly (PR 14028 follow-up)",True
efe3cb2982855116952628758a6424328c2dd826,2022-05-13 20:50:35,Jonas Jenwald,"Remove unnecessary clean-up in `Toolbar.#adjustScaleWidth`

While zeroing the temporary `canvas` makes sense, manually clearing the canvas and its context doesn't really accomplish anything since those are tied to the scope of the method.",False
3dd8b9cccfc59f597e24c827f861b746dd5ef727,2022-05-13 20:40:42,Jonas Jenwald,"Ensure that setting the width of the zoom dropdown works correctly (PR 14028 follow-up)

We need to wait for UI rendering to start *before* getting the CSS variable values, since otherwise the values will be `NaN`.
This is only an issue if the viewer is completely hidden during loading, e.g. in a `display: none` iframe-element.",False
96b125fb729d5b0adff31b172e16cd07625552c5,2022-05-13 17:17:17,Jonas Jenwald,"Merge pull request #14911 from Snuffleupagus/more-TypedArray-fill

Use `TypedArray.prototype.fill()` a bit more in the code-base",True
d540df0582a5003b18bfbe18edabaf841cec942e,2022-05-13 16:12:51,Jonas Jenwald,"Use `TypedArray.prototype.fill()` a bit more in the code-base

Please see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/fill, which is implemented in all browsers that we currently support.",False
fbc7981c987b26785404b27b39cd0931b46f9c00,2022-05-13 01:33:05,Tim van der Meij,"Merge pull request #14894 from Snuffleupagus/rm-mozOpaque

Try to remove the `mozOpaque` canvas-property (PR 6551 follow-up)",True
ed70ec87263de49900c553f7c3b45599bfba47b0,2022-05-12 14:59:17,Jonas Jenwald,"Merge pull request #14899 from Snuffleupagus/issue-14896

[api-minor] Include line endings in Line/Polyline Annotation-data (issue 14896)",True
6bcc5b615d225a3cf3159007bc0ff4db4d8cb443,2022-05-12 14:38:30,Jonas Jenwald,"[api-minor] Include line endings in Line/Polyline Annotation-data (issue 14896)

Please refer to:
 - https://web.archive.org/web/20220309040754if_/https://www.adobe.com/content/dam/acom/en/devnet/pdf/pdfs/PDF32000_2008.pdf#G11.2109792
 - https://web.archive.org/web/20220309040754if_/https://www.adobe.com/content/dam/acom/en/devnet/pdf/pdfs/PDF32000_2008.pdf#G11.2096489
 - https://web.archive.org/web/20220309040754if_/https://www.adobe.com/content/dam/acom/en/devnet/pdf/pdfs/PDF32000_2008.pdf#G11.2096447

Note that we still won't attempt to use the /LE-data when creating fallback appearance streams, as mentioned in PR 13448, since custom line endings aren't common enough to warrant the added complexity.
Finally, note that according to the PDF specification we should *potentially* also take the line endings into account for FreeText Annotations. However, in that case their use is conditional on other parameters that we currently don't support.",False
8dc836d1054fe1c5d9248485d74142e238ab8772,2022-05-12 13:37:52,Jonas Jenwald,"Merge pull request #14904 from Snuffleupagus/preprocess-blank-lines

Avoid the `preprocess`-function adding consecutive blank lines",True
ec6575db000f4034ca4a556a87e9d496cf963425,2022-05-11 17:51:16,Jonas Jenwald,"Avoid the `preprocess`-function adding consecutive blank lines

When pre-processor blocks are being removed, since they don't apply to the current build target, we may currently end up with consecutive blank lines.
While this is obviously not a big issue, it's nonetheless undesirable and we can adjust the `writeLine` function to prevent that.",False
9ceceaeeb56e568682a6138de5ad3c367efa4cff,2022-05-11 16:22:07,Jonas Jenwald,"Merge pull request #14903 from Snuffleupagus/issue-14902

Update the `preprocess`-function to avoid adding trailing new-lines (issue 14902)",True
527251d62b1ac99cef12e9eb249a6938ff3ea6f2,2022-05-11 16:06:00,Jonas Jenwald,"Update the `preprocess`-function to avoid adding trailing new-lines (issue 14902)

*This is a follow-up to PR 14886, which ""broke"" this.*

In addition to fixing the issue, using an Array and `join`-ing it at the end may also be a tiny bit more efficient than using a growing string.",False
af5789125fb6e6024a9c439b36ac5a464aa49de5,2022-05-09 16:33:08,Jonas Jenwald,"Try to remove the `mozOpaque` canvas-property (PR 6551 follow-up)

According to MDN, see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/mozOpaque, the `mozOpaque` canvas-property is not only non-standard (obviously) but it's also been deprecated.
Instead it's recommended to use `alpha = false` when getting the canvas-context, see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext#contextattributes, which all of our affected code is already doing.",False
38c82357b247199b11fb573d0a3d4201347a47fc,2022-05-08 20:55:29,Jonas Jenwald,"Merge pull request #14890 from calixteman/14889

[JS] Formatted value has to be a string when neither null nor undefined",True
ab3958d6e835ca9b522d11eb3798b4a86a22de42,2022-05-08 20:13:57,Calixte Denizet,[JS] Formatted value has to be a string when neither null nor undefined,False
72943ae6306c9fb4b473a37edef71bdcf7a9021f,2022-05-08 17:23:14,Tim van der Meij,"Merge pull request #14886 from Snuffleupagus/preprocessCSS-refactor

Use the regular `preprocess`-function for the CSS files as well",True
753abc383e65b2d2653db170eee04711652c04f5,2022-05-08 17:14:14,Tim van der Meij,"Merge pull request #14888 from Snuffleupagus/attachmentsCount-zero

Try to fix dispatching of ""attachmentsloaded""-events, when the document contains no ""regular"" attachments (PR 8788, 12163 follow-up)",True
7111a172dfd7b01e1a67bb9d294000474c168791,2022-05-08 17:05:22,Tim van der Meij,"Merge pull request #14885 from Snuffleupagus/mozcentral-rm-unbindEvents

Stop bundling `PDFViewerApplication.{unbindEvents, unbindWindowEvents}` in MOZCENTRAL builds",True
3d9b2c9cd5e08684f1a7e35cceb2be23e9a64776,2022-05-08 16:28:55,Jonas Jenwald,"Merge pull request #14887 from Snuffleupagus/pageColors-followup

Ignore `pageColors` when the background/foreground is identical (PR 14874 follow-up)",True
dacea5296651a349cf1b6cdfce133811335cf8dd,2022-05-08 15:42:49,Jonas Jenwald,"Try to fix dispatching of ""attachmentsloaded""-events, when the document contains no ""regular"" attachments (PR 8788, 12163 follow-up)

*This patch can be tested, in the viewer, using the `annotation-fileattachment.pdf` document from the test-suite.*

It seems that the code to delay dispatching of the ""attachmentsloaded""-event, when `attachmentsCount === 0`, is now effectively broken.[1]
Rather than only using an arbitrary timeout, the new code will instead wait for an ""annotationlayerrendered""-event and only *fallback* to using a timeout.

---
[1] The timing of the annotationLayer-rendering changed slightly in PR 14247, and the old code in `PDFAttachmentViewer` wasn't good enough to handle that.",False
472a1f9c91650448e2f3a5bdb235972e505774e6,2022-05-08 15:10:50,Jonas Jenwald,"Ignore `pageColors` when the background/foreground is identical (PR 14874 follow-up)

If the computed background/foreground colors are identical, the `canvas` would be rendered mostly blank with only images visible. Hence it seems reasonable to also ignore the `pageColors`-option in this case.

Also, the patch tries to *briefly* outline the various cases in which we ignore the `pageColors`-option in a comment.",False
39251c578920562aa62c59d49555930af10e1a5f,2022-05-08 14:45:04,Jonas Jenwald,"Re-order the names of the new `pageColors` options/preferences (PR 14874 follow-up)

Given that the new API-option is an Object named `pageColors`, with `background`/`foreground` keys, it occurred to me that it'd be slightly more consistent if the options/preferences names fully reflected that.",False
80910f44e539d7181517919928c6ccff229e78b0,2022-05-08 02:15:56,Jonas Jenwald,"Stop bundling the openFile-buttons in the CHROME build

This is, for all intents and purposes, equivalent to PR 14833 and slightly reduces the size of the `gulp chromium` output.",False
d1f13a6af36a734816a69e3992dc320fe7686994,2022-05-08 02:15:52,Jonas Jenwald,"Use the regular `preprocess`-function for the CSS files as well

An old shortcoming of the `preprocessCSS`-function is its complete lack of support for our ""normal"" defines, which makes it very difficult to have build-specific CSS rules. Recently we've started using specially crafted comments to remove CSS rules from the MOZCENTRAL build, but (ab)using the `preprocessCSS`-function in this way really doesn't feel great.
However, it turns out to be surprisingly simple to instead use the ""regular"" `preprocess`-function for the CSS files as well. The only special-handling that's still necessary is the helper-function for dealing with CSS-imports, but apart from that everything seems to just work.

One reason, as far as I can tell, for having a separate `preprocessCSS`-function was likely that we originally used *lots* of vendor-prefixed CSS rules in our CSS files. With improvements over the years, especially thanks to Autoprefixer and PostCSS, we've been able to remove *almost* all non-standard CSS rules and the need for special-casing the CSS parsing has mostly vanished.

*Please note:* As part of testing this patch I've diffed the output of `gulp generic`, `gulp mozcentral`, and `gulp chromium` against the `master`-branch to check that there was no obvious breakage.",False
ed8b172d12822a0b2a43aad4daa312c962a5a73a,2022-05-07 19:21:32,Jonas Jenwald,"Stop bundling `PDFViewerApplication.{unbindEvents, unbindWindowEvents}` in MOZCENTRAL builds

These methods are completely unused in the Firefox PDF Viewer, and were only added to supplement the `PDFViewerApplication.{bindEvents, bindWindowEvents}`-methods since third-party implementations may apparently need to remove event listeners (see PR 8525).
However, in the MOZCENTRAL build that's just dead code and this patch reduces the size of the *built* `web/viewer.js`-file by `~3.5` kB.",False
f8838eb794cbeaac26c12d4030b3d3d6fdf59ab6,2022-05-07 15:15:54,Tim van der Meij,"Merge pull request #14882 from Snuffleupagus/issue-14881

Add support for TrueType format 12 `cmap`s (issue 14881)",True
0a34b3bb811af56dfc74fcf8b521d8eff95667ef,2022-05-07 15:05:40,Tim van der Meij,"Merge pull request #14884 from Snuffleupagus/fileattachmentannotation-event

Simplify the ""fileattachmentannotation""-event handling a little bit",True
82353cf728825fa3386dbea3031c7318275617f7,2022-05-07 14:55:32,Tim van der Meij,"Merge pull request #14880 from Snuffleupagus/CSS--viewer-container-height

Introduce a `--viewer-container-height` CSS variable to simplify the code",True
be67ec4a10dc75a68220555f171ca59d0b63a4b0,2022-05-07 14:49:20,Tim van der Meij,"Merge pull request #14877 from Snuffleupagus/PresentationMode-spreadMode

Add (basic) support for Spread modes in PresentationMode (issue 14749)",True
7f40ef41a5cb7ec89e0f7227ba8eb9f35e24b8d3,2022-05-07 00:25:18,Jonas Jenwald,"Simplify the ""fileattachmentannotation""-event handling a little bit

*This patch can be tested, in the viewer, using the `annotation-fileattachment.pdf` document from the test-suite.*

Note how the `FileSpec`-implementation already uses `stringToPDFString` during the filename lookup, see https://github.com/mozilla/pdf.js/blob/cfac6fa511945ae5b75d3c27a9356527862a7bf6/src/core/file_spec.js#L70
Hence there's no reason to repeat that again in the `FileAttachmentAnnotationElement`-constructor, and we can thus simplify the ""fileattachmentannotation""-event handling a little bit.",False
9817230ef824bd2536ce1d88fc25e5e542638e6e,2022-05-06 17:15:39,Jonas Jenwald,"Introduce a `--viewer-container-height` CSS variable to simplify the code

This new CSS variable will allow us to simplify a couple of different viewer components, since we no longer need to use JavaScript-based hacks and can directly set the CSS rules instead. In particular:

 - The `BaseViewer`-handling, used as part of the code that will center pages *vertically* in PresentationMode, can be simplified.
   By using CSS to control the height of the ""dummy""-page we avoid unnecessarily invalidating the scale-value, which can reduce *some* unneeded re-rendering while PresentationMode is active.

 - The `SecondaryToolbar.#setMaxHeight`-method, and its associated parameters, are no longer necessary and can be completely removed.

Note that in order for things to work correctly in general, the new `--viewer-container-height` CSS variable must potentially be updated on any window-based ""resize""-event (even when there's no zooming). While this is currently only done in the default viewer, that shouldn't be an issue since neither PresentationMode nor Toolbar-functionality is included in the ""viewer components"".",False
6e7e9d83d8eb49f8aaddd0f78e6d02ed09b8ec85,2022-05-06 14:41:38,Jonas Jenwald,"Add support for TrueType format 12 `cmap`s (issue 14881)

This is, as far as I can tell, the first case we've seen of a format 12 `cmap`.
Please see https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6cmap.html",False
cfac6fa511945ae5b75d3c27a9356527862a7bf6,2022-05-06 01:18:19,calixteman,"Merge pull request #14874 from calixteman/colors

[api-minor] Improve pdf reading in high contrast mode",True
c8afd6ce8ce2e23aee947f56cc3e44b18415ab8d,2022-05-05 20:04:51,Calixte Denizet,"[api-minor] Improve pdf reading in high contrast mode
- Use Canvas & CanvasText color when they don't have their default value
  as background and foreground colors.
- The colors used to draw (stroke/fill) in a pdf are replaced by the bg/fg
  ones according to their luminance.",False
4fffab4ad3221e7aa93c1f7bee1b0c51561d069f,2022-05-05 15:23:09,Jonas Jenwald,"Add (basic) support for Spread modes in PresentationMode (issue 14749)

After recent changes, adding *basic* Spread mode support in PresentationMode has now become reasonably straightforward.

However, documents with *varying* page sizes are non-trivial to handle and would require re-writing (or at least re-factoring) a bunch of the zooming-code.
Hence this PR *purposely* only allow Spread modes to be used, in PresentationMode, for documents where all pages have exactly the same size. While this obviously isn't a fully complete solution, it will however cover the vast majority of all documents and should hopefully be deemed good enough for now.",False
54410d5e4189d1773db4df1d20bbcd93cafae756,2022-05-05 14:57:00,Jonas Jenwald,"Simplify the signature of `BaseViewer._scrollIntoView` and make the method private

In PR 14112 usage of this *internal* method was reduced, and it thus can't hurt to clean-up things a little bit more.
Note in particular that we can simplify the call-sites by directly passing in the already available `PDFPageView`-instance, since the `id`-property those contain can replace the previous `pageNumber`-parameter[1].

Given that the method name has always been prefixed with an underscore it was thus never intended to be ""public"", hence we can now enforce that with modern ECMAScript features.

---
[1] There's already a bunch of other spots, throughout the viewer-code, where we assume that the `PDFPageView.id`-property contains proper page *numbers* (and not e.g. indices); note how we initialize the `PDFPageView`-instances in the `BaseViewer.setDocument`-method.",False
7d6d6f915104cc0d1d280d433e667ac722d30203,2022-05-05 02:11:29,Tim van der Meij,"Merge pull request #14871 from Snuffleupagus/ensurePageViewVisible-PresentationMode-refactor

Re-factor the PresentationMode handling in `BaseViewer.#ensurePageViewVisible`",True
899e4d58d6d1e2cc7dd121ffc62bab66139c6993,2022-05-05 02:08:21,Tim van der Meij,"Merge pull request #14870 from Snuffleupagus/isNodeJS-cleanup

Only bundle the `src/display/node_utils.js` file in GENERIC-builds",True
8b8a09e52f28025805156be9fad3ac167a9a9bdc,2022-05-05 02:03:49,Tim van der Meij,"Merge pull request #14873 from Snuffleupagus/AnnotationStorage-hash

Replace the `AnnotationStorage.lastModified`-getter with a proper hash-method",True
8267fd8a524b08ab1ef4e5cca918aff984a21875,2022-05-04 18:51:30,Jonas Jenwald,"Replace the `AnnotationStorage.lastModified`-getter with a proper hash-method

The current `lastModified`-getter, which only contains a time-stamp, is a fairly crude way of detecting if the stored data has actually been changed. In particular, when the `getRawValue`-method is used, the `lastModified`-getter doesn't cope with data being modified from the ""outside"".

To fix these issues[1], and to prevent any future bugs in this code, this patch introduces a new `AnnotationStorage.hash`-getter which computes a hash of the currently stored data. To simplify things this re-uses the existing `MurmurHash3_64`-implementation, which required moving that file into the `src/shared/`-folder, since its performance should be good enough here.

---
[1] Given how the `AnnotationStorage.lastModified`-getter was used, this would have been limited to *printing* of forms.",False
8135d7ccf6c8789aad2c381d126e276b675ffbe2,2022-05-03 22:01:31,Jonas Jenwald,"Merge pull request #14869 from calixteman/14862

[JS] Fix few bugs present in the pdf for issue #14862",True
6b866a5efaab64319e78e3f9a0d65b5b7b03b57f,2022-05-03 19:55:29,Calixte Denizet,Add a small delay when typing in some integration tests to avoid intermittent failures,False
094ff38da0e602daed46b4a2e2ab1c3659892de0,2022-05-03 19:18:44,Calixte Denizet,"[JS] Fix few bugs present in the pdf for issue #14862
- since resetForm function reset a field value a calculateNow is consequently triggered.
  But the calculate callback can itself call resetForm, hence an infinite recursive loop.
  So basically, prevent calculeNow to be triggered by itself.
- in Firefox, the letters entered in some fields were duplicated: ""AaBb"" instead of ""AB"".
  It was mainly because beforeInput was triggering a Keystroke which was itself triggering
  an input value update and then the input event was triggered.
  So in order to avoid that, beforeInput calls preventDefault and then it's up to the JS to
  handle the event.
- fields have a property valueAsString which returns the value as a string. In the
  implementation it was wrongly used to store the formatted value of a field (2€ when the user
  entered 2). So this patch implements correctly valueAsString.
- non-rendered fields can be updated in using JS but when they're, they must take some properties
  in the annotationStorage. It was implemented for field values, but it wasn't for
  display, colors, ...
- it fixes #14862 and #14705.",False
aad4c6538f1ac8425d60dc1531d0f34193ce10d1,2022-05-03 16:55:34,Jonas Jenwald,"Re-factor the PresentationMode handling in `BaseViewer.#ensurePageViewVisible`

Given that we're (ab)using spread-modes in order to ensure that pages are centered *vertically* in PresentationMode, this re-factoring simplifies the code slightly.
Furthermore, in the event that we *possibly* want to try and support spread-modes in PresentationMode[1] this re-factoring will also prevent future duplication.

---
[1] Note that I'm not particularly keen on doing that, since documents with varying page sizes will be annoying to handle.",False
d4fe4fd97b88d8e12d51ef77b5b2fbcd59f1b02b,2022-05-03 15:06:10,Jonas Jenwald,"Simplify a couple of `isNodeJS`-dependent `getDocument` default values

Given that the `isNodeJS`-constant will, after PR 14858, *always* be `false` in non-GENERIC builds we can simplify a couple of `getDocument`-parameter default values slightly.
The old format, with inline `PDFJSDev`-checks, wasn't exactly a wonder of readability; which was my fault.",False
7df47c289fa14bdc025a7f0045197bfa8d339553,2022-05-03 15:04:35,Jonas Jenwald,"Only bundle the `src/display/node_utils.js` file in GENERIC-builds

This first of all simplifies the file, since we no longer need dummy-classes and can instead *directly* define the actual classes.
Furthermore, and more importantly, this means that we no longer need to bundle this code in e.g. MOZCENTRAL-builds which reduces the size of *built* `pdf.js` file slightly.",False
da4f7dfcd04400cb2ce67f04be0d78e43f20dbac,2022-05-02 18:39:59,Jonas Jenwald,"Merge pull request #14866 from Snuffleupagus/Type3-release-Uint8Arrays

Immediately release the temporary `Uint8Array`s used during Type3-compilation",True
67719af9dfb2f7b442e2022ecb5a7c600e531e53,2022-05-02 16:55:48,Jonas Jenwald,"Immediately release the temporary `Uint8Array`s used during Type3-compilation

Given that the `compileType3Glyph` function *returns* a function, see `drawOutline`, we'll thus keep the surrounding scope alive. Hence it shouldn't hurt to *explicitly* mark the temporary `Uint8Array`s, used during parsing, as no longer needed. Given the current `MAX_SIZE_TO_COMPILE`-value these `Uint8Array`s may be approximately two mega-bytes large *for every* Type3-glyph.",False
db124925848aa111a190f052623015e575b77f54,2022-05-02 16:30:11,Jonas Jenwald,"Merge pull request #14865 from Snuffleupagus/issue-14864

Support encoded dest-strings in /GoTo destination dictionaries (issue 14864)",True
85b7e6042521efe948e71c6bb3f4294ee33f8564,2022-05-02 15:16:07,Jonas Jenwald,"Merge pull request #14863 from calixteman/update-quickjs

Update quickjs to revision 2788d71e823b522b178db3b3660ce93689534e6d",True
df5a4fd0a7db4a22a987427240af577ec5446165,2022-05-02 13:44:32,Jonas Jenwald,"Support encoded dest-strings in /GoTo destination dictionaries (issue 14864)

Interestingly enough this appears to be the very first case of *encoded* dest-strings, in /GoTo destination dictionaries, that we've actually come across. What's really fascinating is that it's less than a week after issue 14847, given that these issues are *somewhat* similar.",False
2dba91e0ed6c810eaa4546575937a3496c67a840,2022-05-01 19:23:50,Calixte Denizet,"Update quickjs to revision 2788d71e823b522b178db3b3660ce93689534e6d
- The date parser in quickjs is not optimal so use the navigator one.",False
397f71424ca8142313e242adc573ff13802f3da0,2022-05-01 18:02:18,Tim van der Meij,"Merge pull request #14861 from timvandermeij/es-module-shims

Pin the `es-module-shims` dependency to version 1.4.7",True
5ec8c3c191ab773f3f7c7d931d95d916dc1933b5,2022-05-01 17:59:56,Tim van der Meij,"Merge pull request #14858 from Snuffleupagus/Type3-Path2D

Use `Path2D`, if available, when rendering Type3-fonts (bug 810214)",True
3af52dacb5c6736a9789294d848ca3bc0bb1a10f,2022-05-01 17:35:30,Tim van der Meij,"Pin the `es-module-shims` dependency to version 1.4.7

Unfortunately newer versions either caused breakage when running the
unit tests manually in a browser or when serving the development viewer.
Given that we hope to use native import maps soon and this dependency
will then be removed anyway, let's pin it for the time being.",False
e658acffbcc4ee7d8ad6477cecdb41932df61632,2022-05-01 17:26:35,Jonas Jenwald,"Slightly re-factor the `compileType3Glyph` function

This moves the `COMPILE_TYPE3_GLYPHS`/`MAX_SIZE_TO_COMPILE`-checks into the `compileType3Glyph` function itself, which allows for some simplification at the call-site.
These changes also mean that the `COMPILE_TYPE3_GLYPHS`-check is now done *once* per Type3-glyph, rather than everytime that the glyph is being rendered.",False
c2488c78649e01303b3f106d5b32d1cb7d4252db,2022-05-01 17:26:35,Jonas Jenwald,"Use `Path2D`, if available, when rendering Type3-fonts (bug 810214)

Note that in order to avoid unnecessary allocations we build the `Path2D`-object *inline* during parsing, rather than iterating through the complete `outlines`-Array at the end.

This patch was tested using the PDF file from bug 810214, i.e. https://bug810214.bmoattachments.org/attachment.cgi?id=9254990, with the following manifest file:
```
[
    {  ""id"": ""bug810214"",
       ""file"": ""../web/pdfs/bug810214.pdf"",
       ""md5"": ""2b7243178f5dd5fd3edc7b6649e4bdf3"",
       ""rounds"": 100,
       ""lastPage"": 25,
       ""type"": ""eq""
    }
]

```

which gave the following results when comparing this patch against the `master` branch:
 - Overall
```
-- Grouped By browser, stat --
browser | stat         | Count | Baseline(ms) | Current(ms) | +/- |     %  | Result(P<.05)
------- | ------------ | ----- | ------------ | ----------- | --- | ------ | -------------
firefox | Overall      |  2500 |          123 |          78 | -44 | -36.25 |        faster
firefox | Page Request |  2500 |            2 |           2 |   0 |   9.11 |        slower
firefox | Rendering    |  2500 |          121 |          76 | -45 | -36.93 |        faster
```

 - Page-specific
```
-- Grouped By browser, page, stat --
browser | page | stat         | Count | Baseline(ms) | Current(ms) | +/- |     %  | Result(P<.05)
------- | ---- | ------------ | ----- | ------------ | ----------- | --- | ------ | -------------
firefox | 0    | Overall      |   100 |           36 |          35 |  -1 |  -2.89 |
firefox | 0    | Page Request |   100 |            2 |           2 |   0 |   7.33 |
firefox | 0    | Rendering    |   100 |           34 |          33 |  -1 |  -3.47 |
firefox | 1    | Overall      |   100 |          123 |          81 | -42 | -33.92 |        faster
firefox | 1    | Page Request |   100 |            2 |           2 |   0 |  -3.31 |
firefox | 1    | Rendering    |   100 |          121 |          79 | -42 | -34.44 |        faster
firefox | 2    | Overall      |   100 |          129 |          82 | -47 | -36.61 |        faster
firefox | 2    | Page Request |   100 |            2 |           2 |   0 |  24.84 |        slower
firefox | 2    | Rendering    |   100 |          127 |          80 | -47 | -37.33 |        faster
firefox | 3    | Overall      |   100 |          114 |          68 | -46 | -40.18 |        faster
firefox | 3    | Page Request |   100 |            2 |           2 |   0 |  15.63 |        slower
firefox | 3    | Rendering    |   100 |          112 |          66 | -46 | -41.07 |        faster
firefox | 4    | Overall      |   100 |          102 |          75 | -27 | -26.09 |        faster
firefox | 4    | Page Request |   100 |            2 |           2 |   0 |   9.62 |
firefox | 4    | Rendering    |   100 |          100 |          73 | -27 | -26.71 |        faster
firefox | 5    | Overall      |   100 |          103 |          77 | -26 | -25.15 |        faster
firefox | 5    | Page Request |   100 |            2 |           2 |   0 |  -6.86 |
firefox | 5    | Rendering    |   100 |          100 |          75 | -26 | -25.53 |        faster
firefox | 6    | Overall      |   100 |           48 |          37 | -11 | -22.56 |        faster
firefox | 6    | Page Request |   100 |            2 |           2 |   0 | -10.14 |
firefox | 6    | Rendering    |   100 |           46 |          35 | -11 | -23.16 |        faster
firefox | 7    | Overall      |   100 |          109 |          70 | -39 | -35.59 |        faster
firefox | 7    | Page Request |   100 |            2 |           2 |   0 |   5.29 |
firefox | 7    | Rendering    |   100 |          107 |          68 | -39 | -36.23 |        faster
firefox | 8    | Overall      |   100 |           39 |          31 |  -9 | -22.14 |        faster
firefox | 8    | Page Request |   100 |            2 |           2 |   0 |   1.72 |
firefox | 8    | Rendering    |   100 |           38 |          29 |  -9 | -23.38 |        faster
firefox | 9    | Overall      |   100 |          156 |          96 | -60 | -38.49 |        faster
firefox | 9    | Page Request |   100 |            1 |           2 |   0 |  13.61 |
firefox | 9    | Rendering    |   100 |          155 |          94 | -60 | -38.98 |        faster
firefox | 10   | Overall      |   100 |          173 |         105 | -68 | -39.20 |        faster
firefox | 10   | Page Request |   100 |            2 |           2 |   0 |  -8.81 |
firefox | 10   | Rendering    |   100 |          171 |         103 | -68 | -39.60 |        faster
firefox | 11   | Overall      |   100 |          152 |          89 | -64 | -41.88 |        faster
firefox | 11   | Page Request |   100 |            2 |           2 |   0 |   6.04 |
firefox | 11   | Rendering    |   100 |          150 |          87 | -64 | -42.47 |        faster
firefox | 12   | Overall      |   100 |          141 |          90 | -51 | -35.91 |        faster
firefox | 12   | Page Request |   100 |            2 |           2 |   0 |  17.37 |
firefox | 12   | Rendering    |   100 |          139 |          88 | -51 | -36.60 |        faster
firefox | 13   | Overall      |   100 |           97 |          61 | -36 | -36.79 |        faster
firefox | 13   | Page Request |   100 |            2 |           2 |   0 |  25.44 |        slower
firefox | 13   | Rendering    |   100 |           95 |          59 | -36 | -37.87 |        faster
firefox | 14   | Overall      |   100 |          118 |          82 | -36 | -30.33 |        faster
firefox | 14   | Page Request |   100 |            2 |           2 |   0 |   9.20 |
firefox | 14   | Rendering    |   100 |          117 |          80 | -36 | -30.95 |        faster
firefox | 15   | Overall      |   100 |          111 |          73 | -37 | -33.85 |        faster
firefox | 15   | Page Request |   100 |            2 |           2 |   0 |  13.25 |
firefox | 15   | Rendering    |   100 |          109 |          71 | -38 | -34.61 |        faster
firefox | 16   | Overall      |   100 |          145 |          88 | -57 | -39.19 |        faster
firefox | 16   | Page Request |   100 |            2 |           2 |   1 |  33.75 |        slower
firefox | 16   | Rendering    |   100 |          143 |          86 | -57 | -40.03 |        faster
firefox | 17   | Overall      |   100 |          171 |         126 | -45 | -26.27 |        faster
firefox | 17   | Page Request |   100 |            2 |           2 |   0 |  17.92 |        slower
firefox | 17   | Rendering    |   100 |          169 |         124 | -45 | -26.69 |        faster
firefox | 18   | Overall      |   100 |          126 |          78 | -47 | -37.71 |        faster
firefox | 18   | Page Request |   100 |            2 |           2 |   0 |   2.43 |
firefox | 18   | Rendering    |   100 |          124 |          76 | -48 | -38.43 |        faster
firefox | 19   | Overall      |   100 |           92 |          58 | -34 | -37.19 |        faster
firefox | 19   | Page Request |   100 |            2 |           2 |   0 |  12.74 |
firefox | 19   | Rendering    |   100 |           90 |          56 | -35 | -38.13 |        faster
firefox | 20   | Overall      |   100 |          178 |          96 | -82 | -46.18 |        faster
firefox | 20   | Page Request |   100 |            2 |           2 |   0 |  -2.23 |
firefox | 20   | Rendering    |   100 |          176 |          94 | -82 | -46.67 |        faster
firefox | 21   | Overall      |   100 |          181 |         102 | -79 | -43.77 |        faster
firefox | 21   | Page Request |   100 |            2 |           2 |   0 |  12.36 |        slower
firefox | 21   | Rendering    |   100 |          179 |          99 | -79 | -44.34 |        faster
firefox | 22   | Overall      |   100 |          140 |          84 | -55 | -39.59 |        faster
firefox | 22   | Page Request |   100 |            2 |           2 |   0 |  12.50 |
firefox | 22   | Rendering    |   100 |          138 |          82 | -55 | -40.25 |        faster
firefox | 23   | Overall      |   100 |          119 |          73 | -46 | -38.48 |        faster
firefox | 23   | Page Request |   100 |            2 |           2 |   1 |  35.71 |        slower
firefox | 23   | Rendering    |   100 |          117 |          71 | -46 | -39.48 |        faster
firefox | 24   | Overall      |   100 |          165 |          96 | -68 | -41.51 |        faster
firefox | 24   | Page Request |   100 |            2 |           2 |   0 |   2.81 |
firefox | 24   | Rendering    |   100 |          163 |          94 | -68 | -42.00 |        faster
```",False
4bd5d98d59dcc1db13b3fb27b17aae30b29d8df8,2022-05-01 17:14:23,Jonas Jenwald,"Merge pull request #14860 from timvandermeij/updates

Update dependencies and translations",True
58fed00bc3d94927edc86f48edd444dbabfa770b,2022-05-01 16:40:20,Tim van der Meij,Update translations to the most recent versions,False
dacd61fededdbfb1ccafe70794f8fb0c1574760f,2022-05-01 16:38:00,Tim van der Meij,"Update dependencies to the most recent versions

There are two notable changes here:

- `dommatrix` is a major version upgrade, but looking through the commit
  history of their `package.json` file at https://github.com/thednp/dommatrix/commits/master/package.json
  (due to the lack of a changelog) I couldn't find any breaking changes.
- `es-module-shims` is a regular update, but it was previously pinned
  for causing intermittent breakage when running the unit tests in a
  browser manually. Fortunately this cannot be reproduced anymore with
  the most recent version, so we can also put the caret back now.",False
75ac897284fe5da7f56ce894f4cba31270931365,2022-04-30 15:51:25,Tim van der Meij,"Merge pull request #14857 from Snuffleupagus/rm-webViewerOpenFileViaURL

Inline the `webViewerOpenFileViaURL` function in  `webViewerInitialized`",True
e5e2941d533aad2d62f863fa6d7347cf3d5a92f0,2022-04-30 15:48:16,Tim van der Meij,"Merge pull request #14854 from Snuffleupagus/viewer-rm-button-classes

Remove redundant class names from the button DOM-elements",True
b10b8dad7dd232318375d6a4d7e2e57042a4c3f0,2022-04-29 21:45:03,calixteman,"Merge pull request #14853 from calixteman/white_lines

Use integer coordinates when drawing images (bug 1264608, issue #3351)",True
9268924a1592a6b7c922b8de8447c1d80ce1c25e,2022-04-29 21:37:56,Jonas Jenwald,"Only define the `webViewerFileInputChange`/`webViewerOpenFile` variables in GENERIC builds

There's no point in having these variables defined (implicitly) as `undefined` in e.g. the Firefox PDF Viewer.
By defining them with `var` and using ESList ignores, rather than `let`, we can move them into the relevant pre-processor block instead. Note that since the entire viewer-code is placed, by Webpack, in a top-level closure these variables will thus *not* become globally accessible.",False
7cce41c26d5ba55be6165a721d992f293d8f9076,2022-04-29 21:37:52,Jonas Jenwald,"Inline the `webViewerOpenFileViaURL` function in `webViewerInitialized`

Given that `webViewerOpenFileViaURL` only has a single call-site, and also isn't a particularly large/complex function, it doesn't seem necessary for this to be a separate function and hence it's simply inlined instead.

Also, changes the ""no valid build-target was set""-case to throw unconditionally since the only way that it could ever be hit is if there are bugs in the `gulpfile`-code.",False
624d8a8e3e7a8580bdd813b2c8ef5d9c6446b78d,2022-04-29 19:31:34,Calixte Denizet,"Use integer coordinates when drawing images (bug 1264608, issue #3351)
- it aims to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1264608;
- it's only a partial fix for #3351;
- some tiled images have some spurious white lines between the tiles.
  When the current transform is applyed the corners of an image can have
  some non-integer coordinates leading to some extra transparency added
  to handle that. So with this patch the current transform is applied on the
  point and on the dimensions in order to have at the end only integer values.",False
24d5d5d761157120297334b3ff56ce43660a3fd4,2022-04-29 18:49:17,Jonas Jenwald,"Merge pull request #14856 from Snuffleupagus/rm-forceClamped

[api-minor] Remove the `forceClamped`-functionality in the Streams (issue 14849)",True
fbf6dee8eeb8b7b6514b141fba8484ea068e0ef1,2022-04-29 18:16:30,Jonas Jenwald,"[api-minor] Remove the `forceClamped`-functionality in the Streams (issue 14849)

As it turns out, most of the code-paths in the `PDFImage`-class won't actually pass the TypedArray (containing the image-data) to the `ColorSpace`-code. Hence we *generally* don't need to force the image-data to be a `Uint8ClampedArray`, and can just as well directly use a `Uint8Array` instead.

In the following cases we're returning the data without any `ColorSpace`-parsing, and the exact TypedArray used shouldn't matter:
 - https://github.com/mozilla/pdf.js/blob/b72a4483276d65bef32cff269eb40923c1363f2d/src/core/image.js#L714
 - https://github.com/mozilla/pdf.js/blob/b72a4483276d65bef32cff269eb40923c1363f2d/src/core/image.js#L751

In the following cases the image-data is only used *internally*, and again the exact TypedArray used shouldn't matter:
 - https://github.com/mozilla/pdf.js/blob/b72a4483276d65bef32cff269eb40923c1363f2d/src/core/image.js#L762 with the actual image-data being defined (as `Uint8ClampedArray`) further below
 - https://github.com/mozilla/pdf.js/blob/b72a4483276d65bef32cff269eb40923c1363f2d/src/core/image.js#L837

*Please note:* This is tagged `api-minor` because it's API-observable, given that *some* image/mask-data will now be returned as `Uint8Array` rather than using `Uint8ClampedArray` unconditionally. However, that seems like a small price to pay to (slightly) reduce memory usage during image-conversion.",False
1e24fe97f2d81847978c67851336ac4978e032d3,2022-04-29 13:10:03,Jonas Jenwald,"Remove unnecessary CSS classes when specifying button icons

Currently we're using *both* ids and classes when specifying the button icons, which seems completely unnecessary and only serves to bloat the CSS code.
In general you always need to be careful about CSS specificity, but in these cases that should not actually be a problem.

Also, while not a button, this patch makes a similar simplification for the `pageNumber`-input.",False
4f69d66ab2f26ac4caf1cdd9e87d60707826eb52,2022-04-29 13:06:35,Jonas Jenwald,"Remove redundant class names from the button DOM-elements

Note how in the `viewer.html` file we're specifying class names for most buttons, despite that not really being necessary. First of all, in many cases those class names are *identical* to the element-ids. Secondly, looking through the CSS rules they are only ever used when specifying button icons.
All-in-all, we should be able to simplify the HTML-code and use the element-ids in the CSS rules instead. Obviously ids have a higher CSS specificity than classes, but given how the old classes were being used that shouldn't be a problem here.

Also, the patch generalizes the styling for buttons (e.g. `viewBookmark`) that are *actually* link-elements.

Finally, while slightly unrelated, this patch also removes a little bit of duplication when specifying the border for `toolbarField`s.",False
b72a4483276d65bef32cff269eb40923c1363f2d,2022-04-27 18:02:23,Tim van der Meij,"Merge pull request #14835 from Snuffleupagus/CSS-cleanup-separators

Clean-up some CSS rules for the various toolbar separators",True
5ca9f9bf864514ba7a3c74848386f3c4fb4f71d1,2022-04-27 17:57:46,Tim van der Meij,"Merge pull request #14833 from Snuffleupagus/mozcentral-rm-openFile-buttons

Stop bundling the openFile-buttons in the MOZCENTRAL build",True
694cb311c045a3499b5ed5865a2fe28469b42691,2022-04-27 15:45:48,Jonas Jenwald,"Merge pull request #14848 from Snuffleupagus/issue-14847

Support destinations in NameTrees with encoded keys (issue 14847)",True
71370d012b9365dbd9d1743f4faa7a2828e93136,2022-04-27 14:49:55,Jonas Jenwald,"Support destinations in NameTrees with encoded keys (issue 14847)

Initially I considered updating the `NameOrNumberTree`-implementation to handle encoded keys, however that quickly became somewhat messy (especially in the `NameOrNumberTree.get`-method) since only NameTrees using string-keys.
Hence the easiest solution, as far as I'm concerned, was thus to just update the `Catalog.destinations`-getter instead. Please note that in the referenced PDF document the `Catalog.destination`-method will thus fallback to fetch all destinations, which should be fine since this is the very first case of encoded keys that we've seen.

Also changes the `NameOrNumberTree.getAll`-method to prevent a possible run-time error, although we've so far not seen such a case, for any non-Array Kids-entries found in a NameTree/NumberTree.

Finally, to improve overall consistency and to hopefully prevent future bugs, the patch also updates a couple of other `NameTree` call-sites to correctly handle encoded keys. (Note that the `Catalog.attachments`-getter was already doing this.)",False
981cd5bbfce322177fc92c95f18735b95d3ff83d,2022-04-25 18:53:44,Jonas Jenwald,"Merge pull request #14836 from calixteman/fix_integration

Don't use pref 'browser.download.improvements_to_download_panel' in Firefox (#14822)",True
314fd83bbab94fb5d182a520351f775dafbbf064,2022-04-25 18:35:43,Calixte Denizet,Don't use pref 'browser.download.improvements_to_download_panel' in Firefox (#14822),False
3c10c66cd36b0404e92edc42cba24b6b33cc56ac,2022-04-25 18:25:32,Jonas Jenwald,"Remove unused CSS rules for toolbar buttons with `textButton`-classes

Searching through all of the files in the `web/`-folder has no *other* hits for the ""textButton"" string. Hence it's clear that there are no DOM elements actually using this class, and it's thus dead code.",False
f9262d29fce0ceff14d3b9e183aebcda440de371,2022-04-25 18:23:12,Jonas Jenwald,"Clean-up some CSS rules for the various toolbar separators

This re-factors the various toolbar separators to *explicitly* specify both their dimensions and margins. Also, for the `horizontalToolbarSeparator`-class we can just set the `background-color` rather than using `border-top`.

Note that the `splitToolbarButtonSeparator`-class currently sets a number of unnecessary CSS rules, since as mentioned by the Firefox Devtools both the `display`- and `z-index`-properties are being ignored because `float` is used.

Finally, there's also no need to set a `z-index` for some of the `:hover`-rules. It's possible that this *was* necessary before the re-design, since the buttons had borders then.",False
b04c3733627175d14335777fe685b1ba84d657c6,2022-04-25 15:05:17,Jonas Jenwald,"Stop bundling the openFile-buttons in the MOZCENTRAL build

Note how both of the openFile-buttons are always hidden during viewer initialization in the MOZCENTRAL build, i.e. the *built-in* Firefox PDF Viewer. Despite that we still include HTML, CSS, and JavaScript code for these buttons in the build.

This patch *reduces* the size of the `gulp mozcentral` output by `1679` bytes, which isn't a lot but still cannot hurt.",False
2be19e828fcf9ce7740a2136087da028dff56e00,2022-04-24 15:17:07,Tim van der Meij,"Merge pull request #14831 from Snuffleupagus/incrementCachedImageMaskCount

Add a helper function for incrementing the `count` of cached ImageMasks",True
41065d78250e88db59065bff5afcd43cbed57aff,2022-04-24 14:51:34,Tim van der Meij,"Merge pull request #14829 from Snuffleupagus/rm-print-CSS

Remove unnecessary `print` CSS rules",True
e18edf38db46d74f8b1d801ac20663ed4e98197a,2022-04-24 14:40:02,Jonas Jenwald,"Add a helper function for incrementing the `count` of cached ImageMasks

While working on PR 14825, I couldn't help noticing that the code to increment the `count` for cached ImageMasks was repeated multiple times. Hence it makes sense, as far as I'm concerned, to move this into a helper function instead.",False
925a7bc58abd1afdb55ae0a8ebc75e173dec7bf8,2022-04-23 18:02:00,Jonas Jenwald,"Remove unnecessary `print` CSS rules

These rules became unnecessary with PR 7697, over five years ago, since printing is now done from a `printContainer`-element rather than ""directly"" using the viewer.

Note how the *entire* `outerContainer`, which contains all of the DOM elements that were being manually hidden, is now being hidden during printing. Furthermore, note also how the print-canvases/images and their containers are using custom CSS-classes[1] rather than re-using the ones from the viewer.

---
[1] See the `printedPage` respectively `xfaPrintedPage` classes.",False
752dee5caa4e9e43b84c2e3036a1f3939f42320a,2022-04-23 16:49:56,Tim van der Meij,"Merge pull request #14825 from Snuffleupagus/issue-14824

Ensure that worker-thread image caching doesn't break optional content (issue 14824)",True
f9e54d92262b64ecea7c3a7fc4420b683036e531,2022-04-23 16:49:26,Tim van der Meij,"Merge pull request #14823 from Snuffleupagus/issue-14821

Ignore invalid /Encoding-entries when parsing fonts (issue 14821)",True
18dd2866f7771e187e9abeaf19a26cac9a8ffde5,2022-04-23 16:41:16,Tim van der Meij,"Merge pull request #14827 from Snuffleupagus/toolbar-margin

Simplify setting of spacing at the left/right edges of the toolbar(s)",True
1921c4612d5f7db8987ed8f84ff7333cc0f41974,2022-04-23 16:39:32,Tim van der Meij,"Merge pull request #14828 from Snuffleupagus/viewer-more-for-of

Use more `for...of` loops in the viewer",True
7e57469683d51c1fffbdc9e9a736f6f176294a3b,2022-04-23 16:18:54,Jonas Jenwald,"Use more `for...of` loops in the viewer

Note that the arrays that we're looping over here are by definition *dense*, hence there's no point in checking if each element actually exists first.",False
33ed743c480aa7534c8c6f2d63b062be7d98f126,2022-04-22 21:45:28,Jonas Jenwald,"Simplify setting of spacing at the left/right edges of the toolbar(s)

Rather than modifying the leading/trailing `margin` on the actual toolbar buttons, to achieve appropriate spacing at the left/right edges of the toolbar(s), it seems much more appropriate (and simpler) to just specify an explicit `padding` for the relevant toolbar containers.

Also, for toolbar buttons placed in `splitToolbarButton`-classes we can reduce some complexity around setting the `margin` (since it should always be zero now).

With these changes, we're thus able to get rid of a couple more `!important`-rules.",False
6c229dffb14407f89c82eb64d4762a4890cec8de,2022-04-22 18:19:16,Jonas Jenwald,"Ensure that worker-thread image caching doesn't break optional content (issue 14824)

Currently we only insert optionalContent-data into the operatorList the first time that an image is parsed, which will (in hindsight) obviously cause problems for cached images.
Hence we also need to insert the optionalContent-data in the various worker-thread image caches, such that it can be accessed in the fast-paths that are used to skip re-parsing of images.

In order to reduce the amount of repeated code, this patch also adds a new `OperatorList`-method that takes care of inserting the necessary data in the operatorList.",False
e723da7261d3be98736f763f3a472711dea6df73,2022-04-22 15:19:03,Jonas Jenwald,"Ignore invalid /Encoding-entries when parsing fonts (issue 14821)

In the referenced PDF document the fonts have /Encoding-entries that are Streams (containing completely bogus data), which are thus obviously not valid here.
Hence, only when `ignoreErrors` is set, we'll now ignore these corrupt /Encoding-entries and fallback to the existing code to try and infer a usable encoding.

Given that this is *clearly* a case of corrupt PDF documents, there's no guarantee that this will ""fix"" all such cases, however it's the best that we do here and shouldn't really be worse than ignoring an entire font.",False
f39219cd45a03e6cdb96b5854c2e01376a1e41a2,2022-04-22 15:09:13,Tim van der Meij,"Merge pull request #14815 from Snuffleupagus/issue-14814

Ignore non-Stream /SMask-entries when parsing images (issue 14814)",True
7ba71f56b412d0ae9c85cd52e114d0ae1c53a570,2022-04-22 15:01:55,Tim van der Meij,"Merge pull request #14818 from Sea-n/master

Use correct case for JavaScript",True
ec28f0aa479b742eeeab274a4e4b80986a62b7a2,2022-04-22 15:00:32,Tim van der Meij,"Merge pull request #14817 from Snuffleupagus/more-CSS-cleanup

Some more, small, CSS clean-up",True
6bf978404e0348ba05b1ab98307ca8c8cb9574d2,2022-04-21 21:26:28,Sean Wei,Use correct case for JavaScript,False
0f7e3213a1ffaf93b9beb22fa927fccb3effbdc4,2022-04-21 19:11:30,Jonas Jenwald,"Some more, small, CSS clean-up

 - Remove a redundant `margin-top` rule for the `.dropdownToolbarButton`. After the (somewhat) recent UI-refresh all buttons now use `margin: 2px 1px;`, which renders the override unnecessary (and getting rid of an `!important`-rule can't hurt).

 - Combine two `.toggled::before` rules, since they're identical.",False
39d1bdde0993abd66ae24b7b686420c24e250fd2,2022-04-21 15:44:08,Jonas Jenwald,"Ignore non-Stream /SMask-entries when parsing images (issue 14814)

This is similar to the pre-existing check used in the /Mask-case below, to handle *corrupt* PDF documents that include non-Stream /SMask-entries in images; please refer to the PDF specification:
https://web.archive.org/web/20220309040754if_/https://www.adobe.com/content/dam/acom/en/devnet/pdf/pdfs/PDF32000_2008.pdf#page=216

*Please note:* Adobe Reader also fails to render the image on the second page, and displays an error message.",False
452a98b0e01a928b6bbdf56433c74ce700e2da3b,2022-04-20 23:20:57,Tim van der Meij,"Merge pull request #14810 from Snuffleupagus/mozcentral-rm-errorWrapper-CSS

Stop bundling `errorWrapper` CSS rules in the MOZCENTRAL build",True
5e8b2e5d25f5cd4bf4842e95b017b3d0e7c619a3,2022-04-20 23:16:53,Tim van der Meij,"Merge pull request #14794 from Snuffleupagus/BaseViewer-update-isInPresentationMode

Remove the PresentationMode special-case from `BaseViewer.update`",True
1d803451c32e22e9be100749847fc6c9ccb6d22c,2022-04-20 18:05:09,Jonas Jenwald,"Stop bundling `errorWrapper` CSS rules in the MOZCENTRAL build

Note that both the `errorWrapper` HTML and JavaScript code is being ignored in the MOZCENTRAL build, i.e. the *built-in* Firefox PDF Viewer, however the CSS rules are still being included.
That seems totally unnecessary, and while we currently don't have full build-target support in the CSS pre-processor we can actually improve things quite easily anyway. By (ab)using the existing CSS pre-processor, which will remove any non-Firefox CSS rules for the MOZCENTRAL build, it's possible to easily stop bundling any CSS rules by using comments that include a `-webkit`-string.

*Please note:* To easily test that this doesn't break the `errorWrapper` in GENERIC builds, try running e.g. `PDFViewerApplication._otherError(""test"");` in the web-console.",False
c91d2ac15a8fe72f991362757e740819972d8033,2022-04-20 15:47:00,Jonas Jenwald,"Remove the PresentationMode special-case from `BaseViewer.update`

This special-case was added because the original PresentationMode-implementation used some CSS-tricks to hide everything except the current page. With the changes in PR 14112, which added a PAGE scroll-mode, many of the old PresentationMode-specific hacks could thus be removed from both the JS and CSS code.

This patch is yet another (small) clean-up step, to reduce the number of PresentationMode special-cases used throughout the `BaseViewer`. Note in particular that `BaseViewer.update` now works just fine in PresentationMode[1], and that we only need to ensure that the active page won't *accidentally* change because of the PresentationMode-specific zooming that occurs during page-switching.

---
[1] In the event that we ever want to try and support spread-modes in PresentationMode, which I'm really not keen on doing since documents with varying page sizes will be annoying to handle, these changes would be necessary as well.",False
9a8fa3201fbe440ab4b546976f641b04518cca3c,2022-04-20 01:11:24,Tim van der Meij,"Merge pull request #14803 from Snuffleupagus/issue-14802

Add support for the /Catalog Base-URI when resolving URLs (issue 14802)",True
c58ff7c3013b71b246d8c903dce969a6ba3d5434,2022-04-20 00:59:41,Tim van der Meij,"Merge pull request #14801 from Snuffleupagus/findbar-simplify-button-styling

[GENERIC viewer] Simplify the styling of the previous/next findbar buttons",True
5032e357d46d7e22f18f1a26ea940edadaa8c77e,2022-04-20 00:55:59,Tim van der Meij,"Merge pull request #14793 from Snuffleupagus/ensurePageViewVisible-spreads

Simplify spread-mode handling for the PAGE scroll-mode",True
a115d17b435a4be61c7654b63d0c1a6e967bce4d,2022-04-20 00:49:05,Tim van der Meij,"Merge pull request #14795 from Snuffleupagus/CSS-reduce-duplication

Reduce more duplication in the CSS",True
b34fb94c68a8fad5ee3979a242c54ae254c63e58,2022-04-20 00:47:28,Tim van der Meij,"Merge pull request #14792 from Snuffleupagus/update-packages

Update packages and translations",True
5f6ca2224eba89b8fd142022b6548951eebfa495,2022-04-20 00:44:42,Tim van der Meij,"Merge pull request #14790 from Snuffleupagus/rm-print-CSS

Remove some outdated CSS rules related to printing",True
cf320f8fa3ea6d588073b90f3b8c95d8c826ecc4,2022-04-20 00:43:16,Tim van der Meij,"Merge pull request #14788 from Snuffleupagus/debugger-separate-css

Move the `PDFBug`-related CSS from `viewer.css` and into its own file",True
5bc7339c1b51f982e79f4f2e296eedea22f8d4e3,2022-04-19 20:44:52,Jonas Jenwald,"Add support for the /Catalog Base-URI when resolving URLs (issue 14802)

As far as I can tell, this is actually the very first time that we've seen a PDF document with a Base-URI specified in the /Catalog; please refer to the specification:
https://web.archive.org/web/20220309040754if_/https://www.adobe.com/content/dam/acom/en/devnet/pdf/pdfs/PDF32000_2008.pdf#G11.2097122

To simplify the overall implementation, this new parameter is accessed via the existing `BasePdfManager.docBaseUrl`-getter and will thus override any user-specified `docBaseUrl` API-parameter.",False
fb90ef7b28911537e91b5c27c5500599c3bc651e,2022-04-19 17:42:30,Jonas Jenwald,"[GENERIC viewer] Simplify the styling of the previous/next findbar buttons

The styling of the previous/next-buttons and the findInput, with the elements being ""glued"" together, was supposed to mimic the styling used in the Firefox *browser* findbar. However, after the most recent re-styling of the Firefox browser UI these elements are now visually separated.
Hence it makes sense, as far as I'm concerned, to try and follow this styling for the findbar used in the GENERIC viewer. One benefit of doing this is that we get more consistent styling, since the buttons now look/behave identically in both the main toolbar and the findbar. Additionally this also simplifies the CSS a bit, since a lot of the existing findbar-specific rules can be removed.",False
32ae0e4867a3670aba529bb32496958cebe446f3,2022-04-18 16:47:17,Jonas Jenwald,"Merge pull request #14799 from calixteman/12306-followup

Fix clipping issue with pattern (follow-up of #14797)",True
c2aa03e19427e3c9d7a18198c5c303e6247b385d,2022-04-18 16:11:14,Calixte Denizet,Fix clipping issue with pattern (follow-up of #14797),False
5bbed400f2e82422c5bd7cc507b2c14cc1dc16f1,2022-04-18 14:48:32,Jonas Jenwald,"Merge pull request #14797 from calixteman/12306

Don't clip when the clip path is empty (issue #12306)",True
f82879205e5c85a10f647fde8785c62028ccf1a6,2022-04-18 14:45:23,Jonas Jenwald,"Merge pull request #14796 from calixteman/minmax

[api-minor] Simplify min/max computations in constructPath (bug 1135277)",True
3d74d2c6cb2aab2d62daf83ef9dbd1ab208232e7,2022-04-18 14:03:44,Calixte Denizet,Don't clip when the clip path is empty (issue #12306),False
4b7691baf64c4c250e9ab9eb526ef523a14345dd,2022-04-17 20:55:54,Calixte Denizet,"Simplify min/max computations in constructPath (bug 1135277)
- most of the time the current transform is a scaling one (modulo translation),
  hence it's possible to avoid to apply the transform on each bbox and then apply
  it a posteriori;
- compute the bbox when it's possible in the worker.",False
1ea9740fdb8288f24007d55a68e9e220b9c5f550,2022-04-17 17:33:01,Jonas Jenwald,"Reduce more duplication in the CSS

This patch combines a couple of different CSS rules, thus reducing the overall size of the file.",False
379125c37ff58cfb86e3bbd2eca5760fb2fcb061,2022-04-17 16:07:23,calixteman,"Merge pull request #14777 from calixteman/mask_perf

[api-minor] Improve performances with image masks (bug 857031)",True
03ec7a22f23f8e9697779eac29931a9eb7f2b65a,2022-04-17 14:28:14,Jonas Jenwald,"Simplify spread-mode handling for the PAGE scroll-mode

The spread-mode code in `BaseViewer.#ensurePageViewVisible`-method was initially copied from the `BaseViewer._updateSpreadMode`-method, which means that it's slightly more complicated than actually necessary.
In particular, in the PAGE scroll-mode there can only be *one* spread active at a time and we thus don't need to handle insertion of multiple spread-divs.",False
0c086467a9f49c345cca598c40b438c620c0236f,2022-04-17 13:55:20,Jonas Jenwald,Update l10n files,False
c727fde767442112681c643403a042ade0f9784d,2022-04-17 13:53:09,Jonas Jenwald,"Fix (some) vulnerabilities reported by `npm audit`

This was done automatically, using the `npm audit fix` command.",False
bb6bb137cf6ded765516947f8a96888667393266,2022-04-17 13:46:50,Jonas Jenwald,"Remove the `web-streams-polyfill` Babel-exclusion in `gulpfile.js` (PR 14560 follow-up)

Given that we're no longer, after PR 14560, bundling the `web-streams-polyfill`-code in the `legacy`-builds we shouldn't need to exclude it from Babel now.",False
49d1121f3c7b43877c957ab60711c404a21f7ff2,2022-04-17 13:45:10,Jonas Jenwald,Update npm packages,False
f62d961dfe01a1aeec8ec3d59d50bf1c25900d7e,2022-04-17 00:18:39,Calixte Denizet,"Improve performances with image masks (bug 857031)
- it's the second part of the fix for https://bugzilla.mozilla.org/show_bug.cgi?id=857031;
- some image masks can be used several times but at different positions;
- an image need to be pre-process before to be rendered:
  * rescale it;
  * use the fill color/pattern.
- the two operations above are time consuming so we can cache the generated canvas;
- the cache key is based on the current transform matrix (without the translation part)
  and the current fill color when it isn't a pattern.
- the rendering of the pdf in the above bug is really faster than without this patch.",False
d7fd8d3883b7e09dccb37967169bd286bef357a6,2022-04-16 19:33:17,Jonas Jenwald,"Remove some outdated CSS rules related to printing

Given that no HTML element has used the `loadingBox`-id for many years, we obviously don't need to try and hide a non-existent element during printing.
Furthermore, we also shouldn't need to change the `overflow`-value for the `viewerContainer`-element during printing. Originally, many years ago now, we printed ""directly"" using the viewer and then this apparently made sense.",False
7023bac8d3357e958249a10f562f03ad1f2199eb,2022-04-16 17:46:39,Jonas Jenwald,"Move the `PDFBug`-related CSS from `viewer.css` and into its own file

Given that none of these CSS rules are used at all, unless debugging is enabled, it seems completely unnecessary to load them *unconditionally* for all users.[1]

Note that if *both* the `textLayer` and `pdfBug` debugging hash-parameters are specified simultaneously, we'll now load the `PDFBug`-file *twice* (since the code is simpler that way). However, given first of all that none of this is enabled by default and secondly that using those parameters together isn't helpful[2], potentially loading that file twice is hopefully not an issue.

For the `gulp mozcentral` target, the size of the *built* `viewer.css` file is reduced `> 3%` with this patch.

---
[1] For the Firefox built-in PDF Viewer, in order to even be able to access the `PDFBug` functionality, you need to first of all set `pdfjs.pdfBugEnabled = true` manually in `about:config`. Secondly, you then also need to append the `pdfBug=...` hash-parameter to the URL when *initially* loading the document.

[2] Note how the `textLayer`-settings are already, since essentially forever, overriding the highlighting-features of the ""FontInspector""-tab.",False
b73a6cc2138addc4754627c32f8d7026d2b35b48,2022-04-16 16:06:44,Tim van der Meij,"Merge pull request #14785 from Snuffleupagus/core-js-structuredClone-transfers

Update `core-js` to allow removing a `structuredClone` work-around",True
681a9b8927ebedc7dc4287583311f1681ac086b6,2022-04-16 02:08:19,calixteman,"Merge pull request #14784 from calixteman/intersect

Improve performance of shared/utils.js::intersect (bug 1135277)",True
7501fe6f30fed449af731c6887b1e1959d1666f5,2022-04-16 01:54:26,Calixte Denizet,"Improve performance of shared/utils.js::intersect
- avoid to call normalizeRect which clones the rectangles: it's useless
  and time consuming;
- in profiling the pdf in bug 1135277, the time spent in intersect drops
  from ~1s to ~30ms.",False
b996e107c341150af3adcf601e68a64137d4809a,2022-04-16 01:42:02,Jonas Jenwald,"Update `core-js` to allow removing a `structuredClone` work-around

Because of a bug in previous `core-js` versions, which caused an Error to be thrown if its `structuredClone` polyfill was called with an *explicit* `null`/`undefined` transfer-parameter, the `LoopbackPort`-class contained a work-around.
In the latest `core-js` version this has been fixed, and we can thus simplify our code ever so slightly; please see https://github.com/zloirock/core-js/releases/tag/v3.22.0",False
fffce7910e63038cc15cd01522a768ee86e081be,2022-04-15 15:29:18,Jonas Jenwald,"Merge pull request #14722 from Rob--W/scripting-manager-mousedown-grab-to-pan-conflict

PDFScriptingManager: Bind mousedown listener with capture=true",True
3f5c31e20387cd27396ff4ba5114d3d655a2fe90,2022-04-15 00:42:29,Tim van der Meij,"Merge pull request #14780 from Snuffleupagus/rm-CSS-viewport-scale-factor

Replace the `--viewport-scale-factor` CSS variable",True
c4a9fd635ecfd270da5a987b239833b4f24810c9,2022-04-15 00:32:57,Tim van der Meij,"Merge pull request #14773 from Snuffleupagus/rm-dropdownToolbarButton-styling

Remove some `dropdownToolbarButton`-related CSS rules",True
5ca26bcc0586e1a2852a7b5e70711324f3dfa8fb,2022-04-15 00:27:04,Tim van der Meij,"Merge pull request #14772 from Snuffleupagus/rm-unneeded-CSS

Remove/simplify some CSS rules",True
e9aedf2d91f364715f23bec117afa9fbd73a258a,2022-04-15 00:24:22,Tim van der Meij,"Merge pull request #14771 from Snuffleupagus/dialog-backdrop-rm-user-select

Simplify the `dialog::backdrop` CSS rules (PR 14710 follow-up)",True
97377085c1620eee57ea28999db724fa2e3e059e,2022-04-15 00:17:49,Tim van der Meij,"Merge pull request #14770 from Snuffleupagus/sidebarContainer-transitionend

Always remove the `sidebarMoving` CSS class when the sidebar is closed",True
c4336808fe0d64ca66b75bc72c083dcdfac9a0c4,2022-04-15 00:11:59,Tim van der Meij,"Merge pull request #14769 from Snuffleupagus/cleanup-media-840px

Remove unnecessary `@media` CSS rules (PR 8993 follow-up)",True
e67cd7fae06eeec9bf4ceba9bc301954898f13b1,2022-04-14 16:13:57,Jonas Jenwald,"Replace the `--viewport-scale-factor` CSS variable

This CSS variable is only used together with the `annotationCanvasMap`-functionality in the canvas-code, however its value can be *trivially* computed by using the older `--zoom-factor` CSS variable together with the `PixelsPerInch`-structure.
Rather than having *two different* CSS variables that are this closely linked, it seems better to simplify things by using just one CSS variable instead.",False
11b30c974e1e9a563867af70c46b16bfb70fb508,2022-04-12 19:35:23,Jonas Jenwald,"Remove some `dropdownToolbarButton`-related CSS rules

According to the CSS, there should be a visible ""divider"" after the ""Page Width"" zoom-option. However, this is being ignored in both Mozilla Firefox[1] and Google Chrome hence the rule is effectively useless now.
Furthermore, the ""custom"" zoom-option is already being `hidden` using the attribute (in the HTML code) and there should thus be no reason to duplicate this in the CSS as well.

---
[1] Support for *detailed* styling of `<select>`-elements was removed as part of the E10s project.",False
3752b8975b27cba3608e43c34cbcd5a1c159baf2,2022-04-12 17:21:50,Jonas Jenwald,"Reduce (some) duplication in the CSS rules for the sidebarViews

With just a couple of exceptions, for the `thumbnailView`, all of the sidebarViews share the same basic styling which thus allows for some simplification.",False
f788035a58f87168ad5301aae3d24ef1ec153291,2022-04-12 17:21:45,Jonas Jenwald,"Remove unnecessary `min-width` CSS rules

 - For the findbar/secondaryToolbar case, the `min-width` rule doesn't really make sense since it's way too small to be useful. Furthermore, the findbar is already specifying its own `min-width` and the secondaryToolbar will (thanks to its buttons) receive a correct/useful width.

 - The pageNumber-input already has an *explicit* `width` set, hence setting the `min-width` rule as well is completely unnecessary.

 - The treeItem-links are supposed to *compute* their `min-width`, and the static value was only added as a fallback for older browsers without `calc()` support.",False
93c5c6e5e926fdd249d1b5d1ca386eba0e180785,2022-04-12 16:11:34,Jonas Jenwald,"Use `background-color` rather than `background` in a few CSS rules

In a couple of spots, mostly related to the debugging tools, we're unnecessarily using a somewhat ""complex"" `background`-format only to specify a solid color. This can be simplified by using `background-color` instead, and the patch also removes a `color`-rule that's being ignored anyway.",False
3aed103ce8ffa30ed4f77644cb3fd0891ec834f7,2022-04-12 16:11:29,Jonas Jenwald,"Simplify the `dialog::backdrop` CSS rules (PR 14710 follow-up)

After the changes in https://bugzilla.mozilla.org/show_bug.cgi?id=1761839, we no longer need this CSS work-around to prevent the entire `<dialog>` contents from becoming selected when the backdrop is clicked.",False
0fbe5832abce2bb2778744bf047ee0ee00267d94,2022-04-11 23:16:10,Jonas Jenwald,"Always remove the `sidebarMoving` CSS class when the sidebar is closed

When the viewer becomes narrow enough that the sidebar is overlaying the document, which means that the `viewerContainer` is not moving when opening/closing the sidebar, we're currently not removing the `sidebarMoving` CSS class as intended.
While this doesn't cause any *visible* issues, it's nonetheless wrong and should be fixed.",False
0a83538e6415437898c3cdd704f37a485d61bc84,2022-04-11 13:38:48,Jonas Jenwald,"Remove unnecessary `@media` CSS rules (PR 8993 follow-up)

With the changes in PR 8993, a number of the `@media`-related CSS rules became unnecessary. However, it appears that some of these rule were *accidentally* left behind despite being unused now.
Note that previously, when opening the sidebar shifted the position of the main toolbar, we had to take both the sidebar opened *and* closed cases into account in these `@media` rules.",False
143ba30bef641556a1042ba451c9f69da6db576d,2022-04-10 18:37:08,Tim van der Meij,"Merge pull request #14767 from Snuffleupagus/fileInput-refactor

[GENERIC viewer] Re-factor the `fileInput` initialization",True
8f26e70cf1110cad995f08fdc0a0df5662617658,2022-04-10 18:31:08,Tim van der Meij,"Merge pull request #14765 from Snuffleupagus/requestFullscreen-Promise

Simplify handling of `requestFullscreen` errors in `PDFPresentationMode`",True
cdb3481d6c75ad9b89f8706b1d2dd01a57deafa6,2022-04-10 18:25:08,Tim van der Meij,"Merge pull request #14764 from apeltop/correct-typos

Correct typos",True
07ac5c337f695261c423dedb32699cfecb2586fd,2022-04-10 16:20:35,Jonas Jenwald,"[GENERIC viewer] Remove some, now unnecessary, checks used with `fileInput`

According to the MDN compatibility data, see below, all of these features have been supported for years and years in all browsers. Looking closely at the data, the most likely reason for adding these checks in the first place was for IE 9 compatibility (since we originally ""supported"" that browser).

 - https://developer.mozilla.org/en-US/docs/Web/API/File#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/API/FileReader#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/API/FileList#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/API/Blob#browser_compatibility",False
2c135b02e0b80d961cc726c1d7e58c85f2fe54bc,2022-04-10 02:18:28,calixteman,"Merge pull request #14766 from calixteman/mask2

Improve performance of applyMaskImageData",True
687c9a871033de00657b6f64f429f921ad0dd10f,2022-04-10 01:49:02,Calixte Denizet,"Improve performance of applyMaskImageData
- write some uint32 instead of uint8 to avoid the check before clamping;
- unroll the loop to write data in the buffer
- but keep a loop for the last element of a line: it likely doesn't hurt
  that much since it's executed only for one time for each line;
- I tested on a macbook with an Apple chip, and on Firefox nightly the new
  code is almost 3.5x faster than before (~1.8x with Chrome).",False
5390d2b3773eea39c8e4851ced977bb02641df65,2022-04-10 00:51:18,Jonas Jenwald,"[GENERIC viewer] Re-factor the `fileInput` initialization

*This is yet another installment in a never-ending series of patches that attempt to simplify and improve old code.*

The `fileInput`-element is used to support the ""Open file""-button in the `GENERIC` viewer, however this is very old code.
Rather than creating the element dynamically in JavaScript, we can simply define it conditionally in the HTML code thanks to the pre-processor. Furthermore, the `fileInput`-element currently has a number of unnecessary CSS rules, since the element is *purposely* never made visibly.

Note that with these changes, the `fileInput`-element will now *always* have `display: none;` set. This shouldn't matter, since we can still trigger the `click`-event of the element just fine (via JavaScript) and this patch has been successfully tested in both Mozilla Firefox and Google Chrome.",False
08e1abe68e5df09c753665739e09c4529e1f6e61,2022-04-09 23:34:51,calixteman,"Merge pull request #14754 from calixteman/smask

Improve performance with image masks (bug 857031)",True
040fcae5ab08d1116ccfdd0cee45c1ffefff6c0e,2022-04-09 21:56:26,Calixte Denizet,"Improve performance with image masks (bug 857031)
- it aims to partially fix performance issue reported: https://bugzilla.mozilla.org/show_bug.cgi?id=857031;
- the idea is too avoid to use byte arrays but use ImageBitmap which are a way faster to draw:
  * an ImageBitmap is Transferable which means that it can be built in the worker instead of in the main thread:
    - this is achieved in using an OffscreenCanvas when it's available, there is a bug to enable them
      for pdf.js: https://bugzilla.mozilla.org/show_bug.cgi?id=1763330;
    - or in using createImageBitmap: in Firefox a task is sent to the main thread to build the bitmap so
      it's slightly slower than using an OffscreenCanvas.
  * it's transfered from the worker to the main thread by ""reference"";
  * the byte buffers used to create the image data have a very short lifetime and ergo the memory used is globally
    less than before.
- Use the localImageCache for the mask;
- Fix the pdf issue4436r.pdf: it was expected to have a binary stream for the image;
- Move the singlePixel trick from operator_list to image: this way we can use this trick even if it isn't in a set
  as defined in operator_list.",False
bde6d9ffbaa52c8dbb38c01a40c323529ddb150f,2022-04-09 15:50:11,Jonas Jenwald,"Re-factor how `PDFPresentationMode`, internally, tracks the current `PresentationModeState`

With the changes in the previous patch, we can simplify the state-tracking by using the `PresentationModeState`-values directly in the `PDFPresentationMode` class.",False
8d61b7c088ced2e16a93bc93058090659b0181b2,2022-04-09 15:42:50,Jonas Jenwald,"Simplify handling of `requestFullscreen` errors in `PDFPresentationMode`

Since quite some time the `Element.requestFullscreen()` method has been returning a Promise, see https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen#return_value
Hence we can utilize that to detect failures to enter fullscreen-mode, and remove our old `setTimeout`-based hacks that were used for this purpose.

According to the MDN compatibility data, see https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen#browser_compatibility, all browsers that we support have implemented this functionality. (Note that after PR 14606, we no longer support PresentationMode in Safari.)",False
a97dd26389a5d49b0856d7178cc503466023cdfa,2022-04-09 06:13:18,apeltop,Correct typos,False
2b673a694114268bad7cc7dd687bf004513e1815,2022-04-08 23:35:51,Tim van der Meij,"Merge pull request #14750 from Snuffleupagus/rm-_getCurrentVisiblePage

Remove the `BaseViewer._getCurrentVisiblePage` helper method",True
106b69a101100cf96b88b3dd5d7a5949531043e1,2022-04-08 23:32:23,Tim van der Meij,"Merge pull request #14751 from Snuffleupagus/isLittleEndian-isEvalSupported

Re-factor the `isLittleEndian`/`isEvalSupported` caching",True
497c0610cd0ab465965e096adbad46246983883e,2022-04-07 20:14:08,Jonas Jenwald,"Merge pull request #14761 from Snuffleupagus/viewer-more-optional-chaining

Use a bit more optional chaining in the viewer",True
bb25b6dec5b5b7919ebfccd86939f8b10b45d78f,2022-04-07 19:50:41,Jonas Jenwald,Use a bit more optional chaining in the viewer,False
a919959d8388602d0789a1b56e093a67678cd1fd,2022-04-05 20:07:51,Jonas Jenwald,"Slightly simplify the `Catalog._readMarkInfo` method

We don't need to first check if the Dictionary contains the key, since trying to get a non-existent key simply returns `undefined` and we're already ensuring that the value is a boolean.
Furthermore, we shouldn't need to worry about the `Object.prototype` containing enumerable properties since the checks (in `src/core/worker.js`) done for `Array.prototype` *indirectly* also cover `Object`s. (Keep in mind that an `Array` is just a special kind of `Object` in JavaScript.)",False
1dc4713a0baa73c2d395713fc955ac7a053dc2a3,2022-04-05 19:31:01,Jonas Jenwald,"Re-factor the `isLittleEndian`/`isEvalSupported` caching

This functionality is very old, hence we should be able to improve the caching a little bit with modern JavaScript features.",False
55838303c7f2ee945dfe6e8a2e08579b5960f772,2022-04-05 17:43:20,Jonas Jenwald,"Tweak the `pdfOpenParams` parameter, in the ""updateviewarea"" event, in PresentationMode

The `pdfOpenParams` parameter has never really made sense in PresentationMode, since e.g. the zoom-value doesn't (generally) agree with the value chosen by the user prior to entering PresentationMode.
This has never mattered all that much, since the `viewBookmark`-button isn't visible in PresentationMode (nor is any other toolbar button for that matter). However, in the `PDFHistory`-implementation we're currently forced to handle this case specifically since we don't want to populate the browser history with nonsensical state.
Hence it makes overall sense, as far as I'm concerned, to tweak the ""updateviewarea"" event to include a *simplified* `pdfOpenParams` parameter when PresentationMode is active. Given that the `viewer components` don't include PresentationMode functionality, this change thus shouldn't matter for third-party users.",False
5ef294b3a757e222b5883ea72b886dae0fffb319,2022-04-05 17:02:09,Jonas Jenwald,"Remove the `BaseViewer._getCurrentVisiblePage` helper method

This method was originally added specifically to work-around bugs/issues related to PresentationMode in Google Chrome. Note that prior to PR 14112 we were using some CSS hacks to only show the current page in PresentationMode, and that could lead to the `getVisibleElements` function not always finding the correct elements.
However, after the changes in PR 14112 we're now using the Page-scrolling mode in PresentationMode and consequently there'll only be *a single* page visible at a time. Hence then `BaseViewer._getCurrentVisiblePage` helper method should no longer be needed, and when testing (locally) in Google Chrome everything seems to work correctly now.",False
27e738dff951160420575216c080e22027af0a86,2022-04-04 22:40:55,Jonas Jenwald,"Merge pull request #14663 from Snuffleupagus/issue-14525

[GENERIC viewer] Try to improve a11y, for search results, in the findbar (issue 14525)",True
45553d60f824b3bfc8ef5bd09b7b7fd79912174b,2022-04-04 00:44:17,calixteman,"Merge pull request #14739 from calixteman/14685_fw

Refactor some xfa*** getters in document.js",True
f4fcb59a5e66e9d4276864cbe06067c2d8cdcdde,2022-04-04 00:08:12,Calixte Denizet,"Refactor some xfa*** getters in document.js
- it's a follow-up of PR #14735.",False
3e50e578c214d6c7949dcb78231fb70ead83fa10,2022-04-03 18:21:51,Tim van der Meij,"Merge pull request #14745 from Snuffleupagus/debugger-module

Convert `web/debugger.js` to a *basic* module",True
94e51f98831ae55f4abe5dbcf1576d3eb0b94ab6,2022-04-03 18:14:36,Tim van der Meij,"Merge pull request #14744 from timvandermeij/updates

Update GitHub Actions workflow steps/dependencies/translations to the most recent versions",True
8fa73dbfabac988ea3226a3aca20b46ba9dabfaf,2022-04-03 18:00:26,Jonas Jenwald,"Convert `web/debugger.js` to a *basic* module

The various functionality in `web/debugger.js` is currently *indirectly* added to the global scope, since that's how `var` works when it's used outside of any functions/closures.
Given how this functionality is being accessed/used, not just in the viewer but also in the API and textLayer, simply converting the entire file to a module isn't trivial[1]. However, we can at least export the `PDFBug`-part properly and then `import` that dynamically in the viewer.
Also, to improve the code a little bit, we're now *explicitly* exporting the necessary functionality globally.

According to MDN, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#browser_compatibility, all the browsers that we now support have dynamic `imports` implementations.

---
[1] We could probably pass around references to the necessary functionality, but given how this is being used I'm just not sure it's worth the effort. Also, adding *official* support for these viewer-specific debugging tools in the API feels both unnecessary and unfortunate.",False
312595eb47eb956b2e3808480d648e5bd0847cd3,2022-04-02 23:13:34,Tim van der Meij,Update translations to the most recent versions,False
c04373dda21873c5d81070785f2b1fdff0edda3c,2022-04-02 23:13:34,Tim van der Meij,Update dependencies to the most recent versions,False
349fc51f2c83c40e5703ab6220faa20733fb0cc4,2022-04-02 19:51:43,Tim van der Meij,Update GitHub Actions workflow steps to the most recent versions,False
7c8a92da77aa658ff72ef2591d59f1d47971ef41,2022-04-02 17:22:04,Tim van der Meij,"Merge pull request #14742 from Snuffleupagus/debugger-loops

Replace most loops in `web/debugger.js` with `for...of` loops",True
bc1cde238d3201b3e50ccdf79e24ec41f535ac63,2022-04-02 15:28:10,Jonas Jenwald,"Replace most loops in `web/debugger.js` with `for...of` loops

This leads to *slightly* more compact code overall. Also, uses object shorthand notation to remove some now unnecessary `function`-strings.",False
38e9a46a85f78157654a0e6822fc9ccea8658842,2022-04-01 16:06:57,Jonas Jenwald,"Merge pull request #14738 from Snuffleupagus/xfa-datasets-decode

Decode non-ASCII values found in the xfa:datasets (PR 14735 follow-up)",True
f33ce5fc2d632a804281e56cee770ba25cf9dbab,2022-04-01 15:24:34,Jonas Jenwald,"Decode non-ASCII values found in the xfa:datasets (PR 14735 follow-up)

*Please note:* This is possibly bad/wrong in general, but I figured that submitting it for review wouldn't hurt.

It seems that even Adobe Reader doesn't handle the non-ASCII characters that appear in some of the fields correctly, however it should be pretty easy to improve things on the PDF.js side.",False
b0ec83262b59d6cfe420210099137c7f7945a345,2022-04-01 15:08:02,Jonas Jenwald,"Merge pull request #14734 from Snuffleupagus/setAttribute-string-conversion

Don't manually convert `setAttribute` values to strings (PR 14554 follow-up)",True
36a289d747efaa5d98a072eb56f5e8c6d2c356f9,2022-04-01 15:00:16,Jonas Jenwald,"Merge pull request #14735 from calixteman/14685

[Annotations] Some annotations can have their values stored in the xfa:datasets",True
0b597304c102bfc6422ced1d30345acd37eb40ec,2022-04-01 13:58:04,Calixte Denizet,"[Annotations] Some annotations can have their values stored in the xfa:datasets
- it aims to fix #14685;
- add a basic object to get values from the parsed datasets;
- these annotations don't have an appearance so we must create one when printing or saving.",False
966da4babe6ee28913119d3990e0711cb112ea03,2022-04-01 02:42:56,Jonas Jenwald,"[GENERIC viewer] Try to improve a11y, for search results, in the findbar (issue 14525)

Note that it seemed necessary to re-factor the `findResultsCount` and `findMsg` element grouping, in the HTML/CSS code, in order those elements to be correctly announced by a11y software in Firefox.

The following MDN articles may be helpful here:
 - https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-invalid
 - https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-live",False
f1b17773c0c666ada1b1b3a7f9efbe377f239e28,2022-03-31 20:56:28,Jonas Jenwald,"Don't manually convert `setAttribute` values to strings (PR 14554 follow-up)

According to MDN, see https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute#parameters, non-string values will be automatically converted into strings. I should probably have read that article more carefully, to avoid unnecessary churn in the code; sorry about that!",False
54d4d345d31abead560e1bc54138af6b9baadd6b,2022-03-30 20:04:10,Jonas Jenwald,"Merge pull request #14733 from Snuffleupagus/String-repeat

Use `String.prototype.repeat()` in a couple of spots",True
addb4cb12beedfd73e94eb484a25d2c448a7bcbd,2022-03-30 19:12:40,Jonas Jenwald,"Use `String.prototype.repeat()` in a couple of spots

Rather than using a temporary Array to manually create repeated strings, we can use `String.prototype.repeat()` instead.
The reason that we didn't use this from the start is most likely because some browsers, notably IE, didn't support this; note https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat#browser_compatibility",False
d6592b5e37e6452ded378728c4a7475027ac380a,2022-03-30 15:17:36,Jonas Jenwald,"Merge pull request #14710 from Snuffleupagus/overlays-dialog

Convert the existing overlays to use `<dialog>` elements (issue 14698)",True
4d4c67dd6e5c826287cd7cdd216435cd651a9301,2022-03-30 14:42:21,calixteman,"Merge pull request #14720 from calixteman/12189

[Annotations] Add support for printing/saving choice list with multiple selections",True
ad3fb71a02508a7a8f28fe2ca0bcd16441bd3fe4,2022-03-29 22:29:44,Calixte Denizet,"[Annotations] Add support for printing/saving choice list with multiple selections
- it aims to fix issue #12189.",False
c9f262c480e0d22fdcc6991700f9ce92b72812b2,2022-03-28 15:06:31,Jonas Jenwald,"Add a `<dialog>` polyfill for the `generic-legacy` build

Please note that this patch is purposely quite basic, e.g. it doesn't add the polyfill-CSS in order to simplify the build process, and things such as `::backdrop` thus isn't working.
However, this patch does ensure that older browsers can at least still *access* all of the previous overlays and that things like e.g. opening of password-protected documents respectively printing still works.",False
b3d58e10002f5e8f16d0dad9552a076919c96323,2022-03-28 15:06:31,Jonas Jenwald,"Try to improve a11y for the `PasswordPrompt` and `PDFDocumentProperties` dialogs

This will hopefully improve the a11y a little bit in these dialogs, however there's most definately more things that can be done here (by someone more knowledgeable about a11y).",False
923bd52cdb94e0a0afa5a3d8261f64ad0e8e7e84,2022-03-28 15:06:31,Jonas Jenwald,"Re-factor the `OverlayManager` class to use a `WeakMap` internally

This way we're able to store the `<dialog>` elements directly, which removes the need to use manually specified name-strings thus simplifying both the `OverlayManager` itself and its calling code.",False
f0aa08b46454494f4a0936d2291214d2db206758,2022-03-28 15:06:29,Jonas Jenwald,"Convert the existing overlays to use `<dialog>` elements (issue 14698)

This replaces our *custom* overlays with standard `<dialog>` DOM elements, see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog, thus simplifying the related CSS, HTML, and JavaScript code.

With these changes, some of the functionality of the `OverlayManager` class is now handled natively (e.g. `Esc` to close the dialog). However, since we still need to be able to prevent dialogs from overlaying one another, it still makes sense to keep this functionality (as far as I'm concerned).",False
dc6e2ed6f8c451a9dbb4ca58df0df7303d8cb265,2022-03-28 06:04:00,Rob Wu,"PDFScriptingManager: Bind mousedown listener with capture=true

PDFScriptingManager uses the `mousedown` and `mouseup` listeners to keep
track of whether the mouse pointer is pressed in the `isDown` flag.
These listeners were registered to run during the bubbling phase of the
event dispatch, which can be interrupted if any of the previous event
listeners stopped the event propagation. An example of that is by
`GrabToPan` in web/grab_to_pan.js.

Since the mousedown (and mouseup) listeners of PDFScriptingManager are
free of side effects, and the intention is to always run them, it makes
most sense to register them with the capture flag.",False
0dd6bc9a85c29dd36805d120ab0ad2e42b1a6386,2022-03-27 18:50:19,Jonas Jenwald,"Merge pull request #14703 from calixteman/14627

[text selection] Add the whitespaces present in the pdf in the text chunk",True
18e79e3c0b538d665f31fd671a1a71877ed2bc9a,2022-03-27 18:04:56,Calixte Denizet,"[text selection] Add the whitespaces present in the pdf in the text chunk
- it aims to fix issue #14627;
- the basic idea of the recent text refactoring was to only consider the rendered visible whitespaces.
  But sometimes, the heuristics aren't correct and although some whitespaces are in the text stream
  they weren't in the text chunks because they were too small. Hence we added some exceptions, for example,
  we always add a whitespace when it is between two non-whitespace chars but only when in the same Tj.
  So basically, this patch removes the constraint to have the chars in the same Tj
  (in using a circular buffer to save the two last chars) but don't add a space when the visible space is really
  too small (hence `NOT_A_SPACE_FACTOR`).",False
20d60d92ba3c701d79a62db2b8ff7899e752925e,2022-03-27 17:52:35,Tim van der Meij,"Merge pull request #14715 from Snuffleupagus/issue-13230

Avoid the `textLayer` becoming visible in high contrast mode (issue 13230)",True
973b92060c5e343d2f63481a11587d04c3c6b9f8,2022-03-27 17:39:36,Tim van der Meij,"Merge pull request #14717 from Snuffleupagus/issue-14716

Change the type of the `container` property, in the `TextLayerRenderParameters` typedef (issue 14716)",True
d4714b3043fa2f0adb0dffe0fb4f92ee1ec0057e,2022-03-27 17:37:24,Tim van der Meij,"Merge pull request #14693 from Snuffleupagus/CSS-dir-factor

Remove the remaining `dir`-dependent CSS rules",True
7f0589c74a49b42adca1c0c2a2679d6c7287522f,2022-03-25 03:12:37,Jonas Jenwald,"Change the type of the `container` property, in the `TextLayerRenderParameters` typedef (issue 14716)

Given that the textLayer-code has been using a `DocumentFragment` ever since PR 3356 (back in 2013), simply updating the type of the `container` property should be fine.
This patch also tries to, ever so slightly, improve the grammar of a couple of other properties in the typedef.",False
fd6e2e2ab311d7c2729ebedaf135bce26c520bfd,2022-03-24 18:50:27,Jonas Jenwald,"Avoid the `textLayer` becoming visible in high contrast mode (issue 13230)

Unfortunately this CSS property is not yet available in Firefox, see https://developer.mozilla.org/en-US/docs/Web/CSS/forced-color-adjust#browser_compatibility which is tracked in https://bugzilla.mozilla.org/show_bug.cgi?id=1591210, however this patch seems to work when testing in Google Chrome.

Given that we really cannot do any more on the PDF.js-side of things, until this CSS feature is actually implemented in Firefox, I figured that submitting this patch cannot hurt in order to get rid of an open issue.",False
f8d60da94ec9f5a516731bd70e208d85cabe4f6c,2022-03-24 02:35:23,Jonas Jenwald,"Remove the remaining `dir`-dependent CSS rules

After the recent round of patches, I figured that we'd gone as far as possible in replacing `dir`-dependent CSS rules for the viewer.
However, it occurred that me that we could actually use a bit of CSS-trickery to get rid of the remaining ones. More specifically, this was done by defining a CSS variable whose value depends on the document direction and then using that variable together with `calc()` in the affected rules.

*Please note:* I suppose that this could perhaps be seen as a bit too ""magical"", hence I understand if this patch is ultimately rejected, however this is probably the only simple way to get rid of the remaining `dir`-dependent CSS rules.",False
db4f3adc5e521d767e0aba6327f7633b926f1523,2022-03-24 01:13:15,Tim van der Meij,"Merge pull request #14691 from Snuffleupagus/border-inline

Replace `dir`-dependent `border`-rules with logical properties",True
a3e34002cbc8870e6a863bd3ded045c842b6de07,2022-03-24 01:11:05,Tim van der Meij,"Merge pull request #14699 from Snuffleupagus/getDocument-validation

Slightly improve validation of (some) parameters in `getDocument`",True
30612d2f4ef4f884ed636fc1381fc559c8b6700a,2022-03-24 01:08:05,Tim van der Meij,"Merge pull request #14704 from Snuffleupagus/OverlayManager-private

Convert the `OverlayManager` class to use private fields/methods",True
cd133dbcacdd762c3c0d2aff960af9a361821b66,2022-03-22 14:20:28,Jonas Jenwald,"Change `OverlayManager.open` to always error if the overlay is already active

The old code would allow an overlay to force close *itself*, before immediately re-opening itself, which actually isn't very helpful in practice since that won't re-run any overlay-specific initialization code.
Given how the overlays are being used this really shouldn't have caused any issues, but it's a bug that we should fix nonetheless.",False
bace0623e5a51f07d1124a2435bef0f304e9ca42,2022-03-21 20:31:32,Jonas Jenwald,Convert the `OverlayManager` class to use private fields/methods,False
849de5a5086baa981a9b55be3dc8d404e607980e,2022-03-21 18:02:17,Jonas Jenwald,"Slightly improve validation of (some) parameters in `getDocument`

There's a couple of `getDocument` parameters that should be numbers, but which are currently not *fully* validated to prevent issues elsewhere in the code-base.
Also, improves validation of the `ownerDocument` parameter since we currently accept more-or-less anything here.",False
477dc08b00592ec6efb65d2a29a5bb75b74d0757,2022-03-20 17:15:37,Jonas Jenwald,"Replace `dir`-dependent `border`-rules with logical properties

*Please note:* This is the final step in a series of patches to simplify/modernize the viewer CSS, since the remaining `html[dir=""rtl""]`-cases cannot be converted.

Rather than having to manually specify ltr/rtl-specific border-values in the CSS, we can use logical `border-inline-end`/`border-start-end-radius`/`border-end-end-radius` instead.
These logical properties depend on, among other things, the direction of the HTML document which we *always* specify in the viewer.

Given that most of these logical CSS properties are fairly new, and that cross-browser support is thus somewhat limited (see below), we rely on the previously added PostCSS plugins in order to support this in the GENERIC viewer.

 - https://developer.mozilla.org/en-US/docs/Web/CSS/border-inline-end#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/CSS/border-start-end-radius#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/CSS/border-end-end-radius#browser_compatibility",False
feea2b78fab64d1b1c000ab5a0a6bb875d2a7dfe,2022-03-20 16:57:02,Tim van der Meij,"Merge pull request #14690 from Snuffleupagus/inset-inline

Replace `dir`-dependent `left`/`right` with logical properties",True
bb6505ee69e46370aa98c52bd482ba09960b7d7a,2022-03-20 16:53:22,Tim van der Meij,"Merge pull request #14695 from Snuffleupagus/update-packages

Update packages and translations",True
579ff9459e01a546050203b1dec69b7f8605a40a,2022-03-20 15:29:15,Jonas Jenwald,Update l10n files,False
73d2ddac0da293efb7080b6da06ace9b27f1eb6a,2022-03-20 15:29:13,Jonas Jenwald,"Update npm packages

Note that the Prettier update made it possible to move a couple of comments after `default:`-cases back to their original/intended positions, please see https://prettier.io/blog/2022/03/16/2.6.0.html",False
f017f295ec83f92ee3139a21acd99e1809986e96,2022-03-19 22:07:10,calixteman,"Merge pull request #14692 from calixteman/14672

[JS] - Parse a date in using the given format first and then try the default date parser",True
f0b549c2a2592654604b03ccb4a2c08e20563f93,2022-03-19 20:37:43,Calixte Denizet,"[JS] - Parse a date in using the given format first and then try the default date parser
- it aims to fix #14672.",False
9eed8c357664671a03d3f90e9be8f2eab630fe93,2022-03-19 19:14:01,Jonas Jenwald,"Replace `dir`-dependent `left`/`right` with logical properties

*Please note:* This is another step in a series of patches to simplify/modernize the viewer CSS.

Rather than having to manually specify ltr/rtl-specific left/right-values in the CSS, we can use logical `inset-inline`/`inset-inline-start`/`inset-inline-end` instead.
These logical properties depend on, among other things, the direction of the HTML document which we *always* specify in the viewer.

Given that most of these logical CSS properties are fairly new, and that cross-browser support is thus somewhat limited (see below), we rely on the previously added PostCSS plugins in order to support this in the GENERIC viewer.

 - https://developer.mozilla.org/en-US/docs/Web/CSS/inset-inline#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/CSS/inset-inline-start#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/CSS/inset-inline-end#browser_compatibility",False
6381738a65b5b907c354000561a8ab3f203edbfc,2022-03-19 18:42:34,Tim van der Meij,"Merge pull request #14671 from Snuffleupagus/float-inline

Replace `dir`-dependent `float` with logical properties",True
bc6ea6a8787e920c0bf6831e5826f7937402c21b,2022-03-19 18:33:20,Jonas Jenwald,"Replace `dir`-dependent `float` with logical properties

*Please note:* This is another step in what will, time permitting, become a series of patches to simplify/modernize the viewer CSS.

Rather than having to manually specify ltr/rtl-specific float-values in the CSS, we can use logical `inline-start`/`inline-end` instead (and similar for some related left/right occurrences).
These logical properties depend on, among other things, the direction of the HTML document which we *always* specify in the viewer.

Given that most of these logical CSS properties are fairly new, and that cross-browser support is thus somewhat limited (see below), we rely on PostCSS plugins in order to support this in the GENERIC viewer.

 - https://developer.mozilla.org/en-US/docs/Web/CSS/float#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/CSS/inset-inline-end#browser_compatibility",False
502fd7c80d410145589bd17932e60a933f087413,2022-03-19 18:33:19,Jonas Jenwald,"Stop polyfilling the CSS `calc` functionality

At this point in time, all browsers that we support have native support for CSS variables; please see https://developer.mozilla.org/en-US/docs/Web/CSS/calc()#browser_compatibility and https://github.com/mozilla/pdf.js/wiki/Frequently-Asked-Questions#faq-support

We can also remove the hack introduced back in PR 11567, which was only necessary to work-around an IE 11 specific bug.",False
079dea227435c00a70dac0f9c98dee8d00acc00f,2022-03-19 18:23:39,Tim van der Meij,"Merge pull request #14670 from Snuffleupagus/postcss-logical

Replace `dir`-dependent `margin`/`margin-left`/`margin-right` with logical properties",True
6f2bae680cc44ea32d07c33eebd68936208f7fdc,2022-03-19 18:12:13,Tim van der Meij,"Merge pull request #14689 from Snuffleupagus/PDFFindController-private

Slightly simplify the `PDFFindController._extractText` method, and convert all ""private"" methods into proper ones",True
5de6af4e646ab1fab0c6c335bc621142ca625eae,2022-03-19 18:08:05,Tim van der Meij,"Merge pull request #14683 from Snuffleupagus/sendTest-cleanup

[src/display/api.js] Simplify the `sendTest` function, used with Worker initialization (PR 14291 follow-up)",True
c99d55864689dddb5fa84aecb573a222ed714c62,2022-03-19 18:05:24,Jonas Jenwald,"Replace `dir`-dependent `margin`/`margin-left`/`margin-right` with logical properties

*Please note:* This is another step in what will, time permitting, become a series of patches to simplify/modernize the viewer CSS.

Rather than having to manually specify ltr/rtl-specific margin-values in the CSS, we can use logical margin instead (and similar for some related left/right occurrences).
These logical properties depend on, among other things, the direction of the HTML document which we *always* specify in the viewer.

Given that most of these logical CSS properties are fairly new, and that cross-browser support is thus somewhat limited (see below), we need to use a couple of PostCSS plugins (see below) in order to support this in the GENERIC viewer.

 - https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-start#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/CSS/margin-inline-end#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/CSS/inset-inline-start#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/CSS/inset-inline-end#browser_compatibility

---

 - https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-logical
 - https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-dir-pseudo-class",False
9b9ce07aa6fb4048d443e8c5f73e40635ad7947f,2022-03-19 18:05:04,Tim van der Meij,"Merge pull request #14688 from Snuffleupagus/RefSet-RefSetCache-iterator

Add general iteration support in the `RefSet` and `RefSetCache` classes",True
764ccd9d3479b822903585d8b9e19521c31d05e6,2022-03-19 17:59:49,Tim van der Meij,"Merge pull request #14682 from Snuffleupagus/preprocessCSS-defines

[gulpfile.js] Use the regular `defines` in the `preprocessCSS` function",True
61a52e8043d3815496ac2a8410192f4e98164471,2022-03-19 16:56:03,Jonas Jenwald,"Convert all ""private"" methods in `PDFFindController` into proper ones

Given that none of these methods are/were ever intended to be called manually, we can now enforce this with modern class-features.",False
cc1bca6268024b59c73fc55146e8257bf0032c43,2022-03-19 16:43:29,Jonas Jenwald,"Slightly simplify the `PDFFindController._extractText` method

Currently we're resolving the Promises in the `_extractTextPromises` Array with the page-index, despite that not really being necessary since the Promises in the Array are explicitly inserted in the correct order.
Furthermore, we can replace the standard `for`-loop with a `for...of`-loop which results in ever so slightly more compact code.",False
c0736647f9c09fa3d582bd7bc635dd854164ea07,2022-03-18 18:57:34,Jonas Jenwald,"Add general iteration support in the `RefSet` and `RefSetCache` classes

This patch removes the existing `forEach` methods, in favor of making the classes properly iterable instead. Given that the classes are using a `Set` respectively a `Map` internally, implementing this is very easy/efficient and allows us to simplify some existing code.",False
5180bafb8f2187fa67fe4f56535c8fa1e05f8608,2022-03-17 03:09:48,Jonas Jenwald,"[gulpfile.js] Use the regular `defines` in the `preprocessCSS` function

Rather than *manually* specifying a ""mode"", we can simply use the regular `defines` directly instead. To improve consistency, in the `external/builder/builder.js` file, a couple of parameters are also re-named.",False
489e9ff7d3b60d18868385aaec5ef6f718ac1260,2022-03-17 00:44:02,Tim van der Meij,"Merge pull request #14675 from Snuffleupagus/build-dev-CSS

Build the `web/viewer.css` file used in the development viewer (i.e. `gulp server`)",True
00eb942c934fc0fa21c36ef31080589ef099d4e3,2022-03-17 00:40:45,Tim van der Meij,"Merge pull request #14678 from Snuffleupagus/PDFDocumentProperties-private

Convert the `PDFDocumentProperties` class to use private methods",True
82770e0655cac9f71ee26685f554f2bd72a66b47,2022-03-17 00:36:55,Tim van der Meij,"Merge pull request #14676 from Snuffleupagus/preprocessCSS-cleanup

Remove the custom `grab`/`grabbing` cursor image files",True
be2b1d5d2a3376de531db6909004bfc09cda231c,2022-03-16 17:55:41,Jonas Jenwald,"[src/display/api.js] Simplify the `sendTest` function, used with Worker initialization (PR 14291 follow-up)

Given that we now only use Workers when `postMessage` transfers are supported, there's really no point in trying to send a ""test"" message *without* transfers present.
Hence, if `postMessage` transfers are not supported by the browser, we'll now fallback to ""fake"" Workers immediately instead. The comment about Opera is also removed, since it was originally added back in PR 983 and mentions Opera `11.60` [which was released in 2011](https://en.wikipedia.org/wiki/History_of_the_Opera_web_browser#Version_11).",False
d5c9be341d344a31bf90bccbe9ba5aa37b023d01,2022-03-16 17:32:34,Jonas Jenwald,"[src/display/api.js] Use private static class fields, rather than `shadow`ed getter work-arounds (PR 13813, 13882 follow-up)

At the time private static class fields were to new, however that's no longer an issue and we can thus (ever so slightly) simplify the code.",False
ba8dae696a0a9a35eace363fa01e63b567faad4f,2022-03-15 22:47:06,Jonas Jenwald,"Convert the `PDFDocumentProperties` class to use private methods

Given that none of these methods were ever intended to be accessed directly from the outside, we can use modern ECMAScript features to ensure that they are indeed private.

This patch also makes `fieldData` private, to remove the old hack used to prevent it from being modified from the outside.",False
c5574864e1bf08f82c2395c8049bf8aa708508fd,2022-03-15 18:07:46,Jonas Jenwald,"Remove the `-webkit-mask-image`/`-webkit-mask-image` CSS rules

Given that we're now *building* the `web/viewer.css` file used in the development viewer, i.e. with `gulp server`, we no longer need to hard-code these `-webkit`-prefixed rules and can instead let Autoprefixer handle that for us.",False
e59c2dc308000fa14eec456238976e5418e33f3a,2022-03-15 18:07:44,Jonas Jenwald,"Build the `web/viewer.css` file used in the development viewer (i.e. `gulp server`)

To allow using modern CSS features that currently only Mozilla Firefox supports[1], while still enabling development/testing in recent Google Chrome versions, we'll have to start building the `web/viewer.css` file with `gulp server` as well.

In my testing, building the development CSS (and copying the images) takes *less than* `200 ms` on average which is hopefully an acceptable overhead for this sort of feature.

---
[1] In particular `float`, with `inline-start`/`inline-end` values.",False
ee2896dd1ebc5f19563f98b74faa2f0acc57f1c2,2022-03-14 19:06:38,Jonas Jenwald,"Remove the custom `grab`/`grabbing` cursor image files

According to the MDN compatibility data, see https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#browser_compatibility, all browsers that we now support should have these cursors available natively.",False
6776efe491a111fbd7666812e591e3d6d9fd9190,2022-03-14 18:25:05,Jonas Jenwald,"[gulpfile.js] Remove the `cleanup` parameter in `preprocessCSS` helper function

Every single call-site has always passed in `true` for this parameter, ever since the function was first added back in PR 8023. Hence the parameter appears to be completely unnecessary, which is why it's removed and the function is updated to *unconditionally* strip out any license headers (in the middle of the file).",False
90c5e9882bfaafbc7532fdd04c172d65b6757399,2022-03-14 01:21:07,Tim van der Meij,"Merge pull request #14669 from Snuffleupagus/padding-inline

Replace `dir`-dependent `padding-left`/`padding-right`/`text-align` with logical properties",True
dd4af1c60d1db48b7f90b7ec2b68f56829af4e3d,2022-03-14 01:15:29,Tim van der Meij,"Merge pull request #14665 from Snuffleupagus/Preferences-private

Convert the `BasePreferences` class to use private fields",True
48f49ff9f4d9bf7e13f72d7c69cf6cba7828ff1c,2022-03-14 01:10:22,Tim van der Meij,"Merge pull request #14668 from Snuffleupagus/rm-addLinkAttributes-warn

Remove the `addLinkAttributes` warnings in the Annotation/XFA-layers (PR 14092 follow-up)",True
f410403c4b34b594c3460c0d7fc268a159e6f5af,2022-03-14 01:09:01,Tim van der Meij,"Merge pull request #14667 from Snuffleupagus/fieldObjects-test-Node

Enable the ""gets fieldObjects"" unit-test in Node.js (PR 14409 follow-up)",True
331f4e72de93b20de1bed0ef7f3d54af97101497,2022-03-13 19:06:11,Jonas Jenwald,"Replace `dir`-dependent `padding-left`/`padding-right`/`text-align` with logical properties

*Please note:* This is small first step in what will, time permitting, become a series of patches to simplify/modernize the viewer CSS.

Rather than having to *manually* specify ltr/rtl-specific padding-values in the CSS, we can use logical padding instead (and similar for text-align).
These logical properties depend on, among other things, the direction of the HTML document which we *always* specify in the viewer.

Note that a number of logical CSS properties are new enough that we'll need to use PostCSS plugins, however the ones in this patch are natively supported in all browsers that we currently support:
 - https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-start#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/CSS/padding-inline-end#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/CSS/text-align#browser_compatibility",False
0c349c701f72abdb254a3d033cf3fa56eb4bc3c9,2022-03-13 16:08:56,Jonas Jenwald,"Remove the `addLinkAttributes` warnings in the Annotation/XFA-layers (PR 14092 follow-up)

These warnings have now been present in three releases, see PR 14092, hence it should (hopefully) be fine to remove them now.",False
fb345ee184268a5b8dae971e4ce6de8f965640a5,2022-03-13 15:10:57,Jonas Jenwald,"Enable the ""gets fieldObjects"" unit-test in Node.js (PR 14409 follow-up)

Apparently this unit-test works in Node.js now, hence it's *possible* that the reason it didn't work previously is that there were bugs in our old `structuredClone` polyfill.",False
327497276847189a9b85b43216280ac9b10beec6,2022-03-12 21:55:45,Jonas Jenwald,"Revert Preferences to their previous values, when writing to storage failed

This patch fixes an old inconsistency, when using `BasePreferences.{reset, set}`, where the internal Preference values would be kept even if writing them to storage failed.",False
25d7420035ca376a1f6207f5152732b5983bb167,2022-03-12 19:04:57,Jonas Jenwald,"Convert the `BasePreferences` class to use private fields

Given that none of these fields were ever intended to be accessed directly from the *outside*, since that will lead to inconsistent/broken state, we can use modern ECMAScript features to ensure that they are indeed private.",False
9e4aaf18f73e638c16f25e1280cea363de55bf1b,2022-03-12 01:41:18,Tim van der Meij,"Merge pull request #14661 from tiziodcaio/gh_actions

Update Checkout to version 3",True
790735eaf16cf180f7c65a09d309273f7d54aea6,2022-03-12 01:39:58,Tim van der Meij,"Merge pull request #14658 from Snuffleupagus/api-validate-cMapUrl-standardFontDataUrl

Validate the `cMapUrl`/`standardFontDataUrl` parameters in `getDocument`",True
bcf453cf148989852ea21a7798b1563b5da8aea8,2022-03-12 01:38:49,Tim van der Meij,"Merge pull request #14656 from Snuffleupagus/mv-isSameOrigin

Move the `isSameOrigin` helper function",True
0d265a30edd05422fdfa507f8e42b71646c46dfc,2022-03-12 01:35:36,Tim van der Meij,"Merge pull request #14654 from Snuffleupagus/TestReporter-send-fetch

Replace XMLHttpRequest usage with the Fetch API in `send` (in `test/unit/testreporter.js`)",True
4318bc8f86305ed8d5ae14d83a542f0197a4850a,2022-03-12 01:16:47,Jonas Jenwald,"Merge pull request #14554 from Snuffleupagus/issue-14526

Try to improve a11y for the ""button groups"" in the SecondaryToolbar/Sidebar (issue 14526)",True
1a380b5736c5fd9d4addb1fa137292276fb2b6be,2022-03-11 19:05:06,tiziodcaio,"Update Checkout to version 3
Uses node 16 as default",False
1b6e1eac922102a63fe0d49c14d5dc57e3efbdc9,2022-03-11 16:06:51,Jonas Jenwald,"Merge pull request #14620 from Snuffleupagus/Firefox-getStrings

Bug 1757527 - Slightly reduce (repeated) message passing overhead when localizing the PDF Viewer",True
a60b98412f5457f838e6e369b64674a04a6d273c,2022-03-10 21:03:10,Jonas Jenwald,"Validate the `cMapUrl`/`standardFontDataUrl` parameters in `getDocument`

These changes make sense for two reasons:
 - Given that the parameters are potentially passed to the worker-thread, depending on the `useWorkerFetch` parameter, we need to prevent errors if the user provides values that aren't clonable.
 - By ensuring that the default values are indeed `null`, we'll trigger main-thread fetching (of CMaps and Standard fonts) as intended in the `PartialEvaluator` and thus potentially provide better Error messages.",False
537ed37835a1df383153d16d5d267fa0f121cf1d,2022-03-10 18:21:09,Jonas Jenwald,"Move the `isSameOrigin` helper function

This function is currently placed in the `src/shared/util.js` file, which means that the code is duplicated in both of the *built* `pdf.js` and `pdf.worker.js` files. Furthermore, it only has a single call-site which is also specific to the `GENERIC`-build of the PDF.js library.

Hence this helper function is instead moved into the `src/display/api.js` file, in such a way that it's conditionally defined but still can be unit-tested.",False
e08e3f4d37dcb959a24ce8acb0063021c89da049,2022-03-10 17:25:08,Jonas Jenwald,"Replace XMLHttpRequest usage with the Fetch API in `send` (in `test/unit/testreporter.js`)

Besides converting the `send` function to use the Fetch API, this patch also changes the method to return a `Promise` to get rid of the callback function. (Although, currently there's no call-site passing in a callback function.)",False
48c64c6c8d2323251c83589b0b59499e9c72c72d,2022-03-10 14:50:34,Jonas Jenwald,Bug 1757527 - Slightly reduce (repeated) message passing overhead when localizing the PDF Viewer,False
ee39499a5ab6063fdc5cf58df81ad5b36bd8efed,2022-03-10 01:17:38,Tim van der Meij,"Merge pull request #14651 from Snuffleupagus/Driver-inlineImages-fetch

Replace XMLHttpRequest usage with the Fetch API in `inlineImages` (in `test/driver.js`)",True
fee1bc68e98684cd217518eaf1f1160a1a0493ee,2022-03-10 01:13:12,Tim van der Meij,"Merge pull request #14642 from Snuffleupagus/Driver-send-fetch

Replace XMLHttpRequest usage with the Fetch API in `Driver._send`",True
e85bb0b59986cdfe167f7a08246012e362914fab,2022-03-10 01:08:26,Tim van der Meij,"Merge pull request #14645 from Snuffleupagus/Node-DOMMatrix-polyfill

[api-minor] Remove the, in `legacy` builds, bundled `DOMMatrix` polyfill",True
55a931e454d8512b70972e23bc1799a970dae7b8,2022-03-10 01:06:49,Tim van der Meij,"Merge pull request #14648 from Snuffleupagus/PDFDocument-stream

Simplify the `PDFDocument` constructor",True
23d1abee0b48f52f9b9f03b62df3d92357a18c45,2022-03-10 01:05:24,Tim van der Meij,"Merge pull request #14640 from Snuffleupagus/update-TypeScript

Update TypeScript to version `4.6.2` and work-around stricter type checks",True
b3f4758183863b72b5f16c2c243992942e95dafc,2022-03-09 16:02:51,Jonas Jenwald,"Replace XMLHttpRequest usage with the Fetch API in `inlineImages` (in `test/driver.js`)

This is the final part in a series of patches that try to re-implement PR 14287 in smaller steps.

Besides converting `inlineImages` to use the Fetch API, this patch also combines the `inlineImages` and `resolveImages` functions since they are always used together.",False
6a78f20b17b39be0b17aea9eeb11498b82ff9b88,2022-03-08 21:43:47,Jonas Jenwald,"Simplify the `PDFDocument` constructor

Originally the code in the `src/`-folder was shared between the main/worker-threads, and back then it probably made sense that the `PDFDocument` constructor accepted different arguments.
However, for many years we've not been passing anything *except* Streams to `PDFDocument` and we should thus be able to slightly simplify that code. Note that for e.g. unit-tests of this code, using either a `NullStream` or a `StringStream` works just fine.",False
157a71d404f9f25d1542a034f1778e856526394e,2022-03-08 14:59:11,Jonas Jenwald,"[api-minor] Remove the, in `legacy` builds, bundled `DOMMatrix` polyfill

According to the MDN compatibility data, see https://developer.mozilla.org/en-US/docs/Web/API/DOMMatrix/DOMMatrix#browser_compatibility, all browsers that we support have native `DOMMatrix` implementations (since quite some time too).

Hence Node.js is the only environment that lack `DOMMatrix` support, which probably isn't that surprising given that it's browser functionality.
While the `DOMMatrix` polyfill isn't that large, it nonetheless seems completely unnecessary to bundle it in the `legacy` builds when it's not needed in browsers. However, we can avoid that by simply listing `dommatrix` as a dependency for the `pdfjs-dist` library.",False
19c2cc8689a5e15f3812a4c7bfd0382b0b13b75c,2022-03-07 20:30:52,Jonas Jenwald,"Replace XMLHttpRequest usage with the Fetch API in `Driver._send`

This is another part in a series of patches that try to re-implement PR 14287 in smaller steps.

Besides converting `Driver._send` to use the Fetch API, this also changes the method to return a `Promise` to get rid of the callback function.
Please note that I *purposely* try to maintain the existing behaviour of re-sending the data on failure/unexpected response, including how/where the old callback function was invoked.",False
6f600befdd2431a25fd003169b785526f5beb855,2022-03-07 16:25:17,Jonas Jenwald,"Update TypeScript to version `4.6.2` and work-around stricter type checks

I'm guessing that we're now running into the class-related improvements mentioned in https://devblogs.microsoft.com/typescript/announcing-typescript-4-6/#target-es2022
To unblock this update, and any future ones, this patch simply tweaks the JSDocs to get `gulp typestest` to run without errors.",False
3e593cfc1d4bd68f64645e89b7eaeb9a34850431,2022-03-06 22:56:55,Tim van der Meij,"Merge pull request #14636 from Snuffleupagus/Driver-quit-fetch

Replace XMLHttpRequest usage with the Fetch API in `Driver._quit`",True
d65169d7542ec88b13d773d1ad5efd02351d84c7,2022-03-06 21:24:27,Jonas Jenwald,"Try to improve a11y for the ""button groups"" in the SecondaryToolbar/Sidebar (issue 14526)

*Please note:* I don't really know anything about a11y, hence it's possible that this patch either doesn't work correctly or at least isn't a complete solution.

In both the SecondaryToolbar and the Sidebar we have ""button groups"" that functionally acts essentially like radio-buttons. Based on skimming through [this MDN article](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/radio_role) it thus appears that we should tag them as such, using `role=""radiogroup""` and `role=""radio""`, and then utilize the `aria-checked` attribute to indicate to a11y software which button is currently active.",False
c1f73b140fe893d3954975a12e12bd86231fe13b,2022-03-06 21:17:33,Jonas Jenwald,"Merge pull request #14637 from timvandermeij/web-private

Use proper private methods in `web/{pdf_cursor_tools,pdf_find_bar,secondary_toolbar}.js`",True
a00308d5f3b24b5811c3a4bf1f86f71e402f228e,2022-03-06 21:07:31,Tim van der Meij,"Merge pull request #14638 from Snuffleupagus/reftest-analyzer-fetch

Replace XMLHttpRequest usage with the Fetch API in the reftest-analyzer",True
6500aafd00fa0b390df3c141429cd8a5fe12f5f8,2022-03-06 20:37:25,Tim van der Meij,Use proper private methods in `web/secondary_toolbar.js`,False
f33769db2d8df4068a9c5ef11da766cc1fa119c7,2022-03-06 20:37:07,Tim van der Meij,Use proper private methods in `web/pdf_find_bar.js`,False
a1d106dc5d93d4fdd828d74ecdae050e741547cb,2022-03-06 20:36:53,Tim van der Meij,Use proper private methods in `web/pdf_cursor_tools.js`,False
90445679e8d0d76b885528e81b70ef35fae55191,2022-03-06 20:32:34,Jonas Jenwald,Replace XMLHttpRequest usage with the Fetch API in the reftest-analyzer,False
65d5974192a3e95b5180c1e6e36a8a636ba78770,2022-03-06 20:06:48,Jonas Jenwald,"Replace XMLHttpRequest usage with the Fetch API in `Driver._quit`

This is another step in what'll hopefully become a series of patches to implement PR 14287 in smaller steps.",False
3ac2053d972730c5b049d7dbd1c8570c471507c3,2022-03-06 19:54:40,Tim van der Meij,"Merge pull request #14635 from Snuffleupagus/loadStyles-fetch

Replace XMLHttpRequest usage with the Fetch API in `loadStyles` (in `test/driver.js`)",True
62e0939ce28e5bd03239a637a40fc8a2581aca45,2022-03-06 18:27:42,Jonas Jenwald,"Replace XMLHttpRequest usage with the Fetch API in `loadStyles` (in `test/driver.js`)

This is another small step in what'll hopefully become a series of patches to implement PR 14287 in smaller steps.",False
f8f0f196426aecd446f229a385067d6b428ce4c6,2022-03-06 18:04:17,Tim van der Meij,"Merge pull request #14633 from Snuffleupagus/update-packages

Update packages and translations",True
7d53a40c91fe2fe9617a4c5a3dd7805a2dfc0580,2022-03-06 18:02:17,Tim van der Meij,"Merge pull request #14634 from Snuffleupagus/Driver-run-fetch

Replace XMLHttpRequest usage with the Fetch API in `Driver.run`",True
151b140eacd44d3e967cf59fceafd94933cc2646,2022-03-06 17:17:12,Jonas Jenwald,"Replace XMLHttpRequest usage with the Fetch API in `Driver.run`

This is a first step in what'll hopefully become a series of patches to implement PR 14287 in smaller steps.",False
114d5e68af00e57a279c0b79a189d281c3ece63b,2022-03-06 15:15:24,Jonas Jenwald,Update l10n files,False
b875f13b4f5ab9820ecde3abc82982dd6162f599,2022-03-06 15:15:23,Jonas Jenwald,Update npm packages,False
5242c38af589482da724811c284157ac8af1bb67,2022-03-05 17:39:36,Tim van der Meij,"Merge pull request #14628 from Snuffleupagus/issue-14626

When `stopAtErrors` is set, throw rather than warn when exceeding `maxImageSize` (issue 14626)",True
5d12ac576b6d4054958737dd3249289ce5b3b7c7,2022-03-05 17:36:53,Tim van der Meij,"Merge pull request #14631 from Snuffleupagus/typedef-fixes

Fix a couple of small typos in JSDoc `typedef` comments",True
3b6d6893d9f80261b3c2b5d933ec535189545b50,2022-03-05 06:13:17,Brendan Dahl,"Merge pull request #14629 from Snuffleupagus/issue-14618

Compute the loca table `endOffset`, of the ""first"" glyph, correctly (issue 14618)",True
939e6f0c4cc39854490ad8dddda536fd3330e2bd,2022-03-04 16:41:52,Jonas Jenwald,"Fix a couple of small typos in JSDoc `typedef` comments

While this doesn't affect the official API documentation, these cases should nonetheless be fixed.",False
1a7921dbf0cf2472722cd19f5095c0a84ae96341,2022-03-03 18:52:45,Jonas Jenwald,"Compute the loca table `endOffset`, of the ""first"" glyph, correctly (issue 14618)

When there are *multiple* empty glyphs at the start of the data, ensure that the ""first"" glyph gets a correct `endOffset` to avoid skipping it during parsing in the `sanitizeGlyph` function.",False
d0d5c596fbcd349e5d4345acf9d8bc2fa8cf5238,2022-03-03 17:41:29,Jonas Jenwald,"When `stopAtErrors` is set, throw rather than warn when exceeding `maxImageSize` (issue 14626)

The situation described in issue 14626 seems like a fairly special case, and it thus seem reasonable that we simply follow the same pattern as elsewhere in the `PartialEvaluator` when the `stopAtErrors` API-option is being used.",False
234aa9a50e33599c28877ac3b5fff3542c55cd61,2022-03-03 01:24:03,Tim van der Meij,"Merge pull request #14624 from Snuffleupagus/viewer-fallback-cleanup

Simplify the `fallback`-logic in the default viewer",True
038c83271960258e0120e8df8d6cda080d567de7,2022-03-03 01:16:27,Tim van der Meij,"Merge pull request #14623 from Snuffleupagus/viewer-deprecated-cleanup

Remove some deprecated code from the viewer",True
636fc058435525a9431e5e98c231ed16ccfd65b2,2022-03-03 01:10:37,Tim van der Meij,"Merge pull request #14617 from Snuffleupagus/rm-webkit-outer-spin-button

Remove the `-webkit-outer-spin-button` CSS rule",True
b18cbaac39704ab017f7510c240922b0d681c69f,2022-03-03 01:09:21,Tim van der Meij,"Merge pull request #14615 from Snuffleupagus/rm-webkit-overflow-scrolling

Remove the `-webkit-overflow-scrolling: touch;` CSS rules (PR 4516 follow-up)",True
85ff7b117e04471c550914b7a13193ab7f7ecc6a,2022-03-02 23:16:15,Brendan Dahl,"Merge pull request #14536 from calixteman/thin_line

Fix some issues with lineWidth < 1 after transform (bug 1753075, bug 1743245, bug 1710019)",True
6d2863f80a94e7f36f01dbe7a9e6be43f0668bbf,2022-03-02 18:00:45,Jonas Jenwald,"Simplify the `fallback`-logic in the default viewer

After [bug 1705327](https://bugzilla.mozilla.org/show_bug.cgi?id=1705327) the `ChromeActions.fallback`-method is now just a stub[1], since the fallback bar was removed.
Hence there's no good reason, as far as I can tell, to keep this code in the viewer itself when it's completely unused.

---
[1] See https://searchfox.org/mozilla-central/rev/292d17c13daa61016fd082e2337297091d53a015/toolkit/components/pdfjs/content/PdfStreamConverter.jsm#575-581",False
38d30f3be565e2c6616d79b77344c19151bd1781,2022-03-02 15:53:14,Jonas Jenwald,"Remove the deprecated `PDFFindController.executeCommand` method

This *partially* reverts commit fa8c0ef6164c7abfd5236e97823102a89517f8a4, since it's now been included in two official releases.",False
f2c9a6bc24757c9c2dcc937813462d77c3bd9b6c,2022-03-02 15:45:18,Jonas Jenwald,"Revert ""[GENERIC viewer] Add fallback logic for the old `PDFPageView.update` method signature""

This reverts commit 846620438417c395f14f3cb60a02806c1b3bebc8, since it's now been included in three official releases.",False
fdd06fa393bb089ea69679ee7e9741230766fd6f,2022-02-28 16:46:32,Jonas Jenwald,"Remove the `-webkit-outer-spin-button` CSS rule

Unfortunately simply using `appearance: textfield;`, or even `-webkit-appearance: textfield;`, doesn't actually hide the ""spinner"" in number-input elements in e.g. Google Chrome.
Hence we need to use a work-around with the `-webkit-inner-spin-button` rule, however in our CSS code we also have `-webkit-outer-spin-button` currently. According to both [the MDN compatibility data](https://developer.mozilla.org/en-US/docs/Web/CSS/::-webkit-outer-spin-button#browser_compatibility) and also manual testing in Google Chrome Beta 99, the `-webkit-outer-spin-button` rule is no longer necessary and we can thus clean-up the CSS a tiny bit.",False
047a971093fb9097a8f54ef588f95000510e60ba,2022-02-28 02:39:19,Jonas Jenwald,"Remove the `-webkit-overflow-scrolling: touch;` CSS rules (PR 4516 follow-up)

This was added in PR 4516 specifically for Safari on iOS devices, but according to MDN it should no longer be necessary now; see https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-overflow-scrolling#browser_compatibility

According to the MDN compatibility data, this CSS feature:
 - Was never implemented anywhere *except* for Safari on iOS.
 - Was never standardized and thus never existed in an *unprefixed* version.
 - Has now been removed, starting with Safari version 13.

Given that [the FAQ](https://github.com/mozilla/pdf.js/wiki/Frequently-Asked-Questions#faq-support) already lists Safari as ""Mostly"" supported, and that the default viewer is written primarily for Mozilla Firefox, it ought to be fine to remove these CSS rules now.",False
2cc98dcdaa1ab4c2353346e40b16bf4dfc1c7087,2022-02-27 23:59:51,Tim van der Meij,"Merge pull request #14614 from timvandermeij/bump

Bump versions in `pdfjs.config`",True
dc7368ff5ca42b10c29bda5af6769b6e7c0e674a,2022-02-27 23:54:24,Tim van der Meij,Bump versions in `pdfjs.config`,False
399a0ec603bca8fde70e30ae30ee802a0cf71db2,2022-02-27 19:59:09,Tim van der Meij,"Merge pull request #14612 from Snuffleupagus/caniuse-lite

Add the `caniuse-lite` package",True
a0c9c1e0ccc66dd10ad28bc48d454fabbaaf4b2d,2022-02-27 19:57:38,Tim van der Meij,"Merge pull request #14611 from Snuffleupagus/rm-Promise-docs

Remove the JSDocs ""External: Promise""-page, since `Promise`s are now a standard feature",True
896255e7bf770ceda6deffcce5d21f4536d3e698,2022-02-27 16:09:33,Jonas Jenwald,"Add the `caniuse-lite` package

Since the Autoprefixer plugin indirectly depends on this, it seems like a good idea to add this as a direct dependency in the PDF.js project to hopefully avoid having to manually update `caniuse-lite` in the future; see https://github.com/browserslist/browserslist#browsers-data-updating

Also, slightly tweaks the Autoprefixer config for GENERIC-builds of the PDF.js library; note that this change doesn't affect the contents of the *built* `web/viewer.js` file.",False
ab55071568002b5008063b413e8bffacc934efb9,2022-02-27 04:23:11,Jonas Jenwald,"Remove the JSDocs ""External: Promise""-page, since `Promise`s are now a standard feature

The ""External: Promise""-page in the JSDocs pre-dates the introduction of `Promise`s, as a generally available standard JS feature, by a number of years. Hence it now longer seems necessary, as far as I can tell, to include this ""special"" page in the documentation.

Also, while unrelated to the rest of the patch, updates the `test/`-folder description in the documentation.",False
046ff07ee3a484b43d7169db1ba063c294808522,2022-02-26 22:56:39,calixteman,"Merge pull request #14610 from Snuffleupagus/jpx-resetContextProbabilities

[JPEG 2000] Add support for resetContextProbabilities (bug 1731483)",True
46840c56502e06888a70854c991bce9d199ca83c,2022-02-26 21:58:08,Jonas Jenwald,"Merge pull request #14602 from Snuffleupagus/rm-isString

 Re-factor the `PDFDocument.documentInfo` method, and remove the `isString` helper function",True
99cd24ce3e04346a40f1d6e9dd0acbe402a8e58b,2022-02-26 21:03:41,Jonas Jenwald,"Remove the `isString` helper function

The call-sites are replaced by direct `typeof`-checks instead, which removes unnecessary function calls. Note that in the `src/`-folder we already had more `typeof`-cases than `isString`-calls.",False
6bd4e0f5afd6615ee87e67e76ff0fa34ec0c0cb9,2022-02-26 21:03:21,Jonas Jenwald,"Re-factor the `PDFDocument.documentInfo` method

This removes the `DocumentInfoValidators` structure, and thus (slightly) simplifies the code overall. With these changes we only have to iterate through, and validate, the actually available Dictionary entries.",False
620174a23c2a3b796ffd7f7c62899bc677cf901d,2022-02-26 20:19:15,Tim van der Meij,"Merge pull request #14606 from Snuffleupagus/standard-FullscreenAPI

Only support the standard, unprefixed, Fullscreen API in the default viewer",True
f782f5e5bb229628e996643f6377b7cbe9330a95,2022-02-26 20:07:29,Tim van der Meij,"Merge pull request #14607 from Snuffleupagus/wrapReason-unreachable

Simplify the `wrapReason` helper function",True
cf7ce0aa7e7c2923903de62b54a024e9a5fea0be,2022-02-26 20:00:00,Tim van der Meij,"Merge pull request #14600 from Snuffleupagus/getPageIndex-more-validation

[api-minor] Add validation for the  `PDFDocumentProxy.getPageIndex` method",True
0808376a7223e3245e3602f93a39cf9d27affc83,2022-02-26 19:55:00,Tim van der Meij,"Merge pull request #14599 from Snuffleupagus/Cmd-Name-validate-arg

Ensure that `Cmd`/`Name` is only initialized with string arguments",True
9b9609a6d87e27e8da83cd4a0c0623b69cf7599e,2022-02-26 17:35:23,Jeff Muizelaar,[JPEG 2000] Add support for resetContextProbabilities (bug 1731483),False
4157d771c02cb2bdfd2edddc599955a946a5daef,2022-02-26 15:13:36,Jonas Jenwald,"Merge pull request #14609 from brendandahl/misc-reftest

Improvements to the reftest analyzer.",True
e7787ee83867a8b86c4144767a9740997040c81d,2022-02-26 15:12:45,Jonas Jenwald,"Merge pull request #14608 from brendandahl/no-close

Don't close window from test driver.",True
c5404bee0ed2d1f4656add6ab241669eb8246c3d,2022-02-26 02:53:19,Brendan Dahl,"Improvements to the reftest analyzer.

- Scroll the selected reference into view (makes it easier to tell which pdf you're looking at)
- Show the keyboard shortcuts (easier for new people)
- Keep the test/ref controls visible (if you scroll you can now tell if you're looking at a test or ref)",False
a969440af821124d49cd30e726d3389a3b78fdc7,2022-02-25 23:25:52,Brendan Dahl,"Don't close window from test driver.

Sometimes I get a ""Unable to find target with id XXX closeTarget..."" error
when running tests which happens when test.js tries to close all the
open pages. I haven't been able to fully verify since this is intermittent,
but I think this is coming from us closing the window in driver.js and also
trying to close it in test.js.",False
46369e4aa530f3db1fb1c4e738617f062d3e7756,2022-02-25 23:07:34,Calixte Denizet,"Fix some issues with lineWidth < 1 after transform (bug 1753075, bug 1743245, bug 1710019)
 - it aims to fix:
   - https://bugzilla.mozilla.org/show_bug.cgi?id=1753075;
   - https://bugzilla.mozilla.org/show_bug.cgi?id=1743245;
   - https://bugzilla.mozilla.org/show_bug.cgi?id=1710019;
   - issue #13211;
   - issue #14521.
 - previously we were trying to adjust lineWidth to have something correct after the current transform is applied but this approach was not correct because finally the pixel is rescaled with the same factors in both directions.
  And sometimes those factors must be different (see bug 1753075).
 - So the idea of this patch is to apply a scale matrix to the current transform just before setting lineWidth and stroking. This scale matrix is computed in order to ensure that after transform, a pixel will have its two thickness greater than 1.",False
28fc8248f0fe6fdc5a69d2063b50f3cd7226ae23,2022-02-25 23:01:12,Jonas Jenwald,"Simplify the `wrapReason` helper function

All call-sites that use `wrapReason` should be passing a (possibly cloned) `Error` to the helper function, hence we shouldn't need to have a fallback code-path for any other data.
Note that for the `cancel`/`error` methods on Streams, since PR 11115 we've been asserting that the argument is in fact an `Error` as intended.
When calling `wrapReason` from *rejected* Promises, we should also be guaranteed that an `Error` is provided thanks to the ESLint rules `no-throw-literal` and `prefer-promise-reject-errors`.",False
9d773c1499dc1dbe90996d16d4f8c24b59d5288b,2022-02-25 20:36:28,Jonas Jenwald,"Only support the standard, unprefixed, Fullscreen API in the default viewer

At this point in time, after recent rounds of clean-up, the `webkit`-prefixed Fullscreen API is the only remaining *browser-specific* compatibility hack in the `web/`-folder JavaScript code.

The standard, and thus unprefixed, Fullscreen API has been supported for *over three years* in both Mozilla Firefox and Google Chrome. [According to MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API#browser_compatibility), the unprefixed Fullscreen API has been available since:
 - Mozilla Firefox 64, released on 2018-12-11; see https://wiki.mozilla.org/Release_Management/Calendar#Past_branch_dates
 - Google Chrome 71, released on 2018-12-04; see https://en.wikipedia.org/wiki/Google_Chrome_version_history

Hence *only* Safari now requires using a prefixed Fullscreen API, and it's thus (significantly) lagging behind other browsers in this regard.
Considering that the default viewer is written *specifically* to be the UI for the Firefox PDF Viewer, and that we ask users to not just use it as-is[1], I think that we should only support the standard Fullscreen API now.
Furthermore, note also that the FAQ already lists Safari as ""Mostly"" supported; see https://github.com/mozilla/pdf.js/wiki/Frequently-Asked-Questions#faq-support

---
[1] Note e.g. http://mozilla.github.io/pdf.js/getting_started/#introduction
> The viewer is built on the display layer and is the UI for PDF viewer in Firefox and the other browser extensions within the project. It can be a good starting point for building your own viewer. *However, we do ask if you plan to embed the viewer in your own site, that it not just be an unmodified version. Please re-skin it or build upon it.*",False
cadc4d2f615b20d1392602e1cfe164aab901c068,2022-02-25 19:19:12,Jonas Jenwald,"Replace all ""private"" methods in `PDFPresentationMode` with proper ones

Now that the there's ECMAScript support for properly private methods on `class`es, we can use that instead and thus remove all of the `@private` JSDocs comments.",False
b753271ca6e9936f9547f64a898c38b9168464a6,2022-02-25 16:20:03,Jonas Jenwald,"Merge pull request #14605 from Snuffleupagus/font-test-atob-btoa

Simplify the `decodeFontData`/`encodeFontData` font-test helper functions",True
f4e78d9b38ba14a9ad67ae889ed677f0ee285c1f,2022-02-25 16:10:03,Jonas Jenwald,"Simplify the `decodeFontData`/`encodeFontData` font-test helper functions

We can (and in my opinion should) use the standard `atob`/`btoa` functions, rather than manually re-implementing this functionality for the font-tests.",False
889b761f22eca98d7f8a4e90dd681a06263294fd,2022-02-25 02:26:54,Jonas Jenwald,"Merge pull request #14545 from brendandahl/output-scale

Generate test images at different output scales.",True
f5c3abb8f72ae95b34eaf5f83f0289cdd0b68ede,2022-02-25 00:57:41,Brendan Dahl,"Generate test images at different output scales.

This will default to generating test images at the device pixel
ratio of the machine the tests are created on unless the
test explicitly defines and output scale using the
`outputScale` setting. This makes the test look visually
like they would on the machine they are running on. It
also allows us to test different output scales.",False
172d00759873c46ddbef391634a0b2a382e7d873,2022-02-24 16:31:51,Jonas Jenwald,"[api-minor] Add validation for the `PDFDocumentProxy.getPageIndex` method

Currently we'll happily attempt to send any argument passed to this method over to the worker-thread, without doing any sort of validation.
That could obviously be quite bad, since there's first of all no protection against sending unclonable data. Secondly, it's also possible to pass data that will cause the `Ref.get` call in the worker-thread to fail immediately.

In order to address all of these issues, we'll now properly validate the argument passed to `PDFDocumentProxy.getPageIndex` and when necessary reject already on the main-thread instead.",False
2be8036eb75f71fc97321d0fcbfb28d1288bc28e,2022-02-24 15:55:21,Jonas Jenwald,"[api-minor] Reduce duplication in the ""gets non-existent page"" unit-test",False
ec87995050553358e819b78e13077f8396578709,2022-02-24 03:09:12,Jonas Jenwald,"Ensure that `Cmd`/`Name` is only initialized with string arguments

Trying to use a non-string argument in either a `Cmd` or a `Name` is not intended, and would basically be an implementation error. Hence we can add a non-PRODUCTION check to enforce this, similar to the existing one used e.g. in the `Dict.set` method.",False
2bb96a708ca8345c3b06cc568b35a744d7941c7a,2022-02-24 01:06:56,Tim van der Meij,"Merge pull request #14598 from Snuffleupagus/rm-isBool

Re-factor the `Catalog.viewerPreferences` method and remove the `isBool` helper function",True
409cbfc81716f8883beb3554e5d7d3cb333722fb,2022-02-24 01:01:36,Tim van der Meij,"Merge pull request #14597 from Snuffleupagus/Dict-set-validate-key

Ensure that `Dict.set` only accepts string `key`s",True
1672c3a731231ffcf22a4751acb0ce7b5455de1e,2022-02-24 00:58:26,Tim van der Meij,"Merge pull request #14588 from Snuffleupagus/rm-old-test-CSS

Remove old prefixed CSS rules used with `text` tests",True
1b51e10c9cecd45ac4e11a048ba279c840a3edc6,2022-02-24 00:57:35,Tim van der Meij,"Merge pull request #14595 from Snuffleupagus/structuredClone-comment-support

Update the support information for `structuredClone` (PR 14392 follow-up)",True
3704283f5bbbaf0013accc98ba36d96aea382a4b,2022-02-23 18:01:03,Jonas Jenwald,"Remove the `isBool` helper function

The call-sites are replaced by direct `typeof`-checks instead, which removes unnecessary function calls.",False
82f1ee1755c3653e3d80f154f2840920627189d5,2022-02-23 17:55:56,Jonas Jenwald,"Re-factor the `Catalog.viewerPreferences` method

This removes the `ViewerPreferencesValidators` structure, and thus (slightly) simplifies the code overall. With these changes we only have to iterate through, and validate, the actually available Dictionary entries.",False
a2f9031e9acbe41ff9f42b77e4d76034335be808,2022-02-22 21:05:20,Jonas Jenwald,"Ensure that `Dict.set` only accepts string `key`s

Trying to use a non-string `key` in a `Dict` is not intended, and would basically be an implementation error. Hence we can add a non-PRODUCTION check to enforce this, complementing the existing `value` check added in PR 11672.",False
b2f6844ce3bba3df9eb24ad7635775981af574c9,2022-02-22 20:36:47,Jonas Jenwald,"Merge pull request #14596 from Snuffleupagus/rm-isNum

Remove the `isNum` helper function",True
48985bd2218388c74984ade30b6cf82eb1d615da,2022-02-22 17:00:54,Jonas Jenwald,"Update the support information for `structuredClone` (PR 14392 follow-up)

When the `structuredClone` polyfill was added, the support information in Safari was unclear. Given that an actual version *number* is now available, see below, it seems like a good idea to update the comment accordingly.

https://developer.mozilla.org/en-US/docs/Web/API/structuredClone#browser_compatibility",False
05edd91bdb3690b253fb598f2eb716c7a66e154b,2022-02-22 16:25:34,Jonas Jenwald,"Remove the `isNum` helper function

The call-sites are replaced by direct `typeof`-checks instead, which removes unnecessary function calls. Note that in the `src/`-folder we already had more `typeof`-cases than `isNum`-calls.

These changes were *mostly* done using regular expression search-and-replace, with two exceptions:
 - In `Font._charToGlyph` we no longer unconditionally update the `width`, since that seems completely unnecessary.
 - In `PDFDocument.documentInfo`, when parsing custom entries, we now do the `typeof`-check once.",False
edd024c9e71ec8e292e949db5405378196368802,2022-02-22 01:29:34,Jonas Jenwald,"Merge pull request #14594 from Snuffleupagus/more-instanceof

Prefer `instanceof ...` rather than calling `isCmd`/`isDict`/`isName` with *one* argument",True
b282814e389436d71f0bbe208c229ee60e9c6b9f,2022-02-21 17:15:00,Jonas Jenwald,"Prefer `instanceof Name` rather than calling `isName()` with one argument

Unless you actually need to check that something is both a `Name` and also of the *correct* type, using `instanceof Name` directly should be a tiny bit more efficient since it avoids one function call and an unnecessary `undefined` check.

This patch uses ESLint to enforce this, since we obviously still want to keep the `isName` helper function for where it makes sense.",False
4df82ad31eb6598fbbb1301ff0a45cb89700a324,2022-02-21 17:14:56,Jonas Jenwald,"Prefer `instanceof Dict` rather than calling `isDict()` with one argument

Unless you actually need to check that something is both a `Dict` and also of the *correct* type, using `instanceof Dict` directly should be a tiny bit more efficient since it avoids one function call and an unnecessary `undefined` check.

This patch uses ESLint to enforce this, since we obviously still want to keep the `isDict` helper function for where it makes sense.",False
67b658e8d5202a2da20ff7ca724ae090057589fd,2022-02-21 17:14:51,Jonas Jenwald,"Prefer `instanceof Cmd` rather than calling `isCmd()` with *one* argument

Unless you actually need to check that something is both a `Cmd` and also of the *correct* type, using `instanceof Cmd` directly should be a tiny bit more efficient since it avoids one function call and an unnecessary `undefined` check.

This patch uses ESLint to enforce this, since we obviously still want to keep the `isCmd` helper function for where it makes sense.",False
40edd235ea7aba7d9cdc184df6c48b0fd685e906,2022-02-20 22:31:22,Jonas Jenwald,"Remove old prefixed CSS rules used with `text` tests

According to MDN, both the `transform-origin` and `box-sizing` CSS rules are supported in their *unprefixed* versions in modern browsers:

 - https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing#browser_compatibility",False
3635a9a3338feb0049be4f1521d5a5afd173a832,2022-02-20 19:23:58,Tim van der Meij,"Merge pull request #14585 from Snuffleupagus/PDFObjects-private

Improve the `PDFObjects` class",True
dce10de083cd532c8328e8faddb60bdccd1ce778,2022-02-20 19:16:25,Tim van der Meij,"Merge pull request #14584 from Snuffleupagus/update-packages

Update packages and translations",True
bad15894fc0ceac0cd8823dd4b55689261d29ca1,2022-02-20 17:32:14,Jonas Jenwald,"Improve the JSDocs for the `PDFObjects` class

Given that we expose `PDFObjects`-instances, via the `commonObjs` and `objs` properties, on the `PDFPageProxy`-instances this ought to help provide slightly better TypeScript definitions.",False
f4712bc0ad967af3b153e760749da935a7b1f448,2022-02-20 17:03:33,Jonas Jenwald,"Simplify the data stored on `PDFObjects`-instances

The manually tracked `resolved`-property is no longer necessary, since the same information is now directly available on all `PromiseCapability`-instances.
Furthermore, since the `PDFObjects.resolve` method is not documented as accepting e.g. only Object-data, we probably shouldn't resolve the `PromiseCapability` with the `data` and instead only store it on the `PDFObjects`-instance.[1]

---
[1] While Objects are passed by reference in JavaScript, other primitives such as e.g. strings are passed by value and the current implementation *could* thus lead to increased memory usage. Given how we're using `PDFObjects` in the PDF.js code-base none of this should be an issue, but it still cannot hurt to change this.",False
beecde32295ed0cbea2b4d26143379eba4a74507,2022-02-20 16:53:30,Jonas Jenwald,"Introduce (some) private properties/methods in the `PDFObjects` class

This ensures that the underlying data cannot be accessed directly, from the outside, since that's definately not intended here.
Note that we expose `PDFObjects`-instances, via the `commonObjs` and `objs` properties, on the `PDFPageProxy`-instances hence these changes really cannot hurt.",False
21f1d1ace25f05739fd5304ab3abb4b7c64dc1cc,2022-02-20 14:40:21,Jonas Jenwald,Update l10n files,False
55b78bb240ed9c80b56f3270c50d32727c8cb112,2022-02-20 14:38:23,Jonas Jenwald,Update npm packages,False
fbed70759203e3ce72f35e20eb795e8493c542be,2022-02-19 20:17:01,Jonas Jenwald,"Merge pull request #14577 from Snuffleupagus/rm-isRef

Remove the `isRef` helper function",True
2cb2f633ac2968239e8240fa14657e287a7194c3,2022-02-19 20:03:42,Jonas Jenwald,"Remove the `isRef` helper function

This helper function is not really needed, since it's just a wrapper around a simple `instanceof` check, and it only adds unnecessary indirection in the code.",False
df0aa1a9c46463a2a5de88a7457c95ef0a3bc2f2,2022-02-19 19:29:19,Tim van der Meij,"Merge pull request #14575 from Snuffleupagus/rm-isStream

Remove the `isStream` helper function",True
8e234a16d446c13f6fdf93de3f2b25dcedccb0a1,2022-02-19 19:24:30,Tim van der Meij,"Merge pull request #14578 from Snuffleupagus/rm-backingStorePixelRatio

Remove the `backingStorePixelRatio`-part of the `getOutputScale` helper function",True
65d679a3a61e378ef4a1100b2acd0f834371065f,2022-02-19 19:19:50,Tim van der Meij,"Merge pull request #14580 from Snuffleupagus/PixelsPerInch-class

Change `PixelsPerInch` to a class with `static` properties (issue 14579)",True
964601ba39eaf5c322e834696c38a44d828e6c1f,2022-02-19 19:17:37,Tim van der Meij,"Merge pull request #14581 from Snuffleupagus/Driver-parseQueryString

Use the (viewer) `parseQueryString` helper function in the reference tests",True
dde4e43b4a891fe8644f3847edecfccb0b21a3ee,2022-02-19 14:11:04,Jonas Jenwald,"Use the (viewer) `parseQueryString` helper function in the reference tests

Rather than re-implementing this functionality in the `Driver` class, we can simply re-use the existing `parseQueryString` helper function instead.",False
05efe3017b4e1b50eb76ac8d84b9c9f54244d26b,2022-02-19 13:35:40,Jonas Jenwald,"Change `PixelsPerInch` to a class with `static` properties (issue 14579)

*Please note:* I'm completely fine with this patch being rejected, and the issue instead closed as WONTFIX, since this is unfortunately a case where the TypeScript definitions dictate how we can/cannot write JavaScript code.

Apparently the TypeScript definitions generation converts the existing `PixelsPerInch` code into a `namespace` and simply ignores the getter; please see https://github.com/mozilla/pdfjs-dist/blob/a7fc0d33a11d032741f44d0b623780253747da10/types/src/display/display_utils.d.ts#L223-L226

Initially I tried tagging `PixelsPerInch` as en `@enum`, see https://jsdoc.app/tags-enum.html, however that unfortunately didn't help.
Hence the only good/simple solution, as far as I'm concerned, is to convert `PixelsPerInch` into a class with `static` properties. This patch results in the following diff, for the `gulp types` build target:
```diff
@@ -195,9 +195,10 @@
      */
     static toDateObject(input: string): Date | null;
 }
-export namespace PixelsPerInch {
-    const CSS: number;
-    const PDF: number;
+export class PixelsPerInch {
+    static CSS: number;
+    static PDF: number;
+    static PDF_TO_CSS_UNITS: number;
 }
 declare const RenderingCancelledException_base: any;
 export class RenderingCancelledException extends RenderingCancelledException_base {
```",False
530af48b8e32ba153962604006ac680aa1a08bcd,2022-02-19 00:05:58,Jonas Jenwald,"Merge pull request #14569 from brendandahl/smask-state

Fix canvas state getting out of sync from smasks. (bug 1755507)",True
36cb82e517f43b437551f55d06cf46bc4e04b993,2022-02-18 21:15:38,Jonas Jenwald,"Convert the `getOutputScale` helper function into a `OutputScale` class

Given the previous patch in particular, this seems like an overall nicer format since it avoids duplicating the `scaled` getter in each instance.",False
0928d26d542f4fb1ecc1caf195224eceec928e5f,2022-02-18 17:40:42,Jonas Jenwald,"Replace the `scaled` property, in the `getOutputScale` return, with a getter

In some cases, in the `PDFPageView` implementation, we're modifying the `sx`/`sy` properties when CSS-only zooming is being used.
Currently this requires that you remember to *manually* update the `scaled` property to prevent issues, which doesn't feel all that nice and also seems error-prone. By replacing the `scaled` property with a getter, this is now handled automatically instead.",False
0159ec0a1234cd101bcae172799f2b8608b095b2,2022-02-18 17:33:48,Jonas Jenwald,"Remove the `backingStorePixelRatio`-part of the `getOutputScale` helper function

The `CanvasRenderingContext2D.backingStorePixelRatio` property was never standardized, and only Safari set (its prefixed version of) it to anything other than `1`.
Note that e.g. MDN doesn't contain any information about this property, and one of the few sources of information (at this point) is the following post: https://stackoverflow.com/questions/24332639/why-context2d-backingstorepixelratio-deprecated

Hence we can simplify the `getOutputScale` helper function, by removing some dead code, and now it no longer requires any parameters when called.",False
7def6d12c811f6cd92e03d25e99664bc5efc2705,2022-02-18 07:08:32,Brendan Dahl,"Fix canvas state getting out of sync from smasks. (bug 1755507)

Soft masks can be enabled/disabled at anytime and at different
points in the save/restore stack. This can lead to
the amount of save/restores becoming unbalanced across the
two canvases. Instead of save/restoring on the temporary canvas
change it so we only track state on the main (suspended canvas).

I was also getting an out balance stack from patterns, so I've also
fixed that and added a warning that will at least show up on chrome.
It would be nice to add this so Firefox at some point too.

Fixes #11328, #14297 and bug 1755507",False
1a31855977dae61e01f87853bd5033164cddab19,2022-02-17 18:21:36,Jonas Jenwald,"Remove the `isStream` helper function

At this point all the various Stream-classes extends an abstract base-class, hence this helper function is no longer necessary and only adds unnecessary indirection in the code.",False
d9a3a243533de06a61b94765178c3e4d826c8a43,2022-02-17 01:03:30,Tim van der Meij,"Merge pull request #14566 from Snuffleupagus/misc-viewer-cleanup

Miscellaneous small viewer clean-up",True
ff6d9c74ccb3938ea530376fe3b78f577cf6ab53,2022-02-16 19:14:30,Jonas Jenwald,"Merge pull request #14572 from Snuffleupagus/_collectJS-string-check

Add a missing string-check in the `_collectJS` helper function",True
fd319e94b34e7ea60efc1d40f26e4f8e7c9f6c47,2022-02-16 18:13:42,Jonas Jenwald,"Add a missing string-check in the `_collectJS` helper function

Unfortunately I don't have a test-case that breaks without this change, however the `stringToPDFString` helper function will fail if anything other than a string is passed to it.
The changes in this patch thus make this code more-or-less identical to that found in the `Catalog.{_collectJavaScript, parseDestDictionary}` methods.",False
996396a9144ac9deb3d7bcdc82ba4363a31e2c25,2022-02-14 16:52:36,Jonas Jenwald,"Change `PasswordPrompt.close` to an `async` method

This is consistent with the `open` method, and it actually *ever so slightly* reduces the size of the file.",False
2dececf4450e14bb25710ba7b2890b7bfb9baa53,2022-02-14 16:52:36,Jonas Jenwald,"Remove the `typeof navigator`-checks in the `web/app_options.js` file

Given that the `Navigator` interface has been available since ""forever"", please see https://developer.mozilla.org/en-US/docs/Web/API/Navigator#browser_compatibility, it's somewhat difficult to see why these checks are actually necessary since the viewer is only intended for usage in browsers.

Looking at the history of the code, this functionality was originally placed in the general `src/shared/compatibility.js` file which could thus run in e.g. worker-threads and Node.js environments (where the `Navigator` interface isn't available).",False
d5f048abe035902f92bb629d8ddff9a055c6c195,2022-02-14 15:00:45,calixteman,"Merge pull request #14563 from calixteman/search_eol

[Search] Some matches were incorrectly shifted because of some '-\n'",True
18f4e560ae4103bd7ece97ecf4b71a7f37596a17,2022-02-14 14:42:33,Calixte Denizet,"[Search] Some matches were incorrectly shifted because of some '-\n'
- it aims to fix #14562;
- 'X-\n' were not correctly positioned;
- when X is a diacritic (e.g. in ""sä-\n"", which is decomposed into ""sa¨-\n"") we must handle both things:
  - diacritics on the one hand;
  - ""-\n"" on the other hand.",False
263c89581ffe157f6ccb9d446788e9ee3842c818,2022-02-14 02:18:57,calixteman,"Merge pull request #14564 from calixteman/bug1755201

[api-minor] Don't add in the text content the chars which are out-of-page (bug 1755201)",True
18e3a98c2bbfc63e0603b66a49f9e8a2ff58e09c,2022-02-14 01:37:11,Calixte Denizet,"[api-minor] Don't add in the text content the chars which are out-of-page (bug 1755201)
- it aims to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1755201;
- if the glyph position is not within the view then skip it.",False
78246719f8f17921f39196560e8ee0c8d43b69e9,2022-02-13 18:40:22,Tim van der Meij,"Merge pull request #14559 from Snuffleupagus/revert-9505

Revert ""Don't block origin-less blob:-URLs in hosted viewer""",True
c37d785b2a8e780d5551cb076492d98a22d11292,2022-02-13 18:38:22,Tim van der Meij,"Merge pull request #14560 from Snuffleupagus/Node-ReadableStream-polyfill

[api-minor] Remove the, in `legacy` builds, bundled `ReadableStream` polyfill",True
7ee531d918b111f0097915943417179e2b1d8070,2022-02-13 18:32:50,Tim van der Meij,"Merge pull request #14558 from Snuffleupagus/getFilenameFromContentDispositionHeader-TextDecoder

Remove the UTF-8 fallback, when `TextDecoder` is missing, from the Content-Disposition parser",True
99fde3cf865a193cb72e51afd68aef2f90b69874,2022-02-13 18:31:02,Tim van der Meij,"Merge pull request #14557 from Snuffleupagus/issue-14555

Remove unnecessary `font-size` CSS rule from the `html` element (issue 14555, PR 3794 follow-up)",True
b89595fd20bc3f9681e11088e15d11110f4487cd,2022-02-13 14:45:58,Jonas Jenwald,"[api-minor] Remove the, in `legacy` builds, bundled `ReadableStream` polyfill

According to the MDN compatibility data, see https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream#browser_compatibility, all browsers that we support have native `ReadableStream` implementations (since quite some time too).

Hence only Node.js is now lagging behind w.r.t. `ReadableStream` support, and its experimental implementation doesn't really help us given the life-span of the LTS releases (see https://en.wikipedia.org/wiki/Node.js#Releases).
It seems quite unfortunate to bundle a `ReadableStream` polyfill in the `legacy` builds when it's unnecessary in browsers, given its overall size, but fortunately we can avoid that by simply listing `web-streams-polyfill` as a dependency for the `pdfjs-dist` library.",False
911021002e8185e0622759fe1f4d47f4de0fc2d2,2022-02-12 16:02:10,Jonas Jenwald,"Revert ""Don't block origin-less blob:-URLs in hosted viewer""

This reverts commit a6aca3cabe581319d93c862cb0b85f71580cacfd, since no version of Internet Explorer is supported any more.",False
d642d345005500cdedde596ae28cd364f6ab625c,2022-02-12 15:00:25,Jonas Jenwald,"Remove the UTF-8 fallback, when `TextDecoder` is missing, from the Content-Disposition parser

Given that `TextDecoder` is now supported by all modern browsers/environments, please see https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder#browser_compatibility, there's no longer any good reason to keep a UTF-8 fallback in the Content-Disposition parser.",False
06190dbbb3348ddd53ed77f294b008aac2191f95,2022-02-12 00:14:03,Jonas Jenwald,"Remove unnecessary `font-size` CSS rule from the `html` element (issue 14555, PR 3794 follow-up)

According to https://github.com/mozilla/pdf.js/pull/3794#discussion_r6983639 this was intended to be *temporary*, and the B2G project itself was discontinued years ago.",False
e9fd67a3f6040e06f88d643b62dd9ec149aa1808,2022-02-12 00:10:25,Tim van der Meij,"Merge pull request #14551 from Snuffleupagus/mv-createObjectURL

[api-minor] Stop exposing the `createObjectURL` helper function in the API",True
b87a24322268d5e3d57c89b2640fe0062d587d05,2022-02-10 16:31:35,Jonas Jenwald,"[api-minor] Stop exposing the `createObjectURL` helper function in the API

With recent changes, specifically PR 14515 *and* the previous patch, the `createObjectURL` helper function is now only used with the SVG back-end.
All other call-sites, throughout the code-base, are now using `URL.createObjectURL(...)` directly and it no longer seems necessary to keep exposing the helper function in the API.
Finally, the `createObjectURL` helper function is moved into the `src/display/svg.js` file to avoid unnecessarily duplicating this code on both the main- and worker-threads.",False
0daab88a486bd62d1d9cf5dacd48e00c87cf4a9e,2022-02-10 16:31:29,Jonas Jenwald,"Update two `display_utils` unit-tests to use native functionality rather than the `createObjectURL` helper function

Given that most of the code-base is already using native functionality, we can update these unit-tests similarily as well.
 - For the `blob:`-URL test, we simply use `URL.createObjectURL(...)` and `Blob` directly instead.
 - For the `data:`-URL test, we simply use `btoa` to do the Base64 encoding and then build the final URL-string.",False
f8b2a99ddc2eeb1aefda0fff2c8d5aadf31dfe8a,2022-02-10 03:36:35,Brendan Dahl,"Merge pull request #14543 from Snuffleupagus/bug-1753983

Let `Lexer.getNumber` treat a single minus sign as zero (bug 1753983)",True
d57f3a13d7ec8d2d80cb446d55a099b06c45b047,2022-02-10 00:15:18,Tim van der Meij,"Merge pull request #14547 from Snuffleupagus/xfa_bug1720182-file

Update the file used with the `xfa_bug1720182` test-case",True
d3d63cb471bfd58ccb2e5031902d0527149119e2,2022-02-10 00:11:22,Tim van der Meij,"Merge pull request #14548 from Snuffleupagus/bug-1754421

[api-minor] Ensure that the `PDFDocumentLoadingTask`-promise is rejected when cancelling the PasswordPrompt (bug 1754421)",True
1f0fb270b13de71b4955ab480b7b888ad7edaeeb,2022-02-09 19:39:20,Jonas Jenwald,"[api-minor] Ensure that the `PDFDocumentLoadingTask`-promise is rejected when cancelling the PasswordPrompt (bug 1754421)

This is essentially a *continuation* of PR 7926, where we added support for rejecting the current `PDFDocumentLoadingTask`-promise by throwing inside of the `onPassword`-callback.
Hence the naive way to address [bug 1754421](https://bugzilla.mozilla.org/show_bug.cgi?id=1754421) would be to simply throw in the `onPassword`-callback used in the default viewer. However it unfortunately turns out to not work, since the password input/validation is asynchronous, and we thus need another approach.

The simplest solution that I can come up with here, is thus to *extend* the `onPassword`-callback to also reject the current `PDFDocumentLoadingTask`-instance if an `Error` is explicitly passed as the input to the callback function. (This doesn't feel great, but I cannot see a better solution that isn't really complicated.)",False
188752e5f03f259d4781b0b4da2fbd5b32bdde1c,2022-02-08 21:29:18,Jonas Jenwald,"Update the test `Driver` to fail on duplicate files

While it's obviously fine to use the same PDF document in different reference-tests, note how we e.g. have both `eq` and `text` tests for one document, we should always avoid adding *duplicate* files in the `test/pdfs/` folder.",False
60efae96fd126a3668674d952203da2c3eee1785,2022-02-08 18:53:41,Jonas Jenwald,"Update the file used with the `xfa_bug1720182` test-case

The file used in this test-case is *identical* to, i.e. the md5 entry perfectly matches, the file used with the `xfa_bug1716380` test-case.
While it's obviously fine to use the same PDF document in different reference-tests, note how we e.g. have both `eq` and `text` tests for one document, we should always avoid adding *duplicate* files in the `test/pdfs/` folder.",False
64f3dbeb489c2fd08c6918ed5c6d73d1a5788805,2022-02-07 21:39:47,Jonas Jenwald,"Let `Lexer.getNumber` treat a single minus sign as zero (bug 1753983)

This appears to be consistent with the behaviour in both Adobe Reader and PDFium (in Google Chrome); this is essentially the same approach as used for a single decimal point in PR 9827.",False
acc758c40c55209c05beb9e93e620026b7f72c22,2022-02-06 18:41:33,Tim van der Meij,"Merge pull request #14538 from Snuffleupagus/update-compat

[api-minor] Update the minimum supported browser versions",True
200615d51507f14b5c70bea8b29e0cd222a3e46e,2022-02-06 17:58:31,Tim van der Meij,"Merge pull request #14539 from mozilla/dependabot/npm_and_yarn/simple-get-3.1.1

Bump simple-get from 3.1.0 to 3.1.1",True
a26ac162b633a56d61ee0218c2f2d3d7a9a6ef6a,2022-02-06 17:44:16,dependabot[bot],"Bump simple-get from 3.1.0 to 3.1.1

Bumps [simple-get](https://github.com/feross/simple-get) from 3.1.0 to 3.1.1.
- [Release notes](https://github.com/feross/simple-get/releases)
- [Commits](https://github.com/feross/simple-get/compare/v3.1.0...v3.1.1)

---
updated-dependencies:
- dependency-name: simple-get
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>",False
a4864d0dc29ef04e1ec1396e2b97d6ccfd5101e3,2022-02-06 17:43:32,Tim van der Meij,"Merge pull request #14537 from Snuffleupagus/update-packages

Update packages and translations",True
03f5f6a4211f047c5f9b7113082293c8495601ec,2022-02-06 17:36:43,Jonas Jenwald,"[api-minor] Update the minimum supported browser versions

Please note that while we ""support"" some (by now) fairly old browsers, that essentially means that the library (and viewer) will load and that the basic functionality will work as intended.[1]
However, in older browsers, some functionality may not be available and generally we'll ask users to update to a modern browser when bugs (specific to old browsers) are reported.[2]

There's always a question of just how old browsers the PDF.js contributors can realistically support, and here I'm suggesting that we place the cut-off point at approximately *three* years.
With that in mind, this patch updates the *minimum* supported browsers (and environments) as follows:
 - Chrome 73, which was released on 2019-03-12; see https://en.wikipedia.org/wiki/Google_Chrome_version_history
 - Firefox ESR (as before); see https://wiki.mozilla.org/Release_Management/Calendar
 - Safari 12.1, which was released on 2019-03-25; see https://en.wikipedia.org/wiki/Safari_version_history#Safari_12
 - Node.js 12, which was release on 2019-04-23 (and will soon reach EOL); see https://en.wikipedia.org/wiki/Node.js#Releases

---
[1] Assuming a `legacy`-build is being used, of course.

[2] In general it's never a good idea to use an old/outdated browser, since those may contain *known* security vulnerabilities.",False
86949cc93010d91087f94c0521281eecd459f583,2022-02-06 16:04:26,Jonas Jenwald,Update l10n files,False
38f6e675bc5ff38aa27677885859daccd2d39daf,2022-02-06 15:56:07,Jonas Jenwald,"Update the `@javascript-obfuscator/escodegen` package to the latest version

The only changes are support for [Class static initialization blocks](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks), and the diff for the `node_modules\@javascript-obfuscator\escodegen\escodegen.js` file contains only:
```diff
@@ -1506,6 +1506,13 @@
             return result;
         },

+        StaticBlock: function (stmt, flags) {
+            return [
+                'static' + space,
+                this.BlockStatement(stmt, flags)
+            ];
+        },
+
         ThrowStatement: function (stmt, flags) {
             return [join(
                 'throw',
```",False
5f7b96c9579e7704d8e686d4744a1b0d5d9d358c,2022-02-06 15:54:14,Jonas Jenwald,Update npm packages,False
48139a00592aad45dedec5c33128fdf390058542,2022-02-05 19:17:45,Tim van der Meij,"Merge pull request #14530 from Snuffleupagus/findResultsCount-height

Avoid the `findResultsCount` span taking up (vertical) space when hidden (PR 13261 follow-up)",True
97619ba949d6c5b82b3d5d1766fb34b9dce769f0,2022-02-05 19:14:09,Tim van der Meij,"Merge pull request #14532 from Snuffleupagus/rm-moz-fullscreen-prefixes

[GENERIC viewer] Remove the `moz`-prefixed FullScreen API usage from the viewer",True
ca663d4af9ac7cd4d7d2baaa42fed2c4c19f4230,2022-02-05 19:12:09,Tim van der Meij,"Merge pull request #14535 from Snuffleupagus/findbar-label-casing

[GENERIC viewer] Use consistent casing, for the labels, in the findbar",True
cd7fe27468fbdc2ba5d2ec0726f48bcf996d3b14,2022-02-05 15:48:20,Jonas Jenwald,"[GENERIC viewer] Use consistent casing, for the labels, in the findbar

Note that the *browser* findbar in Firefox uses ""Title Case"" for the labels, and it thus seem like a good idea to ensure that `PDFFindBar` in consistent with that.
Furthermore, the new label added in PR #13261 uses the ""Title Case"" format which means that currently the default viewer findbar looks inconsistent.

*Please note:* Based on the official Firefox localization docs, see https://firefox-source-docs.mozilla.org/l10n/overview.html#string-updates, changing only the casing should *not* require updating the key:
> 1) If the change is minor, like fixing a spelling error or case, the developer should update the en-US translation without changing the l10n-id.",False
eee057ccd518ac81d96f265cb006d932713e22e1,2022-02-04 17:14:27,Jonas Jenwald,"[GENERIC viewer] Remove the `moz`-prefixed FullScreen API usage from the viewer

The unprefixed FullScreen API has been available since Firefox 64, which was [released on 2018-12-11](https://wiki.mozilla.org/Release_Management/Calendar#Past_branch_dates), and has now been included in no less than *three* ESR releases.
Please also see the following MDN compatibility data:
 - https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenEnabled#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenchange_event#browser_compatibility",False
6fe4b3a5ae5fb132043ba97ea8c4a068aac7993e,2022-02-04 02:46:56,Jonas Jenwald,"Simplify the `findResultsCount` span toggling, by using the same approach as with the `findMsg` span",False
d0354d20b333d7bcd1ad1ec9069c4167d8fe7f61,2022-02-04 02:22:01,Jonas Jenwald,"Avoid the `findResultsCount` span taking up (vertical) space when hidden (PR 13261 follow-up)

When the viewer becomes narrow, the `PDFFindBar` will (forcibly) wrap its elements to prevent it from extending to the full window width.
Currently, after PR 13261, this now leads to the `findResultsCount` span taking up vertical space *unconditionally* when the findbar is wrapped. To avoid a blank space being shown in this case, before searching has begun, place the `findResultsCount` span in a ""message"" rather than an ""options"" container.",False
8281e64db352c752d333ebf2d5bc1e5256e9cd59,2022-02-03 21:00:47,calixteman,"Merge pull request #13261 from calixteman/diacritics1

[api-minor] Support search with or without diacritics  (bug 1508345, bug 916883, bug 1651113)",True
1f41028fcbb21bd5af98810847d1892a51862bd0,2022-02-03 20:12:55,Calixte Denizet,"Support search with or without diacritics (bug 1508345, bug 916883, bug 1651113)
  - get original index in using a dichotomic seach instead of a linear one;
  - normalize the text in using NFD;
  - convert the query string into a RegExp;
  - replace whitespaces in the query with \s+;
  - handle hyphens at eol use to break a word;
  - add some \s* around punctuation signs",False
70073ed81cd04a298a4478c1d6e47b42df46d76b,2022-02-03 14:52:20,Jonas Jenwald,"Merge pull request #14527 from Snuffleupagus/rm-normalizeWhitespace

[api-minor] Remove the `normalizeWhitespace` option in the `PDFPageProxy.{getTextContent, streamTextContent}` methods (issue 14519, PR 14428 follow-up)",True
403baa7bbab555c2a84e6787bc3dc2ab49724467,2022-02-03 13:47:22,Jonas Jenwald,"[api-minor] Remove the `normalizeWhitespace` option in the `PDFPageProxy.{getTextContent, streamTextContent}` methods (issue 14519, PR 14428 follow-up)

With these changes, we'll now *always* replace all whitespaces with standard spaces (0x20). This behaviour is already, since many years, the default in both the viewer and the browser-tests.",False
48c8831a79b764c73eca1a1b8d4596d367f3e4ca,2022-02-03 00:34:07,Tim van der Meij,"Merge pull request #14515 from Snuffleupagus/rm-disableCreateObjectURL

[api-minor] Remove support for browsers/environments without fully working `URL.createObjectURL` implementations",True
1d1e50e8ee11954bd2a4e079e736e1fd5e251d19,2022-02-01 16:54:06,calixteman,"Merge pull request #14522 from Snuffleupagus/rm-xfa_bug1716838

Remove the `xfa_bug1716838` browser-test since it's a duplicate",True
e13353cf21e81e575d02e47c2437dee3e8b21e09,2022-02-01 16:35:19,Jonas Jenwald,"Remove the `xfa_bug1716838` browser-test since it's a duplicate

The md5 entry perfectly matches the `xfa_bug1717668_1` test-case, which means that we unnecessarily test the same exact document twice.",False
1087b4dffdf5884ad17669fda54c59dd810667d3,2022-01-31 17:31:19,calixteman,"Merge pull request #14518 from Snuffleupagus/rm-MBTA-pretax-form-July2012

Remove the `MBTA-pretax-form-July2012` browser-test since it's a duplicate",True
ef1676678f11d6210136ff4bc40af671798943de,2022-01-31 17:05:26,Jonas Jenwald,"Remove the `MBTA-pretax-form-July2012` browser-test since it's a duplicate

The md5 entry perfectly matches the `xfa_bug1718521_2` test-case, which means that we unnecessarily test the same exact document twice.",False
bff7eb8ce8cbef35b631adc395a95654f5d2fb4b,2022-01-31 15:57:17,Jonas Jenwald,"Merge pull request #14516 from calixteman/focused_buttons

[UI] Avoid to have buttons in hover state after having been clicked (bug 836732)",True
476c75ed48f50004bcecf20a6a4b978deee1cded,2022-01-31 02:39:25,calixteman,"Merge pull request #14517 from Snuffleupagus/makeRef-forceNoChrome

Disable the browser-tests, during `gulp makeref`, in Google Chrome on the Windows bot (PR 14392 follow-up)",True
18c295f3d8f7b2268ee1906e7681a16a769a7d56,2022-01-30 22:54:22,Jonas Jenwald,"Disable the browser-tests, during `gulp makeref`, in Google Chrome on the Windows bot (PR 14392 follow-up)

Either the latest Chromium update, the latest Puppeteer update, or a combination of them both are now causing the Windows bot to timeout during the browser-tests; please see PR 14392.",False
7dda85654e9edb07906ad9d0e193cf6acfefe8f0,2022-01-30 22:41:34,Calixte Denizet,"[UI] Avoid to have buttons in hover state after having been clicked (bug 836732)
 - it aims to fix https://bugzilla.mozilla.org/show_bug.cgi?id=836732;
 - replace :focus by :focus-visible for the buttons in the UI, according to the docs:
   - https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible
   - the button has the focus-visible state when it has been focused with the keyboard",False
7a034706bade015cf2b969524bc6f0058e220eeb,2022-01-30 20:28:51,calixteman,"Merge pull request #14510 from calixteman/14502

[api-minor] Annotations - Adjust the font size in text field in considering the total width (bug 1721335)",True
ae842e1c3a75b34344e5c37ca09e497bc49a0d24,2022-01-30 20:23:31,Calixte Denizet,"[api-minor] Annotations - Adjust the font size in text field in considering the total width (bug 1721335)
 - it aims to fix #14502 and bug 1721335;
 - Acrobat and Pdfium do the same;
 - it'll avoid to have truncated data when printed;
 - change the factor to compute font size in using field height: lineHeight = 1.35*fontSize
  - this is the value used by Acrobat.
 - in order to not have truncated strings on the bottom, add few basic metrics for standard fonts.",False
dc2868d7d1537c11c17f5e1f38438a3e9e31f16f,2022-01-30 19:21:44,Jonas Jenwald,"[api-minor] Remove support for browsers/environments without fully working `URL.createObjectURL` implementations

This `disableCreateObjectURL` option was originally introduced all the way back in PR 4103 (eight years ago), in order to work-around `URL.createObjectURL()`-bugs specific to Internet Explorer.
In PR 8081 (five years ago) the `disableCreateObjectURL` option was extended to cover Google Chrome on iOS-devices as well, since that configuration apparently also suffered from `URL.createObjectURL()`-bugs.[1]

At this point in time, I thus think that it makes sense to re-evaluate if we should still keep the `disableCreateObjectURL` option.

 - For Internet Explorer, support was explicitly removed in PDF.js version `2.7.570` which was released one year ago and all IE-specific compatibility code (and polyfills) have since been removed.

 - For Google Chrome on iOS-devices, while we still ""support"" such configurations, it's *not* the focus of any development and platform-specific bugs are thus often closed as WONTFIX.

Note here that at this point in time, the `disableCreateObjectURL` option is *only* being used in the viewer and any `URL.createObjectURL()`-bugs browser/platform bugs will thus not affect the main PDF.js library. Furthermore, given where the `disableCreateObjectURL` option is being used in the viewer the basic functionality should also remain unaffected by these changes.[2]
Furthermore, it's also possible that the `URL.createObjectURL()`-bugs have been fixed in *browser* itself since PR 8081 was submitted.[3]

Obviously you could argue that this isn't a lot of code, w.r.t. number of lines, and you'd be technically correct. However, it does add additional complexity in a few different viewer components which thus add overhead when reading and working with this code.
Finally, assuming the `URL.createObjectURL()`-bugs are still present in Google Chrome on iOS-devices, I think that we should ask ourselves if it's reasonable for the PDF.js project (and its contributors) to keep attempting to support a configuration if the *browser* developers still haven't fixed these kind of bugs!?

---
[1] According to https://groups.google.com/a/chromium.org/forum/#!topic/chromium-html5/RKQ0ZJIj7c4, which is linked in PR 8081, that bug was mentioned/reported as early as the 2014 (eight years ago).

[2] Viewer functionality such as e.g. downloading and printing may be affected.

[3] I don't have access to any iOS-devices to test with.",False
9fba97d2f6647334a446cd9cb31fc18eba1d5d88,2022-01-30 16:15:17,Jonas Jenwald,"Merge pull request #14513 from calixteman/emc-update

Update quickjs sandbox",True
d9921a2bd56c6ab379c272c3b8e8b181a053626e,2022-01-30 02:00:39,Calixte Denizet,"Update quickjs sandbox
 - compiled with the latest emscripten:
  - Digest:sha256:a28bd5ddf32c2b145b51503ddddb3c02804ab624d661abd54173b1f2dc6cbf06",False
6b9cc24d49583c487d9267c98579fd4cd9db1704,2022-01-28 14:10:13,Jonas Jenwald,"Merge pull request #14508 from mozilla/dependabot/npm_and_yarn/nanoid-3.2.0

Bump nanoid from 3.1.30 to 3.2.0",True
7c5f2570226c1c9be97949cf37793f89cd31dda4,2022-01-28 13:51:50,Jonas Jenwald,"Merge pull request #14507 from mozilla/dependabot/npm_and_yarn/copy-props-2.0.5

Bump copy-props from 2.0.4 to 2.0.5",True
244efd9353d3848ba951fe7e8288cb44d3bf8015,2022-01-28 03:08:28,dependabot[bot],"Bump nanoid from 3.1.30 to 3.2.0

Bumps [nanoid](https://github.com/ai/nanoid) from 3.1.30 to 3.2.0.
- [Release notes](https://github.com/ai/nanoid/releases)
- [Changelog](https://github.com/ai/nanoid/blob/main/CHANGELOG.md)
- [Commits](https://github.com/ai/nanoid/compare/3.1.30...3.2.0)

---
updated-dependencies:
- dependency-name: nanoid
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>",False
1c08f55d3b507b2de21c905800f421ad4ea90961,2022-01-28 03:07:54,dependabot[bot],"Bump copy-props from 2.0.4 to 2.0.5

Bumps [copy-props](https://github.com/gulpjs/copy-props) from 2.0.4 to 2.0.5.
- [Release notes](https://github.com/gulpjs/copy-props/releases)
- [Changelog](https://github.com/gulpjs/copy-props/blob/master/CHANGELOG.md)
- [Commits](https://github.com/gulpjs/copy-props/compare/2.0.4...2.0.5)

---
updated-dependencies:
- dependency-name: copy-props
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>",False
3e9b092db05499312b6740cbdb203e0bf3d011af,2022-01-28 03:06:55,Jonas Jenwald,"Merge pull request #14392 from Snuffleupagus/polyfill-structuredClone

Polyfill `structuredClone` with core-js (PR 13948 follow-up)",True
d476186b9f8bd7178e2eb2436d1e6456f63eea72,2022-01-28 01:41:45,Jonas Jenwald,"Temporarily disable the browser-tests in Google Chrome on the Windows bot

Either the latest Chromium update, the latest Puppeteer update, or a combination of them both are now causing the Windows bot to timeout during the browser-tests.
To unblock both the updates and other improvements (i.e. the `structuredClone` polyfill), let's simply disable the problematic configuration for now since this a Mozilla project after all.",False
7cc761a8c0ff12217ff8478bdb5a2fce3a07833a,2022-01-28 01:41:42,Jonas Jenwald,"Polyfill `structuredClone` with core-js (PR 13948 follow-up)

This allows us to remove the manually implemented `structuredClone` polyfill, thus reducing the maintenance burden for the `LoopbackPort` class; refer to https://github.com/zloirock/core-js#structuredclone

*Please note:* While `structuredClone` support landed already in Firefox 94, Google Chrome only added it in version 98 (currently in Beta). However, given that the `LoopbackPort` will only be used together with *fake workers* in browsers this shouldn't be too much of a problem.[1]
For Node.js environments, where *fake workers* are unfortunately necessary, using a `legacy/`-build is already required which thus guarantees that the `structuredClone` polyfill is available.

Also, the patch updates core-js to the latest version since that one includes `structuredClone` improvements; please see https://github.com/zloirock/core-js/releases/tag/v3.20.3

---
[1] Given that we only support browsers with proper worker support, if *fake workers* are being used that essentially indicates a configuration problem/error.",False
2fcd07f4008fc87ed29b25adb6e7423cfeb102a6,2022-01-28 01:40:46,Jonas Jenwald,"Update Puppeteer to version `13.1.2`

Note in particular https://github.com/puppeteer/puppeteer/releases/tag/v13.1.0 which includes an update to Chromium 98, which adds support for `structuredClone` in the browser.",False
8f6965b1973ae0b86626dc6c547e996913f95d77,2022-01-28 00:04:56,Jonas Jenwald,"Merge pull request #14506 from Snuffleupagus/license_header_2022

Update the year in the `license_header` files",True
00bd549e820ce1572483888f5d1dba1d033fd8d7,2022-01-27 23:54:31,Jonas Jenwald,"Update the year in the `license_header` files

This also includes a couple of files that are included as-is in the `pdfjs-dist` library.",False
838909f8c185694663ce77124fb07a00742619df,2022-01-27 23:16:26,calixteman,"Merge pull request #14491 from quaoaris/lines-rendered-too-thick

fix for lines (stroke) are rendered too thick  (Bug 1743245)",True
a69adf03825a42b69a9dcf67abe0ae3d59b21d39,2022-01-26 22:34:57,Jonas Jenwald,"Merge pull request #14500 from calixteman/14497

Take into account all rotations before comparing glyph positions",True
3a7004ca25d9df656a60c08bd189feaef41c409f,2022-01-26 21:49:00,Calixte Denizet,"Take into account all rotations before comparing glyph positions
 - it aims to fix #14497;
 - previously, only rotations with an angle 0, 90, 180 or 270 were taken into account;
 - so generalize to any angle but keep the fast path for 0, 90, ... because they're likely more common than anything else.",False
5c3b24595854ae8e4fd1490ceb3d712c58143f57,2022-01-26 00:25:32,Jonas Jenwald,"Merge pull request #14495 from emilio/ctrl-wheel

web: Read WheelEvent.deltaMode before deltas.",True
2f8a0638a6af82aec09c942b40bfd66997b133ef,2022-01-25 23:27:49,Emilio Cobos Álvarez,"web: Read WheelEvent.deltaMode before deltas.

So that Firefox doesn't switch to pixel mode for compat with other
browsers.

This should fix https://github.com/mozilla/pdf.js/issues/14476, in terms
of restoring the previous behavior.

We probably want to change the pixel-based scrolling code to not scroll
so much (the deltaMode stuff normalizes to +/-1 tick for each wheel
event, perhaps the pixel-based value should do the same).",False
3f77d80f31321f2d4776d9780a763759288c0847,2022-01-25 14:57:30,quaoaris,"fix for lines (stroke) are rendered too thick  (Bug 1743245)

This commit fixes Bug 1743245 (Grided PDF file lines rendered too thick) which was created by a fix for  #12868 .
The lineWidth was set to round(1 * this._combinedScaleFactor) when the pixel is drawn as a parallelorgam with a height <1. This fix changes this to floor(1*this._combinedScaleFactor) .

This change shows a visual result comparable to Chrome and Acrobat.
Regarding the last PR 3 statements in canvas.js are affected and will change with this commit (stroke and paintChar).

renaming the reference files to naming comvention",False
583c39b85966f640292f95ccd1d05207ce9f9ca5,2022-01-25 14:34:32,Jonas Jenwald,"Merge pull request #14490 from Snuffleupagus/getCharUnicodeCategory-cache

Add a (global) cache to the `getCharUnicodeCategory` function",True
8836593b9eff3b332285bfecb67c636a170b96b0,2022-01-25 14:29:34,Jonas Jenwald,"Add a (global) cache to the `getCharUnicodeCategory` function

Given that the regular expression has already become more complex (after the initial patch adding it), it seems to me that it probably cannot hurt to add a global cache to reduce unnecessary re-parsing.
Obviously the `Glyph`-instances are being cached *per* font, however in most documents multiple fonts are being used and in practice there's very often a fair amount of overlap between the /ToUnicode-data in different fonts[1].

Consider for example loading and rendering the entire `tracemonkey.pdf` document (from the test-suite), which isn't a particularily large document. In that case the `getCharUnicodeCategory` function is being called a total of `601` times, however there's only `106` *unique* unicode-chars being checked.

*Please note:* In practice I suppose that this won't have a *huge* effect on overall performance, however given the relative simplicity of this patch I figured that it'd not hurt to submit it for review.

---
[1] Consider e.g. how there's usually different fonts used for regular, bold, respectively italic text.",False
ede26bfe4ade87513e6815023120fd7f5d93dd61,2022-01-25 00:13:29,Tim van der Meij,"Merge pull request #14479 from Snuffleupagus/update-packages

Update packages and translations",True
9367d540091bc16fddeade04759b0a8a10678f2a,2022-01-24 22:22:06,calixteman,"Merge pull request #14483 from calixteman/200B

Remove the invisible format marks from the text chunks",True
414a4d873a5cccef089c5a78477f9965171b7a18,2022-01-24 22:13:25,calixteman,"Merge pull request #14489 from calixteman/14488

Fix scripting test related to keystroke event",True
880ac6037c91b62b2c6c75b0112eefc0540c5bab,2022-01-24 21:34:50,Calixte Denizet,Fix scripting test related to keystroke event,False
b280dff1c57702a192b7e8295b7470d98c486fb1,2022-01-24 20:01:57,calixteman,"Merge pull request #14487 from Snuffleupagus/rm-out

Remove the `out.pdf` file (PR 14430 follow-up)",True
2f14723bf36105d44117b5664edf0948427f65fd,2022-01-24 19:25:34,Jonas Jenwald,"Remove the `out.pdf` file (PR 14430 follow-up)

It looks like this file was commited accidentally, since it contains *one* page from the default `tracemonkey` document.",False
e1d3a3b4142d460cd80dc92ac11e49446f477e22,2022-01-24 18:17:24,Calixte Denizet,"Remove the invisible format marks from the text chunks
 - it aims to fix issue #9186.",False
88236e11635b103ccff781d69da2ca280c289e87,2022-01-24 01:12:33,calixteman,"Merge pull request #14430 from calixteman/beforeinput

[JS] Use beforeinput event to trigger a keystroke event in the sandbox",True
6ac296e48e52a8940f6a869c44f768edb4674a7b,2022-01-24 00:23:01,Calixte Denizet,"[JS] Use beforeinput event to trigger a keystroke event in the sandbox
 - it aims to fix issue #14307;
 - this event has been added recently in Firefox and we can now use it;
 - fix few bugs in aform.js or in annotation_layer.js;
 - add some integration tests to test keystroke events (see `AFSpecial_Keystroke`);
 - make dispatchEvent in the quickjs sandbox async.",False
4f03f2a3a74471c86543c98827c000ae95a80975,2022-01-23 15:30:06,Jonas Jenwald,Update l10n files,False
1ed27965d1077b3c66987f5b29b301b8612b7f54,2022-01-23 15:28:15,Jonas Jenwald,Update npm packages,False
23b6fde9fc92b827f054e21978e32ce9c13dab82,2022-01-20 01:08:46,Tim van der Meij,"Merge pull request #14464 from Snuffleupagus/issue-14462

Support Type1 font files with incomplete /CharStrings definitions (issue 14462)",True
b0231cc88757cbef371fdac89864a609a568b819,2022-01-19 14:50:49,calixteman,"Merge pull request #14456 from calixteman/1749563

Font renderer - get int8 instead of uint8 in composite glyphes (bug 1749563)",True
74f25d2755e3c3bad281de42e848b49c48b4e807,2022-01-19 02:36:23,Calixte Denizet,"Font renderer - get int8 instead of uint8 in composite glyphes (bug 1749563)
 - it aims to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1749563;
 - use some helper functions to get (u|i)int** values in buffer: it helps to have a clearer code;
 - in composite glyphes the translations values with a transformations are signed so consequently get some int8 instead of uint8;
 - add few TODOs.",False
a13ae5d97d08d8c0fbd41865cd7fd8f9e54b2e37,2022-01-17 23:25:22,Jonas Jenwald,"Support Type1 font files with incomplete /CharStrings definitions (issue 14462)

Please refer to https://www.pdfa.org/norm-refs/Type1Fonts.pdf#page=15 for the expected format for the /CharStrings entries.
In the referenced PDF document the /CharStrings are missing the expected end-token, which causes us to swallow the start of the next glyph name.",False
f955b0e20c109919399a35f06bce3a75d7d4caaa,2022-01-16 20:10:26,Tim van der Meij,"Merge pull request #14457 from timvandermeij/unicode-test

Implement a unit test for `getCharUnicodeCategory` in `src/core/unicode.js` (PR 14428 follow-up)",True
e08fd5e389780b18f614e4d77a470eed6af181ee,2022-01-16 19:48:05,Tim van der Meij,"Implement a unit test for `getCharUnicodeCategory` in `src/core/unicode.js` (PR 14428 follow-up)

Given that the other functions in this file are already covered by unit
tests, we should also cover this newly added function.",False
749a3fa6994a656f2c9427cd932945168c74b943,2022-01-16 13:55:03,Jonas Jenwald,"Merge pull request #14455 from Snuffleupagus/refactor-evaluator-normalizeWhitespace

Make the `normalizeWhitespace` handling, in the `PartialEvaluator`, more efficient (PR 14428 follow-up)",True
ba37d600d73cc102f2447e4e4a5ddfe4a55513ad,2022-01-16 12:59:21,Jonas Jenwald,"Make the `normalizeWhitespace` handling, in the `PartialEvaluator`, more efficient (PR 14428 follow-up)

After the changes in PR 14428 we can *directly*, and more efficiently, handle whitespace conversion in `PartialEvaluator.getTextContent` when the `normalizeWhitespace` option is being used.
This way we no longer need a separate helper function for this, and can avoid having to (again) iterate through the text and checking each character. Finally, this also removes the need for using a regular expression on e.g. all non-ASCII text.",False
da953f4b64740ddc1f194235393cc64b7abe0b74,2022-01-16 02:17:10,calixteman,"Merge pull request #14428 from calixteman/typo

Use the correct dimension to know if we have to add an EOL in vertical mode",True
9dae421a0d2e060fd0b066cc8ae4d5e58e70266f,2022-01-16 02:14:00,Calixte Denizet,Handle all the whitespaces the same way when creating text chunks,False
922dac035cf4f388b161c9924353e16feea59a91,2022-01-15 18:41:47,Tim van der Meij,"Merge pull request #14448 from Snuffleupagus/Type3-circular-refs

Prevent circular references in Type3 fonts",True
a72d188599fa8058c2e6af4a3d1b3b11e6b8b68b,2022-01-15 18:41:25,Tim van der Meij,"Merge pull request #14439 from Snuffleupagus/issue-14438

Ignore Annotations with empty /Rect-entries in the display-layer (issue 14438)",True
78f160b6562002d8803d097f77a75e02f6492e56,2022-01-15 18:30:16,Tim van der Meij,"Merge pull request #14453 from Snuffleupagus/viewer-documenterror

Dispatch a ""documenterror"" event in `PDFViewerApplication._documentError` (issue 14451)",True
c0d2932faff30bc6fd91ae5f746bf425b29cf9bc,2022-01-15 18:22:10,Tim van der Meij,"Merge pull request #14454 from Snuffleupagus/util-more-unreachable

Replace some `assert` usage with `unreachable` in the `src/shared/util.js` file",True
625f829842fe25078f6ea1bdd9ec0f6c64f46298,2022-01-15 18:16:11,Tim van der Meij,"Merge pull request #14446 from Snuffleupagus/issue-14435

Expose even more API-functionality in the TypeScript definitions (issue 14435, PR 14013 follow-up)",True
0e1b93bf2063732214243e67572e2446aa68d872,2022-01-15 17:31:25,Jonas Jenwald,"Replace some `assert` usage with `unreachable` in the `src/shared/util.js` file

Inlining the checks should be a *tiny bit* more efficient, since it avoids have to make *unconditional* function calls in these fairly commonly used helper functions.",False
bf8a58e5e3504b6a129d4fb41ced87601191ae4d,2022-01-15 16:25:44,Jonas Jenwald,"Dispatch a ""documenterror"" event in `PDFViewerApplication._documentError` (issue 14451)

*Please note:* This is a tentative patch, since I don't know if this is deemed important enough to fix.

The new event could be seen as a *supplement* to the existing ""documentinit"" and ""documentloaded"" events, but for the case when a PDF document fails to load.
To make the ""documenterror"" event generally useful, it'll include both the localized error message as well as the original reason for the error (when that exists).",False
e0032811cd0d3480fe953d3bf4ade84eccb8541d,2022-01-15 01:25:13,Jonas Jenwald,"Merge pull request #14450 from Snuffleupagus/issue-14449

Add (basic) UTF-8 support in the `stringToPDFString` helper function (issue 14449)",True
12d8f0b64d4118a8561c92f31205ced9d95f4384,2022-01-15 01:08:40,Jonas Jenwald,"Re-factor the `stringToPDFString` helper function for UTF-16 strings

This patch changes the function to instead utilize the `TextDecoder` for both kinds of UTF-16 BOM strings.",False
76444888fb593f32d28c4ef119405a3177ae29ba,2022-01-14 23:27:07,Jonas Jenwald,"Add (basic) UTF-8 support in the `stringToPDFString` helper function (issue 14449)

This patch implements this by looking for the UTF-8 BOM, i.e. `\xEF\xBB\xBF`, in order to determine the encoding.[1]
The actual conversion is done using the `TextDecoder` interface, which should be available in all environments/browsers that we support; please see https://developer.mozilla.org/en-US/docs/Web/API/TextDecoder#browser_compatibility

---
[1] Assuming that everything lacking a UTF-16 BOM would have to be UTF-8 encoded really doesn't seem correct.",False
4c55563574ded9a3fb4ff4a4e4cab5ef3986768e,2022-01-13 22:29:57,Jonas Jenwald,"Add an additional test-case for circular references in Type3 fonts

The PDF document in this patch already worked *without* the previous patch, but I wanted to improve our test-coverage for the Type3-parsing.

The attached PDF document was also found in https://github.com/pdf-association/safedocs/tree/main/Miscellaneous%20Targeted%20Test%20PDFs",False
53d4ee7990f69f4546934cb80979c7a76ad6f357,2022-01-13 22:28:37,Jonas Jenwald,"Prevent circular references in Type3 fonts

In corrupt PDF documents Type3 fonts may introduce circular dependencies, thus resulting in the affected font(s) never loading and parsing/rendering never completing.
Note that I've not seen any real-world examples of this kind of font corruption, but the attached PDF document was rather found in https://github.com/pdf-association/safedocs/tree/main/Miscellaneous%20Targeted%20Test%20PDFs

*Please note:* That repository contains a number of reduced test-cases that are specifically intended to test interoperability (between PDF viewer) and parsing/rendering for various kinds of strange/corrupt PDF documents.
Some of the test-cases found there may thus not make sense to try and ""fix"" upfront, in my opinion, unless the problems are also found in real-world PDF documents.",False
b9849e38b870e31e3a8d19e3f0d7ca0db7316dd7,2022-01-13 16:35:40,Jonas Jenwald,"Expose even more API-functionality in the TypeScript definitions (issue 14435, PR 14013 follow-up)

While `PageViewport` apparently makes sense in TypeScript environments, given that it's being returned by the `PDFPageProxy.getViewport`-method in the API, we really don't want to extend the *public* API by simply exporting the class directly in `src/pdf.js` since it should never be called/initialized manually.
Hence we follow the same pattern as in PR 14013, and also extend the API unit-tests to ensure that `PDFPageProxy.getViewport` always returns a `PageViewport`-instance as expected.",False
ea57ef116e688223cb742ae09cafc7014f68a735,2022-01-13 00:39:14,Tim van der Meij,"Merge pull request #14443 from Snuffleupagus/issue-14442

Prevent run-time errors in `BaseViewer` when it's falling back to `SimpleLinkService` (issue 14442, PR 14295 follow-up)",True
8286066372b42ce7d5af950b8e885c8ae1937c16,2022-01-12 21:34:51,Jonas Jenwald,"Prevent run-time errors in `BaseViewer` when it's falling back to `SimpleLinkService` (issue 14442, PR 14295 follow-up)",False
08d88a0235e72f7a7e21295faa5c4c9e7c5eccb8,2022-01-11 18:24:35,Jonas Jenwald,"Ignore Annotations with empty /Rect-entries in the display-layer (issue 14438)

This prevents the `BaseSVGFactory.create`-method from throwing, and thus preventing any remaining Annotations (on the page) from rendering in corrupt documents.",False
236c8d47864e8ebf593bae21576670b59a7d4988,2022-01-09 19:43:53,Tim van der Meij,"Merge pull request #14432 from Snuffleupagus/update-packages

Update packages and translations",True
365538a3831b96d3429f45a50268a4429772436e,2022-01-09 16:02:34,Jonas Jenwald,Update l10n files,False
457ff0d54a119340c58220daa0cfa5ae2acc853c,2022-01-09 16:02:34,Jonas Jenwald,"Update Jasmine to version 4

For the unit-tests that were updated in this patch, note that I settled on simply using `toEqual` comparisons rather than updating the custom matchers (since those don't seem necessary any more).

Please refer to the following resources for additional information:
 - https://github.com/jasmine/jasmine/blob/main/release_notes/4.0.0.md
 - https://github.com/jasmine/jasmine-npm/blob/main/release_notes/4.0.0.md
 - https://jasmine.github.io/tutorials/upgrading_to_Jasmine_4.0",False
38e574f1d580cbcb42299225ce004708e2398dc1,2022-01-09 15:19:21,Jonas Jenwald,Update npm packages,False
8ac0ccc2277a7c0c85d6fec41c0f3fc3d1a2d232,2022-01-08 17:49:11,Tim van der Meij,"Merge pull request #14424 from Snuffleupagus/mv-addLinkAttributes

[api-minor] Move `addLinkAttributes`, `LinkTarget`, and `removeNullCharacters` into the viewer (PR 14092 follow-up)",True
8cf0a8c357bdc4c881659576fa354c2ca64e36e7,2022-01-08 17:32:02,Tim van der Meij,"Merge pull request #14423 from Snuffleupagus/rm-getViewerConfiguration-eventBus

Remove the `eventBus` parameter from `getViewerConfiguration`",True
f25e95a2b433aee36d7da136109c8ad42a3d7db5,2022-01-08 17:20:05,calixteman,"Merge pull request #14429 from calixteman/14306

[JS] Fix few errors around AFSpecial_Keystroke",True
6369617e6fcb97456137700d656b8d401fe88edf,2022-01-08 17:04:56,Calixte Denizet,"[JS] Fix few errors around AFSpecial_Keystroke
 - @cincodenada found some errors which are fixed in this patch;
 - it partially fixes issue #14306;
 - add some tests.",False
9bb636402a1c1d2eedf458e78deb98fc9739c848,2022-01-07 19:49:03,Calixte Denizet,Use the correct dimension to know if we have to add an EOL in vertical mode,False
7b8794b37e3e4bfc25474d17289faea98918e841,2022-01-06 16:55:33,Jonas Jenwald,"[api-minor] Move `removeNullCharacters` into the viewer

This helper function has never been used in e.g. the worker-thread, hence its placement in `src/shared/util.js` led to a *small* amount of unnecessary duplication.
After the previous patches this helper function is now *only* used in the viewer, hence it no longer seems necessary to expose it through the official API.

*Please note:* It seems somewhat unlikely that third-party users were relying *directly* on this helper function, which is why it's not being exported as part of the viewer components. (If necessary, we can always change this later on.)",False
00aa9811e6cfb6a6200d2dc5b2e81eef4a5f033e,2022-01-06 16:55:33,Jonas Jenwald,"Convert the `pagesRefCache`, on `PDFLinkService`, from an Object to a Map

This seems like a more appropriate data structure, and as part of these changes the property was also converted to a *private* one.",False
fc31e1ba874d3495f3229e80f8c115f4cab9bd15,2022-01-06 16:55:33,Jonas Jenwald,"Convert the `isValidExplicitDestination` helper to a private static method on `PDFLinkService`

This patch also changes a previously ""private"" method, on `PDFLinkService`, to be *properly* private since that's now supported.",False
2d2b6463b8a9ac26b72d8b7de7a47f78cfdfd940,2022-01-06 16:55:33,Jonas Jenwald,"[api-minor] Move `addLinkAttributes` and `LinkTarget` into the viewer

As part of the changes/improvement in PR 14092, we're no longer using the `addLinkAttributes` directly in e.g. the AnnotationLayer-code.
Given that the helper function is now *only* used in the viewer, hence it no longer seems necessary to expose it through the official API.

*Please note:* It seems somewhat unlikely that third-party users were relying *directly* on the helper function, which is why it's not being exported as part of the viewer components. (If necessary, we can always change this later on.)",False
08256e6795bbec885746cba1c198c0b4c5f84982,2022-01-06 16:48:04,Jonas Jenwald,"Remove the `eventBus` parameter from `getViewerConfiguration`

This structure contains *almost* exclusively references to DOM elements (and a couple of simple strings), rather than complete classes/functions. Hence the `eventBus`-option sticks out a fair bit, and I'd guess that it's *mostly* unused in e.g. third-party implementations.

Given that we, in multiple places, mention that the default viewer shouldn't be used as-is I really don't think that we need to keep this special `eventBus`-option around. Furthermore, nowadays it's also a lot easier to (safely) access the existing `EventBus`-instance in the viewer; see https://github.com/mozilla/pdf.js/wiki/Third-party-viewer-usage#initialization-promise which shows how to listen for the default viewer being initialized (and its `eventBus` thus being available).",False
290cbc523281cb86fdf0117cf8f2cae521518fb9,2022-01-05 16:30:36,Jonas Jenwald,"Merge pull request #14418 from calixteman/14415

Use positive dimensions for text chunks in the text layer (issue #14415)",True
6cdae5ac4dec2034b9d5f3661df1dc85fc3a0ead,2022-01-05 15:19:56,Calixte Denizet,Use positive dimensions for text chunks in the text layer (issue #14415).,False
568633cf62a9a9f8d37880fda4e015b4ad4c6fc1,2022-01-04 19:07:15,Jonas Jenwald,"Merge pull request #14417 from mozilla/revert-14367-integration-tests

Revert ""Disable failing print actions integration test in Firefox""",True
2722deb6104226bafbc976fc2857aa58bb9b1619,2022-01-04 18:49:27,Jonas Jenwald,"Revert ""Disable failing print actions integration test in Firefox""",False
2ca432d318f474e1c2342145fe9d9ac27cf8dd23,2022-01-02 19:30:50,Jonas Jenwald,"Merge pull request #14413 from timvandermeij/drop-beta

Drop the beta logic from the Gulpfile/website/`pdfjs.config` file",True
378c08a9b10aa8f0aed9979e5688fdefbf2805fe,2022-01-02 19:08:36,Tim van der Meij,"Drop the beta logic from the Gulpfile/website/`pdfjs.config` file

From now on we only make stable releases, so the beta logic should be
removed to simplify the code.",False
f287c5f817bab93cfc1c755386b7c5f67f344a55,2022-01-01 19:13:20,Tim van der Meij,"Merge pull request #14411 from Snuffleupagus/getAllPageDicts-async

Convert `Catalog.getAllPageDicts` to an `async` method",True
b0e774d9c5c7609c44c2df9bfb0b40075c0d5bc9,2022-01-01 02:33:10,Jonas Jenwald,"Convert `Catalog.getAllPageDicts` to an `async` method

The patch in PR 14335 *essentially* re-introduced the old code from before PR 3848, however looking at this code a bit closer it should be possible to simplify it by making the method asynchronous.

While this method is currently only used as a *fallback* in corrupt documents, the way that `MissingDataException`s are handled is less than ideal. Note that if a `MissingDataException` is thrown, we're forced to re-parse the *entire* /Pages tree[1].
With this method now being asynchronous, we're able to handle fetching of References in a *much* easier/nicer way than before without having to throw `MissingDataException`s and re-parse anything.
These changes also let us simplify the call-site slightly, by calling the method *directly* instead of using the `PDFManager`-instance (since again it will no longer throw `MissingDataException`s).

Furthermore, this patch contains the following other changes:
 - Reduce unnecessary duplication in the various `catch` handlers throughout the method, by simply moving the `XRefEntryException` handling into the `addPageError` helper function instead.
 - Move the ""circular references""-check to occur slightly earlier, since there's obviously no point in asynchronously fetching data just to then throw an Error *immediately* afterwards.

---
[1] Imagine e.g. a thousand page document, where there's a `MissingDataException` thrown when fetching/parsing page 900.",False
3d7bb6c38d380fa6fa896c0f2e5f8aa13806f82d,2021-12-31 23:49:14,Tim van der Meij,"Merge pull request #14409 from Snuffleupagus/getPageIndex-better-caching

Improve caching for the `Catalog.getPageIndex` method (PR 13319 follow-up)",True
1491459deaa145ea875be6bdc9480921403de1c4,2021-12-30 00:59:14,Jonas Jenwald,"Improve caching for the `Catalog.getPageIndex` method (PR 13319 follow-up)

This method is now being used a lot more, compared to when it's added, since it's now used together with scripting as part of the `PDFDocument.fieldObjects` parsing (called during viewer initialization).
For /Page Dictionaries that we've already parsed, the `pageIndex` corresponding to a particular Reference is already known and we're thus able to skip *all* parsing in the `Catalog.getPageIndex` method for those cases.",False
a20393e6e447d14eb5f29fd6608457b8355d12c1,2021-12-29 17:56:58,Jonas Jenwald,"Update `PDFDocument._getLinearizationPage` to do the /Type-check correctly (PR 14400 follow-up)

I forgot about this in PR 14400, since we should obviously be consistent *and* given that the existing check is actually wrong; sorry about this!",False
b99927e1eeabdb65a4c60d6545929f735c0e9b3d,2021-12-29 17:27:32,Jonas Jenwald,"Improve the API unit-tests for scripting-related functionality

I happened to notice that we didn't have *any* unit-tests for either `getFieldObjects` or `getCalculationOrderIds`, on the `PDFDocumentProxy` class, which seems unfortunate since it's API functionality that we depend on in e.g. the viewer.",False
e42d54e1b5a1a1a588a5aba9332439dbd5883ada,2021-12-29 00:10:34,Tim van der Meij,"Merge pull request #14400 from Snuffleupagus/getPageDict-async

[api-minor] Convert `Catalog.getPageDict` to an asynchronous method",True
01b25b26127aea9651acc4c44755f6d5ef8de3b0,2021-12-28 23:58:32,Tim van der Meij,"Merge pull request #14391 from KouWakai/annot-border-correct

Handle non-integer Annotation border widths correctly (issue 14203)",True
07c32f0f4f9ebce4c4b87088c80cd89f6f9e7526,2021-12-28 23:47:31,Tim van der Meij,"Merge pull request #14401 from Snuffleupagus/update-packages

Update packages and translations",True
ea55e8bf41c89d692261a1b78fb36c48f52c2be2,2021-12-26 15:49:19,Jonas Jenwald,Update l10n files,False
69f14b1ee92671700b0506c0ee3d80e6f220da50,2021-12-26 15:39:29,Jonas Jenwald,Update npm packages,False
b513c64d9da6cf050c1b5d3b0500e367b668789e,2021-12-25 19:52:48,Jonas Jenwald,"[api-minor] Convert `Catalog.getPageDict` to an asynchronous method

Besides converting `Catalog.getPageDict` to an `async` method, thus simplifying the code, this patch also allows us to pro-actively fix a existing issue.
Note how we're looking up References in such a way that `MissingDataException`s won't cause trouble, however it's *technically possible* that the entries (i.e. /Count, /Kids, and /Type) in a /Pages Dictionary could actually be indirect objects as well. In the existing code this could lead to *some*, or even all, pages failing to load/render as intended.
In practice that doesn't *appear* to happen in real-world PDF documents, but given all the weird things that PDF software do I'd prefer to fix this pro-actively (rather than waiting for a bug report).
With `Catalog.getPageDict` being `async` this is now really simple to address, however I didn't want to introduce a bunch more *unconditional* asynchronicity in this method if it could be avoided (since that could slow things down). Hence we'll *synchronously* lookup the *raw* data in a /Pages Dictionary, and only fallback to asynchronous data lookup when a Reference was encountered.

In addition to the above, this patch also makes the following notable changes:
 - Let `Catalog.getPageDict` *consistently* reject with the actual error, regardless of what data we're fetching. Previously we'd ""swallow"" the actual errors except when looking up Dictionary entries, which is inconsistent and thus seem unfortunate. As can be seen from the updated unit-tests this change is API-observable, hence why the patch is tagged `[api-minor]`.

 - Improve the consistency of the Dictionary /Type-checks in both the `Catalog.getPageDict` and `Catalog.getAllPageDicts` methods.
   In `Catalog.getPageDict` there's a fallback code-path where we're *incorrectly* checking the /Page Dictionary for a /Contents-entry, which is wrong since a /Page Dictionary doesn't need to have a /Contents-entry in order to be valid.
   For consistency the `Catalog.getAllPageDicts` method is also updated to handle errors in the /Type-lookup correctly.

 - Reduce the `PagesCountLimit.PAUSE_EAGER_PAGE_INIT` viewer constant, to further improve loading/rendering performance of the *second* page during initialization of very long documents; PR 14359 follow-up.",False
98158b67a36f7dbe48fd507231493201b72d2100,2021-12-24 18:40:19,KouWakai,"Handle non-integer Annotation border widths correctly (issue 14203)

The existing code appears to be wrong, since according to the PDF specification the border width of an Annotation only has to be a number and not specifically an integer. Please see:
 - https://www.adobe.com/content/dam/acom/en/devnet/pdf/pdfs/PDF32000_2008.pdf#page=392
 - https://www.adobe.com/content/dam/acom/en/devnet/pdf/pdfs/PDF32000_2008.pdf#G11.2096210
 - https://www.adobe.com/content/dam/acom/en/devnet/pdf/pdfs/PDF32000_2008.pdf#G6.1965562",False
41dab8e7b6c1e2684d4afabb8f02e40a874d8e85,2021-12-21 14:34:10,Jonas Jenwald,"Merge pull request #14388 from Snuffleupagus/bug-1746213

Unblock the ""load"" event in inactive windows/tabs (bug 1746213, PR 11646 follow-up)",True
c4d344b52a12d87e7b03f436057f3ef34886da69,2021-12-19 21:32:51,Tim van der Meij,"Merge pull request #14389 from timvandermeij/bump

Bump versions in `pdfjs.config`",True
08f35f9f7c514f1e9be4529cf075adde49016131,2021-12-19 21:28:17,Tim van der Meij,Bump versions in `pdfjs.config`,False
dc4a6e94f347ebecf2701cbbc617c59f53ea61ff,2021-12-19 15:10:31,Jonas Jenwald,"Unblock the ""load"" event when the windows/tabs becomes inactive (bug 1746213)

*This addresses the following case missing from the previous patch:*
The viewer is loaded in an *active* window/tab, and enough time is allowed to pass in order to allow rendering to start. However, if the user then switches to another tab (or another program) *before* rendering has finished, the ""load"" event also needs to be unblocked.",False
472bbf45922b7509541e25589cbfcfa8c4a92b12,2021-12-19 15:09:48,Jonas Jenwald,"Unblock the ""load"" event in inactive windows/tabs (bug 1746213, PR 11646 follow-up)

Given that `requestAnimationFrame` is being used, see the `src/diplay/api.js` file, an inactive window/tab means that rendering will not run and we'll thus not fetch all pages. The latter is a requirement for the ""load"" event to be unblocked, in the MOZCENTRAL-version of, the default viewer.

This patch is a *partial* solution, since it only addresses the following situations:
 - A *background*  tab (containing the viewer) is reloaded, e.g. via the tab-bar context menu.
 - The viewer is loaded in a active tab, but the user switches away from it (or switches to another program window) *before* rendering has started.",False
a2ae56f394acb485ce7067a75342ac60da17f171,2021-12-18 21:10:56,Tim van der Meij,"Merge pull request #14387 from timvandermeij/test-utils

Modernize the test utilities",True
71326c6a1c23e4ebf1c477e1b595cd5869036e51,2021-12-18 20:28:47,Tim van der Meij,"Enable the `no-var` linting rule in `test/testutils.js`

This is done automatically with the `gulp lint --fix` command with the
only exception of the `parts` variable.",False
a24982a733fdaa81564b032996f50e7ea6d2b10c,2021-12-18 20:22:04,Tim van der Meij,"Drop custom confirmation logic in favor of using the built-in Node.js `readline` module

Most likely this code predates our use of Node.js, but in Node.js asking
for user confirmation is a solved problem, so we can remove the custom
logic we have for this, which overall makes things much simpler.",False
869b396011b03d00325f2a5d5c01e58841efc312,2021-12-18 18:05:54,Tim van der Meij,"Merge pull request #14373 from Snuffleupagus/update-TypeScript

[api-minor] Fix broken/missing JSDocs and `typedef`s, to allow updating TypeScript to the latest version (issue 14342)",True
afa43d3af0b5c2dbcb80af3b902001ff818cb4ef,2021-12-18 17:54:42,Tim van der Meij,"Merge pull request #14386 from Snuffleupagus/issue-14385

Ignore *negative* /FitH parameters in the viewer (issue 14385)",True
6b75e46d110cde77e3c5375de09170cc6760ca18,2021-12-18 16:05:21,Jonas Jenwald,"Ignore *negative* /FitH parameters in the viewer (issue 14385)

This provides a work-around for badly generated PDF documents that contain *negative* /FitH parameters (in the referenced issue the value `-32768` is used).",False
e19020c028d56e1965a27e6a8ea0c719fb2dc1e8,2021-12-16 03:47:08,Jonas Jenwald,"Move the `Default{...}LayerFactory` into a new `web/default_factory.js` file

This patch, first of all, removes circular dependencies in the TypeScript definitions. Secondly, it also moves `RenderingStates` into `web/ui_utils.js` to break another type-dependency and directly use the `XfaLayerBuilder` during XFA-printing.
Finally, note that this patch *slightly* reduces the size of the default viewer (e.g. in the `MOZCENTRAL` build) by not having to bundle code which is completely unused.",False
e0dba504d261443dc6e17e5e92f3f0261d454e3d,2021-12-16 03:44:25,Jonas Jenwald,"Fix broken/missing JSDocs and `typedef`s, to allow updating TypeScript to the latest version (issue 14342)

This patch circumvents the issues seen when trying to update TypeScript to version `4.5`, by ""simply"" fixing the broken/missing JSDocs and `typedef`s such that `gulp typestest` now passes.
As always, given that I don't really know anything about TypeScript, I cannot tell if this is a ""correct"" and/or proper way of doing things; we'll need TypeScript users to help out with testing!

*Please note:* I'm sorry about the size of this patch, but given how intertwined all of this unfortunately is it just didn't seem easy to split this into smaller parts.
However, one good thing about this TypeScript update is that it helped uncover a number of pre-existing bugs in our JSDocs comments.",False
d3e1d7090ac6f582d0c277e8768ac63bbbaa1134,2021-12-16 00:10:39,Tim van der Meij,"Merge pull request #14370 from Snuffleupagus/getPageDict-sync-Pages

Slightly reduce asynchronicity in the `Catalog.getPageDict` method (PR 14338 follow-up)",True
274989ab565bc2d551215cdad8ad2c379ebc3275,2021-12-16 00:07:50,Tim van der Meij,"Merge pull request #14372 from Snuffleupagus/BaseViewer-Lang

Move the /Lang handling into the `BaseViewer` (PR 14114 follow-up)",True
21aea0b1a27375e1620278ca4ec7d4f7ca05b02a,2021-12-16 00:04:43,Tim van der Meij,"Merge pull request #14380 from Snuffleupagus/event-utils

Move the `EventBus`, and related functionality, into its own file",True
0a19ef6864d8e05eb4936c6ebbd9e22c29c2f054,2021-12-15 21:48:57,Jonas Jenwald,"Move the `EventBus`, and related functionality, into its own file

The size of the `web/ui_utils.js` file has increased over time, as more code has been added to (or moved into) that file. To reduce its size slightly, this patch moves the event-related functionality into a separate file.",False
760f765e5690790194e8bd737c13b6aca3e75216,2021-12-14 17:49:05,Jonas Jenwald,"Move the /Lang handling into the `BaseViewer` (PR 14114 follow-up)

In PR 14114 this was only added to the default viewer, which means that in the viewer components the user would need to *manually* implement /Lang handling. This was (obviously) a bad choice, since the viewer components already support e.g. structTrees by default; sorry about overlooking this!

To avoid having to make *two* `getMetadata` API-calls[1] very early during initialization, in the default viewer, the API will now cache its result. This will also come in handy elsewhere in the default viewer, e.g. by reducing parsing when opening the ""document properties"" dialog.

---
[1] This not only includes a round-trip to the worker-thread, but also having to re-parse the /Metadata-entry when it exists.",False
a425c9cfa5960192f2ca2881ba4e02c3e4e14614,2021-12-14 15:06:06,Jonas Jenwald,"Merge pull request #14368 from timvandermeij/puppeteer

Consistently use string arguments for page.waitForFunction calls and upgrade to Puppeteer 13.0.0",True
fa51fd94284310255bd34f172747accf798dfb63,2021-12-14 01:48:06,Jonas Jenwald,"Slightly reduce asynchronicity in the `Catalog.getPageDict` method (PR 14338 follow-up)

After the changes in PR 14338, specifically in the `XRef.parse`-method, the /Pages-entry will now always have been fetched/validated when the `Catalog`-instance is created.
Hence we can directly access the /Pages-entry in `Catalog.getPageDict` and thus avoid *one* asynchronous data-lookup per page in the document. (In practice this is unlikely to show up in e.g. benchmarks, but it really cannot hurt.)

Finally, make sure that the `getPageDict`/`getAllPageDicts`-methods track the /Pages-tree reference correctly to prevent circular references in corrupt documents.",False
da2b3dd3befa75d1adf5f3d6a1354b4ce67ed1a0,2021-12-13 00:22:11,Tim van der Meij,Upgrade to Puppeteer 13.0.0,False
1bc6b846b6ab0b5f1090cc4e8c891a3e249852b2,2021-12-13 00:15:34,Tim van der Meij,"Consistently use string arguments for `page.waitForFunction` calls

We use string arguments in all other places, so these two places are a
bit inconsistent in that sense. Moreover, it's just one argument now,
which makes it a bit easier to read and see what it does because we
don't have to pass the always-empty options argument anymore. Finally,
doing it like this ensures it works in all Puppeteer versions given
https://github.com/puppeteer/puppeteer/issues/7836.",False
e638a84afeeede046e34b5daedf4799c10037810,2021-12-12 20:50:34,Tim van der Meij,"Merge pull request #14367 from timvandermeij/integration-tests

Disable failing print actions integration test in Firefox",True
2643e6a82308c77fd4fbef829921782e7d85381c,2021-12-12 20:40:50,Tim van der Meij,"Disable failing print actions integration test in Firefox

Once the upstream bug is fixed it can be enabled again because it's
causing way too much noise now. This is tracked in issue #14293. Note
that I deliberately added a new block so we can easily remove it later
on and because the other block is about another bug.",False
d47b6735b48be6769d77d9eb40167f08bdf38b2c,2021-12-12 18:30:04,Tim van der Meij,"Merge pull request #14364 from Snuffleupagus/BaseViewer-conditional-getPermissions

Only call `PDFDocumentProxy.getPermissions`, in the viewer, when `pdfjs.enablePermissions` is set (PR 14362 follow-up)",True
63af15eb8fee695615c2475f4ba03877a6a58e47,2021-12-12 01:16:19,Jonas Jenwald,"Only call `PDFDocumentProxy.getPermissions`, in the viewer, when `pdfjs.enablePermissions` is set (PR 14362 follow-up)

By making this API-call *unconditionally*, we introduce a (slight) delay in the initialization of *all* documents.
That seems quite unfortunate, since `pdfjs.enablePermissions` is off by default, and it thus seem better only do the API-call when actually needed; sorry about this!",False
6d8d37e93dba7ee647b357a8546c9f927c7850fb,2021-12-12 00:32:23,Tim van der Meij,"Merge pull request #14362 from Snuffleupagus/issue-14356

Support disabling of form editing when `pdfjs.enablePermissions` is set (issue 14356)",True
fefb9ed5b48a66e0b12c545389c253f08418ca22,2021-12-12 00:21:38,Tim van der Meij,"Merge pull request #14360 from timvandermeij/updates

Update packages and translations",True
c5847141b4cd7fb61ee7f5ac4fc8de3fc098ec39,2021-12-12 00:14:52,Tim van der Meij,Update translations to the most recent versions,False
2757000bb26d94a38b9c44e90dadbb1d0493a691,2021-12-12 00:14:52,Tim van der Meij,"Fix some dependency vulnerabilities reported by `npm audit`

This is done automatically using the `npm audit fix` command.",False
d3d8141372cffbd6fe64485dcade896aaed64626,2021-12-12 00:14:48,Tim van der Meij,Update packages to the most recent versions,False
b1d3e7f1217b2b7281728b1f3d48199003a9ae83,2021-12-11 22:56:13,Jonas Jenwald,"Support disabling of form editing when `pdfjs.enablePermissions` is set (issue 14356)

For encrypted PDF documents without the required permissions set, this patch adds support for disabling of form editing. However, please note that it also requires that the `pdfjs.enablePermissions` preference is set to `true`[1] (since PDF document permissions could be seen as user hostile).

Based on https://www.adobe.com/content/dam/acom/en/devnet/pdf/pdfs/PDF32000_2008.pdf#G6.1942134, this condition hopefully makes sense.

---
[1] Either manually with `about:config`, or using e.g. a [Group Policy](https://github.com/mozilla/policy-templates).",False
b03281de1819e2e45e9e5472fc4cc43a7a6a22d9,2021-12-11 21:43:41,Jonas Jenwald,"Move the permissions handling into the `BaseViewer` (PR 11789 follow-up)

Besides making the permissions-functionality directly available in the viewer-components, these changes are also necessary for the next patch.",False
d856ed93951b6674d8385167406bc0c36fa41f28,2021-12-11 20:28:00,Jonas Jenwald,"Merge pull request #14361 from timvandermeij/nodejs

Upgrade Node.js to version 16 in the CI workflow",True
4269148d3d7a4fde3012b4a146618a4ca8c368d6,2021-12-11 20:20:23,Tim van der Meij,"Upgrade Node.js to version 16 in the CI workflow

Version 14 that we used before is now in maintenance mode, so we should
upgrade to the most recent LTS version.

Moreover, use the most recent `setup-node` workflow version and syntax;
see https://github.com/actions/setup-node#usage.",False
3a8318aa1c338898961fab19d939f0d20c1606ef,2021-12-11 17:58:35,Tim van der Meij,"Merge pull request #14359 from Snuffleupagus/PAUSE_EAGER_PAGE_INIT

Avoid overloading the worker-thread during eager page initialization in the viewer (PR 11263 follow-up)",True
a6dd39b6456e22efaa109f58e3401606928be846,2021-12-11 17:37:54,Tim van der Meij,"Merge pull request #14358 from Snuffleupagus/checkLastPage-improvements

Improve `PDFDocument.checkLastPage`/`Catalog.getAllPageDicts` for documents with corrupt XRef tables (PR 14311, 14335 follow-up)",True
70809a80ce94af86880573eef9e80bcbefbbf1f3,2021-12-11 17:30:11,Tim van der Meij,"Merge pull request #14355 from Snuffleupagus/api-page-caches-Map

Change `WorkerTransport.{pageCache, pagePromises}` from an Array to a Map",True
2b8a5dce707283726afc44d8a9d27426351ca086,2021-12-11 17:24:39,Tim van der Meij,"Merge pull request #14354 from Snuffleupagus/improve-pageKidsCountCache-further

Further improve caching in `Catalog.getPageDict`, for `disableAutoFetch` mode (PR 8207 follow-up)",True
90472e5130378cd443c05c5a8cbaaeff5b82b843,2021-12-11 01:14:06,Jonas Jenwald,"Avoid overloading the worker-thread during eager page initialization in the viewer (PR 11263 follow-up)

This patch is essentially *another* continuation of PR 11263, which tried to improve loading/initialization performance of *very* large/long documents.

For most documents, unless they're *very* long, we'll eagerly initialize all of the pages in the viewer. For shorter documents having all pages loaded/initialized early provides overall better performance/UX in the viewer, however there's cases where it can instead *hurt* performance.
For documents with a couple of thousand pages[1], the parsing and pre-rendering of the *second* page of the document can be delayed (quite a bit). The reason for this is that we trigger `PDFDocumentProxy.getPage` for *all pages* early during the viewer initialization, which causes the worker-thread to be swamped with handling (potentially) thousands of `getPage`-calls and leaving very little time for other parsing (such as e.g. of operatorLists).

To address this situation, this patch thus proposes temporarily ""pausing"" the eager `PDFDocumentProxy.getPage`-calls once a threshold has been reached, to give the worker-thread a change to handle other requests.[2]

Obviously this may *slightly* delay the ""pagesloaded"" event in longer documents, but considering that it's already the result of asynchronous parsing that'll hopefully not be seen as a blocker for these changes.[3]

---
[1] A particularly problematic example is https://github.com/mozilla/pdf.js/files/876321/kjv.pdf (16 MB large), which is a document with 2236 pages and a /Pages-tree that's only *one* level deep.

[2] Please note that I initially considered simply chaining the `PDFDocumentProxy.getPage`-calls, however that'd slowed things down for all documents which didn't seem appropriate.

[3] This patch will *hopefully* also make it possible to re-visit PR 11312, since it seems that changing `Catalog.getPageDict` to an `async` method wasn't the problem in itself. Rather it appears that it leads to slightly different timings, thus exacerbating the already existing issues with the worker-thread being overloaded by `getPage`-calls.
Having recently worked with that method, there's a couple of (very old) issues that I'd also like to address and having `Catalog.getPageDict` be `async` would simplify things a great deal.",False
70ac6b1694db8f8596dd3b22c97b6412f64955ad,2021-12-10 19:52:36,Jonas Jenwald,"Update `Catalog.getAllPageDicts` to always propagate the actual Errors (PR 14335 follow-up)

Rather than ""swallowing"" the actual Errors, when data fetching fails, ensure that they're always being propagated as intended to the call-site instead.
Note that we purposely handle `XRefEntryException` specially, to make it possible to fallback to indexing all XRef objects.",False
47f9eef584390b1a5e7a5e923fbfe425e9560e35,2021-12-10 16:15:09,Jonas Jenwald,"Improve `PDFDocument.checkLastPage` for documents with corrupt XRef tables (PR 14311, 14335 follow-up)

Rather than trying, and failing, to fetch the entire /Pages-tree for documents with corrupt XRef tables, let's fallback to indexing all objects *before* trying to invoke the `Catalog.getAllPageDicts` method.",False
f39536a30bef02cee2a6dcb4298a29d47d5b4734,2021-12-09 20:00:10,Jonas Jenwald,"Change `WorkerTransport.pagePromises` from an Array to a Map

Given that not all pages necessarily are being accessed, or that the pages may be accessed out of order, using a `Map` seems like a more appropriate data-structure here.

Finally, also changes the `pagePromises` to a *private* property since it's not supposed to be accessed from the ""outside"".",False
c5525dcb69d9a1e6aec90ca58fba6df98233e72e,2021-12-09 19:59:47,Jonas Jenwald,"Change `WorkerTransport.pageCache` from an Array to a Map

Given that not all pages necessarily are being accessed, or that the pages may be accessed out of order, using a `Map` seems like a more appropriate data-structure here.
For one thing, this simplifies iteration since we no longer have to worry about/check if `pageCache`-entries are undefined (which will happen for *sparse* `Array`s).

Of particular note is that we're no longer attempting to ""null"" the `pageCache`-entry from within the `PDFPageProxy._destroy`-method. Given that *synchronous* JavaScript will always run to completion[1] and that we're looping through all pages in `WorkerTransport.destroy` and immediately clear the cache afterwards, that code did/does not really make a lot of sense (as far as I can tell).

Finally, also changes the `pageCache` to a *private* property since it's not supposed to be accessed from the ""outside"".

---
[1] Unless there are errors, of course.",False
8a05db230ec1a465bc6a5a8a459cf2214cc8e823,2021-12-09 17:24:49,Jonas Jenwald,"Further improve caching in `Catalog.getPageDict`, for `disableAutoFetch` mode (PR 8207 follow-up)

PR 8207 added caching to improve the performance of `Catalog.getPageDict`, by not having to repeatedly fetch the same data and also reducing the asynchronicity of that method.
However, because of *another* oversight on my part, we're only caching /Page references once we've found the correct page. As long as all pages are loaded *in order* this doesn't really matter (happens by default in the viewer), but when `disableAutoFetch` is used the pages may be fetched in a more random order (this patch reduces the asynchronicity of `Catalog.getPageDict` slightly in that case).",False
97dc048e56f3026d82e59d013914a1151a57d3ee,2021-12-09 00:31:21,Tim van der Meij,"Merge pull request #14350 from Snuffleupagus/ccitt-infinite-loop

Prevent an infinite loop when parsing corrupt /CCITTFaxDecode data (issue 14305)",True
b17898561533de979d358ab0b4a04d3ce6c4a40f,2021-12-09 00:28:46,Tim van der Meij,"Merge pull request #14347 from Snuffleupagus/improve-pageKidsCountCache

Improve caching in `Catalog.getPageDict` (PR 8207 follow-up)",True
e8562173b84ea2caa6b96c65e61bb8a1fb4c9f4e,2021-12-07 18:27:25,Jonas Jenwald,"Prevent an infinite loop when parsing corrupt /CCITTFaxDecode data (issue 14305)

Fixes one of the documents in issue 14305.",False
c42b19f26ab412ba1fd91c476925bd436a6cae6b,2021-12-06 20:47:28,Jonas Jenwald,"Merge pull request #14348 from Snuffleupagus/issue-8022-reftest

Add a (linked) test-case for issue 8022",True
909f012fb82611f48350ed71c2c36ea4e947c1b5,2021-12-06 19:57:40,Jonas Jenwald,"Add a (linked) test-case for issue 8022

Given that [bug 1336591](https://bugzilla.mozilla.org/show_bug.cgi?id=1336591) was just closed as fixed, thus fixing issue 8022 in Firefox, let's add a test-case to enable us to catch any future regressions either in PDF.js or in browsers themselves.",False
5f295ba280aecaaeb4408fe1b15e685e5035eb45,2021-12-06 16:19:31,Jonas Jenwald,"Improve caching in `Catalog.getPageDict` (PR 8207 follow-up)

PR 8207 added caching to improve the performance of `Catalog.getPageDict`, by not having to repeatedly fetch the same data and also reducing the asynchronicity of that method.
However, because of annoying off-by-one errors[1] the caching became less efficient than it could/should be.[2] Note here that the /Pages-tree is zero-indexed, and that e.g. `pageIndex = 5` thus correspond to the *sixth* page of the document.

---
[1] In particular the `currentPageIndex + count < pageIndex` part.

[2] For example, even when loading a relatively small/simple document such as `tracemonkey.pdf` in the viewer, the number of `xref.fetchAsync(currentNode)` calls are reduced from `56` to `44` with this patch.",False
034b870c4a0923947ee51e4da2f7ae884bde0192,2021-12-06 04:22:46,Jonas Jenwald,"Merge pull request #14344 from timvandermeij/test-driver

Modernize the test driver",True
911a9d34b16d31ab5b1c0ba740000886251ce503,2021-12-05 23:59:39,Tim van der Meij,"Fix code duplication in the rasterization logic in `test/driver.js`

Now that the rasterization logic is encapsulated in a class, we can
easily move the container creation into a separate static method.",False
03506f25c0ca8fc81e36bfe584e9359e566b82db,2021-12-05 23:58:51,Tim van der Meij,"Move the rasterization logic into one single class

This refactoring ensures that we can get rid of the closures and
encapsulate the logic in a nicer way with e.g., getters for the style
promises.",False
33dc0628a01dc2f81a7c41140569c77d94c0d220,2021-12-05 20:11:36,Tim van der Meij,"Enable the `no-var` linting rule in `test/driver.js`

This is done automatically with the `gulp lint --fix` command with the
only exception of the `annotationLayerContext` variable.",False
5fd4276dcf7d5d9acc3afd91f67bb0de9fe3e81f,2021-12-05 18:41:09,Tim van der Meij,"Use async/await in the rasterization classes in `test/driver.js`

This is achieved by letting the `writeSVG` function return a promise so
we don't need callback passing anymore.",False
13786ef80602419230f06f8b0f6399d81a0b0a5e,2021-12-05 18:41:08,Tim van der Meij,Use arrow functions instead of `self` variables in `test/driver.js`,False
1d1f713bfc793baa8d28e9d48626a18fbe8b9939,2021-12-05 18:19:04,Tim van der Meij,"Inline `loadStyles` calls in the rasterization classes in `test/driver.js`

The wrapper functions in this case only really added indirection, so
this commit simplifies the code a bit.",False
a58700b0dca082400036deff0b09bbd43a6c4c2a,2021-12-05 18:13:02,Tim van der Meij,Convert the `Driver` class to ES6 syntax in `test/driver.js`,False
3264d72e602d6b1fc3e7076d74be32cd96ed45c4,2021-12-05 18:10:24,Tim van der Meij,"Merge pull request #14345 from Snuffleupagus/viewer-pagesPromise-reject

Ensure that the viewer handles `BaseViewer` initialization failures",True
e027178356e1113174527afa2cbca86ad92029b8,2021-12-05 15:34:17,Jonas Jenwald,"Tweak the ""pagesloaded"" event handler in `PDFOutlineViewer`

These changes improves the consistency ever so slightly in the `PDFOutlineViewer._dispatchEvent` method, by making sure that we can tell the following two cases apart:
 - The ""pagesloaded"" event has *not yet* been fired.
 - The ""pagesloaded"" event has been fired, but no pages were available.",False
9de30c4ff01a3bbd40d74a86a64d90ffc1719ed0,2021-12-05 15:25:47,Jonas Jenwald,"Ensure that the viewer handles `BaseViewer` initialization failures

*This patch can be tested e.g. with the `poppler-85140-0.pdf` document from the test-suite.*

For some sufficiently corrupt documents the `getDocument` call will succeed, but fetching even the very first page fails. Currently we only print error messages (in the console) from the `{BaseViewer, PDFThumbnailViewer}.setDocument` methods, but don't actually provide these errors to allow the viewer to handle them properly.
In practice this means that the GENERIC viewer won't display the `errorWrapper`, and in the MOZCENTRAL viewer the *browser* loading indicator is never hidden (since we never unblock the ""load"" event).",False
dc455c836e80799fccd8f1741eb8f62e9ec01c37,2021-12-04 17:56:47,Tim van der Meij,"Merge pull request #14339 from Snuffleupagus/issue-8019-reftest

Add a (linked) test-case for issue 8019",True
335c4c8a43dd5b05225cf761da3ce885f166e3a0,2021-12-04 17:53:40,Tim van der Meij,"Merge pull request #14338 from Snuffleupagus/XRef-more-Pages-validation

[api-minor] Clear all caches in `XRef.indexObjects`, and improve /Root dictionary validation in `XRef.parse` (issue 14303)",True
3117985c5557e85e79dffa8fe7c66cb964bd6c47,2021-12-04 17:49:37,Tim van der Meij,"Merge pull request #14340 from Snuffleupagus/Metadata-fetch-error

Handle errors when fetching the raw /Metadata (issue 14305)",True
bceed26e674acd4ad3f318c2e74a85f9ef1063f6,2021-12-04 17:47:14,Tim van der Meij,"Merge pull request #14341 from Snuffleupagus/shadow-prop-assert

Ensure that the `shadow` helper function is passed a valid property (PR 14152 follow-up)",True
d9fac3459609a807be6506fb3441b5da4b154d14,2021-12-04 14:37:21,Jonas Jenwald,"Ensure that the `shadow` helper function is passed a valid property (PR 14152 follow-up)

Trying to shadow a non-existent property is always an implementation mistake, since it leads to the `shadow`-call not having any effect.

In PR 14152 I overlooked the fact that it's fairly easy to enforce this during development/testing, since that can help catch e.g. simple spelling bugs.",False
40291d1943d79ea4bbe54e3990c74108c786eb8a,2021-12-04 14:11:42,Jonas Jenwald,"Handle errors when fetching the raw /Metadata (issue 14305)

Currently the `Catalog.metadata` getter only handles errors during parsing, however in a *corrupt* PDF document fetching of the raw /Metadata can obviously fail as well.
Without this patch the `PDFDocumentProxy.getMetadata` method, in the API, can thus fail which it *never* should and this will cause the viewer to not initialize all state as expected.

Fixes one of the documents in issue 14305.",False
ca82e1832f77eae54d340b90f07a574f07795e88,2021-12-04 13:26:04,Jonas Jenwald,"Add a (linked) test-case for issue 8019

Given that [bug 1336572](https://bugzilla.mozilla.org/show_bug.cgi?id=1336572) was just closed as fixed, thus fixing issue 8019 in Firefox[1], let's add a test-case to enable us to catch any future regressions either in PDF.js or in browsers themselves.

---
[1] It also seems to be working in Google Chrome, although I'm having a slightly difficult time deciphering *exactly* what configurations were affected when looking through issue 8019.",False
ad3a271fc40c71b1a1c8ac2ca4c09bc31e4a5df3,2021-12-03 16:27:38,Jonas Jenwald,"[api-minor] Clear all caches in `XRef.indexObjects`, and improve /Root dictionary validation in `XRef.parse` (issue 14303)

*This patch improves handling of a couple of PDF documents from issue 14303.*

 - Update `XRef.indexObjects` to actually clear *all* XRef-caches. Invalid XRef tables *usually* cause issues early enough during parsing that we've not populated the XRef-cache, however to prevent any issues we obviously need to clear that one as well.

 - Improve the /Root dictionary validation in `XRef.parse` (PR 9827 follow-up). In addition to checking that a /Pages entry exists, we'll now also check that it can be successfully fetched *and* that it's of the correct type. There's really no point trying to use a /Root dictionary that e.g. `Catalog.toplevelPagesDict` will reject, and this way we'll be able to fallback to indexing the objects in corrupt documents.

 - Throw an `InvalidPDFException`, rather than a general `FormatError`, in `XRef.parse` when no usable /Root dictionary could be found. That really seems more appropriate overall, since all attempts at parsing/recovery have failed. (This part of the patch is API-observable, hence the tag.)

With these changes, two existing test-cases are improved and the unit-tests are updated/re-factored to highlight that. In particular `GHOSTSCRIPT-698804-1-fuzzed.pdf` will now both load and ""render"" correctly, whereas `poppler-395-0-fuzzed.pdf` will now fail immediately upon loading (rather than *appearing* to work).",False
e9e4b913c08fdae97ed53563dae6a07d46e58fb0,2021-12-03 00:31:13,Tim van der Meij,"Merge pull request #14324 from Snuffleupagus/force-PAGE-scrolling

Enforce PAGE-scrolling for *very* large/long documents (bug 1588435, PR 11263 follow-up)",True
4c145fc9c48e970e3d134a53656a7ba2fffd1a62,2021-12-03 00:24:30,Tim van der Meij,"Merge pull request #14335 from Snuffleupagus/Catalog-getAllPageDicts

[Regression] Eagerly fetch/parse the entire /Pages-tree in corrupt documents (issue 14303, PR 14311 follow-up)",True
aee4b7c73f69b673d5eaf173c712b52aed69a56a,2021-12-03 00:14:17,Tim van der Meij,"Merge pull request #14328 from Snuffleupagus/node-examples-page-cleanup

Update (primarily) the Node.js examples to release page resources",True
1fac6371d313224155bf9d4400e3853af5cd4772,2021-12-02 19:01:04,Jonas Jenwald,"[Regression] Eagerly fetch/parse the entire /Pages-tree in corrupt documents (issue 14303, PR 14311 follow-up)

*Please note:* This is similar to the method that existed prior to PR 3848, but the new method will *only* be used as a fallback when parsing of corrupt PDF documents.

The implementation in PR 14311 unfortunately turned out to be *way* too simplistic, as evident by the recently added test-files in issue 14303, since it may *cause* infinite loops in `PDFDocument.checkLastPage` for some corrupt PDF documents.[1]
To avoid this, the easiest solution that I could come up with was to fallback to eagerly parsing the *entire* /Pages-tree when the /Count-entry validation fails during document initialization.

Fixes *at least* two of the issues listed in issue 14303, namely the `poppler-395-0.pdf...` and `GHOSTSCRIPT-698804-1.pdf...` documents.

---
[1] The whole point of PR 14311 was obviously to *get rid of* infinte loops during document initialization, not to introduce any more of those.",False
f61b74e38ed5a5fe56da2d99cd0be65749845ec7,2021-12-02 17:46:26,Jonas Jenwald,"Merge pull request #14325 from Snuffleupagus/getPageDict-rm-skipCount

Remove the unused `skipCount` parameter from `Catalog.getPageDict` (PR 14311 follow-up)",True
8ea740c8001739cb19ad23788734b276fe644fdb,2021-12-02 16:21:40,Jonas Jenwald,"Slightly extend the ""creates pdf doc from PDF file with bad XRef table"" unit-test (PR 14304 follow-up)

Given that we're able to ""render"" this document, let's extend the unit-test to actually check that we're able to obtain the operatorList; although given the overall issues in the document it'll be empty.",False
e045cd4520da512b53bb94e6d7376d7566cc9387,2021-12-02 16:21:38,Jonas Jenwald,"Remove the unused `skipCount` parameter from `Catalog.getPageDict` (PR 14311 follow-up)

This was added in PR 14311, but given that I completely missed to update the `PDFDocument.getPage` signature accordingly it's completely unused.
Given that things work just as fine as-is, let's simply remove that optional parameter for now; sorry about the churn here!",False
d9e0de8515a2529959310ebd0e3b651e98ec7fb0,2021-12-02 16:19:11,Jonas Jenwald,"Merge pull request #14333 from Snuffleupagus/Pages-tree-corruption

Handle errors correctly when data lookup fails during /Pages-tree parsing (issue 14303)",True
63be23f05b8f1f13ec2dfd6136c1df5a171b4e02,2021-12-02 15:24:40,Jonas Jenwald,"Handle errors correctly when data lookup fails during /Pages-tree parsing (issue 14303)

This only applies to severely corrupt documents, where it's possible that the `Parser` throws when we try to access e.g. a /Kids-entry in the /Pages-tree.

Fixes two of the issues listed in issue 14303, namely the `poppler-742-0.pdf...` and `poppler-937-0.pdf...` documents.",False
487a7ddc7d6d5a69b48ebf92c27c894dcad53651,2021-11-30 17:41:50,Jonas Jenwald,"Update (primarily) the Node.js examples to release page resources

Given that Node.js doesn't support Workers, general PDF.js performance will be worse when compared to browsers. In an attempt to improve at least memory usage a little bit, update the Node.js examples to release page resources once parsing is done for that page.",False
6dfe4a91409bf81fae32dc7b48d97845af67c41e,2021-11-29 18:24:24,Jonas Jenwald,"Enforce PAGE-scrolling for *very* large/long documents (bug 1588435, PR 11263 follow-up)

This patch is essentially a continuation of PR 11263, which tried to improve loading/initialization performance of *very* large/long documents.

Note that browsers, in general, don't handle a huge amount of DOM-elements very well, with really poor (e.g. sluggish scrolling) performance once the number gets ""large"". Furthermore, at least in Firefox, it seems that DOM-elements towards the bottom of a HTML-page can effectively be ignored; for the PDF.js viewer that means that pages at the end of the document can become impossible to access.

Hence, in order to improve things for these *very* large/long documents, this patch will now enforce usage of the (recently added) PAGE-scrolling mode for these documents. As implemented, this will only happen once the number of pages *exceed* 15000 (which is hopefully rare in practice).
While this might feel a bit jarring to users being *forced* to use PAGE-scrolling, it seems all things considered like a better idea to ensure that the entire document actually remains accessible and with (hopefully) more acceptable performance.

Fixes [bug 1588435](https://bugzilla.mozilla.org/show_bug.cgi?id=1588435), to the extent that doing so is possible since the document contains 25560 pages (and is 197 MB large).",False
f15eb63ed54ad5a0a89e7b38f1bbe394dcef8158,2021-11-29 17:43:17,Jonas Jenwald,"Remove the `PDFSinglePageViewer`-specific code from `web/secondary_toolbar.js` (PR 9877 follow-up)

This was added on the assumption that the viewer would (eventually) start using the `PDFSinglePageViewer` for e.g. PAGE-scrolling mode and PresentationMode. However, having both a `PDFViewer` and a `PDFSinglePageViewer` side-by-side in the viewer would've been tricky to implement well, which is why PR 14112 implemented PAGE-scrolling for the general `BaseViewer` instead.

Given that the default viewer is no longer (potentially) going to use `PDFSinglePageViewer`, there's code in the `SecondaryToolbar` (and related CSS rules) which is now unnecessary.",False
700eaecddd25d0a612fdb52dbb713deb983df84c,2021-11-29 16:08:24,Jonas Jenwald,"Merge pull request #14321 from timvandermeij/puppeteer

Upgrade to Puppeteer 12",True
d5b5b665e4de1337a02550cd7f4164bcf4a0c9ea,2021-11-28 23:54:11,Tim van der Meij,Upgrade to Puppeteer 12,False
96bb3c621773dbb8b12d5cebe3040b676977cf4a,2021-11-28 23:53:25,Tim van der Meij,"Convert `package-lock.json` to lock file version 2

Since NPM 7, which is over a year old now since it released in October
2020, NPM automatically transforms lock files from version 1 to version
2. In the NPM 7 release notes they reported:

""One change to take note of is the new lockfile format, which is
backwards compatible with npm 6 users. The lockfile v2 unlocks the
ability to do deterministic and reproducible builds to produce a
package tree.""

Not only is this change backwards compatible (so older versions of NPM
will still be able to install everything as expected), reproducability
is also a nice property to have and modern NPM versions will otherwise
constantly do the conversion anyway, causing contributors to explicitly
have to revert the change. Therefore, I believe we should do this now
since it doesn't break backwards compatibility for consumers of this
file. It only means that producers of this file (i.e., us contributors)
need to use at least NPM 7 or higher (as of writing NPM 8 is even
available). According to https://nodejs.org/en/download/releases/ this
means contributors should at least run Node.js 15.0.0, while 17.1.0 is
the most recent as of writing, so to me that sounds reasonable to ask.",False
0d2cdff6c57916f04209a13e3f216c7a9b2e9095,2021-11-28 23:28:22,Tim van der Meij,"Fix browser page navigation for Puppeteer 11+ in `test/test.js`

In Puppeteer 11 we noticed that Firefox doesn't shut down once the tests
are done anymore. I tracked this down to the `page.goto` call, in
`startBrowser`, never resolving anymore. I can only assume that
something changed in Puppeteer, possibly in combination with recent
Firefox Nightly versions, that caused this, but haven't been able to
fully track it down.

However, I did find that the problem is that the `load` event no longer
triggers, so fortunately we can fix the problem by explicitly waiting
for the `domcontentloaded` event instead. In general this change might
even be better since we now wait until the test framework is fully
loaded before we continue. Note that this also still works for the
current Puppeteer version.

I did find two upstream references that appear to track this issue, both
on the Puppeteer side and on the Firefox side, making me further suspect
that the issue is partly on both sides:

- https://github.com/puppeteer/puppeteer/issues/5806
- https://bugzilla.mozilla.org/show_bug.cgi?id=1706353",False
60ed3cd297c4045b90f4114a74e5baa4ef1c5056,2021-11-28 23:22:51,Tim van der Meij,"Fix compatibility with Node.js 17 in `test/test.js`

Node.js 17, which as of writing is the most recent version, contains a
breaking change in its DNS resolver, causing Firefox not to start
anymore in our test framework. The inline comment together with the
following resources provide more background:

- https://github.com/nodejs/node/issues/40702
- https://github.com/nodejs/node/pull/39987
- https://github.com/cyrus-and/chrome-remote-interface/issues/467
- https://github.com/nodejs/node/blob/master/doc/changelogs/CHANGELOG_V17.md#other-notable-changes
- https://github.com/DeviceFarmer/adbkit/issues/209
- https://nodejs.org/api/dns.html#dnssetdefaultresultorderorder

This commit ensures that versions both older and newer than Node.js 17
work as expected. This is mainly necessary since the bots as of writing
run Node.js 14.17.0 which is from before this API got introduced and for
example Node.js 12 LTS is only end-of-life in April 2022, so we have to
keep support for those older versions unfortunately.",False
5309133a9d9942234fbb4c4df5b7dc710666ff89,2021-11-28 22:38:08,Tim van der Meij,"Fix browser error logging in `test/test.js`

If a browser cannot be started, we currently get the following log:
`Error while starting firefox: [object Object]`. This is simply an
oversight from the initial Puppeteer integration work since we never got
into this code path before. With this fix the error log becomes more
useful: `Error while starting firefox: connect ECONNREFUSED ::1:45387`",False
c14552874b7464b95adc27a8060a5f5f0b60470b,2021-11-28 18:37:02,Tim van der Meij,"Merge pull request #14312 from Snuffleupagus/XRef-circular-reference

Prevent circular references in XRef tables from hanging the worker-thread (issue 14303)",True
7613bb5522bd52a864045825e5a00aafc71801e0,2021-11-28 18:28:53,Tim van der Meij,"Merge pull request #14320 from Snuffleupagus/update-packages

Update packages and translations",True
d62f847db216610a50318a7c6eaf4f65907df0a3,2021-11-28 17:06:16,Jonas Jenwald,"Update Stylelint to version 14 (along with related packages)

Based on https://github.com/stylelint/stylelint/blob/14.0.0/docs/migration-guide/to-14.md none of the changes look directly relevant for us.",False
37bed4ea4580585b7972067ed59ad2a0c64d412c,2021-11-28 15:44:03,Jonas Jenwald,Update l10n files,False
fdf3f039859f5a5e2e706a4ab74b610dfebb929a,2021-11-28 15:44:02,Jonas Jenwald,"Update the `eslint-plugin-unicorn` package to the latest version

Please see https://github.com/sindresorhus/eslint-plugin-unicorn/releases/tag/v39.0.0",False
0c301dfa8b5bae7027441e400513d7e1d07cc424,2021-11-28 15:44:02,Jonas Jenwald,Update the `dommatrix` package to the latest version,False
cfc55b044e44fc2ca609d2dbeb4fc8a51a94f545,2021-11-28 15:43:58,Jonas Jenwald,Update npm packages,False
a807ffe907a417f27a26e93a0348fe6465aacad3,2021-11-28 04:20:26,Jonas Jenwald,"Prevent circular references in XRef tables from hanging the worker-thread (issue 14303)

*Please note:* While this patch on its own is sufficient to prevent the worker-thread from hanging, however in combination with PR 14311 these PDF documents will both load *and* render correctly.

Rather than focusing on the particular structure of these PDF documents, it seemed (at least to me) to make sense to try and prevent all circular references when fetching/looking-up data using the XRef table.
To avoid a solution that required tracking the references manually everywhere, the implementation settled on here instead handles that internally in the `XRef.fetch`-method. This should work, since that method *and* the `Parser`/`Lexer`-implementations are completely synchronous.

Note also that the existing `XRef`-caching, used for all data-types *except* Streams, should hopefully help to lessen the performance impact of these changes.
One *potential* problem with these changes could be certain *browser* exceptions, since those are generally not catchable in JavaScript code, however those would most likely ""stop"" worker-thread parsing anyway (at least I hope so).

Finally, note that I settled on returning dummy-data rather than throwing an exception. This was done to allow parsing, for the rest of the document, to continue such that *one* bad reference doesn't prevent an entire document from loading.

Fixes two of the issues listed in issue 14303, namely the `poppler-91414-0.zip-2.gz-53.pdf` and `poppler-91414-0.zip-2.gz-54.pdf` documents.",False
a669fce762818c29b78d0a3665e207bf31801d88,2021-11-28 04:19:17,Jonas Jenwald,"Inline the `isDict`, `isRef`, and `isStream` checks in the `src/core/xref.js` file",False
680e0efb9de1c9e347edf3c72a82a0b0aa9b05f2,2021-11-28 04:19:17,Jonas Jenwald,Use Array-destructuring in the `XRef.readXRefStream`-method,False
a2a5376adff2a608fcf3fa9c08d3e951cf1b91ae,2021-11-28 04:17:05,Jonas Jenwald,"Merge pull request #14311 from Snuffleupagus/validate-Pages-Count

[api-minor] Validate the /Pages-tree /Count entry during document initialization (issue 14303)",True
d0c4bbd8287a58856c04b0e1201f64ddccf57199,2021-11-28 02:27:35,Jonas Jenwald,"[api-minor] Validate the /Pages-tree /Count entry during document initialization (issue 14303)

*This patch basically extends the approach from PR 10392, by also checking the last page.*

Currently, in e.g. the `Catalog.numPages`-getter, we're simply assuming that if the /Pages-tree has an *integer* /Count entry it must also be correct/valid.
As can be seen in the referenced PDF documents, that entry may be completely bogus which causes general parsing to breaking down elsewhere in the worker-thread (and hanging the browser).

Rather than hoping that the /Count entry is correct, similar to all other data found in PDF documents, we obviously need to validate it. This turns out to be a little less straightforward than one would like, since the only way to do this (as far as I know) is to parse the *entire* /Pages-tree and essentially counting the pages.
To avoid doing that for all documents, this patch tries to take a short-cut by checking if the last page (based on the /Count entry) can be successfully fetched. If so, we assume that the /Count entry is correct and use it as-is, otherwise we'll iterate through (potentially) the *entire* /Pages-tree to determine the number of pages.

Unfortunately these changes will have a number of *somewhat* negative side-effects, please see a possibly incomplete list below, however I cannot see a better way to address this bug.
 - This will slow down initial loading/rendering of all documents, at least by some amount, since we now need to fetch/parse more of the /Pages-tree in order to be able to access the *last* page of the PDF documents.
 - For poorly generated PDF documents, where the entire /Pages-tree only has *one* level, we'll unfortunately need to fetch/parse the *entire* /Pages-tree to get to the last page. While there's a cache to help reduce repeated data lookups, this will affect initial loading/rendering of *some* long PDF documents,
 - This will affect the `disableAutoFetch = true` mode negatively, since we now need to fetch/parse more data during document initialization. While the `disableAutoFetch = true` mode should still be helpful in larger/longer PDF documents, for smaller ones the effect/usefulness may unfortunately be lost.

As one *small* additional bonus, we should now also be able to support opening PDF documents where the /Pages-tree /Count entry is completely invalid (e.g. contains a non-integer value).

Fixes two of the issues listed in issue 14303, namely the `poppler-67295-0.pdf` and `poppler-85140-0.pdf` documents.",False
9a1e27efc598266dc2bc9221a3e2662653b9062b,2021-11-28 01:28:23,Tim van der Meij,"Merge pull request #14313 from Snuffleupagus/PDFDocument_pagePromises-map

Change the `_pagePromises` cache, in the worker, from an Array to a Map",True
bbd8b5ce9fbd02fd90fd3fb5125766f834ae107b,2021-11-28 01:02:32,calixteman,"Merge pull request #14319 from calixteman/xfa_arc

XFA - Draw arcs correctly",True
31e13515f5d00f6d578623cec5ad4515bd19142e,2021-11-28 00:00:12,Calixte Denizet,"XFA - Draw arcs correctly
- it aims to fix #14315;
- take into account the startAngle to compute the coordinates of the final point.",False
b11091c0f9575adecbc021ca25f2debb59160f54,2021-11-27 23:19:52,Jonas Jenwald,"Merge pull request #14318 from calixteman/14317

Handle sub/super-scripts in rich text",True
cfdaa5735330cda74df01a0a95a64f5428270771,2021-11-27 20:36:09,Calixte Denizet,"Handle sub/super-scripts in rich text
 - it aims to fix #14317;
 - change the fontSize and the verticalAlign properties according to the position of the text.",False
e439f4d62027f718a71969f6495af530e9bb5446,2021-11-27 01:17:45,Jonas Jenwald,"Merge pull request #14314 from Snuffleupagus/XFA-viewer-refs-cache-fix

[Regression] Prevent errors, during loading, in the viewer for XFA-documents (PR 14295 follow-up)",True
8fa5fcfe72855c0f79ef469f09fa8b2f84208130,2021-11-27 00:51:12,Jonas Jenwald,"[Regression] Prevent errors, during loading, in the viewer for XFA-documents (PR 14295 follow-up)

In the second commit in PR 14295, I forgot that the pages in XFA-documents don't have references (like in regular PDF documents); sorry about that!",False
4c56214ab48dc2b3b379c88ffd3952961526152a,2021-11-27 00:27:47,Jonas Jenwald,"Convert `PDFDocument._getLinearizationPage` to an async method

This, ever so slightly, simplifies the code and reduces overall indentation.",False
080996ac6860ff7ba9718a01dad0c277585ff3dd,2021-11-27 00:23:57,Jonas Jenwald,"Change the `_pagePromises` cache, in the worker, from an Array to a Map

Given that not all pages necessarily are being accessed, or that the pages may be accessed out of order, using a `Map` seems like a more appropriate data-structure here.
Furthermore, this patch also adds (currently missing) caching for XFA-documents. Loading a couple of such documents in the viewer, with logging added, shows that we're currently re-creating `Page`-instances unnecessarily for XFA-documents.",False
2e2d049a9c52791c94eea220bc9aa836a59a932f,2021-11-26 00:27:40,Jonas Jenwald,"Merge pull request #14310 from Snuffleupagus/XRef-bogus-byteWidths

Abort parsing when the XRef /W-array contain bogus entries (issue 14303)",True
ca8d2bdce4252b72bec83ef1f00a467510f5a94b,2021-11-25 23:05:08,Jonas Jenwald,"Abort parsing when the XRef /W-array contain bogus entries (issue 14303)

For this particular PDF document, we have `/W [1 2 166666666666666666666666666]` which obviously makes no sense.

While this patch makes no attempt at actually validating the entries in the /W-array, we'll now simply abort all processing when the end of the PDF document has been reached (thus preventing hanging the browser).
Please note that this patch doesn't enable the PDF document to be loaded/rendered, but at least it fails ""correctly"" now.

Fixes one of the issues listed in issue 14303, namely the `REDHAT-1531897-0.pdf`document.",False
a2c380ccb3fb69ebe436606f3816f7d2851d94d9,2021-11-25 02:09:28,Tim van der Meij,"Merge pull request #14298 from Snuffleupagus/issue-10906

Center pages vertically in PresentationMode (issue 10906)",True
973932321e015e8ca474c9d74dabcd5943d933ac,2021-11-25 01:58:24,Tim van der Meij,"Merge pull request #14304 from Snuffleupagus/huge-XRef-entry

Ensure that `ChunkedStream` won't attempt to request data *beyond* the document size (issue 14303)",True
ae4f1ae3e757a31dde9f65eb36b74865f09c40f7,2021-11-24 23:49:43,Jonas Jenwald,"Ensure that `ChunkedStream` won't attempt to request data *beyond* the document size (issue 14303)

This bug was surprisingly difficult to track down, since it didn't just depend on range-requests being used but also on how quickly the document was loaded. To even be able to reproduce this locally, I had to use a very small `rangeChunkSize`-value (note the unit-test).

The cause of this bug is a bogus entry in the XRef-table, causing us to attempt to request data from *beyond* the actual document size and thus getting into an infinite loop.

Fixes *one* of the issues listed in issue 14303, namely the `PDFBOX-4352-0.pdf` document.",False
5e2aec7dd78d87b69ea78be3a441f78d156640c0,2021-11-24 19:22:31,Jonas Jenwald,"Merge pull request #14299 from SaiKiranMukka/pageviewer-to-async

Convert examples/components/pageviewer.js to await/async (issue 14127)",True
f7b1da418fa6d3d900bef829bf3ddf370e8ac742,2021-11-24 18:39:34,Jonas Jenwald,"Center pages vertically in PresentationMode (issue 10906)

*This patch can be tested e.g. with the `sizes.pdf` document in the test-suite.*

While this patch isn't necessarily the best solution, e.g. it might be possible to solve this with *only* CSS, it's what I was able to come up with to address an old issue.
The solution here re-uses the `spread`-class in PresentationMode, since that one already takes care of centering pages *vertically*, together with a dummy-page that takes up the entire height of the window.

Finally, some PresentationMode-related CSS-rules are also simplified slightly, since the changes in PR 14112 (using Page-scrolling) allows some clean-up here.",False
711fbe13763b208ee335c9fdff6c7c8ca27a293f,2021-11-24 15:22:21,Sai Kiran Mukka,Convert examples/components/pageviewer.js to await/async (issue 14127),False
70fc30d97c619de0f2fcb51e67bfdb1a46922725,2021-11-21 19:00:37,Tim van der Meij,"Merge pull request #14295 from Snuffleupagus/rm-viewer-_pagesRequests

Remove the `{BaseViewer, PDFThumbnailViewer}._pagesRequests` caches",True
58a27286476646ef9b2a4b10b63aea564d13a518,2021-11-21 16:23:19,Jonas Jenwald,"Ensure that `BaseViewer.#ensurePdfPageLoaded` updates the `PDFLinkService`-pagesRefCache if necessary

The issue that this patch fixes has existed ever since the viewer was first re-factored into components, however it only really affects the `disableAutoFetch = true` mode.

By default we're fetching all pages in `BaseViewer.setDocument`, and as part of the parsing/initialization we're also populating the `PDFLinkService`-pagesRefCache. The purpose of that cache is to make navigating to any internal destinations faster, by not having to (asynchronously) lookup the pageNumber via the API when handling the destination.
In comparison, when the `disableAutoFetch = true` mode is being used we're instead *lazily* initializing the pages in the `BaseViewer.#ensurePdfPageLoaded`-method. For some reason, that I can only assume is a simple oversight, we're not attempting to update the `PDFLinkService`-pagesRefCache in that case.",False
0ebac67a9fedbc655500f29285d1632a8bb09a70,2021-11-21 16:10:45,Jonas Jenwald,"Remove the `{BaseViewer, PDFThumbnailViewer}._pagesRequests` caches

In the `BaseViewer` this cache is mostly relevant in the `disableAutoFetch = true` mode, since the pages are being initialized *lazily* in that case.
In the `PDFThumbnailViewer` this cache is mostly used for thumbnails that are actually being rendered, as opposed to those created directly from the ""regular"" pages.

Please note that I'm not suggesting that we remove these caches because they're only used in some situations, but rather because they're for all intents and purposes actually *redundant*. In the API itself, we're already caching both the page-promises and the actual pages themselves on the `WorkerTransport`-instance.
Hence these viewer-caches aren't really necessary in practice, and adds what to me mostly seems like an unnecessary level of indirection.[1]

Given that the viewer now relies on caching in the API itself, this patch also adds a new unit-test to ensure that page-caching works (and keep working) as expected.

---
[1] In the `WorkerTransport.getPage`-method the parameter is being validated on every call, but that's hardly enough code to warrant keeping the ""duplicate"" caches in the viewer in my opinion.",False
aabd4e5092e30334bb879f889e9edeef667f558a,2021-11-20 20:12:46,Tim van der Meij,"Merge pull request #14294 from Snuffleupagus/getStats-refactor

[api-minor] Replace `PDFDocumentProxy.getStats` with a synchronous `PDFDocumentProxy.stats` getter",True
6da0944fc7e92ffe6e0dca08f8809ffcc73d3ec7,2021-11-20 16:50:55,Jonas Jenwald,"[api-minor] Replace `PDFDocumentProxy.getStats` with a synchronous `PDFDocumentProxy.stats` getter

*Please note:* These changes will primarily benefit longer documents, somewhat at the expense of e.g. one-page documents.

The existing `PDFDocumentProxy.getStats` function, which in the default viewer is called for each rendered page, requires a round-trip to the worker-thread in order to obtain the current document stats. In the default viewer, we currently make one such API-call for *every rendered* page.
This patch proposes replacing that method with a *synchronous* `PDFDocumentProxy.stats` getter instead, combined with re-factoring the worker-thread code by adding a `DocStats`-class to track Stream/Font-types and *only send* them to the main-thread *the first time* that a type is encountered.

Note that in practice most PDF documents only use a fairly limited number of Stream/Font-types, which means that in longer documents most of the `PDFDocumentProxy.getStats`-calls will return the same data.[1]
This re-factoring will obviously benefit longer document the most[2], and could actually be seen as a regression for one-page documents, since in practice there'll usually be a couple of ""DocStats"" messages sent during the parsing of the first page. However, if the user zooms/rotates the document (which causes re-rendering), note that even a one-page document would start to benefit from these changes.

Another benefit of having the data available/cached in the API is that unless the document stats change during parsing, repeated `PDFDocumentProxy.stats`-calls will return *the same identical* object.
This is something that we can easily take advantage of in the default viewer, by now *only* reporting ""documentStats"" telemetry[3] when the data actually have changed rather than once per rendered page (again beneficial in longer documents).

---
[1] Furthermore, the maximium number of `StreamType`/`FontType` are `10` respectively `12`, which means that regardless of the complexity and page count in a PDF document there'll never be more than twenty-two ""DocStats"" messages sent; see https://github.com/mozilla/pdf.js/blob/41ac3f0c07128bf34baccdcc067a108c712fd6ef/src/shared/util.js#L206-L232

[2] One example is the `pdf.pdf` document in the test-suite, where rendering all of its 1310 pages only result in a total of seven ""DocStats"" messages being sent from the worker-thread.

[3] Reporting telemetry, in Firefox, includes using `JSON.stringify` on the data and then sending an event to the `PdfStreamConverter.jsm`-code.
In that code the event is handled and `JSON.parse` is used to retrieve the data, and in the ""documentStats""-case we'll then iterate through the data to avoid double-reporting telemetry; see https://searchfox.org/mozilla-central/rev/8f4c180b87e52f3345ef8a3432d6e54bd1eb18dc/toolkit/components/pdfjs/content/PdfStreamConverter.jsm#515-549",False
41ac3f0c07128bf34baccdcc067a108c712fd6ef,2021-11-20 00:32:51,Tim van der Meij,"Merge pull request #14291 from Snuffleupagus/force-postMessageTransfers

[api-minor] Only use Workers when `postMessage` transfers are supported (PR 11123 follow-up)",True
b1e9e214bf6adb837c986b9654d4b0a155417fae,2021-11-20 00:18:59,Tim van der Meij,"Merge pull request #14229 from brendandahl/term-log

Add an easy way to log to the terminal during browser tests.",True
c6cb39ef3091fa41dce0be44af639cffeb048d61,2021-11-19 21:21:21,Brendan Dahl,"Merge pull request #14262 from Snuffleupagus/issue-14261

Include the /Lang-property, when it exists, in the StructTree-data (issue 14261)",True
6f22327e6166ccf92f8131b55591df177feef686,2021-11-19 21:17:58,Jonas Jenwald,"[api-minor] Only use Workers when `postMessage` transfers are supported (PR 11123 follow-up)

Given that all modern browsers now support `postMessage` transfers, and have for years, it no longer seems necessary for the PDF.js library to support using Workers unless the `postMessage` transfers functionality is available.
This patch is a follow-up to PR 11123, which made it impossible to *manually* disable `postMessage` transfers for performance reasons (since it increases memory usage), which hasn't caused any bug reports as far as I know.[1]

Hence we'll now only support *proper* Worker implementations, with fully working `postMessage` transfers, and fallback to using ""fake"" Workers otherwise.

---
[1] At the time of that PR we still ""supported"" IE, which is why this code was left intact.",False
052db56a2eb19027a38c52dfc84e03d47ad86df7,2021-11-19 05:08:56,Brendan Dahl,"Add an easy way to log to the terminal during browser tests.

On the main thread call `driver.log` and the message will output in the
terminal with the pdf id and the message.

I've been using this a lot when trying to find certain PDFs or logging
stats.",False
9f4a2cf5ce823ce1023a5421c1c556fc361d1ce5,2021-11-19 03:13:58,Brendan Dahl,"Merge pull request #14276 from Snuffleupagus/issue-14242-2

Only show the `loadingIcon`-spinner on visible pages (issue 14242)",True
3dccaccbb429bb2b762882ce982e88bb77794986,2021-11-18 00:47:55,Tim van der Meij,"Merge pull request #14278 from Snuffleupagus/rm-removeChild

Replace the remaining `Node.removeChild()` instances with `Element.remove()`",True
f90eebd282a94f18e490c7e950fbf40e91ff5d8b,2021-11-18 00:16:30,Tim van der Meij,"Merge pull request #14280 from Snuffleupagus/scrollMode-PAGE-spread-loop

Slightly optimize `spreadMode` toggling with `ScrollMode.PAGE` set (PR 14112 follow-up)",True
4e2c2fafc9fe28a2ddeed300fb0fad7a173a6cce,2021-11-16 22:22:50,Jonas Jenwald,"Enable the `unicorn/prefer-dom-node-remove` ESLint plugin rule

Please see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/prefer-dom-node-remove.md",False
4ef1a129fa21862f7af036a427a6ca31a57fea1e,2021-11-16 22:22:50,Jonas Jenwald,"Replace the remaining `Node.removeChild()` instances with `Element.remove()`

Using `Element.remove()` is a slightly more compact way of removing an element, since you no longer need to explicitly find/use its parent element.
Furthermore, the patch also replaces a couple of loops that're used to delete all elements under a node with simply overwriting the contents directly (a pattern already used throughout the viewer).

See also:
 - https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild
 - https://developer.mozilla.org/en-US/docs/Web/API/Element/remove",False
3209c013c411ace4414246a153eac26eea640aba,2021-11-16 21:40:40,Brendan Dahl,"Merge pull request #14247 from calixteman/button

[api-minor] Render pushbuttons on their own canvas (bug 1737260)",True
1214c056e926ec68f3739d7f2a67b26b86ade94d,2021-11-16 20:07:58,Jonas Jenwald,"Slightly optimize `spreadMode` toggling with `ScrollMode.PAGE` set (PR 14112 follow-up)

It shouldn't be necessary to iterate through *all* pages when using a non-default `spreadMode`, since we already know which page(s) should become visible.
This code is a left-over from the initial (local) implementation that resulted in PR 14112, however I forgot to clean-up some things such as e.g. this loop.

Also fixes an outdated comment, see PR 14204 which removed the mentioned data-structure.",False
7d4c37e988fba7547703cad5383a94289cb27a87,2021-11-15 18:36:17,Jonas Jenwald,"Use the new iterator in the `PDFPageViewBuffer` unit-tests

The previous patch introduced an iterator in the `PDFPageViewBuffer`-class, hence the test-only `_buffer`-getter is no longer necessary.",False
e909fcdba8f0ae0302e68ef108dcf74c5b8424c6,2021-11-15 18:36:14,Jonas Jenwald,"Only show the `loadingIcon`-spinner on visible pages (issue 14242)

This patch preserves the old behaviour of appending a `loadingIcon`-div to all pages that are not yet loaded/rendered. However, the actual `loadingIcon`-spinner (i.e. the `loading-icon.gif` image) will only be displayed on *visible* pages to improve performance.

To avoid having to iterate through all pages in the document, which doesn't seem like a good idea for a PDF document with thousands of pages, we use a combination of the currently visible *and* cached pages to toggle the `loadingIcon`-spinner.",False
e4f97a2a911a538be094fda434a216454690ea04,2021-11-14 19:39:31,Tim van der Meij,"Merge pull request #14273 from Snuffleupagus/update-packages

Update packages and translations",True
971ac8e9934d96f37dc10951ad16196a2d0c9c64,2021-11-14 17:07:41,Jonas Jenwald,"Include the /Lang-property, when it exists, in the StructTree-data (issue 14261)

*Please note:* This is a tentative patch, since I don't have the necessary a11y-software to actually test it.",False
a54bed49637503464e1fc955e030640dee5381cb,2021-11-14 15:18:50,Jonas Jenwald,"Enable the ESLint `no-loss-of-precision` rule

Please refer to https://eslint.org/docs/rules/no-loss-of-precision",False
c47f5e81fe334568e618ec421b1269a9991c48e1,2021-11-14 15:18:50,Jonas Jenwald,Update l10n files,False
04bdc26d3aa50a1ab4ed5eaec6c6743a43386fe5,2021-11-14 14:57:29,Jonas Jenwald,Update the `eslint-plugin-unicorn` package to the latest version,False
1dd74efb0fd68230ea8845397b7f1117983fcd65,2021-11-14 14:54:41,Jonas Jenwald,Update the `eslint-plugin-no-unsanitized` package to the latest version,False
bd1e140e2a8c4be867ad18341d24be83e3a2e5b4,2021-11-14 14:50:54,Jonas Jenwald,Update the `dommatrix` package to the latest version,False
9f6d37263c912cff50ac533e18658b7adf6fd09f,2021-11-14 14:47:30,Jonas Jenwald,Update npm packages,False
712621b50870bb65b5b4000ac358e06aae9d23c1,2021-11-14 03:54:36,Jonas Jenwald,"Merge pull request #14255 from Snuffleupagus/GrabToPan-class

Convert `GrabToPan` to a standard `class`",True
08d56c67aee19ccdd68ec24b1de4c47d52119cf2,2021-11-14 03:37:36,Jonas Jenwald,"Convert `GrabToPan` to a standard `class`

This code is the last piece[1] of the viewer that's not using standard `class`es, and by converting this code we get rid of some now unneeded boilerplate code (slightly reducing the size of the *built* `web/viewer.js` file).
Note that while this code was originally imported from a separate repository, it was last sync-ed with upstream *five years* ago which is why this re-factoring should be OK as far as I'm concerned (and we've done some other clean-up since then as well).

---
[1] Technically the `web/debugger.js` file is left as well, however that code is first of all not bundled in the *built* `web/viewer.js` file and secondly it's not even loaded by default either.",False
ed6af0f844db5055fb6d7882e02721d63bd327cc,2021-11-14 03:30:15,Jonas Jenwald,"[web/grab_to_pan.js] Inline the `isLeftMouseReleased` helper function

Given the support information listed in the function itself, the [MDN compatibility data](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons#browser_compatibility), and the [currently supported browsers](https://github.com/mozilla/pdf.js/blob/4bb9de4b008dca2cdccf770bc359ae21971debb0/gulpfile.js#L79-L87) in the PDF.js project we should be able to simplify the code by inlining the function instead.",False
7a428345dbd5ffe3c9732d07ecd7ef2ac4de138a,2021-11-14 03:29:34,Jonas Jenwald,"Merge pull request #14271 from calixteman/params

Parse query string in using URLSearchParams",True
fe95e100e42139fbc340e466c54dd0a61c9e2b2d,2021-11-14 01:40:54,Calixte Denizet,"Parse query string in using URLSearchParams
 - I just noticed in reading the code that we parse that stuff when something exists in the web api;
 - see https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/URLSearchParams.",False
de7cfed9e392eb3bfcb761ccea2c1f09cdf869aa,2021-11-14 00:52:58,Tim van der Meij,"Merge pull request #14260 from Snuffleupagus/telemetry-pageInfo-once

Report ""pageInfo"" telemetry once, rather than for each rendered page",True
138ebb09c0fa96b14e27d871edcbfa88f58bfa05,2021-11-14 00:42:04,Tim van der Meij,"Merge pull request #14253 from Snuffleupagus/ScrollMode-PAGE-chromium

[Chromium addon] Add the Page scrolling mode to the options (PR 14112 follow-up)",True
85c6dd59cede2ffcfb77a574ddf43c7bf70fa438,2021-11-13 21:42:56,calixteman,"Merge pull request #14268 from calixteman/outline

Remove non-displayable chars from outline title (#14267)",True
7041c62ccfa4ee2c7a3a0ab4a1ef46f6b6a1a378,2021-11-13 21:26:08,Calixte Denizet,"Remove non-displayable chars from outline title (#14267)
 - it aims to fix #14267;
 - there is nothing about chars in range [0-1F] in the specs but acrobat doesn't display them in any way.",False
db41c493211cd3c3c3131c44952e0153dfe95567,2021-11-13 20:31:28,Jonas Jenwald,"Merge pull request #14270 from Snuffleupagus/issue-14269

When parsing corrupt documents without any trailer-dictionary, fallback to the ""top""-dictionary (issue 14269)",True
afcc99a86d62e1c4d21b5bda27d71fe2ab36c01c,2021-11-13 17:51:38,Jonas Jenwald,"When parsing corrupt documents without any trailer-dictionary, fallback to the ""top""-dictionary (issue 14269)

There's obviously no guarantee that this will work in general, if the document is sufficiently corrupt, but it should hopefully be better than just throwing `InvalidPDFException` as currently happens.

Please note that, as is often the case with corrupt documents, it's somewhat difficult to know if we're rendering the document ""correctly"" with this patch[1]. In this case even Adobe Reader cannot open the document, which is always a good sign that it's *really* corrupt, however we're at least able to render *something* with this patch.

---
[1] Whatever ""correct"" even means when dealing with corrupt PDF documents, where often times different PDF viewers won't agree completely.",False
28fb3975eb762bc616ef4ee7d74d5633ab786bc2,2021-11-13 02:12:32,Jonas Jenwald,"Merge pull request #14266 from calixteman/bug931481

Don't consider space as real space when there is an extra spacing (bug 931481)",True
a88ff34eb767504cdcf86e4b3cfc895457d307b6,2021-11-12 23:23:48,Calixte Denizet,"Don't consider space as real space when there is an extra spacing (bug 931481)
 - it aims to fix https://bugzilla.mozilla.org/show_bug.cgi?id=931481;
 - real space chars are pushed in the chunk but when there is an extra spacing, the next char position must be compared with the previous one;
 - for example, an extra spacing can cancel a space so visually there are no space.",False
7d6d3fc124593d94230f6fbd2f7e16fcd13efb10,2021-11-12 23:23:19,calixteman,"Merge pull request #14265 from calixteman/14150

XFA - Avoid an exception when looking for a font in a parent node",True
5b7e1f5232c6bb42469f0b5aac347af3fb7df244,2021-11-12 20:57:08,Calixte Denizet,"XFA - Avoid an exception when looking for a font in a parent node
  - it aims to fix issue https://github.com/mozilla/pdf.js/issues/14150;
  - a parent can be null in case the root has been reached, so just add a check.",False
33ea817b20e01f5dc5fb15ca751c2c119f7a9dbe,2021-11-12 20:07:33,Calixte Denizet,"[api-minor] Render pushbuttons on their own canvas (bug 1737260)
 - First step to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1737260;
 - several interactive pdfs use the possibility to hide/show buttons to show different icons;
 - render pushbuttons on their own canvas and then insert it the annotation_layer;
 - update test/driver.js in order to convert canvases for pushbuttons into images.",False
3a31b7ef0c5348c76c1f231a2f0abe9cd591ad27,2021-11-12 03:53:43,Brendan Dahl,"Merge pull request #14258 from Snuffleupagus/issue-14256-2

Always prefer abbreviated keys, over full ones, when doing any dictionary lookups (issue 14256)",True
8eed0b9145acab83094ddf0e41bfcd5c88d9f996,2021-11-11 17:06:06,Jonas Jenwald,"Report ""pageInfo"" telemetry once, rather than for each rendered page

Reporting telemetry, in Firefox, includes using `JSON.stringify` on the data and then sending an event to the `PdfStreamConverter.jsm`-code.
In that code the event is handled and `JSON.parse` is used to retrieve the data, and in the ""pageInfo""-case we'll then proceed to ignore everything except *the first* such event; see https://searchfox.org/mozilla-central/rev/24fac1ad31fb9c6e9c4c767c6a7ff45d226078f3/toolkit/components/pdfjs/content/PdfStreamConverter.jsm#509-514

All-in-all, sending the ""pageInfo"" telemetry for each rendered page is thus unnecessary and this patch makes the viewer send it only *once* instead.",False
ea1c348c670611bc318669cb912ff87379182b22,2021-11-10 16:26:18,Jonas Jenwald,"Always prefer abbreviated keys, over full ones, when doing any dictionary lookups (issue 14256)

Note that issue 14256 was specifically about *inline* images, please refer to:
 - https://www.adobe.com/content/dam/acom/en/devnet/pdf/pdfs/PDF32000_2008.pdf#G7.1852045
 - https://www.pdfa.org/safedocs-unearths-pdf-inline-image-issue/
 - https://pdf-issues.pdfa.org/32000-2-2020/clause08.html#H8.9.7

However, during review of the initial PR in https://github.com/mozilla/pdf.js/pull/14257#issuecomment-964469710, it was suggested that we instead do this *unconditionally for all* dictionary lookups.
In addition to re-ordering the existing call-sites in the `src/core`-code, and adding non-PRODUCTION/TESTING asserts to catch future errors, for consistency a number of existing `if`/`switch`-blocks were re-factored to also check the abbreviated keys first.",False
4ee906adf49c953400b5c1c3e8cd743a70e620a1,2021-11-09 21:29:14,Brendan Dahl,"Merge pull request #14209 from Snuffleupagus/issue-14205

[Google Chrome] Ensure that `markedContent` spans are placed in the top-left corner (issue 14205)",True
4bb9de4b008dca2cdccf770bc359ae21971debb0,2021-11-08 16:44:42,calixteman,"Merge pull request #14239 from calixteman/1739502

XFA - Fix a breakBefore issue when target is a contentArea and startNew is 1 (bug 1739502)",True
27e461a897a1b3b1330e8fba25b8122cf6e9c2f4,2021-11-08 14:48:25,Jonas Jenwald,[Chromium addon] Add the Page scrolling mode to the options (PR 14112 follow-up),False
8064318015ba0b90a5e340b678a53d21f3bc0009,2021-11-08 02:58:53,Jonas Jenwald,"Merge pull request #14250 from calixteman/14249

XFA - Encode tag names in UTF-8 when saving (fix #14249)",True
13ae6d493a1129b6958b10be6ab1e557485c0bbc,2021-11-08 02:11:37,Calixte Denizet,XFA - Encode tag names in UTF-8 when saving (fix #14249),False
891f21fba6db64cd602c1a9a51826d7b9cd06af0,2021-11-07 19:07:33,Tim van der Meij,"Merge pull request #14245 from Snuffleupagus/PDFPageViewBuffer-class

Convert `PDFPageViewBuffer` to a standard class, and use a `Set` internally",True
13ef763222e0e7e6884a439d3937824dbba5d96f,2021-11-07 15:31:35,Jonas Jenwald,"[Google Chrome] Ensure that `markedContent` spans are placed in the top-left corner (issue 14205)

*This is a tentative patch, since we unfortunately cannot easily test it (as far as I can tell).*

In Firefox this (obviously) works as-is, but in Google Chrome the `markedContent` spans are inserted within the regular text-content (in the DOM) and with non-zero heights.",False
efb445574900263d5883df12d3b6de0ad3ed89f5,2021-11-07 01:51:43,calixteman,"Merge pull request #14240 from calixteman/14014

XFA - Get each page asynchronously in order to avoid blocking the event loop (#14014)",True
b820beb8d942ad05d02d68ecd84547807dbd6c2d,2021-11-07 00:00:47,Tim van der Meij,"Merge pull request #14244 from Snuffleupagus/issue-14243

Prevent mobile devices from interfering with the textLayer-elements (issue 14243)",True
1681e25008fc37bf8c76ebd2eb50c33a49fbcdfa,2021-11-06 17:55:03,Calixte Denizet,XFA - Get each page asynchronously in order to avoid blocking the event loop (#14014),False
12d41bcba4e1d1ebba25bf3958cfe7e206264f60,2021-11-06 16:09:43,Jonas Jenwald,"Prevent mobile devices from interfering with the textLayer-elements (issue 14243)

*This is a tentative patch, since I don't have the necessary hardware to test it.*

See https://developer.mozilla.org/en-US/docs/Web/CSS/text-size-adjust, which is currently ignored in Firefox.
It seems overall safer, and more future-proof, to simply add this to the *entire* `textLayer` rather than its individual elements.",False
a774707e312a01ff6892a5d7fdc2df5281f1603c,2021-11-06 14:49:17,Jonas Jenwald,"Remove the `moveToEndOfArray` helper function, since it's unused

With the previous patch, this helper function is no longer used and keeping it around will simply increase the size of the builds.
This removal is purposely done *separately*, to make it easy to revert the patch in the future if this helper function would become useful again.",False
f55bf4239843c89a609c6d680ecad75fad3af288,2021-11-06 14:49:17,Jonas Jenwald,"Convert `PDFPageViewBuffer` to use a `Set` internally

This relies on the fact that `Set`s preserve the insertion order[1], which means that we can utilize an iterator to access the *first* stored view.

Note that in the `resize`-method, we can now move the visible pages to the back of the buffer using a single loop (hence we don't need to use the `moveToEndOfArray` helper function any more).

---
[1] This applies to `Map`s as well, although that's not entirely relevant here.",False
0eba15b43ae7394a2807c17cac3fccaa47292d7d,2021-11-06 14:49:17,Jonas Jenwald,"Convert `PDFPageViewBuffer` to a standard class

This patch makes use of private `class` fields, to ensure that the previously ""private"" properties remain as such.",False
c62bcb55ace11ce578080a2794563163ec2a7050,2021-11-06 14:49:17,Jonas Jenwald,"Adjust the ""handles `resize` correctly, with `idsToKeep` provided"" unit-test (PR 14238 follow-up)

This small change will help validate an important part of the upcoming re-factoring, regarding the *correct* iteration of the `Set` in the `PDFPageViewBuffer.resize` method in particular.",False
38efd13a54021651fb7d90ebb4ca5e20609985e4,2021-11-06 14:47:49,Jonas Jenwald,"Merge pull request #14230 from brendandahl/reduce-gradient-size

Create shading patterns the size of the current path. (bug 1722807)",True
b56cca03241d87ad014ccf1e36ee3c2948ecb965,2021-11-06 09:14:18,Brendan Dahl,"Create shading patterns the size of the current path. (bug 1722807)

Previously, when we created a shading pattern canvas we created it
as the same size as the page. This was good for caching if the same
pattern was used over and over again, but when lots of different
shadings are created that caused us to create many full page
canvases.

Instead of creating the full page canvses, create the canvas
as the same size as the current path bounding box. This reduces memory
consumption by a lot since most paths are pretty small. Also, in real world
PDFs it's rare for a shading (non shading fill) to be reused over and over again.
Bug 1721949 is an example where the same pattern is reused and it will be slightly
slower than before.",False
3b5a463357a22831f0d2cafc9522130f38775ae2,2021-11-06 09:09:02,Brendan Dahl,"Merge pull request #14241 from brendandahl/group-bbox-matrix

Don't double apply a group xobject's bbox.",True
8161d3f29d7cc8ce4313a420fe6952aafe5a6020,2021-11-06 04:10:58,Brendan Dahl,"Don't double apply a group xobject's bbox.

In `beginGroup` we create a new canvas that is the size of the
bounding box and we translate it to the offset. This means we don't need to
also apply the bounding box during `paintFormXObjectBegin`.

This improves #6961 quite a bit, but it still is missing the indention
in the ruler.",False
30bd5f0a397a1235aaaefaada8f145bc35009382,2021-11-06 00:28:15,Tim van der Meij,"Merge pull request #14238 from Snuffleupagus/PDFPageViewBuffer-tests

Add a couple of basic unit-tests for `PDFPageViewBuffer`",True
fe205efd8d5f70a909d3682257bb596a79f1ce6f,2021-11-06 00:13:20,Jonas Jenwald,"Add a couple of basic unit-tests for `PDFPageViewBuffer`

The `PDFPageViewBuffer`-code is very important for the correct function of the viewer, but it's currently not tested at all.
While the `PDFPageViewBuffer` is obviously intended to be used with `PDFPageView`-instances, it only accesses a couple of `PDFPageView` properties/methods and consequently it's fairly easy to unit-test this code with dummy-data.

These unit-tests should help improve our confidence in this code, and will also come in handy with other changes that I'm working on (regarding modernizing and re-factoring the `PDFPageViewBuffer`-code).",False
a08763f4aae7e33911804eafbb9b41be72d0832f,2021-11-05 23:29:55,Calixte Denizet,"XFA - Fix a breakBefore issue when target is a contentArea and startNew is 1 (bug 1739502)
 - it aims to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1739502;
 - when the target area was the current content area, everything was pushed in it instead of creating a new one (and consequently a new pageArea is created).
 - the pdf shows an alignment issue on page 4:
   - the hAlign is ""center"" but the subform was the width of its parent, so compute the real width of the subform with tb layout;
 - there is an extra empty page at the end of the pdf:
   - there is a subform with some hidden elements which are not rendered for now (since there is no plugged JS engine it isn't possible to draw them in changing their visibility).
   - so in case a subform is empty and has no real dimensions (at least one is 0), we just consider it as empty.",False
e136afbabcc24e3b914852246d49a513667e62be,2021-11-05 16:42:34,calixteman,"Merge pull request #14218 from janekotovich/subform_min_0

XFA subform with occur min=0 and no bound data displaying.",True
8222d6530bd9ef4242bdd71a7c8468b7bdbe9687,2021-11-05 14:34:56,Jonas Jenwald,"Merge pull request #14232 from brendandahl/show-text-pattern

Use correct matrix for patterns with showText.",True
1c7048399bdcee27422c9d94c0d2f765de73e68b,2021-11-05 05:27:36,Brendan Dahl,"Use correct matrix for patterns with showText.

We were incorrectly using the transform in the pattern before it had been
adjusted causing the pattern to be misplaced relative to the page.

Fixes: ShowText-ShadingPattern.pdf (already in corpus)
Fixes: #8111
Fixes: #9243",False
56b502391cac9c3b9967d20ae4520aa6b3ca2de5,2021-11-04 15:52:05,Jane-Kotovich,"XFA subform with occur min=0 and no bound data displaying

Subfrom nomin displays even though it's subform is set to <occur max=-1 min=0>
If we look through specs of XFA 3.3 : https://www.pdfa.org/norm-refs/XFA-3_3.pdf
- The min attribute is used when processing a form that contains data. Regardless of the data at least this number of instances is included. It is permissible to set this value to zero, in which case the container is entirely excluded if there is no data for it.

However, in our case it doesn't happen, because we let our empty dataNode get through. Though by setting a clause:
- eliminate unmatched data with occur min=0
we are checking our empty data and sending it to uselessNode array where at the end it gets removed;",False
611627f5a1226785a7a952c0fdb6e4e8eba4a2e4,2021-11-04 04:19:27,Jonas Jenwald,"Merge pull request #14219 from Snuffleupagus/getVisibleElements-ids

Let `getVisibleElements` return a Set containing the visible element `id`s",True
e1a35e7bb6655550072006802efd82ca327edcd3,2021-11-04 02:39:14,Jonas Jenwald,"Merge pull request #14213 from Snuffleupagus/issue-11656

Tweak the Bidi-detection heuristics for very short RTL strings (issue 11656)",True
c2f335186a88c37403d4f55d97bf296364179e71,2021-11-04 02:26:46,Jonas Jenwald,"Merge pull request #14228 from brendandahl/consume-path

Reset path bounding box tracking when starting a new path.",True
e78e4e72bf21e5536cac44f7024fc05dd2898b49,2021-11-04 01:43:47,Jonas Jenwald,"Further modernize `PDFThumbnailViewer.scrollThumbnailIntoView`

The way that we're currently handling the last-`id` is very old, and there's no longer any good reason to special-case things when only one thumbnail is visible.
Furthermore, we can also modernize the loop slightly by using `for...of` instead of `Array.prototype.some()` when checking for fully visible thumbnails.",False
6323f8532ae3dcd891b8de88636f0d1fa65283dc,2021-11-04 01:43:44,Jonas Jenwald,"Let `getVisibleElements` return a Set containing the visible element `id`s

Note how in `PDFPageViewBuffer.resize` we're manually iterating through the visible pages in order to build a Set of the visible page `id`s. By instead moving the building of this Set into the `getVisibleElements` helper function, as part of the existing parsing, this code becomes *ever so slightly* more efficient.

Furthermore, more direct access to the visible page `id`s also come in handy in other parts of the viewer as well.
In the `BaseViewer.isPageVisible` method we no longer need to loop through the visible pages, but can instead directly check if the pageNumber is visible.
In the `PDFRenderingQueue.getHighestPriority` method, when checking for ""holes"" in the page layout, we can also avoid some unnecessary look-ups this way.",False
5f77d3719b6bb2da9a92f764afb744b835ab36a0,2021-11-04 01:01:57,Jonas Jenwald,"Tweak the Bidi-detection heuristics for very short RTL strings (issue 11656)

Very short strings can narrowly miss the existing Bidi-detection threshold, leading to incorrect text-selection and copying behaviour.

In my testing, neither Adobe Reader or PDFium seem to handle copying ""correctly"" for this document. Hence it's not entirely clear to me that we actually want to fix this, since tweaking these heuristics can *obviously* cause regressions elsewhere (and our test coverage for RTL-text isn't exactly great).",False
2ac6c939a59f3e4337214a6d3734fad9008c4737,2021-11-04 00:18:37,Tim van der Meij,"Merge pull request #14225 from Snuffleupagus/render-better-holes-check

Avoid doing unnecessary checks, when pre-rendering page layouts with ""holes"" (PR 14131 follow-up)",True
039a7a670f5e8bdfc0c8dbbb032e7a590e1bd024,2021-11-04 00:16:52,Brendan Dahl,"Reset path bounding box tracking when starting a new path.

Starting a new path will wipe out any of the current subpaths in the
current graphics state, so we should reset the min/maxes.

This makes a number of the bounding boxes smaller and reduces the number
of composed pixels. For the smask tests in the corpus, the number of
composed pixesl goes from 19,872,109 to 19,676,905. The difference is much
larger on other PDFs though.",False
c68dc03be685a5f2de5c2e99595f9bc747ffaa34,2021-11-04 00:14:12,Tim van der Meij,"Merge pull request #14221 from Snuffleupagus/pr-12870-followup

Use `BaseViewer.previousPage` more in the default viewer (PR 12870 follow-up)",True
ab5f4a3e5e614b8a8c831b657b2f58c08ada29f1,2021-11-03 14:10:39,Jonas Jenwald,"Avoid doing unnecessary checks, when pre-rendering page layouts with ""holes"" (PR 14131 follow-up)

*Sometimes I'll hopefully learn to optimize my code directly when writing it, rather than having to do multiple clean-up passes; sorry about the churn here!*

For most page layouts there won't be any ""holes"" in the visible pages (or thumbnails), and in those cases it'd obviously be preferable not having to repeat any checks of already rendered pages.
Rather than only checking the ""distance"" between the first/last pages, we can instead compare the theoretical number of pages (between first/last) with the actually visible number of pages instead. This way, we're able to better detect the ""holes""-case and can skip unnecessary parsing in the common case.",False
60ab751bb6f4814ef71f16c7d9f466d2eb7c6b1e,2021-11-03 02:02:17,Brendan Dahl,"Merge pull request #14217 from Snuffleupagus/bug-1732141

[Firefox] Handle errors if loading failed before the ""supportsRangedLoading"" message was sent (bug 1732141)",True
292a715c1c8e44d00edc082b6ad1c098fa510f55,2021-11-02 16:30:57,Jonas Jenwald,"Use optional chaining to simplify `PDFViewerApplication.store` accesses in various event handlers

This way we no longer need the intermediate variables.",False
d6e8b8fbc161fd166ffd642d1b74bdaa0e7f9740,2021-11-02 16:18:18,Jonas Jenwald,"Use `BaseViewer.previousPage` more in the default viewer (PR 12870 follow-up)

I missed this one spot in PR 12870, when converting the other cases in the ""keydown"" event handler. However, given that it only matters in PresentationMode and/or when ""page-fit"" zooming is enabled, this oversight shouldn't have had any user-observable impact (but we should fix it nonetheless).",False
f4e88b0a57b3ac721fa482ba0d96a3806fbdbd57,2021-11-01 22:20:49,Jonas Jenwald,"[Firefox] Handle errors if loading failed before the ""supportsRangedLoading"" message was sent (bug 1732141)

This is a follow-up to PR 10675, since there I completely overlooked that we also need to handle the case where a PDF document has *failed* to load when the ""supportsRangedLoading"" message is sent to the viewer.",False
6a15973a1b26288f981d971fab1f54bb4c98d8be,2021-10-31 22:27:50,Tim van der Meij,"Merge pull request #14212 from Snuffleupagus/issue-10301-test

Add a RTL-text reference test (issue 10301)",True
8edec018fef2f591b99617ac0617865bb8178af3,2021-10-31 21:25:11,Jonas Jenwald,"Add a RTL-text reference test (issue 10301)

It seems that issue 10301 was fixed by PR 13424, by combining the spans, however given that we don't have a lot of test coverage for RTL-text I figured that adding a simple reference test wouldn't hurt (rather than just closing the issue as WORKSFORME).",False
8c70258065a98e7d35fc54c76f5e4a2843a4787e,2021-10-31 19:11:56,Jonas Jenwald,"Merge pull request #14182 from calixteman/richtext

Support rich content in markup annotation",True
cf8dc750d67c738e2cc3c6722b1d8c70ab50eb73,2021-10-31 18:14:51,Calixte Denizet,"Support rich content in markup annotation
  - use the xfa parser but in the xhtml namespace.",False
fe1171132584c5d684353a654016603abd63df36,2021-10-31 17:43:25,Tim van der Meij,"Merge pull request #14210 from Snuffleupagus/update-packages

Update packages and translations",True
822856e0440369d4f21d138308e61d91d9d1e89b,2021-10-31 14:26:41,Jonas Jenwald,Update l10n files,False
48896adc27254d6a640106a0d899f5331b43438f,2021-10-31 14:22:07,Jonas Jenwald,"Enable the ESLint `no-unused-private-class-members` rule

Given that we're now using private `class` fields/methods, enabling this new ESLint rule should help avoid adding dead code.

Please find additional details about the ESLint rule at https://eslint.org/docs/rules/no-unused-private-class-members",False
a8abdfb3bb1ec79087f4d91050158861146ec293,2021-10-31 14:08:18,Jonas Jenwald,Update npm packages,False
2d8b6fda8fb8823a31ef08957019f631cf9f9724,2021-10-30 18:15:31,calixteman,"Merge pull request #14207 from janekotovich/forms_version_popup

JS - Avoid a popup to ask for specific version of Acrobat",True
ec1633c33c8b1d87b1d3fb987ec2ac885123d0bd,2021-10-30 16:09:46,Tim van der Meij,"Merge pull request #14201 from Snuffleupagus/bug-1219400

Use the correct border-style for Annotations, when a dash array is specified (bug 1219400)",True
317e4dd146739974ae18ad1196e7b699109c736e,2021-10-30 16:07:30,Tim van der Meij,"Merge pull request #14204 from Snuffleupagus/rm-shadowViewer

Remove the `shadowViewer` used with Page scrolling",True
2c0bbaf208f5aed894b7ff226294ed4923c56fb7,2021-10-29 23:36:00,calixteman,"Merge pull request #14153 from catherinemds/xfa-link

Fix XFA links (bug 1735738)",True
db0b3cda8bbb8a72a04c71d9c2c5f450279343f5,2021-10-29 21:09:33,Catherine,"XFA - Fix xfaLink class to make links work (bug 1735738)

There were some links not working in some XFA files,I realized that the anchor tag that contains the link has an inline display and couldn't receive any height, solved this by adding a ""position: absolute"". Tested with two different files in Firefox Nightly and Chrome and now all links are working perfectly fine. Added reftest to avoid future regressions",False
12f89d2ab1d23546fe7bc3ff5d8a46a18d89c857,2021-10-29 18:39:59,Jane-Kotovich,"JS - Avoid a popup to ask for specific version of Acrobat

Embedded JS in PDF keep throwing alert reagdring specific version of Acrobat (Spanish and version 5.0 or greater).
This happens because:
- JS in pdf is enabled
- PDF contains some unsupported features (e.g. XFA)
Alert come when app.formVersion = undefined || app.formVersion < 5.0
In pdf.js we were using FORM_VERSION = undefined. After researching based on https://opensource.adobe.com/dc-acrobat-sdk-docs/acrobatsdk/pdfs/acrobatsdk_jsapiref.pdf\#G4.1993509 and Acrobat DC we decided to go with the larger number to avoid unnecessary popups.
Through investigation we realise that VIEWER_VERSION should have same value - a number.
Due to all that, we implemented 21.00720099 as a value for both FORMS_VERSION and VIEWER_VERSION",False
c18df2c61f4dbcf786a8feacc1c67af13433cf38,2021-10-28 17:18:15,Jonas Jenwald,"Remove the `shadowViewer` used with Page scrolling

The only reason for using a `DocumentFragment` in the first place, originally added in PR 8724, was to prevent errors in the `PDFPageView`-constructor. However, we should be able to simply make its `container`-option *optional* instead, since it's not being used for anything else in the class.

Note that pre-rendering still works correctly in my testing, and given that the `BaseViewer` keeps references to all `PDFPageView`-instances (via its `_pages` Array) it also shouldn't be possible to ""lose"" any pages/canvases this way.",False
0e7614df7f46e766237cc9a649fa6084261dce16,2021-10-27 23:36:09,Tim van der Meij,"Merge pull request #14180 from Snuffleupagus/bug-1627427

Handle ranges that ""overflow"" the last byte in `CMap.mapBfRange` (bug 1627427)",True
6f3700b393e1c9c0787b9daf5009bb3510f51d31,2021-10-27 23:31:45,Tim van der Meij,"Merge pull request #14191 from Snuffleupagus/viewer-empty-pageLabels

Ignore pageLabels, in the viewer, when they're all empty",True
f3a0a506c0730b2c5327ac6a4a43fcf31b01f5a6,2021-10-27 23:28:25,Tim van der Meij,"Merge pull request #14192 from Snuffleupagus/pr-14158-followup

[Regression] Prevent breaking errors when opening a new document in the GENERIC viewer (PR 14158 follow-up)",True
884caf602ef9f75912e26d69bca5ad77779e4496,2021-10-27 16:50:21,Jonas Jenwald,"Use the correct border-style for Annotations, when a dash array is specified (bug 1219400)

Even though we cannot use the dash array in the display layer, at least ensure that we use the correct border-style.",False
74bc6d2625f3bbb92832a2d9a7b78915a046ce3b,2021-10-27 16:10:16,calixteman,"Merge pull request #14189 from janekotovich/security_handler

[api-minor] Implement securityHandler in the scripting API (bug 1731578)",True
f40bbe838e3c09b84e6f69df667a453c55de25f8,2021-10-27 15:50:17,calixteman,"Merge pull request #14199 from calixteman/it

Avoid to display download panel during integration tests",True
a24322fdabaa807e912e6366de87847a2bee3810,2021-10-27 15:13:30,Calixte Denizet,"Avoid to display download panel during integration tests
  - it could be the cause of the failures in #14189;
  - and the patch in firefox to enable the pref landed very recently:
  https://hg.mozilla.org/mozilla-central/rev/3de56e38f3c87f33a1e7849701edb3c62bc472a5",False
390ddd9241990e43e7f45ad7c8e4e889896d5449,2021-10-27 00:01:04,Jonas Jenwald,"Merge pull request #14181 from PinRathod/simpleviewer_to_async

Converted simpleviewer.js to await/async",True
4c463c6099cea8e195203278c9be7ac656192e64,2021-10-26 22:42:08,PinRathod,Converted simpleviewer.js to await/async,False
91fc643ff975bf6b8384f9f0cc8325556280760e,2021-10-26 19:12:04,Jane-Kotovich,[api-minor] Implement securityHandler in the scripting API (bug 1731578),False
66c26d70d4bb50fb233cd33ef5156767c36aff33,2021-10-25 19:41:04,Jonas Jenwald,"Ignore pageLabels, in the viewer, when they're all empty

Unfortunately there exist PDF documents where all pageLabels are empty strings, see e.g. http://www.cs.cornell.edu/~ragarwal/pubs/blk-switch.pdf (taken from an old issue), which result in the pageNumber-input being completely blank. That doesn't seem very helpful, and this patch simply extends the approach used to ignore pageLabels that are identical to standard page numbering.",False
2c779a8fbec72d0810319ff0075e55bc4c4b38e6,2021-10-25 17:57:24,Jonas Jenwald,"[Regression] Prevent breaking errors when opening a new document in the GENERIC viewer (PR 14158 follow-up)

In the GENERIC viewer, e.g. when dragging-and-dropping a new PDF document which automatically opens the outline, there can now be breaking errors in the `{BaseViewer, PDFThumbnailViewer}.#getScrollAhead` methods since there's no visible pages/thumbs during loading; sorry about the breakage!",False
c85cd80b1bb8465feac8956ff57c96e92785ff55,2021-10-25 16:55:34,Jonas Jenwald,"Remove unnecessary pageLabel length-check in the viewer

Given how the pageLabel array is defined, see https://github.com/mozilla/pdf.js/blob/1ab9a6e36e84389775e5f3d6faebdb6b327b8d62/src/core/catalog.js#L627, it shouldn't be necessary to check the length in the viewer.",False
aa1b78684f3ff13d271be8c7d6f7c228596e770d,2021-10-24 17:18:38,Jonas Jenwald,"Handle ranges that ""overflow"" the last byte in `CMap.mapBfRange` (bug 1627427)",False
1ab9a6e36e84389775e5f3d6faebdb6b327b8d62,2021-10-24 17:13:02,Tim van der Meij,"Merge pull request #14158 from Snuffleupagus/preRender-doc-limits

Improve pre-rendering at the start/end of the document",True
3dc738c4c8681840fb7f16ecf2c405237e4c1949,2021-10-23 23:29:14,Jonas Jenwald,Slightly simplify the `isThumbnailViewEnabled` check in `PDFRenderingQueue.renderHighestPriority`,False
91692a20d152cbb7300c984a2735f0c5d8a4c333,2021-10-23 22:45:37,Jonas Jenwald,"Skip the first/last visible pages pre-rendering page layouts with ""holes"" (PR 14131 follow-up)

This was a stupid oversight on my part, since the first/last visible pages have obviously already been rendered at the point when we're checking for any potential ""holes"" in the page layout.
While this will obviously not have any measurable effect on performance, we should nonetheless avoid doing completely unnecessary checks here.",False
24b7fb20ef97cdd967b20b2dce3bf4015e60fff3,2021-10-23 22:45:37,Jonas Jenwald,"Improve pre-rendering at the start/end of the document

This is a very old ""issue"", which has existed since essentially forever, and it affects all of the available scrollModes. However, in the recently added Page-mode it's particularily noticeable since we use a *simulated* scroll direction there.

When deciding what page(s) to pre-render, we only consider the current scroll direction. This works well in most cases, but can break down at the start/end of the document by trying to pre-render a page *outside* of the existing ones. To improve this, we'll thus *force* the scroll direction at the start/end of the document.

*Steps to reproduce:*

 0. Open the viewer, e.g. https://mozilla.github.io/pdf.js/web/viewer.html
 1. Enable vertical scrolling.
 2. Press the <kbd>End</kbd> key.
 3. Open the devtools and, using the DOM Inspector, notice how page 13 is *not* being pre-rendered.",False
0aaa4e3dbe551acf5f9ba3af5efcc6c8a524e56d,2021-10-23 22:42:44,Tim van der Meij,"Merge pull request #14156 from Snuffleupagus/escodegen-fork

Add support for modern ECMAScript `class` features",True
e5d35a380a84dacf9ce7a7cb418c4ee17224c53e,2021-10-23 22:39:52,Tim van der Meij,"Merge pull request #14178 from Snuffleupagus/update-browserslist

Update the `browserslist` database",True
2c27f54e4eafad5fd7120265eb4f9bdc28cf27a6,2021-10-23 13:37:18,Jonas Jenwald,"Update the `browserslist` database

Following https://github.com/browserslist/browserslist#browsers-data-updating, since very recently warnings started to appear when running various gulp-tasks.",False
52372b9378b9093d31d4d72977526a20dbe2e7b2,2021-10-23 12:57:18,Jonas Jenwald,"Merge pull request #14175 from brendandahl/smask-v2

Use a new method for handling soft masks.",True
82681ea20cdba90c58e692d8cb354dd6c109b9ba,2021-10-23 02:11:29,Brendan Dahl,"Track the clipping box and bounding box of the path.

This allows us to compose much smaller regions of soft
mask making them much faster. This should also allow
for further optimizations in the pattern code.

For example locally I see issue #6573 go from 55s
to 5s with this change.

Fixes #6573",False
2d1f9ff7a3a8e29acd7500add4a1057a5eaba191,2021-10-23 02:11:21,Brendan Dahl,"Use a new method for handling soft masks.

The old method of handling soft masks had a number of issues where the temporary
drawing canvas and the suspended main canvas could get out of sync
(e.g. mismatched save/restores or clip state) or we could end up compositing at
the wrong time. A good example of things getting out sync is the reduced test
case in #9017.

To fix this I've changed two big things:

1) Duplicate all the needed graphics state from the temporary canvas to the
suspended main canvas. This ensure the canvases stay in sync so that when we
switch back to the main canvas the graphics state stack is the same
(e.g. transforms, clip paths).

2) Immediately composite after each drawing operation. This ensures that if
there's an active clip region that we'll still be able to composite the correct
portions of the canvas. Note: This solution could be avoided by using
getImageData and putImageData since those ignore clipping region, but this is
very very slow. Note2: I also think the old way of only compositing at the end
of the soft mask is incorrect and can lead to wrong colors if drawing over the
same region, but in practice this doesn't seem to matter much.

Fixes: #5781
Fixes: #5853
Fixes: #7267
Fixes: #7891
Fixes: #8403
Fixes: #8624
Fixes: #12798
Fixes: #13891
Fixes: #9017 (reduced test case)
Fixes: https://bugzilla.mozilla.org/show_bug.cgi?id=1703683",False
7216511fbf16188bfa0a4fa13f7b217aec519656,2021-10-23 01:31:19,Jonas Jenwald,"Convert `TempImageFactory` to a `class`, using static fields/methods

Please refer to https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields",False
89785a23f3ad78fb27c6995bdd38c97f01947b2f,2021-10-23 01:31:19,Jonas Jenwald,"Convert `Metadata` to use private `class` fields

Please refer to https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields",False
00f8fab8a52c5bc35ad62fc821e2e3fa81e9d86a,2021-10-23 01:31:17,Jonas Jenwald,"Add support for modern ECMAScript `class` features

With ESLint 8 we should now finally be able to start using modern `class` features, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Public_class_fields and https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields

However, while both ESLint and Acorn now support this, it unfortunately turns out that Escodegen (which we use during building) still lack the necessary support. Looking at https://github.com/estools/escodegen there's not been any updates since last year, and there's also open PRs adding support for these new `class` features.

To avoid blocking usage of these `class` features in the PDF.js code-base, in particular *private* fields/methods, this patch thus proposes that we (hopefully temporarily) switch to an `escodegen` fork that has the necessary support; please see https://www.npmjs.com/package/@javascript-obfuscator/escodegen

While I have no reason to doubt the security of the `escodegen` fork, this patch nonetheless pins the version number. Furthermore, I've also diffed the output of the two `.js`-files in this forked package against the original files without finding anything that looks immediately ""dangerous"".",False
38e53605334d09225001be328ce47a39b2aa02cf,2021-10-23 00:47:36,Tim van der Meij,"Merge pull request #14162 from brendandahl/indent-stepper

Indent the stepper on save/restore.",True
11f030d301d074cc4c61531e0804014a2628533b,2021-10-23 00:37:19,Tim van der Meij,"Merge pull request #14171 from Snuffleupagus/issue-14170

Prevent run-time errors in Node.js versions with `URL.createObjectURL` support (issue 14170)",True
2e56369f7923ca0abffc26eff75979450b5ed8fe,2021-10-22 23:00:32,Brendan Dahl,"Indent the stepper on save/restore.

Makes it easier to debug and visualize the graphics
state changes in the debugger.",False
e788665a26462f926d7a135c4453e5a73ff3772a,2021-10-22 16:28:43,Jonas Jenwald,"Merge pull request #14167 from stbensonimoh/convert-pdf-viewer-to-async-await

Convert examples/image_decoders/jpeg_viewer.js to await/async #14123",True
f263c860bddad2b4fdf641a32f2ccb301d35df98,2021-10-22 16:20:24,"Benson Imoh,ST",Convert examples/image_decoders/jpeg_viewer.js to await/async #14123,False
e4e44121d2be1b240ca5f30331701c5d39d4321b,2021-10-21 18:59:19,Jonas Jenwald,"Merge pull request #14174 from Snuffleupagus/PushButton-double-border

Prevent double-rendering borders for PushButton-annotations (PR 14083 follow-up)",True
044197808ad20853e6ccabd7971838c04aecdc1d,2021-10-21 17:01:16,Jonas Jenwald,"Prevent double-rendering borders for PushButton-annotations (PR 14083 follow-up)

With ResetForm-action support added in PR 14083, there's a regression in the `issue12716` test-case. More specifically the border around the ""Clear Form""-link is now rendered *twice*, once in the canvas via the appearance-stream and once in the annotationLayer via the border-data.
This looks slightly weird, and was most likely not intended, which is why this patch suggests that we ignore the border in the annotationLayer when an appearance-stream exists.",False
ff9d2b2ab15ebc7c315c61604ac7349e4e0695fe,2021-10-21 14:02:44,Jonas Jenwald,"Prevent run-time errors in Node.js versions with `URL.createObjectURL` support (issue 14170)

Apparently Node.js has added *global* `URL.createObjectURL` support, but not done the same thing for `Blob`. Hence we also need to check for the availability of `Blob` in the `createObjectURL` helper function, and it's probably a good idea to also update `examples/node/pdf2svg.js` to work-around this until these changes reach an official PDF.js release.",False
7c9e5781fe9a48e773652251a9490fe636722a4c,2021-10-21 14:00:02,Jonas Jenwald,"Merge pull request #14159 from stbensonimoh/convert-example-to-async-await

Convert examples/node/pdf2svg.js to await/async #14125",True
0643ccb68b8c12e6734eaa02c9a2b11859096188,2021-10-21 02:21:58,"Benson Imoh,ST",Convert examples/node/pdf2svg.js to await/async #14125,False
382be22c111c4d14373660a6c894a5f609b23486,2021-10-19 23:01:18,Tim van der Meij,"Merge pull request #14160 from Snuffleupagus/pr-13770-followup

Fix pattern handling regression in `SVGGraphics` (PR 13770 follow-up)",True
ce86f9dfddad2dfa9e10bb2dc1e4f2578ec7de98,2021-10-19 22:59:20,Tim van der Meij,"Merge pull request #14155 from mozilla/revert-13314-color-theme

Revert ""For mozcentral use Firefox color theme instead of system theme."" since `-moz-toolbar-prefers-color-scheme` was removed",True
0fe358f7d608c978ee9975729c506df1cf5c76ba,2021-10-19 22:56:08,Tim van der Meij,"Merge pull request #14154 from Snuffleupagus/update-packages

Update packages and translations",True
b66239d6dc389cdd637a2724ff773680c08fecab,2021-10-19 20:38:08,Brendan Dahl,"Merge pull request #14114 from Snuffleupagus/issue-14110

[api-minor] Include the /Lang-property in the `documentInfo`, and use it in the viewer (issue 14110)",True
81eafcbd5fa2926857475c87cc148f87d39bebeb,2021-10-19 20:02:59,Jonas Jenwald,"Merge pull request #14166 from Snuffleupagus/issue-14164

Ignore Square/Circle-annnotations with a zero borderWidth when creating a fallback appearance stream (issue 14164)",True
68e6622c57e294d25d8caa9923ec430140350223,2021-10-19 18:57:42,Jonas Jenwald,"Ignore Square/Circle-annnotations with a zero borderWidth when creating a fallback appearance stream (issue 14164)

Trying to render these Annotation-types, when the borderWidth is `0`, causes a ""hairline"" border to appear. If these Annotations included an appearance stream, as they are supposed to, this wouldn't have happened and the simplest solution here seem to be to just ignore these particular Annotations.",False
8c6f1e45c78c747b5d1f9771f162761ad83c0dbd,2021-10-19 01:10:10,Jonas Jenwald,"Fix pattern handling regression in `SVGGraphics` (PR 13770 follow-up)

While the FAQ clearly lists the SVG back-end as unsupported, see https://github.com/mozilla/pdf.js/wiki/Frequently-Asked-Questions#backends, I suppose that small/simple regressions still makes sense to fix.",False
bbb64369f1ffa118000ae5b3be1611cd0aec8003,2021-10-18 18:44:15,calixteman,"Merge pull request #13424 from calixteman/chunks2

[api-minor] Fix issues in text selection",True
61d1063276137e87f4dd2d2e8a3e071a280357a0,2021-10-17 19:57:05,Calixte Denizet,"Fix issues in text selection
  - PR #13257 fixed a lot of issues but not all and this patch aims to fix almost all remaining issues.
  - the idea in this new patch is to compare position of new glyph with the last position where a glyph has been drawn;
    - no space are ""drawn"": it just moves the cursor but they aren't added in the chunk;
    - so this way a space followed by a cursor move can be treated as only one space: it helps to merge all spaces into one.
  - to make difference between real spaces and tracking ones, we used a factor of the space width (from the font)
    - it was a pretty good idea in general but it fails with some fonts where space was too big:
    - in Poppler, they're using a factor of the font size: this is an excellent idea (<= 0.1 * fontSize implies tracking space).",False
aae8a2128685f4af94bee2466096bdc2473c0ba7,2021-10-17 15:59:25,Jonas Jenwald,"Revert ""For mozcentral use Firefox color theme instead of system theme."" since -moz-toolbar-prefers-color-scheme was removed

Reverts mozilla/pdf.js#13314, see https://groups.google.com/g/firefox-dev/c/vajhbYKDpPM

Given that `-moz-toolbar-prefers-color-scheme` was removed in https://bugzilla.mozilla.org/show_bug.cgi?id=1736038, unless we fix this before the next PDF.js update in mozilla-central we'll thus break dark mode in the Firefox built-in PDF Viewer.",False
ee800a064ac6304a2eb609362e10cea6a51745da,2021-10-17 15:19:08,Jonas Jenwald,Update l10n files,False
b0affcd87c89ecccd5c0b36ca038a6e60906f118,2021-10-17 15:17:09,Jonas Jenwald,"Fix (some) vulnerabilities reported by `npm audit`

This was done automatically, using the `npm audit fix` command.",False
a712b601ee11724cb37cbd572b86303b9f3d65f6,2021-10-17 15:12:09,Jonas Jenwald,"Update ESLint to version 8

Please refer to https://eslint.org/docs/8.0.0/user-guide/migrating-to-8.0.0

Given that this is a major version increase it also required updating ESLint plugins, see https://github.com/sindresorhus/eslint-plugin-unicorn/releases and https://github.com/jrdrg/eslint-plugin-sort-exports/releases",False
7746732934db6252ba8e8051f2dbbe5009f0f050,2021-10-17 15:07:40,Jonas Jenwald,"Update the `stylelint-config-prettier` package to the latest version

Please refer to https://github.com/prettier/stylelint-config-prettier/releases",False
decd585579feed62e05e093a11155f57c7e8e8c8,2021-10-17 15:03:19,Jonas Jenwald,Update npm packages,False
00720d059a86430078595bc84077a15ef0340fef,2021-10-16 17:57:47,Jonas Jenwald,"[api-minor] Include the /Lang-property in the `documentInfo`, and use it in the viewer (issue 14110)

*Please note:* This is a tentative patch, since I don't have the necessary a11y-software to actually test it.

To avoid having to add a new API-method just for a single string, I figured that adding the new property to the existing `documentInfo`-data (accessed via `PDFDocumentProxy.getMetadata` in the API) will hopefully be deemed acceptable.",False
52fce0d17bcd0fa7fa7747ee1a7c67a172c3f4e0,2021-10-16 17:53:47,Tim van der Meij,"Merge pull request #14152 from Snuffleupagus/xfaFactory-typo

Fix a `xfaFaxtory` typo in the shadowing in the  `PDFDocument.xfaFactory` getter, and some other clean-up",True
9890f35eec7015cd5f56324b0634540c84f2a1a8,2021-10-16 17:33:36,Tim van der Meij,"Merge pull request #14103 from Snuffleupagus/PDFFindController-event

[api-minor] Change `PDFFindController` to use the ""find""-event directly (issue 12731)",True
004123007218a96784fc604dac89111b2c69fb6b,2021-10-16 16:26:21,Jonas Jenwald,"Re-name the `XFAFactory.numberPages` getter to `XFAFactory.numPages` for consistency

All other similar getters are called `numPages` throughout the code-base, and improved consistency should always be a good thing.",False
0e5348180efcb140c49aa131a3072574664b9364,2021-10-16 16:26:20,Jonas Jenwald,"Fix the inconsistent return type of the `PDFDocument.isPureXfa` getter

Also (slightly) simplifies a couple of small getters/methods related to the `XFAFactory`-instance.",False
cd94a44ca1b02315300fbdf22e5db07e382e028d,2021-10-16 16:26:17,Jonas Jenwald,"Remove some duplication in *simple* shadowed getters in `src/core/`-code

In these cases there's no good reason, in my opinion, to duplicate the `shadow`-lines since that unnecessarily increases the risk of simple typos (see the previous patch).",False
1450da4168854c59ac082026bb3360cef4ec6e78,2021-10-16 15:24:12,Jonas Jenwald,"Fix a `xfaFaxtory` typo in the shadowing in the `PDFDocument.xfaFactory` getter

With this typo the shadowing doesn't actually work, which causes these checks to be unnecessarily repeated. In this particular case it didn't have a significant performance impact, however we should definately fix this nonetheless.",False
fa8c0ef6164c7abfd5236e97823102a89517f8a4,2021-10-16 14:06:22,Jonas Jenwald,"[api-minor] Change `PDFFindController` to use the ""find""-event directly (issue 12731)

Looking at the code, I do have to agree with the point made in issue 12731 about it being unexpected/unhelpful that the `PDFFindController.executeCommand`-method isn't directly usable with the ""find""-event.
The reason for it being this way is, as so often, for historical reasons: The `executeCommand`-method was added (just) prior to the introduction of the `EventBus` in the viewer.

Obviously we cannot simply change the existing `PDFFindController.executeCommand`-method, since that'd be a breaking change in code which has existed for over five years.
Initially I figured that we could simply add a new method in `PDFFindController` that'd accept the state from the ""find""-event, however after thinking about this and looking through the use-cases in the default viewer I settled on a slightly different approach: Let the `PDFFindController` just listen for the ""find""-event (on the `EventBus`-instance) directly instead, which also removes one level of (unneeded) indirection during searching in the default viewer.

For GENERIC builds of the PDF.js library, the old `PDFFindController.executeCommand`-method is still available with a deprecation warning.",False
cd22c317522e4e3f319069a7bdc7c96b0d1270fb,2021-10-16 02:12:13,Jonas Jenwald,"Fix the remaining `Promise.resolve(undefined)` cases

Many years ago now there were some `Promise` implementations that had issues resolving with an *implicitly* `undefined` value. That should no longer be the case, and we've not been using the `Promise.resolve(undefined)` format for a long time, hence this patch fixes the few remaining cases.",False
a37bc609e80d9dead8d86c8923a1eb7e3d43cacf,2021-10-16 02:05:31,Jonas Jenwald,"Merge pull request #14149 from mikemando/path-1

Convert examples/learning/helloworld64.html to await/async",True
e504e81cda606f617658d30f8a0e4f2a448d8437,2021-10-16 01:10:51,Tim van der Meij,"Merge pull request #14112 from Snuffleupagus/ScrollMode-PAGE

Add a new Page scrolling mode (issue 2638, 8952, 10907)",True
ed3da1986987e38a2a7cb9241b301a24f82e200e,2021-10-16 00:50:06,Tim van der Meij,"Merge pull request #14131 from Snuffleupagus/spreadMode-render-holes

Ensure that pre-rendering works correctly with spreadModes at higher zoom levels",True
ef0713e055e8bec1c7ab000d854b1f3feb7447fd,2021-10-16 00:44:43,Tim van der Meij,"Merge pull request #14148 from Snuffleupagus/editorconfig-json

Ensure that the EditorConfig rules apply to `*.json` and `*.pdf.link` files as well",True
ec5e7445f68459cbeed4dbf93cb6f167871766a3,2021-10-16 00:30:54,michael-ikwuegbu,Convert examples/learning/helloworld64.html to await/async,False
6863f368809cdaa6575b7a0c2d6dbb72fd9c564d,2021-10-15 18:54:52,calixteman,"Merge pull request #14145 from janekotovich/application/octet

XFA - Embedded image is missing",True
540d32c4868eaafa3516132af6168ab21809e1d1,2021-10-15 17:16:11,Jonas Jenwald,"Ensure that the EditorConfig rules apply to `*.json` and `*.pdf.link` files as well

This looks like a simple oversight, given the other file formats listed, and should hopefully help new users when adding reference tests.",False
c2af309917103f66469b8595bdfce53b7916a07e,2021-10-15 16:42:29,Jane-Kotovich,XFA - Embedded image is missing,False
fc56a781d327422351248f8f894fd6efe771f118,2021-10-15 15:05:05,Jonas Jenwald,"Merge pull request #14141 from adenicole/master

Convert examples/text-only/pdf2svg.js to await/async",True
fdf08ef3d26d7d1446ddb019668b6a71373163fc,2021-10-15 14:24:10,adenicole,"converted examples/text-only/pdf2svg.js to await/async

Updated promise call back with await/async method",False
c1617be2d7547c369216988c2a91943e43e71685,2021-10-15 13:01:14,Jonas Jenwald,"Merge pull request #14143 from raghav-wd/patch-1

docs: Fix grammatical error",True
04aa710947f98c512fbef4644ee0c609a1f8fb4f,2021-10-15 01:09:09,Devansh Gupta,docs: Fix grammatical error,False
4b8496e70f4ed3c511e83ada1f81e55708f9bac7,2021-10-15 00:32:47,Jonas Jenwald,"Merge pull request #14138 from catherinemds/await/async-issue

 Convert examples/learning/helloworld.html to await/async",True
47f60a7f2217519a027542af36b8d78eb75b3a87,2021-10-14 23:48:24,Catherine,Convert examples/learning/helloworld.html to await/async,False
9f9f07613f1e7f20548253211a4c5061c8df06fa,2021-10-14 16:41:51,Jonas Jenwald,"Merge pull request #14134 from janekotovich/convert_pdf2png_to_async

Convert examples/node/pdf2png/pdf2png.js to await/async",True
37d90ec378f2ff74a9e5e150173e00517e63c4b4,2021-10-14 16:05:18,Jane-Kotovich,Convert examples/node/pdf2png/pdf2png.js to await/async,False
08e2427f9cfce59704c6c3d923130dfde4270c08,2021-10-14 14:50:49,Jonas Jenwald,"Ensure that pre-rendering works correctly with spreadModes at higher zoom levels

Having recently worked with this code, in PR 14096 (and indirectly in PR 14112), I happened to notice a pre-existing issue with spreadModes at higher zoom levels.
The `PDFRenderingQueue` code was written back when the viewer only supported ""normal"" vertical scrolling, and some edge-cases related to spreadModes are thus not perfectly supported. Depending on the zoom level, it's possible that there are ""holes"" in the currently visible page layout, and those pages will not be pre-rendered as you'd expect.

*Steps to reproduce:*

 0. Open the viewer, e.g. https://mozilla.github.io/pdf.js/web/viewer.html
 1. Enable vertical scrolling.
 2. Enable the ODD spreadMode.
 3. Scroll down, such that both pages 1 and 3 are visible.
 4. Zoom-in until *only* page 1 and 3 are visible.
 5. Open the devtools and, using the DOM Inspector, notice how page 2 is *not* being pre-rendered despite all surrounding pages being rendered.",False
f6d9d91965a97c80b6f5b335a27cdb4d36b1b9e2,2021-10-13 23:08:03,Tim van der Meij,"Merge pull request #14116 from Snuffleupagus/api-more-optional-chaining

Use even more optional chaining in the `src/display/api.js` file",True
29fd87be5758ae2cb37d73ca468965198aefc3ba,2021-10-13 18:45:46,Jonas Jenwald,"Merge pull request #14118 from adventhp/cmap-format-2

Implement TrueType character map ""format 2"" (fixes #14117)",True
586295fad60fc39c18a6e59508e66081a29ba77f,2021-10-13 17:07:14,Jay Berkenbilt,"Implement TrueType character map ""format 2"" (fixes #14117)

If a PDF included an embedded TrueType font whose preferred character
map (cmap) was in ""format 2"", the code would select that character map
and then refuse to read it because of an unsupported format, thus
causing the characters not to be rendered. This commit implements
support for format 2 as described at the link below.

https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6cmap.html",False
e1a2e916e89d7937eb4ff25f629aad1f51dafae3,2021-10-12 17:15:19,Jonas Jenwald,"Move `PDFSinglePageViewer` into the `web/pdf_viewer.js` file

With the previous commit, both of the `PDFViewer` and `PDFSinglePageViewer` clases are now small/simple enough that it no longer seems necessary to keep them in separate files.",False
511458fbbc523a76610f3fb4927d308425939c47,2021-10-12 17:15:15,Jonas Jenwald,"Add a new Page scrolling mode (issue 2638, 8952, 10907)

This implements a new Page scrolling mode, essentially bringing (and extending) the functionality from `PDFSinglePageViewer` into the regular `PDFViewer`-class. Compared to `PDFSinglePageViewer`, which as its name suggests will only display one page at a time, in the `PDFViewer`-implementation this new Page scrolling mode also support spreadModes properly (somewhat similar to e.g. Adobe Reader).

Given the size and scope of these changes, I've tried to focus on implementing the basic functionality. Hence there's room for further clean-up and/or improvements, including e.g. simplifying the CSS/JS related to PresentationMode and implementing easier page-switching with the mouse-wheel/arrow-keys.",False
8fc9c7e41c8fa2ca68e97e961d1776e38364e94e,2021-10-12 15:35:59,Jonas Jenwald,"Use even more optional chaining in the `src/display/api.js` file

This patch (slightly) simplifies a couple of `onProgress` and `onUnsupportedFeature` call-sites.
Finally, while unrelated, also removes some unnecessary `return undefined;` statements (PR 11601 follow-up).",False
39459656052fe822bb7f57eccf8c029c804f64f7,2021-10-10 18:59:54,Tim van der Meij,"Merge pull request #14108 from Snuffleupagus/issue-14107

For Annotations that define a closed area, make all of it toggle the PopupAnnotation (issue 14107)",True
8721557a08fb49bb79d210b774e3af1d1e8b5a83,2021-10-09 19:25:15,Jonas Jenwald,"For Annotations that define a closed area, make all of it toggle the PopupAnnotation (issue 14107)

For Circle, Square, and Polygon Annotations it's currently only possible to toggle the associated PopupAnnotation by clicking on its border. Depending on the border width, and also the current zoom-level in the viewer, that can make interacting with certain Annotations *practically* impossible (which is the case in issue 14107).
Hence, in order to improve this, change the ""fill""-property of the SVG element in the annotationLayer to make the *entire* element part of the click/mouse-over target.

*Please note:* Given that this is a viewer-related issue, there's no simple way to test this as far as I can tell.",False
56e3ef68d42e8cef9f95bb5c801c14c250c75b82,2021-10-09 17:59:10,Tim van der Meij,"Merge pull request #14106 from calixteman/names

Empty name is allowed in ISO 32000",True
63370ff12fd1f6da15d012e2408347d248bd837e,2021-10-09 17:55:25,Tim van der Meij,"Merge pull request #14111 from Snuffleupagus/bug-1734802

Take the /CIDToGIDMap data into account when computing the hash, in `PartialEvaluator.preEvaluateFont`, for composite fonts (bug 1734802)",True
69a97bcba7637967e05547f2a2803463637ddfef,2021-10-08 16:45:21,Jonas Jenwald,"Take the /CIDToGIDMap data into account when computing the hash, in `PartialEvaluator.preEvaluateFont`, for composite fonts (bug 1734802)

This is unfortunately *yet another* bug in the `preEvaluateFont`-implementation, and I've lost count of the number of times I've had to tweak this code over the years :-(
I really cannot help thinking that PR 4423 was way too simplistic, since it missed a bunch of cases that leads to broken font rendering in many PDF documents.

Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1734802",False
f384ad2356f162b75e911db352e9564d715f5332,2021-10-07 00:20:39,Calixte Denizet,"Empty name is allowed in ISO 32000
  - the exact sentence from the spec:
    ""The token SOLIDUS (a slash followed by no regular characters) introduces a unique valid name defined by the empty sequence of characters.""
  - so just remove the warning.",False
da8df646f59c1f37cb5402f3efabcc6ce515b9f9,2021-10-06 13:14:28,Jonas Jenwald,"Merge pull request #14101 from Snuffleupagus/comb-regression

[Regression] Fix comb fields scrolling when the last character is entered (PR 14049 follow-up)",True
8010181078c231f1ffd988d8d6ebf2498a910c56,2021-10-05 13:06:08,Jonas Jenwald,"[Regression] Fix comb fields scrolling when the last character is entered (PR 14049 follow-up)

Note that PR 14049 removed this, since https://github.com/mozilla/pdf.js/pull/14049#discussion_r716245518 claimed that it's not necessary anymore. Unfortunately that, in my testing on Windows, actually re-introduced exactly the issue described in the comment; more specifically once the *last* character has been entered in the comb-field it's now again incorrectly scrolled (with the first character being invisible) until focus is lost.

This can be tested with e.g. `f1040.pdf`, see page 2, from the test-suite.",False
f5b79be0b7fc2e56bdc9829b2c98369afe2e4e8e,2021-10-03 16:49:36,Tim van der Meij,"Merge pull request #13948 from Snuffleupagus/structuredClone

Use the native `structuredClone` implementation when it's available",True
b9a2c4a817a2aaa7a80c6323aa15ad92d255656b,2021-10-03 16:44:53,Tim van der Meij,"Merge pull request #14099 from Snuffleupagus/update-packages

Update packages and translations",True
d49b1bf2eecd52ccd80a7eb4cfc25ad6d3531d7c,2021-10-03 14:25:33,Jonas Jenwald,"Use the native `structuredClone` implementation when it's available

With a recent addition to the HTML specification, the internal structured clone algorithm used in browsers is (or will be, once it's implemented) *directly* accessible to JavaScript; please see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/structuredClone

Hence we'll *eventually* not need to maintain our own structured clone functionality in the `LoopbackPort`-class in the API, however for the time being we'll feature detect `structuredClone` and fallback to the existing PDF.js implementation.

Given that https://bugzilla.mozilla.org/show_bug.cgi?id=1722576 has landed in Firefox 94, we should no longer need the manually implemented `cloneValue`-functionality in MOZCENTRAL builds. Note also that in the Firefox built-in PDF Viewer it's not possible for users to *easily* disable workers, which should further reduce the risk of these changes.",False
65118bc04d38c7acb918ee3c0ff8f766297a7e2e,2021-10-03 12:03:21,Jonas Jenwald,Update l10n files,False
de18c35c9bbd359981f91a896f2e9e3a5d7b6445,2021-10-03 12:00:20,Jonas Jenwald,"Update the `es-module-shims` package to the latest version

Please refer to https://github.com/guybedford/es-module-shims/blob/main/CHANGELOG.md",False
ff271f2cff05ded336e81483e77945cefb8db1be,2021-10-03 12:00:18,Jonas Jenwald,Update npm packages,False
a474d6c30f29e761b2cef161d03590e6fc96287c,2021-10-02 18:30:59,Tim van der Meij,"Merge pull request #14097 from timvandermeij/bump

Bump versions in `pdfjs.config`",True
9e3e609b8e6eb03b3ee5d484cdcafe1763e21d6e,2021-10-02 18:26:14,Tim van der Meij,Bump versions in `pdfjs.config`,False
dedff3c98226ad50a63cc6eccf07e3d3308f15b7,2021-10-02 16:24:19,Tim van der Meij,"Merge pull request #14096 from Snuffleupagus/spreadMode-preRender

Pre-render *one* additional page when spreadModes are enabled",True
7beb67af7b2a0766785654b5f04855cf8c931f92,2021-10-02 16:09:10,Tim van der Meij,"Merge pull request #14092 from Snuffleupagus/xfa-addLinkAttributes

[api-minor] Ensure that various URL-related options are applied in the `xfaLayer` too",True
8cb6efec2d449f7c4599fb32f7d4cddddee876a7,2021-10-02 15:58:00,Jonas Jenwald,"[api-minor] Add a wrapper around the `addLinkAttributes`-function, in the API, to the `PDFLinkService` implementations

This patch helps reduce some duplication, given that we now have a few essentially identical `addLinkAttributes` call-sites in the code-base.
To prevent runtime errors in the Annotation/XFA-layer code, we'll warn if a custom/incomplete `PDFLinkService` is being used (limited to GENERIC builds).",False
e4794a678ac27a0fed2296e95f3043356c78ec10,2021-10-02 15:27:34,Jonas Jenwald,"Pre-render *one* additional page when spreadModes are enabled

Please note that we (obviously) don't want to unconditionally pre-render more than one page all the time, since that could very easily lead to overall worse performance in some documents.[1]
However, when spreadModes are enabled it does make sense to attempt to pre-render both of the pages of the next/previous spread.

---
[1] Since it may cause pre-rendering to unnecessarily compete for parsing resources, on the worker-thread, with ""regular"" rendering.",False
fb6c807ba2d5718fb2ca100a738d3df9ca95e402,2021-10-02 15:27:32,Jonas Jenwald,Reduce unnecessary duplication in `PDFRenderingQueue.getHighestPriority`,False
bb9c905c5d6d11883888f328d288384e764f19fa,2021-10-02 13:02:23,Jonas Jenwald,"Ensure that various URL-related options are applied in the `xfaLayer` too

Note how both the annotationLayer and the document outline will apply various URL-related options when creating the link-elements.
For consistency the `xfaLayer`-rendering should obviously use the same options, to ensure that the existing options are indeed applied to all URLs regardless of where they originate.",False
284d2590546b90729df9beee13631dd0f69feeaa,2021-10-02 02:52:25,Jonas Jenwald,"Merge pull request #14057 from Snuffleupagus/bug-920426

Support CMap-data with only strings, when parsing TrueType composite fonts (bug 920426)",True
d588f5f9612c1fcf3ff044cd94d2b4916c8f523f,2021-10-01 13:25:14,Jonas Jenwald,"Merge pull request #14095 from Snuffleupagus/annotationLayer-rm-forEach

Replace a couple of `Array.prototype.forEach`-invocations with `for..of` instead",True
67a642c826a9ac3d0ca481eda7d40c47a3f9419c,2021-10-01 12:36:17,Jonas Jenwald,"Replace a couple of `Array.prototype.forEach`-invocations with `for..of` instead

Given that `NodeList`s can be iterated using `for..of` we can use that instead, since it's a little bit nicer and easier to read than the `Array.prototype.forEach` format.",False
09361a4bb42ca048827599c5687df8b8845e30ee,2021-10-01 01:52:09,calixteman,"Merge pull request #14083 from calixteman/reset

AcroForm: Add support for ResetForm action",True
aecbd7cd8982e72f26359ed9a00a77b25e6494d9,2021-10-01 01:32:33,Calixte Denizet,"AcroForm: Add support for ResetForm action
  - it aims to fix #12721.
  - Thanks to PR #14023, we've now the fieldObjects in the annotation layer so we can easily map fields names on their id if needed.
  - Reset values in the storage, in the JS sandbox and in the visible html elements.",False
d3ca28bc348384c054f0c03606856463e3b2f20a,2021-09-30 21:40:47,Jonas Jenwald,"Support CMap-data with only strings, when parsing TrueType composite fonts (bug 920426)

In the referenced bug, the embedded fonts contain custom CMap-data that only include strings. Note how for embedded composite TrueType fonts we're using the CMap-data when building the glyph mapping, and currently we end up with a completely empty map because the code expects only CID *numbers*.
Furthermore, just fixing the glyph mapping alone isn't sufficient to fully address the bug, since we also need to consider this ""special"" kind of CMap-data when looking up glyph widths.",False
db7c91e7b17b6e8738733304adbd824300c4fd3f,2021-09-30 01:50:11,calixteman,"Merge pull request #14091 from calixteman/14049_fu

Add the missing pdf file for the test in the PR #14049",True
748ab4983ca60439968aa496747d2cc699a85a0a,2021-09-30 01:37:07,Calixte Denizet,Add the missing pdf file for the test in the PR #14049,False
9a74f3e6e0258f1833db376a24264592ff1765d6,2021-09-30 00:43:20,Tim van der Meij,"Merge pull request #14049 from calixteman/bg_from_mk

Annotation - Use border and background colors from MK dictionary",True
0776cd9b900989af49ef1de94b741c2399d12272,2021-09-27 00:19:26,Calixte Denizet,"Annotation - Use border and background colors from MK dictionary
  - it aims to fix #13003;
  - set the bg and fg colors as they're in the pdf;
  - put a transparent overlay to help to see the fields.",False
93ed4bfa119fe82c1fe1fe9cd7d08b1ae719b49e,2021-09-26 18:30:06,Tim van der Meij,"Merge pull request #14081 from Snuffleupagus/createValidAbsoluteUrl-options

[api-minor] Move the `addDefaultProtocolToUrl`/`tryConvertUrlEncoding` functionality into the `createValidAbsoluteUrl` function",True
e6e04694f4107c5837d6d68d89daad695f335e0b,2021-09-26 17:59:54,Jonas Jenwald,"[api-minor] Move the `addDefaultProtocolToUrl`/`tryConvertUrlEncoding` functionality into the `createValidAbsoluteUrl` function

Having recently worked with, and reviewed patches touching, this code it seemed that it's probably not a bad idea to move that functionality into `createValidAbsoluteUrl` as new options instead.

For the `addDefaultProtocolToUrl` functionality in particular, the existing helper function was not only moved but slightly improved as well. Looking at the code, I realized that there's a small risk that it would incorrectly match a *relative* URL-string too.

With these changes, the `createValidAbsoluteUrl` call-sites in the `src/core/`-code can be simplified a little bit.

*Please note:* This patch may, indirectly, change the format of the `unsafeUrl`-property returned with relevant Annotations and OutlineItems; hence the `api-minor` tag.
However, I'd argue that it's actually more correct this way since the whole purpose of `unsafeUrl` is/was to return the URL data as-is without any parsing done.",False
3b3c487bed43900c5f55c3535c6f7697fed64e93,2021-09-26 13:37:19,Jonas Jenwald,"Merge pull request #14076 from calixteman/1716758

XFA - Add <a> element in button when an url is detected (bug 1716758)",True
f1ceb00ae45f3e4115dbb4c6f685735e3ea4cd10,2021-09-26 03:02:11,Jonas Jenwald,"Merge pull request #14077 from calixteman/driver

Fix issues in driver.js when getting css sheets",True
558e58f35451ae9b37b0caf59536704014cdaa7c,2021-09-26 01:29:39,Calixte Denizet,"XFA - Add <a> element in button when an url is detected (bug 1716758)
  - it aims to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1716758;
  - some buttons have a JS action with the pattern `app.launchURL(...)` (or similar) so extract when it's possible the url and generate a <a> element with the href equals to the found url;
  - pdf.js already had some code to handle that so this patch slightly refactor that.",False
3b1d54773843d473dccc3e319ffaf3e70e1879a9,2021-09-25 23:04:03,calixteman,"Merge pull request #14036 from calixteman/14021

Annotation - Some checkboxes have an empty N dictionary",True
4b96735e1d67c5c8363016b32c831dd18e44846b,2021-09-25 21:26:30,Calixte Denizet,Fix issues in driver.js when getting css sheets,False
c0e9108d00fd9ed3054bfc6a6b274c33ee279a65,2021-09-25 19:30:47,Calixte Denizet,"Annotation - Some checkboxes have an empty N dictionary
  - it aims to fix #14021;
  - the N dict is empty here so just create a default one;
  - it implies that the checked checkbox has no appearance so create a default one too in order to print it;
  - in the pdf in the issue, a checked box is not printed because it has no default appearance so we need to guess its appearance from its state.",False
cc110b8542332ae263c82ddffd65f6f8f0a38758,2021-09-25 16:11:57,Tim van der Meij,"Merge pull request #14064 from Snuffleupagus/issue-13845

Fallback to font name matching, when checking for serif fonts (issue 13845)",True
b23b8d8a5d4bf064b7dd53999db237ba5abcc96b,2021-09-25 16:07:44,Jonas Jenwald,"Merge pull request #14074 from Snuffleupagus/issue-14046

[api-minor] Add basic support for RTL text-content in PopupAnnotations (issue 14046)",True
36dc93fe5d4514a27cc03baf361b508842c27714,2021-09-25 15:55:56,Tim van der Meij,"Merge pull request #14065 from Snuffleupagus/fewer-EXPORT_DATA_PROPERTIES

[api-minor] Stop exporting, by default, a few additional Font properties (PR 11777 follow-up)",True
ee34572fd0df720ee3f084d3310749909c23cd13,2021-09-25 15:52:17,Tim van der Meij,"Merge pull request #14070 from Snuffleupagus/MessageHandler-local-vars

Some small readability improvements in the `MessageHandler` code",True
07558c158d8e28f02d98a4c8d2ef0941c093b9bc,2021-09-25 15:45:33,Tim van der Meij,"Merge pull request #14069 from Snuffleupagus/deprecate-OPS-paintJpegXObject

Mark the `paintJpegXObject` operator as deprecated (PR 11601 follow-up)",True
1dcd2f0cd3d4d404c5b2747f9d15793599088b3c,2021-09-25 12:48:58,Jonas Jenwald,"[api-minor] Add basic support for RTL text-content in PopupAnnotations (issue 14046)

In order to implement this, we utilize the existing `bidi` function to infer the text-direction of /T and /Contents entries. While this may not be perfect in cases where one PopupAnnotation mixes LTR and RTL languages, it should work well enough in most cases.
To avoid having to add *two new* properties in lots of annotations, supplementing the existing `title`/`contents`-properties, this patch instead re-factors the existing code such that the properties are replaced by Objects (containing `str` and `dir`).

*Please note:* In order avoid breaking existing third-party implementations, `GENERIC`-builds of the PDF.js library will still provide the old `title`/`contents`-properties on annotations returned by `PDFPageProxy.getAnnotations`.",False
104e0493386fca4dd2791265254f9d99fa9e3a3b,2021-09-24 21:31:52,calixteman,"Merge pull request #14073 from calixteman/bindItems

XFA - Bind items when there's a bindItems entry",True
e4d62db9e36056f70f615ad1cc89ab01006d121c,2021-09-24 21:31:29,calixteman,"Merge pull request #14072 from calixteman/issue14071

XFA - Create a new page in case of overflow",True
97c1e076a156055c79bbbeb3eb9b21eb1b1eb1b7,2021-09-24 19:38:58,Calixte Denizet,"XFA - Bind items when there's a bindItems entry
  - In the pdf in issue #14071, some select fields don't contain any values;
  - the corresponding node has a bindItems and a bind elements and _bindItems function was just not called.",False
cd73e282ebf8349bb6bbec58d139496aa9527057,2021-09-24 18:27:55,Calixte Denizet,"XFA - Create a new page in case of overflow
  - it aims to fix #14071;
  - a subform is overflowing and the the target in case of overflow is itself. In this case we must create a new page.",False
890a6c1108cef949bba254ef40be79fd3766be63,2021-09-24 16:37:20,Jonas Jenwald,"Some small readability improvements in the `MessageHandler` code

In particular the `_processStreamMessage`-method is a bit cumbersome to read, given the way that the current streamController/streamSink is accessed, which we can improve with a couple of local variables.",False
7d56fb4cbf789caf2e833afbb4b6799b53e38688,2021-09-24 16:17:28,Jonas Jenwald,"Mark the `paintJpegXObject` operator as deprecated (PR 11601 follow-up)

After PR 11601, the `paintJpegXObject` operator is no longer used for anything. While I don't think we can just remove it, and essentially leave a ""hole"" in the `OPS` structure, we should at least mark it as explicitly unused to aid readability/maintainability of the code.",False
c3ca78fdf8759d8cf7c8c4f35627c25a64e6bc7b,2021-09-24 06:33:04,Brendan Dahl,"Merge pull request #14042 from serdnab/doc-info-color

Fix dialogs with forced colors (bug 1722984)",True
d370a281c450887e65b677520f5395016d182429,2021-09-24 03:37:00,Brendan Dahl,"Merge pull request #14067 from calixteman/1732344

Don't save anything in XFA entry if no XFA! (bug 1732344)",True
02aa107b2127a2d2f8330d520608b330b21abb18,2021-09-24 00:52:51,Jonas Jenwald,"Merge pull request #14068 from kjenova/master

Fix typo ""_annotatationMode"" => ""_annotationMode""",True
f38b3ce523d5481fea28d7f47acf871aa7690048,2021-09-24 00:35:33,Jonas Jenwald,"Merge pull request #14066 from Snuffleupagus/XFAF-viewer-warning

Print a special warning message, in the viewer, for XFA Foreground documents",True
4b0538d07ac4e79b7cdbb21b373a5f5315459829,2021-09-23 23:21:23,Calixte Denizet,"Don't save anything in XFA entry if no XFA! (bug 1732344)
  - it aims to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1732344
  - rename some variables to have a more clear code;
  - and last but no least, add a unit test to test saving.",False
d1e3900a3d3cf7d1af348f8be419befa5d539fbc,2021-09-23 22:12:33,kjenova,"Fix typo ""_annotatationMode"" => ""_annotationMode""",False
fd1f0f647f46e858d731f598fc1022ba1762b610,2021-09-23 18:32:24,Jonas Jenwald,"Print a special warning message, in the viewer, for XFA Foreground documents

Currently XFAF documents use the same warning message as in the XFA *disabled* case, which is neither helpful nor correct.",False
c914e9f0a631b92ed81d1a685b42ae088adefcdc,2021-09-23 17:35:55,Jonas Jenwald,"Merge pull request #14023 from Snuffleupagus/AnnotationLayer-getElementsByName

Re-factor `document.getElementsByName` lookups in the AnnotationLayer (issue 14003)",True
386acf5bdd0788224fba604339be2e887e4aa225,2021-09-23 16:35:18,Calixte Denizet,Integration test for PR #14023,False
6cba5509f26ede9986cbc4c100b037d3347d7c91,2021-09-23 16:35:18,Jonas Jenwald,"Re-factor `document.getElementsByName` lookups in the AnnotationLayer (issue 14003)

This replaces direct `document.getElementsByName` lookups with a helper method which:
 - Lets the AnnotationLayer use the data returned by the `PDFDocumentProxy.getFieldObjects` API-method, such that we can directly lookup only the necessary DOM elements.
 - Fallback to using `document.getElementsByName` as before, such that e.g. the standalone viewer components still work.

Finally, to fix the problems reported in issue 14003, regardless of the code-path we now also enforce that the DOM elements found were actually created by the AnnotationLayer code.
With these changes we'll thus be able to update form elements on all visible pages just as before, but we'll additionally update the AnnotationStorage for not-yet-rendered elements thus fixing a pre-existing bug.",False
9acfe486d4db0e53751e611ff4470efa9d2e6376,2021-09-23 04:41:57,Jonas Jenwald,"Fallback to font name matching, when checking for serif fonts (issue 13845)

In order to handle fonts that specify completely bogus /Flags-entries, fallback to font name matching to determine if the font is a serif one.",False
e027748627bfc1739ebbb266d7ead259ddd38846,2021-09-23 04:14:43,Jonas Jenwald,"[api-minor] Stop exporting, by default, a few additional Font properties (PR 11777 follow-up)

*This is similar to the ""isSymbolicFont""-property, which is no longer exported by default after PR 11777.*

Both ""isMonospace"" and ""isSerifFont"" are internal properties, used during font parsing and building of the glyph mapping on the worker-thread.
However both of these properties are completely unused on the main-thread and/or in the API, and accessing them they will now require setting the `fontExtraProperties`-option when calling `getDocument`.",False
8dc22f40c7ae306dfafb426228574f101f23c1b6,2021-09-23 02:03:40,Tim van der Meij,"Merge pull request #14063 from Snuffleupagus/disablePreferences-warning

[GENERIC viewer] Warn about AppOptions being overridden by Preferences during loading",True
1bef4e596c8a3d6b22ee307e31e79ddcf85cc68f,2021-09-23 01:56:32,Tim van der Meij,"Merge pull request #14058 from Snuffleupagus/EventBus-data

[api-minor] Change `EventBus.dispatch` to only support *one* data-argument",True
5254676ef33c316e93aad7f372ab199a609ae3db,2021-09-23 01:54:51,Tim van der Meij,"Merge pull request #14055 from Snuffleupagus/PDF_TO_CSS_UNITS

Add `PDF_TO_CSS_UNITS` to the `PixelsPerInch`-structure",True
96b38f6cbd4bcc97c35afaf329b677d769784bc8,2021-09-22 19:13:26,Jonas Jenwald,"[GENERIC viewer] Warn about AppOptions being overridden by Preferences during loading

Currently any AppOptions set using e.g. the ""webviewerloaded"" event listener can/will by default be overridden when the Preferences are read.
To avoid that happening the ""disablePreferences""-option can be used, however unless it's been explicitly set all non-default AppOptions will be silently ignored. This patch thus attempts to improve the current situation somewhat, for third-party implementations, by logging a warning in the console when this happens.",False
af748050c07ed09fea8f75de4ef6823c4fafa63d,2021-09-22 15:51:33,Jonas Jenwald,"[api-minor] Change `EventBus.dispatch` to only support *one* data-argument

This is consistent with how the `EventBus` has *always* been used internally in the viewer, and allows a slight simplification of the relevant code.",False
638115885584b82ee9ea6fed83aa7ae15348ba27,2021-09-22 01:07:19,Jonas Jenwald,"Merge pull request #14056 from Snuffleupagus/bug-1731240

Correctly validate URLs in XFA documents (bug 1731240)",True
81a1c1cef73ef98041b5ec07ecd3412f0aee4a89,2021-09-22 00:51:01,Jonas Jenwald,"Correctly validate URLs in XFA documents (bug 1731240)

With this patch we'll ensure that only valid absolute URLs can be used in XFA documents, similar to the existing validation done for ""regular"" PDF documents.
Furthermore, we'll also attempt to add a default protocol (i.e. `http`) to URLs beginning with ""www."" in XFA documents as well; this on its own is enough to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1731240",False
3e550f392ae2c0736e3a7338ca39620a82584dde,2021-09-20 16:50:09,Jonas Jenwald,"Add `PDF_TO_CSS_UNITS` to the `PixelsPerInch`-structure

Rather than re-computing this value in a number of different places throughout the code-base[1], we can expose this in the API via the existing `PixelsPerInch`-structure instead.
There's also been feature requests asking for the old `CSS_UNITS` viewer constant to be made accessible, such that it could be used in third-party implementations.

I suppose that it could be argued that it's somewhat confusing to place a unitless property in `PixelsPerInch`, however given that the `PDF_TO_CSS_UNITS`-property is defined strictly in terms of the existing properties this is hopefully deemed reasonable.

---
[1] These include:
 - The viewer, with the `CSS_UNITS` name.
 - The reference-tests.
 - The display-layer, when rendering images; see PR 13991.",False
580bfad6288ca17b90db2dea90914103394d4c1d,2021-09-19 16:49:42,Tim van der Meij,"Merge pull request #14053 from Snuffleupagus/BaseViewer-zoom-in/out

Move the zoomIn/zoomOut functionality into `BaseViewer` (PR 14038 follow-up)",True
c7dd99da768beb83c397460a34d293fc9e101ca4,2021-09-19 16:12:43,Tim van der Meij,"Merge pull request #14050 from Snuffleupagus/issue-14048

Tweak how fonts with an /Encoding are handled in `adjustToUnicode` (issue 14048, PR 13277 follow-up)",True
92be4645a91a53bd1646177829c0dae12c5b476f,2021-09-19 16:00:42,Tim van der Meij,"Merge pull request #14052 from Snuffleupagus/update-packages

Update packages and translations",True
d9f9fa4f1c1f2000a93aeb1461bd94ec73771b2a,2021-09-19 15:24:57,Jonas Jenwald,"Move the zoomIn/zoomOut functionality into `BaseViewer` (PR 14038 follow-up)

Given the simplicity of this functionality, we can move it from the default viewer and into the `BaseViewer` class instead. This way, it's possible to support more scripting functionality in the standalone viewer components; please see PR 14038.

Please note that I purposely went with `increaseScale`/`decreaseScale`-method names, rather than using ""zoom"", to better match the existing `currentScale`/`currentScaleValue` getters/setters that's being used in the `BaseViewer` class.",False
32ad677f9cd627d5e9fcc8bae4fa0f887a737b4a,2021-09-19 13:13:15,Jonas Jenwald,Update l10n files,False
a09d7797fbb75eb0c23a5a97eab5770869982d01,2021-09-19 13:09:56,Jonas Jenwald,"Update the `eslint-plugin-unicorn` package to the latest version

Please refer to https://github.com/sindresorhus/eslint-plugin-unicorn/releases/tag/v36.0.0",False
57734b11f6640e2557f243021c735d956d97a846,2021-09-19 13:03:05,Jonas Jenwald,"Update the `es-module-shims` package to the latest version

Please refer to https://github.com/guybedford/es-module-shims/blob/main/CHANGELOG.md",False
8679bb7aab44958aeda0c320cc02291df4d76374,2021-09-19 13:01:42,Jonas Jenwald,Update npm packages,False
8ea27ce157217baf14ae43f815ca36eda45d9138,2021-09-19 02:14:25,Jonas Jenwald,"Tweak how fonts with an /Encoding are handled in `adjustToUnicode` (issue 14048, PR 13277 follow-up)

Currently we only exclude /Encoding entries that also contains a /Differences array, which is the cause of the text-selection problem in the referenced issue.
In order to address this we'll now also exclude /Encoding entries that contain one of the predefined *named* encodings, and no longer require that it also contains a /Differences array.

*Please note:* This patch cases a small ""regression"" in the `bug1130815-text` test-case, however this is actually an improvement when compared with Adobe Reader and PDFium (in Google Chrome).",False
83d3bb43f434b8475cd13f1f9456099677d60acb,2021-09-18 20:17:06,Tim van der Meij,"Merge pull request #14041 from Snuffleupagus/issue-9367

Support cmaps with only CID characters, when building the ToUnicode-map (issue 9367)",True
20eb6ca2ecd4454f5bfdfc9db546d74e4ebce7d4,2021-09-18 20:01:45,Jonas Jenwald,"Merge pull request #14044 from calixteman/bug1719148

Annotations - Avoid empty value in text field when storage contains something for it (bug 1719148)",True
2375318a7003a37fa9b52f27781ba85dbdf524d9,2021-09-18 20:01:15,Tim van der Meij,"Merge pull request #14005 from Snuffleupagus/issue-13997

[GENERIC viewer] Always show the Download-buttons, to allow saving of forms (issue 13997)",True
6634afd646e5c5e2b3445f7aa4810d84af03c618,2021-09-18 19:43:20,Jonas Jenwald,"Merge pull request #14045 from calixteman/noise

XFA - Only warn about the wrong xfa type when there is an xfa thing",True
c870fb489e69269fd7f46b66a24ece88ccef1540,2021-09-18 19:38:19,Tim van der Meij,"Merge pull request #14013 from Snuffleupagus/api-unittest-instanceof

Improve the API unit-tests, and try to expose more API-functionality in the TypeScript definitions",True
213f3d4cbfe42ccdb3ee10db13100ad5a577a0d9,2021-09-18 19:32:55,Tim van der Meij,"Merge pull request #14043 from Snuffleupagus/AutomationEventBus

Re-factor the `EventBus` and `isInAutomation` handling (PR 11655 follow-up)",True
2fc10727c5492391f3bc9f1667ff1c4ef51894bc,2021-09-18 19:14:05,Calixte Denizet,XFA - Only warn about the wrong xfa type when there is an xfa thing,False
ffa2572bdff163fcebc963e270208d59477ebac3,2021-09-18 19:03:03,calixteman,"Merge pull request #14038 from calixteman/saveas

JS - Implement few possibilities with app.execMenuItem (bug 1724399)",True
f30e862a72a4534cb0f6a3ebbd35171629bd0217,2021-09-18 19:01:49,calixteman,"Merge pull request #14040 from calixteman/14039

JS - Avoid the Stay/Leave popup when clicking on a button with a JS action",True
eb762ad62488b024dadb9bacd5531c874252f356,2021-09-18 18:38:22,Calixte Denizet,"Annotations - Avoid empty value in text field when storage contains something for it (bug 1719148)
  - it aims to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1719148;
  - JS can set a property for a non-rendered annotation using the annotationStorage but the other unset default properties must be used when the annotation is finally rendered;
  - so this patch just adds the properties already set in the annotationStorage to the default value.",False
bfd570038dd8a8745f958c48f78cd9929ab23ccd,2021-09-18 17:22:32,Calixte Denizet,"JS - Implement few possibilities with app.execMenuItem (bug 1724399)
 - it aims to fix: https://bugzilla.mozilla.org/show_bug.cgi?id=1724399.",False
e3223b68fce739418bcd7280b9b820c3b8e9ca93,2021-09-18 16:09:48,Jonas Jenwald,"Extract some of the glyphMap handling, for non-embedded composite standard fonts, into a helper function

This reduces some unnecessary duplication, since we currently have essentially the same code in a handful of places in the `Font.fallbackToSystemFont`-method.",False
0e92f995c9098952213706793d46899f9e604ffb,2021-09-18 13:29:53,Jonas Jenwald,"Re-factor the `EventBus` and `isInAutomation` handling (PR 11655 follow-up)

Rather than forcing the ""regular"" `EventBus` to check and handle `isInAutomation` for every `dispatch` call, we can take advantage of subclassing instead.
Hence this PR introduces a new `AutomationEventBus` class, which extends `EventBus`, and is used by the default viewer when `isInAutomation === true`.",False
ed73cf6d502f02e0acebac67384000b597cab96b,2021-09-18 03:56:15,Jonas Jenwald,"Support cmaps with only CID characters, when building the ToUnicode-map (issue 9367)

In this particular case the `CMap`-data that we create contains only numbers, but no strings, which causes `PartialEvaluator.readToUnicode` to create a ToUnicode-map with only empty strings.

*Please note:* This is yet another case where I don't know if it's necessarily the best and most correct solution, but it does fix the referenced issue.",False
a3cc2e63ebdec46deb6a980b45c95d9c61322497,2021-09-18 03:13:31,unknown,removed unnecessary variable setting,False
e87c12bf3442e2f2363f9e9d20617278c9614c51,2021-09-18 00:34:07,Calixte Denizet,"JS - Avoid the Stay/Leave popup when clicking on a button with a JS action
  - it aims to fix #14039.",False
7082ff9bf876b98fbda118cdbd6267d3c0df6948,2021-09-17 18:29:49,calixteman,"Merge pull request #14035 from calixteman/1722036

Annotation - For checkboxes, get field value from AS (if any) instead of V (bug 1722036)",True
5bef8120e710f79346bc9040c7b76a7f20a935e0,2021-09-17 16:34:16,Calixte Denizet,"Annotation - For checkboxes, get field value from AS (if any) instead of V (bug 1722036)
  - it aims to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1722036.
  - AS and V should share the same value for checkbox: it's at least what the specs say;
  - the pdf in the above bug opens correctly in Acrobat so it likely means that AS is chosen over V.",False
d6a27860e3aee5cb27ef9a1791d61be7a73b84ee,2021-09-16 20:36:35,Brendan Dahl,"Merge pull request #14025 from Snuffleupagus/issue-11915

Improve glyph mapping for non-embedded composite standard fonts with a /CIDToGIDMap (issue 11915)",True
9745b75858d66f2fc0c6fe5e57d7bb9acdf8b3ca,2021-09-16 03:21:56,Jonas Jenwald,"[GENERIC viewer] Always show the Download-buttons, to allow saving of forms (issue 13997)

Originally the library/viewer didn't support forms, and the hiding of the Download-buttons (when new documents are opened) didn't really matter all that much. Hence the simplest solution, at the time, was to hide the Download-buttons since we use the URL as a fallback when downloading data in the GENERIC `DownloadManager`.
Nowadays we obviously want to support saving of forms in the GENERIC viewer, regardless of how the document was opened, which could thus *potentially* lead to the fallback download-URL being wrong.

In order to be able to show the Download-buttons unconditionally, this patch slightly re-factors the viewer to track the download-URL *separately* to prevent any issues there.

*Please note:* As mentioned in the issue, the ViewBookmark-buttons are specific to the initial URL when the viewer is first opened. Hence they (still) don't make sense when a new document has been opened, since it's then impossible to obtain a usable link to the *currently* active document.",False
95435ed66f18cd613af45f138eb1b54110a282f2,2021-09-16 02:14:59,Tim van der Meij,"Merge pull request #13984 from Snuffleupagus/viewer-enableXfa

Enable XFA by default in the viewer, and `components/` examples (issue 13968)",True
1e2cb72ad4f442d1e953d6363a15a23d349a9935,2021-09-16 02:10:47,Tim van der Meij,"Merge pull request #14028 from Snuffleupagus/_adjustScaleWidth-CSS-variables

Use CSS variables for setting the width of the zoom dropdown (PR 11570 follow-up)",True
4a7976f097f0858986d06e653c6d2eadf68b9a3a,2021-09-15 19:21:30,Jonas Jenwald,"Use CSS variables for setting the width of the zoom dropdown (PR 11570 follow-up)

By using CSS variables to set the width of the zoom dropdown, we can simplify both the relevant CSS and JS code. This will not only improve overall maintainability of this code, but should also make it (slightly) easier for third-party users that want to customize the width.

Note in particular that by having the code in `Toolbar._adjustScaleWidth` lookup the values of the CSS variables, we no longer need to worry about keeping hard-coded values up-to-date with the CSS rules.",False
8c2ac85b0acef0d4222a2e48722c3ec2114c6462,2021-09-15 19:12:26,calixteman,"Merge pull request #14027 from calixteman/14024

Annotation - Checkboxes with the same name and export values must be in unison",True
a3aa6dd6ab6bfcf2dc12a9e70b9989b4939b3d2d,2021-09-15 19:00:24,Calixte Denizet,"Annotation - Checkboxes with the same name and export values must be in unison
  - it aims to fix #14024.
  - this patch adds an attribute `acroformExportValue` to the HTML input in order to set the checked attribute in taking into account the exportValue for the checkboxes with the same name.",False
a11343e9af26b88061f2d73e13dc8b8dd8062a7e,2021-09-15 15:00:40,Jonas Jenwald,"Improve glyph mapping for non-embedded composite standard fonts with a /CIDToGIDMap (issue 11915)

*Please note:* All of this feels very handwavy, but at least it passes all tests locally. Hopefully we have enough tests for this part of the font code.

For non-embedded composite standard fonts with an ""incomplete"" /CIDToGIDMap, we'll now fallback to an *explicitly defined* /ToUnicode map even when that one happens to be an /Identity-H or /Identity-V map.

The `Font.fallbackToSystemFont` method is unfortunately getting more and more special-cases, however that might be unavoidable given all the weird non-embedded fonts found in the wild :-(",False
7fb653b19a855adfb7fcc658fa4d70c89f0cbdab,2021-09-14 22:08:53,Brendan Dahl,"Merge pull request #14018 from calixteman/mime

XFA - Don't create images for unsupported mime types",True
7498b97aaa81e6165740591408838d94d59a1b9a,2021-09-14 20:24:36,Jonas Jenwald,"Enable XFA by default in the viewer, and `components/` examples (issue 13968)

Given that https://bugzilla.mozilla.org/show_bug.cgi?id=1727396 has now landed, it should now be OK to make this change.",False
9812e359162e5e4e1b1fccdf80198715722c3bc3,2021-09-14 14:25:25,Calixte Denizet,XFA - Don't create images for unsupported mime types,False
95057a4e56cd04ecf4248afcc7e82a303d36c5bb,2021-09-13 17:27:56,Jonas Jenwald,"Try to expose more API-functionality in the TypeScript definitions

While these types apparently makes sense in TypeScript environments, we really don't want to extend the *public* API by simply exporting the relevant classes directly in `src/pdf.js` (since they should never be called/initialized manually).

Please see e.g. issue 12384 where this was first requested, and note that a possible work-around was also provided there. This patch simply implements that work-around[1], which will hopefully be helpful to TypeScript users.

---
[1] Based on the discussion in PR 13957, the two previous patches appear to be necessary for this to actually work.",False
d854352cd5b52ae8012c5d7d90b59c9358f733af,2021-09-13 17:04:37,Jonas Jenwald,"Improve the API unit-tests by checking that `PDFPageProxy.render` returns a `RenderTask`-instance

This is similar to existing unit-tests, which checks for `PDFDocumentProxy`- and `PDFPageProxy`-instances.",False
fa7a607d336113c5ade06688d67873e795559ff4,2021-09-13 17:04:28,Jonas Jenwald,"Improve the API unit-tests by checking that `getDocument` returns a `PDFDocumentLoadingTask`-instance

This is similar to existing unit-tests, which checks for `PDFDocumentProxy`- and `PDFPageProxy`-instances.",False
064c21d360dd5a8bd0c9cfc6f16d4c135e7d106c,2021-09-12 22:35:36,Jonas Jenwald,"Merge pull request #14007 from Snuffleupagus/writeValue-null

[src/core/writer.js] Support `null` values in the `writeValue` function",True
7025b9f85964199f4cf1416f0100637d336d778f,2021-09-12 21:54:37,Jonas Jenwald,"[src/core/writer.js] Support `null` values in the `writeValue` function

*This fixes something that I noticed, having recently looked at both the `Lexer.getObj` and `writeValue` code.*

Please note that I unfortunately don't have an example of a form where saving fails without this patch. However, given its overall simplicity and that unit-tests are added, it's hopefully deemed useful to fix this potential issue pro-actively rather than waiting for a bug report.

At this point one might, and rightly so, wonder if there's actually any real-world PDF documents where a `null` value is being used?
Unfortunately the answer is *yes*, and we have a couple of examples in the test-suite (although none of those are related to forms); please see: `issue1015`, `issue2642`, `issue10402`, `issue12823`, `issue13823`, and `pr12564`.",False
8f72fc561e24686735522d3be47cb22df8305cb1,2021-09-12 20:35:33,Jonas Jenwald,"Merge pull request #14006 from Snuffleupagus/writeValue-boolean

[src/core/writer.js] Remove unnecessary string-wrapping for boolean values in `writeValue` (PR 13998 follow-up)",True
5d578ea36a969167cc2c7cebb102ced065ad5e48,2021-09-12 19:15:45,Jonas Jenwald,[src/core/writer.js] Remove unnecessary string-wrapping for boolean values in `writeValue` (PR 13998 follow-up),False
761519ef3f02df5de18e372ae53ecae029719605,2021-09-12 19:08:10,Jonas Jenwald,"Merge pull request #13998 from calixteman/bug1729971

Write boolean value when saving a form (bug 1729971)",True
0be35020dafbf13162750e9200ff43053bcdc078,2021-09-12 17:11:29,Tim van der Meij,"Merge pull request #14002 from Snuffleupagus/issue-13999

Let `Lexer.getObj` return a dummy-`Cmd` for commands that start with a non-visible ASCII character (issue 13999)",True
6a24002ccc55eb6b11fa8854e44418a657f98e1e,2021-09-12 05:06:01,Jonas Jenwald,"Merge pull request #14004 from Rob--W/crx-disable-js-by-default

[CRX] enableScripting=false by default in Chrome extension",True
628e672765806c68c3812d3621ccbd2748dba7b6,2021-09-12 04:43:27,Rob Wu,"[CRX] enableScripting=false by default in Chrome extension

The scripting engine is bundled for users who'd like to use the feature,
but it is disabled by default.",False
a47844d1fc9bcef2d3ae3ab9308a7fee4af3f94e,2021-09-11 23:24:13,Jonas Jenwald,"Let `Lexer.getObj` return a dummy-`Cmd` for commands that start with a non-visible ASCII character (issue 13999)

This way we avoid breaking badly generated PDF documents where a non-visible ASCII character is ""glued"" to a valid command.",False
99e442941c16561e8826a925b164d79f4ad51fbf,2021-09-11 17:07:02,Tim van der Meij,"Merge pull request #13983 from Snuffleupagus/examples-learning-HiDPI

Update the `learning/` examples with basic HiDPI-screen support",True
e97f01b17c217ea43dd6d6734882e6a4cb04ac56,2021-09-11 17:04:07,Tim van der Meij,"Merge pull request #13977 from Snuffleupagus/enqueueChunk-batch

[api-minor] Reduce `postMessage` overhead, in `PartialEvaluator.getTextContent`, by sending text chunks in batches (issue 13962)",True
9b42ae9612d3fbd1a88e5fced84bd586fadb936a,2021-09-11 16:51:42,Tim van der Meij,"Merge pull request #13993 from Snuffleupagus/app-pdfHistory-init

Don't create `PDFViewerApplication.pdfHistory` when the browsing history is disabled",True
4ddda413831d62de519022353b386f7caa710bdb,2021-09-11 16:42:54,Tim van der Meij,"Merge pull request #14000 from Snuffleupagus/PixelsPerInch

Re-factor the `CSS_PIXELS_PER_INCH`/`PDF_PIXELS_PER_INCH` exports (PR 13991 follow-up)",True
0e54f568fb5a13cfe014d10982e925fea33cba60,2021-09-11 14:45:25,Jonas Jenwald,"Re-factor the `CSS_PIXELS_PER_INCH`/`PDF_PIXELS_PER_INCH` exports (PR 13991 follow-up)

For improved maintainability, since these constants are being exposed in the official API, this patch moves them into an Object instead.",False
bd51bbfd1609e1f08034b16b813161d8468e0832,2021-09-11 14:00:39,Jonas Jenwald,"Remove `mozImageSmoothingEnabled` fallback in `CanvasGraphics.endGroup`

This was added all the way back in PR 2936, however it's been unnecessary ever since Firefox 51 (released on 2017-01-24); please see the MDN compatibility data:
https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled#browser_compatibility",False
9ce63a6dc65642f5d179c4362cc4c2b8b1927746,2021-09-11 13:32:53,Jonas Jenwald,"Merge pull request #13991 from brendandahl/interpolate

Enable/disable image smoothing based on image interpolate value. (bug 1722191)",True
f38fb42b42b7ba9e6f421fbd88a337a371d81ccd,2021-09-11 02:53:35,Brendan Dahl,"Enable/disable image smoothing based on image interpolate value. (bug 1722191)

While some of the output looks worse to my eye, this behavior more
closely matches what I see when I open the PDFs in Adobe acrobat.

Fixes: #4706, #9713, #8245, #1344",False
474ab7c86d1fcdccbce7aaee0c77898afb616691,2021-09-10 17:40:25,Calixte Denizet,"Write boolean value when saving a form (bug 1729971)
  - it aims to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1729971#c4.",False
5678c755624a4ab4ff7ebca8620ab1f317568633,2021-09-10 17:35:01,Jonas Jenwald,"Merge pull request #13996 from Snuffleupagus/downloadutils-link-check

Make `verifyManifestFiles` fail for non-linked test-cases with a `""link"": true`-entry",True
57b80074a2796393cf450e89965ae234dfb174f6,2021-09-10 17:27:50,calixteman,"Merge pull request #13995 from calixteman/xfa_record

XFA - Handle $record shorcut in SOM expression (issue #13994)",True
d60cc7200ba66812e831ffe911d6afb08e0d086d,2021-09-10 13:21:34,Jonas Jenwald,"Make `verifyManifestFiles` fail for non-linked test-cases with a `""link"": true`-entry

Currently it's possible to accidentally, e.g. by simply copy-and-pasting from an existing test-case, add an unnecessary `""link"": true`-entry for locally available PDF files.
This leads to inconsistencies in the manifest file, and doesn't feel like a great developer experience. However we can easily fix it by having `verifyManifestFiles` fail in this situation, and doing so actually turned up a couple of existing cases.",False
d4caa8756029f4748b46398122162975927e0be6,2021-09-09 23:33:21,calixteman,"Merge pull request #13992 from calixteman/1729877

XFA - Remove the checked attribute from the checkbox when unchecked (bug 1729877)",True
c5841b3794f9e8d1113e074fbb3b258fb5f40dcb,2021-09-09 23:24:45,Calixte Denizet,XFA - Handle  shorcut in SOM expression (issue #13994),False
623860bf8fad11ab35bd87d5cc82d7d5191bbd7d,2021-09-09 22:44:16,Calixte Denizet,"XFA - Remove the checked attribute from the checkbox when unchecked (bug 1729877)
  - it aims to fix: https://bugzilla.mozilla.org/show_bug.cgi?id=1729877.",False
aa289b17b6a8f2af3fabaef552f3f90b8b6dc246,2021-09-09 17:51:15,Jonas Jenwald,"Don't create `PDFViewerApplication.pdfHistory` when the browsing history is disabled

Similar to other viewer components, e.g. the `PDFFindBar` and `PDFPresentationMode`, there's no need to create a `PDFHistory`-instance when it's not going to be used.",False
45ddb12f61ca302ad892b8e70424c97cec171cb2,2021-09-09 03:31:10,Jonas Jenwald,"Remove no-op `onPull`/`onCancel` streamSink callbacks from the ""GetTextContent""-handler

The `MessageHandler`-implementation already handles either of these callbacks being undefined, hence there's no particular reason (as far as I can tell) to add no-op functions here.

Also, in a couple of `MessageHandler`-methods, utilize an already existing local variable more.",False
f90f9466e3fdd9741c607cc8ac2b9734bb520767,2021-09-09 03:31:07,Jonas Jenwald,"[api-minor] Reduce `postMessage` overhead, in `PartialEvaluator.getTextContent`, by sending text chunks in batches (issue 13962)

Following the STR in the issue, this patch reduces the number of `PartialEvaluator.getTextContent`-related `postMessage`-calls by approximately 78 percent.[1]
Note that by enforcing a relatively low value when batching text chunks, we should thus improve worst-case scenarios while not negatively affect all `textLayer` building.

While working on these changes I noticed, thanks to our unit-tests, that the implementation of the `appendEOL` function unfortunately means that the number and content of the textItems could actually be affected by the particular chunking used.
That seems *extremely* unfortunate, since in practice this means that the particular chunking used is thus observable through the API. Obviously that should be a completely internal implementation detail, which is why this patch also modifies `appendEOL` to mitigate that.[2]

Given that this patch adds a *minimum* batch size in `enqueueChunk`, there's obviously nothing preventing it from becoming a lot larger then the limit (depending e.g. on the PDF structure and the CPU load/speed).
While sending more text chunks at once isn't an issue in itself, it could become problematic at the main-thread during `textLayer` building. Note how both the `PartialEvaluator` and `CanvasGraphics` implementations utilize `Date.now()`-checks, to prevent long-running parsing/rendering from ""hanging"" the respective thread. In the `textLayer` building we don't utilize such a construction[3], and streaming of textContent is thus essentially acting as a *simple* stand-in for that functionality.
Hence why we want to avoid choosing a too large minimum batch size, since that could thus indirectly affect main-thread performance negatively.

---
[1] While it'd be possible to go even lower, that'd likely require more invasive re-factoring/changes to the `PartialEvaluator.getTextContent`-code to ensure that the batches don't become too large.

[2] This should also, as far as I can tell, explain some of the regressions observed in the ""enhance"" text-selection tests back in PR 13257.
    Looking closer at the `appendEOL` function it should potentially be changed even more, however that should probably not be done here.

[3] I'd really like to avoid implementing something like that for the `textLayer` building as well, given that it'd require adding a fair bit of complexity.",False
8a79f13e5ae05a8831a03f3ceed76d828aa2bab4,2021-09-09 01:45:27,Tim van der Meij,"Merge pull request #13985 from Snuffleupagus/issue-11088

Improve glyph mapping for non-embedded composite standard fonts (issue 11088)",True
168aa5efb12e3c0f6a0a1713cde3717b337c3484,2021-09-09 01:20:43,Tim van der Meij,"Merge pull request #13988 from calixteman/issue13987

Avoid an error in integration test because of a locale different of en-US",True
2b938c42f5a3b019108caef60197b4a02240ac16,2021-09-08 21:30:03,Calixte Denizet,Avoid an error in integration test because of a locale different of en-US,False
69034ab8dc6239e27c31cc32d4ead0f7f1b46999,2021-09-08 18:45:33,Jonas Jenwald,"Improve glyph mapping for non-embedded composite standard fonts (issue 11088)

For non-embedded CIDFontType2 fonts with a non-/Identity encoding, use the /ToUnicode data to improve the glyph mapping.",False
b39cd706a66a750a9c8ccff7ea86d48b614a9eba,2021-09-07 18:27:59,Jonas Jenwald,"Update the `learning/` examples with basic HiDPI-screen support

This is essentially a simplified version of the code that's used in `PDFPageView`, which will hopefully reduce the number of issues opened specifically about blurry rendering.
However, note that *ideally* users should base their implementations on the `components/` examples rather than using the API directly (the ""viewer components"" already support HiDPI-screens).",False
d95f680d66dd46e2995a7784109a1b3af2b84bdd,2021-09-05 18:15:17,Tim van der Meij,"Merge pull request #13976 from Snuffleupagus/_textDivProperties-cleanup

Reduce the size of `TextLayerRenderTask._textDivProperties` in ""regular"" text-selection mode",True
e965aa39e6111ddb9c1e9d40d4aa4002ca64ce73,2021-09-05 17:06:05,Tim van der Meij,"Merge pull request #13975 from Snuffleupagus/update-packages

Update packages and translations",True
4c1b586dd24d499e0a7f7b47ef5c70d049b8a67f,2021-09-05 15:42:34,Jonas Jenwald,"Reduce the size of `TextLayerRenderTask._textDivProperties` in ""regular"" text-selection mode

While these changes will obviously not have a significant effect on overall memory usage, it cannot hurt as far as I'm concerned. This patch makes the following changes:
 - Clear out `_textDivProperties` once rendering is done, since those properties are only necessary to keep alive when *enhanced* text-selection is being used.

 - Reduce the size of the `_textDivProperties`-entries by default, since a majority of the properties are only relevant when *enhanced* text-selection is being used.",False
a6f8591cc2b60fce48cca90958206a5c2431a581,2021-09-05 13:31:23,Jonas Jenwald,Update l10n files,False
4bd1d51970404d5351eccde7000406f42cf8e4cd,2021-09-05 13:28:59,Jonas Jenwald,Update the `webpack-stream` package to the latest version,False
adb17bafa424cfc9b12ba38d80a9ca3d28624609,2021-09-05 13:26:50,Jonas Jenwald,Update the `needle` package to the latest version,False
6adecdda80f1548fc70baf871bcc40e1522a4474,2021-09-05 13:24:18,Jonas Jenwald,"Update the `eslint-plugin-prettier` package to the latest version

Please refer to https://github.com/prettier/eslint-plugin-prettier/blob/master/CHANGELOG.md#v400-2021-08-30",False
2643d29a0351366e9085d5053e3e74be96a5a83f,2021-09-05 13:20:57,Jonas Jenwald,"Remove `@babel/plugin-proposal-logical-assignment-operators` from `package.json` (PR 13900 follow-up)

I missed this in PR 13900, sorry about that!",False
91bc559f3c429910d52f00919c68ca8178ef894b,2021-09-05 13:17:57,Jonas Jenwald,Update npm packages,False
1b20f61b56a78d68d0f3d9f3fe237238d11393a7,2021-09-04 19:23:44,Tim van der Meij,"Merge pull request #13972 from Snuffleupagus/issue-13971

Treat all content as visible when no optional content groups are defined (issue 13971)",True
7889cfdc3c1a6949f82d531a5518ecf6f66d95e3,2021-09-04 19:20:32,Tim van der Meij,"Merge pull request #13973 from Snuffleupagus/viewer-components-refactor-update

[api-minor] Change `{PDFPageView, PDFThumbnailView}.update` to take a parameter object",True
680f33c31c23c90d01065695e9b278748ad8ccfc,2021-09-04 19:09:30,Tim van der Meij,"Merge pull request #13961 from Snuffleupagus/simpler-regexp

Simplify some regular expressions",True
846620438417c395f14f3cb60a02806c1b3bebc8,2021-09-04 15:09:34,Jonas Jenwald,"[GENERIC viewer] Add fallback logic for the old `PDFPageView.update` method signature

This is done separately from the previous commit, to make it easier to revert these changes in the future.",False
7c81a8dd40796158edcc135c9ebe06a06e93f3b2,2021-09-04 15:09:25,Jonas Jenwald,"[api-minor] Change `{PDFPageView, PDFThumbnailView}.update` to take a parameter object

The old `update`-signature started to annoy me back when I added optional content support to the viewer, since we're (often) forced to pass in a bunch of arguments that we don't care about whenever these methods are called.

This is tagged `api-minor` since `PDFPageView` is being used in the `pageviewer` component example, and it's thus possible that these changes could affect some users; the next commit adds fallback handling for the old format.",False
258cf1deccfe4dbc1c93ac12f09afa7cfb0cc99a,2021-09-04 13:04:39,Jonas Jenwald,"Merge pull request #13970 from Snuffleupagus/issue-13316

Fallback to the /ToUnicode map for TrueType fonts with (3, 1) and (1, 0) cmap-tables (issue 13316)",True
6318ccf6d2569459d0bc4a97410072b26c3d6a0b,2021-09-04 11:43:37,Jonas Jenwald,"Treat all content as visible when no optional content groups are defined (issue 13971)

In the referenced PDF document the /Contents stream contains MarkedContent-operators, however no optional content dictionary exists; according to [the specification](https://www.adobe.com/content/dam/acom/en/devnet/pdf/pdfs/PDF32000_2008.pdf#G7.3883825):

> Null values or references to deleted objects shall be ignored. If this entry is
  not present, is an empty array, or contains references only to null or deleted
  objects,  the  membership  dictionary  shall  have  no  effect  on  the  visibility  of
  any content.",False
3ccf277f58bd84acc32929b7caaed6681ce32768,2021-09-04 11:08:22,Jonas Jenwald,"Fallback to the /ToUnicode map for TrueType fonts with (3, 1) and (1, 0) cmap-tables (issue 13316)

In the PDF document some of the glyphs have bogus `differences`-entries[1] that cannot be resolved to valid glyph names, thus causing the glyph mapping to fail.
My initial idea was to use a similar approach as in the `PartialEvaluator._simpleFontToUnicode`-method, to extract the charCodes from those entries, however it turned out that that didn't actually help in this case (the mapping was still wrong).

To fix this I'm thus proposing that we fallback to the /ToUnicode map when no other useable data exists (e.g. no post-table), since it *hopefully* shouldn't make things any worse than leaving parts of the glyph map empty (which currently happens).

---
[1] As can be seem below, some of the entries are completely normal while others are non-standard:
```
Differences (array)
    0 = 65
    1 = /g5167
    2 = /space
    3 = /g11927
    4 = /g17737
    5 = /g11540
    6 = /g2180
    7 = /K
    8 = /P
    9 = /two
    10 = /zero
    11 = /one
    12 = /five
    13 = /four
    14 = /g6932
    15 = /g7246
    16 = /g1691
    17 = /g2343
    18 = /g14792
    19 = /g3325
    20 = /g4280
    21 = /g20383
    22 = /g18166
    23 = /g16988
    24 = /g17943
    25 = /g19223
    26 = /g10830
    27 = 97
    28 = /g982
    29 = /g1226
    30 = /g5059
    31 = /g2677
    32 = /g1042
    33 = /g11568
    34 = /L
    35 = /three
    36 = /seven
    37 = /g2364
    38 = /g12063
    39 = /g5356
    40 = /g2173
    41 = /g17877
    42 = /g7273
    43 = /g7647
    44 = /g7224
    45 = /g19327
    46 = /g5054
    47 = /g2342
    48 = /g10136
    49 = /g6856
    50 = /g13381
    51 = /g7257
    52 = /g12093
    53 = /g2359
```",False
da15dbf962a72bbc14fbbf04701757822da36f14,2021-09-03 22:30:19,Brendan Dahl,"Merge pull request #13698 from linfangrong/master

[FIX] fix jpx tag tree decode (issue 11957)",True
a8ce15a2d73f8d1e67be1f75dc4c68254b4e5212,2021-09-03 22:29:40,Brendan Dahl,"Merge pull request #13966 from calixteman/no_ns

XFA - Created data node mustn't belong to datasets namespace",True
d9d3115a7bdd99bac697376a3864a6387baa86ac,2021-09-03 22:23:36,Brendan Dahl,"Merge pull request #13967 from calixteman/no_datasets

XFA - Overwrite AcroForm dictionary when saving if no datasets in XFA (bug 1720179)",True
77b9657e578a2bc209b605498f6ada5d6770ac5c,2021-09-03 20:34:03,Calixte Denizet,"XFA - Overwrite AcroForm dictionary when saving if no datasets in XFA (bug 1720179)
  - aims to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1720179
  - in some pdfs the XFA array in AcroForm dictionary doesn't contain an entry for 'datasets' (which contains saved data), so basically this patch allows to overwrite the AcroForm dictionary with an updated XFA array when doing an incremental update.",False
57ae3a5a76e64c5737327bb202de2612c2bd9d6f,2021-09-03 19:13:25,Calixte Denizet,"XFA - Created data node mustn't belong to datasets namespace
  - when some named nodes in the template don't have their counterpart in datasets we create some nodes: the main node mustn't belong to the datasets namespace because it doesn't make sense and Acrobat Reader isn't able to read pdf with such nodes.
  - so created nodes under a datasets node have a namespaceId set to -1 and consequently when serialized no namespace prefix will appear.",False
804abb3786e4f09ad084d705ff9b4d770067583d,2021-09-03 00:11:02,Brendan Dahl,"Merge pull request #13959 from calixteman/encrypt

Correctly pad strings when saving an encrypted pdf (bug 1726789)",True
c42887221a268a6e84f41ab8c046d0f7ae93effe,2021-09-02 15:20:42,Jonas Jenwald,"Simplify some regular expressions

There's a fair number of regular expressions througout the code-base which are slightly more verbose than strictly necessary, in particular:
 - We have a lot of regular expressions that use `[0-9]` explicitly, and those can be simplified to use `\d` instead.
 - We have one instance of a regular expression containing a `A-Za-z0-9_` sequence, which can be simplified to use `\w` instead.",False
9619bf92bef7616f7269cbb552a6feed3a3388be,2021-09-02 14:07:21,Calixte Denizet,Correctly pad strings when saving an encrypted pdf (bug 1726789),False
0a366dda6a174292e6d109df526f835bfabf87a8,2021-09-02 01:16:34,Tim van der Meij,"Merge pull request #13955 from Snuffleupagus/issue-13433

Always prefer the post-table for TrueType fonts with (0, x) cmap-tables (issue 13433)",True
19ce2de6f7434d1345461ce9dd459fb633dd250a,2021-09-02 01:08:59,Tim van der Meij,"Merge pull request #13952 from Snuffleupagus/ItcSymbol

Extend `getNonStdFontMap` for non-embedded versions of the ItcSymbol font (issue 11532)",True
2ed133bd996d013885153d2e3acb05b85cce775f,2021-09-02 00:48:07,Tim van der Meij,"Merge pull request #13945 from Snuffleupagus/network-onError

Implement `PDFNetworkStreamRangeRequestReader._onError`, to handle range request errors with XMLHttpRequest (issue 9883)",True
b7b60762947605f008b2d96a2471518a24efbb49,2021-09-01 16:05:49,Jonas Jenwald,"Always prefer the post-table for TrueType fonts with (0, x) cmap-tables (issue 13433)

While I don't know if this is necessarily the ""correct"" solution, it does fix issue 13433 without breaking any of the existing reference-tests.",False
ba9f004097c615344b2e24f7d45fdf382f9d4b29,2021-09-01 02:51:16,Jonas Jenwald,"Extend `getNonStdFontMap` for non-embedded versions of the ItcSymbol font (issue 11532)

Despite its name, the fonts in ItcSymbol-family are ""regular"" fonts and not Symbol ones. However, given that the font name contains the word ""Symbol"" we ended up picking the wrong code-path in the `Font.fallbackToSystemFont`-method.

*Please note:* While this patch ensures that the text becomes readable, by falling back a standard font, the rendering will obviously not be perfect. However, that's the PDF generators ""fault"" since non-embedded fonts cannot be guaranteed to render correctly in all environments.",False
07e233d08b0d5ab94007a6ba0bae9349711eff14,2021-08-31 23:50:46,Jonas Jenwald,"Merge pull request #13951 from mozilla/dependabot/npm_and_yarn/tar-4.4.19

Bump tar from 4.4.15 to 4.4.19",True
e1c2151a03cad2507f3d90c25f71154ebd7797ff,2021-08-31 22:09:41,dependabot[bot],"Bump tar from 4.4.15 to 4.4.19

Bumps [tar](https://github.com/npm/node-tar) from 4.4.15 to 4.4.19.
- [Release notes](https://github.com/npm/node-tar/releases)
- [Changelog](https://github.com/npm/node-tar/blob/main/CHANGELOG.md)
- [Commits](https://github.com/npm/node-tar/compare/v4.4.15...v4.4.19)

---
updated-dependencies:
- dependency-name: tar
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>",False
1f56451d56f94f75616fa0b701a69ec3b2e83271,2021-08-31 13:53:57,Jonas Jenwald,"Implement `PDFNetworkStreamRangeRequestReader._onError`, to handle range request errors with XMLHttpRequest (issue 9883)

Given that the Fetch API is normally being used now, these changes are probably less important now than they used to be. However, given that it's simple enough to implement this I figured why not just fix issue 9883 (better late than never I suppose).",False
bd9a92a161307d90c1beec5295069cd9741846f6,2021-08-31 13:53:54,Jonas Jenwald,"Use optional chaining more in the `src/display/network.js` file

Also changes the different `_onDone`/`_onProgress` methods to use consistent parameter names, and some other small improvements.",False
369f1899c6864ad8ac9e85b759fde4532b9afb83,2021-08-31 09:14:26,linfangrong,[FIX] fix jpx tag tree decode (issue 11957),False
72c34b2964156ef4873140683897f2d0876d6340,2021-08-31 03:13:01,Jonas Jenwald,"Merge pull request #13949 from brendandahl/bug1727053

Only use base encoding if it's populated. (bug 1727053)",True
a7f807b059ae5b895e7c517c2c4c0df2b3c4d974,2021-08-31 01:21:59,Brendan Dahl,"Only use base encoding if it's populated. (bug 1727053)

The font dict in this file has an encoding entry, but only specifies a
differences map. The base encoding is empty in this case and shouldn't
be used.",False
306119b12adabad244aeb9c7ff3db8b1ff4ea03c,2021-08-30 22:40:14,Brendan Dahl,"Merge pull request #13932 from Snuffleupagus/oc-images

Support Optional Content in Image-/XObjects (issue 13931)",True
cf0ccc4babbfa164ec2f7b738314c1e4d4437ee3,2021-08-30 19:20:03,Jonas Jenwald,"Merge pull request #13937 from overleaf/jpa-fix-error-handling

Fix handling of fetch errors",True
291ffd3059e7922b711a52c91d7c7c5f62c86275,2021-08-30 17:13:28,Jakob Ackermann,"Fix handling of fetch errors

Testing:
- delete the pdf file while the initial request is inflight
- delete the pdf file after the initial request has finished

Repeat for a small file and large file, exercising both one-off and
 chunked transports.",False
e18d577ace53f4ab861135d3d818363928664143,2021-08-29 22:21:21,Tim van der Meij,"Merge pull request #13944 from Snuffleupagus/setPDFNetworkStreamFactory-unit

Re-factor the `setPDFNetworkStreamFactory` usage for the unit-tests (PR 13549 follow-up)",True
e69afc6f3d453fb6b963c84633be15f5c15cdb6a,2021-08-29 21:57:53,Jonas Jenwald,"Re-factor the `setPDFNetworkStreamFactory` usage for the unit-tests (PR 13549 follow-up)

This should have been part of PR 13549, since we no longer support browsers without native Fetch API and ReadableStream implementations.",False
954e1a16940a281547e464ff2c412c8ce81fa222,2021-08-29 18:04:14,Tim van der Meij,"Merge pull request #13943 from Snuffleupagus/api-more-async

Use `async` a bit more in the API",True
a270baeb67a99dd9f1d3cb9d7ac1400b41318924,2021-08-29 18:00:28,Tim van der Meij,"Merge pull request #13942 from Snuffleupagus/viewer-components-export-layers

Export the XFA/StructTree-layers in the viewer components",True
13bc66168178c94f2ce58f70d7c626f3166f90bc,2021-08-29 17:53:46,Tim van der Meij,"Merge pull request #13941 from Snuffleupagus/MessageHandler-PasswordException

Ensure that `PasswordException` is handled correctly in the `wrapReason` function",True
ce3f5ea2bf73ab9d4a3d86bc61576f5d14785ab0,2021-08-29 16:01:28,Jonas Jenwald,"Use `async` a bit more in the API

This patch changes the `PDFDocumentLoadingTask.destroy`-method and the `_fetchDocument`-function to be `async`, which slightly simplifies the relevant code.

Furthermore, remove the catch-handler from the `WorkerTransport.getPageIndex`-method since it's no longer needed. Given that the `MessageHandler` is nowadays wrapping every possible Exception, it's no longer necessary to try and re-wrap the reason here.",False
c6d400ed06fb22b97e879ce60b9a24c64df5d520,2021-08-28 22:13:08,Jonas Jenwald,"Export the XFA/StructTree-layers in the viewer components

While e.g. the `simpleviewer` and `singlepageviewer` examples work, since they're based on the `BaseViewer`-class, the standalone `pageviewer` example currently doesn't support either XFA- or StructTree-layers. This seems like an obvious oversight, which can be easily addressed simply by exporting the necessary functionality through `pdf_viewer.component.js`, similar to the existing Text/Annotation-layers.

While working on, and testing, these changes I happened to notice a number of smaller things that's also fixed in this patch:

 - Ensure that `XfaLayerBuilder.render` always have a *consistent* return type, to prevent possible run-time failures in `PDFPageView`; PR 13908 follow-up.

 - Change the order of the options in the `XfaLayerBuilder`-constructor to agree with the parameter order in the `DefaultXfaLayerFactory.createXfaLayerBuilder`-method.

 - Add a missing `textHighlighterFactory`-option, in the JSDocs for the `PDFPageView`-class.

 - A couple of small tweaks in the `TextLayerBuilder.render`-method: Re-use an existing Array rather than creating a new one, and replace an `if` with optional chaining instead.

*Please note:* For now XFA-support is currently disabled by default, similar to the regular viewer.",False
9ea3fa074748eebd1d260dc41b908c32dfbf6793,2021-08-28 15:54:12,Jonas Jenwald,"Ensure that `PasswordException` is handled correctly in the `wrapReason` function

While running the unit-tests with some logging statements added to this code, I noticed that `PasswordException` was missing from the list of potential Errors that could be passed to the `wrapReason` function.",False
153d058b3af7f012a2a5edb21b5ea012a5844fa5,2021-08-28 02:15:44,Tim van der Meij,"Merge pull request #13933 from brendandahl/xfa-checkbox2

Fix saving of XFA checkboxes. (bug 1726381)",True
b0929dcebad786026adeeecdbe84989e9fd906b4,2021-08-28 02:01:31,Tim van der Meij,"Merge pull request #13940 from Snuffleupagus/cleanup-supportsFullscreen

Simplify the `PDFViewerApplication.supportsFullscreen` getter",True
c82381eb06697af070d1c58c21f6761928254e21,2021-08-28 01:45:32,Tim van der Meij,"Merge pull request #13930 from michael-yx-wu/mw/fix-typings

Fix Viewer API definitions and include in CI",True
46f6351287d9aab03c9249c4e867256fe9922412,2021-08-28 01:29:49,Tim van der Meij,"Merge pull request #13939 from Snuffleupagus/gulpfile-ci-test

Remove the `npm test`-command",True
bc2bb18af7543f2aabb5ce311ed658b1da471cc2,2021-08-27 21:21:55,Jonas Jenwald,"Simplify the `PDFViewerApplication.supportsFullscreen` getter

A lot of the code in this getter has existed ever since the initial PresentationMode-implementation was first added all the way back in PR 1938 (which is nine years ago now).
At this point in time however, there's now a simpler way detect if a browser supports the FullScreen API and we should thus be able to simplify this getter; please refer to https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenEnabled#browser_compatibility",False
8ff0f8e4dfe347251524b171b6cf184da242787d,2021-08-27 20:59:00,Jonas Jenwald,Use optional chaining even more in the `web/app.js` file,False
d67d48486cdbc859c00d85e33889783a049eabf8,2021-08-27 19:59:55,Jonas Jenwald,"Remove the `npm test`-command

This command was added all the way back when basic CI-support was first introduced (using Travis at the time), however it's never really intended to be used e.g. for local development.
By having a `npm test`-command listed in the `package.json` file, there's a very real risk that someone unfamiliar with the code-base would only run that one and thus miss all the other (more important) test-suites[1].

Hence this patch which removes the `npm test`-command, and instead simply calls the relevant gulp-task[2] directly in the GitHub Actions configuration.

---
[1] Which consist of the unit-tests (run in browsers), the font-tests (potentially), the reference-tests, and the integration-tests.

[2] Which is also renamed slightly, to better fit its current usage.",False
b34d2cdc42433e07603ef1308b9430c5e2fd336c,2021-08-26 20:35:30,Jonas Jenwald,"Ensure that beginMarkedContentProps/endMarkedContent-operators, for /XObjects, are balanced in corrupt documents (PR 13854 follow-up)

Something that I *just* realized is that while PR 13854 fixed an issue as reported, it could still cause bugs in other similarily broken documents since we'll not insert a matching endMarkedContent-operator in the operatorList.",False
1a1de9bb3e3001a612deced9da9164611b21fa76,2021-08-26 20:24:16,Jonas Jenwald,Add support for specifying non-default Optional Content in the ref-tests,False
853b1172a1dc8e3cef10b39587aa0db68a4463c6,2021-08-26 20:24:15,Jonas Jenwald,"Support Optional Content in Image-/XObjects (issue 13931)

Currently, in the `PartialEvaluator`, we only support Optional Content in Form-/XObjects. Hence this patch adds support for Image-/XObjects as well, which looks like a simple oversight in PR 12095 since the canvas-implementation already contains the necessary code to support this.",False
c08b4ea30df4491edadc129d5a2a1abb0fe4d798,2021-08-26 04:15:46,Michael Wu,"Fix Viewer API definitions and include in CI

The Viewer API definitions do not compile because of missing imports and
anonymous objects are typed as `Object`. These issues were not caught
during CI because the test project was not compiling anything from the
Viewer API.

As an example of the first problem:

```
/**
 * @implements MyInterface
 */
export class MyClass {
    ...
}
```

will generate a broken definition that doesn’t import MyInterface:

```
/**
 * @implements MyInterface
 */
export class MyClass implements MyInterface {
    ...
}
```

This can be fixed by adding a typedef jsdoc to specify the import:

```
/** @typedef {import(""./otherFile"").MyInterface} MyInterface */
```

See https://github.com/jsdoc/jsdoc/issues/1537 and
https://github.com/microsoft/TypeScript/issues/22160 for more details.

As an example of the second problem:

```
/**
 * Gets the size of the specified page, converted from PDF units to inches.
 * @param {Object} An Object containing the properties: {Array} `view`,
 *   {number} `userUnit`, and {number} `rotate`.
 */
function getPageSizeInches({ view, userUnit, rotate }) {
    ...
}
```

generates the broken definition:

```
function getPageSizeInches({ view, userUnit, rotate }: Object) {
    ...
}
```

The jsdoc should specify the type of each nested property:

```
/**
 * Gets the size of the specified page, converted from PDF units to inches.
 * @param {Object} options An object containing the properties: {Array} `view`,
 *   {number} `userUnit`, and {number} `rotate`.
 * @param {number[]} options.view
 * @param {number} options.userUnit
 * @param {number} options.rotate
 */
```",False
ada283cc35117721da4b91b30ec6133bd9daa3fb,2021-08-26 02:36:51,Tim van der Meij,"Merge pull request #13935 from Snuffleupagus/TextHighlighter-tweaks

A couple of small `TextHighlighter`/`TextLayerBuilder` tweaks (PR 13908 follow-up)",True
4346b39cbd89e5bf4377e2e69ec5d9211dcf7faa,2021-08-26 02:27:07,Tim van der Meij,"Merge pull request #13934 from Snuffleupagus/rm-IPDFHistory

Remove the `IPDFHistory` interface",True
fa4e82c4535e9e5172d028964635bcbe77b71155,2021-08-25 17:44:44,Jonas Jenwald,"A couple of small `TextHighlighter`/`TextLayerBuilder` tweaks (PR 13908 follow-up)

 - Use `Node.TEXT_NODE` rather than a magical constant, in `TextHighlighter._convertMatches`, to improve readability. According to MDN, this has been supported since ""forever"": https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType#browser_compatibility

 - Remove the `pageIdx`-property, on `TextLayerBuilder`-instances, since the re-factoring in PR 13908 meant that it's now unused.

 - Remove the `matches`-property, on `TextLayerBuilder`-instances, since the re-factoring in PR 13908 meant that it's now unused.",False
ae90d9162be0da59fdeb748939c00173db6a7d01,2021-08-25 16:14:55,Jonas Jenwald,"Remove the `IPDFHistory` interface

Generalizing, and documenting, the `PDFHistory`-implementation as part of the web-interfaces doesn't seem entirely necessary and in hindsight I'm not entirely sure why we need it since:

 - The `PDFHistory` implementation is/was written specifically for the default viewer use-case, which is why e.g. the `simpleviewer` component example isn't using it. (While it *could* be used there, it'd need to be manually created/initialized correctly.)

 - There's only *one* `PDFHistory`-implementation present (and no other viewer-component will fail without it being available), as opposed to the other web-interfaces documented in this file.

 - The `PDFHistory` implementation is not even usable with e.g. the `pageviewer` component example, since it (obviously) requires a complete viewer to work. (This is in contrast to e.g. `IPDFTextLayerFactory` and `IPDFAnnotationLayerFactory`.)",False
bb81f4029ab46d4d34d425580012cb1fc20446fc,2021-08-25 14:40:47,Jonas Jenwald,"Merge pull request #13923 from Snuffleupagus/AnnotationMode

[api-minor] Introduce a new `annotationMode`-option, in `PDFPageProxy.{render, getOperatorList}`",True
6d2193a8121252520407a33c633611189c711688,2021-08-25 04:23:55,Brendan Dahl,"Fix saving of XFA checkboxes. (bug 1726381)

Previously were were always setting the storage value to the on value.",False
2a0ad8e696dcf16e9b3617275735299d53dc626f,2021-08-24 05:10:12,Jonas Jenwald,"Add deprecation warnings for the `renderInteractiveForms` and `includeAnnotationStorage` options, in `PDFPageProxy.render`

*This is done separately from the previous patch, to make it easier to revert these changes once they've been included in a couple of releases.*

Please note that because these two options are mutually exclusive, which is a large part of the reason for the previous patch, it's not guaranteed that the fallback-values will always be correct in every situation (but it's the best that we can do).",False
41efa3c071f92e9a191c5cb5f8be737ca5219565,2021-08-24 04:43:02,Jonas Jenwald,"[api-minor] Introduce a new `annotationMode`-option, in `PDFPageProxy.{render, getOperatorList}`

*This is a follow-up to PRs 13867 and 13899.*

This patch is tagged `api-minor` for the following reasons:
 - It replaces the `renderInteractiveForms`/`includeAnnotationStorage`-options, in the `PDFPageProxy.render`-method, with the single `annotationMode`-option that controls which annotations are being rendered and how. Note that the old options were mutually exclusive, and setting both to `true` would result in undefined behaviour.

 - For improved consistency in the API, the `annotationMode`-option will also work together with the `PDFPageProxy.getOperatorList`-method.

 - It's now also possible to disable *all* annotation rendering in both the API and the Viewer, since the other changes meant that this could now be supported with a single added line on the worker-thread[1]; fixes 7282.

---
[1] Please note that in order to simplify the overall implementation, we'll purposely only support disabling of *all* annotations and that the option is being shared between the API and the Viewer. For any more ""specialized"" use-cases, where e.g. only some annotation-types are being rendered and/or the API and Viewer render different sets of annotations, that'll have to be handled in third-party implementations/forks of the PDF.js code-base.",False
56e7bb626c89282f207b585ebed74c767c68db95,2021-08-24 01:00:29,Brendan Dahl,"Merge pull request #13660 from calixteman/no_xfaf

XFA - Disable xfa rendering for XFAF pdfs",True
04573d2dc8c94370df117c45694beea702b880db,2021-08-24 00:48:20,Calixte Denizet,"XFA - Disable xfa rendering for XFAF pdfs
  - we'll implement XFAF support later.",False
bf5a45ce6d0e9d070204859a39844bcdaf69e9aa,2021-08-23 21:23:02,Brendan Dahl,"Merge pull request #13908 from brendandahl/xfa-find

[api-minor] XFA - Support text search in XFA documents.",True
bb471288649c39331d8ee56e8aac83594a1261c3,2021-08-23 21:14:20,Brendan Dahl,"XFA - Support text search in XFA documents.

Moves the logic out of TextLayerBuilder to handle
highlighting matches into a new separate class `TextHighlighter`
that can be used with regular PDFs and XFA PDFs.

To mimic the current find functionality in XFA, two arrays
from the XFA rendering are created to get the text content
and map those to DOM nodes.

Fixes #13878",False
d02233361872d3758eb23ed394c939c4f510e2cb,2021-08-22 17:28:02,Tim van der Meij,"Merge pull request #13922 from Snuffleupagus/eslint-object-shorthand-chromium

Enable the ESLint `object-shorthand` rule in the `extensions/chromium/`-folder",True
4477cb280423ad5af7b8bdf95d0c19e5361e3311,2021-08-22 17:26:44,Tim van der Meij,"Merge pull request #13921 from Snuffleupagus/update-packages

Update packages and translations",True
66c8a0897a1cf8217d8f1a390ff36c55ff9ca91b,2021-08-22 16:03:02,Jonas Jenwald,"Enable the ESLint `object-shorthand` rule in the `extensions/chromium/`-folder

Based on the following compatibility information, there can't be any compelling reason to not enable this ESLint rule now: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#browser_compatibility

See also https://eslint.org/docs/rules/object-shorthand",False
ab0677375886abbd14f45dd83a1215ee1986123d,2021-08-22 14:13:02,Jonas Jenwald,Update l10n files,False
a24702b94203b82bac46a51850565981f14b5443,2021-08-22 14:08:52,Jonas Jenwald,Update npm packages,False
83e1064360750cba7e61c450081752ece6fd890e,2021-08-21 18:35:08,Tim van der Meij,"Merge pull request #13920 from Snuffleupagus/issue-13916

Extend the glyph maps for standard respectively Calibri fonts (issue 13916)",True
db11ba024d89ebbd8aa5b7eeb033c0419e9f5d96,2021-08-21 18:34:28,Tim van der Meij,"Merge pull request #13899 from Snuffleupagus/includeAnnotationStorage-fix-caching

[Regression] Re-factor the *internal* `includeAnnotationStorage` handling, since it's currently subtly wrong",True
1b3382f92111425817dfb6d5824ece07d1827dce,2021-08-21 18:16:34,Tim van der Meij,"Merge pull request #13904 from Snuffleupagus/fix-LocalTilingPatternCache

Re-factor the LocalTilingPatternCache to cache by Ref rather than Name (PR 12458 follow-up, issue 13780)",True
50dffdaf55e301c778a2c95a46fceb1f2f85e0ba,2021-08-21 18:09:57,Tim van der Meij,"Merge pull request #13905 from Snuffleupagus/refactor-loadAndEnablePDFBug

Re-factor `loadAndEnablePDFBug` and `PDFBug.init`",True
ac27f969878d23178acebc3126efd09d89281782,2021-08-21 04:18:38,Jonas Jenwald,Extend the glyph maps for standard respectively Calibri fonts (issue 13916),False
6b2c9134138b25cdeb6036a98b8dc97fa3b669de,2021-08-21 01:40:30,Jonas Jenwald,"Merge pull request #13913 from michael-yx-wu/mw/fix-typings

Fix pdf_viewer definitions",True
acfb54a8360765036923a6c7a75a3dfd75b20f1d,2021-08-20 21:53:43,Michael Wu,"Fix pdf_viewer definitions

Current pdf_viewer definitions result in errors like the following when
trying to use them in a ts project:

[error] TypeScript error
node_modules/.pnpm/pdfjs-dist@2.10.377/node_modules/pdfjs-dist/web/pdf_viewer.d.ts:1:15
- error TS2691: An import path cannot end with a '.d.ts' extension.
Consider importing 'pdfjs-dist/types/web/pdf_viewer.component.js'
instead.

1 export * from ""pdfjs-dist/types/web/pdf_viewer.component.d.ts"";

Import/export statements in typescript should not include file extensions.",False
3c8ee25e057147b9e32ed2aef626576eae9c9d0c,2021-08-20 01:45:47,Brendan Dahl,"Merge pull request #13911 from Snuffleupagus/gulpfile-fix-TESTING-define

Ensure that the `TESTING` define can always be overridden in `gulpfile.js`",True
88d39e51c3d8b0bdfc9e80cbd5b5b9888f942ede,2021-08-19 23:43:19,Jonas Jenwald,"When running tests, enable XFA by default in the viewer (PR 13745 follow-up)",False
1f468e523fdc775ca7ee75f515b0f05630d9b6d8,2021-08-19 23:24:36,Jonas Jenwald,"Ensure that the `TESTING` define can always be overridden in `gulpfile.js`

Currently a `TESTING = true` environment variable will *always* take precedence in the various build-tasks, and there's no way to explicitly disable it for a particular build. That's clearly an oversight on my part, however it's easy enough to fix this; sorry about breaking this!",False
bc8787b04939715816722769dfa309d909d0063d,2021-08-19 15:36:23,Jonas Jenwald,"Re-factor `loadAndEnablePDFBug` and `PDFBug.init`

The `loadAndEnablePDFBug` helper function, in `web/app.js`, can be simplified a little bit by making it `async`. Furthermore, given how `PDFBug` is being used, we can also (slightly) re-factor `PDFBug.init` such that the `PDFBug.enable`-call is done internally rather than having to handle that manually at the call-site.

(Finally, utilize `await` more in the `loadFakeWorker` helper function.)",False
5f25fea0fe6360913dd17106cbe3830eb032a103,2021-08-18 16:19:01,Jonas Jenwald,"Re-factor the `LocalTilingPatternCache` to cache by Ref rather than Name (PR 12458 follow-up, issue 13780)

This way there cannot be any *incorrect* cache hits, since Refs are guaranteed to be unique.
Please note that the reason for caching by Ref rather than doing something along the lines of the `localShadingPatternCache` (which uses a `Map` directly), is that TilingPatterns are streams and those cannot be cached on the `XRef`-instance (this way we avoid unnecessary parsing).",False
8ee5acd85db2a632ffe7062fa2a22cab7e3eebe4,2021-08-18 15:54:51,Jonas Jenwald,Tweak handling of the `onlyRefs`-option in the `BaseLocalCache` class,False
a7f0301f2181646e97bcea4c9b97e2cfe6c07e22,2021-08-18 13:39:03,Jonas Jenwald,"[Regression] Re-factor the *internal* `includeAnnotationStorage` handling, since it's currently subtly wrong

*This patch is very similar to the recently fixed `renderInteractiveForms`-options, see PR 13867.*
As far as I can tell, this *subtle* bug has existed ever since `AnnotationStorage`-support was first added in PR 12106 (a little over a year ago).

The value of the `includeAnnotationStorage`-option, as passed to the `PDFPageProxy.render` method, will (potentially) affect the size/content of the operatorList that's returned from the worker (for documents with forms).
Given that operatorLists will generally, unless they contain huge images, be cached in the API, repeated `PDFPageProxy.render` calls where the form-data has been changed by the user in between, can thus *wrongly* return a cached operatorList.

In the viewer we're only using the `includeAnnotationStorage`-option when printing, which is probably why this has gone unnoticed for so long. Note that we, for performance reasons, don't cache printing-operatorLists in the API.
However, there's nothing stopping an API-user from using the `includeAnnotationStorage`-option during ""normal"" rendering, which could thus result in *subtle* (and difficult to understand) rendering bugs.

In order to handle this, we need to know if the `AnnotationStorage`-instance has been updated since the last `PDFPageProxy.render` call. The most ""correct"" solution would obviously be to create a hash of the `AnnotationStorage` contents, however that would require adding a bunch of code, complexity, and runtime overhead.
Given that operatorList caching in the API doesn't have to be perfect[1], but only have to avoid *false* cache-hits, we can simplify things significantly be only keeping track of the last time that the `AnnotationStorage`-data was modified.

*Please note:* While working on this patch, I also noticed that the `renderInteractiveForms`- and `includeAnnotationStorage`-options in the `PDFPageProxy.render` method are mutually exclusive.[2]
Given that the various Annotation-related options in `PDFPageProxy.render` have been added at different times, this has unfortunately led to the current ""messy"" situation.[3]

---
[1] Note how we're already not caching operatorLists for pages with *huge* images, in order to save memory, hence there's no guarantee that operatorLists will always be cached.

[2] Setting both to `true` will result in undefined behaviour, since trying to insert `AnnotationStorage`-values into fields that are being excluded from the operatorList-building will obviously not work, which isn't at all clear from the documentation.

[3] My intention is to try and fix this in a follow-up PR, and I've got a WIP patch locally, however it will result in a number of API-observable changes.",False
1465b1670fe518a3b8f97b15b79f66c010b97d14,2021-08-18 13:28:26,Jonas Jenwald,"[src/display/api.js] Move the `getRenderingIntent` helper function into `WorkerTransport`

By doing this re-factoring *separately*, since it's mostly a mechanical change, the size/scope of the next patch will be reduced somewhat.",False
a936509b77ae4f7e49dea57cf2e2a0aacd062516,2021-08-18 01:31:27,Tim van der Meij,"Merge pull request #13900 from Snuffleupagus/rm-babel-logical-assignment

[api-minor] Stop translating logical assignment in non-`legacy` builds (PR 12887 follow-up)",True
b9a6258ad2338159f8eac0afa80321beac14d00e,2021-08-17 15:51:10,Jonas Jenwald,"[api-minor] Stop translating logical assignment in non-`legacy` builds (PR 12887 follow-up)

When we started using logical assignment operators in the PDF.js project, the feature was new enough that browser support was somewhat limited. That should no longer be the case, since logical assignment has now been available for approximately one year.
Hence this patch, which (basically) reverts PR 12887, since using the Babel plugin unconditionally was never intended to be a permanent thing. For browsers/environments without native logical assignment support, users will now have to use a `legacy` build instead.

Please refer to the browser compatibility information on MDN:
 - https://wiki.mozilla.org/RapidRelease/Calendar
 - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment#browser_compatibility

Note also the release information for the major browsers:
 - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment#browser_compatibility
 - https://en.wikipedia.org/wiki/Google_Chrome_version_history
 - https://en.wikipedia.org/wiki/Safari_version_history#Safari_14",False
e9146b19e6da65af8dc869e4ee9dc67b897d2f82,2021-08-14 15:56:19,Tim van der Meij,"Merge pull request #13892 from Snuffleupagus/Dict-merge-refactor-2

Move some validation, in `Dict.merge`, used during merging of sub-dictionaries (PR 13775 follow-up)",True
0e7df95e9036803d31cea1c35a59ec67379fc603,2021-08-14 15:51:55,Tim van der Meij,"Merge pull request #13896 from Snuffleupagus/cleanup-ReadableStream-polyfill

Simplify the `ReadableStream` polyfill",True
e2aa067603e4ad136f67bee907797a1f7724a8bc,2021-08-13 15:58:55,Jonas Jenwald,"Simplify the `ReadableStream` polyfill

At this point in time, all of the supported browsers (in the PDF.js project) have native `ReadableStream` implementations; see https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream#browser_compatibility

Hence the polyfill is *only* necessary in Node.js environments now, and we shouldn't need to do any detailed feature detection either (since that was only done for the non-Chromium versions of the MS Edge browser).
Finally, we can slightly reduce the size of the Chromium-extension since the polyfill shouldn't be needed there either.",False
3369f9a7837ea776beb2d35a690ebf934aa07ce7,2021-08-12 15:02:11,Jonas Jenwald,"Move some validation, in `Dict.merge`, used during merging of sub-dictionaries (PR 13775 follow-up)

By not adding any additional non-`Dict` entries to the list of candidates for merging of sub-dictionaries, we can very slightly reduce the amount of parsing required by not having to *again* iterate through unmergeable data.",False
14a0d612c4dc74ef9b5c42dc20a5a8a3054080eb,2021-08-12 02:05:05,Tim van der Meij,"Merge pull request #13886 from Snuffleupagus/BaseException-name

Re-factor the `BaseException.name` handling, and clean-up some code",True
f154bbfc1f900af22856e2d3990cd9939e4b9c0c,2021-08-12 01:48:44,Tim van der Meij,"Merge pull request #13890 from Snuffleupagus/eslint-deprecated-rules

Update some deprecated ESLint rules",True
96dbe38544f0651ff492213e0b27b57cb901de1a,2021-08-11 21:05:56,Jonas Jenwald,"Update some deprecated ESLint rules

Please see https://eslint.org/docs/rules/#deprecated where the following rules apply to the PDF.js project:
 - [`no-buffer-constructor`](https://eslint.org/docs/rules/no-buffer-constructor), which we can replace with the `unicorn/no-new-buffer` rule; see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-new-buffer.md
 - [`no-catch-shadow`](https://eslint.org/docs/rules/no-catch-shadow), which was replaced by the `no-shadow` rule (that we're already using).",False
d3c9c08aca096bc4622b709840471a0bc386a187,2021-08-11 02:13:42,Jonas Jenwald,"Merge pull request #13887 from mozilla/dependabot/npm_and_yarn/path-parse-1.0.7

Bump path-parse from 1.0.5 to 1.0.7",True
91ef2e19aa2434d54fb636d1a296a85f5023c132,2021-08-10 23:53:47,dependabot[bot],"Bump path-parse from 1.0.5 to 1.0.7

Bumps [path-parse](https://github.com/jbgutierrez/path-parse) from 1.0.5 to 1.0.7.
- [Release notes](https://github.com/jbgutierrez/path-parse/releases)
- [Commits](https://github.com/jbgutierrez/path-parse/commits/v1.0.7)

---
updated-dependencies:
- dependency-name: path-parse
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>",False
474659be8b041bb33f9529a391faa1b99e01bc97,2021-08-10 14:57:49,Jonas Jenwald,"Fix the inconsistent return types in `PDFViewerApplication._parseHashParameters`

While not really relevant to the previous patches, this fixes a small inconsistency in the code.",False
5ac139dea18e3f57edd3e32510f8f40d5f05114f,2021-08-10 14:57:49,Jonas Jenwald,"Remove the `BaseViewer._name` property, used only when logging errors

The original idea behind including the class name, when logging errors, was to improve things in the *hypothetical case* where `PDFViewer`- and `PDFSinglePageViewer`-instances would be used side-by-side.
Given that all of the relevant methods are synchronous this seem unlikely to really be necessary, and furthermore it's probably best to avoid using `this.constructor.name` since that's not guaranteed to do what you intend (we've seen repeated issues with minifiers mangling function/class names).",False
6167566f1bbb424aa2a2772d1dd953aafe615a03,2021-08-10 14:57:47,Jonas Jenwald,"Re-factor the `BaseException.name` handling, and clean-up some code

Once we're finally able to get rid of SystemJS, which is unfortunately still blocked on [bug 1247687](https://bugzilla.mozilla.org/show_bug.cgi?id=1247687), we might also want to clean-up (or even completely remove) the `BaseException` abstraction and simply extend `Error` directly instead.

At that point we'd need to (explicitly) set the `name` on each class anyway, so this patch is essentially preparing for future clean-up. Furthermore, after the `BaseException` abstraction was added there's been *multiple* issues filed about third-party minification breaking our code since `this.constructor.name` is not guaranteed to always do what you intended.

While hard-coding the strings indeed feels quite unfortunate, it's likely the ""best"" solution to avoid the problem described above.",False
745d5cc819d7f3226ef1a3d66983a77bb6afffdb,2021-08-08 15:28:56,Tim van der Meij,"Merge pull request #13884 from Snuffleupagus/update-packages

Update packages and translations",True
43060d39adda43755f257982b1e9c4a986743090,2021-08-08 15:00:31,Tim van der Meij,"Merge pull request #13883 from Snuffleupagus/api-cache-annotations

Improve caching of Annotations-data, by using a `Map`, in the API",True
d24476e02c8f17bce82f125444233045608f9698,2021-08-08 14:22:26,Jonas Jenwald,Update l10n files,False
d0c87e13ce2494761acf8fc26c750ed50198259d,2021-08-08 14:19:57,Jonas Jenwald,"Update the `eslint-plugin-unicorn` package to the latest version

Also enables the `no-useless-spread` rule, see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-useless-spread.md, which didn't require any code changes.",False
014d00e4fb52383064ddf8faaf4f280c83311f51,2021-08-08 14:15:36,Jonas Jenwald,Update npm packages,False
7f2d524df58934a42d1b87c9a13860db8c068c30,2021-08-08 11:44:51,Jonas Jenwald,"Improve caching of Annotations-data, by using a `Map`, in the API

Rather than caching only the *last* `PDFPageProxy.getAnnotations` call, and having to handle the intent separately, we can instead implement the caching in exactly the same way as done in the `PDFPageProxy.{render, getOperatorList}` methods.",False
036b81496e924a1948d0657314f5e5a844bec7f1,2021-08-07 23:22:39,Tim van der Meij,"Merge pull request #13882 from Snuffleupagus/PDFWorker-rm-closure

[api-minor] Remove the closure from the `PDFWorker` class, in the `src/display/api.js` file",True
952f6366bf46859f573c1a9c36dc2a5bd6c210ae,2021-08-07 22:55:51,Tim van der Meij,"Merge pull request #13867 from Snuffleupagus/RenderingIntentFlag

[api-minor] Re-factor the *internal* renderingIntent, and change the default `intent` value in the `PDFPageProxy.getAnnotations` method",True
f3960a65d3803a3bb00e78ba6b033296e84b39e2,2021-08-07 22:30:42,Tim van der Meij,"Merge pull request #13879 from Snuffleupagus/test-resources-fix-globals

Fix the global variable definitions in `test/resources/reftest-analyzer.js` (issue 13862)",True
1cf940528177bc33572c08e1b0fe8ce014a6ef32,2021-08-07 14:13:39,Jonas Jenwald,"[api-minor] Remove the closure from the `PDFWorker` class, in the `src/display/api.js` file

This patch removes the only remaining closure in the `src/display/api.js` file, utilizing a similar approach as used in lots of other parts of the code-base, which results in a small decrease in the size of the *build* `pdf.js` file.

Given that `PDFWorker` is exposed through the *public* API, this complicates things somewhat since there's a couple of worker-related properties that really should stay *private*. Initially, while working on PR 13813, I believed that we'd need support for private (static) class fields in order to get rid of this closure, however I've managed to come up with what's hopefully deemed an acceptable work-around here.
Furthermore, some helper functions were simply moved into the `PDFWorker` class as static methods, thus simplifying the overall implementation (e.g. we don't need to manually cache the Promise in the `PDFWorker._setupFakeWorkerGlobal`-method).

Finally, as part of this re-factoring a number of missing JSDoc-comments were added which *together* with the removal of the closure significantly improves the `gulp jsdoc` output for the `PDFWorker` class.

*Please note:* This patch is tagged with `api-minor` since it deprecates `PDFWorker.getWorkerSrc()` in favor of the shorter `PDFWorker.workerSrc`, with the fallback limited to `GENERIC` builds.",False
3d18c76a53b4618253e9461c6b5c36c7ed412c82,2021-08-07 00:26:58,Brendan Dahl,"Merge pull request #13881 from calixteman/bug_1723734

XFA - Elements under an area must be bound (bug 1723734)",True
328383ea7a4c64c741e36a54e2eb5948a7420f37,2021-08-06 23:50:19,Calixte Denizet,"XFA - Elements under an area must be bound (bug 1723734)
  - aims to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1723734.",False
98e893b84ffadcdde8e9f3a30ae1c2b56b1edee5,2021-08-06 23:01:52,calixteman,"Merge pull request #13880 from eltociear/patch-5

Fix typo in cff_parser_spec.js",True
d7e1a419c2cf51df78026ebb6ec4e6cb6d904ba6,2021-08-06 22:24:47,Brendan Dahl,"Merge pull request #13873 from brendandahl/xfa-heading

XFA - Support aria heading and table structure. (bug 1723421) (bug 1723425)",True
23236f1b0b9dc9883f78a44a38ce2a9964b4513d,2021-08-06 16:00:36,Ikko Ashimine,"Fix typo in cff_parser_spec.js

 shoudn't -> shouldn't",False
df79b831f40b5a4ce3e466bbb9ffaeda2ef8504a,2021-08-06 15:15:55,Jonas Jenwald,"Fix the global variable definitions in `test/resources/reftest-analyzer.js` (issue 13862)

It shouldn't be necessary to assign these variables to the global scope (as far as I can tell), either explicitly with `window` or implicitly with `var`, and this way we don't need to disable the ESLint `no-undef` rule; fixes another small part of issue 13862.

*Please note:* I wasn't going to put additional work into this code after PR 13869, however these changes looked so simple that I figured trying to get rid of the few remaining ""Code scanning alerts"" wouldn't hurt.
However, this file would still very much benefit from additional clean-up and re-factoring work, since it's quite old and currently contains some dead code (commented out).",False
107efdb1788d3ca1c680de7b00e86d9a2a4a6ce4,2021-08-06 04:10:43,Jonas Jenwald,"[Regression] Re-factor the *internal* `renderInteractiveForms` handling, since it's currently subtly wrong

The value of the `renderInteractiveForms` parameter, as passed to the `PDFPageProxy.render` method, will (potentially) affect the size/content of the operatorList that's returned from the worker (for documents with forms).
Given that operatorLists will generally, unless they contain huge images, be cached in the API, repeated `PDFPageProxy.render` calls that *only* change the `renderInteractiveForms` parameter can thus return an incorrect operatorList.

As far as I can tell, this *subtle* bug has existed ever since `renderInteractiveForms`-support was first added in PR 7633 (which is almost five years ago).
With the previous patch, fixing this is now really simple by ""encoding"" the `renderInteractiveForms` parameter in the *internal* renderingIntent handling.",False
47f94235abef66e34925b017292675873b22a2dc,2021-08-06 04:09:42,Jonas Jenwald,"[api-minor] Re-factor the *internal* renderingIntent, and change the default `intent` value in the `PDFPageProxy.getAnnotations` method

With the changes made in PR 13746 the *internal* renderingIntent handling became somewhat ""messy"", since we're now having to do string-matching in various spots in order to handle the ""oplist""-intent correctly.
Hence this patch, which implements the idea from PR 13746 to convert the `intent`-strings, used in various API-methods, into an *internal* renderingIntent that's implemented using a bit-field instead. *Please note:* This part of the patch, in itself, does *not* change the public API (but see below).

This patch is tagged `api-minor` for the following reasons:
 1. It changes the *default* value for the `intent` parameter, in the `PDFPageProxy.getAnnotations` method, to ""display"" in order to be consistent across the API.
 2. In order to get *all* annotations, with the `PDFPageProxy.getAnnotations` method, you now need to explicitly set ""any"" as the `intent` parameter.
 3. The `PDFPageProxy.getOperatorList` method will now also support the new ""any"" intent, to allow accessing the operatorList of all annotations (limited to those types that have one).
 4. Finally, for consistency across the API, the `PDFPageProxy.render` method also support the new ""any"" intent (although I'm not sure how useful that'll be).

Points 1 and 2 above are the significant, and thus breaking, changes in *default* behaviour here. However, unfortunately I cannot see a good way to improve the overall API while also keeping `PDFPageProxy.getAnnotations` unchanged.",False
a38d1122d8ee55c44c842fc8acddf9099e2108fa,2021-08-06 03:55:04,Brendan Dahl,"XFA - Support aria heading and table structure. (bug 1723421) (bug 1723425)

https://bugzilla.mozilla.org/show_bug.cgi?id=1723421
https://bugzilla.mozilla.org/show_bug.cgi?id=1723425",False
849bab973cd78134c1774d595ba7dba7ca86e4a0,2021-08-06 01:58:51,Tim van der Meij,"Merge pull request #13874 from Snuffleupagus/components-annotation-zoom-factor

Update the Annotation `--zoom-factor` CSS variable when `PDFPageView` is used standalone (PR 13868 follow-up)",True
8292076af91c1f67e7340753d57c56b5d44735ee,2021-08-06 01:47:26,Tim van der Meij,"Merge pull request #13869 from Snuffleupagus/test-resources-lint

Enable linting in the `test/resources/` folder, and fix the ""Remote property injection"" warning (issue 13862)",True
834e475e1dfebf05aceebb4a6f5f4d798464d53a,2021-08-05 23:39:00,calixteman,"Merge pull request #13875 from calixteman/xfa_focus

Annotation & XFA: Add focus outlines on different fields (bug 1723615, bug 1718528)",True
fef939d347a47443e5adec3b17f356ef7cfdced7,2021-08-05 17:03:46,Calixte Denizet,"Annotation & XFA: Add focus outlines on different fields (bug 1723615, bug 1718528)
  - set a default tabindex to be sure they'll be taken into account in the TAB cycle (https://bugzilla.mozilla.org/show_bug.cgi?id=1723615).
  - show default outline when fields are focused (it was an a11y bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1718528).",False
561faa7c94b5ff29dbd851e7f6c1cca18e656bdf,2021-08-05 15:13:43,Jonas Jenwald,"Update the Annotation `--zoom-factor` CSS variable when `PDFPageView` is used standalone (PR 13868 follow-up)

Without this patch, when using `PDFPageView` directly[1] this CSS variable won't be updated and consequently things won't work as intended.
This is purposely implemented such that when a `PDFPageView`-instance is part of a viewer, we don't repeatedly set the CSS variable for every single page.

---
[1] See e.g. the ""pageviewer"" example in the `examples/components/` folder.",False
4ad65c8b9cd16fc878fa84380aabb4477f337161,2021-08-05 14:15:13,Jonas Jenwald,"Merge pull request #13868 from calixteman/zoom_select

Annotation & XFA: Scale the font size in choicelist using zoom factor (bug 1715996)",True
71a100a4d0ed177769254965012b3b9279f53bae,2021-08-05 00:06:04,Calixte Denizet,"Annotation & XFA: Scale the font size in choicelist using zoom factor (bug 1715996)
  - this is an accessibility issue which could be painful for some people with visual disabilities.",False
39663e730ee3556afef0919da9b5822029a7687f,2021-08-04 18:47:13,Jonas Jenwald,"Change the `hashParameters` function to return a `Map` rather than an Object (issue 13862)

This patch (basically) mirrors the implementation in PR 13831, to get rid of the ""Remote property injection"" warning.",False
5dfdfbc70b287a1803846ddb189379e061886548,2021-08-04 17:44:04,Jonas Jenwald,"Fix *some* of the remaining linting issues in `test/resources/reftest-analyzer.js`

Given that issue 13862 tracks updating/modernizing the code, this patch purposely limits the scope of the changes. In particular, the following things are still left to address:
 - The ESLint `no-undef` errors; for now the rule is simply disabled globally in this file.
 - A couple of unused variables are commented out for now, but could perhaps just be removed.",False
92300965a4144651df87ea3cfc58fe49a7e4c16e,2021-08-04 17:29:21,Jonas Jenwald,"Fix *most* linting/formatting issues in the `test/resources/` folder

These changes were done automatically, by using the `gulp lint --fix` command.",False
99aa747a1d33bce219370110237f3d3b67f75779,2021-08-04 17:20:44,Jonas Jenwald,"Include the `test/resources/` folder when running ESLint/Stylelint

Also, update the `.stylelintignore` file to agree with the `.eslintignore` file since the configurations had (unintentionally) diverged.",False
52ef63f1fe9782ef84ad4af68a47d3deb2df0c6f,2021-08-04 13:39:13,calixteman,"Merge pull request #13856 from calixteman/xfa_layout_rounding

XFA - Avoid to put something in very small areas",True
2cef6d879671dc193f15e213b066ff8c2062993a,2021-08-04 07:12:31,Brendan Dahl,"Merge pull request #13864 from brendandahl/xfa-alt-text

[XFA] Add alt text for images. (bug 1723418)",True
3e003245b18341d089c3cd05f03beeff6ffd5506,2021-08-04 05:48:58,Brendan Dahl,"[XFA] Add alt text for images. (bug 1723418)

Not many XFA PDFs have alt text.

Some examples:
bug1723422.pdf
xfa_bug1718670_1.pdf
xfa_issue13611.pdf
xfa_issue13633.pdf
xfa_issue13634.pdf",False
6cf1ee32513bcd2d59a9142f0aa37394fb6d9b5e,2021-08-04 05:48:08,Brendan Dahl,"Merge pull request #13858 from brendandahl/xfa-aria-label

Add aria-labels to XFA form elements. (bug 1723422)",True
6ea56f35abe2fcea436a1341a685fea37e71a293,2021-08-04 04:28:33,Brendan Dahl,Add aria-labels to XFA form elements. (bug 1723422),False
b317e9311da6851346ba1f9b510647a1944d8a80,2021-08-04 03:17:30,Tim van der Meij,"Merge pull request #13846 from Snuffleupagus/test-xfa

Add a special `gulp xfatest` command, to limit the ref-tests to only XFA-documents (issue 13744)",True
844319cdb0f723054d672f6f947f49dbd214071e,2021-08-04 03:11:10,Jonas Jenwald,"Add a special `gulp xfatest` command, to limit the ref-tests to only XFA-documents (issue 13744)

The new command is a *variation* of the standard `gulp test` command and will run all unit/font/integration-tests just as normal, while *only* running ref-tests for XFA-documents to speed up development.
Given that we currently have (some) unit-tests for XFA-documents, and that we may also (in the future) want to add integration-tests, it thus makes sense to run all test-suites in my opinion.

*Please note:* Once this patch has landed, I'll submit a follow-up patch to https://github.com/mozilla/botio-files-pdfjs such that we can also run the new command on the bots.",False
85be62c6847a8d36b1ae05d4536e1ba5b0288db1,2021-08-04 03:04:34,Tim van der Meij,"Merge pull request #13854 from Snuffleupagus/issue-13851

Prevent breaking errors when an optional content group is undefined (issue 13851)",True
ad90fe90ed73a5a86438ce4b0f5e6aa48d91e4aa,2021-08-04 02:43:05,Tim van der Meij,"Merge pull request #13848 from Snuffleupagus/rm-lgtm

Remove the LGTM configuration and inline disable comments (issue 13829)",True
892af512696b20224552222b31c09612b4ee5532,2021-08-04 02:41:10,Tim van der Meij,"Merge pull request #13859 from Snuffleupagus/refactor-EOF

Remove the `isEOF` helper function and slightly re-factor `EOF`",True
ad702d7088b88db8be237f0edd1be82f04c61424,2021-08-04 01:50:32,Jonas Jenwald,"Merge pull request #13860 from mozilla/dependabot/npm_and_yarn/tar-4.4.15

Bump tar from 4.4.8 to 4.4.15",True
81a6ade5902ba95322bb71b73dbd9b4a2c37a033,2021-08-04 01:11:11,dependabot[bot],"Bump tar from 4.4.8 to 4.4.15

Bumps [tar](https://github.com/npm/node-tar) from 4.4.8 to 4.4.15.
- [Release notes](https://github.com/npm/node-tar/releases)
- [Changelog](https://github.com/npm/node-tar/blob/main/CHANGELOG.md)
- [Commits](https://github.com/npm/node-tar/compare/v4.4.8...v4.4.15)

---
updated-dependencies:
- dependency-name: tar
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>",False
766299016fd46bc8ff7562c5a9ef317219de681a,2021-08-03 23:49:32,Jonas Jenwald,"Remove the `isEOF` helper function and slightly re-factor `EOF`

Given how trivial the `isEOF` function is, we can simply inline the check at the various call-sites and remove the function (which ought to be ever so slightly more efficient as well).
Furthermore, this patch also changes the `EOF` primitive itself to a `Symbol` instead of an Object since that has the nice benefit of making it unclonable (thus preventing *accidentally* trying to send `EOF` from the worker-thread).",False
be1ee155d16af18162a929ee6578e3a05e1d8de0,2021-08-03 20:35:29,Calixte Denizet,"XFA - Avoid to put something in very small areas
  - it aims to fix #13855.",False
0b95d698d86431880b82a4aa96999f7da2c61f67,2021-08-03 19:58:26,calixteman,"Merge pull request #13852 from calixteman/xfa_print_1

XFA - Page can be too small when printing (bug 1723705)",True
d5e14d3dc33cbbd65f8441551fb4feaf072a0cbd,2021-08-03 19:29:29,Jonas Jenwald,"Prevent breaking errors when an optional content group is undefined (issue 13851)

In the referenced PDF document *most* of the form `/Form` XObjects don't have an `/OC` entry, which thus causes the runtime failure during rendering.",False
19309c1f28b510390a1ef1bf82dec5c052a6af2f,2021-08-03 18:37:33,Calixte Denizet,XFA - Page can be too small when printing (bug 1723705),False
d5302315ce489ebc1c1badd7255d0ec2ede82ec5,2021-08-03 15:19:01,Jonas Jenwald,"Merge pull request #13847 from Snuffleupagus/issue-13835

Remove useless assignment of `availableSpace` in the `src/core/xfa/template.js` file (issue 13829, 13835)",True
8fef8630fe25e2ceaf8348c19cbc8911a7b1b04c,2021-08-03 14:44:49,Jonas Jenwald,"Remove the LGTM configuration and inline disable comments (issue 13829)

Given that the GitHub Advanced Security workflow now covers everything that LGTM does, but generally faster and with better GitHub-integration, there's no longer much point in also running LGTM separately.
As a follow-up to this patch, we should also disable/remove the LGTM-integration from the PDF.js repository.",False
705d1cfad3b7d79b5cb2a35501b9fdff7db50b86,2021-08-03 14:28:57,Jonas Jenwald,"Remove useless assignment of `availableSpace` in the `src/core/xfa/template.js` file (issue 13829, 13835)",False
01fd0f59b7e24686a999ad0b5b2024a171853b6b,2021-08-02 01:00:53,Jonas Jenwald,"Merge pull request #13842 from Rob--W/text-selection-br

Visually hide br in text selections",True
bcdf006a717f8cb2dd655ad730d46f419b57f361,2021-08-02 00:02:56,Jonas Jenwald,"Merge pull request #13841 from Rob--W/crx-viewerCssTheme

Allow customization of theme in Chrome extension + set default theme",True
1eeb153688874c68cd61e84545efdaeeaebac8d4,2021-08-01 23:12:05,Rob Wu,"Visually hide br in text selections

Fixes #13840",False
a51b4a9cb073fa8323694c419365ebd60ed190e9,2021-08-01 23:07:49,Rob Wu,"[CRX] Use dark theme by default in Chrome extension

Default to the dark theme for consistency with the previous version of the
published extension (was 12ff252751870bea861944f369a9ecf462c641d3).",False
867150e4f037255097f33c657835f5a815d5bcb8,2021-08-01 22:24:49,Rob Wu,"[CRX] Add option to customize Theme in options UI

The `viewerCssTheme` option was not rendered because its entry in
`preferences_schema.json` did not have a `title`.

The order of keys in `preferences_schema.json` determines the order of the
rendered preferences in the options UI. Since `viewerCssTheme` affects the UI
very significantly, I have moved the option to the top.",False
4cdac6666323c03753c34e70feb5f551c6da11c3,2021-08-01 22:10:32,Tim van der Meij,"Merge pull request #13839 from Snuffleupagus/issue-13838

Fix a broken regular expression in the `docId` unit-test (issue 13838, PR 13813 follow-up)",True
16a09eaed8aae966c28a51b3376788c8face11c5,2021-08-01 18:48:25,Jonas Jenwald,"Fix a broken regular expression in the `docId` unit-test (issue 13838, PR 13813 follow-up)

The current regular expression contains a typo, leading to intermittent test-failures for certain `docId`s; sorry about that!",False
273cea867500105b1d3cc00a51f8abfc8e797b2a,2021-08-01 17:56:33,Tim van der Meij,"Merge pull request #13837 from timvandermeij/unit-test-query-string

Implement unit tests for the `parseQueryString` utility function",True
d1c0f8f91c97e2c0a4a0ba8915b69633f8aaa915,2021-08-01 17:44:33,Tim van der Meij,"Implement unit tests for the `parseQueryString` utility function

Now that these unit tests are in place, we also take the opportunity to
slightly modernize the code itself by using a `for ... of` loop.",False
449f941b7b0a9cf843f7c44737f559ceea5dd0fc,2021-08-01 15:51:43,Tim van der Meij,"Merge pull request #13831 from Snuffleupagus/parseQueryString-Map

Change the `parseQueryString` function to return a `Map` rather than an Object (issue 13829)",True
1ea8cfa2f2ef1d88eafe45a6c41c594ae7addb1b,2021-08-01 15:50:51,Jonas Jenwald,"Merge pull request #13836 from timvandermeij/cmaps

Fix inefficient regular expressions in `external/cmapscompress/parse.js`",True
0d84f57cfad05cdb032404cb95177d843fa01026,2021-08-01 15:42:42,Tim van der Meij,"Fix inefficient regular expressions in `external/cmapscompress/parse.js`

The only purpose, according to the README and existing files, is to
parse an integer from those lines, so (\d+) is sufficient for that. This
avoids potential exponential backtracking as flagged by CodeQL. I have
compared the output of the script with and without these changes and the
resulting files are the same.",False
4483cba72410027acf46630ebf252ae529704476,2021-08-01 14:58:59,Jonas Jenwald,"Merge pull request #13833 from tamuratak/add_peer_dep_meta_for_worker_loader

Make worker-loader optional as peerDependencies. Close #13825.",True
9eca5e5c86c61846338497238e53d2457a894799,2021-08-01 14:14:31,Takashi Tamura,"Make worker-loader optional as peerDependencies. Close #13825.

- https://docs.npmjs.com/cli/v7/configuring-npm/package-json#peerdependencies
- https://github.blog/2020-10-13-presenting-v7-0-0-of-the-npm-cli/
- https://docs.npmjs.com/cli/v7/configuring-npm/package-json#peerdependenciesmeta

Update worker-loader to v3.0.8.",False
4ab4efd42f4e868d7813f68fc1eb265fb4bc12a9,2021-08-01 02:54:49,Jonas Jenwald,"Change the `parseQueryString` function to return a `Map` rather than an Object (issue 13829)

Even though the code as-is *should* be safe, given that we're using an Object with a `null` prototype, it cannot hurt to change this to a Map to prevent any issues (since we're parsing unknown and potentially unsafe data).

Overall I also think that these changes improve the `parseQueryString` call-sites, since we now have a proper way of checking for the existence of a particular key (and don't have to use `in` which stringifies the keys in the Object).

This patch also changes the default, when no `value` exists, from `null` to an empty string since the use of `decodeURIComponent` currently can modify the value in a somewhat surprising way (at least to me).
Note how `decodeURIComponent(null) === ""null""` which is unlikely to be what you actually want, whereas `decodeURIComponent("""") === """"` which seems much more helpful.",False
222c9e7e84efd01a99cfcb0e0c144781f2524cc5,2021-07-31 19:55:24,Jonas Jenwald,"Merge pull request #13830 from timvandermeij/codeql

Improve the code analysis workflow with quality checks",True
574fed2bdf195a5d0815125e93edf0d01a1cb277,2021-07-31 19:03:07,Tim van der Meij,"Improve the code analysis workflow with quality checks

This allows us to get the quality checks that LGTM does into GitHub
Advanced Security. Since it not only runs security checks anymore, the
workflow is also renamed to CodeQL to make this more explicit (and this
matches the documentation better).",False
3ec1bac9012b28fbb0773ed7328cb67a76e0d728,2021-07-31 17:14:24,Tim van der Meij,"Merge pull request #13828 from timvandermeij/github-advanced-security

Introduce the GitHub Advanced Security workflow",True
5a08d62e764ee87eb8e173288d4aac1436068365,2021-07-31 17:03:14,Tim van der Meij,"Improve the CI workflow YAML file

This makes it consistent with the GitHub Advanced Security file and,
more importantly, ensures that all steps have a proper name for better
visibility.",False
4774858d3c014634e950c8d2dc59fddfc9ce59b4,2021-07-31 17:02:22,Mathew Payne,"Introduce the GitHub Advanced Security workflow

This can help to find security problems sooner.",False
10a1db698047e612e8ae3da66d12a6c1ac5597a3,2021-07-31 02:18:38,Tim van der Meij,"Merge pull request #13824 from Snuffleupagus/issue-13823

When no ""V"" entry exists, let the fieldValue fallback to the ""DV"" entry (issue 13823)",True
67f4c34f63533ab053ff601cd7835bf759ff075f,2021-07-31 01:39:29,Tim van der Meij,"Merge pull request #13822 from Snuffleupagus/ReadableStreams-cancel-no-Uncaught_promise

Prevent ""Uncaught promise"" messages in the console when cancelling (some) `ReadableStream`s",True
99b14a9da0fa467e7a036760c7456af0b70cbee2,2021-07-31 01:25:45,Tim van der Meij,"Merge pull request #13813 from Snuffleupagus/rm-closure-API

Remove a couple of closures in the `src/display/api.js` file",True
314a1365bc519dcf5df537e6723c199747e74796,2021-07-31 01:19:14,Tim van der Meij,"Merge pull request #13816 from Snuffleupagus/rm-BaseViewer-enableScripting-option

[api-minor] Remove the separate `enableScripting` option in `BaseViewer`",True
ff71be793d843420bb1fcdc4ddbc6f12bdb9831a,2021-07-30 19:47:42,Jonas Jenwald,"When no ""V"" entry exists, let the fieldValue fallback to the ""DV"" entry (issue 13823)",False
649d091167b007fc25922121f6c646466f7f0eeb,2021-07-30 19:42:32,calixteman,"Merge pull request #13819 from calixteman/xfa_exdata

XFA - Avoid an error when an exdata is a string (bug 1723114)",True
7bb5331087248998a5821937f55f1c900d057a00,2021-07-30 18:13:53,Calixte Denizet,XFA - Avoid an error when an exdata is a string (bug 1723114),False
1df9da949ec81e58e6e33fa883cc24108eaa2bcc,2021-07-30 17:57:38,Jonas Jenwald,"Prevent ""Uncaught promise"" messages in the console when cancelling (some) `ReadableStream`s

While fixing issue 13794, I noticed that cancelling the `ReadableStream` returned by the `PDFPageProxy.streamTextContent`-method could lead to ""Uncaught promise"" messages in the console.[1]
Generally speaking, we don't really care about errors when *cancelling* a `ReadableStream` and it thus seems reasonable to simply suppress any output in those cases.

---
[1] Although, after that issue was fixed you'd now need to set the API-option `stopAtErrors = true` to actually trigger this.",False
5fac0a43505271c01f22c355faed8a9c9a776e6e,2021-07-30 15:04:47,Jonas Jenwald,Simplify some code related to `fallbackWorkerSrc` and `getMainThreadWorkerMessageHandler`,False
4c679d80ac63c1774389ebaa22e96c671643d8aa,2021-07-30 15:04:47,Jonas Jenwald,"Remove the closure used with the `InternalRenderTask` class

This patch utilizes the same approach as used in lots of other parts of the code-base, which thus *slightly* reduces the size of this code.",False
b18620ac0f196c6fa5a9e54a53fa6b915e19e843,2021-07-30 15:04:47,Jonas Jenwald,"Remove the closure used with the `PDFDocumentLoadingTask` class

This patch utilizes the same approach as used in lots of other parts of the code-base, which thus *slightly* reduces the size of this code.

By removing some of the (current) indirection, we can also simplify the JSDocs a little bit. Looking at the `gulp jsdoc` output, this actually seem to *improve* the documentation for this class.",False
76c805f83b1f81d9ef189d97e3d42c0a40cbc6a1,2021-07-29 13:36:03,Jonas Jenwald,"[api-minor] Remove the separate `enableScripting` option in `BaseViewer`

Prior to PR 13042, when scripting wasn't really possible to use outside of the full viewer, the `enableScripting` option made sense.
However, at this point in time having to both pass in a `PDFScriptingManager`-instance *and* set the `enableScripting`-boolean when creating a `BaseViewer`-instance feels redundant and (mostly) annoying. Hence this patch, which removes the *separate* boolean and always enables scripting when `scriptingManager` is provided.

The relevant ""viewer component"" examples are also updated (with a comment), but in such a way that scripting support won't just break when used with the current PDF.js releases.",False
4ad5c5d52a2e652f85a60ce2aee534e8cc75c688,2021-07-28 23:47:16,Brendan Dahl,"Merge pull request #13808 from brendandahl/pattern-cache-v2

Improve caching of shading patterns. (bug 1721949)",True
edbe9692b48c6520e7cf90760ecdf2de3529db8f,2021-07-28 23:15:45,calixteman,"Merge pull request #13815 from calixteman/xfa_fonts2

XFA - Fix font scale factors (bug 1720888)",True
c836e1f0fb337828c0d03cf456007b49d7991c57,2021-07-28 22:59:20,Brendan Dahl,"Improve caching of shading patterns. (bug 1721949)

The PDF in bug 1721949 uses many unique pattern objects
that references the same shading many times. This caused
a new canvas pattern to be created and cached many times
driving up memory use.

To fix, I've changed the cache in the worker to key off the
shading object and instead send the shading and matrix
separately. While that worked well to fix the above bug,
there could be PDFs that use many shading that could
cause memory issues, so I've also added a LRU cache
on the main thread for canvas patterns. This should prevent
memory use from getting too high.",False
4a4591bd2ca57f16bd1f581914baae33a7323e46,2021-07-28 22:40:42,Calixte Denizet,"XFA - Fix font scale factors (bug 1720888)
  - All the scale factors in for the substitution font were wrong because of different glyph positions between Liberation and the other ones:
    - regenerate all the factors
  - Text may have polish chars for example and in this case the glyph widths were wrong:
    - treat substitution font as a composite one
    - add a map glyphIndex to unicode for Liberation in order to generate width array for cid font",False
ac5c4b7fd0a16c4b79cb08533ab580c5131ea35c,2021-07-28 20:31:15,calixteman,"Merge pull request #13806 from calixteman/xfa_fields

XFA - Fix auto-sized fields (bug 1722030)",True
92f4cc52a639911328676c42b6a6714741efde65,2021-07-28 18:17:29,Calixte Denizet,XFA - Add a transparent blue background on all text fields for consistency,False
76d882b56002bc7e89542d94e34f5fcd7185937f,2021-07-28 13:13:15,Calixte Denizet,"XFA - Fix auto-sized fields (bug 1722030)
  - In order to better compute text fields size, use line height with no gaps (and consequently guessed height for text are slightly better in general).
  - Fix default background color in fields.",False
336a74a0e5c0848d6fa522dc0b22dbed4fb1d38b,2021-07-28 01:55:58,Tim van der Meij,"Merge pull request #13796 from Snuffleupagus/issue-13794

Allow `StreamsSequenceStream.readBlock` to skip sub-streams with errors (issue 13794)",True
45f3804737e6ed1bee22a9b8139245a5146737bc,2021-07-28 01:52:37,calixteman,"Merge pull request #13807 from calixteman/fulltext

XFA - Get the full value when binding and not only the 1st line (bug 1718725)",True
d3dffa7fa31b5a79159044152dd27bb180d6ab9f,2021-07-28 01:43:40,Tim van der Meij,"Merge pull request #13804 from Snuffleupagus/move-viewer-compatibilityParams

Move the `compatibilityParams` into the `web/app_options.js` file",True
e51cbe63bf30b3f67b857f6c1932529102196c08,2021-07-28 01:40:27,Tim van der Meij,"Merge pull request #13801 from Snuffleupagus/AnnotationLayer-check-navigator

Access `navigator` safely in the `src/display/annotation_layer.js` file",True
bd6f55186d11fab07aee12e1cffff25eec690b2d,2021-07-27 23:55:33,Calixte Denizet,XFA - Get the full value when binding and not only the 1st line (bug 1718725),False
6c95d0cb2cd604659bde1600b4808940e9187427,2021-07-27 20:14:49,Jonas Jenwald,"Move the `compatibilityParams` into the `web/app_options.js` file

Given that we've over time been reducing the number of `compatibilityParams` in use, there's now few enough left that I think it makes sense to simply inline them directly in the `web/app_options.js` file.
Note that we recently inlined/removed the separate `src/display/api_compatibility.js` file, see PR 13525, and that it (in my opinion) thus makes sense to do the same in the `web/`-folder. This patch will also slightly reduce the size of *built* `web/viewer.js` file, which cannot hurt.",False
4b3ab1472c82d352ffe3b802de3007f90ceda628,2021-07-27 13:10:42,Jonas Jenwald,"Access `navigator` safely in the `src/display/annotation_layer.js` file

For code that's part of the core library, rather than e.g. the `web/`-folder, we should always be careful about *directly* accessing any DOM methods.
The `navigator` is one such structure, which shouldn't be assumed to always be available and we should thus check that it's actually present.[1]

Hence this patch re-factors the `navigator.platform` access, in the `AnnotationLayer`-code, to ensure that it's generally safe. Furthermore, to reduce unnecessary repeated string-matching to determine the current platform, we're now using a shadowed getter which is evaluated only once instead (at first access).

---
[1] Note e.g. the `isSyncFontLoadingSupported` getter, in the `src/display/font_loader.js` file.",False
7305b7464ff5bf554edfc9b2ddeca3c083bb415a,2021-07-27 13:06:55,calixteman,"Merge pull request #13795 from calixteman/image_gd

XFA - Elements created outside of XML must have all their properties (bug 1722029)",True
959120e6c933df8b4a99566bfb67bc92df7b64ce,2021-07-26 23:08:52,Calixte Denizet,"XFA - Elements created outside of XML must have all their properties (bug 1722029)
  - an Image element was created, attached to its parent but the $globalData property was not set and that led to an error.
  - the pdf in bug 1722029 has 27 rendered rows (checked in Acrobat) when only one was displayed: this patch some binding issues around the occur element.",False
885e7a8aa476398ae0a6db5ce92a9001546c1e36,2021-07-26 20:12:50,Jonas Jenwald,"Allow `StreamsSequenceStream.readBlock` to skip sub-streams with errors (issue 13794)

This patch makes use of the existing `ignoreErrors` option, thus allowing a page to continue parsing/rendering even if (some of) its sub-streams are corrupt. Obviously this may cause *part* of a page to be broken/missing, however it should be better than (potentially) rendering nothing.
Also, to the best of my knowledge, this is the first bug of its kind that we've encountered.

To avoid having to pass in a bunch of, for a `BaseStream`-instance, mostly unrelated parameters when initializing a `StreamsSequenceStream`-instance, I settled on utilizing a callback function instead to allow conditional Error-suppression.
Note that the `StreamsSequenceStream`-class is a *special* stream-implementation that we only use when the `/Contents`-entry, in the `/Page`-dictionary, consists of an Array with streams.",False
777d890268a508551c731faa8046b047c1a87f6f,2021-07-25 18:12:44,Tim van der Meij,"Merge pull request #13792 from Snuffleupagus/rm-canvas-closure

Remove the remaining closure in the `src/display/canvas.js` file",True
c2e0a36c5106a27978f26f4305375db45fd77965,2021-07-25 17:14:02,Tim van der Meij,"Merge pull request #13793 from timvandermeij/bump

Bump versions in `pdfjs.config`",True
08f25c05f55d7dc250c6ab54cfca861aeb04601d,2021-07-25 17:09:57,Tim van der Meij,Bump versions in `pdfjs.config`,False
e1fa845293c5056d36958fcec6244c049f1a7c02,2021-07-25 16:58:28,Jonas Jenwald,"Only define *existing* methods, when converting the `OPS` format to method-names on the `CanvasGraphics.prototype`

There's no good reason, as far as I can tell, to explicitly define a bunch of methods to be `undefined`, which the current unconditional ""copying"" of methods will do.
Note that of the `OPS` ~23 percent don't, for various reasons, have an associated method on the `CanvasGraphics.prototype`.",False
fbaafdc4e8f5aea03c96af5065d4327e6e436e38,2021-07-25 16:44:58,Jonas Jenwald,"Remove the remaining closure in the `src/display/canvas.js` file

For e.g. the `gulp mozcentral` command, the *built* `pdf.js` file decreases from `304 607` to `301 295` bytes with this patch. The improvement comes mostly from having less overall indentation in the code.",False
156762c482a75261e631948168a65a8adb82f21a,2021-07-25 15:51:23,Tim van der Meij,"Merge pull request #13790 from Snuffleupagus/update-packages

Update packages and translations",True
833f27c677dbe4fd7ca72638e5cbe59362383aa6,2021-07-25 14:02:40,Jonas Jenwald,"Disable a LGTM warning, again (PR 13787 follow-up)

Apparently I didn't put one of the disable comments on the *correct* line, since I didn't read the instructions carefully enough, so let's try again.

Note that, most unfortunately, disabling of warnings isn't applied until *after* a patch has been merged.",False
aad03161373c9b8dde81a18e4e246fd9ca18755e,2021-07-25 14:01:40,Jonas Jenwald,Update l10n files,False
2a667b92d8c285d021234dab32e18a7ab864ab79,2021-07-25 13:54:10,Jonas Jenwald,Update npm packages,False
bcd6dc416abeb66508cf8c36086cafb0f231f884,2021-07-24 19:21:54,Jonas Jenwald,"Merge pull request #13788 from timvandermeij/eslint-rules

Enable the `no-empty-character-class` and `no-template-curly-in-string` linting rules",True
41a2b5c809ac9678ec7b7f4b0a46f4e032de3f22,2021-07-24 18:50:07,Tim van der Meij,"Merge pull request #13787 from Snuffleupagus/lgtm-fix-warnings

Fix (most) LGTM warnings",True
fb99b0df0ebde65ad2ae08a58dd12d5294bd0878,2021-07-24 18:42:41,Tim van der Meij,"Enable the `no-empty-character-class` and `no-template-curly-in-string` linting rules

The former prevents unintended errors in regexes. The latter is
something I ran into a couple of times before editors had proper support
for syntax highlighting in template literals, and it's an easy mistake
to make, especially when converting older code to use template literals.
Nowadays most editors display template literals in different colors, but
nevertheless it seems like a good idea to enable this rule.

Fortunately both rules don't require any code changes, so it's more for
prevention.",False
7b6767d415919b8a7360f7d8adeb2a7ab76bcb5a,2021-07-24 18:07:39,Tim van der Meij,"Merge pull request #13784 from Snuffleupagus/issue-13783

When parsing corrupt documents, avoid inserting obviously broken data in the XRef-table (issue 13783)",True
687cfcecd463688d87cd19159365a5ca051326c5,2021-07-24 17:56:57,Tim van der Meij,"Merge pull request #13786 from Snuffleupagus/rm-more-src-core-closures

Remove a couple of small closures in `src/core/` code",True
70bac87fed2ec5570ccc657bff417225962a10c5,2021-07-24 17:53:59,Jonas Jenwald,"Fix (most) LGTM warnings

Most of the warnings we don't really care about, and those are simply white-listed using inline comments; however two cases prompted actual code changes:

 - In `src/display/pattern_helper.js` the branch in question is indeed unreachable, and should thus be safe to remove. (This code originated in PR 4192, which is now over seven years ago.)

 - In `test/test.js`, the function in question indeed doesn't accept any arguments. (The patch also re-formats a string just above, which didn't seem worthy of a separated patch.)

This now leaves only *one* warning in the LGTM report, however that one is a false positive that we'll need to report upstream.",False
9854b85dc10d0fbc0fefed8b7f83b4301861393d,2021-07-24 17:51:41,Tim van der Meij,"Merge pull request #13775 from Snuffleupagus/Dict-merge-refactor

Remove some duplication in the `Dict.merge` method",True
ebbbc973a5e76564a05e4401f52b75b56d3b0b8b,2021-07-24 16:35:46,Jonas Jenwald,"Remove the closure used with the `PostScriptToken` class

This patch uses the same approach as used in lots of other parts of the code-base, which thus *slightly* reduces the size of this code.",False
81009d42cfd6ed49546b151db566cc70f4a83ed5,2021-07-24 16:29:53,Jonas Jenwald,"Remove the closure used with the `PostScriptStack` class

This patch uses the same approach as used in lots of other parts of the code-base, which thus *slightly* reduces the size of this code.",False
834a638aad900f511836851c5b148ed6f58b2a7d,2021-07-24 14:09:30,Jonas Jenwald,"Merge pull request #13782 from Snuffleupagus/viewer-reset-xfaLayer

[api-minor] XFA - Remove the `xfaLayer` from the DOM when resetting pages (bug 1721977, PR 13427 follow-up)",True
b82c802dff286c593a0f1c40a3a5139ef57e5bb9,2021-07-23 21:40:53,Jonas Jenwald,"When parsing corrupt documents, avoid inserting obviously broken data in the XRef-table (issue 13783)

In cases where even the very *first* attempt at reading from an object will throw, simply ignoring such objects will help improve rendering of *some* corrupt documents.
Note that this will lead to more parsing in some cases, but considering that this only applies to *corrupt* documents that shouldn't be a big deal.",False
f85f5799711dfb6122170bcc43bbc1c7669ffa38,2021-07-23 18:00:34,Jonas Jenwald,"Reduce unnecessary duplication when cancelling `annotationLayer`/`xfaLayer` rendering

There's no good reason, as far as I can tell, to have `PDFPageView.reset` attempt to cancel `annotationLayer`/`xfaLayer` rendering in one special-case (this is mostly a leftover from older code). Previously cancelling was moved into the separate `PDFPageView.cancelRendering`-method, and by slightly tweaking the conditions there we're able to remove a bit of now unnecessary code from the `PDFPageView.reset`-method.",False
d22ffbbc0af7e74eed65c5ba393c44706bd00a02,2021-07-23 17:14:13,Jonas Jenwald,"[api-minor] XFA - Remove the `xfaLayer` from the DOM when resetting pages (bug 1721977, PR 13427 follow-up)

Originally the `xfaLayer` wasn't implemented in such a way that it supported being removed from the DOM when pages were evicted from the cache, however this limitation was lifted in PR 13427 and the `xfaLayer` should thus be handled similar to e.g. the `annotationLayer`.

In addition to removing the `xfaLayer` from the DOM, this patch *also* implements proper rendering/hiding-handling for it (mirroring the `annotationLayer`-code).

*Please note:* This patch is tagged API-minor just in case[1], since it changes the signatures of a couple of `PDFPageView`-methods to improve readability of the code.

---
[1] Although users are *hopefully* not directly accessing any of the affected methods, and are rather using e.g. `PDFViewer` in which case none of these changes will matter.",False
51f0a810851c311598748f637fb583b20b7dce03,2021-07-23 14:13:23,Jonas Jenwald,"Merge pull request #13770 from brendandahl/cache-pattern

Improve performance of reused patterns.",True
da1af02ac80d451fecdafd240795d30990260664,2021-07-23 05:17:40,Brendan Dahl,"Improve performance of reused patterns.

Bug 1721218 has a shading pattern that was used thousands of times.
To improve performance of this PDF:
 - add a cache for patterns in the evaluator and only send the IR form once
   to the main thread (this also makes caching in canvas easier)
 - cache the created canvas radial/axial patterns
 - for shading fill radial/axial use the pattern directly instead of creating temporary
   canvas",False
ead394debdb96c8bd6dce2df49e986f18196f7b6,2021-07-23 00:44:01,calixteman,"Merge pull request #13778 from calixteman/default_ui

XFA - A field without an ui must provide a default one (bug 1718245)",True
a51c4a3a0f9f63245c7defe5308c6a6be6869945,2021-07-23 00:01:25,Calixte Denizet,XFA - A field without an ui must provide a default one (bug 1718245),False
4860ea4711bb96a43722d75ee253a21ed229c6be,2021-07-22 23:15:29,calixteman,"Merge pull request #13777 from calixteman/xfa_rect

XFA - SVG elements mustn't get any pointer events (bug 1721589)",True
b68d2100b4cbbf2c8dcef2fb4bef683803fb6a56,2021-07-22 22:17:29,Calixte Denizet,"XFA - SVG elements mustn't get any pointer events (bug 1721589)
  - a rectangle can be defined after a field and so from a z-index pov, it's on top of the field, which means that the rectangle avoid to have some mouse events in the fields;
  - so this patch just disable pointer events for all elements under svg (included).",False
181580062cbd08d8849e60f0f4b395cdb45f3ce1,2021-07-22 18:46:07,Jonas Jenwald,"Merge pull request #13776 from Snuffleupagus/lgtm-more-test

Include most of the `test`-folder in the LGTM report (PR 13772 follow-up)",True
10c29ed47323abe0f83f7ea3da4136419b784b95,2021-07-22 18:07:17,Jonas Jenwald,"Include most of the `test`-folder in the LGTM report (PR 13772 follow-up)

Given that PR 13772 seem to have worked as intended, it probably cannot hurt to enable the LGTM report for *most* of the remaining code in the `test`-folder. (The one remaining exception is code which originated *outside* of the PDF.js project.)

*Please note:* We'll need to land this patch to actually see any difference in the LGTM results.",False
e1ee3835cdd9e12d664c8d25db0a5dca845374b6,2021-07-22 17:31:43,Jonas Jenwald,"Remove some duplication in the `Dict.merge` method

Currently the `!mergeSubDicts` code-path is essentially just duplicated code, which we can easily avoid by simply moving that check. (This may lead to ever so slightly more parsing for this case, but the difference ought to be negligible in practice.)",False
ab7b577d8567c1d43149a2375d89adfefc9ee98b,2021-07-22 13:05:00,Jonas Jenwald,"Merge pull request #13772 from Snuffleupagus/lgtm-exclude-tests

Include the `font`/`integration`/`unit`-test folders in the LGTM report",True
bdde1336f1431e953113e479b9fb2f2017ef135d,2021-07-22 03:56:21,Jonas Jenwald,"Include the `font`/`integration`/`unit`-test folders in the LGTM report

By default all files/folders classified as test-code are excluded in the LGTM report, however I do believe that it makes sense to include at least the `font`/`integration`/`unit`-test folders.
It seems pretty obvious that you want to avoid *accidentally* introducing any simple logical errors in the tests (and not only in the main code), to ensure that e.g. the unit-tests actually test the desired thing.

Hopefully I've interpreted the information at https://lgtm.com/help/lgtm/customizing-file-classification correctly, however note that we may need to land this patch to actually see any difference in the results.",False
2cf90cd9adbdc14c175c99e0699f371c1d92fc31,2021-07-21 22:28:29,Jonas Jenwald,"Merge pull request #13766 from Snuffleupagus/issue-13751

XFA - Handle `startIndex` correctly in the `Template.$toHTML` method (issue 13751)",True
3fa319ab0e89846d5fa90514f763449d39515843,2021-07-21 21:55:30,calixteman,"Merge pull request #13768 from calixteman/ns_agnostic

XFA - Remove namespace from nodes under xfa:data node",True
5555114bb3ca6e93194f04f7c8495f11aad7086d,2021-07-21 20:41:31,Calixte Denizet,"XFA - Remove namespace from nodes under xfa:data node
  - in real life some xfa contains xml like <xfa:data><xfa:Foo><xfa:Bar>...</xfa:data>
    since there are no Foo or Bar in the xfa namespace the JS representation are empty
    and that leads to errors.
  - so the idea is to make all nodes under xfa:data namespace agnostic which means
    that ns are removed from nodes in the parser but only xfa:data descendants.",False
7d1c19f8bd9a7842e56e68791af329bf6871e7ff,2021-07-21 19:47:13,Jonas Jenwald,"XFA - Handle `startIndex` correctly in the `Template.$toHTML` method (issue 13751)

*Please note:* The PDF document in issue 13751 is *dynamically* created (in e.g. Adobe Reader), with pages added when certain buttons are clicked, hence this patch simply fixes the breaking error and nothing more.

It looks like the current code contains a little bit too much copy-and-paste from the *similar* `index` branch above, since we cannot set the `startIndex` to a negative value. Note how it's being used to initialize the loop-variable, which is then used to lookup values in an Array and accessing the `-1`th element of an Array obviously makes no sense.",False
6c9b6bc59999cfe7253ecc1323f38210b8739cd0,2021-07-20 22:25:23,Jonas Jenwald,"Merge pull request #13764 from Snuffleupagus/issue-13748

XFA - Add a missing method to `XFAAttribute`, to prevent breaking errors (issue 13748)",True
bdeb41a29410c8fa232904a3fd126aef6e67da52,2021-07-20 21:49:56,calixteman,"Merge pull request #13763 from calixteman/bug_1720907

XFA - Must use bindItems element even if there is no direct binding (bug 1720907)",True
c2fe493abeaeaa0d7e12575eb660367267534486,2021-07-20 21:11:05,Jonas Jenwald,"XFA - Add a missing method to `XFAAttribute`, to prevent breaking errors (issue 13748)

*This is yet another case where I've got no idea if the patch is correct, but it does at least fix a breaking error :-)*

Note how in the [`Binder._bindValue` method](https://github.com/mozilla/pdf.js/blob/683ce66a48cd54fa48e96e1925277c134859e76c/src/core/xfa/bind.js#L92-L93), we're assuming that if a `data`-value exists then it'll also be possible to actually access it. For the `XFAAttribute`-implementation however, the second method is missing and that's what causes the breaking errors in issue 13748.

Please note that another possible way of ""fixing"" the error wouldn't been to simply change the exists-check to return `false`, and I could see that being a preferred solution.
However, the reason for submitting the current patch is that we get *fewer* warnings about Nodes with mis-matched types this way.",False
1d07ef597e816f369fc21918c641e0e7357eb526,2021-07-20 20:37:32,Calixte Denizet,XFA - Must use bindItems element even if there is no direct binding (bug 1720907),False
683ce66a48cd54fa48e96e1925277c134859e76c,2021-07-19 23:08:30,Jonas Jenwald,"Merge pull request #13761 from Snuffleupagus/issue-13756

XFA - Prevent breaking errors in `Binder`, when `searchNode` doesn't return data (issue 13756)",True
cf7978d50716c63fc7836de0c1f8df624bafdad7,2021-07-19 21:37:07,Jonas Jenwald,"XFA - Prevent breaking errors in `Binder`, when `searchNode` doesn't return data (issue 13756)

As can be seen in the code (see below), the `searchNode` helper function will return `null` in some cases and all of its call-sites should protect against that before attempting to access the returned data.
While only one of these changes were necessary to fix the breaking errors in issue 13756, in order to prevent future bugs I've added similar defensive code throughout this file.

 - https://github.com/mozilla/pdf.js/blob/07955fa1d31df62fd668a15f58cd40b29a82bd63/src/core/xfa/som.js#L169
 - https://github.com/mozilla/pdf.js/blob/07955fa1d31df62fd668a15f58cd40b29a82bd63/src/core/xfa/som.js#L239
 - https://github.com/mozilla/pdf.js/blob/07955fa1d31df62fd668a15f58cd40b29a82bd63/src/core/xfa/som.js#L254",False
07955fa1d31df62fd668a15f58cd40b29a82bd63,2021-07-18 17:18:34,Tim van der Meij,"Merge pull request #13735 from Snuffleupagus/bug-1720411

Ensure that the field value, for checkboxes, refers to an existing appearance state (bug 1720411)",True
668c58d68d00dfb4d8107351b94e815fdfa6c93d,2021-07-18 16:58:08,Tim van der Meij,"Merge pull request #13746 from Snuffleupagus/getOperatorList-intent

[api-minor] Add `intent` support to the `PDFPageProxy.getOperatorList` method (issue 13704)",True
e04386c67589ea949255f45d609ac5e136aa56b0,2021-07-18 16:41:26,Tim van der Meij,"Merge pull request #13754 from Snuffleupagus/refactor-PDFFunction

Remove the IR (internal representation) part of the `PDFFunction` parsing",True
2d1f60f6556dc74b20ca8d26150ff7b4c747743f,2021-07-18 16:33:31,Tim van der Meij,"Merge pull request #13745 from Snuffleupagus/dev-enableXfa

Enable XFA by default in the development viewer",True
481af097b48eb928bc094e0ad3bdfeaeed21c522,2021-07-17 20:16:57,Jonas Jenwald,"Convert `PDFFunction` to a standard class with `static` methods

For e.g. `gulp mozcentral`, the *built* `pdf.worker.js` file decreases from `1 837 608` to `1 834 907` bytes with this patch-series.
The improvement comes first of all from less overall indentation in `PDFFunction`, and secondly from the removal of (now) unnecessary indirection in the code.",False
d35fe3e7961df1805dd7158e538e07bd03e4e64f,2021-07-17 20:14:58,Jonas Jenwald,"Remove the IR (internal representation) part of the `PDFFunction` parsing

*This follows the exact same princial as PR 12083, but for the `PDFFunction` parsing instead.*

Given that the IR format is completely unused now, all that the current code does is add a bunch of unnecessary indirection/overhead to the handling of PDF-functions.",False
03cf28bf171c0f62150204bdc4f930aa083cff6f,2021-07-16 20:46:30,Jonas Jenwald,"[api-minor] Add `intent` support to the `PDFPageProxy.getOperatorList` method (issue 13704)

With this patch, the `PDFPageProxy.getOperatorList` method will now return `PDFOperatorList`-instances that also include Annotation-operatorLists (when those exist). Hence this closes a small, but potentially confusing, gap between the `render` and `getOperatorList` methods.

Previously we've been somewhat reluctant to do this, as explained below, but given that there's actual use-cases where it's required probably means that we'll *have* to implement it now.
Since we still need the ability to separate ""normal"" rendering operations from direct `getOperatorList` calls in the worker-thread, this API-change unfortunately causes the *internal* renderingIntent to become a bit ""messy"" which is indeed unfortunate (note the `""oplist-""` strings in various spots). As-is I suppose that it's not all that bad, but we may want to consider changing the *internal* renderingIntent to e.g. a bitfield in the future.

Besides fixing issue 13704, this patch would also be necessary if someone ever tries to implement e.g. issue 10165 (since currently `PDFPageProxy.getOperatorList` doesn't include Annotation-operatorLists).

*Please note:* This patch is *also* tagged ""api-minor"" for a second reason, which is that we're now including the Annotation-id in the `beginAnnotation` argument. The reason for this is to allow correlating the Annotation-data returned by `PDFPageProxy.getAnnotations`, with its corresponding operatorList-data (for those Annotations that have it).",False
e5845739fd9f839f7b0db3c281d02c362d8bac0b,2021-07-16 17:46:33,Jonas Jenwald,"Enable XFA by default in the development viewer

Given that https://bugzilla.mozilla.org/show_bug.cgi?id=1720402 has just landed, enabling XFA in the development viewer probably cannot hurt now.",False
da808aeab39cfc55aca49fd093990a6a548e643e,2021-07-16 16:41:48,Jonas Jenwald,"Ensure that the field value, for checkboxes, refers to an existing appearance state (bug 1720411)

Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1720411",False
f1ae7d7b0eedf983924d66917ff066345948a445,2021-07-16 16:27:04,calixteman,"Merge pull request #13743 from calixteman/print_radio

XFA - Checkboxes must be printed (bug 1720182)",True
3fb30ddde5d45746bdaeb7b40ee6c96c01b7946d,2021-07-16 15:02:03,Calixte Denizet,"XFA - Checkboxes must be printed (bug 1720182)
  - to avoid future regressions, annotationStorage is passed to the xfa render in reftests.",False
4b2e0d0d01437ba5ba4ee3d901d8f8dd0ee03837,2021-07-16 02:00:25,calixteman,"Merge pull request #13732 from calixteman/rect

XFA - A rectangle must have the width of its parent but without inner margins",True
ad34f168612143b365f918d08a0f5949f9e74d63,2021-07-16 01:44:17,Tim van der Meij,"Merge pull request #13730 from Snuffleupagus/botbrowsertest

Add a new ""botbrowsertest"" gulp-task, to allow running only the browser tests on the bots",True
c1f89c76c79cd7accc9f1f346f718d4d9fe109d8,2021-07-16 01:37:42,Tim van der Meij,"Merge pull request #13738 from Snuffleupagus/empty-Name

Re-factor the handling of *empty* `Name`-instances (PR 13612 follow-up)",True
05340cc9176bda857691eb76d0a5c636bc904649,2021-07-16 01:30:05,Tim van der Meij,"Merge pull request #13739 from Snuffleupagus/viewer-rm-IE-meta-tag

Remove `<meta>` tag only necessary for IE-compatibility",True
f376a3fbb184975b5eb06679a9326b131eab9a47,2021-07-15 17:29:40,Jonas Jenwald,"Remove `<meta>` tag only necessary for IE-compatibility

Given that Internet Explorer is, since some time now, no longer supported in the PDF.js library this `<meta>` tag can also be removed (added in PR 6374).",False
3838c4e27c4a530afd4683db6362a02b62b1758b,2021-07-15 15:30:42,Jonas Jenwald,"Re-factor the handling of *empty* `Name`-instances (PR 13612 follow-up)

When working on PR 13612, I mostly prioritized a simple solution that didn't require touching a lot of code. However, while working on PR 13735 I started to realize that the static `Name.empty` construction really wasn't a good idea.

In particular, having a special `Name`-instance where the `name`-property isn't actually a String is confusing (to put it mildly) and can easily lead to issues elsewhere. The only reason for not simply allowing the `name`-property to be an *empty* string, in PR 13612, was to avoid having to touch a lot of existing code. However, it turns out that this is only limited to a few methods in the `PartialEvaluator` and a few of the `BaseLocalCache`-implementations, all of which can be easily re-factored to handle *empty* `Name`-instances.

All-in-all, I think that this patch is even an *overall* improvement since we're now validating (what should always be) `Name`-data better in the `PartialEvaluator`.
This is what I ought to have done from the start, sorry about the code churn here!",False
64f86de5cb70928e748d87dbded99cf0992ba1d7,2021-07-14 23:15:53,calixteman,"Merge pull request #13734 from calixteman/print_issue

XFA - Cannot print fields with no names",True
15ab7a822fc4e226fd0caa64195576eeb8337b23,2021-07-14 22:46:56,Brendan Dahl,"Merge pull request #13725 from Snuffleupagus/catch-setTransform

Avoid all rendering breaking completely when `CanvasPattern.setTransform()` is unsupported",True
019699acfb1659f4c9c6e476e63cf7999ddbeac8,2021-07-14 21:08:35,Calixte Denizet,"XFA - Cannot print fields with no names
  - it was not possible to print pdf file in issue #13500.",False
5081167e7f5f1a55f7d7ebf94a7763b593e4b662,2021-07-14 20:16:13,Calixte Denizet,"XFA - A rectangle must have the width of its parent but without inner margins
  - it aims to fix #13584;
  - to avoid bad rendering because of clipping just set overflow to visible on SVG element.",False
2438d5ba8c911933679206884ff80f2686ad6379,2021-07-14 15:34:09,Jonas Jenwald,"Add a new ""botbrowsertest"" gulp-task, to allow running only the browser tests on the bots

Currently it's possible to run e.g. `gulp unittest`, `gulp fonttest`, and `gulp integrationtest` *separately* on the bots; see https://github.com/mozilla/botio-files-pdfjs
However, it's not possible to run *only* the `gulp browsertest` command on the bots without also running the full test-suite. In some cases, e.g. if the ""browsertest"" times out, having a way to only re-run those would thus save some time and resources.

If/when this patch lands, I'll follow-up with a patch adding a new `on_cmd_browsertest.js` file to the https://github.com/mozilla/botio-files-pdfjs repository.",False
b6c6a0cb7cefc81de857cfa4419051d014ad05e1,2021-07-13 23:06:06,Jonas Jenwald,"Avoid all rendering breaking completely when `CanvasPattern.setTransform()` is unsupported

*Please note:* This patch doesn't fix rendering of (various) patterns in browsers/environments without full `CanvasPattern.setTransform()` support, but it at least prevents outright failures and thus allows the rest of the page to render.

This patch provides a temporary work-around for Firefox 78 ESR[1], and for Node.js environments (see issue 13724), where rendering is currently completely broken.

---
[1] Please note that the `createMatrix` helper function doesn't actually work as intended. The reason is that it's not `DOMMatrix` itself which is unsupported in older Firefox versions, but rather calling `CanvasPattern.setTransform(...)` with a `DOMMatrix`-argument.
Furthermore, the `createSVGMatrix` fallback won't actually help either since that method doesn't accept any parameters and would thus require *manually* specifying the matrix-state; see e.g. https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern/setTransform#examples
Finally, given that it's less than a month to the [Firefox 91 ESR release](https://wiki.mozilla.org/RapidRelease/Calendar) and that as-is all patterns are completely broken e.g. when using the latest viewer in Firefox 78 ESR, I'm just not convinced that it's worth the ""hassle"" of providing a more proper work-around.",False
a17bd13023b476db874e8ebe240e4d8969cb793e,2021-07-13 13:33:58,calixteman,"Merge pull request #13721 from calixteman/layout8

XFA - Avoid to have containers not pushed in the html",True
4d130d066c3fb0786780eba6d2c809bb4ebad28d,2021-07-13 01:15:49,calixteman,"Merge pull request #13723 from calixteman/xfa_print_fix

XFA - Only the first page was printed (bug 1720159)",True
dd55e76f5d00a2ebf9db0bf93620401a2eb87fd3,2021-07-13 01:04:58,Calixte Denizet,"XFA - Avoid to have containers not pushed in the html
  - it aims to fix issue #13668.",False
0b4bf5b64587e33e3e30b9a5c959a9652f09ffb1,2021-07-13 00:23:21,Calixte Denizet,XFA - Only the first page was printed (bug 1720159),False
8ab65ed32d0f99a5fd5bf6ce302acb25082910c0,2021-07-12 13:16:50,calixteman,"Merge pull request #13720 from mozilla/revert-13716-layout7

Revert ""XFA - Avoid to have containers not pushed in the html""",True
140c2bc56313e74cf753ef7baf3dd14cb35d94dd,2021-07-12 13:16:38,calixteman,"Revert ""XFA - Avoid to have containers not pushed in the html""",False
b6445ddc08878c4f5741802ad256bb7c35893b8a,2021-07-12 13:01:27,calixteman,"Merge pull request #13716 from calixteman/layout7

XFA - Avoid to have containers not pushed in the html",True
bd3639ff80f05719af1f2957e53317accb71cb28,2021-07-12 03:30:20,calixteman,"Merge pull request #13718 from calixteman/xfa_tooltip

XFA - Support assist element",True
789d5c9b3917cad0552f5947040b6aa9219ced45,2021-07-12 02:27:49,calixteman,"Merge pull request #13717 from calixteman/valign

XFA - Fix wrong vertical alignments",True
9bbc19484605028838a4c6112dae981c67cffd5c,2021-07-12 00:31:18,Calixte Denizet,XFA - Support assist element,False
ff49fa52472e92fadf123b6efd351cceb4454696,2021-07-11 23:16:20,Calixte Denizet,XFA - Fix wrong vertical alignments,False
fccc6c224216dd6d2665a28184053f5e5b9ea06a,2021-07-11 22:44:44,Calixte Denizet,"XFA - Avoid to have containers not pushed in the html
  - it aims to fix issue #13668.",False
70434c132f860f62ba70f1edc119f784a2d9a656,2021-07-11 19:23:36,calixteman,"Merge pull request #13714 from calixteman/myriad

XFA - Use fake MyriadPro as a fallback for missing fonts",True
94b60b311f2012108095ef94a5c64230a476d1e7,2021-07-11 18:03:01,Tim van der Meij,"Merge pull request #13715 from Snuffleupagus/update-packages

Update packages and translations",True
690b5d1941c268829da41ec862d17f5bc81f5d42,2021-07-11 17:22:13,Calixte Denizet,"XFA - Use fake MyriadPro as a fallback for missing fonts
  - aims to fix #13597.",False
c9ed65a0c47e5d2e983be233df8f277cc9ef3ac1,2021-07-11 15:55:54,Jonas Jenwald,Update l10n files,False
46b6e57b7c419f0081c9c5fd0abe75ab53df6db5,2021-07-11 15:51:29,Jonas Jenwald,Update the `eslint-plugin-unicorn` package to the latest version,False
689e5c54a7675dfea8e49207be2feedbcd9e0176,2021-07-11 15:46:47,Jonas Jenwald,Update the `es-module-shims` package to the latest version,False
a926976e4dd08f7795c565b6d237161b30f219e8,2021-07-11 15:44:47,Jonas Jenwald,Update npm packages,False
d416b238986774bbe9bf31fd5674a71950631ad0,2021-07-10 17:49:03,calixteman,"Merge pull request #13705 from calixteman/lineheight3

XFA - Fix text positions (bug 1718741)",True
16759bf3909bf74d3b11a4c53b65a9891034348b,2021-07-10 16:57:16,Jonas Jenwald,"Merge pull request #13712 from Snuffleupagus/checkDimensions-bbox

XFA - Always compute the transformed BBox values in `checkDimensions` (PR 13691 follow-up)",True
700b79a30505c256b50c1112d189a14d20116cb2,2021-07-10 14:54:05,Jonas Jenwald,"XFA - Always compute the transformed BBox values in `checkDimensions` (PR 13691 follow-up)

This way we ensure that these BBox values are *always* defined as expected for every `case`-block, and we also don't need to duplicate the lookup in multiple places. (Also, the patch removes a couple of unnecessary line-breaks in existing comments.)

Fixes https://github.com/mozilla/pdf.js/pull/13691#pullrequestreview-702356627, which was flagged by LGTM.",False
2822ba42082b26fae9ecd9494c824d18ef9b44a2,2021-07-10 02:36:43,Tim van der Meij,"Merge pull request #13699 from mdrodz/webpack-hash-implementation

making webpack aware of the change inside of the worker file and hash",True
62b5dc9eb708b607319e09c70f47af8195a9239a,2021-07-10 02:31:19,Tim van der Meij,"Merge pull request #13696 from Snuffleupagus/issue-13689

[GENERIC viewer] Try to fixup ""incomplete"" language codes (issue 13689)",True
a6d2e78b8ad4b24d5fb16ad038f6199013889b60,2021-07-10 02:28:50,Tim van der Meij,"Merge pull request #13690 from symtalha14/text-annotation-comb

Fixed text annotation comb input box",True
f7cb8b4bddce2978571404964320d380f9fb3668,2021-07-10 01:30:25,calixteman,"Merge pull request #13710 from calixteman/13706_f_up

XFA - Move xfa layer on top of the others (follow-up of #13706)",True
a4f60fc41714b688f02921a4c3858edeb65e39c5,2021-07-10 01:29:50,calixteman,"Merge pull request #13708 from calixteman/xfa_tab

XFA - Add support for traversal and traverse element",True
ff77acb357547f2eb2f128c0e48c3a17577e88db,2021-07-10 00:28:19,Calixte Denizet,XFA - Move xfa layer on top of the others (follow-up of #13706),False
ccac125623c289bba3b69a78f995b1f549e83fb3,2021-07-10 00:20:25,Calixte Denizet,"XFA - Add support for traversal and traverse element
  - For now, just implement the ""next"" target in using tabindex attribute of html elements.",False
caaf77375f4a1b1ee2e9402ec5a2f5d25a65e161,2021-07-09 23:42:55,calixteman,"Merge pull request #13703 from eltociear/patch-4

XFA - Fix typo in factory.js",True
90e527968ac3d8097d77a4ebf65b2133a38a6f38,2021-07-09 23:40:39,calixteman,"Merge pull request #13706 from calixteman/13697

XFA - Keep xfa layer on top of the others (bug 1719629)",True
1b77888400d874a8c0b23521bd1629987ab2becd,2021-07-09 21:48:22,Calixte Denizet,XFA - Keep xfa layer on top of the others (bug 1719629),False
58e1f5168836f16158be2ac34a06d6372cd32281,2021-07-09 21:41:12,Calixte Denizet,"XFA - Fix text positions (bug 1718741)
  - font line height is taken into account by acrobat when it isn't with masterpdfeditor: I extracted a font from a pdf, modified some ascent/descent properties thanks to ttx and the reinjected the font in the pdf: only Acrobat is taken it into account. So in this patch, line heights for some substituted fonts are added.
  - it seems that Acrobat is using a line height of 1.2 when the line height in the font is not enough (it's the only way I found to fix correctly bug 1718741).
   - don't use flex in wrapper container (which was causing an horizontal overflow in the above bug).
   - consequently, the above fixes introduced a lot of small regressions, so in order to see real improvements on reftests, I fixed the regressions in this patch:
     - replace margin by padding in some case where padding is a part of a container dimensions;
     - remove some flex display: some containers are wrongly sized when rendered;
     - set letter-spacing to 0.01px: it helps to be sure that text is not broken because of not enough width in Firefox.",False
0afc785c7d0de39ab79f6bb60d8f60daa3f8477b,2021-07-09 19:04:47,calixteman,"Merge pull request #13700 from calixteman/image_scale

XFA - Scale correctly images",True
dba30eac7b5cbfbd23d0d7530147103e73936fa0,2021-07-09 18:21:37,Ikko Ashimine,"XFA - Fix typo in factory.js

occured -> occurred",False
ad195e0f0572ab8c2ce9123b73e605e0aae235d1,2021-07-08 23:58:49,Calixte Denizet,XFA - Scale correctly images,False
a7c4fb44785ae78b191d7ff363fbc9f3b170058d,2021-07-08 22:02:58,Rodolfo Rangel,"making webpack aware of the change inside of the worker file and hashing its name on build accordingly

removing .worker because it is already added in the [name] part",False
29fd39a16ef8c9b570bfdbbf7a25f642be442b0e,2021-07-08 16:24:58,Jonas Jenwald,"[GENERIC viewer] Try to fixup ""incomplete"" language codes (issue 13689)

While I don't know if it's technically correct to even do this, it could provide a slightly better out-of-the-box behaviour in browsers that specify (from the PDF.js `l10n`-folder perspective) ""incomplete"" language codes.

Rather than immediately falling back to English, we'll use a white-list to try and re-write a ""partial"" language code to a (hopefully) suitable one that matches an existing `l10n`-folder. The disadvantage of this solution is that the list needs to be kept *manually* up-to-date with any changes in the `l10n`-folder, however new locales are added infrequently enough that this should be acceptable.

Fixes 13689 (assuming we actually want/care to do so, otherwise we should just WONTFIX the issue).",False
c33bf0b5e8dc09ed010d9c4a1dcdaa98975b6378,2021-07-08 16:12:22,calixteman,"Merge pull request #13692 from calixteman/bind_global

XFA - Correctly bind global data (bug 1718725)",True
418880d47330e42f867b81c8e4f9035073bf94e3,2021-07-08 13:28:29,Jonas Jenwald,"Merge pull request #13694 from Snuffleupagus/handleBreak-rm-extra-target

XFA - remove unnecessary check in the `handleBreak` function (PR 13687 follow-up)",True
df6107714a53124cd6edeac1f10bb45274b5ee47,2021-07-08 02:52:29,Jonas Jenwald,"XFA - remove unnecessary check in the `handleBreak` function (PR 13687 follow-up)

With the changes in PR 13687 we're now checking if `target` is defined *twice* in a row, which shouldn't be necessary :-)

(I noticed this when glancing at the unofficial LGTM results; maybe we should re-evalute the decision to not integrate that into the CI.)",False
fbd2f286181bdd433a690d9ef6b79bbcd2b9e1f5,2021-07-08 01:13:21,calixteman,"Merge pull request #13693 from calixteman/textfields

XFA - Enable disabled fields (bug 1719464)",True
e34e2e0af6f119656ebca26ff9bea40ae5c7e41c,2021-07-07 23:41:49,symtalha14,Fixed text annotation input field,False
36cfb15668a3d69a44d94ffb631535a5a04711fc,2021-07-07 22:47:58,calixteman,"Merge pull request #13691 from calixteman/layout6

XFA - Handle correctly nested containers with lr-tb layout (bug 1718670)",True
d9a776caf8c76e9e737c843ced4ee7f46712ab10,2021-07-07 22:41:36,Calixte Denizet,"XFA - Enable disabled fields (bug 1719464)
  - it's a workaround in waiting for JS implementation to let the use fill manually some fields.",False
8a06df9253eb1a94680f83b9166621a00f9274c1,2021-07-07 22:24:32,Calixte Denizet,"XFA - Handle correctly nested containers with lr-tb layout (bug 1718670)
  - and avoid to push a field with no dimensions when we have some available space in width in a parent.",False
778800a53a09db942fdf0f58f8621f088e382ad6,2021-07-07 21:06:56,Calixte Denizet,XFA - Correctly bind global data (bug 1718725),False
b2b7806cabecf495bef88402575a8236d713ed63,2021-07-07 18:37:17,Jonas Jenwald,"Merge pull request #13649 from Snuffleupagus/xfa-merge-supplemental-font-data

Merge the supplemental font data files used with XFA documents",True
37d280897769e4d97563b2bcdcc042d11a768b61,2021-07-07 15:26:34,Jonas Jenwald,"Merge the supplemental font data files used with XFA documents

When XFA support was added, the size of the *built* `pdf.worker.js` file increased quite a bit. Hence I think that it makes sense to, where easily possible, do what we can to (slightly) reduce the size of the PDF.js library.

The supplemental font data files (added for XFA rendering), containing rescale-factors respectively widths, seem like an excellent candidate here since they're not particularly large in either line-count or file sizes.
In this patch these files are instead merged into a *single* file per font, rather than four different ones, and even with these changes the resulting source files don't become all that large.[1]

For e.g. the `gulp mozcentral` build, this reduces the size of the *built* `pdf.worker.js` file by more than `3 kB`. Given the overall simplicity of the patch, that kind of size decrease definitely seem worthwhile to me.

---
[1] Especially when compared to truly large files such as e.g. `glyphlist.js`, `metrics.js`, and `unicode.js`.",False
1eb9a3e9eb93e3885c84690934d10ad4355495a3,2021-07-07 15:20:26,calixteman,"Merge pull request #13687 from calixteman/failing_som

XFA - Don't fail xfa loading because of a JS subexpression in SOM expressions",True
0486d24e362b5ab21e8ff59719f756a44379363f,2021-07-07 14:17:53,Calixte Denizet,"XFA - Don't fail xfa loading because of a JS subexpression in SOM expressions
  - Fix for one pdf in bug 1717668 (PDFIUM-292-0.pdf).",False
05ebb6329b46be92656d262501119dfd120c6c7b,2021-07-07 13:54:01,Jonas Jenwald,"Merge pull request #13683 from brendandahl/mask-fixes

Fix transformations when painting image masks and tiling patterns.",True
a52c0c6988e557b39c8ea56184a7874e58b6fc96,2021-07-07 05:59:32,Brendan Dahl,"Fix transformations when painting image masks and tiling patterns.

Previously, when we filled image masks we didn't copy over the current transformation,
this caused patterns to be misaligned when painted. Now we create a temporary
canvas with the mask and have the transform copied over and offset it relative to
where the mask would be painted. We also weren't properly offsetting tiling patterns.
This isn't usually noticeable since patters repeat, but in the case of #13561 the pattern
is only drawn once and has to be in the correct position to line up with the mask image.

These fixes broke #11473, but highlighted that we were drawing that correctly by
accident and not correctly handling negative bounding boxes on tiling patterns.

Fixes #6297,  #13561, #13441

Partially fixes #1344 (still blurry but boxes are in correct position now)",False
a0aff125dd507d09db97cee345b8e46b048d752b,2021-07-07 02:32:37,Brendan Dahl,"Merge pull request #13684 from calixteman/typo

XFA - Default background in rectangle is white",True
c47f0f0f407b04bb18cd13977b7dc42a43dcafe5,2021-07-07 00:47:20,Calixte Denizet,"XFA - Default background in rectangle is white
  - Fix a typo in order to open the pdf in issue #13679
  - After fixing the fill default color there wer some regressions because of z-index
    and when fixing z-index there were some regressions because of borders
  - So fix the borders rendering.",False
90d196a080c43739cd31d026f7ca9b6c36d074b0,2021-07-06 19:10:55,calixteman,"Merge pull request #13680 from calixteman/layout5

XFA - Layout correctly a subform with row layout (bug 1718740)",True
5f76b6370c91d7a4358edffb9caac667af9dd680,2021-07-06 17:41:25,Calixte Denizet,"XFA - Layout correctly a subform with row layout (bug 1718740)
  - Fix issues with subformSet elements which are not a real container.",False
b3de26f51481a2853c639b8c11eeaacd02e65733,2021-07-06 14:40:04,Jonas Jenwald,"Merge pull request #13675 from Snuffleupagus/driver-image-src-last

[test/driver.js] Ensure that Image `src` is set *after* the callbacks in `resolveImages`",True
ba2d6851665c6d2b41e6dca8cd768630c4af27ea,2021-07-06 13:23:29,calixteman,"Merge pull request #13673 from calixteman/images2

XFA - An image can be a stream in the pdf (bug 1718521)",True
f6ce449fea773cd69f7a165881d5fc2ed6d248c3,2021-07-05 19:58:59,Jonas Jenwald,"[test/driver.js] Ensure that Image `src` is set *after* the callbacks in `resolveImages`

*While I cannot guarantee that this will fix the recent intermittents, this patch really shouldn't hurt.*

By setting the Image `src` first, there's a small possibility that the Image is loaded *before* we've had a change to attach the `onload`/`onerror` callbacks which may cause the Promise to remain in a pending state.
Note that prior to PR 13641 we didn't correctly await all image resources to actually load, which could explain the very recent intermittent test-failures.",False
b9e84ba70ec5a4a30333b9092f316c9ec7b7f079,2021-07-05 19:15:59,calixteman,"Merge pull request #13665 from calixteman/reserve

XFA - Fix indentation for justified paragraph",True
5cdee80c8e548d1caeb5bcf0ff319fc8c8c7bf5f,2021-07-05 17:36:23,Calixte Denizet,XFA - An image can be a stream in the pdf (bug 1718521) - hrefs can be found in catalog > Names > XFAImages,False
02c069481e0aacc8ea688bbc3ff86cb353cd1a03,2021-07-05 17:02:42,calixteman,"Merge pull request #13653 from calixteman/lineheight

XFA - Improve text layout",True
fcd4c8151c31b423ec9c10e57446f613f580c104,2021-07-05 16:17:35,calixteman,"Merge pull request #13672 from mozilla/revert-13654-images

Revert ""XFA - An image can be a stream in the pdf (bug 1718521)""",True
783cbc1793d28a38631191a72e24239111e30229,2021-07-05 16:17:14,calixteman,"Revert ""XFA - An image can be a stream in the pdf (bug 1718521)""",False
b370d4714f6713007af9f0b0f947a949a947d0c1,2021-07-05 15:34:34,calixteman,"Merge pull request #13654 from calixteman/images

XFA - An image can be a stream in the pdf (bug 1718521)",True
62808cb3c232ade45cc19495d68a70410daf1682,2021-07-04 21:35:12,Tim van der Meij,"Merge pull request #13666 from Snuffleupagus/eslint-operator-assignment

Enable the ESLint `operator-assignment` rule",True
819be0e78b9b6835b04709456e58d9cbe2a8508a,2021-07-04 18:53:56,Jonas Jenwald,Fix the remaining ESLint `operator-assignment` errors,False
901b24e8afd15dfc0631c0fa93a7f39e836c611b,2021-07-04 16:27:45,Jonas Jenwald,"Enable the ESLint `operator-assignment` rule

This patch was generated automatically, using the `gulp lint --fix` command.

Please find additional details about the ESLint rule at https://eslint.org/docs/rules/operator-assignment",False
de805901578ecd1aae5f3663487a13e7896dd55a,2021-07-04 15:05:50,Jonas Jenwald,"Merge pull request #13662 from calixteman/no_arial

XFA - Don't use system font when a font is not embeded but there is a substitution",True
5c7cd6fb4fa81d9f32c128e313cffbc96c1705ee,2021-07-03 22:29:11,Tim van der Meij,"Merge pull request #13661 from Snuffleupagus/fingerprints

[api-minor] Support accessing both the original and modified PDF fingerprint",True
f979aae6fe8e51616084b53a2cbf0648d1001aca,2021-07-03 22:20:07,Tim van der Meij,"Merge pull request #13664 from Snuffleupagus/rm-package-version

Remove the `version` field from the `package.json` file",True
9b5574d3efbbb70756acdf0bf1cd4ba019e423d1,2021-07-03 21:37:01,Calixte Denizet,"XFA - Fix indentation for justified paragraph
  - and ceil the reserve for a caption to avoid to split it;
  - both issues are present in the pdf in issue #13633.",False
e4adde34622517891b07b836a64127f79b7355f5,2021-07-03 20:16:28,Jonas Jenwald,"Remove the `version` field from the `package.json` file

According to https://docs.npmjs.com/cli/v7/configuring-npm/package-json#version, the ""version"" field is not required[1]:
> If you don't plan to publish your package, the name and version fields are optional.

Hence it shouldn't be necessary to have a ""dummy"" `version` field in the `package.json` file, and it seems quite unfortunate to have an essentially meaningless entry in that file.[2]
Furthermore, I'd even go as far as suggesting that it's actually doing more harm than good in practice, since it's not uncommon for people to open issues where they simply quote the `package.json`-entry when filling out the ISSUE_TEMPLATE thus causing confusion as to which *exact* version is actually used.

Unless I'm misremembering, I believe that the only reason for adding the `version` field was that is was necessary in order for things to work back when testing was run on Travis.
Now we're using GitHub Actions instead, where things seem to work just find even without a `version` field; hence why I think it makes sense to remove this.

---
[1] Please note that this patch doesn't affect the `pdfjs-dist` package, since the `package.json` file used there is created in `gulpfile.js` during building.

[2] Trying to, automatically, update the `version` field on *every* commit really doesn't seem worth it to me.",False
5744dd773d6d7db0093182788263d6a5dc1dfbf8,2021-07-03 18:43:56,Calixte Denizet,"XFA - Don't use system font when a font is not embeded but there is a substitution
  - always use a font coming from pdf.js when there is one: this way we don't use a system font which could looks wrong.",False
661c60ecc9e65af6711dc0ae25b0574f421b0d41,2021-07-03 17:26:33,Jonas Jenwald,"[api-minor] Support accessing both the original and modified PDF fingerprint

The PDF.js API has only ever supported accessing the original file ID, however the second one that (should) exist in *modified* documents have thus far been completely inaccessible through the API.
That seems like a simple oversight, caused e.g. by the viewer not needing it, since it really shouldn't hurt to provide API-users with the ability to check if a PDF document has been modified since its creation.[1]

Please refer to https://www.adobe.com/content/dam/acom/en/devnet/pdf/pdfs/PDF32000_2008.pdf#G13.2261661 for additional information.

For an example of how to update existing code to use the new API, please see the changes in the `web/app.js` file included in this patch.

*Please note:* While I'm not sure if we'll ever be able to remove the old `PDFDocumentProxy.fingerprint` getter, given that it's existed since ""forever"", that probably isn't a big deal given that it's now limited to only `GENERIC`-builds.

---
[1] Although this obviously depends on the PDF software following the specification, by updating the second file ID as intended.",False
f9d506cf50b6e17d6814c16a280a096ef6a0e291,2021-07-03 16:31:46,Tim van der Meij,"Merge pull request #13658 from Snuffleupagus/cloneValue

Don't attempt to structure clone unsupported types with workers disabled",True
227d0b0dac347c6a2b722588b12e13c74575897f,2021-07-03 16:24:34,Tim van der Meij,"Merge pull request #13657 from Snuffleupagus/rm-instanceof-Object

Replace `instanceof Object` with `typeof` checks",True
bdf6f733bfa27d8a322e9ed4ea90ff8af999b19e,2021-07-03 15:26:33,Jonas Jenwald,"Don't attempt to structure clone unsupported types with workers disabled

Please refer to https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm

Based on that information, and manually testing our code, the implementation in `cloneValue` has the following shortcomings:
 - Attempting to clone `function`s is only prevented when they're part of an Object, but is currently allowed when they occur standalone.
 - Cloning of `Symbol`s is currently not prevented, which it should be since the native structured clone algorithm throws.
 - Any disallowed types should be checked first, to reduce the risk of future changes accidentally allowing something that shouldn't be supported.",False
909ff8e29fa653be95ec36430971fe4b9d3394e4,2021-07-03 15:00:46,Jonas Jenwald,"Replace `instanceof Object` with `typeof` checks

Using `instanceof Object` is generally problematic, since it's not guaranteed to always do the right thing for all Objects.
(I stumbled upon this while working on another patch, when I noticed that the `outlineView` was broken with workers disabled.)",False
f16828be496aa681a0ce4d7a5b70a96ed1bfdb00,2021-07-03 00:04:10,Calixte Denizet,"XFA - An image can be a stream in the pdf (bug 1718521)
  - hrefs can be found in catalog > Names > XFAImages",False
f7d3b22480b7d7367e8130e6bb91c4fac2c496c4,2021-07-02 21:23:32,Calixte Denizet,"XFA - Improve text layout
  - support paragraph margins, line height, letter spacing, ...
  - compute missing dimensions from fields based almost on the dimensions of caption contents.",False
d80651e5724686535ac4fbdfac5d5e280a16dbdb,2021-07-01 00:13:07,calixteman,"Merge pull request #13598 from calixteman/dhl

XFA - Remove empty pages",True
a8a5c5f10b6099d356d7c9e4004673aa97452d27,2021-06-30 21:42:13,calixteman,"Merge pull request #13648 from calixteman/xfa_bg

XFA - Don't fill when the fill element is not visible (bug 1718735)",True
08e08d5852e1f576ffda04f0a0d6c04cd962d937,2021-06-30 20:44:08,Calixte Denizet,XFA - Don't fill when the fill element is not visible (bug 1718735),False
ff440d13e7a6462238b7e931fbac163f69403278,2021-06-30 20:02:27,Calixte Denizet,"XFA - Remove empty pages
  - it aims to fix #13583;
  - fix the switch to breakBefore target;
  - force the layout of an unsplittable element on an empty page;
  - don't fail when there is horizontal overflow (except in lr-tb);
  - handle correctly overflow in the same content area (bug 1717805, bug 1717668);
  - fix a typo in radial gradient first argument.",False
6307349e31c73dc6e933487244563bddaab9cebe,2021-06-30 00:52:34,Tim van der Meij,"Merge pull request #13640 from Snuffleupagus/issue-6759

Add non-PRODUCTION/TESTING overflow `assert`s to various string helper-functions (issue 6759)",True
d88d9a25740e7e34a5b0ac65bc182dbe2b9bcef3,2021-06-29 20:58:10,calixteman,"Merge pull request #13616 from marco-c/1773_reftests

Add PDFs from #1773 to the reftests",True
db15205e2c43c26ad5ac77767dfd8c90d8e46693,2021-06-29 20:05:06,Marco Castelluccio,Add PDFs from #1773 to the reftests,False
f35e4cc9aba048360434d037a1bbb447d9217c53,2021-06-29 03:16:59,calixteman,"Merge pull request #13645 from calixteman/bug1718241

XFA - Choice list has no selected value by default (bug 1718241)",True
04dc90293388267c18e4a23125e2453a957d9e88,2021-06-29 03:16:09,calixteman,"Merge pull request #13644 from calixteman/xfa_missing_fonts

XFA - Support non-embedded fonts without a Widths entry",True
70bb672dcd3465034e7b5494690caf1e75b3f1b7,2021-06-29 02:35:08,Calixte Denizet,"XFA - Support non-embedded fonts without a Widths entry
  - some pdf use some fonts which are not embedded or they don't have any width array or don't have any css info (e.g. for standard fonts or Arial).
  - so add widths arrays for Liberation fonts in order to compute the ones for other fonts in using scale factors array.",False
1de133a7c90276e9489b2a7756bc7bbbd8fdaeb5,2021-06-29 01:40:26,Calixte Denizet,XFA - Choice list has no selected value by default,False
3f02a46570b12da97ca265a7a4c8e749ffbb90f4,2021-06-29 01:25:25,calixteman,"Merge pull request #13641 from calixteman/image_dim

XFA - Implement aspect property on image element",True
71d17b0cc45cd25adf3a3ef3e29694e6c3660539,2021-06-29 00:13:39,Calixte Denizet,"XFA - Implement aspect property on image element
  - it aims to fix issue #13634;
  - move some img-related functions in test/drivers.js in order to have images in xfa reftests.",False
ff3a5382ee9ac52b1cdca5cc97611470c026b8e4,2021-06-28 21:21:46,calixteman,"Merge pull request #13635 from calixteman/1718037

XFA - Fix width of a container with lr-tb layout (bug 1718037)",True
b261446981809db266eaedc62f30e4d079d6c125,2021-06-28 21:17:04,Calixte Denizet,XFA - Fix width of a container with lr-tb layout (bug 1718037),False
03dff1c5f521b2d0655ac80b78b53c5c915eaf0e,2021-06-28 21:14:03,calixteman,"Merge pull request #13639 from calixteman/old_break

XFA - Replace deprecated break element (bug 1718053)",True
191db4145ec29e632e0fc2736e8a7b8494709a82,2021-06-28 16:55:47,calixteman,"Merge pull request #13642 from calixteman/quotes

XFA - Remove quotes of font name in xhtml",True
677332aa7be426822fc63ada5bb518fc2f35dd67,2021-06-27 21:35:12,Calixte Denizet,XFA - Remove quotes of font name in xhtml,False
273d8cb746aed5a9cf5a6f0d246c9624051bf7ba,2021-06-27 19:36:30,Jonas Jenwald,Add non-PRODUCTION/TESTING overflow `assert`s to various string helper-functions (issue 6759),False
257de0e8c53c1d1e4c0e0e0b0c0ecbe62c2e43dd,2021-06-27 18:33:00,Calixte Denizet,"XFA - Replace deprecated break element (bug 1718053)
  - the break element has been deprecated in XFA 2.4 but some old documents can use it, so replace it with one (or more) of its possible substitutions:
    - breakBefore;
    - breakAfter;
    - overflow.",False
d644b66c72f3a13db1e4446268f8df4684ce5224,2021-06-27 16:17:57,Tim van der Meij,"Merge pull request #13638 from Snuffleupagus/api-tweak-docs

A couple of smaller JSDocs tweaks in `src/display/api.js`",True
4a8466cdacd89768dbfc3f7ff710c87d43aebd89,2021-06-27 16:12:54,Tim van der Meij,"Merge pull request #13637 from Snuffleupagus/update-packages

Update packages and translations",True
d02146b13bc4701d15d4249299b7ae47296f84f2,2021-06-27 15:25:53,Jonas Jenwald,Add a `OnProgressParameters` typedef to reduce (some) duplication in `src/display/api.js`,False
ea4b1623283bb30e0bdc6035b7ff58ab4471273c,2021-06-27 15:04:59,Jonas Jenwald,Use the `RefProxy` typedef in more JSDoc comments in `src/display/api.js`,False
0326c05db0a5feca54cd152f41ec8d7d56576f49,2021-06-27 14:01:06,Jonas Jenwald,Update l10n files,False
b146c597b0abe2d74844892cd359e0d8d727624d,2021-06-27 13:59:39,Jonas Jenwald,"Fix (some) vulnerabilities reported by `npm audit`

This was done automatically, using the `npm audit fix` command.",False
e79ed27f2f423edea2b6263a20e391123c2fa12a,2021-06-27 13:57:02,Jonas Jenwald,Update the `es-module-shims` package to the latest version,False
f03d5b3ee7ae485e88f23122499bc727cde281d0,2021-06-27 13:55:40,Jonas Jenwald,Update npm packages,False
d7f8a0e9b91d05218b3efbc8eec703d844611256,2021-06-26 17:47:11,Tim van der Meij,"Merge pull request #13628 from Snuffleupagus/issue-13626

Check that TrueType (3, 0) cmap tables, for symbolic fonts, are sorted correctly (issue 13626)",True
82660296d6fe6eb9d2bf4c944faefe97684e8799,2021-06-26 17:34:20,Tim van der Meij,"Merge pull request #13600 from Snuffleupagus/scrollMatchIntoView-selectedLeft

Take the position of the `selected` element into account when scrolling matches (issue 13596)",True
9de0916fd473244cd23133c79d5aaa52ee6ce707,2021-06-25 23:42:09,calixteman,"Merge pull request #13627 from calixteman/save

XFA - Save filled data in the pdf when downloading the file (Bug 1716288)",True
429ffdcd2f3340d38426219dbcb84636db583745,2021-06-25 22:27:01,Calixte Denizet,"XFA - Save filled data in the pdf when downloading the file (Bug 1716288)
  - when binding (after parsing) we get a map between some template nodes and some data nodes;
  - so set user data in input handlers in using data node uids in the annotation storage;
  - to save the form, just put the value we have in the storage in the correct data nodes, serialize the xml as a string and then write the string at the end of the pdf using src/core/writer.js;
  - fix few bugs around data bindings:
    - the ""Off"" issue in Bug 1716980.",False
50edd5da639da371986e50c921e8a1b61d490f53,2021-06-25 20:32:02,Jonas Jenwald,"Suppress OTS warnings about the `caretOffset` in the hhea-table

 - https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6hhea.html
 - https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6head.html",False
185be678ec13532daa2e9762b9a08f3948fdcb7d,2021-06-25 20:26:00,Jonas Jenwald,"Check that TrueType (3, 0) cmap tables, for symbolic fonts, are sorted correctly (issue 13626)

According to a comment in `readCmapTable`, we're assuming that the cmap tables (when more than one exist) are sorted in ascending order. If that's not the case, keep checking the following cmap tables in order to fix the referenced issue.",False
dc7faa213e8e2b070ea162f5a631d90e724888db,2021-06-24 21:37:39,Brendan Dahl,"Merge pull request #13624 from calixteman/center

XFA - Take into account text position in caption",True
57b6746bab475cee79ec36f9541e2135d538d65f,2021-06-24 13:55:41,Calixte Denizet,XFA - Take into account text position in caption,False
d7fdb72a3f8bf32565e18920d8f1b6cccc161573,2021-06-24 04:51:28,Brendan Dahl,"Merge pull request #13619 from calixteman/bg

XFA - Add back empty subforms (which can have a background)",True
ad28622595d0c85c50f03bec17b95d8810c8a432,2021-06-24 03:36:21,Brendan Dahl,"Merge pull request #13622 from calixteman/no_stretch_lrtb

XFA - No container stretching with lr-tb layout",True
f4f00a9bc680ef7eb5f2c093d50fd7ed7fd5c4d6,2021-06-24 01:44:12,Brendan Dahl,"Merge pull request #13618 from calixteman/bind_root

XFA - Always bind root subform on root data",True
1d0e83e1bd0494ce7bcd3a0d72a2527cb4712b07,2021-06-24 01:33:07,Calixte Denizet,XFA - No container stretching with lr-tb layout,False
f74562b19cc166af126705b04971a7a111e7e2f3,2021-06-24 01:26:29,Tim van der Meij,"Merge pull request #13613 from Snuffleupagus/xfa-printing-tweaks

[api-minor] Slightly tweak/improve various code related to XFA-printing",True
ad4b2ce021277ff7cea8ec7e32775c65d74ee673,2021-06-24 01:19:02,Tim van der Meij,"Merge pull request #13612 from Snuffleupagus/issue-13610

Support corrupt documents with *empty* `Name`-entries (issue 13610)",True
c115be27b6dea60280517150e38120f84bf5e8c4,2021-06-24 01:12:27,Tim van der Meij,"Merge pull request #13617 from Snuffleupagus/reset-externalLinkEnabled

Reset the `IPDFLinkService.externalLinkEnabled` property on document closing",True
b8366166670ca91dcdf87545bd5aecddef901656,2021-06-24 00:16:41,Calixte Denizet,"XFA - Always bind root subform on root data
  - it partially fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1717805 (on the data side at least but there is still a layout issue).",False
f168998d93a6ca58af2459e737ca8bdcd9565ab0,2021-06-23 23:12:36,Calixte Denizet,XFA - Add back empty subforms (which can have a background),False
2bae3994225344ad2f6cf589e9635e2c6b205e13,2021-06-23 18:27:27,calixteman,"Merge pull request #13614 from calixteman/line_height

XFA - Get line height from the font",True
d959cb824d71a8cb0614a0a24616add2cec40957,2021-06-23 17:42:33,Jonas Jenwald,"Reset the `IPDFLinkService.externalLinkEnabled` property on document closing

Given that this property is only used with password protected documents, and is consequently document-specific rather than viewer-specific, ensure that `IPDFLinkService.externalLinkEnabled` is actually being reset by `PDFViewerApplication.close`.

To make things less confusing/inconsistent, remove the *undocumented* `externalLinkEnabled` property from the `PDFLinkService` constructor and force it to always be manually set when needed.",False
e82446fa5a0ecbe3803224562e37c76f2e273792,2021-06-23 17:41:10,Calixte Denizet,"XFA - Get line height from the font
  - when the CSS line-height property is set to 'normal' then the value depends of the user agent. So use a line height based on the font itself and if for any reasons this value is not available use 1.2 as default.
  - it's a partial fix for https://bugzilla.mozilla.org/show_bug.cgi?id=1717681.",False
87be43c193bfeb69f8bb13f28b7217ad955e3b30,2021-06-23 11:47:58,Jonas Jenwald,"[api-minor] Add a new `getXfaPageViewport` helper function to support printing

This patch provides an overall simpler *and* more consistent way of handling the `viewport` parameter during printing of XFA forms, since it's now again guaranteed to always be an instance of `PageViewport`.
Furthermore, for anyone attempting to e.g. implement custom printing of XFA forms this probably cannot hurt either.",False
45c1390c4280e3b8ecc2e1fafd700cd09f911c44,2021-06-23 11:47:58,Jonas Jenwald,"Switch the order of the ""display""/""print"" intent handling in `XfaLayerBuilder.render`

Given that the ""print""-intent is special, and that we should always fallback to the ""display""-intent, let's ensure that the code actually reflects that.
Also, ensure that the method always returns a `Promise` since that's what the documentation says.",False
eb94d71b712e9ce39741df13c7561709d4e31896,2021-06-23 11:47:58,Jonas Jenwald,"Move the `getXfaHtmlForPrinting` helper function to its own file (PR 13411 follow-up)

The `web/ui_utils.js` file should be usable from basically anywhere in the `web/`-folder, hence it should ideally not have any dependecies on its own and particularily *not* onces that pull in entire (large) factories.",False
9441245320ba80b91cc9e94da5205a394a165f7b,2021-06-22 22:23:10,Jonas Jenwald,"Merge pull request #13606 from Snuffleupagus/issue-13605

Correctly align the `textLayer` content with horizontal/spread scrolling modes (issue 13605)",True
b1c9d8c78d8462346c1f30f6a02dbd5f47778ffa,2021-06-22 21:17:18,calixteman,"Merge pull request #13594 from calixteman/xfa_add_margin

XFA - Add margins if needed after having layout some text",True
64679073185be2b1983ddd8834a29f353bdb0de4,2021-06-22 20:25:44,Jonas Jenwald,"Support corrupt documents with *empty* `Name`-entries (issue 13610)

Apparently some really bad PDF software can create documents with *empty* `Name`-entries, which we thus need to somehow deal with.
While I don't know if this patch is necessarily the best solution, it should at least ensure that the *empty* `Name`-instance cannot accidentally match a proper `Name`-instance (and it doesn't require changes to a lot of existing code).[1]

---
[1] I briefly considered using a `Symbol` rather than an Object, but quickly decided against that since the former one [is not clonable](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm#supported_types) and `Name`-instances may be sent to the API.",False
6163cd015b42616cc95bac5898dc61dd79d28296,2021-06-22 18:24:21,Jonas Jenwald,"Merge pull request #13609 from Snuffleupagus/xfaLayer-text-align

Correctly align the `xfaLayer` content with horizontal scrolling/spread modes",True
d301ec7d420cb7977c7088340617077ac72e02b3,2021-06-22 17:01:48,Jonas Jenwald,"Correctly align the `xfaLayer` content with horizontal scrolling/spread modes

This extends the approach in PRs 12848 and 13606 to also apply to the `xfaLayer`, since otherwise XFA forms will be similarly broken in most non-default scroll/spread modes.",False
aca102a35e0429738475e596aa35eed09c9db375,2021-06-22 14:06:01,Calixte Denizet,XFA - Add margins if needed after having layout some text,False
eb755d098ec6eb6ff79c3156e9196d9033998311,2021-06-22 13:38:19,Jonas Jenwald,"Merge pull request #13608 from mozilla/dependabot/npm_and_yarn/color-string-1.5.5

Bump color-string from 1.5.3 to 1.5.5",True
f40c59c7b4b036e3c3b777d9204c266208fc255e,2021-06-22 13:29:39,dependabot[bot],"Bump color-string from 1.5.3 to 1.5.5

Bumps [color-string](https://github.com/Qix-/color-string) from 1.5.3 to 1.5.5.
- [Release notes](https://github.com/Qix-/color-string/releases)
- [Changelog](https://github.com/Qix-/color-string/blob/master/CHANGELOG.md)
- [Commits](https://github.com/Qix-/color-string/commits/1.5.5)

---
updated-dependencies:
- dependency-name: color-string
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>",False
b886b6c995180e67041a58d7ed1a1bedf835505a,2021-06-22 13:28:29,calixteman,"Merge pull request #13604 from calixteman/xfa_proto_propr

XFA - A prototype can have a property which needs itself to resolve a proto",True
e84b3bbf6e3892c2153c3de98dc91292121eadda,2021-06-22 00:32:53,calixteman,"Merge pull request #13592 from calixteman/xfa_print_only

XFA - Don't display print-only elements",True
fbf5f8487d233192c4f6af8805b962c981d38b82,2021-06-21 22:41:44,calixteman,"Merge pull request #13603 from calixteman/revert

Revert ""Revert ""XFA - Fix the way to select page on breaking""""",True
daa563ae81cb16b6fe946e74c706f5cdca2a786c,2021-06-21 22:29:59,Jonas Jenwald,"Correctly align the `textLayer` content with horizontal/spread scrolling modes (issue 13605)

This is *very* similar to PR 12848, however for this `textLayer`-case it appears to only be an issue in documents with marked content.",False
72c32b3498c604baf9e4c2f614ce44f90ab5a2a5,2021-06-21 20:56:29,Calixte Denizet,XFA - A prototype can have a property which needs itself to resolve a proto,False
56a75f8b265b1ca87350382f10d4891f0a7c810a,2021-06-21 20:37:31,calixteman,"Revert ""Revert ""XFA - Fix the way to select page on breaking"""" - and fix the error which caused the backout: add an $extra property when creating html. - switch to next content area when breaking on page area.",False
277f351291d2de11308db0ffc7063be9cfa1496d,2021-06-21 19:15:22,calixteman,"Merge pull request #13601 from mozilla/revert-13573-bug1716838

Revert ""XFA - Fix the way to select page on breaking""",True
a9385bbb52c004780681712460e9d4f1322e3567,2021-06-21 19:15:04,calixteman,"Revert ""XFA - Fix the way to select page on breaking""",False
da1999778131db99883af7f4d11dd9a21938ce5d,2021-06-21 18:36:03,calixteman,"Merge pull request #13573 from calixteman/bug1716838

XFA - Fix the way to select page on breaking",True
7aea8faa34225efd9a9fc1113150c0b47741a94c,2021-06-21 16:15:23,Calixte Denizet,"XFA - Fix the way to select page on breaking
  - it aims to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1716838.
  - some fonts in the pdf in the bug where bold when they shouldn't so write the font properties in the html to avoid to use some wrong inherited ones.",False
34acf29403635867842cccfce944d586a071b551,2021-06-21 15:54:23,calixteman,"Merge pull request #13593 from calixteman/xfa_rect_border

XFA - Don't display invisible rectangle borders",True
b42120bdb0915f453d220aaf2f8f01cb72f46edd,2021-06-21 15:19:33,Jonas Jenwald,"Take the position of the `selected` element into account when scrolling matches (issue 13596)

Note that as far as I can tell, this is *not* a regression but rather a bug which has existed since basically ""forever"".

**In order to reproduce this easily:**
 - Open the viewer.
 - Set the zoom level to `400%`,
 - Search for ""expression"".

The problem here is that when scrolling matches into view, we're scrolling to the start of the *containing* `textLayer` element rather than the start of the highlighted match itself.[1] When the entire width (or at least most) of the page is visible in the viewer, that doesn't really matter though which is likely why this bug has gone unnoticed for so long.[2]
Given that the highlighted match can be placed anywhere, e.g. even at the very end, within its `textLayer` element it's quite easy to see why the current implementation becomes a problem at higher zoom levels. All of this is then *further* exacerbated by `PDFFindController.scrollMatchIntoView` using a negative left offset, to ensure that the current match has some (visible) context available once scrolled into view.

In order to address this long-standing bug, we'll determine the (left) offset of the `selected` match and use that to modify the final position scrolled to in `PDFFindController.scrollMatchIntoView` such that the match is visible regardless of zoom level.

---
[1] Unfortunately we cannot directly scroll to the `selected` match, since it's not absolutely positioned and changing that would cause other bugs/regressions (note recent patches in that area).

[2] I did actually stumble upon this problem a little while ago, while working on PR 13482, but forgot to look into this again until I saw the new issue.",False
d99a7c070f6eb76c47e44bea75f2734c1fc9c9db,2021-06-21 13:38:10,Calixte Denizet,"XFA - Don't display print-only elements
  - partial fix for https://bugzilla.mozilla.org/show_bug.cgi?id=1716980.",False
223b60f4e8c5677019906b423ba2545878bc6be8,2021-06-21 13:28:54,calixteman,"Merge pull request #13595 from calixteman/xfa_readonly

XFA - Add support for access property",True
7cb92a64b187efbceb0fd4ea6e5a52ad10ba7002,2021-06-21 13:26:28,Calixte Denizet,"XFA - Add support for access property
  - it's a partial fix for https://bugzilla.mozilla.org/show_bug.cgi?id=1716816.",False
2e6d3d6b00b2d951f85df0e7706bc49d9570a70d,2021-06-21 12:58:59,calixteman,"Merge pull request #13591 from calixteman/xfa_default_font

XFA - Match font family correctly",True
d76f11a0cec0f9135fab8e758224156d9dac509d,2021-06-20 19:15:58,Calixte Denizet,"XFA - Don't display invisible rectangle borders
  - partial fix for https://bugzilla.mozilla.org/show_bug.cgi?id=1716980.",False
7cdbc98716b5cbd34a0e74ba1a6289f6cc51d772,2021-06-20 18:46:28,Calixte Denizet,"XFA - Match font family correctly
  - partial fix for https://bugzilla.mozilla.org/show_bug.cgi?id=1716980;
  - some pdf can contain an invalid font family (e.g. 'Windings 3') so in this case remove the space;
  - the font family in typeface attribute doesn't always match the one defined in the FontDescriptor dictionary.",False
bdfcdd6f8326f22c135edfa29a341ea4c558f3d1,2021-06-20 16:01:39,Tim van der Meij,"Merge pull request #13589 from Snuffleupagus/issue-13585

Allow using the standard font data for non-Type1 fonts (issue 13585, PR 12726 follow-up)",True
adafb2c82ac1e558ff2346b7ef4da95b97af0408,2021-06-20 15:57:13,Tim van der Meij,"Merge pull request #13590 from Snuffleupagus/issue-8558

Stop encoding the value in the `DOMElement.setAttribute` method (issue 8558)",True
2ffc921163c0d598d49ed1ff9717bf805fd3d936,2021-06-20 15:25:24,Jonas Jenwald,"Stop encoding the value in the `DOMElement.setAttribute` method (issue 8558)

This patch is an attempt at closing an old, and seemingly trivial, issue and the SVG-files created by the `pdf2svg.js` examples still appear to work just fine when opened in browsers (tested with Firefox Nightly and Google Chrome Beta).",False
c4334dcfe75f212dedf6e2b0c00c4c7944c93a93,2021-06-20 14:43:49,Jonas Jenwald,"Allow using the standard font data for non-Type1 fonts (issue 13585, PR 12726 follow-up)

Given that we're not imposing any font-type restrictions[1] in the non-/FontDescriptor case, it's not really clear to me why we'd actually need to do that in the general case.
Please note that there's some *expected* movement, all of which should be improvements, in the `fips197.pdf` file with this patch.

---
[1] With the exception of Type3-fonts, of course.",False
94ca66f528c1c02347d2f9c327f42fc8ba5e6ec1,2021-06-19 22:32:08,Tim van der Meij,"Merge pull request #13588 from Snuffleupagus/viewer-component-types

Add a (basic) TypeScript definitions for the viewer components (issue 13267)",True
b9e8a3ce473072e8ec62c78267ad1271102871d9,2021-06-19 22:25:17,Tim van der Meij,"Merge pull request #13587 from Snuffleupagus/useSystemFonts-default

Set the default value of `useSystemFonts` correctly, depending on `disableFontFace`, in the API (PR 13516 follow-up)",True
fdf2c59b8f8663f30fd21ce6c4adbfa9c57d7744,2021-06-19 19:54:34,Jonas Jenwald,"Add a (basic) TypeScript definitions for the viewer components (issue 13267)

Please note that while the `gulp types`/`gulp typestest` tasks (obviously) still work with this patch, I've got no idea if the output is first of all even useable and secondly if it's actually useful in practice.
However, in the interest of closing some (seemingly simple) issues, I suppose that this probably shouldn't hurt (and we'd need TypeScript users to help improve things here).",False
d9ed14a2f5fb8ec04facd2ca84914694dbaf31de,2021-06-19 17:23:13,Jonas Jenwald,"Set the default value of `useSystemFonts` correctly, depending on `disableFontFace`, in the API (PR 13516 follow-up)

*Sorry about the churn here, since the change that I made in PR 13516 was not very smart.*

With the current code, it's now *impossible* for a user to actually control the `useSystemFonts` option manually. To prevent outright breakage we obviously still need to default to setting `useSystemFonts = false` when `disableFontFace === true`, however that should be possible for an API consumer to override.",False
248efb16a77719d459c9e803b9cda5bc530edbf8,2021-06-19 00:36:00,Tim van der Meij,"Merge pull request #13577 from Snuffleupagus/rm-PDFScriptingManager._pageEventsReady

Remove the internal `PDFScriptingManager._pageEventsReady` boolean (PR 13074 follow-up)",True
5d251a3a3e7bfaa8fbfa07f0b7f9901eb3f999d9,2021-06-18 01:53:28,Brendan Dahl,"Merge pull request #13566 from calixteman/layout4

XFA - Fix layout issues",True
5db7a3cc886bea3cad1186516e72e679abecbe9d,2021-06-17 22:12:15,Jonas Jenwald,"Ensure that `PDFScriptingManager.setDocument` handles failure when initializing the scripting-factory

This way, we'll immediately clean-up in exactly the same way as the other failure code-paths in the `PDFScriptingManager.setDocument` method.",False
6dc5dd194f26c64ba14b1252055be808e8c4a59b,2021-06-17 21:31:10,Jonas Jenwald,"Remove the internal `PDFScriptingManager._pageEventsReady` boolean (PR 13074 follow-up)

With the introduction of `PDFScriptingManager._closeCapability` in PR 13074, the pre-existing `PDFScriptingManager._pageEventsReady` boolean essentially became redundant.
Given that you always want to avoid tracking closely related state *separately*, since it's easy to introduce subtle bugs that way, we should just remove `PDFScriptingManager._pageEventsReady` now.

Obviously I *should* have done this already back in PR 13074, sorry about the churn here!",False
3264d409dd172953e438dad2729167ca8a552eb8,2021-06-17 21:17:18,calixteman,"Merge pull request #13576 from calixteman/really_fix_text_stuff

XFA - When no fonts in the pdf just use font size as width when measuring text",True
e65b41f891119233b81e54a61497b4aa8bdaef79,2021-06-17 20:20:56,Calixte Denizet,XFA - When no fonts in the pdf just use font size as width when measuring text,False
df08b1548bebb1faa830b5057b51ed63032c9bf6,2021-06-17 19:39:22,Calixte Denizet,"XFA - Fix layout issues
  - PR #13554 is buggy, so this patch aims to fix bugs.
  - check if a component fits into its parent in taking into account the parent layout.
  - introduce method isSplittable for template nodes to know if a component can be splitted in case of overflow.",False
326226df45a429f311c6a22eb5d63b82f5ffbaef,2021-06-17 19:26:27,calixteman,"Merge pull request #13575 from calixteman/fixlast

XFA - Fix reftest for xfa_issue13500",True
226c228c2a46e882a79332cd666c488f020006cb,2021-06-17 19:18:13,Calixte Denizet,XFA - Fix reftest for xfa_issue13500,False
b300aba07801a20c8b9fd621918ef4c76179d416,2021-06-17 18:35:57,calixteman,"Merge pull request #13560 from calixteman/xfa_font_widths

XFA - Add the possibily to layout and measure text",True
8eeb7ab4a3f685e14abda1f638f9c0eafc38c2b2,2021-06-17 17:47:02,Calixte Denizet,"XFA - Add the possibily to layout and measure text
  - some containers doesn't always have their 2 dimensions and those dimensions re based on contents;
  - so in order to measure text, we must get the glyph widths (for the xfa fonts) before starting the layout;
  - implement a word-wrap algorithm;
  - handle font change during text layout.",False
335d4cb2fcaf9e973d4413f69201ac180737dca4,2021-06-17 12:39:59,calixteman,"Merge pull request #13570 from calixteman/xfa_field

XFA - By default a text ui has only one line when in a field element",True
d6deb95f11704bd1c438a195a5de656a5fdf0b25,2021-06-17 08:37:57,Brendan Dahl,"Merge pull request #13565 from brendandahl/fix-pattern-mask

Fix how patterns are applied to image mask objects.",True
5efaaa0fea45bdc2ce353d1aebc66b27af47e7cc,2021-06-17 08:36:41,Brendan Dahl,"Fix how patterns are applied to image mask objects.

Note, this only really fixes Radial/Axial shading patterns with masks.
I'm guessing tiling patterns and mesh patterns would also be broken
if applied like the test pdf. Hopefully I'll have some time to make
test cases for the other shadings.

Fixes #13372",False
793a0156ce7af80050cbb2209734842a001a6b42,2021-06-16 23:48:29,Calixte Denizet,"XFA - By default a text ui has only one line when in a field element
  - it aims to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1716809.",False
473322298f35f0390828d14e882bf470918c3084,2021-06-16 22:25:44,calixteman,"Merge pull request #13569 from calixteman/visibility

XFA - Container wrapper must take the visibility of the wrapped content",True
143d190a611a88f471cd80f6b18309e187cfb157,2021-06-16 20:59:02,Calixte Denizet,XFA - Container wrapper must take the visibility of the wrapped content,False
7fa61c062ce9a488c685ee3773ce6d7f71a283a5,2021-06-16 20:36:17,Jonas Jenwald,"Merge pull request #13393 from Snuffleupagus/adjustToUnicode-hasIncludedToUnicodeMap

Tweak `adjustToUnicode` to allow extending a built-in /ToUnicode map",True
f9a0568f9648257171db0c18d92694525587df53,2021-06-15 21:46:19,Brendan Dahl,"Merge pull request #13554 from calixteman/layout3

XFA - Add support for overflow element",True
697c58e6e84463c061f961c84712b7e2b0c940a5,2021-06-15 16:08:42,Jonas Jenwald,"Merge pull request #13563 from Snuffleupagus/eslint-plugin-json

Add basic linting of JSON files using `eslint-plugin-json`",True
0ea5792c862fe006f75d9dfcc925967f27755356,2021-06-15 16:02:01,Calixte Denizet,"XFA - Add support for overflow element
  - and fix few bugs:
    - avoid infinite loop when layout the document;
    - avoid confusion between break and layout failure;
    - don't add margin width in tb layout when getting available space.",False
1cfaf07b820444370e0ca0fd84ee2dfd80e5099c,2021-06-15 15:49:01,Jonas Jenwald,"Add basic linting of JSON files using `eslint-plugin-json`

By adding basic linting of JSON files, we can ensure that they're actually valid and prevent e.g. test-failures caused by *accidental* errors when editing the `test/test_manifest.json` file (something that I've done *many* times myself).

For now this simply uses the `recommended` configuration, but we can obviously tweak this later if/when needed. Please find additional information at https://github.com/azeemba/eslint-plugin-json",False
229a49b9b902768ed19cdafad18ad609b341d15f,2021-06-14 18:35:14,Jonas Jenwald,"Re-factor the `fallbackToUnicode` functionality (PR 9192 follow-up)

Rather than having to create and check a *separate* `ToUnicodeMap` to handle these cases, we can simply use the `fallbackToUnicode`-data (when it exists) to directly supplement *missing* /ToUnicode entires in the regular `ToUnicodeMap` instead.",False
7190bc23a856b12b06e91d78eb4564e9a0a9a775,2021-06-14 18:35:14,Jonas Jenwald,"Remove unnecessary `in` checks of Arrays, when building the `charCodeToGlyphId` for TrueType fonts

Note that all standard Encodings have the same length (i.e. `256` elements) and that missing entries are always represented by empty strings, hence why a separate exists-check isn't necessary in the `baseEncoding` case.",False
edc38de37ac7a1ba659b59598a254c38ac1fcf33,2021-06-14 18:35:14,Jonas Jenwald,"Convert `PartialEvaluator.buildToUnicode` to an `async` method

This removes the need to *manually* wrap all return values in a Promise.",False
3660aaac85e6be571c238e969d9cf5ca598e4215,2021-06-14 18:35:14,Jonas Jenwald,"Tweak `adjustToUnicode` to allow extending a built-in /ToUnicode map

*This is somewhat similiar to the recent changes, in PR 13277, for fonts with an /Encoding entry.*

Currently we're *completely* ignoring the `builtInEncoding`, from the font data itself, for fonts which have a built-in /ToUnicode map.
While it (obviously) doesn't seem like a good idea in general to simply overwrite existing built-in /ToUnicode entries, it should however not hurt to use the `builtInEncoding` to supplement *missing* /ToUnicode entires.",False
246d565e3b48f84ec9bc01828abf464ce23e6c9f,2021-06-14 17:51:04,calixteman,"Merge pull request #13559 from calixteman/maxlength

XFA - Handle maxChars property for text fields",True
d89c429d781ae4db8b4da84552dccc06d7980885,2021-06-14 16:37:06,Calixte Denizet,"XFA - Handle maxChars property for text fields
  - it aims to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1716294.",False
9d081d09c76fe92a30c6e6f168253fb72f53b863,2021-06-14 15:47:45,calixteman,"Merge pull request #13557 from calixteman/issue13556

XFA - Fix error when creating a new data node",True
150fa3d96ef8100b685dcb7c866efd28ec7de2fc,2021-06-14 15:03:08,Calixte Denizet,"XFA - Fix error when creating a new data node
  - fix for issue #13556;
  - value in a field can be empty.",False
a4e8f3bdeec085d86be0440e0b4ebe1d52e43d0a,2021-06-14 14:23:17,calixteman,"Merge pull request #13555 from calixteman/value

XFA - Value in field can be html",True
088db4784929223c3786239e3a0da318445bee49,2021-06-13 23:20:28,Calixte Denizet,XFA - Value in field can be html,False
96c103462acda3a8af8ac68c35b206d7a23c7e8d,2021-06-13 17:41:22,calixteman,"Merge pull request #13548 from calixteman/default_fill

XFA - Default fill color for rectangle is transparent",True
e1a53399615e962acd65e8bb3aeb45a56741c109,2021-06-13 17:01:54,Tim van der Meij,"Merge pull request #13552 from Snuffleupagus/update-packages

Update packages and translations",True
59f72bbde1206e841a7e0d1e12b891413507802a,2021-06-13 14:05:58,Jonas Jenwald,Update l10n files,False
014148b28a2fa787e400839c0f1fea44627f72b0,2021-06-13 14:05:58,Jonas Jenwald,Update the `eslint-plugin-unicorn` package to the latest version,False
99dc7af59061df9e0bcecf858fbee3cc7869ed3b,2021-06-13 13:29:44,Jonas Jenwald,Update npm packages,False
a4546e83c3d1b9b9ae3566466f018f8bada6c2e3,2021-06-12 15:17:04,Tim van der Meij,"Merge pull request #13549 from Snuffleupagus/rm-isFetchSupported

Remove the `isFetchSupported` function since the Fetch API is available in all supported browsers",True
ddea90b8f6fbeca189bb81254c63f406675dd973,2021-06-12 11:31:54,Jonas Jenwald,"Remove the `isFetchSupported` function since the Fetch API is available in all supported browsers

The currently supported browsers, note the minimum versions [listed here](https://github.com/mozilla/pdf.js/blob/5a4e06af2d1f5bf1a4281b4ec3ec18bccd2adebb/gulpfile.js#L78-L88), should now have native support for all of the features checked in the `isFetchSupported` function:

 - https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/API/Response#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/API/Body/body#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream#browser_compatibility

Hence this function can now be removed, and the code can thus be simplified a little bit.",False
5a4e06af2d1f5bf1a4281b4ec3ec18bccd2adebb,2021-06-12 01:39:43,Brendan Dahl,"Merge pull request #13547 from calixteman/cerfa

XFA - Handle correctly subformSet",True
c7c59feeaf46a2c97abb9d936b083a3a8f82787d,2021-06-12 00:49:11,Tim van der Meij,"Merge pull request #13546 from Snuffleupagus/base_factory-tweaks

Re-factor the `DOMCanvasFactory` and `DOMSVGFactory` implementations slightly",True
694b14c04713af5804fb565db0c51482b7b620b1,2021-06-11 21:33:19,Calixte Denizet,XFA - Default fill color for rectangle is transparent,False
2dc22394e7e6390a3ced64be8588e7b243576c54,2021-06-11 21:25:55,calixteman,"Merge pull request #13542 from calixteman/center_radio

XFA - Center vertically radio without caption",True
d1e945998b31670ec11026a7227e011a76f7d561,2021-06-11 21:19:17,Calixte Denizet,"XFA - Handle correctly subformSet
  - it aims to avoid to loop forever when opening pdf in #13213;
  - the idea is to consider subformSet as inexistent when running in the tree. So if we've subformA > subformSet > subformB then subformB will be visited as a direct child of subformA.",False
7b17dc8bfdd1d0e07caa3e8abc9d1b4800d867ba,2021-06-11 20:46:00,Jonas Jenwald,"Re-factor the `fetchData` helper function, in `src/display/display_utils.js` to be asynchronous",False
b05a22d01b62aadb0ab496cbf77846f3b1783999,2021-06-11 20:45:49,Jonas Jenwald,"Re-factor the `DOMSVGFactory` to extend an abstract base class

This is first of all consistent with all of the other (similar) factories, and secondly it will also simplify a future addition of a corresponding `NodeSVGFactory` (if that's ever deemed necessary).",False
d10b8509167b26b59b6c968ac3be937b8095ece2,2021-06-11 20:45:47,Jonas Jenwald,"Move most functionality in the `create` methods into the `BaseCanvasFactory`

This *slightly* reduces the amount of code duplication in the `DOMCanvasFactory.create` and `NodeCanvasFactory.create` methods.",False
da4916e3c119a3a551b6d5ff7c92c076a4a87b92,2021-06-11 16:54:45,Calixte Denizet,"XFA - Center vertically radio without caption
  - and fix intent value which is used to name the radio button group.",False
7b4fa0a03868af03231d587fc1001fafe71c5e9f,2021-06-11 16:42:26,calixteman,"Merge pull request #13540 from calixteman/13536

XFA - Return html element for the different possible value",True
367d1ad137b9a11e3dc28f059b10d69f61475865,2021-06-11 15:21:54,Calixte Denizet,"XFA - Return html element for the different possible value
  - it aims to fix #13536.",False
950dcc7e9fb306c1b5fe621ec79da975f310d7f5,2021-06-11 13:23:03,calixteman,"Merge pull request #13539 from calixteman/outline

XFA - Don't show outline on focused textfields",True
897a679723d0fceacc073a3373d3689c347d5974,2021-06-11 12:55:14,Calixte Denizet,XFA - Don't show outline on focused textfields,False
a3b0596cf26f843440801309b90cca5f2bb9cce3,2021-06-11 01:47:20,Brendan Dahl,"Merge pull request #13534 from calixteman/missing_page

XFA - Flush contents when breakBefore target is 'auto'",True
02c03795f35ac83857539a996cf9b10b0862f4f4,2021-06-11 01:00:49,Brendan Dahl,"Merge pull request #13532 from calixteman/radio

XFA - Give all the available space to the caption in case of checkButton",True
5bcba783cf047e6250df1b357bebd721ecf29da2,2021-06-11 00:45:05,Jonas Jenwald,"Merge pull request #13530 from Snuffleupagus/DOMMatrix-Node

Add a `DOMMatrix` polyfill for Node.js environments (PR 13361 follow-up)",True
3bd24d8d5a695a17acc061c463f5ce3f9f9903b2,2021-06-11 00:38:23,Jonas Jenwald,"Throw errors directly, rather than using `assert`, in the `DOMSVGFactory`

This is similar to all of the other factories in this file, since they *directly* throw errors.",False
26011c65f4055443c26414ade225da5795bddc42,2021-06-11 00:38:23,Jonas Jenwald,"Add a `DOMMatrix` polyfill for Node.js environments (PR 13361 follow-up)

Given that `DOMMatrix` is, unsurprisingly, not supported in Node.js the `createMatrix` helper function in `src/display/pattern_helper.js` is most likely broken in Node.js environments. It will obviously try to fallback to the `DOMSVGFactory`, however that isn't intended for Node.js usage and errors will be thrown.

Rather than trying to implement a `NodeSVGFactory`, this patch takes the easier route of just adding a `DOMMatrix` polyfill using: https://www.npmjs.com/package/dommatrix
This isn't done only for simplicity, but it'll become necessary anyway since the `createMatrix` helper function is only temporary and will be removed in the future.",False
d7d53e7c6cf400d2adc16525ee7835a08f7aba7e,2021-06-10 20:45:08,Calixte Denizet,"XFA - Flush contents when breakBefore target is 'auto'
  - some page can be missed in the final document because of that (see pdf in the test case which has 4 pages (when only 3 are rendered right now)",False
58633ab9fd33d22df1c171701f1ed97b0df110d1,2021-06-10 19:00:23,Calixte Denizet,"XFA - Give all the available space to the caption in case of checkButton
  - a checkbox or radio doesn't have to be rescaled when the container is large so give the extra space to the caption to avoid some word wrapping.
  - when the caption is on the right, then put ui on the left as first element and so remove flex:row-reverse stuff.",False
cbcf0f7d1e175148fe991c4c1b38fe371ae3408d,2021-06-10 14:00:52,Jonas Jenwald,"Merge pull request #13529 from Snuffleupagus/bundle-Liberation-license

Bundle the license-file for the Liberation fonts in the builds (PR 13517 follow-up)",True
8f3f76f8f6785177db505c414f07d391c02d8137,2021-06-10 03:42:59,Jonas Jenwald,"[gulpfile.js] Reduce unnecessary duplication when bundling CMap/StandardFont files

Rather than repeating the exact same code in multiple `gulp`-tasks, we can extract it into two helper functions instead.",False
16d9fa1bf182558e459d4fdd2830d569b4912a9e,2021-06-10 03:41:47,Jonas Jenwald,"Bundle the license-file for the Liberation fonts in the builds (PR 13517 follow-up)

Currently only the Foxit license-file is included, which is most likely just an oversight as far as I can tell.
Furthermore, to be able the tell the two license-files apart, the Foxit one is also renamed slightly.",False
c4cb71b68d87cbfe291e43ec59c2958b1a862344,2021-06-10 02:14:31,Brendan Dahl,"Merge pull request #13528 from calixteman/inline

XFA - Handle caption with inline placement as left one",True
3bd936709c162df0593a00482fad8820454288c7,2021-06-10 01:43:48,Calixte Denizet,"XFA - Handle caption with inline placement as left one
 - it's just a temporary workaround to unblock release in Firefox.",False
d333af7848fc10cfd245cea792aeef464c91fba4,2021-06-10 01:07:29,Brendan Dahl,"Merge pull request #13527 from calixteman/bind_inf_loop

XFA - Avoid infinite loop when creating some nodes in data",True
aa2712744d51c1e754fd4bc7f2ff0358c5d048ab,2021-06-10 01:06:21,Brendan Dahl,"Merge pull request #13502 from calixteman/contentarea

XFA - contentarea must be on top of the other containers in a pageArea",True
a5233f47f214f1110387a8e885b71e74e799c83d,2021-06-10 01:05:37,Tim van der Meij,"Merge pull request #13516 from Snuffleupagus/standard-fonts-disableFontFace

Always use standard font data, with `disableFontFace` set in the API (PR 12726 follow-up)",True
69477bfb06291cde12e5ca4b873ffe8f1c575985,2021-06-10 00:51:02,Jonas Jenwald,"Always use standard font data, with `disableFontFace` set in the API (PR 12726 follow-up)

We must force-fetch standard font data, when `disableFontFace = true` is set in the API, since otherwise rendering in e.g. the viewer is still broken (same as before PR 12726 landed).

*Please note:* We still need to also load standard font data for patterns and/or some text-rendering modes, however that will require larger changes so I figured that it cannot hurt to submit *this* patch right now.",False
2a65455c7149e9f0f33a0b6096a90a0a85140bb8,2021-06-10 00:45:39,Tim van der Meij,"Merge pull request #13525 from Snuffleupagus/api-conditional-Factory

[api-minor] Re-factor the `disableFontFace` fallback value, and skip initializing factories with `useWorkerFetch` set",True
2a7827a7c67375a239284f9d37986a2941e51dba,2021-06-10 00:36:01,Tim van der Meij,"Merge pull request #13515 from Snuffleupagus/standardFontDataCache

Cache the ""raw"" standard font data in the worker-thread (PR 12726 follow-up)",True
cddc1d869d39d1dad64e39e665ec4cde3d2cc519,2021-06-09 22:37:59,Calixte Denizet,XFA - Avoid infinite loop when creating some nodes in data,False
a01c599247101fadd727b088810eabf3c6d86b0f,2021-06-09 21:57:51,Jonas Jenwald,"Cache the ""raw"" standard font data in the worker-thread (PR 12726 follow-up)

*This implementation is basically a copy of the pre-existing `builtInCMapCache` implementation.*

For some, badly generated, PDF documents it's possible that we'll end up having to fetch the *same* standard font data over and over (which is obviously inefficient).
While not common, it's certainly possible that a PDF document uses *custom* font names where the actual font then references one of the standard fonts; see e.g. issue 11399 for one such example.

Note that I did suggest adding worker-thread caching of standard font data in PR 12726, however it wasn't deemed necessary at the time. Now that we have a real-world example that benefit from caching, I think that we should simply implement this now.",False
6d88d8cdaa1f8282d16a66249978307f33c43887,2021-06-09 21:49:07,calixteman,"Merge pull request #13517 from calixteman/liberation

XFA - Add Liberation-Sans font as a substitution for some missing fonts",True
63bde1fcfefe2250cc80746c30d3f13273460c89,2021-06-09 20:26:39,calixteman,"Merge pull request #13524 from calixteman/print_select

XFA - Don't print arrow in select",True
34a2fa72c70ee8722a740d4d328d68df3c6ecc75,2021-06-09 20:25:45,Calixte Denizet,"XFA - Add Liberation-Sans font as a substitution for some missing fonts
  - Some js files contain scale factors for each glyph in order to rescale Liberation to have a final font with the correct width.
  - A lot of XFA have some containers where their dimensions are based on their text content, so using default font from browser can lead to an almost unreadable pdf.",False
82784e8e60074bfb22b6fd5aa4a99f95bfc06bca,2021-06-09 20:15:49,Calixte Denizet,XFA - Don't print arrow in select,False
f2b9f0d6eaf700df855581e44aaeaab5943e43a7,2021-06-09 20:13:51,calixteman,"Merge pull request #13495 from calixteman/draws

XFA - Display rectangle, line and arc",True
fd1110adb4dc88c5de308af7ec8eb4f913d87266,2021-06-09 19:31:13,Calixte Denizet,"Add the possibility to rescale each glyph in a font
  - a lot of xfa files are using Myriad pro or Arial fonts without embedding them and some containers have some dimensions based on those font metrics. So not having the exact same font leads to a wrong display.
  - since it's pretty hard to find a replacement font with the exact same metrics, this patch gives the possibility to read glyf table, rescale each glyph and then write a new table.
  - so once PR #12726 is merged we could rescale for example Helvetica to replace Myriad Pro.",False
2f8e2548f28e0b1b8ff68449be85ec7d9d8f6120,2021-06-09 19:05:23,Jonas Jenwald,"Don't initialize `CMapReaderFactory`/`StandardFontDataFactory` when the `useWorkerFetch` API option is set

Given that there's no fallback on the worker-thread, it shouldn't be necessary to initialize `CMapReaderFactory`/`StandardFontDataFactory` when `useWorkerFetch = true` is set.

Slightly unrelated, but this patch also ensures that the `useSystemFonts` default value only does the `isNodeJS` check in builds where that's actually necessary.",False
312326991fc55ab00bb3339879a98823eb535110,2021-06-09 19:05:23,Jonas Jenwald,"[api-minor] Set the `disableFontFace` fallback value directly in the API

At this point in time, the `apiCompatibilityParams` is essentially unused with the sole exception of the `disableFontFace` handling for Node.js environments.
Given that `isNodeJS` is a constant now (originally it was a function), we can simply set the correct fallback value for `disableFontFace` directly in the API and clean-up the code a bit here.",False
1f6345b6c2e2d4b1aede1fff5db48bb9f4ff526d,2021-06-09 19:04:31,Calixte Denizet,"XFA - Display rectangle, line and arc",False
1486608f324acf9e02bd6095a68db2b85c4acbf9,2021-06-09 18:59:29,Calixte Denizet,XFA - contentarea must be on top of the other containers in a pageArea,False
b4c96f3bc890a63c6dada9145a0ed397973b4e78,2021-06-09 18:58:07,calixteman,"Merge pull request #13521 from Snuffleupagus/issue-13518

[XFA] Use `align-items: flex-start;` to improve browser compatibility (issue 13518)",True
f716de7a2dc9b8e4aef99842c5ea6485855b18ba,2021-06-09 11:50:12,Jonas Jenwald,"[XFA] Use `align-items: flex-start;` to improve browser compatibility (issue 13518)

https://developer.mozilla.org/en-US/docs/Web/CSS/align-items#browser_compatibility",False
ae531e5e23d86ee056f053034853556880c1db4e,2021-06-09 02:13:16,Jonas Jenwald,"Merge pull request #13514 from Snuffleupagus/base_factory

[api-minor] Fetch binary CMap data in the worker-thread, when `useWorkerFetch` is set",True
d995f90183eadb2d77943bd6fd7547697a2020f6,2021-06-09 01:21:07,Jonas Jenwald,"Fetch binary CMap data in the worker-thread, when `useWorkerFetch` is set

This patch uses the new option added in PR 12726 to *also* allow fetching binary CMap data directly in the worker-thread in browsers.
Given that these changes remove the need to transfer data between threads for the default (browser) use-case, we can also revert the changes in PR 11118 since that simplifies the overall implementation.",False
248113bbf0af0b35a5a12316592252a3b3caa221,2021-06-09 01:18:49,Jonas Jenwald,"Move `BaseCanvasFactory`, `BaseCMapReaderFactory`, and `BaseStandardFontDataFactory` to their own file

Given that these factories are being used in *different* files, for Browser respectively Node.js implementations, it seems reasonable to move them into their own file instead.",False
2a6111044e0ad1ee70d6430b073ff39843f7b9d9,2021-06-09 00:36:40,Brendan Dahl,"Merge pull request #13479 from calixteman/margin

XFA - Fix layout issues (again)",True
cfa727474e1e1f0e2dd51d8bc5d9915818b4e598,2021-06-08 21:12:53,Calixte Denizet,"XFA - Fix layout issues (again)
  - some elements weren't displayed because their rotation angle was not taken into account;
  - fix box model (XFA concept):
    - remove use of outline;
    - position correctly border which isn't part of box dimensions;
    - fix margins issues (see issue #13474).
  - move border on button instead of having it on wrapping div;",False
e8fe0711eee655486aaa1689f50a7868ce75c5eb,2021-06-08 18:17:49,Jonas Jenwald,"Merge pull request #13506 from calixteman/xfa_reftest

XFA - Add support for reftests",True
d639a275579001a007928a0a73097b1c22e060b5,2021-06-08 14:15:30,Jonas Jenwald,"Merge pull request #13513 from mozilla/dependabot/npm_and_yarn/trim-newlines-3.0.1

Bump trim-newlines from 3.0.0 to 3.0.1",True
63caa101f803291858bf897f16ff3ba08431b30a,2021-06-08 14:07:26,Calixte Denizet,XFA - Add support for reftests,False
0fad999fc901fd1749fbbdf1439d75915bf91591,2021-06-08 13:41:20,dependabot[bot],"Bump trim-newlines from 3.0.0 to 3.0.1

Bumps [trim-newlines](https://github.com/sindresorhus/trim-newlines) from 3.0.0 to 3.0.1.
- [Release notes](https://github.com/sindresorhus/trim-newlines/releases)
- [Commits](https://github.com/sindresorhus/trim-newlines/commits)

---
updated-dependencies:
- dependency-name: trim-newlines
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>",False
e7dc822e74ea38999813b2b295ccf604f5c0c489,2021-06-08 13:39:40,Jonas Jenwald,"Merge pull request #12726 from brendandahl/standard-fonts

[api-minor] Include and use the 14 standard font files.",True
4c1dd47e65ae66135c6d9a55774a99a8066fbf37,2021-06-07 23:40:11,Brendan Dahl,Include and use the 14 standard fonts files.,False
8b4acb4e3683e544f3b4840b3b9a8bfa70f36102,2021-06-07 14:57:49,calixteman,"Merge pull request #13501 from calixteman/13500

XFA - CDATA can be xml so parse it when required",True
e0abf87bc31a9aa8600b4b8844cf59db9ae14756,2021-06-07 14:46:07,Jonas Jenwald,"Merge pull request #13505 from Snuffleupagus/createMatrix-DOMSVGFactory

Use the `DOMSVGFactory`, rather than manually creating the SVG-element, in `createMatrix` (PR 13361 follow-up)",True
5dc7f4ade8c9407d8ec947d536332324c438abe4,2021-06-07 14:08:39,Calixte Denizet,XFA - CDATA can be xml so parse it when required,False
1775d5eeb79fd62dc77391778a5f088577dfd166,2021-06-07 14:07:14,calixteman,"Merge pull request #13503 from calixteman/nodata

XFA - Don't bind a form node with an empty value when the data node doesn't exist",True
9e632ee323e109997dfd329d4887a5ffd4b5528e,2021-06-07 13:45:20,Jonas Jenwald,"Use the `DOMSVGFactory`, rather than manually creating the SVG-element, in `createMatrix` (PR 13361 follow-up)

Generally, in the `src/display/` folder, we utilize `DOMSVGFactory` rather than manually creating an SVG-element; hence let's do the same thing in `src/display/pattern_helper.js` as well.",False
112645ea3dd4bcb13e08579f9971918bcd7e0ed7,2021-06-06 21:29:01,Calixte Denizet,XFA - Don't bind a form node with an empty value when the data node doesn't exist,False
2b63d97b9d1becea24b43e2a4cb0eea6c6799e35,2021-06-06 18:07:52,Tim van der Meij,"Merge pull request #13461 from Snuffleupagus/issue-6605

Improve text-selection for Type3 fonts with empty /FontBBox-entries (issue 6605)",True
7d834396e48e7cc80fbf616d6dbc5ab2a1b0133f,2021-06-06 18:01:35,Tim van der Meij,"Merge pull request #13498 from Snuffleupagus/issue-12996

Normalize the coordinates used in `SVGGraphics._makeTilingPattern` (issue 12996)",True
04ab4bd4061b187a34283f62ffb8459d6662c8eb,2021-06-05 12:45:23,Jonas Jenwald,"Normalize the coordinates used in `SVGGraphics._makeTilingPattern` (issue 12996)

While this prevents the error which is currently thrown by the `assert` in the `DOMSVGFactory.create` method, the pattern still doesn't actually render (visibly). However, in the interest of getting rid of some open issues, this patch should make (some) sense and there's already other issues about patterns in the SVG-backend,

Given that, as clearly [outlined in the FAQ](https://github.com/mozilla/pdf.js/wiki/Frequently-Asked-Questions#backends), the SVG-backend is *not* officially supported and that there's currently no development of it; this is probably the most that is reasonable to do here.",False
1dd01b8506783be74c30dfd4abc3b833cb90127d,2021-06-05 12:07:11,Jonas Jenwald,"Merge pull request #13494 from brendandahl/stepper-show-text

Add more info for showText operator in stepper.",True
eefc94ceb7443febb4b48b789f0551ba7894efc1,2021-06-05 11:39:29,Jonas Jenwald,"Ensure that we fully load Type3 fonts in `PartialEvaluator.getTextContent`

This is necessary now, since with the previous patch the /FontBBox potentially depends on the contents of the /CharProcs-streams.
Note that if `getOperatorList` is called *before* `getTextContent`, this patch doesn't matter since the font is already fully loaded/parsed. However, for e.g. the `text` test-cases this is necessary to ensure correct reference images.",False
20770cb06abbde69dd5dcf13a88b795d28723a34,2021-06-05 11:39:29,Jonas Jenwald,"Improve text-selection for Type3 fonts with empty /FontBBox-entries (issue 6605)

For Type3 fonts where the /CharProcs-streams of the individual glyph starts with a `d1` operator, we can use that to build a fallback bounding box for the font and thus improve text-selection in some cases.",False
6255c2a8f3a6d7262cce3432637edb07e57da7ad,2021-06-05 02:30:51,Brendan Dahl,"Merge pull request #13376 from calixteman/6132

Replace command with not enough args by an endchar in CFF font",True
17f1857556bf27146a3647fe01c81f7d29327a97,2021-06-05 02:28:05,Brendan Dahl,"Add more info for showText operator in stepper.

Adds a table that shows original char code, font char code, and unicode.",False
eba6db9dc62cab7e077443f8cbf5ff4980ab6149,2021-06-05 00:54:49,Tim van der Meij,"Merge pull request #13497 from Snuffleupagus/HTMLResult-lazy

Initialize `HTMLResult.{FAILURE, EMPTY}` lazily",True
ce1ed60d112cb3f4eb660073c82131e01257d90f,2021-06-05 00:43:06,Tim van der Meij,"Merge pull request #13490 from Snuffleupagus/issue-10362

Miscellaneous improvements for `gulpfile.js` (issue 10362)",True
75113e45179aa41f495f9d061cd72ac98ed70385,2021-06-05 00:31:14,Jonas Jenwald,"Initialize `HTMLResult.{FAILURE, EMPTY}` lazily

While these objects aren't exactly that big and/or complex, they are nonetheless *only* necessary for XFA documents.
However, currently these objects are initialized *eagerly* for all PDF documents. By using the same pattern as elsewhere in the code-base, it's very easy to make these lazily initialized; so let's just do that instead :-)",False
ed0990ab6f4ad660052a204254bcef2871f17eb6,2021-06-05 00:30:02,Tim van der Meij,"Merge pull request #13492 from MMeent/patch-1

Add normalization for Hyphen -> Hyphen-minus",True
e0676ec298e31dc4121578f80f246aa17e684ff9,2021-06-04 23:43:22,calixteman,"Merge pull request #13473 from calixteman/usehref

XFA - Implement usehref support",True
425e58431a354673817f4687b6cf27e7350c4945,2021-06-04 22:46:05,Brendan Dahl,"Merge pull request #13482 from Snuffleupagus/scrollMatches-fix

Fix scrolling of search results in documents with marked content (bug 1714183)",True
66a56718476d9622aed2d5a2a9b38d29c2d47407,2021-06-04 21:25:35,Jonas Jenwald,"Remove `gulp makefile`, since it's broken and unused

Looking at the history of the code, this `gulp` task was *accidentally* broken in the Gulp 4 upgrade in PR 10266 (all the way back in 2018).
Given that no one has either noticed and/or complained about this since, it's safe to assume that it's completely unused, hence why I suggest that we just remove this `gulp` task (rather than fixing it).",False
3631121841e143e76379490b90e03d413159cb2d,2021-06-04 19:24:52,MMeent,"Add normalization for Hyphen -> Hyphen-minus

Previously these two characters were not searchable interchangably, even when Hyphen-Minus is being changed to Hyphen in some text to PDF pipelines.",False
11573ddd16256d37eee482900dd3bb5a1bfe9bc3,2021-06-04 18:27:05,Calixte Denizet,"XFA - Implement usehref support
  - attribute 'use' was already implemented but not usehref
  - in general, usehref should make reference to current document
  - add support for SOM expressions in use and usehref to search a node.
  - get prototype for all nodes if any.",False
3b502f7e07ce07d082128f61cb15b99cf03843df,2021-06-04 17:39:35,Jonas Jenwald,"Merge pull request #13478 from brendandahl/find-regression

Fix find highlighting regression from #13306.",True
6c249f8e219d4239d8de778c1ba4052d025a5d69,2021-06-04 16:58:58,Jonas Jenwald,"Clean-up `gulpfile.js` by removing most ""-pre"" tasks (issue 10362)

Most of the `gulp` tasks with a ""-pre"" suffix, especially those related to the main build-targets, are no longer needed and can simply be inlined in their corresponding tasks. This is likely a left-over from older Gulp-versions, but currently it only adds unnecessary indirection.

Furthermore, a number of the `gulp` tasks which are only used *internally* are converted to standard functions instead. This prevents them from being exposed ""globally"" and e.g. listed by `gulp default`.",False
92434b1eb4998ab2f742a4644909e8dde01f557f,2021-06-04 16:39:03,Jonas Jenwald,"Replace anonymous functions in `gulpfile.js` with named functions (issue 10362)

This replaces all of the `Starting '<anonymous>'...` lines in the output, when running various `gulp` tasks, with more meaningful function names.",False
ed9d5c4ec2654f0eb599d09cc263ea9443561054,2021-06-04 14:46:43,Jonas Jenwald,"Merge pull request #13489 from Snuffleupagus/hasEOL-TextItem-docs

Add `hasEOL` to the `TextItem` typedef in the API (PR 13257 follow-up)",True
4b1c4d2bd952ead37e51ab0c236e2553f686a9c5,2021-06-04 13:52:43,Jonas Jenwald,Add `hasEOL` to the `TextItem` typedef in the API (PR 13257 follow-up),False
29e6930bb6717e82929742c1588520ddb36d170c,2021-06-03 16:11:51,Jonas Jenwald,"Fix scrolling of search results in documents with marked content (bug 1714183)

This regressed in PR 13171, since the `span`s with the marked content identifiers interfere with scrolling of search results.",False
2a35b39c467c301ef04bfee11b0ec256f7ba0e63,2021-06-03 15:13:38,Jonas Jenwald,"Remove the unused `dataset` checks from the `scrollIntoView` helper function

This code was added in PR 3968, apparently in order to fix scrolling of search results in HiDPI-mode.
However, after PR 4570 nothing is setting these `dataset`-properties any more and this is thus dead code which should be removed. (If that change had broken scrolling of search results in HiDPI-mode, you'd really expect that it'd been reported and fixed a long time ago.)",False
9165dc0659acae2a97aeff21b3ef9817cf78ae00,2021-06-03 02:04:15,Jonas Jenwald,"Merge pull request #13480 from Snuffleupagus/generic-viewer-print

[GENERIC viewer] Fix printing regression from PR 13411",True
e962d7787ebf273db4c1280c12001cabb6838a53,2021-06-03 01:32:41,calixteman,"Merge pull request #13451 from calixteman/xfa_checkbox

XFA - Use native radio and checkbox buttons",True
daf846148952f07fe361ab4aa8fb3900807fe170,2021-06-03 01:12:24,Jonas Jenwald,"[GENERIC viewer] Fix printing regression from PR 13411

I missed this during review, since some of the changes in `web/pdf_print_service.js` broke printing.

Also, as part of these changes the patch replaces what looks like unnecessary `setAttribute` usage with ""regular"" `className` assignment and finally updates a couple of the CSS-rules to be more consistent.",False
c7ca771caf03e425a36cc790fe0a922fd217e70e,2021-06-03 00:59:17,Tim van der Meij,"Merge pull request #13476 from Snuffleupagus/Puppeteer-10

Update Puppeteer to version 10",True
1da42e8b8eb767b7bfdaeb6770a34efe029f275a,2021-06-02 03:55:40,Brendan Dahl,"Fix find highlighting regression from #13306.

When we insert extra spans for highlighting we want
them to be positioned normally instead of absolute or
relative.

Fixes #13345.",False
f61f80a5a33ded03ae5a3cb66e0cfc05cea2e2da,2021-06-02 00:55:38,Calixte Denizet,"XFA - Use native radio and checkbox buttons
  - Remove current stuff which relies on some system fonts to avoid bad rendering.",False
f2ade671eccc1b1698870a60cd8616f487e8e1b5,2021-06-01 22:36:49,calixteman,"Merge pull request #13411 from calixteman/xfa_print

XFA - Add support to print XFA forms",True
3456ed271b0109f4be735691d9565e513c43267a,2021-06-01 19:34:09,Jonas Jenwald,"Merge pull request #13378 from calixteman/10544

Replace terminal null char by a endchar command in CFF charstrings to make OTS happy",True
bc17ac5a2f898b0ca2c61ffd062203a7681447c2,2021-06-01 18:41:02,Jonas Jenwald,"Update Puppeteer to version 10

Hopefully the updated Chromium-version might help reduce the number of intermittent test failures.

Please find additional information at https://github.com/puppeteer/puppeteer/releases/tag/v10.0.0",False
706c27b9d4b3b9ff6fc3de82bcf71a0610604a1c,2021-05-31 17:36:38,calixteman,"Merge pull request #13472 from Snuffleupagus/checkbox-print-evaluator

Don't change options of the globally used `PartialEvaluator` in the ""should render checkbox with fallback font for printing"" unit-test",True
af78ba64bd139718d77f1f3d6855e869472ddabf,2021-05-31 15:44:58,Jonas Jenwald,"Don't change options of the globally used `PartialEvaluator` in the ""should render checkbox with fallback font for printing"" unit-test

Given that the same `PartialEvaluator`-instance is used for a lot of these unit-tests, manually changing the options in any one test-case could lead to intermittently failing unit-tests since they're run in a random order.
To fix this, we simply have to use the existing method to clone the `PartialEvaluator`-instance but with the custom options.",False
e3bde56311b3ae2392feea9b3f3ff421352c1636,2021-05-31 15:44:53,Jonas Jenwald,Ensure that the old/new `options` are correctly combined in `PartialEvaluator.clone`,False
a4340115174a180d8ea06dd0297a32fe696224c0,2021-05-31 13:56:30,Calixte Denizet,XFA - Add support to print XFA forms,False
8c53bf8647f4682af10c56f21380d2a7f875d9e3,2021-05-31 13:44:15,calixteman,"Merge pull request #13437 from calixteman/xfa_mv_root

XFA - Move the fake HTML representation of XFA from the worker to the main thread",True
dd0014ef2ee186d62a7a923e309b411e05c9d374,2021-05-31 00:43:42,Tim van der Meij,"Merge pull request #13465 from Snuffleupagus/misc-legacy-cleanup

Some `-es5`/`-legacy` renaming clean-up, and `deprecated` API options removal (PR 12978, PR 13207 follow-up)",True
a592bea37ecee2c700dc7a69e7c91a262e95022d,2021-05-31 00:38:58,Tim van der Meij,"Merge pull request #13466 from eltociear/patch-3

Fix typo in template.js",True
c66289f1fc47a918c08bad8ad5b78d187ea27de5,2021-05-30 21:32:07,Ikko Ashimine,"Fix typo in template.js

refering -> referring",False
d8a7c75b4a7ca296bc9c6db46dbe4b45d347d5b0,2021-05-30 20:08:33,Jonas Jenwald,"Revert ""Add `deprecated` handling of the now removed `AnnotationStorage` API-parameters"" (PR 13207 follow-up)

This reverts commit 737a8e846d35e146895e409baadaf7b4243c5b54, since it's included in the latest beta version `2.9.359`.",False
13dbbdcfb00b8dba795a1bdd829c65591cf38a6c,2021-05-30 19:38:54,Jonas Jenwald,"Remove the `-es5`/`-legacy` special handling in the `gulp wintersmith` task (PR 12978 follow-up)

With the stable version now being `2.8.335`, this work-around is no longer necessary.",False
d05f4c620e100c821463092973cbc8e01b69c330,2021-05-30 17:47:13,Tim van der Meij,"Merge pull request #13464 from timvandermeij/bump

Bump versions in `pdfjs.config`",True
9b0ea437c51b41b8f3f56845887cff783375d417,2021-05-30 17:45:09,Tim van der Meij,Bump versions in `pdfjs.config`,False
e667c8cbcf8a8368dfab5eccb6b6f7999f1ae275,2021-05-30 16:38:08,Tim van der Meij,"Merge pull request #13463 from mozilla/dependabot/npm_and_yarn/ws-7.4.6

Bump ws from 7.4.5 to 7.4.6",True
03d826afface174c1ddac5aab7dfd37cbb60bedc,2021-05-30 16:28:18,dependabot[bot],"Bump ws from 7.4.5 to 7.4.6

Bumps [ws](https://github.com/websockets/ws) from 7.4.5 to 7.4.6.
- [Release notes](https://github.com/websockets/ws/releases)
- [Commits](https://github.com/websockets/ws/compare/7.4.5...7.4.6)

Signed-off-by: dependabot[bot] <support@github.com>",False
2cd038857af2a441dc40fa155bd85dc71ea5deef,2021-05-30 16:27:15,Tim van der Meij,"Merge pull request #13462 from Snuffleupagus/update-packages

Update packages and translations",True
0bfd99ae98de6dc13be3505ed3c3cfee308414f7,2021-05-30 11:32:55,Jonas Jenwald,Update l10n files,False
4ef538b19a7b733f7110bed734090e21bbcfffb3,2021-05-30 11:21:30,Jonas Jenwald,Update the `yargs` package to the latest version,False
e7ab2d6eb5a6db9f7e78374fe0c71081f26feb54,2021-05-30 11:20:12,Jonas Jenwald,Update the `eslint-plugin-unicorn` package to the latest version,False
fd6d60935bd96f437416648e89a9268b4011de71,2021-05-30 11:13:13,Jonas Jenwald,Update npm packages,False
d725ff36f12e6bd2ed877e0ebbca6050ea198027,2021-05-29 19:13:34,Tim van der Meij,"Merge pull request #13460 from nikolas/patch-1

Update webpack import instructions",True
4902f9a54a8aaec13b840febb7bc6e4b102f83df,2021-05-29 06:16:56,nikolas,"Update webpack import instructions

This resolves an issue I had when loading pdf.js with webpack. `pdfjsLib` was always `undefined` after the import, and I dug deep into pdf.js's `webpack.js` file to sort out this issue, making all sorts of changes.

I figured out that there was just something wrong with the export/import procedure. After making this change, I now have the full pdfjs object in my webpack application.",False
a0ce3cb3b4e2b1220ce184e455e76d3aeecdf5f8,2021-05-29 03:09:36,Tim van der Meij,"Merge pull request #13448 from Snuffleupagus/_setDefaultAppearance-alpha

Support strokeAlpha/fillAlpha when creating a fallback appearance stream (issue 6810)",True
5e5641b147bfd0f275acb7e1d8981d08d327ed63,2021-05-29 03:08:39,Tim van der Meij,"Merge pull request #13457 from Snuffleupagus/issue-13242

Work-around for HighlightAnnotations without a top-level /ExtGState-entry (issue 13242)",True
0d56b1c36525bcb7f7eedec952de15aa2f39ec6e,2021-05-29 00:59:57,Tim van der Meij,"Merge pull request #13443 from Snuffleupagus/charsCache

Re-factor the `charsCache` on `Font`-instances",True
a6484c98611f648a165fa8946933dce2b2af907b,2021-05-29 00:40:08,Brendan Dahl,"Merge pull request #13427 from calixteman/xfa_storage

XFA - Add a storage to save fields values",True
707a9e3b02d65802f3b27fdbd115496f0e638725,2021-05-28 17:19:27,Jonas Jenwald,"Work-around for HighlightAnnotations without a top-level /ExtGState-entry (issue 13242)

For HighlightAnnotations with a built-in appearance stream, we still rely on it to specify the opacity correctly via a suitable blend mode. However, if the Annotation-drawing operators are placed *within* a /XObject of the /Form-type, the /ExtGState won't apply to the final rendering and the result is that the highlighting obscures the underlying text.

The more *correct* and general solution would likely be to somehow modify the implementation in `src/display/canvas.js`, to special-case handling of /Form-type /XObjects when rendering Annotations. Since we can very easily work-around this problem for now by using the ""no appearance stream"" code-path, doing *something* here ought to be preferable.

This patch is (obviously) merely a work-around, but given that the referenced issue is (as far as I know) the first case we've seen of this problem a simple solution will hopefully suffice for now.",False
e499521b7825bb389afc3cb4f614a2e8505b6a7f,2021-05-28 15:48:27,calixteman,"Merge pull request #13456 from calixteman/clazz

Replace clazz by classNames",True
2cc3b9635197f165599b6c1235eedd7ffc30a582,2021-05-28 15:19:48,Jonas Jenwald,"Merge pull request #13455 from calixteman/italic

Italic angle is defined clockwise in CSS when it's counterclockwise in PDF",True
f35176a32e1e39bdbe0e1fcb6968345419cc6f7a,2021-05-28 14:47:38,Calixte Denizet,Replace clazz by classNames,False
1b0006093da4b0d9dba5813039e844d8ec349c50,2021-05-28 14:36:11,Calixte Denizet,Italic angle is defined clockwise in CSS when it's counterclockwise in PDF,False
d285580f486178a41a316d615f3157ec7e1afcb3,2021-05-27 20:55:41,calixteman,"Merge pull request #13450 from Snuffleupagus/getPageIndex-JSDoc

Fix the JSDocs for `PDFDocumentProxy.getPageIndex` (issue 13449)",True
70c79c6f69139fe00677777eb0233f79c33cdd84,2021-05-27 20:11:08,Jonas Jenwald,Fix the JSDocs for `PDFDocumentProxy.getPageIndex` (issue 13449),False
52c13326cdbd9119322bfc80601579030b91961a,2021-05-27 19:53:21,Jonas Jenwald,"Support Annotations, without appearance streams, with bogus /Rect-entries (issue 13447)

This extends PR 13106 to apply not only to empty /Rect-entries, but also to bogus /Rect-entries for various Annotation-types.",False
a6447f2ca2e50d148caed3fec6bcc171e3843244,2021-05-27 19:53:18,Jonas Jenwald,"Support strokeAlpha/fillAlpha when creating a fallback appearance stream (issue 6810)

This fixes the colours, by respecting the strokeAlpha/fillAlpha-values, for a couple of Annotations in the PDF document from issue 13447.[1]

---
[1] Some of the annotations still won't render at all, when compared with Adobe Reader, but that could/should probably be handled separately.",False
f587d5998e8702f05ba63c80038b604f263af734,2021-05-27 17:22:47,calixteman,"Merge pull request #13445 from calixteman/ps_name

Fix Postscript name in font to avoid bug when saving in pdf",True
0c698346b81aa14d5abcb7bbc89d052e5649f9c9,2021-05-27 16:15:40,Calixte Denizet,"Fix Postscript name in font to avoid bug when saving in pdf
  - for xfa rendering, fonts are loaded and used in html;
  - when printed and saved in pdf, on linux, Firefox uses cairo backend
  - when subsetting a font, cairo uses the font postscript name and when this one is empty that leads to a bug
    (the append at https://github.com/freedesktop/cairo/blob/63f0d6268469dcd12316ea405a026f4be900dd79/src/cairo-cff-subset.c#L2049 is failing because of null length)
  - so this patch adds a postscript name to the font to make cairo happy.",False
8b1d01816b3248f8d702b2b8c8405ed37129e9da,2021-05-26 16:43:44,Jonas Jenwald,"Re-factor the `charsCache` on `Font`-instances

Currently `charsCache` is initialized *lazily*, which considering that it just contains a simple `Object` doesn't seem entirely necessary. This first of all forces us to do repeated exists-checks in the `Font.charsToGlyphs` method, and secondly the similar/related `glyphCache` is already initialized eagerly.

Furthermore, this patch also does a bit of clean-up in the `Font.charsToGlyphs` method since this code is quite old.",False
3da9f077be33d8689129d5ddb7915d7bf1f2a5fa,2021-05-26 00:40:01,Tim van der Meij,"Merge pull request #13435 from Snuffleupagus/eslint-no-array-push-push

Enable the `unicorn/no-array-push-push` ESLint plugin rule",True
6e92b56efafa04ee8df3e8b7ea13f1788d14df4f,2021-05-26 00:05:01,Tim van der Meij,"Merge pull request #13436 from Snuffleupagus/getPathGenerator-buf

Re-factor FontFaceObject.getPathGenerator to use Arrays instead of strings",True
774f4da9cbf79825b9b9500de757833792ac206d,2021-05-25 23:59:46,Tim van der Meij,"Merge pull request #13429 from mozilla/dependabot/npm_and_yarn/browserslist-4.16.6

Bump browserslist from 4.16.3 to 4.16.6",True
45c3f00a27e980b1d0cd85eef982a3e99159e1ad,2021-05-25 23:03:07,Calixte Denizet,"XFA - Move the fake HTML representation of XFA from the worker to the main thread
  - the only goal of this patch is to be able to get synchronously the fake html when printing from firefox:
    - in order to print we need to inject some html in beforeprint callback but we cannot block in waiting for all the pages.
  - from a memory point of view: it doesn't change anything since the fake HTML is deleted in the worker;
  - this way we don't break any assumptions.",False
9478d2f064d95b6d091c46c3650422405b9fd198,2021-05-25 22:55:09,Calixte Denizet,XFA - Add a storage to save fields values - this is required to be able to print (or save) a document. Some pages can be unloaded (because pdf.js is lazy) and this storage will help to save their data in order to resuse them when printing or just when displaying a page again.,False
4d26623e5959d31822d5b39462d024ebe7d5f1d0,2021-05-25 22:01:53,calixteman,"Merge pull request #13402 from calixteman/xfa_layout1

XFA - Fix lot of layout issues",True
7cebdbd58c1bc8ac5825fb5b4f8df762968d2d9e,2021-05-25 21:21:36,Calixte Denizet,"XFA - Fix lot of layout issues
  - I thought it was possible to rely on browser layout engine to handle layout stuff but it isn't possible
    - mainly because when a contentArea overflows, we must continue to layout in the next contentArea
    - when no more contentArea is available then we must go to the next page...
    - we must handle breakBefore and breakAfter which allows to ""break"" the layout to go to the next container
  - Sometimes some containers don't provide their dimensions so we must compute them in order to know where to put
    them in their parents but to compute those dimensions we need to layout the container itself...
  - See top of file layout.js for more explanations about layout.
  - fix few bugs in other places I met during my work on layout.",False
9ad7746118be9e3f86eafdee24368e199db23a1f,2021-05-25 17:41:57,Jonas Jenwald,Replace a couple of standard `for`-loops with `for...of` in `src/display/font_loader.js`,False
dcbb23d7fa8d6cc44cfac2b49b12af9111639140,2021-05-25 17:41:54,Jonas Jenwald,"Re-factor `FontFaceObject.getPathGenerator` to use Arrays instead of strings

This is similar to a lot of other code, where we use ""Array + join"" rather than repeated string concatenation.",False
ec3bcadf5600764e6b4b18291af3fa4115463032,2021-05-25 17:24:46,Jonas Jenwald,"Enable the `unicorn/no-array-push-push` ESLint plugin rule

There's generally speaking no need to use multiple consecutive `Array.prototype.push()` calls, since that method accepts multiple arguments, and this ESLint rule helps enforce that pattern.

Please see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/main/docs/rules/no-array-push-push.md for additional information.",False
4f853f7669469daf66583e833b3e2fe7b62dd66f,2021-05-25 02:10:00,dependabot[bot],"Bump browserslist from 4.16.3 to 4.16.6

Bumps [browserslist](https://github.com/browserslist/browserslist) from 4.16.3 to 4.16.6.
- [Release notes](https://github.com/browserslist/browserslist/releases)
- [Changelog](https://github.com/browserslist/browserslist/blob/main/CHANGELOG.md)
- [Commits](https://github.com/browserslist/browserslist/compare/4.16.3...4.16.6)

Signed-off-by: dependabot[bot] <support@github.com>",False
3538ef017fa05787d2e0c2b6bdf2d904753da489,2021-05-22 19:36:33,Tim van der Meij,"Merge pull request #13421 from calixteman/no_remote_image

XFA - Don't display images with a href",True
9127e11022bfeb37553fdec064e4bfed082c5ff4,2021-05-22 19:28:51,Tim van der Meij,"Merge pull request #13420 from timvandermeij/test-downloadutils

Drop obsolete logic from the `downloadFile` function in `test/downloadutils.js`",True
209ac5ca579741082d043689d78ff2d6d5ac661c,2021-05-22 18:39:43,Calixte Denizet,XFA - Don't display images with a href,False
99430225b0003a024914ef49d8b1155cd2dc406a,2021-05-22 18:15:42,Tim van der Meij,"Drop obsolete logic from the `downloadFile` function in `test/downloadutils.js`

This code is old and predates the improvements we made to the test
manifest to only contain working URLs (either Web Archive or
GitHub/Bugzilla links), so the fallback logic to try the Web Archive is
no longer necessary. This greatly simplifies the function and also
makes sure that we fail directly in case a bad URL is added to the
manifest, instead of having it work ""accidentally"" because of this
logic, since we want the manifest to be correct at all times (and
otherwise fail loudly).",False
0df1a5661958df0c4ed2f73b0f3266d825c5c280,2021-05-22 18:01:59,calixteman,"Merge pull request #13417 from Snuffleupagus/xfa-URL-clone

[XFA] Send URLs as strings, rather than objects (issue 1773)",True
de680d77772dca90e6feb292513a811b67b2d453,2021-05-22 16:36:31,Tim van der Meij,"Merge pull request #13381 from Snuffleupagus/buildFontPaths-ignoreErrors

Handle errors gracefully, in PartialEvaluator.buildFontPaths, when glyph path building fails",True
92e731011d44c3eea58dd1703c7329ce6e7f55a5,2021-05-22 16:30:16,Tim van der Meij,"Merge pull request #13419 from Snuffleupagus/more-stringToBytes

Use the `stringToBytes` helper function in more places",True
53a70244d0169134ee255bb18bce589f4458fd1b,2021-05-22 15:53:09,Jonas Jenwald,"Use the `stringToBytes` helper function in more places

Rather than manually reimplementing, more-or-less, this functionality in a few spots we can simply use the existing helper function instead.",False
ba13bd8c2daa3c6afeb89178aec2d99dccd6135f,2021-05-22 15:28:53,Jonas Jenwald,"[XFA] Send `URL`s as strings, rather than objects (issue 1773)

Given that `URL`s aren't supported by the structured clone algorithm, see https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm, the document in issue 1773 will cause the browser to throw `DataCloneError: The object could not be cloned.`-errors and nothing will render.
To fix this, we'll instead simply send the stringified version of the `URL` to prevent these errors from occuring.",False
c4429bc3f2f63f874e4a78746a9d38436aabf37f,2021-05-22 15:16:37,Jonas Jenwald,"Do the `isType3Font`-check *once*, rather than repeating it, in `PartialEvaluator.translateFont`

*This is a small piece of clean-up that I happened to notice while browsing the code.*",False
68350378c0960ec6fef4c6251931d93fd39f4637,2021-05-22 15:16:31,Jonas Jenwald,"Handle errors gracefully, in `PartialEvaluator.buildFontPaths`, when glyph path building fails

The building of glyph paths, in the `FontRendererFactory`, can fail in various ways for corrupt font data. However, we're currently not attempting to handle any such errors in the evaluator, which means that a single broken glyph *can* prevent an entire page from rendering.

To address this we simply have to pass along, and check, the existing `ignoreErrors` option in `PartialEvaluator.buildFontPaths` similar to the rest of the `PartialEvaluator` code.",False
0dba468e60dc47ce6f08ace4e5f9d4ff8a7d2167,2021-05-22 13:41:31,Jonas Jenwald,"Don't allow the `LoopbackPort` to ""clone"" a `URL`

Note that `URL`s aren't supported by the structured clone algorithm, see https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm, and any attempt to send a `URL` using `postMessage` is rejected by the browser. Hence, for consistency when workers are disabled, the `LoopbackPort` should obviously also reject any `URL`s.",False
b2ffebe978a99f6c5bbc8d3241fde33f2a91acb7,2021-05-22 00:03:35,Tim van der Meij,"Merge pull request #13416 from calixteman/xfa_config

XFA - Fix wrong function name",True
8a8879aed27b9c11a3734eff6a708045cdaad41c,2021-05-21 23:55:26,Calixte Denizet,XFA - Fix wrong function name,False
d1d9b9043de0990697c23504c9a1dfbbd3ec9694,2021-05-21 23:45:09,Tim van der Meij,"Merge pull request #13415 from Snuffleupagus/getDestination-out-of-order

Improve handling of named destinations in out-of-order NameTrees (PR 10274 follow-up)",True
5fdb12661bdba5421e24d02afec2c630f09962bb,2021-05-21 23:37:35,Tim van der Meij,"Merge pull request #13408 from Snuffleupagus/zoom-click-blur

Remove focus from the zoom dropdown, when a mouse is used (bug 1300525, issue 4923)",True
7d9a83012bc8a8f83ae27409e958c5b13af0a209,2021-05-21 23:33:07,Tim van der Meij,"Merge pull request #13401 from Snuffleupagus/rm-some-prettier-ignore

Remove some, with Prettier `2.3.0`, unnecessary `// prettier-ignore` comments",True
8d5689387bf47624bbb91cf6622c5e1766d5e240,2021-05-21 19:18:37,Jonas Jenwald,"Improve handling of named destinations in out-of-order NameTrees (PR 10274 follow-up)

According to the specification, see https://web.archive.org/web/20210404042322if_/https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#G6.2384179, the keys of a NameTree/NumberTree should be ordered.
For corrupt PDF files, which violate this assumption, it's thus possible that trying to lookup a single entry fails.

Previously, in PR 10274, we implemented a fallback that only applies to the ""bottom"" node of a NameTree/NumberTree, which in general might not actually help for sufficiently corrupt NameTree/NumberTree data.
Instead we remove the current *limited* fallback from `NameOrNumberTree.get`, and defer to the call-site to handle this case explicitly e.g. by using `NameOrNumberTree.getAll` for data where that makes sense. For well-formed documents, these changes should *not* lead to any additional data fetching/parsing.

Finally, as part of these changes, the validation of named destination data is improved in the `Catalog` and a new unit-test is also added.",False
6468e1d0cdcd040a2bcf5acc010b58ad1790e235,2021-05-20 18:58:38,Jonas Jenwald,"Remove focus from the zoom dropdown, when a mouse is used (bug 1300525, issue 4923)

This patch fixes the referenced bugs/issues, in a way that won't interfere with keyboard users, assuming that we actually want to fix these old bugs/issues. (If not, we should close them as WONTFIX.)",False
1a8d05fdcf68219a0844e17cea325a3f9e9ce13c,2021-05-19 15:06:03,Jonas Jenwald,"Remove some, with Prettier `2.3.0`, unnecessary `// prettier-ignore` comments

To get the maximum benefit from something like Prettier, you obviously don't want to disable the automatic formatting unless absolutely necessary. When we added Prettier there were a number of cases, mostly involving larger Arrays, which required disabling of the automatic formatting for overall readability and/or to not break inline comments.

With changes in Prettier version `2.3.0`, see [the release notes](https://prettier.io/blog/2021/05/09/2.3.0.html#concise-formatting-of-number-only-arrays-10106httpsgithubcomprettierprettierpull10106-10160httpsgithubcomprettierprettierpull10160-by-thorn0httpsgithubcomthorn0), there's now better formatting support for Arrays containing only numbers. Hence we can now remove a number of `// prettier-ignore` comments, and thus get the benefit of automatic formatting in (slightly) more of the code-base.",False
faf6b109392e6f69a9063d050d8682c3a8aa12fd,2021-05-18 14:44:48,calixteman,"Merge pull request #13394 from calixteman/xml_parser

Handle PI with no value in xml parser",True
4544ebf38a3267ef09244af7abc6f49674398ddc,2021-05-18 13:52:18,Calixte Denizet,"Handle PI with no value in xml parser
  - an XML PI contains a target and optionally some content (see https://en.wikipedia.org/wiki/Processing_Instruction)
  - the parser expected to always have some content and so it could lead to wrong parsing.",False
239d0097fa5c717ba8dde56e175ae006c9053df1,2021-05-18 01:09:10,Brendan Dahl,"Merge pull request #13390 from calixteman/opentype_and_xfa

XFA - Don't move glyphes in private area with non-truetype fonts",True
46c2eeb19a437d4e8b771c51f5cf6a04aebf11c1,2021-05-17 21:43:45,Brendan Dahl,"Merge pull request #13389 from calixteman/width_in_cff

Get any width (if one is present) in CFF parser",True
17e9cfcd2a86bf6b72faf0ac3ac96fe4224731ba,2021-05-17 21:17:13,Brendan Dahl,"Merge pull request #13328 from calixteman/js_display1

JS - Add support for display property",True
a74d19262ae51b416ae36559bc7b9dc37383025f,2021-05-17 20:22:39,Calixte Denizet,"XFA - Don't move glyphes in private area with non-truetype fonts
  - it has been done in PR #13146 but only for truetype fonts.",False
d3941888352d6439fff139ca2a9e283fc5a2a05a,2021-05-17 17:47:08,Calixte Denizet,"Get any width (if one is present) in CFF parser
  - in charstring specs at page 21 (section 4.2): ""Also, it may appear in the charstring as the difference from nominalWidthX"" so the number we've on the stack doesn't have to be positive.
  - currently this bug has probably no visible effect
  - but when the font is loaded to be used with XFA, then the rendering is incorrect.",False
2fc9f394365babbe98d25a90d78ab7b9b7bfb197,2021-05-16 21:47:39,Tim van der Meij,"Merge pull request #13387 from Snuffleupagus/evaluator-some-no-var

Fix a few *safe* ESLint no-var failures in `src/core/evaluator.js` (13371 follow-up)",True
718f7bf7e104d3953e13b65eb09f762775f8eaef,2021-05-16 18:52:43,Jonas Jenwald,"Fix a few *safe* ESLint `no-var` failures in `src/core/evaluator.js` (13371 follow-up)

As can be seen in PR 13371, some of the `no-var` changes in the `PartialEvaluator.{getOperatorList, getTextContent}` methods caused errors in `gulp server`-mode.
However, there's a handful of instances of `var` in other methods which should be completely *safe* to convert since there's no strange scope-issues present in that code.",False
a5c74f53c1b7a9487ced9930323583dd5d42a914,2021-05-16 18:32:18,Tim van der Meij,"Merge pull request #13386 from timvandermeij/src-core-bidi-no-var

Enable the `no-var` linting rule in `src/core/bidi.js`",True
35c82af4461e17a3e2399eed0e52bcf89ca5183d,2021-05-16 18:07:41,Tim van der Meij,"Merge pull request #13385 from Snuffleupagus/operator_list-class

Convert `src/core/operator_list.js` to use standard classes",True
b8a5e797c56c09a761cef002f01c748aa91570ed,2021-05-16 17:44:26,Tim van der Meij,"Enable the `no-var` linting rule in `src/core/bidi.js`

This is done automatically with `gulp lint --fix` and the following
manual changes:

```diff
diff --git a/src/core/bidi.js b/src/core/bidi.js
index e9e0a7217..32691c0c6 100644
--- a/src/core/bidi.js
+++ b/src/core/bidi.js
@@ -82,7 +82,8 @@ function isEven(i) {
 }

 function findUnequal(arr, start, value) {
-  for (var j = start, jj = arr.length; j < jj; ++j) {
+  let j, jj;
+  for (j = start, jj = arr.length; j < jj; ++j) {
     if (arr[j] !== value) {
       return j;
     }
@@ -251,15 +252,14 @@ function bidi(str, startLevel, vertical) {
   for (i = 0; i < strLength; ++i) {
     if (types[i] === ""EN"") {
       // do before
-      var j;
-      for (j = i - 1; j >= 0; --j) {
+      for (let j = i - 1; j >= 0; --j) {
         if (types[j] !== ""ET"") {
           break;
         }
         types[j] = ""EN"";
       }
       // do after
-      for (j = i + 1; j < strLength; ++j) {
+      for (let j = i + 1; j < strLength; ++j) {
         if (types[j] !== ""ET"") {
           break;
         }
```",False
3cfa316d40e86c1d5a403c80c57d26b882450b3c,2021-05-16 17:09:54,Jonas Jenwald,"Convert `src/core/operator_list.js` to use standard classes

With modern JavaScript modules, where only *explicitly* exported properties are visible to the outside, the `QueueOptimizerClosure` should no longer be necessary.

Furthermore, to reduce the possibility of `NullOptimizer` and `QueueOptimizer` getting out of sync (note e.g. the inconsistency fixed in PR 10784), we now let the latter extend the former one.",False
8a8a67de3b3b492ce7ad1319cbac3de97ed1de68,2021-05-16 16:41:04,Tim van der Meij,"Merge pull request #13380 from Snuffleupagus/pattern_helper-class

Re-factor and convert the code in `src/display/pattern_helper.js` to use standard classes",True
ab419cc320c7b7121719564f0ca3c203dc32362d,2021-05-16 16:34:16,Tim van der Meij,"Merge pull request #13383 from Snuffleupagus/update-packages

Update packages and translations",True
198ef044f8cae5f3f396df1f28e8304999f9982b,2021-05-16 15:20:55,Jonas Jenwald,"Account for changes in `eslint-plugin-import` version `2.23.0`

The simplest solution, as far as I can tell, to ""fix"" the new errors reported by the `no-unresolved` rules was to extend the existing whitelisting to cover the new cases. Given that the affected `imports` are only relevant in `gulp server`-mode, this should thus be completely fine.

Please find additional information at:
 - https://github.com/benmosher/eslint-plugin-import/releases/tag/v2.23.0
 - https://github.com/benmosher/eslint-plugin-import/blob/v2.23.0/CHANGELOG.md#2230---2021-05-13",False
8943bcd3c37799b13e82575c06d213ca7ebf38a8,2021-05-16 15:14:05,Jonas Jenwald,"Account for formatting changes in Prettier version `2.3.0`

With the exception of one tweaked `eslint-disable` comment, in `web/generic_scripting.js`, this patch was generated automatically using `gulp lint --fix`.

Please find additional information at:
 - https://github.com/prettier/prettier/releases/tag/2.3.0
 - https://prettier.io/blog/2021/05/09/2.3.0.html",False
30908451b4dc1801bb5569bd71213b28e33e1e07,2021-05-16 15:14:05,Jonas Jenwald,Update l10n files,False
c93958f9012b2f1ac0e7d590104a1fa3b344fda7,2021-05-16 13:35:58,Jonas Jenwald,Update npm packages,False
a984431046b7dc8dabe86434511b2a433a064c7c,2021-05-15 19:30:00,Jonas Jenwald,"Modernize the `ShadingIRs` structure, in `src/display/pattern_helper.js`, to use standard classes

This patch replaces the old structure with an abstract base-class, which the new ShadingPattern classes then inherit from.
The old `createMeshCanvasClosure` can now be removed, since it's not necessary any more with modern JavaScript, and the `createMeshCanvas` function is now instead a method on the new `MeshShadingPattern` class (avoids unnecessary parameter passing).",False
40939d5955c7063b99ab7bbdf08bcf4bb261fee9,2021-05-15 16:33:07,Jonas Jenwald,"Convert `src/display/pattern_helper.js` to use standard classes

Note that this patch only covers `TilingPattern`, since the `ShadingIRs`-implementation required additional re-factoring.",False
438cf1e438302de470b86f93f2e0a36a377af94d,2021-05-15 15:38:01,Tim van der Meij,"Merge pull request #13379 from Snuffleupagus/update-compat

[api-minor] Update minimum supported browser versions (PR 13361 follow-up)",True
bb8e15c971d243c423ffd4bc91cbf367f81f6bc5,2021-05-15 13:27:34,Jonas Jenwald,"[api-minor] Update minimum supported browser versions (PR 13361 follow-up)

With the changes in PR 13361, we're now using the `CanvasPattern.setTransform()` method when rendering certain Shadings/Patterns.
Note that while `CanvasPattern` itself has been supported since basically ""forever"", its `setTransform` method is a slightly newer addition to the specification; please refer to https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern#browser_compatibility

Rather than trying to re-write PR 13361 to not use, or possibly spending time/effort (if possible) polyfilling, `CanvasPattern.setTransform()` this patch thus suggests that we simply update the *minimum* supported browser versions instead.

According to the compatibility data linked above, the *minimum* supported browser versions in the PDF.js library are now as follows:
 - Chrome >= 68, which was released on 2018-07-24.[1]
 - Firefox ESR, see https://wiki.mozilla.org/Release_Management/Calendar.
 - Safari >= 11.1, which was release on 2018-03-29.[2]

(Given that the PDF.js contributors cannot realistically test a bunch of old browsers, it's not unimaginable that some older browser versions are already not working with the PDF.js library.)

Based on these changes, which we should ensure are reflected in the Wiki as well, we can also remove a number of now redundant polyfills. Furthermore we'll no longer ""claim"" to support Windows XP, note the `gulpfile.js` changes, which should definitely *not* be an issue given that it's no longer officially supported.[3]

---
[1] According to https://en.wikipedia.org/wiki/Google_Chrome_version_history

[2] According to https://en.wikipedia.org/wiki/Safari_version_history#Safari_11

[3] According to https://en.wikipedia.org/wiki/Windows_XP#End_of_support",False
d2e7161f2c95cc8a61a573fcd6375b3664d40bbd,2021-05-15 01:53:44,Tim van der Meij,"Merge pull request #13377 from Snuffleupagus/pattern-class

Re-factor and convert the code in `src/core/pattern.js` to use standard classes",True
c9892be47c4e92f3ca8708854e47581ef83d0912,2021-05-15 01:46:39,Tim van der Meij,"Merge pull request #13375 from Snuffleupagus/refactor-getContentStream

Improve the `Page.content` and `Page.getContentStream` methods",True
ebe3ee4f25e3410c819562a50354d9daccbe2de9,2021-05-15 01:14:41,Jonas Jenwald,"Modernize the `Shadings` structure, in `src/core/pattern.js`, to use standard classes

This patch replaces the old structure with a abstract base-class, which the new RadialAxial/Mesh-shading classes then inherit from.[1]
The old `MeshClosure` can now be removed, since it's not necessary any more, and most of the functions inside of it are now instead methods on the new `MeshShading` class. This is particularly nice, in my opinion, since we previously were *manually* passing around a reference to the current `Mesh`-instance.

---
[1] If we want/need to, in the future, split e.g. the Mesh-handling into multiple classes that should now be easy to do.",False
6acb2db4be24b8ce722797b300ddd05193c2fc04,2021-05-15 01:12:21,Jonas Jenwald,"Convert ` src/core/pattern.js` to use standard classes

Note that this patch only covers `Pattern` and `MeshStreamReader`, since the `Shadings`-implementation required additional re-factoring.",False
f92e1fa160bc24dcec181101c6dd2002718f3a29,2021-05-14 22:04:51,Calixte Denizet,Replace terminal null char by a endchar command in CFF charstrings to make OTS happy,False
612b43852bb576232dacb8e2713011da40d04822,2021-05-14 19:41:48,Jonas Jenwald,"Remove unused properties from the `Shadings`-implementations in `src/core/pattern.js`

Neither the `type` or the `cs` properties are used outside of the ""constructors"", and we can thus remove them.[1]
Note that a lot of this code is very old, and that it actually predates the main/worker-thread split before which the *same* file was used on both the main- *and* worker-threads.

---
[1] On the main-thread, a similar `type` property was removed in PR 12591.",False
1a2cea21a5172f43f16eb9799b2181fa67fa27d6,2021-05-14 17:15:45,Calixte Denizet,"Replace command with not enough args by an endchar in CFF font
  - Right now, a glyph with an erroneous outline is replaced by an empty glyph
    if the error is far enough from the start there's likely something to render
    so the idea is to replace a command with args by an endchar when no args are
    on the stack: this way OTS is likely happy (no remaining args on stack) and we
    can draw something which is likely better than nothing.",False
4248f0745cc147e9b1da5f8aecaec0a128a9b9b1,2021-05-14 15:17:34,Jonas Jenwald,"Improve the `Page.content` and `Page.getContentStream` methods

First of all, by using `Dict.getArray` in the `Page.content` getter we remove the need to manually iterate through and fetch the sub-streams (when they exist) in the `Page.getContentStream` method.
Secondly, we can simplify the code in `Page.{getOperatorList, extractTextContent}` by letting `Page.getContentStream` ensure that `content` is available and returning a Promise instead.",False
70113131de87217eaf356ab5b005c64db6d02d0b,2021-05-14 14:54:27,Jonas Jenwald,"Inline the data lookup in the `Dict.getArray` method

Similar to the `get`/`getAsync` methods, this should be a *tiny* bit more efficient which cannot hurt considering that `getArray` is now used a lot more than when initially added.",False
e394da58611a9b214063e8990a0ff86d7d0db843,2021-05-13 16:56:38,Tim van der Meij,"Merge pull request #13369 from brendandahl/smask-pattern

Fix tiling pattern with smask.",True
9d1f57941359d36ecae699a9ddcbc729fcb0d834,2021-05-13 16:55:55,Tim van der Meij,"Merge pull request #13371 from Snuffleupagus/revert-evaluator-manual-no-var

Revert ""Fix the remaining `no-var` failures, which couldn't be handled automatically, in the `src/core/evaluator.js` file"" (PR 13344 follow-up)",True
75208d36c2f2a084c6c45f3f7593716ea9fe35b5,2021-05-13 14:49:46,Jonas Jenwald,"Revert ""Fix the remaining `no-var` failures, which couldn't be handled automatically, in the `src/core/evaluator.js` file"" (PR 13344 follow-up)

This reverts commit 0ef9b5aafc88094f19fec793c174c622e7e15542, since it cases a lot of warnings (see below) *locally* with e.g. the document from issue 9627.
Strangely enough, this only occurs with `gulp server`-mode and the actual builds are apparently fine. It seems that this *may* be some unfortunate interaction with the old Babel-plugin that's used together with SystemJS.

```
Warning: getTextContent - ignoring ExtGState: ""FormatError: ExtGState should be a dictionary."".
```

Rather than taking the risk that this could actually cover a more serious bug, and since I cannot immediately figure out what's wrong, it thus seem safest to revert this for now and we can (carefully) revisit this once SystemJS has been removed (see PR 12563).",False
53991d0924a0259af7cebb59695bea2ca4d51a17,2021-05-13 00:12:08,Brendan Dahl,"Fix tiling pattern with smask.

After drawing a tiling pattern we were not calling
endDrawing, which handles compositing any
active smasks.

Fixes #8565.",False
ba99e54c66c33562a7d88f1d230d7bc4d02bbadb,2021-05-12 23:57:37,Tim van der Meij,"Merge pull request #13361 from brendandahl/patterns-fixes

Fix several issues with radial/axial shadings and tiling patterns.",True
1cf9f42ca2a052976a9845f9f374a1c819082382,2021-05-12 23:50:35,Tim van der Meij,"Merge pull request #13366 from Snuffleupagus/primitives-class

Convert the remaining functions in `src/core/primitives.js` to use standard classes",True
0a3e483c7f74a5ed306f9567a95dc95a949e2413,2021-05-12 23:46:53,Tim van der Meij,"Merge pull request #13360 from Snuffleupagus/renderer-conditional-pref

Only include the `renderer`-preference in builds where `SVGGraphics` is defined",True
3fbed09505530bcb67e85b314cecfd955f3c612a,2021-05-12 23:43:03,Tim van der Meij,"Merge pull request #13368 from Snuffleupagus/image_decoders-Jbig2Image-export

Fix the `Jbig2Image` export for the `gulp image_decoders` build (PR 9729 follow-up, issue 13367)",True
4ea7d57bade53dd355dc1fd712c71176e3775b91,2021-05-12 23:40:04,Tim van der Meij,"Merge pull request #13363 from Snuffleupagus/lgtm-exclude-useless-assignment-to-local

Prevent LGTM from complaining about useless assignments (PR 12562 follow-up)",True
64c55d381d2bf160dc423994bb71f05b2d321806,2021-05-12 23:11:29,Jonas Jenwald,"Fix the `Jbig2Image` export for the `gulp image_decoders` build (PR 9729 follow-up, issue 13367)",False
757636d519a3bab8996538e3395a2bf49d2e5357,2021-05-12 13:06:28,Jonas Jenwald,"Convert the remaining functions in `src/core/primitives.js` to use standard classes

This patch was tested using the PDF file from issue 2618, i.e. https://bug570667.bugzilla-attachments.gnome.org/attachment.cgi?id=226471, with the following manifest file:
```
[
    {  ""id"": ""issue2618"",
       ""file"": ""../web/pdfs/issue2618.pdf"",
       ""md5"": """",
       ""rounds"": 50,
       ""type"": ""eq""
    }
]
```

which gave the following results when comparing this patch against the `master` branch:
```
-- Grouped By browser, stat --
browser | stat         | Count | Baseline(ms) | Current(ms) | +/- |   %  | Result(P<.05)
------- | ------------ | ----- | ------------ | ----------- | --- | ---- | -------------
firefox | Overall      |    50 |         3417 |        3426 |   9 | 0.27 |
firefox | Page Request |    50 |            1 |           1 |   0 | 5.41 |
firefox | Rendering    |    50 |         3416 |        3426 |   9 | 0.27 |
```

Based on these results, there's no significant performance regression from using standard classes and this patch should thus be OK.",False
ac44afa70e06d103633727a3249cf049c00d3fd0,2021-05-12 05:02:24,Brendan Dahl,"Fix several issues with radial/axial shadings and tiling patterns.

Previously, we set the base transformation and pattern matrix
directly to the main rendering ctx of the page, however doing this
caused the current transform to be lost. This would cause issues
with things like shear missing so the pattern was misaligned or when
stroke was used the scale of the line width or dash would be wrong.
Instead we should leave the current transform and use setTransfrom
on the pattern so it is applied correctly. For axial and radial shadings I had
to create a temporary canvas to draw the shading so I could in turn
use setTransform.

Fixes: #13325, #6769, #7847, #11018, #11597, #11473

The following already in the corpus are improved:
issue8078-page1
issue1877-page1",False
dda1a9a7b137d3ca89aa469940b3fbd5f18b3cdc,2021-05-11 16:26:45,calixteman,"Merge pull request #13364 from Snuffleupagus/sandbox-TESTING-define

Clean-up usage of the `TESTING`-define in `src/pdf.sandbox.js`",True
b068882bd00e015924601887a8e897c7f63678c9,2021-05-11 16:09:33,Jonas Jenwald,"Clean-up usage of the `TESTING`-define in `src/pdf.sandbox.js`

This patch moves the `PDFJSDev`-checks *inline*, similar to the rest of the code-base, such that the code in question is actually being removed from the *built* files in e.g. the official releases.",False
7e82c2030168fb80c5c4e525ecc04cf60971d557,2021-05-11 15:06:36,Jonas Jenwald,"Prevent LGTM from complaining about useless assignments (PR 12562 follow-up)

Given that we're using ESLint, which is fine with the code as-is, let's just silence the warnings; this is similar to PR 12562.",False
7548dc5ea2f569916b1917bd0344e6207f2bf9a3,2021-05-10 15:33:53,Jonas Jenwald,"Only include the `renderer`-preference in builds where `SVGGraphics` is defined

After PR 13117 it's now (finally) possible for *different* build targets to specify individual options/preferences, and we can utilize that to only expose the `renderer`-preference in builds where `SVGGraphics` is actually defined.
Note that for e.g. `MOZCENTRAL`-builds, trying to enable SVG-rendering will throw immediately and the preference thus doesn't make sense to include there.

Also, update the dummy `SVGGraphics` to use a class, tweak the `PDFJSDev`-check in `src/display/svg.js` to agree fully with the option/preference, and remove an unnecessary `eslint-disable`.",False
f07d50f8eeced1cd9cc967e938485893d584fc32,2021-05-09 22:02:37,Tim van der Meij,"Merge pull request #13358 from Snuffleupagus/rm-WebGL

[api-minor] Remove the WebGL implementation",True
2ba4b65ca8cd78a4ae976ce19a5be612b5b74f3d,2021-05-09 20:08:44,Jonas Jenwald,"[api-minor] Remove the WebGL implementation

Reasons for the removal include:
 - This functionality was always somewhat experimental and has never been enabled by default, partly because of worries about rendering bugs caused by e.g. bad/outdated graphics drivers.

 - After the initial implementation, in PR 4286 (back in 2014), no additional functionality has been added to the WebGL implementation.

 - The vast majority of all documents do not benefit from WebGL rendering, since only a couple of *specific* features are supported (e.g. some Soft Masks and Patterns).

 - There is, and has always been, *zero* test-coverage for the WebGL implementation.

 - Overall performance, in the PDF.js library, has improved since the experimental WebGL implementation was added.

Rather than shipping unused *and* untested code, it seems reasonable to simply remove the WebGL implementation for now; thanks to version control it's always possible to bring back the code should the need ever arise.",False
99eac86478b82e4ba10c100de67537fe3ec87a73,2021-05-09 19:12:47,Tim van der Meij,"Merge pull request #13357 from Snuffleupagus/rm-disableCanvasToImageConversion

Remove the `disableCanvasToImageConversion` functionality from `PDFThumbnailView` (PR 7029 follow-up)",True
3c4cd19ea359dd27386bf963883ce53e7f73f664,2021-05-09 17:56:01,Jonas Jenwald,"Remove the `disableCanvasToImageConversion` functionality from `PDFThumbnailView` (PR 7029 follow-up)

This functionality was originally implemented in PR 7029; however it's not, nor has it ever been, used as far as I can tell.[1]
Note in particular that the default viewer does not expose either a preference or even an option with which `disableCanvasToImageConversion` can be toggled, and source-code modification is thus required.

Furthermore, note also that we have multiple other instances of `canvas`-data accesses in both the `src/display/canvas.js` and `src/display/text_layer.js` files. If any of those are blocked, by e.g. browser settings, there will be outright rendering bugs and non-working thumbnails thus seem like a very small issue in the grand scheme of things; hence why I'm suggesting that we remove the unused `disableCanvasToImageConversion` functionality.

---
[1] For the Tor use-case mentioned in issue 7026, I *believe* that the solution was to white-list `canvas`-data accesses for its built-in PDF Viewer.",False
a6f324dcc76f8004b16dd063d5e1861660efbacb,2021-05-08 22:11:29,Tim van der Meij,"Merge pull request #13355 from calixteman/fix_integration_test2

Fix some integration tests",True
38503d1c5fca979424485ed1ad0c523c617e0a5c,2021-05-08 19:57:45,Calixte Denizet,Fix some integration tests,False
0ec945ce8ce0268340126d4e0a6007c8e37b5f59,2021-05-08 17:56:20,Tim van der Meij,"Merge pull request #13354 from Snuffleupagus/preEvaluateFont-toUnicode-export

Export the ""raw"" toUnicode-data from `PartialEvaluator.preEvaluateFont`",True
6eef69de2261aa6e34987ec6b6707985de3cf960,2021-05-08 15:34:13,Jonas Jenwald,"Export the ""raw"" `toUnicode`-data from `PartialEvaluator.preEvaluateFont`

Compared to other data-structures, such as e.g. `Dict`s, we're purposely *not* caching Streams on the `XRef`-instance.[1]
The, somewhat unfortunate, effect of Streams not being cached is that repeatedly getting the *same* Stream-data requires re-parsing/re-initializing of a bunch of data; see `XRef.fetch` and related methods.

For the font-parsing in particular we're currently fetching the `toUnicode`-data, which is very often a Stream, in `PartialEvaluator.preEvaluateFont` and then *again* in `PartialEvaluator.extractDataStructures` soon afterwards.
By instead letting `PartialEvaluator.preEvaluateFont` export the ""raw"" `toUnicode`-data, we can avoid *some* unnecessary re-parsing/re-initializing when handling fonts.
*Please note:* In this particular case, given that `PartialEvaluator.preEvaluateFont` only accesses the ""raw"" `toUnicode` data, exporting a Stream should be safe.

---
[1] The reasons for this include:
 - Streams, especially `DecodeStream`-instances, can become *very* large once read. Hence caching them really isn't a good idea simply because of the (potential) memory impact of doing so.

 - Attempting to read from the *same* Stream-instance more than once won't work, unless it's `reset` in between, since using any method such as e.g. `getBytes` always starts at the current data position.

 - Given that parsing, even in the worker-thread, is now fairly asynchronous it's generally impossible to assert that any one Stream-instance isn't being accessed ""concurrently"" by e.g. different `getOperatorList` calls. Hence `reset`-ing a cached Stream-instance isn't going to work in the general case.",False
13fb1654dc20f814f3cfdc498371b2f438aa884c,2021-05-08 15:32:49,Jonas Jenwald,"Export the `firstChar`/`lastChar`-data from `PartialEvaluator.preEvaluateFont`

Rather than re-fetching/re-parsing these properties immediately in `PartialEvaluator.translateFont`, we can simply export them instead. (Obviously the effect will be really tiny, but there is less parsing overall this way.)",False
e6435e37af393082bb58a6559fffc0501c6ef55c,2021-05-08 15:31:47,Tim van der Meij,"Merge pull request #13347 from Snuffleupagus/preEvaluateFont-composite-widths

Take the `W` array into account when computing the hash, in `PartialEvaluator.preEvaluateFont`, for composite fonts (issue 13343)",True
8a1cb82aeedb7a2c3c2b3b8238c35dd22c1aefb2,2021-05-08 00:53:44,Jonas Jenwald,"Ensure that the `Widths` array is parsed correctly in `PartialEvaluator.preEvaluateFont`

*Please note:* While I don't have a document that this patches fixes, the current code is however not entirely correct as far as I can tell.

Looking at how the `Widths` array is parsed in `PartialEvaluator.extractWidths`, it's clear that the implementation in `PartialEvaluator.preEvaluateFont` is a bit too simplistic. In particular, by only wrapping the data into a TypedArray, there's no attempt to handle *indirect* objects which could potentially lead to colliding `hash`es being computed.",False
30b2739adf518e07694e66b6d39d4b90576fc7b7,2021-05-08 00:52:37,Jonas Jenwald,"Ensure that composite/non-composite fonts won't get the same `hash` in `PartialEvaluator.preEvaluateFont`

To hopefully help prevent any future bugs, make sure that composite/non-composite fonts cannot accidentally get matching `hash`es. Given the differences between those font types, that's very unlikely to be useful or even correct in general.",False
fc59a5f709d8ebaecffc82fb6719ac074c1ebde1,2021-05-08 00:52:36,Jonas Jenwald,"Take the `W` array into account when computing the hash, in `PartialEvaluator.preEvaluateFont`, for composite fonts (issue 13343)

Without this some *composite* fonts may incorrectly end up with matching `hash`es, thus breaking rendering since we'll not actually try to load/parse some of the fonts.

*Please note:* Given that the document, in the referenced issue, doesn't embed *any* of its fonts there's no guarantee that it renders correctly in all configurations even with this patch.",False
a2652bafd91db17ad30a70bb1be703666efdea49,2021-05-08 00:46:24,Tim van der Meij,"Merge pull request #13350 from calixteman/xfa_options

Add option enableXfa to the viewer",True
a3632c0f38d05d2f8bb59f0b093209432e08c3a9,2021-05-08 00:32:46,Tim van der Meij,"Merge pull request #13344 from Snuffleupagus/evaluator-no-var

Enable the `no-var` rule in the `src/core/evaluator.js` file",True
5248d0a77d69c8c19044149a21fcf20a83d2f829,2021-05-08 00:29:58,Tim van der Meij,"Merge pull request #13338 from Snuffleupagus/images-class

Convert the `src/core/{jbig2, jpg, jpx}.js` files to use standard classes",True
07395f8dc0e5635323986ca6e9f969bfefd67654,2021-05-08 00:16:53,Tim van der Meij,"Merge pull request #13352 from mozilla/dependabot/npm_and_yarn/hosted-git-info-2.8.9

Bump hosted-git-info from 2.6.0 to 2.8.9",True
f66829e5eadba83cef728313022aa7850567bd6e,2021-05-08 00:16:08,Tim van der Meij,"Merge pull request #13341 from Snuffleupagus/FontRendererFactory-rm-closure

Remove unnecessary closure in the `src/core/font_renderer.js` file",True
83aa847e2197882beb1b7b02958659cbd78f783b,2021-05-08 00:13:06,dependabot[bot],"Bump hosted-git-info from 2.6.0 to 2.8.9

Bumps [hosted-git-info](https://github.com/npm/hosted-git-info) from 2.6.0 to 2.8.9.
- [Release notes](https://github.com/npm/hosted-git-info/releases)
- [Changelog](https://github.com/npm/hosted-git-info/blob/v2.8.9/CHANGELOG.md)
- [Commits](https://github.com/npm/hosted-git-info/compare/v2.6.0...v2.8.9)

Signed-off-by: dependabot[bot] <support@github.com>",False
2ce25bb7885003f7c095717ce87def8812b30669,2021-05-08 00:11:41,Tim van der Meij,"Merge pull request #13349 from mozilla/dependabot/npm_and_yarn/lodash-4.17.21

Bump lodash from 4.17.19 to 4.17.21",True
a0a4cd3f8a0f5d56040467f0e162a4e27dbac78b,2021-05-07 18:22:51,Calixte Denizet,Add option enableXfa to the viewer,False
e36134144955a88fa698c6e1e11c78fdaf08af9d,2021-05-07 16:24:18,dependabot[bot],"Bump lodash from 4.17.19 to 4.17.21

Bumps [lodash](https://github.com/lodash/lodash) from 4.17.19 to 4.17.21.
- [Release notes](https://github.com/lodash/lodash/releases)
- [Commits](https://github.com/lodash/lodash/compare/4.17.19...4.17.21)

Signed-off-by: dependabot[bot] <support@github.com>",False
af125cd2995c4cac1a80e4720e685d85699d1d3b,2021-05-06 14:45:38,Calixte Denizet,"JS - Add support for display property
  - in annotation_layer, move common properties treatment in a common method instead having duplicated code in each widget.",False
0ef9b5aafc88094f19fec793c174c622e7e15542,2021-05-06 13:51:05,Jonas Jenwald,"Fix the remaining `no-var` failures, which couldn't be handled automatically, in the `src/core/evaluator.js` file

The only *slight* complication here were some of the `switch`-cases, in `getOperatorList`/`getTextContent`, where the parsing is done asynchronously.
However, those cases are easy to deal with by wrapping the code within its own block; please see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch#block-scope_variables_within_switch_statements",False
f93c3b9aa7fb2c6afaab1cb67cb5d89a68282e43,2021-05-06 13:09:21,Jonas Jenwald,"Enable the `no-var` rule in the `src/core/evaluator.js` file

These changes were made automatically, using `gulp lint --fix`.",False
0a32ad3e4230bf82bdf4316c044a9feb2332df28,2021-05-06 02:05:52,Jonas Jenwald,"Remove unnecessary closure in the `src/core/font_renderer.js` file

With modern JavaScript modules, where you explicitly list the properties that should be exported, it's no longer necessary to wrap *all* of the code within one file into a top-level closure.[1]

This patch reduces the size, of even the *built* `pdf.worker.js` file, since there's now a lot less unnecessary whitespace.

---
[1] For files which contain *different* functionality, some closures may however still make sense in order to separate the code.
It might be possible to remove some of those cases later, e.g. once private class fields becomes generally available/usable in browsers.",False
afb8c4fd25acf3a95828ed80ee3a904e07afd645,2021-05-05 23:46:24,Tim van der Meij,"Merge pull request #13327 from Snuffleupagus/split-fonts

Split the functionality in `src/core/fonts.js` into multiple files, and use standard classes",True
2d24962bf7f30f99f6bb688eb6c71309c468b5e9,2021-05-05 23:34:42,Tim van der Meij,"Merge pull request #13339 from Snuffleupagus/textLayer-rm-closure

Remove unnecessary closure in `src/display/text_layer.js`, and use standard classes",True
c110618a8dfb5c259d79cbb6d72a821804feaa48,2021-05-05 23:29:12,Tim van der Meij,"Merge pull request #13340 from calixteman/fix_integration_test1

Fix integration test in the windows bot",True
451091b89babd933f03fb1d02d7069a7b14ed677,2021-05-05 22:35:08,Calixte Denizet,Fix integration test in the windows bot,False
9a1758c6b88dbcee14d95d5b9da5e915fe933f8d,2021-05-05 22:14:56,Jonas Jenwald,"Remove unnecessary closure in `src/display/text_layer.js`, and use standard classes

With modern JavaScript modules, where you explicitly list the properties that should be exported, it's no longer necessary to wrap all of the code in a closure.[1]

This patch also tries to clean-up/improve a couple of the existing JSDoc-comments.

---
[1] This reduces the size, even of the *built* `pdf.js` file, since there's now a lot less unnecessary whitespace.",False
ce14171cf0b8a08b9e6f44bb22293712cd5f8684,2021-05-05 17:32:21,Jonas Jenwald,"Convert `src/core/jpx.js` to use standard classes

*Please note:* Ignoring whitespace-only changes is probably necessary in order to review this.",False
cb65b762ebe4c8c8628bf34d1fc6fbe0b032ce33,2021-05-05 17:32:21,Jonas Jenwald,"Fix the remaining `no-var` failures, which couldn't be handled automatically, in the `src/core/jpx.js` file",False
a273599a126752948f7f2b1942b9a8f50cc95c68,2021-05-05 17:32:21,Jonas Jenwald,"Enable the `no-var` rule in the `src/core/jpx.js` file

These changes were made automatically, using `gulp lint --fix`.",False
69dea39a42463d4fac4235853ce781f82f2fe23b,2021-05-05 17:32:21,Jonas Jenwald,"Convert `src/core/jpg.js` to use standard classes

*Please note:* Ignoring whitespace-only changes is probably necessary in order to review this.",False
d0a299713cb2523f365b40723571b77d3ea96029,2021-05-05 17:32:21,Jonas Jenwald,"Fix the remaining `no-var` failures, which couldn't be handled automatically, in the `src/core/jpg.js` file",False
1e5a17960011750b5caf32dd0147194a7d444442,2021-05-05 17:32:21,Jonas Jenwald,"Enable the `no-var` rule in the `src/core/jpg.js` file

These changes were made automatically, using `gulp lint --fix`.",False
0addf3a0d4bd77f0db5c865c2ad5c515f193a04d,2021-05-05 17:32:21,Jonas Jenwald,"Convert `src/core/jbig2.js` to use standard classes

*Please note:* Ignoring whitespace-only changes is probably necessary in order to review this.",False
d59c9ab3abedc4c032a3702a8756698a7cbbeeff,2021-05-05 17:32:21,Jonas Jenwald,"Fix the remaining `no-var` failures, which couldn't be handled automatically, in the `src/core/jbig2.js` file",False
7ca3a34e1f5d01beb0d58925844544beb1720ab9,2021-05-05 17:32:21,Jonas Jenwald,"Enable the `no-var` rule in the `src/core/jbig2.js` file

These changes were made automatically, using `gulp lint --fix`.",False
52961197d3163a01f9cfd11ce470b781416edec8,2021-05-05 17:28:21,calixteman,"Merge pull request #13337 from Snuffleupagus/PredictorStream-super

[Regression] Move the `super`-call in the `PredictorStream`-constructor to prevent errors (PR 13303)",True
99fae47c8e6dc5d2a97291c0cb77a6047f8c81e8,2021-05-05 16:54:12,Jonas Jenwald,"[Regression] Move the `super`-call in the `PredictorStream`-constructor to prevent errors (PR 13303)

*My apologies for breaking this; thankfully PR 13303 hasn't reach mozilla-central yet.*

It's (obviously) necessary to initialize a `PredictorStream`-instance fully, since otherwise breakage may occur if there's errors during the actual stream parsing.
To reproduce this issue, try opening the PDF document from issue 13051 locally and observe the following message in the console:
```
Warning: Invalid stream: ""ReferenceError: this hasn't been initialised - super() hasn't been called""
```",False
a00913aeb23b170baf780ed7bca0e82c23b9f589,2021-05-05 13:11:09,calixteman,"Merge pull request #13333 from Snuffleupagus/debugger-no-var

[web/debugger.js] Enable the ESLint `no-var` rule",True
226a049d54e247df79c831f4bfe17376866a25ec,2021-05-05 07:10:59,Brendan Dahl,"Merge pull request #13274 from calixteman/issue13269

[JS] Fix several issues found in pdf in #13269",True
3f29892d63fb0fe438c80b67e5173cd9d0d70150,2021-05-04 22:51:51,Calixte Denizet,"[JS] Fix several issues found in pdf in #13269
  - app.alert and few other function can use an object as parameter ({cMsg: ...});
  - support app.alert with a question and a yes/no answer;
  - update field siblings when one is changed in an action;
  - stop calculation if calculate is set to false in the middle of calculations;
  - get a boolean for checkboxes when they've been set through annotationStorage instead of a string.",False
d99bc5091c13bb82ef72219de1c91c10e0b1ad34,2021-05-04 19:59:11,Jonas Jenwald,"[web/debugger.js] Enable the ESLint `no-var` rule

These changes were made *mostly* automatically, using `gulp lint --fix`, with the following manual changes:

```diff
diff --git a/web/debugger.js b/web/debugger.js
index 1cda4066e..6f8b4a9f0 100644
--- a/web/debugger.js
+++ b/web/debugger.js
@@ -264,10 +264,9 @@ const Stepper = (function StepperClosure() {
     }
     if (""length"" in args) {
       // array
-      let simpleArgs = [],
-        i,
-        ii;
-      const MAX_ITEMS = 10;
+      const MAX_ITEMS = 10,
+        simpleArgs = [];
+      let i, ii;
       for (i = 0, ii = Math.min(MAX_ITEMS, args.length); i < ii; i++) {
         simpleArgs.push(simplifyArgs(args[i]));
       }
@@ -511,11 +510,8 @@ window.PDFBug = (function PDFBugClosure() {
   return {
     tools: [FontInspector, StepperManager, Stats],
     enable(ids) {
-      let all = false,
-        tools = this.tools;
-      if (ids.length === 1 && ids[0] === ""all"") {
-        all = true;
-      }
+      const all = ids.length === 1 && ids[0] === ""all"";
+      const tools = this.tools;
       for (let i = 0; i < tools.length; ++i) {
         const tool = tools[i];
         if (all || ids.includes(tool.id)) {
```",False
82afa8ccf017e1205e56ce1d991b31590968691f,2021-05-04 19:55:20,Jonas Jenwald,"[web/debugger.js] Convert the `Stepper` to a standard class

Also, removes a couple of unnecessary local variables in the `Stepper.breakIt` method.

Finally, this patch also disables the ESLint `no-var` rule, in preparation for the next patch, for a couple of data-structures that need to remain globally available.",False
3f187c2c6d25b18887f5442dc706b67a4651599c,2021-05-03 19:55:58,calixteman,"Merge pull request #13319 from calixteman/js_page

JS -- add support for page property in field",True
549aae6c3dbb1c351c28812f62aeff8d1a934a05,2021-05-03 19:16:29,Calixte Denizet,JS -- add support for page property in field,False
5e5daca407e42562c08fba62364f1593c697c9e7,2021-05-03 17:27:30,Jonas Jenwald,"Remove unnecessary `MissingDataException` check from `getHeaderBlock`

It shouldn't be possible for the `getBytes`-call to throw a `MissingDataException`, since all resources are loaded *before* e.g. font-parsing ever starts; see https://github.com/mozilla/pdf.js/blob/f0817015bd0b5b3dd498427df85c564e9eb08603/src/core/object_loader.js#L111-L126

Furthermore, even if we'd *somehow* re-throw a `MissingDataException` here that still won't help considering where the `Type1Font`-instance is created. Note how in the `Font`-constructor we simply catch any errors and fallback to a standard font, which means that a `MissingDataException` would just lead to rendering errors anyway; see https://github.com/mozilla/pdf.js/blob/f0817015bd0b5b3dd498427df85c564e9eb08603/src/core/fonts.js#L648-L691

All-in-all, it's not possible for a `MissingDataException` to be thrown in `getHeaderBlock` and this code-path can thus be removed.",False
b487edd05daf056bea58f0a064c25f335f0a1452,2021-05-03 17:27:25,Jonas Jenwald,"Convert `src/core/fonts.js` to use standard classes

Obviously the `Font`-class is still *very* large, given particularly how TrueType fonts are handled, however this patch-series at least improves things by moving a number of functions/classes into their own files.
As a follow-up it might make sense to try and re-factor/extract the TrueType parsing into its own file, since all of this code is quite old, however that's probably best left for another time.

For e.g. `gulp mozcentral`, the *built* `pdf.worker.js` files decreases from `1 620 332` to `1 617 466` bytes with this patch-series.",False
cadc20d8b98e753f014999cb2627eee1b513f5a3,2021-05-03 00:30:29,Jonas Jenwald,"Fix the remaining `no-var` failures, which couldn't be handled automatically, in the `src/core/fonts.js` file",False
b9cd080c01775965601ff79404625f7858498199,2021-05-03 00:30:29,Jonas Jenwald,"Enable the `no-var` rule in the `src/core/fonts.js` file

These changes were made automatically, using `gulp lint --fix`.
Given the large size of this patch, the manual fixes are done separately in the next commit.",False
f64b7922b359df6e0643d5a93fe9d684d8d03b3a,2021-05-03 00:30:29,Jonas Jenwald,Convert `src/core/type1_font.js` to use standard classes,False
4bd69556abcc9b9e61b25756ab38f53c29c38922,2021-05-03 00:30:29,Jonas Jenwald,"Enable the `no-var` rule in the `src/core/type1_font.js` file

These changes were made *mostly* automatically, using `gulp lint --fix`, with the following manual changes:

```diff
diff --git a/src/core/type1_font.js b/src/core/type1_font.js
index 50a3e49e6..55a2005fb 100644
--- a/src/core/type1_font.js
+++ b/src/core/type1_font.js
@@ -38,10 +38,9 @@ const Type1Font = (function Type1FontClosure() {
     const scanLength = streamBytesLength - signatureLength;

     let i = startIndex,
-      j,
       found = false;
     while (i < scanLength) {
-      j = 0;
+      let j = 0;
       while (j < signatureLength && streamBytes[i + j] === signature[j]) {
         j++;
       }
@@ -248,14 +247,14 @@ const Type1Font = (function Type1FontClosure() {
         return charCodeToGlyphId;
       }

-      let glyphNames = ["".notdef""],
-        glyphId;
+      const glyphNames = ["".notdef""];
+      let builtInEncoding, glyphId;
       for (glyphId = 0; glyphId < charstrings.length; glyphId++) {
         glyphNames.push(charstrings[glyphId].glyphName);
       }
       const encoding = properties.builtInEncoding;
       if (encoding) {
-        var builtInEncoding = Object.create(null);
+        builtInEncoding = Object.create(null);
         for (const charCode in encoding) {
           glyphId = glyphNames.indexOf(encoding[charCode]);
           if (glyphId >= 0
```",False
ff85bcfc0ed67c776f76aa4f2ff66118160873ba,2021-05-03 00:30:29,Jonas Jenwald,Move the `Type1Font` from `src/core/fonts.js` and into its own file,False
e803584fe7aef105fd0c137742825f070134a84b,2021-05-03 00:30:29,Jonas Jenwald,Convert `src/core/cff_font.js` to use standard classes,False
542ee0d7984d1737203182b96f566733f88439f2,2021-05-03 00:30:29,Jonas Jenwald,"Enable the `no-var` rule in the ` src/core/cff_font.js` file

These changes were made automatically, using `gulp lint --fix`.",False
d5d73e31685d034921b4d1c7f229660a43033902,2021-05-03 00:30:29,Jonas Jenwald,Move the `CFFFont` from `src/core/fonts.js` and into its own file,False
d4606712f2fcdd79e2f1dc874537c3f36cb5ccbc,2021-05-03 00:30:29,Jonas Jenwald,"Enable the no-var rule in the `src/core/fonts_utils.js` file

These changes were made *mostly* automatically, using `gulp lint --fix`, with the following manual changes:

```diff
diff --git a/src/core/fonts_utils.js b/src/core/fonts_utils.js
index f88ce4a8c..c4b3f3808 100644
--- a/src/core/fonts_utils.js
+++ b/src/core/fonts_utils.js
@@ -167,8 +167,8 @@ function type1FontGlyphMapping(properties, builtInEncoding,
glyphNames) {
   }

   // Lastly, merge in the differences.
-  let differences = properties.differences,
-    glyphsUnicodeMap;
+  const differences = properties.differences;
+  let glyphsUnicodeMap;
   if (differences) {
     for (charCode in differences) {
       const glyphName = differences[charCode];
```",False
77b258440b9a6b65f1477fbf151cb4edb28514a4,2021-05-03 00:30:29,Jonas Jenwald,"Move some constants and helper functions `from src/core/fonts.js` and into their own file

 - `FontFlags`, is used in both `src/core/fonts.js` and `src/core/evaluator.js`.
 - `getFontType`, same as the above.
 - `MacStandardGlyphOrdering`, is a fairly large data-structure and `src/core/fonts.js` is already a *very* large file.
 - `recoverGlyphName`, a dependency of `type1FontGlyphMapping`; please see below.
 - `SEAC_ANALYSIS_ENABLED`, is used by both `Type1Font`, `CFFFont`, and unit-tests; please see below.
 - `type1FontGlyphMapping`, is used by both `Type1Font` and `CFFFont` which a later patch will move to their own files.",False
22539b52fa2ac1afe7a341455d2bb6bbf0ac3365,2021-05-03 00:30:29,Jonas Jenwald,Convert `src/core/to_unicode_map.js` to use standard classes,False
33ea6b1131fecf1fab7889c1b724fdb644ee9e5a,2021-05-03 00:30:29,Jonas Jenwald,"Enable the `no-var` rule in the `src/core/to_unicode_map.js` file

These changes were made automatically, using `gulp lint --fix`.",False
6912bb5e0acf4bc1239075af0151b64c68e01ee8,2021-05-03 00:30:29,Jonas Jenwald,Move the `IdentityToUnicodeMap`/`ToUnicodeMap` from `src/core/fonts.js` and into its own file,False
8c1d1a58f7b8dacfea5fc77a50183b1a7868c0ff,2021-05-03 00:30:28,Jonas Jenwald,Convert `src/core/opentype_file_builder.js` to use standard classes,False
1808b2dc96cc09af035e38ef3273c914b499f66f,2021-05-03 00:30:28,Jonas Jenwald,"Enable the `no-var` rule in the `src/core/opentype_file_builder.js` file

These changes were made automatically, using `gulp lint --fix`.",False
a783c7ca79956af848724de922a31f72ea18bcbe,2021-05-03 00:30:28,Jonas Jenwald,Move the `OpenTypeFileBuilder` from `src/core/fonts.js` and into its own file,False
f0817015bd0b5b3dd498427df85c564e9eb08603,2021-05-03 00:05:59,Tim van der Meij,"Merge pull request #13324 from Snuffleupagus/textLayer-br-style

Fix highlighting of search results when the `textLayer` contains `br`-elements (PR 13257 follow-up, issue 13323)",True
883ce5d12044a40ea7dd649d8d8c34fad44a7cea,2021-05-02 19:06:01,Jonas Jenwald,"Fix highlighting of search results when the `textLayer` contains `br`-elements (PR 13257 follow-up, issue 13323)

Apparently we need to layout `br`-elements in the same *exact* way as the regular `span`-elements which contain the text-content.",False
af9feb1307c51deba9cd4a369286f4d300919932,2021-05-02 17:15:33,Tim van der Meij,"Merge pull request #13321 from timvandermeij/src-core-no-var

Enable the `no-var` linting rule in `src/core/{crypto,function}.js`",True
b661cf2b8035dc398f8aa3d9635b5c492f7dafd0,2021-05-02 17:02:34,Tim van der Meij,"Fix `no-var` linting rule violations in `src/core/crypto.js` that couldn't be changed automatically by ESLint

This is done in a separate commit due to the required number of changes
so that reviewing is easier than in a plain-text diff in the commit
message.",False
404c2b0cb23923d65310faf2fb58886e92615491,2021-05-02 17:01:10,Tim van der Meij,"Merge pull request #13320 from Snuffleupagus/BaseStream-getString

Add a new `BaseStream.getString(...)` method to replace manual `bytesToString(BaseStream.getBytes(...))` calls",True
92b9bdc19f0d5b1ef17f52f0c4628428cc4798a2,2021-05-02 16:58:27,Tim van der Meij,"Merge pull request #13322 from Snuffleupagus/update-packages

Update packages and translations",True
809cb1de4d287614facb78da51171166fa062405,2021-05-02 13:08:15,Jonas Jenwald,Update l10n files,False
01e01e6389010f35223c07fe58d3dc7e3a5258f8,2021-05-02 13:01:44,Jonas Jenwald,Update the `eslint-plugin-unicorn` package to the latest version,False
d1a18e84ea864bcb356f375e5d264518e20dc288,2021-05-02 13:00:09,Jonas Jenwald,Update npm packages,False
1f8b4523540dd4670944c46bfed42a7b158f2da6,2021-05-02 00:04:35,Tim van der Meij,"Enable the `no-var` linting rule in `src/core/crypto.js`

This is done automatically with `gulp lint --fix`.",False
58e568fe624896c80804a1320c22c916864d2513,2021-05-01 23:34:58,Tim van der Meij,"Enable the `no-var` linting rule in `src/core/function.js`

This is done automatically with `gulp lint --fix` and the following
manual changes:

```diff
diff --git a/src/core/function.js b/src/core/function.js
index 878001057..b7e3e6ccf 100644
--- a/src/core/function.js
+++ b/src/core/function.js
@@ -131,7 +131,7 @@ function toNumberArray(arr) {
   return arr;
 }

-var PDFFunction = (function PDFFunctionClosure() {
+const PDFFunction = (function PDFFunctionClosure() {
   const CONSTRUCT_SAMPLED = 0;
   const CONSTRUCT_INTERPOLATED = 2;
   const CONSTRUCT_STICHED = 3;
@@ -484,7 +484,9 @@ var PDFFunction = (function PDFFunctionClosure() {
         // clip to domain
         const v = clip(src[srcOffset], domain[0], domain[1]);
         // calculate which bound the value is in
-        for (var i = 0, ii = bounds.length; i < ii; ++i) {
+        const length = bounds.length;
+        let i;
+        for (i = 0; i < length; ++i) {
           if (v < bounds[i]) {
             break;
           }
@@ -673,23 +675,21 @@ const PostScriptStack = (function PostScriptStackClosure() {
     roll(n, p) {
       const stack = this.stack;
       const l = stack.length - n;
-      let r = stack.length - 1,
-        c = l + (p - Math.floor(p / n) * n),
-        i,
-        j,
-        t;
-      for (i = l, j = r; i < j; i++, j--) {
-        t = stack[i];
+      const r = stack.length - 1;
+      const c = l + (p - Math.floor(p / n) * n);
+
+      for (let i = l, j = r; i < j; i++, j--) {
+        const t = stack[i];
         stack[i] = stack[j];
         stack[j] = t;
       }
-      for (i = l, j = c - 1; i < j; i++, j--) {
-        t = stack[i];
+      for (let i = l, j = c - 1; i < j; i++, j--) {
+        const t = stack[i];
         stack[i] = stack[j];
         stack[j] = t;
       }
-      for (i = c, j = r; i < j; i++, j--) {
-        t = stack[i];
+      for (let i = c, j = r; i < j; i++, j--) {
+        const t = stack[i];
         stack[i] = stack[j];
         stack[j] = t;
       }
@@ -939,7 +939,7 @@ class PostScriptEvaluator {
 // We can compile most of such programs, and at the same moment, we can
 // optimize some expressions using basic math properties. Keeping track of
 // min/max values will allow us to avoid extra Math.min/Math.max calls.
-var PostScriptCompiler = (function PostScriptCompilerClosure() {
+const PostScriptCompiler = (function PostScriptCompilerClosure() {
   class AstNode {
     constructor(type) {
       this.type = type;
```",False
90b5fcb8e00e99c51d3e9d323fc37484c8bdeede,2021-05-01 22:50:36,Jonas Jenwald,"Remove unnecessary TypedArray re-initialization in `FontFaceObject.createFontFaceRule`

The `this.data` property is, when defined, sent from the worker-thread as a `Uint8Array` and there's thus no reason to re-initialize the TypedArray here.
Note also the `FontFaceObject.createNativeFontFace` method just above, where we simply use `this.data` as-is.

The explanation for this code looking like it does is, as is often the case, for historical reasons. Originally we only supported `@font-face`, before the Font Loading API existed, and back then we also polyfilled TypedArrays (using regular Arrays) which should explain this particular line of code.",False
3624f9eac7bc9a2508d20c3e8ceafe972090425b,2021-05-01 22:50:36,Jonas Jenwald,"Add a new `BaseStream.getString(...)` method to replace manual `bytesToString(BaseStream.getBytes(...))` calls

Given that the `bytesToString(BaseStream.getBytes(...))` pattern is somewhat common throughout the `src/core/` code, it cannot hurt to add a new `BaseStream`-method which handles that case internally.",False
f6f335173d9b162120484db82c53c00b20697d4a,2021-05-01 22:43:36,Tim van der Meij,"Merge pull request #13303 from Snuffleupagus/BaseStream

Add an abstract base-class, which all the various Stream implementations inherit from",True
af4dc55019efd82cdb002dc25901d6d113406ebe,2021-04-30 18:11:13,calixteman,"[api-minor] Fix the way to chunk the strings (#13257)

- Improve chunking in order to fix some bugs where the spaces aren't here:
    * track the last position where a glyph has been drawn;
    * when a new glyph (first glyph in a chunk) is added then compare its position with the last saved one and add a space or break:
      - there are multiple ways to move the glyphs and to avoid to have to deal with all the different possibilities it's a way easier to just compare positions;
      - and so there is now one function (i.e. ""compareWithLastPosition"") where all the job is done.
  - Add some breaks in order to get lines;
  - Remove the multiple whites spaces:
    * some spaces were filled with several whites spaces and so it makes harder to find some sequences of words using the search tool;
    * other pdf readers replace spaces by one white space.

Update src/core/evaluator.js

Co-authored-by: Jonas Jenwald <jonas.jenwald@gmail.com>

Co-authored-by: Jonas Jenwald <jonas.jenwald@gmail.com>",False
e6fcb1e70bff3109c44d42bdaac937d4a4f32a9a,2021-04-30 00:34:20,Brendan Dahl,"Merge pull request #13310 from Snuffleupagus/structTree-canvas-check

Don't try to insert a structTree in a removed page (PR 13171 follow-up)",True
2067bccf09b8a82a943b9fdfa7df95f294f0ba1b,2021-04-29 22:00:56,Brendan Dahl,"Merge pull request #13314 from brendandahl/color-theme

For mozcentral use Firefox color theme instead of system theme.",True
2c713f9cb50f07151ee87316d143722870fb8938,2021-04-29 03:33:45,Brendan Dahl,"For mozcentral use Firefox color theme instead of system theme.

See: https://bugzilla.mozilla.org/show_bug.cgi?id=1701691",False
4d36659c38c7e66c3bb1249e4e9555a4a2d0ca54,2021-04-28 18:15:56,Jonas Jenwald,"Don't try to insert a structTree in a removed page (PR 13171 follow-up)

Given that both the textLayer rendering *and* the structTree parsing is asynchronous, it's possible that we'll attempt to insert the structTree in a removed page. While there's thankfully no outright breakage caused by this, it will nonetheless lead to errors being printed in the console and we should obviously avoid this.

To reproduce this bug (without the patch), open http://localhost:8888/web/viewer.html?file=/test/pdfs/pdf.pdf#disableStream=true&disableAutoFetch=true and scroll *very quickly* through the document and notice the following error being (intermittently) printed in the console:
```
Uncaught (in promise) TypeError: can't access property ""appendChild"", this.canvas is undefined
```",False
2ac4ad3111fb8a328d1d2fca1f75fb918c569f97,2021-04-28 17:35:25,Jonas Jenwald,"Let `ChunkedStream` extend `Stream`, rather than `BaseStream` directly

Looking at the `ChunkedStream` implementation, it's basically a ""regular"" `Stream` but with added functionality in order to deal with fetching/loading of missing data.
Hence, by letting `ChunkedStream` extend `Stream`, we can remove some duplicate methods from the `ChunkedStream` class.",False
fb0775525e62c0bc46bc2eea03f1df129b5ed1f9,2021-04-28 17:14:47,Jonas Jenwald,"Stop special-casing the `dict` parameter in the `Jbig2Stream`/`JpegStream`/`JpxStream` constructors

For all of the other `DecodeStream`s we're not passing in a `Dict`-instance manually, but instead get it from the `stream`-parameter. Hence there's no particularly good reason, as far as I can tell, to not do the same thing in `Jbig2Stream`/`JpegStream`/`JpxStream` as well.",False
67a1cfc1b11563ac7ac574865be9bfe3ab180b6c,2021-04-28 17:14:47,Jonas Jenwald,"Improve the handling `getBaseStreams`, on the various Stream implementations

The way that `getBaseStreams` is currently handled has bothered me from time to time, especially how we're checking if the method exists before calling it.
By adding a dummy `BaseStream.getBaseStreams` method, and having the call-sites simply check the return value, we can improve some of the relevant code.

Note in particular how the `ObjectLoader._walk` method didn't actually check that the data in question is a Stream instance, and instead only checked the `currentNode` (which could be anything) for the existence of a `getBaseStreams` property.",False
67415bfabe02bf34f2819131aa3df30dfa81f2a9,2021-04-28 17:14:45,Jonas Jenwald,"Add an abstract base-class, which all the various Stream implementations inherit from

By having an abstract base-class, it becomes a lot clearer exactly which methods/getters are expected to exist on all Stream instances.
Furthermore, since a number of the methods are *identical* for all Stream implementations, this reduces unnecessary code duplication in the `Stream`, `DecodeStream`, and `ChunkedStream` classes.

For e.g. `gulp mozcentral`, the *built* `pdf.worker.js` files decreases from `1 619 329` to `1 616 115` bytes with this patch-series.",False
6151b4ecac955471dd7e48cbb01f758b12b2b9dc,2021-04-28 17:14:10,Jonas Jenwald,Convert `src/core/stream.js` to use standard classes,False
29cf415a69406d082f848b868692f48af61d45b7,2021-04-28 13:46:51,Jonas Jenwald,Enable the `no-var` rule in the `src/core/stream.js` file,False
b11f012e520f1c390a6235907df7b88de3564976,2021-04-28 13:46:51,Jonas Jenwald,Convert `src/core/decode_stream.js` to use standard classes,False
8ce2cae4a7f0a85af93cc27a9d61928f1255a6fb,2021-04-28 13:46:51,Jonas Jenwald,Enable the `no-var` rule in the `src/core/decode_stream.js` file,False
30a22a168d8876d8653df878c435fbb189fd7c66,2021-04-28 13:46:51,Jonas Jenwald,Move the `DecodeStream` and `StreamsSequenceStream` from `src/core/stream.js` and into its own file,False
213e1c389c72fda3b56f80b0f4643341087c8d03,2021-04-28 13:46:51,Jonas Jenwald,Convert `src/core/flate_stream.js` to use standard classes,False
aa1deaf93c6073dfabcdf19241844377406e8d97,2021-04-28 13:46:51,Jonas Jenwald,Enable the `no-var` rule in the `src/core/flate_stream.js` file,False
1e5bf352a5be1d2ba0c689643ca8f397b07611ff,2021-04-28 13:46:51,Jonas Jenwald,Move the `FlateStream` from `src/core/stream.js` and into its own file,False
40c342ec6cf28c4e544cc4d4b3452a2354cdf38b,2021-04-28 13:46:51,Jonas Jenwald,Convert `src/core/predictor_stream.js` to use standard classes,False
b08f9a818281a03d635b594ca9432a35821c2c5c,2021-04-28 13:46:51,Jonas Jenwald,Enable the `no-var` rule in the `src/core/predictor_stream.js` file,False
66d9d83dcb00a6297401b05319f7f01b39a4606f,2021-04-28 13:46:51,Jonas Jenwald,Move the `PredictorStream` from `src/core/stream.js` and into its own file,False
e938c05edb45335c03f2516ecf48dc12aab8675c,2021-04-28 13:46:51,Jonas Jenwald,Convert `src/core/decrypt_stream.js` to use standard classes,False
a9476e7dd0a4308d338fd959aac74b0c5d9b4996,2021-04-28 13:46:51,Jonas Jenwald,Enable the `no-var` rule in the `src/core/decrypt_stream.js` file,False
28b0809e609b45cba1f954f5be43c5a30fb1d057,2021-04-28 13:46:51,Jonas Jenwald,Move the `DecryptStream` from `src/core/stream.js` and into its own file,False
cdb583b7644d8fec9c0b12afb37a7de4f52faed8,2021-04-28 13:46:51,Jonas Jenwald,Convert `src/core/ascii_85_stream.js` to use standard classes,False
f6c7a6520283dd7d74f85ada2a2afe001d8d864b,2021-04-28 13:46:51,Jonas Jenwald,Enable the `no-var` rule in the `src/core/ascii_85_stream.js` file,False
3294d4d5a33c9e1bcccf6743ccc87f146c85a1d3,2021-04-28 13:46:51,Jonas Jenwald,Move the `Ascii85Stream` from `src/core/stream.js` and into its own file,False
d2227a7d105a7830fa8a5561b83f5093f3ecdd02,2021-04-28 13:46:50,Jonas Jenwald,Convert `src/core/ascii_hex_stream.js` to use standard classes,False
59591f8788dac221d0d59baf8709a4ee96ce8525,2021-04-28 13:46:50,Jonas Jenwald,Enable the `no-var` rule in the ` src/core/ascii_hex_stream.js` file,False
d63df04854045c2b53ee903c57452398f92a6b15,2021-04-28 13:46:50,Jonas Jenwald,Move the `AsciiHexStream` from `src/core/stream.js` and into its own file,False
704514c7cd3a216f02ee8708c63a470d60e1002a,2021-04-28 13:46:50,Jonas Jenwald,Convert `src/core/run_length_stream.js` to use standard classes,False
66b898eb58d5c0f7b1e3747de0a6b39de079254e,2021-04-28 13:46:50,Jonas Jenwald,Enable the `no-var` rule in the ` src/core/run_length_stream.js` file,False
342b0c1bbcfdcda300c66d9a9987b950594d45f9,2021-04-28 13:46:50,Jonas Jenwald,Move the `RunLengthStream` from `src/core/stream.js` and into its own file,False
1f0685cee6450f2b5c7a438e6d7c87f07655fbb5,2021-04-28 13:46:50,Jonas Jenwald,Convert `src/core/lzw_stream.js` to use standard classes,False
1f9b134c6a628197fec3a0d738ac5c288db35f63,2021-04-28 13:46:50,Jonas Jenwald,Enable the `no-var` rule in the `src/core/src/core/lzw_stream.js` file,False
6c1a321500e08ec2917a2541b80fcc16ec4faa3f,2021-04-28 13:46:50,Jonas Jenwald,Move the `LZWStream` from `src/core/stream.js` and into its own file,False
d10da907dac86c103b787127110a59aed82c7aaa,2021-04-28 13:45:31,Brendan Dahl,"Fix position of highlighted all text. (#13306)

Adds a new integration test to ensure we don't
regress this again.",False
0acd801b1e66c52f6c9a5bae2486f4865277d5aa,2021-04-27 23:33:35,Tim van der Meij,"Merge pull request #13305 from timvandermeij/annotation-polygon-polyline-no-appearance-stream

Implement rendering polyline/polygon annotations without appearance stream",True
fae183b7cc1b80829716034d4f09cdedb137869b,2021-04-27 23:07:09,Tim van der Meij,"Merge pull request #13304 from Snuffleupagus/src-core-classes

Convert more code in `src/core/` to use standard classes",True
60ab15427f5318b6dad14dbbec3f1cf7b91bc1cd,2021-04-27 22:32:20,Tim van der Meij,Implement rendering polyline/polygon annotations without appearance stream,False
0ecb42f4d732a78b60d0a0e8b363a18d97563052,2021-04-27 16:59:09,Jonas Jenwald,Convert `src/core/jpx_stream.js` to use standard classes,False
c51ef1f21f8dc703b5a39f203cf76ed50db1887f,2021-04-27 16:59:09,Jonas Jenwald,Convert `src/core/jbig2_stream.js` to use standard classes,False
d9c1bf96b677fb87cf0d0225fb908acdf7a1a5a0,2021-04-27 16:59:09,Jonas Jenwald,Convert `src/core/jpeg_stream.js` to use standard classes,False
0ca63f94b495034a1ca9a2aa5b69d3273cc90afd,2021-04-27 16:59:09,Jonas Jenwald,Convert `src/core/ccitt_stream.js` to use standard classes,False
8ff213871b5fafa58aee2a0539c97b57725ad77f,2021-04-27 16:59:09,Jonas Jenwald,"Convert `src/core/ccitt.js` to use standard classes

Given that we're using modules, meaning that only explicitly `export`ed things are visible to the outside, it's no longer necessary to wrap all of the code in a closure.",False
ca668587c6c92d13427a03bb059f70a59bbdd277,2021-04-27 16:49:36,Tim van der Meij,"Merge pull request #13300 from Snuffleupagus/canvas-class

Convert the code in `src/display/canvas.js` to use standard classes",True
6f4394fcd82e0409e9c9cf9b3824d90699391845,2021-04-27 15:19:03,Jonas Jenwald,"Support `InkAnnotation`s without appearance streams (issue 13298) (#13301)

For now, we keep things purposely simple by using straight lines (rather than curves); please see https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#G11.2096579",False
e6601f45827e27937c5139a51ea6bfda7277d78b,2021-04-27 01:40:38,Jonas Jenwald,"Convert the code in `src/display/canvas.js` to use standard classes

This gets rid of *a lot* of boilerplate that stems from our old way of simulating classes, and it actually reduces the filesize noticeably.
For e.g. `gulp mozcentral`, the *built* `pdf.js` files decreases from `318 404` to `314 722` bytes (~1 percent) with this patch.",False
72be684c10bf048b2036ab72358742d3de1f7299,2021-04-25 21:14:13,Tim van der Meij,"Merge pull request #13294 from timvandermeij/src-no-var

Enable the `no-var` linting rule in `src/core/{cmap,image,worker}.js`",True
270e56dae89a2d6306e3ea78d00f8b0a4f37ae1a,2021-04-25 21:10:00,Tim van der Meij,"Enable the `no-var` linting rule in `src/core/image.js`

This is done automatically with `gulp lint --fix` and the following
manual changes:

```diff
diff --git a/src/core/image.js b/src/core/image.js
index 35c06b8ab..e718b9937 100644
--- a/src/core/image.js
+++ b/src/core/image.js
@@ -97,7 +97,7 @@ class PDFImage {
     if (isName(filter)) {
       switch (filter.name) {
         case ""JPXDecode"":
-          var jpxImage = new JpxImage();
+          const jpxImage = new JpxImage();
           jpxImage.parseImageProperties(image.stream);
           image.stream.reset();
```",False
16efd09c9fcfb476bdeeec4f0917bd9cd5c88592,2021-04-25 21:10:00,Tim van der Meij,"Enable the `no-var` linting rule in `src/core/worker.js`

This is done automatically with `gulp lint --fix` and the following
manual changes:

```diff
diff --git a/src/core/worker.js b/src/core/worker.js
index aec9c1d39..f88691622 100644
--- a/src/core/worker.js
+++ b/src/core/worker.js
@@ -300,7 +300,7 @@ class WorkerMessageHandler {
         cachedChunks = [];
       };
       const readPromise = new Promise(function (resolve, reject) {
-        var readChunk = function ({ value, done }) {
+        const readChunk = function ({ value, done }) {
           try {
             ensureNotTerminated();
             if (done) {
```",False
85659b4cf0f0f43675d585c246bdd0e0a38f3c73,2021-04-25 21:10:00,Tim van der Meij,"Enable the `no-var` linting rule in `src/core/cmap.js`

This is done automatically with `gulp lint --fix` and the following
manual changes:

```diff
diff --git a/src/core/cmap.js b/src/core/cmap.js
index 850275a19..8794726dd 100644
--- a/src/core/cmap.js
+++ b/src/core/cmap.js
@@ -519,8 +519,8 @@ const BinaryCMapReader = (function BinaryCMapReaderClosure() {

     readHexNumber(num, size) {
       let last;
-      let stack = this.tmpBuf,
-        sp = 0;
+      const stack = this.tmpBuf;
+      let sp = 0;
       do {
         const b = this.readByte();
         if (b < 0) {
@@ -603,7 +603,6 @@ const BinaryCMapReader = (function BinaryCMapReaderClosure() {

         const ucs2DataSize = 1;
         const subitemsCount = stream.readNumber();
-        var i;
         switch (type) {
           case 0: // codespacerange
             stream.readHex(start, dataSize);
@@ -614,7 +613,7 @@ const BinaryCMapReader = (function BinaryCMapReaderClosure() {
               hexToInt(start, dataSize),
               hexToInt(end, dataSize)
             );
-            for (i = 1; i < subitemsCount; i++) {
+            for (let i = 1; i < subitemsCount; i++) {
               incHex(end, dataSize);
               stream.readHexNumber(start, dataSize);
               addHex(start, end, dataSize);
@@ -633,7 +632,7 @@ const BinaryCMapReader = (function BinaryCMapReaderClosure() {
             addHex(end, start, dataSize);
             stream.readNumber(); // code
             // undefined range, skipping
-            for (i = 1; i < subitemsCount; i++) {
+            for (let i = 1; i < subitemsCount; i++) {
               incHex(end, dataSize);
               stream.readHexNumber(start, dataSize);
               addHex(start, end, dataSize);
@@ -647,7 +646,7 @@ const BinaryCMapReader = (function BinaryCMapReaderClosure() {
             stream.readHex(char, dataSize);
             code = stream.readNumber();
             cMap.mapOne(hexToInt(char, dataSize), code);
-            for (i = 1; i < subitemsCount; i++) {
+            for (let i = 1; i < subitemsCount; i++) {
               incHex(char, dataSize);
               if (!sequence) {
                 stream.readHexNumber(tmp, dataSize);
@@ -667,7 +666,7 @@ const BinaryCMapReader = (function BinaryCMapReaderClosure() {
               hexToInt(end, dataSize),
               code
             );
-            for (i = 1; i < subitemsCount; i++) {
+            for (let i = 1; i < subitemsCount; i++) {
               incHex(end, dataSize);
               if (!sequence) {
                 stream.readHexNumber(start, dataSize);
@@ -692,7 +691,7 @@ const BinaryCMapReader = (function BinaryCMapReaderClosure() {
               hexToInt(char, ucs2DataSize),
               hexToStr(charCode, dataSize)
             );
-            for (i = 1; i < subitemsCount; i++) {
+            for (let i = 1; i < subitemsCount; i++) {
               incHex(char, ucs2DataSize);
               if (!sequence) {
                 stream.readHexNumber(tmp, ucs2DataSize);
@@ -717,7 +716,7 @@ const BinaryCMapReader = (function BinaryCMapReaderClosure() {
               hexToInt(end, ucs2DataSize),
               hexToStr(charCode, dataSize)
             );
-            for (i = 1; i < subitemsCount; i++) {
+            for (let i = 1; i < subitemsCount; i++) {
               incHex(end, ucs2DataSize);
               if (!sequence) {
                 stream.readHexNumber(start, ucs2DataSize);
```",False
2e9c2ab3b89e1248ab45319f26f6fa7c20fbf66a,2021-04-25 21:08:32,Tim van der Meij,"Merge pull request #13297 from Snuffleupagus/webpack-example-minification-warning

Add a note about minification to the webpack-example README (issue 13290)",True
24aae858b9c197feb691444909f1d337541e970e,2021-04-25 20:50:57,Jonas Jenwald,"Add a note about minification to the webpack-example README (issue 13290)

Since we really don't want to let a particular Webpack-mode dictate how we can/can't write code, let's add a note in the webpack-example README about minification instead.",False
ab2428270f6d331c4c9b3c6b00e8852f43efde45,2021-04-24 23:38:51,Tim van der Meij,"Merge pull request #13291 from Snuffleupagus/rm-forEach

Replace a bunch of `Array.prototype.forEach()` cases with `for...of` loops instead",True
4078dd856c6108eb29b7774d28c5bbaee47e8b6c,2021-04-24 16:30:53,Jonas Jenwald,"Clear some Arrays, rather than re-initialize them, in `src/display/`-code

It's generally better to re-use the same Array, by clearing out all of its elements, rather than creating a new Array.",False
da22146b95dc1d7965874a57cedf4c16df56d6c6,2021-04-24 16:30:19,Jonas Jenwald,"Replace a bunch of `Array.prototype.forEach()` cases with `for...of` loops instead

Using `for...of` is a modern and generally much nicer pattern, since it gets rid of unnecessary callback-functions. (In a couple of spots, a ""regular"" `for` loop had to be used.)",False
da0e7ea96984539419b5cc38adb378e7dfd1f1fb,2021-04-24 00:38:54,Tim van der Meij,"Merge pull request #13272 from calixteman/issue13271

Update all the text widgets having the same name with the same value",True
a6e3ad4c7269e9a22fb7c6550d1c247d52d23b68,2021-04-24 00:23:52,Tim van der Meij,"Merge pull request #13283 from Snuffleupagus/NameOrNumberTree-getAll-map

Change `NameOrNumberTree.getAll` to return a `Map` rather than an Object",True
762cfd2d1bb1f8bb101a6b0f2fc6c99849fef92d,2021-04-23 15:34:14,calixteman,"[JS] Use heap allocation when initializing quickjs sandbox (#13286)

- In case of large string the sandbox initialization failed because of an OOM
    * so allocate a new string in the heap
    * and free it after use.
  - it requires a quickjs update since we need to export some symbols (stringToNewUTF8 and free).",False
4ec0a4fb430e90818bdf9eade2f45fc177f6dff3,2021-04-23 13:12:32,Jonas Jenwald,"Re-factor the `Catalog._collectJavaScript` method slightly

This patch first of all moves all checking/validation into the `appendIfJavaScriptDict` function, to avoid duplicating it in multiple places. Secondly, also removes what's now an outdated/incorrect comment since we have implemented scripting support.",False
83f7009e4b013c1d671f18ee565720f9e0a36b00,2021-04-22 16:45:50,Jonas Jenwald,"Change `NameOrNumberTree.getAll` to return a `Map` rather than an Object

Given that we're (almost) always iterating through the result of the `getAll`-calls, using a `Map` seems nicer overall since it's more suited to iteration compared to a regular Object.

Also, add a couple of `Dict`-checks in existing code touched by this patch, since it really cannot hurt to prevent *potential* errors in a corrupt PDF document.",False
57a1ea840fa7da129b61ee8b0cef85a4d2447698,2021-04-22 15:38:56,Jonas Jenwald,"Ensure that `saveDocument` works if there's no /ID-entry in the PDF document (issue 13279) (#13280)

First of all, while it should be very unlikely that the /ID-entry is an *indirect* object, note how we're using `Dict.get` when parsing it e.g. in `PDFDocument.fingerprint`. Hence we definitely should be consistent here, since if the /ID-entry is an *indirect* object the existing code in `src/core/writer.js` would already fail.
Secondly, to fix the referenced issue, we also need to check that the /ID-entry actually is an Array before attempting to access its contents in `src/core/writer.js`.

*Drive-by change:* In the `xrefInfo` object passed to the `incrementalUpdate` function, re-name the `encrypt` property to `encryptRef` since its data is fetched using `Dict.getRaw` (given the names of the other properties fetched similarly).",False
8538cdf8459e6135d961d78c8dcfb16e38a5d751,2021-04-22 15:05:16,Jonas Jenwald,"Update Puppeteer to version 9 (#13282)

* Update Puppeteer to version 9

Hopefully the updated Chromium-version might help reduce the number of intermittent test failures.

Please find additional information at https://github.com/puppeteer/puppeteer/releases/tag/v9.0.0

* Update the `eslint-plugin-sort-exports`/`eslint-plugin-unicorn""` packages to their latest versions

Both of these ESLint plugins have increased their version numbers, however `npm update` doesn't handle this automatically.

https://www.npmjs.com/package/eslint-plugin-sort-exports
https://www.npmjs.com/package/eslint-plugin-unicorn",False
2d073b91b86e42f640b6c586d07cd245c1939168,2021-04-22 00:37:44,Tim van der Meij,"Merge pull request #13263 from Snuffleupagus/font-tests-rm-done

Replace `done` callbacks in the font-tests with async/await instead",True
066cbcfb2778e0899d2e3e406cb95ca4603eaa76,2021-04-21 23:11:36,Brendan Dahl,"Merge pull request #13277 from Snuffleupagus/adjustToUnicode-cff

For CFF fonts without proper `ToUnicode`/`Encoding` data, utilize the ""charset""/""Encoding""-data from the font file to improve text-selection (issue 13260)",True
5231d922ec9d590f5e3eb0bbcbf1e715497b20c3,2021-04-21 14:17:51,Brendan Dahl,"Add presentation role to text layer spans. (#13278)

Keeps screen readers from pausing on every span so
paragraphs are read more naturally. Note: this only seems
to affect Firefox, Chrome automatically combines the spans.",False
7b8d2495cab70336858f94b40d8815617a3cc23c,2021-04-21 03:14:15,Jonas Jenwald,"Convert the font-test `ttx` helper function to use the Fetch API

By replacing `XMLHttpRequest` with a `fetch` call, the helper function can be modernized to use async/await instead.
Note that the headers doesn't seem necessary to set now, since:
 - The Fetch API provides a method for accessing the response as *text*, which renders the ""Content-type"" header unnecessary.
 - According to https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name, the ""Content-length"" header isn't necessary.",False
b0d58efb6addf27a1e238e3eb71a21c23315023c,2021-04-21 01:15:39,Tim van der Meij,"Merge pull request #13275 from Snuffleupagus/loadResources-Properties

Ensure that the /Properties, used with optional content, is actually loaded *before* parsing the operatorList/textContent (PR 12095 follow-up)",True
7fab73ed23b687187301c74475894fa13f253910,2021-04-21 00:18:44,Jonas Jenwald,"For CFF fonts without proper `ToUnicode`/`Encoding` data, utilize the ""charset""/""Encoding""-data from the font file to improve text-selection (issue 13260)

This patch extends the approach, implemented in PR 7550, to also apply to CFF fonts.",False
8f6543c218efd11677702ff978eda8a041201fd0,2021-04-20 23:52:44,Jonas Jenwald,"Ensure that the /Properties, used with optional content, is actually loaded *before* parsing the operatorList/textContent (PR 12095 follow-up)

By not waiting for the /Properties to load, before parsing of the operatorList/textContent starts, there's a very real risk that a `MissingDataException` will be thrown when trying to access the data in the `PartialEvaluator.parseMarkedContentProps` method.
If this ever happens it will thus lead to incomplete and/or outright broken rendering, and with e.g. `disableAutoFetch=true` set the likelihood of this occuring would increase quite a bit.

*Please note:* While I've not yet seen this error in an actual PDF document, it can happen during loading if you're unlucky enough with e.g. the structure of the PDF document and/or the download speed offered by the server.",False
e868ab0051b65b83498830019fd5b73b66c43c35,2021-04-20 23:33:19,Calixte Denizet,Update all the text widgets having the same name with the same value,False
3d55b2b10eb9bc0201490184a05fc5ed209521a6,2021-04-19 16:56:39,Jonas Jenwald,Replace `done` callbacks in the font-tests with async/await instead,False
fd82adccfa409f9b2cc72ad2cb8555bd2aa68b36,2021-04-18 17:55:40,Tim van der Meij,"Merge pull request #13256 from timvandermeij/unit-test-async-await-pt4

Convert done callbacks to async/await in the last two unit test files",True
d42f3d0bfe76756b4ad233b7e1e03859009479b2,2021-04-18 17:50:54,Tim van der Meij,Convert done callbacks to async/await in `test/unit/evaluator_spec.js`,False
692304247cc12f7bfff4a1f04f83fedeb1196976,2021-04-18 17:49:51,Tim van der Meij,"Merge pull request #13258 from Snuffleupagus/update-packages

Update packages and translations",True
d3ed3761bca7679544249cf889c89cd6af9f82fa,2021-04-18 14:54:51,Jonas Jenwald,Update l10n files,False
cfa42cb0f218aac3c39c54ce72e392f20820f5fa,2021-04-18 14:35:52,Jonas Jenwald,"Fix (some) vulnerabilities reported by `npm audit`

This was done automatically, using the `npm audit fix` command.",False
fc007028a29fa113250c70c3549444afee563db7,2021-04-18 14:32:42,Jonas Jenwald,Update `npm` packages,False
f4237d3a09ced37f67d4859b12d5fb60bc986548,2021-04-17 23:29:18,Tim van der Meij,Convert done callbacks to async/await in `test/unit/annotation_spec.js`,False
c86e70ba08bcde6b2b510bbfd60dc5567ac5285b,2021-04-17 21:41:08,Tim van der Meij,"Merge pull request #13253 from timvandermeij/unit-test-async-await-pt3

Convert done callbacks to async/await in `test/unit/api_spec.js`",True
c2f3a71eca40fe5e2ebe39431aba20c3830f7946,2021-04-17 21:22:23,Tim van der Meij,Convert done callbacks to async/await in `test/unit/api_spec.js`,False
dd7f04ea2e945a19fc17a43a852d60b3ab9196e1,2021-04-17 16:02:32,Tim van der Meij,"Merge pull request #13254 from Snuffleupagus/scripting-misc-fixes

A couple of small scripting/XFA-related tweaks in the worker-code",True
f560fe68756728ab33f9253e2f6da7c84b4b364f,2021-04-17 14:04:22,Jonas Jenwald,"A couple of small scripting/XFA-related tweaks in the worker-code

 - Use `PDFManager.ensureDoc`, rather than `PDFManager.ensure`, in a couple of spots in the code. If there exists a short-hand format, we should obviously use it whenever possible.

 - Fix a unit-test helper, to account for the previous changes. (Also, converts a function to be `async` instead.)

 - Add one more exists-check in `PDFDocument.loadXfaFonts`, which I missed to suggest in PR 13146, to prevent any possible errors if the method is ever called in a situation where it shouldn't be.
   Also, print a warning if the actual font-loading fails since that could help future debugging. (Finally, reduce overall indentation in the loop.)

 - Slightly unrelated, but make a small tweak of a comment in `src/core/fonts.js` to reduce possible confusion.",False
ac3fa1e3d7682b41bfdd67f15e8f11be9e471db0,2021-04-17 01:25:12,Brendan Dahl,"Merge pull request #13146 from calixteman/xfa_fonts

XFA -- Load fonts permanently from the pdf",True
6db10d159a2b86778f3b65776f4090375950fbaa,2021-04-17 00:08:22,Tim van der Meij,"Merge pull request #13250 from Snuffleupagus/rm-_delayedFallback

Remove the `PDFViewerApplication._delayedFallback` functionality",True
ad2afab585d4bd6156cdbf00e2afb227e80ffae6,2021-04-17 00:06:52,Tim van der Meij,"Merge pull request #13249 from Snuffleupagus/rm-generic-signature-warn

[GENERIC viewer] Don't display the `errorWrapper`, for documents with signatures (PR 13217 follow-up)",True
6e8ff2fed92ef2f8cb38aa5bc2084652a3cb42b4,2021-04-17 00:03:45,Tim van der Meij,"Merge pull request #13247 from Snuffleupagus/update-yargs

Update the `yargs` package to the latest version",True
cba6a3f375ffbf0a682520a223b6f26a626284da,2021-04-16 23:54:53,Tim van der Meij,"Merge pull request #13246 from timvandermeij/unit-test-async-await-pt2

Convert done callbacks to async/await in more unit test files",True
c988712bc53db22979e639c776d5b3b8674bb341,2021-04-16 15:34:35,Jonas Jenwald,"Update the `yargs` package to the latest version

While I wasn't able to figure out *exactly* why the old format didn't work, re-factoring the `parseOptions` function to use `yargs` differently ""just worked"" so that's hopefully good enough here.
With these changes everything related to a *particular* option now appears in one place, rather than being spread out, which aids readability in my opinion. Also, the options are now sorted alphabetically, to make it easier to find a particular one.

https://www.npmjs.com/package/yargs",False
4ef187e9032a7bbf319463fd588effb6d2a9d728,2021-04-16 13:46:48,Jonas Jenwald,"Remove the `PDFViewerApplication._delayedFallback` functionality

According to a decision by UX and PM, please see https://bugzilla.mozilla.org/show_bug.cgi?id=1705060#c2 (and implemented in https://bugzilla.mozilla.org/show_bug.cgi?id=1705327), we no longer show the notification-bar in Firefox; hence the special `PDFViewerApplication._delayedFallback` functionality should no longer be necessary.
Furthermore, note that at this point in time *most* of the features which used the `PDFViewerApplication._delayedFallback` functionality is now enabled by default; hence that provides even less reason to keep this code around and existing calls are thus converted to ""regular"" `PDFViewerApplication.fallback` calls.",False
a6e29ab43c9b9b6b8ebb82e79bb0b6daf9e60216,2021-04-16 13:24:02,Jonas Jenwald,"Remove the special handling of ""errorFontLoadNative"" and ""errorFontMissing"" in `PDFViewerApplication.fallback` (PR 12931 follow-up, PR 12995 follow-up)

According to a decision by UX and PM, please see https://bugzilla.mozilla.org/show_bug.cgi?id=1705060#c2 (and implemented in https://bugzilla.mozilla.org/show_bug.cgi?id=1705327), we no longer show the notification-bar in Firefox.
Hence there's (obviously) no need to ignore certain `featureId`s in `PDFViewerApplication.fallback` anymore.",False
7d7a8a1a3ce47fbcd72c57efd98639e451275e5b,2021-04-16 13:23:59,Jonas Jenwald,"[GENERIC viewer] Don't display the `errorWrapper`, for documents with signatures (PR 13217 follow-up)

According to a decision by UX and PM, please see https://bugzilla.mozilla.org/show_bug.cgi?id=1705060#c2, in Firefox we should first of all *not* display the notification-bar for signatures. Secondly, as can also be seen there, we shouldn't display the notification-bar *at all* and it's thus disabled in https://bugzilla.mozilla.org/show_bug.cgi?id=1705327.

If we purposely don't display a notification, for documents with signatures, in the *built in* Firefox PDF Viewer then it cannot be necessary in the GENERIC viewer either.",False
7e9579045fb8030ac407ce6e08a66217070e58bc,2021-04-15 21:27:42,Calixte Denizet,"XFA -- Load fonts permanently from the pdf
  - Different fonts can be used in xfa and some of them are embedded in the pdf.
  - Load all the fonts in window.document.

Update src/core/document.js

Co-authored-by: Jonas Jenwald <jonas.jenwald@gmail.com>

Update src/core/worker.js

Co-authored-by: Jonas Jenwald <jonas.jenwald@gmail.com>",False
38ed655562c47dcac2888ecd49775bd87980f1e8,2021-04-15 01:54:28,Tim van der Meij,Convert done callbacks to async/await in `test/unit/cmap_spec.js`,False
046467ff473f7ca5ebec5a4b1ad1b1c1bb9d7efe,2021-04-15 01:41:45,Tim van der Meij,"Drop obsolete done callbacks in `test/unit/annotation_storage_spec.js`

There is no asynchronous code involved here, so we can get rid of all
done callbacks here and simply use the fact that if the function call
ends without failed assertion that the test passed.",False
82bdba78fb3b2521df4ca8ef5880db08337dbaeb,2021-04-15 01:39:17,Tim van der Meij,"Drop obsolete done callbacks in `test/unit/crypto_spec.js`

There is no asynchronous code involved here, so we can get rid of all
done callbacks here and simply use the fact that if the function call
ends without failed assertion that the test passed.",False
43eb4302ff3f77108e24a9a5a8a3b97e7c589439,2021-04-15 01:29:13,Tim van der Meij,Convert done callbacks to async/await in `test/unit/message_handler_spec.js`,False
bc8c0bbbfda12f8c80156097066b7b7036e6c625,2021-04-15 01:29:13,Tim van der Meij,Convert done callbacks to async/await in `test/unit/display_svg_spec.js`,False
ae48d07582874877bd27e4241d5e5e98cee99aa4,2021-04-15 00:12:49,Tim van der Meij,"Merge pull request #13243 from janpe2/ocg-ve

Implement visibility expressions for optional content",True
cd2c4e277cdaad73571a9c57971dc431253e4514,2021-04-15 00:07:17,Tim van der Meij,"Merge pull request #13222 from timvandermeij/unit-test-async

Convert done callbacks to async/await in the smaller unit test files",True
eddb9087a138fc5f72f6e5a9eef59f825739f8b0,2021-04-15 00:06:45,Tim van der Meij,"Merge pull request #13240 from Snuffleupagus/update-eslint-helpers

Update `eslint-config-prettier`/`eslint-plugin-unicorn` packages to their latest versions",True
b9d87b8c0d52f46d79d9532dd0c901eb3f1f0ff5,2021-04-15 00:05:51,Tim van der Meij,"Merge pull request #13244 from Snuffleupagus/update-postcss-calc

Update the `postcss-calc` package to the latest version",True
6bb0ffd374dfc44459c1c3236d7475b51f9c2621,2021-04-15 00:04:57,Tim van der Meij,"Merge pull request #13238 from Snuffleupagus/update-es-module-shims

Update the `es-module-shims` package to the latest version",True
3a96977ea85975571141c5c29c1c1bb684a6f7c6,2021-04-14 20:09:41,Jani Pehkonen,Implement visibility expressions for optional content,False
3e113cd38f74f087110dd4f1ab613d872100dec2,2021-04-14 19:10:41,Jonas Jenwald,"Update the `es-module-shims` package to the latest version

Beside the unit/font-test suites, this is primarily used in the development viewer (i.e. `gulp server`).

https://www.npmjs.com/package/es-module-shims",False
da93bd18cc7eb63bc37a3663e08b6b76e209c4cd,2021-04-14 19:02:38,Jonas Jenwald,"Update the `postcss-calc` package to the latest version

I've successfully run `gulp mozcentral` and `gulp generic` locally, with/without this patch and diff-ed the *built* `web/viewer.css` files. There were no changes, in the build-output, caused by this update.

https://www.npmjs.com/package/postcss-calc",False
f2156fc0cff5fa26e43e6d6c3a98e25589cf4fb9,2021-04-14 16:16:57,Jonas Jenwald,"Update `eslint-config-prettier`/`eslint-plugin-unicorn` packages to their latest versions

Both of these ESLint ""helpers"" has increased their *major* version numbers, which `npm update` doesn't handle automatically (since that could cause errors), hence this patch which updates them manually.

https://www.npmjs.com/package/eslint-config-prettier
https://www.npmjs.com/package/eslint-plugin-unicorn",False
3ff7627120bb82404b8429fafab5202b528f690b,2021-04-14 01:43:46,Tim van der Meij,"Merge pull request #13235 from Snuffleupagus/split-core-obj

Split the classes in `src/core/obj.js` into separate files",True
c1e9f6025f7c530a0e81458f34eb2532b3e49f22,2021-04-14 01:21:27,Tim van der Meij,Convert done callbacks to async/await in `test/unit/custom_spec.js`,False
a1c1e1b9f8695617a67cbe209e237162f439d96e,2021-04-14 01:21:27,Tim van der Meij,Convert done callbacks to async/await in `test/unit/fetch_stream_spec.js`,False
5607484402adc89d9c8f3d8a7697c86089676f80,2021-04-14 01:21:26,Tim van der Meij,Convert done callbacks to async/await in `test/unit/network_spec.js`,False
fcf4d02fca301705419b8b3a94319fc899d6c230,2021-04-14 01:21:26,Tim van der Meij,Convert done callbacks to async/await in `test/unit/node_stream_spec.js`,False
99dc0d6b65ea956b6201ea0569134ab411286e3a,2021-04-14 01:20:13,Tim van der Meij,Convert done callbacks to async/await in `test/unit/primitives_spec.js`,False
a56ffb92be63d35fdeb2b3da8f161d9fd4c48fd8,2021-04-14 01:20:13,Tim van der Meij,Convert done callbacks to async/await in `test/unit/ui_utils_spec.js`,False
a2811e925dc064b5f7832ee45dbb44871111e4f3,2021-04-14 01:17:53,Tim van der Meij,Convert done callbacks to async/await in `test/unit/util_spec.js`,False
1d6d476cab0af6c067159d84ba0d0f29e2667d9f,2021-04-14 00:30:30,Jonas Jenwald,"Rename the `src/core/obj.js` file to `src/core/catalog.js`

Now that only the `Catalog` remains in this file, after the previous patches, it makes sense to rename the file to reduce confusion.",False
088a55f80d5a3ac52eec0af6f546034ebcaa7b97,2021-04-14 00:30:30,Jonas Jenwald,Enable the `no-var` rule in the `src/core/xref.js` file,False
bc828cd41f9ce25e8ce1a483f53b4ddb3fa5ccec,2021-04-14 00:30:30,Jonas Jenwald,"Convert the `XRef` to a ""normal"" class",False
e8750cfe950259491d68a043c735653e97361a20,2021-04-14 00:30:30,Jonas Jenwald,"Move the `XRef` from `src/core/obj.js` and into its own file

The size of the `src/core/obj.js` file has increased slowly over the years, and it also contains a fair amount of *distinct* functionality.
In order to improve readability and make it easier to navigate through the code, this patch moves the `XRef` into its own file.",False
24e5ecdf76458480e25876b82cf7a5d4d3c9027f,2021-04-14 00:30:30,Jonas Jenwald,"Move `NameTree`/`NumberTree` from `src/core/obj.js` and into its own file

The size of the `src/core/obj.js` file has increased slowly over the years, and it also contains a fair amount of *distinct* functionality.
In order to improve readability and make it easier to navigate through the code, this patch moves `NameTree`/`NumberTree` into its own file.",False
92141e04688d9e2c7a2503532eb8b71e594db6da,2021-04-14 00:30:30,Jonas Jenwald,Enable the `no-var` rule in the `src/core/file_spec.js` file,False
22a066e6578e5c88cd3d6ae1bb50cd31541500a0,2021-04-14 00:30:30,Jonas Jenwald,"Convert the `FileSpec` to a ""normal"" class",False
e02d17da935fb83c404721059ecf2557f93e3daa,2021-04-14 00:30:30,Jonas Jenwald,"Move the `FileSpec` from `src/core/obj.js` and into its own file

The size of the `src/core/obj.js` file has increased slowly over the years, and it also contains a fair amount of *distinct* functionality.
In order to improve readability and make it easier to navigate through the code, this patch moves the `FileSpec` into its own file.",False
6a935682fd6f81795e5fa8d855d5bde49d8ccb5c,2021-04-14 00:30:30,Jonas Jenwald,"Covert the `ObjectLoader` to a ""normal"" class",False
604cd6d6003e42665cd8fa710c42395c394e7d30,2021-04-14 00:30:30,Jonas Jenwald,"Move the `ObjectLoader` from `src/core/obj.js` and into its own file

The size of the `src/core/obj.js` file has increased slowly over the years, and it also contains a fair amount of *distinct* functionality.
In order to improve readability and make it easier to navigate through the code, this patch moves the `ObjectLoader` into its own file.",False
ebeb3f79996df5f6ff411e38e10a572157656f96,2021-04-14 00:14:58,Tim van der Meij,"Merge pull request #13234 from Snuffleupagus/hasJSActions-MissingDataException

[api-minor] Ensure that `PDFDocumentProxy.hasJSActions` won't fail if `MissingDataException`s are thrown during the associated worker-thread parsing",True
d498897ab539c85e787985077a4db92978c7c56c,2021-04-14 00:10:52,Cetin Sert,"Fix annotation input focus trap regression in Safari (#13232)

`setSelectionRange(0, 0)` added in https://github.com/mozilla/pdf.js/commit/44b24fcc2936e1d75c249aa161970ab8fa83e4d2 for #12359, required only by Firefox ([bug](https://bugzilla.mozilla.org/show_bug.cgi?id=860329)), causes issues mozilla#13191, mozilla#12592 in Safari.
`scrollLeft = 0` is a fix that breaks the focus trap in Safari while **keeping Firefox behavior same for #12359**.",False
3d2d8002b014c303269d536d8f775e079cdc6c78,2021-04-14 00:09:52,Tim van der Meij,"Merge pull request #13223 from Snuffleupagus/worker-xfa-structTree-tweaks

Remove the unused ""GetIsPureXfa"" message handler; and avoid unnecessary parsing when no structTree is available (PR 13069 follow-up, PR 13221 follow-up)",True
2b2234fd5a789c059c334fda44573a52ee6fbb23,2021-04-13 18:03:56,Jonas Jenwald,"[api-minor] Ensure that `PDFDocumentProxy.hasJSActions` won't fail if `MissingDataException`s are thrown during the associated worker-thread parsing

With the current implementation of `PDFDocument.hasJSActions`, in the worker-thread, we're not actually handling not-yet-loaded data correctly. This can thus fail in *two* different ways:
 - The `PDFDocument.fieldObjects` getter (and its helper method), while it may *return* a Promise, still fetches all of its data synchronously and it can thus throw a `MissingDataException` during parsing.
 - The `Catalog.jsActions` getter, which is completely synchronous, can obviously throw a `MissingDataException` during parsing.

If either of these cases occur currently, the `PDFDocumentProxy.hasJSActions` method in the API can either return a *rejected* Promise (which it never should) or possibly ""hang"" and never resolve.

*Please note:* While I've not *yet* seen this error in an actual PDF document, it can happen during loading if you're unlucky enough with e.g. the structure of the PDF document and/or the download speed offered by the server.
This patch is thus based on code-inspection *and* on manually throwing a `MissingDataException` on the first access of `Catalog.jsActions` to simulate this situation.

Finally, this patch adds a couple of *API* unit-tests for this (since none existed).",False
4aa27cc645b7c88e23f644ca258fa933c845891b,2021-04-13 17:46:17,Jonas Jenwald,"Re-factor `Catalog._collectJavaScript` to use a `Map` rather than an Object

Given that this only an internal helper method, used by the `Catalog.{javaScript, jsActions}` getters, this change simplifies iteration of the returned data.
We can also (slightly) re-factor the code of the `jsActions` getter, and remove an obsolete[1] JSDoc-comment from the `openAction` getter.

---
[1] Not really relevant now that we've got proper scripting support.",False
6cf307000847b02b929572680c25d3f3b634e67e,2021-04-13 04:54:03,Brendan Dahl,"Merge pull request #13203 from utopianknight/high_contrast

Implement high contrast mode",True
a53cd1cc1e4a38755dbfe43e70d622183cabb584,2021-04-13 03:04:38,Brendan Dahl,"Merge pull request #13141 from calixteman/xfa_text

XFA -- Display text content",True
a4c986515ff1291baae49ad3cc0ddbc658b0a280,2021-04-12 17:43:49,Calixte Denizet,"XFA -- Display text content
  - display xhtml;
  - allow spaces in xhtml (xfa-spacerun:yes);
  - support column layout;
  - fix some border issues.",False
54ef4370a2994dfb41791a13633a4cda86894ee3,2021-04-12 17:24:37,Jonas Jenwald,"Ensure that the data is loaded, in the ""GetPageJSActions"" message handler

Similar to all other data accesses, note e.g. the ""GetDocJSActions"" handler just above, we need to ensure that a `MissingDataException` isn't propagated to the main-thread if this data is accessed while the PDF document is still loading.",False
9360c7cbdc93ca68fbad99f963e41eb492fd16e9,2021-04-12 12:24:21,Jonas Jenwald,"Avoid unnecessary parsing, in `Page.GetStructTree`, when no structTree is available (PR 13221 follow-up)

It's obviously (a bit) more efficient to return early in `Page.getStructTree`, rather than trying to first ""parse"" an *empty* structTree-root.

*Somehow I didn't think of this yesterday, but this feels like a much better solution overall; sorry about the churn here!*",False
0d2dd6c2fea1b5081b64751e1e0697abcd1c47ee,2021-04-12 12:22:27,Jonas Jenwald,"Remove the unused ""GetIsPureXfa"" message handler in the worker (PR 13069 follow-up)

Looking at the API, there's no code which actually sends this message. Most likely it's a left-over from a previous version of PR 13069, since the `isPureXfa` parameter is being included in the ""GetDoc"" message.",False
a3669a4f0daad380ed83a134bb632cc709fab522,2021-04-11 22:11:41,Tim van der Meij,"Merge pull request #13217 from Snuffleupagus/generic-signature-warn

[GENERIC viewer] Display a warning message, using the `errorWrapper`, for documents with signatures (PR 13214 follow-up, issue 13215)",True
646bb07884a31f2787d4c6fd874e777ac7661079,2021-04-11 22:02:50,Tim van der Meij,"Merge pull request #13221 from Snuffleupagus/structTree-fixes

[api-minor] A couple of smaller `PDFPageProxy.getStructTree` fixes (PR 13171 follow-up)",True
daf4cd0f785ac036f28e67dbc045fee19a4beb98,2021-04-11 22:00:17,Tim van der Meij,"Merge pull request #13220 from Snuffleupagus/currentOutlineItemPromise-isPagesLoaded

Ensure that `currentOutlineButton` enabling/disabling won't depend on the exact timing of the ""pagesloaded"" event (PR 13212 follow-up)",True
be3debeeb8e4c4718b0ea17226920725b11a2db9,2021-04-11 18:37:33,utopianknight,Implement high contrast mode,False
52494be545fd3c8ef46490d4c02b0caf090b476d,2021-04-11 16:16:17,Jonas Jenwald,"[GENERIC viewer] Display a warning message, using the `errorWrapper`, for documents with signatures (PR 13214 follow-up, issue 13215)

To simplify the overall implementation, given that it only applies to the GENERIC-viewer, this patch purposely re-uses the existing `errorWrapper`-functionality to display the message.
While that one is mostly intended for actual *errors*, by re-using it here we considerably reduce the amount of code/complexity necessary for supporting this new warning. It's obviously possible to re-factor/improve this later on, but the patch should do just fine here since it'll indeed inform users (of the GENERIC-viewer) about unverified signatures.

Finally this patch also tweaks the background-color of the `errorWrapper`, making it 20 percent lighter respectively darker (depending on the theme) to make it ""stand out"" a little bit *less*.[1] While it may perhaps be useful to re-style/re-factor the `errorWrapper`, this patch probably isn't the right place for doing that.

---
[1] Note how in the MOZCENTRAL-viewer, which instead uses the browser notification-bar, we're purposely using a neutral colour to not draw too much attention to the notification-bar.",False
5adee0cdd14017ca79a56ef00c4ec07659f17084,2021-04-11 16:05:33,Jonas Jenwald,"[api-minor] Let `PDFPageProxy.getStructTree` return `null`, rather than an empty structTree, for documents without any accessibility data (PR 13171 follow-up)

This is first of all consistent with existing API-methods, where we return `null` when the data in question doesn't exist. Secondly, it should also be (slightly) more efficient since there's less dummy-data that we need to transfer between threads.
Finally, this prevents us from adding an empty/unnecessary span to *every* single page even in documents without any structure tree data.",False
ff4dae05b0f8349b6277d45e2d282ad893a4b3af,2021-04-11 15:45:33,Jonas Jenwald,"Ensure that `getStructTree` won't break with `disableAutoFetch = true` set (PR 13171 follow-up)

Open http://localhost:8888/web/viewer.html?file=/test/pdfs/pdf.pdf#disableStream=true&disableAutoFetch=true and observe the following message in the console (repeated for each page of the document):
```
Uncaught (in promise)
Object { message: ""Missing data [19787293, 19787294)"", name: ""UnknownErrorException"", details: ""MissingDataException: Missing data [19787293, 19787294)"", stack: ""BaseExceptionClosure@http://localhost:8888/src/shared/util.js:458:29\n@http://localhost:8888/src/shared/util.js:462:3\n"" }
```",False
f285e41f0240e8fa6dd614bcf9a92ee5553a3599,2021-04-11 14:06:46,Jonas Jenwald,"Ensure that `currentOutlineButton` enabling/disabling won't depend on the exact timing of the ""pagesloaded"" event (PR 13212 follow-up)

I (unsurprisingly) managed to forget about handling the case where a ""pagesloaded"" event arrives *before* the outline has been parsed, in which case we'd not actually enable the `currentOutlineButton` as intended.
Also, in the ""pagesloaded"" event handler, we should ensure that there's actually any pages loaded since otherwise the ""find current outlineItem""-feature doesn't make any sense.",False
4ac108283885dabcd542d05d0f4d10eb3a800c62,2021-04-11 00:43:42,Tim van der Meij,"Merge pull request #13216 from timvandermeij/unit-test-done

Remove obsolete done callbacks from the unit tests",True
10574a0f8a5df6d6e0b91385eb21b5c4427d82aa,2021-04-10 23:59:39,Tim van der Meij,"Remove obsolete done callbacks from the unit tests

The done callbacks are an outdated mechanism to signal Jasmine that a
unit test is done, mostly in cases where a unit test needed to wait for
an asynchronous operation to complete before doing its assertions.
Nowadays a much better mechanism is in place for that, namely simply
passing an asynchronous function to Jasmine, so we don't need callbacks
anymore (which require more code and may be more difficult to reason
about).

In these particular cases though the done callbacks never had any real
use since nothing asynchronous happens in these places. Synchronous
functions don't need to use done callbacks since Jasmine simply knows
it's done when the function reaches its normal end, so we can safely get
rid of these callbacks. The telltale sign is if the done callback is
used unconditionally at the end of the function.

This is all done in an effort to over time get rid of all callbacks in
the unit test code.",False
d9d626a5e16cb3662c188bd2f12cb8584360c86a,2021-04-10 23:05:16,Tim van der Meij,"Merge pull request #13214 from calixteman/signatures

Display widget signature",True
5875ebb1ca8a1066600d4dc69ca4a11ff9111e3e,2021-04-10 22:43:28,Calixte Denizet,"Display widget signature
  - but don't validate them for now;
  - Firefox will display a bar to warn that the signature validation is not supported (see https://bugzilla.mozilla.org/show_bug.cgi?id=854315)
  - almost all (all ?) pdf readers display signatures;
  - validation is done in edge but for now it's behind a pref.",False
86374d4f75ef1ac599ee3a1431311d614075faed,2021-04-10 18:02:41,Tim van der Meij,"Merge pull request #13212 from Snuffleupagus/BaseTreeViewer-init-checks

Check that the correct `pdfDocument` is still active, before rendering the outline/attachments/layers",True
27062f72c27e37f4a8a93cca1a883e7fbe54cd71,2021-04-10 16:42:47,Jonas Jenwald,"Improve the handling of the `currentOutlineButton` enabling/disabling (PR 12777 follow-up)

It's obviously better and more correct to handle the ""pagesloaded"" case within `PDFOutlineViewer` *itself*, rather than essentially splitting the logic in two parts and forcing `PDFSidebar` to deal with what should've been handled internally in `PDFOutlineViewer`.

This is what I *should* have done in PR	12777, but for some reason didn't figure out how to implement it well enough back then; sorry about the churn here!",False
05b0798824aa9686b8a878ee9ccf691b04d57108,2021-04-10 16:42:40,Jonas Jenwald,"Check that the correct `pdfDocument` is still active, before rendering the outline/attachments/layers

*This patch fixes some technical debt in the viewer.*

Given that most API methods are (purposely) asynchronous, there's always a risk that the viewer could have been `close`d before the requested data arrives.
Lately we've started to check this case before using the data, to prevent errors and/or inconsistent state, however the outline/attachments/layers fetching and rendering is old enough that it pre-dates those checks.",False
f5e973d555da1b9c6ed03070f5ccea3e68c09093,2021-04-10 01:21:42,Tim van der Meij,"Merge pull request #13197 from Snuffleupagus/issue-8233

Improve the image quality of thumbnails rendered by `PDFThumbnailView.draw` (issue 8233)",True
03c8c89002ec2c1a2223c3a5926560686f8c3917,2021-04-10 01:02:44,Tim van der Meij,"Merge pull request #13171 from brendandahl/struct-tree

[api-minor] Add support for basic structure tree for accessibility.",True
b0473eb3530d2ae461ded4c50ba0d5f22c1a6fb0,2021-04-10 00:39:16,Tim van der Meij,"Merge pull request #13207 from Snuffleupagus/api-AnnotationStorage-params

[api-minor] Remove the manual passing of an `AnnotationStorage`-instance when calling various API-method",True
0ae5a6ef05a6b4b4a1592e99cce2d4add6c07e8a,2021-04-10 00:29:29,Tim van der Meij,"Merge pull request #13209 from Snuffleupagus/rm-PDFPageView-enableScripting

Remove the `enableScripting` option from the `PDFPageView` constructor",True
acb5c5093b0ff62a0ab6eb3e45f11b4cbf18bc45,2021-04-10 00:26:07,Tim van der Meij,"Merge pull request #13210 from brendandahl/cache-source-map

Cache babel source map.",True
bf7ae6f82aee3972539194b324377e799d199227,2021-04-10 00:24:54,Tim van der Meij,"Merge pull request #13204 from eltociear/patch-2

Fix typo in canvas.js",True
a31d142253c9c2100bf3d9ad2139098d8e877500,2021-04-09 23:04:54,Brendan Dahl,"Cache babel source map.

When source is already cached and you reload,
the source map is lost which makes debugging
async functions difficult.",False
fc9501a637bbd3038cc4d5e44a7e71613db13ca2,2021-04-09 22:26:28,Brendan Dahl,"Add support for basic structure tree for accessibility.

When a PDF is ""marked"" we now generate a separate DOM that represents
the structure tree from the PDF.  This DOM is inserted into the <canvas>
element and allows screen readers to walk the tree and have more
information about headings, images, links, etc. To link the structure
tree DOM (which is empty) to the text layer aria-owns is used. This
required modifying the text layer creation so that marked items are
now tracked.",False
ec9e29807aa8e2ca67c853483875b24d3a8f7d58,2021-04-09 17:50:47,Jonas Jenwald,"Remove the `enableScripting` option from the `PDFPageView` constructor

Scripting, as implemented, requires access to a complete document/viewer in order to work. Hence it doesn't really make sense to keep the `enableScripting`-option on `PDFPageView`-instances.[1]

---
[1] Note that there's the `PDFSinglePageViewer`, which can be used in cases where you want access to all features/functionality of the viewer but only display *one* page at a time.",False
737a8e846d35e146895e409baadaf7b4243c5b54,2021-04-09 16:55:03,Jonas Jenwald,"Add `deprecated` handling of the now removed `AnnotationStorage` API-parameters

These changes are done separately, to make it easier to remove them in the future.",False
72ef1830853e28aca700ffc9876ed21bcdbf6e51,2021-04-09 16:54:25,Jonas Jenwald,"[api-minor] Remove the manual passing of an `AnnotationStorage`-instance when calling various API-method

Note how we purposely don't expose the `AnnotationStorage`-class directly in the official API (see `src/pdf.js`), since trying to use *multiple* ones simultaneously doesn't really make sense (e.g. in the viewer).
Instead we lazily initialize, and cache, just *one* instance via `PDFDocumentProxy.annotationStorage` which should thus be available internally in the API itself without having to be manually passed to various methods.

To support these changes, the `AnnotationStorage`-instance initialization is moved into the `WorkerTransport`-class to allow both `PDFDocumentProxy` and `PDFPageProxy` to access it.
This patch implements the following simplifications:
 - Remove the `annotationStorage`-parameter from `PDFDocumentProxy.saveDocument`, since it's already available internally.
   Furthermore, while it's currently possible to call that method without an `AnnotationStorage`-instance, that really does *not* make any sense at all. In this case you're effectively reducing `PDFDocumentProxy.saveDocument` to a ""regular"" `PDFDocumentProxy.getData` call, but with *a lot* more overhead, which was obviously not the intention of the `PDFDocumentProxy.saveDocument`-method.

 - Try to discourage third-party users from calling `PDFDocumentProxy.saveDocument` unconditionally, as a replacement for `PDFDocumentProxy.getData` (note the previous point).

 - Replace the `annotationStorage`-parameter, in `PDFPageProxy.render`, with a boolean `includeAnnotationStorage`-parameter which simply indicates if the (internally available) `AnnotationStorage`-instance should be used during rendering (e.g. for printing).

 - By removing the need to *manually* provide `annotationStorage`-parameters to various API-methods, using the API should become simpler (e.g. for third-parties) since you no longer need to worry about manually fetching and passing around this data.",False
c4c4333d5438b1694b73eb0c534066ff1f38fbc9,2021-04-08 20:15:24,Ikko Ashimine,"Fix typo in canvas.js

Reseting -> Resetting",False
d8e07946503edfe64efbdfafdcf3a84a87462e0c,2021-04-08 17:28:24,Jonas Jenwald,"Improve the image quality of thumbnails rendered by `PDFThumbnailView.draw` (issue 8233)

The reason for the fairly large discrepancy, in the thumbnail quality, between the `draw`/`setImage`-methods is that in the former case we *directly* render the thumbnails at the final size that they'll appear at in the sidebar. In the latter case, we instead downsize the (generally) much larger ""regular"" pages.

To address this, I'm thus proposing that we let `PDFThumbnailView.draw` render thumbnails at *twice* their intended size and then downsize them to the final size.
Obviously this will increase *peak* memory usage during thumbnail rendering in `PDFThumbnailView.draw`, since doubling the width/height of a `canvas` will lead to its pixel-count increasing by a factor of `4`. Furthermore, since you need four components per pixel (given that it's RGBA-data), this will thus lead to the *temporary* thumbnail `canvas`-sizes increasing by a factor of `16` during rendering. Hence why rendering thumbnails at their ""original"" scale, i.e. using something like `PDFPageProxy.getViewport({ scale: 1 });`, would be an absolutely terrible idea!

To reduce the size and scope of these changes, I've tried to re-factor and re-use as much of the existing downsizing-implementation already present in `PDFThumbnailView` as possible.

While this will generally *not* make thumbnails rendered by `PDFThumbnailView.draw` look *identical* to those based on the rendered pages (via `PDFThumbnailView.setImage`), it's a considerable improvement as far as I'm concerned and enough to call the issue fixed.

*Please note:* This patch will not lead to *any* additional overhead, in either memory usage or parsing, for thumbnails which are based on the rendered pages.",False
32a00b9b2b085e5828a2fbc99d21f5580aad1565,2021-04-08 15:52:07,Jonas Jenwald,"Stop looping over `childNodes`, in `PDFThumbnailView.reset`, when removing the thumbnail

A loop is less efficient than just overwriting the content, which is what we've generally been using (for years) in other parts of the code-base (see e.g. `BaseViewer` and `PDFThumbnailViewer`).",False
8ea83f7030cc0e17aed8ea51b339a5a64a701544,2021-04-08 15:51:52,Jonas Jenwald,"Convert some properties, on `PDFThumbnailView`-instances, to local variables

These properties are always updated/used together, and there's no other methods which depend on just one of them, hence they're changed into local variables instead.
Looking through the history of this code, it seems they were converted *from* local variables and to properties all the way back in PR 2914; however as far as I can tell from that diff it doesn't seem to have been necessary even back then!?",False
6429ccc0028ecfadca4a4db3a0baf39146325379,2021-04-08 00:20:19,Tim van der Meij,"Merge pull request #13194 from Snuffleupagus/ttcf-fuzzy-match

Fuzzy-match the fontName, for TrueType Collection fonts, where the ""name""-table is wrong (issue 13193)",True
5945f7c4a1e7d88ad26663bd896768a6f683acff,2021-04-08 00:08:59,Tim van der Meij,"Merge pull request #13186 from Snuffleupagus/rm-deprecated-code

Remove some `deprecated` code",True
336ebd6fa18086df1ff326d1156662c99482d964,2021-04-08 00:04:49,Tim van der Meij,"Merge pull request #13184 from timvandermeij/sets

Convert objects to sets in places where we only track keys",True
f986ccdf0e28bf008d6bcd43d42ba3f50c69a094,2021-04-07 18:55:32,Jonas Jenwald,"Fuzzy-match the fontName, for TrueType Collection fonts, where the ""name""-table is wrong (issue 13193)

The fontName, as defined in the PDF document, cannot be found in *any* of the ""name""-tables in the TrueType Collection font. To work-around that, this patch adds a *fallback* code-path to allow using an approximately matching fontName rather than outright failing.",False
4e81e0e14f3c353cca4aff4fd0c045920d1289ce,2021-04-06 16:52:06,Jonas Jenwald,"Remove the deprecated `AnnotationStorage.getOrCreateValue`-method (PR 12759 follow-up)

While this method has only been deprecated in one releases now, the `AnnotationStorage`-functionality is new enough that third-party implementations hopefully don't rely heavily on it just yet. (And removing this quickly should help reduce the likelihood that someone starts using it.)",False
92ec10bfcad11fea430c5bda6e4b104b1653d57f,2021-04-06 16:38:50,Jonas Jenwald,"Remove the deprecated `PDFLinkService.navigateTo`-method (PR 12440 follow-up)

This method has been deprecated in two releases now, hence we shouldn't need to keep this code around.",False
b2758c302307706c91744cc1bc04adb64ff9b73e,2021-04-06 16:34:23,Jonas Jenwald,"Remove the deprecated properties from the ""presentationmodechanged"" event (PR 12788 follow-up)

These properties have been deprecated in two releases now, hence we shouldn't need to keep this code around.",False
ff393d6e969865b07e1928cf60354dc8edd2b170,2021-04-05 23:03:53,Tim van der Meij,"Convert the `pendingFindMatches` member, in `web/pdf_find_controller.js`, from an object to a set

We only want to track page numbers instead of actual data, so using a
set conveys that intention more clearly and is slightly more efficient.",False
fc0cd4a443ef9d1fe6fe828b4edac447e51305e9,2021-04-05 23:02:58,Tim van der Meij,"Convert the `startXRefParsedCache` variable, in `src/core/obj.js`, from an object to a set

We only want to track XRef starting points instead of actual data, so
using a set conveys that intention more clearly and is slightly more
efficient.",False
6ddc297170a48475b2fdb882efd895d0236474c3,2021-04-05 19:31:29,Tim van der Meij,"Merge pull request #13183 from timvandermeij/bump

Bump versions in `pdfjs.config`",True
37c88bfaedd9b41c8738dc772a2fc27ebc223930,2021-04-05 19:26:18,Tim van der Meij,Bump versions in `pdfjs.config`,False
228adbf673190007b77d34a652b76c211c910d65,2021-04-05 17:51:34,Tim van der Meij,"Merge pull request #13172 from Snuffleupagus/cleanup-keepFonts

[api-minor] Add an option, in `PDFDocumentProxy.cleanup`, to allow fonts to remain attached to the DOM",True
11f2eab4b89f8bd94d1c571d3659fc70e1a79bb7,2021-04-05 17:36:53,Tim van der Meij,"Merge pull request #13179 from Snuffleupagus/more-Set

Utilize `Set` a bit more in the code-base",True
3698bc12877f0138fc37cc121796d17f8892e947,2021-04-05 17:33:18,Tim van der Meij,"Merge pull request #13175 from Snuffleupagus/app-close-save

[GENERIC viewer] Avoid data loss in forms, by triggering saving when the document is closed (issue 12257)",True
3f90565272e3f7857831a865ff86dc335ca4314c,2021-04-05 17:01:30,Tim van der Meij,"Merge pull request #13177 from Snuffleupagus/update-packages

Update packages and translations",True
16fd838f52a3a460611b940814d2ef1a5c1dfaed,2021-04-05 14:21:28,Jonas Jenwald,"Convert the `renderTasks`, used in `PDFPageProxy.render`/`PDFPageProxy.getOperatorList`, to a Set

When removing tasks we're currently forced to *indirectly* iterate through the array, which can be avoided by using a Set instead.
Furthermore, we can also (slightly) modernize the code responsible for initializing the `renderTasks`.",False
68d3a333ac156ea398a035c881be52b8efadafde,2021-04-05 14:04:02,Jonas Jenwald,"Change the `seenStyles` object, in `PartialEvaluator.getTextContent`, to a Set

Given that what we actually want is only to keep track of the loadedFont-names, rather than storing any actual data, using an object isn't really necessary here. Furthermore, in the current code, we're also using `in` when checking if the data exists, which is generally less efficient than just checking for the value directly.",False
3d9f6ec0f95afaec779b8462486b5e4095f6f5a6,2021-04-04 14:34:05,Jonas Jenwald,Update l10n files,False
f4727f0fec024638a8467637bb774c07068826df,2021-04-04 14:23:29,Jonas Jenwald,Update `npm` packages,False
3f59d4201a1b95b83e2fadb8488270b059412d35,2021-04-03 21:46:53,Jonas Jenwald,"[GENERIC viewer] Avoid data loss in forms, by triggering saving when the document is closed (issue 12257)

As discussed in the issue, this is a small/simple patch that should help to prevent *outright* data loss in forms when a new document is opened in the GENERIC viewer.

While the implementation is perhaps a bit ""simplistic"", it does seem to work and should be fine given that this is an edge-case only relevant for the GENERIC viewer.",False
5b28a0bf974218c0fd5c524a5d7bd8a3ce9ce832,2021-04-03 21:41:01,Jonas Jenwald,"Re-factor the `download`/`save`-methods, on `PDFViewerApplication`, to make full use of async/await

In the next patch we'll need to be able to actually wait for saving to complete, hence it's necessary to slightly re-factor the `save`-method.

As part of these changes, we can reduce some duplication in the `save`-method and slightly improve the overall code. For consistency, the `download`-method is updated similarily to improve the code (this functionality is *very* old, even pre-dating the introduction of Promises in the code-base).",False
5cf116a958548f6596674bf8d5ca0fe64aa2df3c,2021-04-03 00:13:22,Tim van der Meij,"Merge pull request #13169 from Snuffleupagus/DefaultAppearanceEvaluator-fontName

[api-minor] Change the format of the `fontName`-property, in `defaultAppearanceData`, on Annotation-instances (PR 12831 follow-up)",True
232fbd28e1c23039bea3e2651ef4c76ae8420be4,2021-04-02 16:02:35,Jonas Jenwald,Re-factor the `PDFDocumentProxy.cleanup` unit-tests to use async/await,False
a2bc6481a081a1093fad8b638c30d5bb8d099584,2021-04-02 16:02:31,Jonas Jenwald,"[api-minor] Add an option, in `PDFDocumentProxy.cleanup`, to allow fonts to remain attached to the DOM

As mentioned in the JSDoc comment, this should not be used unless you know what you're doing, since it will lead to increased memory usage. However, in some situations (e.g. SVG-rendering), we still want to be able to run general clean-up on both the main/worker-thread while keeping loaded fonts attached to the DOM.[1]

As part of these changes, `WorkerTransport.startCleanup` is converted to an async method and we'll also skip clean-up when destruction has started (since it's redundant).

---
[1] The SVG-rendering mode is obviously not officially supported, since it's both rather incomplete and inherently slower. However with recent changes, whereby we cache repeated images on the document rather than the page level, memory usage can be *a lot* worse than before if we never attempt to release e.g. cached image-data when the viewer is in SVG-rendering mode.",False
48ff20493fb2360585934c45efd0f7f200d8dbdd,2021-04-02 15:56:32,Jonas Jenwald,"Mark some internal `PDFDocumentProxy`-properties as ""private""

These two properties were *never* intended to be anything but ""private"", hence it really cannot hurt to actually indicate that they're *not* part of any official API.",False
0eb1433c788d7546e280aeda323c8cdb1c0efadc,2021-04-01 20:17:30,Jonas Jenwald,"[api-minor] Change the format of the `fontName`-property, in `defaultAppearanceData`, on Annotation-instances (PR 12831 follow-up)

Currently the `fontName`-property contains an actual /Name-instance, which is a problem given that its fallback value is an empty string; see https://github.com/mozilla/pdf.js/blob/ca7f546828603d15ac0975f6131669321bfccceb/src/core/default_appearance.js#L35
The reason that this is a problem can be seen in https://github.com/mozilla/pdf.js/blob/ca7f546828603d15ac0975f6131669321bfccceb/src/core/primitives.js#L30-L34, since an empty string short-circuits the cache. Essentially, in PDF documents, a /Name-instance cannot be empty and the way that the `DefaultAppearanceEvaluator` does things is unfortunately not entirely correct.

Hence the `fontName`-property is changed to instead contain a string, rather than a /Name-instance, which simplifies the code overall.

*Please note:* I'm tagging this patch with ""[api-minor]"", since PR 12831 is included in the current pre-release (although we're not using the `fontName`-property in the display-layer).",False
ca7f546828603d15ac0975f6131669321bfccceb,2021-04-01 01:26:31,Tim van der Meij,"Merge pull request #12908 from calixteman/11918

Slightly rescale lineWidth to workaround chrome rendering issue",True
a0cfb0841f04eb2c144168f91ed30f9371e780e2,2021-04-01 01:19:00,Calixte Denizet,Slightly rescale lineWidth to workaround chrome rendering issue,False
5a64157a2f176a157d7bbbcc3cb5ec93f7ff8b7e,2021-04-01 01:05:13,Tim van der Meij,"Merge pull request #13168 from janpe2/ttf-uni-glyphs

Use post table when Encoding has only Differences",True
1a4af17d075851601b4109b103cf37a2970bb6e5,2021-04-01 01:00:50,Tim van der Meij,"Merge pull request #13165 from Snuffleupagus/Annotation-rm-defaultAppearance-export

[api-minor] Stop exposing the *raw* `defaultAppearance`-string on Annotation-instances",True
5be0fbe8f14df058f27edfbc365bc0082a818439,2021-04-01 00:50:08,Tim van der Meij,"Merge pull request #13166 from Snuffleupagus/getDocument-URL

[api-minor] Support proper `URL`-objects, in addition to URL-strings, in `getDocument`",True
70915d34edf8e2eef321c5f766ecbe903897079d,2021-03-31 23:54:08,Tim van der Meij,"Merge pull request #13157 from Snuffleupagus/webViewerOpenFileViaURL-cleanup

Remove the `file://`-URL special-case from `webViewerOpenFileViaURL`",True
2fb4d02ea5525232bf9bbf52043a4091ef372696,2021-03-31 23:52:02,Tim van der Meij,"Merge pull request #13158 from Snuffleupagus/rm-URL-polyfill

Remove the `URL` polyfill",True
d47b30ef541017cf54b03f3db9cfa528053e6208,2021-03-31 23:50:35,Tim van der Meij,"Merge pull request #13156 from Snuffleupagus/outline-destRef-null

Prevent errors, in `PDFOutlineViewer._getPageNumberToDestHash`, for invalid `destRef` values (PR 12777 follow-up)",True
b6babb0d95b3949840f07af77edcc85ef070bdcc,2021-03-31 23:49:01,Tim van der Meij,"Merge pull request #13161 from mozilla/dependabot/npm_and_yarn/y18n-3.2.2

Bump y18n from 3.2.1 to 3.2.2",True
0117ee5071c05e08bbcc38cccf5a80215aedb268,2021-03-31 20:28:44,Jani Pehkonen,"Use post table when Encoding has only Differences
Fixes #13107
In the issue, some TrueType glyph names have the format `uniXXXX`.
Font's `Encoding` dictionary has the entry `Differences` but no
`BaseEncoding`. `uniXXXX` names are converted to glyph indices
using font's `post` table but currently that is done only when
`BaseEncoding` exists. We must enable the conversion also when only
`Differences` exists.",False
db1e1612df8d029134f8859647532350317390e2,2021-03-31 19:51:41,Jonas Jenwald,"[api-minor] Support proper `URL`-objects, in addition to URL-strings, in `getDocument`

Currently only URL-strings are officially supported by `getDocument`, however at this point in time I cannot really see any compelling reason to not support `URL`-objects as well.

Most likely the reason that we've don't already support `URL`-objects, in `getDocument`, is that historically `URL` wasn't fully implemented across browsers and our old polyfill wasn't perfect; see https://developer.mozilla.org/en-US/docs/Web/API/URL/URL#browser_compatibility

*Please note:* Because of how the `url` parameter is currently handled, there's actually *some* cases where passing a `URL`-object to `getDocument` already works. That, in my opinion, provides additional motivation for supporting `URL`-objects officially, since it makes the API more consistent.

The following is an attempt to summarize the *current* situation, based on the actual code rather than the JSDocs:
 - `getDocument(""url string"")` works and is documented.[1]
 - `getDocument({ url: ""url string"", })` works and is documented.[1]
 - `getDocument(new URL(...))` throws immediately, since no supported parameters are found.
 - `getDocument({ url: new URL(...), })` actually works even though it's not documented.[1] Originally, when data was fetched on the worker-thread, this would likely have thrown since `URL` isn't clonable.[2]
 - `getDocument({ url: { abc: 123, }, })`, or some similarily meaningless input, will be ""accepted"" by `getDocument` and then throw a `MissingPDFException` when attempting to fetch the bogus data.

With the changes in this patch, not only is `URL`-objects now officially supported and documented when calling `getDocument`, but we'll also do a much better job at actually validating any URL-data passed to `getDocument` (and instead fail early).

---
[1] In *browsers*, we create a valid URL thus indirectly validating the input. In Node.js environments, on the other hand, no validation is done since obtaining a baseUrl is more difficult (and PDF.js is primarily written for browsers anyway).

[2] https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm#supported_types",False
27add0f1f3cc2fa1766169d5bf334649d7806bd4,2021-03-31 19:51:37,Jonas Jenwald,"Re-factor the `source` parsing, in `getDocument`, to use `switch` rather than `if...else`

Given the number of parameters that we now need to parse here, this code is no longer as readable as one would like. Hence this re-factoring, which will improve overall readability and also help with the next patch.",False
9c6770748c9a4898bd4a54b4724ae5b12a48b071,2021-03-31 19:51:22,Jonas Jenwald,"Move the `PDFDocumentStats` typedef closer to its usage

Currently this typedef appears slightly out-of-place, in the middle of the arguably much more important `getDocument` JSDocs.",False
b3528868c1f2d988e0036953c78866592288830c,2021-03-31 19:12:21,calixteman,"XFA - Add support for few ui elements (#13115)

- input;
  - layout;
  - border;
  - margin;
  - color.",False
3df24254e350f3d7beb5edfd612e697898c6cfd0,2021-03-31 18:39:18,Jonas Jenwald,"[api-minor] Stop exposing the *raw* `defaultAppearance`-string on Annotation-instances

The reasons for making this change are:
 - This property is not, nor has it ever been, used anywhere in the PDF.js display-layer.
 - Related to the previous point, the format of the `defaultAppearance`-string is such that it'd be difficult to use it as-is in the display-layer anyway.
 - It (usually) contains the ""raw"" appearance-string, from the PDF document, which is neither parsed nor validated and could thus be bogus.
 - We now expose a `defaultAppearanceData`-property, which is first of all used in the display-layer and secondly contains actually parsed/validated data.
 - In the event that a third-party implementation needs the `defaultAppearance`-string, it could be easily constructed from the recently added `defaultAppearanceData`-property.

All-in-all, I'm thus suggesting that we stop exposing an unused and unnecessary property on all Annotation-instances.",False
38acde837543d020ab88e40fcae0c29566b50efe,2021-03-31 18:10:21,Jonas Jenwald,"Use template strings, to reduce unnecessary verbosity in a few `warn(...)` calls in `src/core/annotation.js`",False
84d7cccb1d2d26215ba7bd346b03b7375f9c3880,2021-03-30 21:20:35,calixteman,"JS - Handle correctly hierarchy of fields (#13133)

* JS - Handle correctly hierarchy of fields
  - it aims to fix #13132;
  - annotations can inherit their actions from the parent field;
  - there are some fields which act as a container for other fields:
    - they can be access through js so need to add them with an empty type (nothing in the spec about that but checked in Acrobat);
    - calculation order list (CO) can reference them so need make them through this.getField;
    - getArray method must return kids.
  - field values are number, string, ... depending of their type but nothing in the spec on how to know what's the type:
    - according to the comment for Canonical Format: https://www.adobe.com/content/dam/acom/en/devnet/pdf/pdfs/PDF32000_2008.pdf#page=461
    - it seems that this ""type"" can be guessed from js action Format (when setting a type in Acrobat DC, the only affected thing is this action).
  - util.scand with an empty string returns the current date.",False
9e2572e4f837457af3a6beeac1feeeb62a2a046e,2021-03-30 17:20:58,dependabot[bot],"Bump y18n from 3.2.1 to 3.2.2

Bumps [y18n](https://github.com/yargs/y18n) from 3.2.1 to 3.2.2.
- [Release notes](https://github.com/yargs/y18n/releases)
- [Changelog](https://github.com/yargs/y18n/blob/master/CHANGELOG.md)
- [Commits](https://github.com/yargs/y18n/commits)

Signed-off-by: dependabot[bot] <support@github.com>",False
75a6b2fa13aa6270c4d3d357b8037a12a1a94426,2021-03-30 16:54:04,Jonas Jenwald,"Improve handling of *linked* test-cases for the unit/integration suites (#13160)

- Actually support *linked* test-cases in the integration-tests (in the same way as the unit-tests).

 - Add a new `""type"": ""other""`-kind to the test-manifest, to support *linked* test-cases in the unit/integration-tests without requiring the PDF document in question to also be a reference-test.",False
fa86a192f9b97434df2439285b7efe2862d8d07d,2021-03-29 21:30:36,Jonas Jenwald,"Remove the `URL` polyfill

Based on this compatibility information, given that IE 11 is now *explicitly* unsupported, we should no longer need to bundle a `URL` polyfill in any builds: https://developer.mozilla.org/en-US/docs/Web/API/URL/URL#browser_compatibility

Note that the caveat listed for older Safari-versions doesn't apply to any code in the PDF.js library, since we never call `new URL(url, undefined)` in the code-base.

Note also that Node.js has a web-compatible `URL` implementation, which according to the ""History"" section at https://nodejs.org/api/url.html#url_the_whatwg_url_api has been available since Node.js `10.0.0` (according to https://nodejs.org/en/about/releases/ that branch is one month away from being EOL-ed).",False
32b7bbaced73dae45ecdfe6d6a7c63d33e45b630,2021-03-28 21:45:17,Jonas Jenwald,"Remove the `file://`-URL special-case from `webViewerOpenFileViaURL`

Given that *all* data has been loaded on the main-thread, and then transferred to the worker-thread, ever since PR 8617 (almost four years ago) it should no longer be necessary to keep this special-case around.",False
0a03843e5fe2bb5bb6eae72b2945a4cc937993e5,2021-03-28 21:39:43,Jonas Jenwald,"Re-factor the pre-processor statements used with `webViewerOpenFileViaURL`

Given that the `webViewerOpenFileViaURL` helper function is being defined in *all* builds anyway, the current pre-processor usage doesn't really improve readability in my opinion.",False
14fc9db73d56d6b115fb0992ec38381ed7936f18,2021-03-28 21:06:51,Jonas Jenwald,"Prevent errors, in `PDFOutlineViewer._getPageNumberToDestHash`, for invalid `destRef` values (PR 12777 follow-up)

Currently `destRef === null`, which will only happen in documents with corrupt destinations, will (unsurprisingly) throw when trying to lookup the pageNumber. To avoid this, we can simply use the same format as in https://github.com/mozilla/pdf.js/blob/1a2cdaffc513385fc2f17d0e53d2643f92d5fa81/web/pdf_link_service.js#L128",False
1a2cdaffc513385fc2f17d0e53d2643f92d5fa81,2021-03-28 18:41:55,Tim van der Meij,"Merge pull request #13152 from calixteman/13130

Skip extra objects in object stream in using offsets",True
34542d814fe2dfeb901dfce634a21fbf38343cde,2021-03-28 18:35:07,Tim van der Meij,"Merge pull request #13155 from Snuffleupagus/rotation-normalization

Move rotation normalization from `PDFViewerApplication` and into `BaseViewer`",True
19c2dfbb96d0e54969d58e2071fee446db77b0f5,2021-03-28 17:49:58,Jonas Jenwald,"Move rotation normalization from `PDFViewerApplication` and into `BaseViewer`

The rotation handling that's currently living in `PDFViewerApplication` is *very* old, and pre-dates the introduction of the viewer components by years.
As can be seen in the `BaseViewer.pagesRotation` setter, we're not actually normalizing the rotation as intended and instead rely on the caller to handle that correctly. This is first of all inconsistent, given how other setters are implemented, and secondly it could also lead to the rotation being set to a value outside of the `[0, 360)`-range.

Finally, for improved consistency the rotation handling in `PageViewport` is updated similarly. Please note that this case, it's *not* changing the pre-existing logic.",False
68e0db735beb19ad2e81f4a7e35b64c0fdbfc2b6,2021-03-28 17:41:58,Tim van der Meij,"Merge pull request #13154 from calixteman/update_quickjs

Update quickjs to revision b5e62895c619d4ffc75c9d822c8d85f1ece77e5b",True
9296ee69862d2a5e4c3f2fea3af5df5e3dca5874,2021-03-28 16:33:05,Calixte Denizet,Skip extra objects in object stream in using offsets,False
a256948b30167e7a0569d37d3911e36da1770ca4,2021-03-28 16:13:46,Calixte Denizet,Update quickjs to revision b5e62895c619d4ffc75c9d822c8d85f1ece77e5b,False
ba76dd4000c0efa570558dd56d551b773bb4e856,2021-03-27 02:30:40,Tim van der Meij,"Merge pull request #13056 from Snuffleupagus/Doc-WillClose

Dispatch a ""Doc/WillClose"" event, when scripting is enabled, when closing the document",True
69c88d119d162ac141e3e209ce1c712e81ab9d95,2021-03-27 02:27:51,Tim van der Meij,"Merge pull request #13138 from Snuffleupagus/PDFHistory-pushPage-dest

[PDFHistory] Correctly simulate an internal destination in the `pushPage`-method (PR 12493 follow-up)",True
5bb163424ba52aa760034acf95c7cab8c2554036,2021-03-27 02:17:32,Tim van der Meij,"Merge pull request #13144 from Snuffleupagus/GrabToPan-matches

[GrabToPan] Use `Element.matches()` rather than prefixed `...matchesSelector` versions",True
b11b7aaa38ac661a0d36ff866f19107ca4e9130c,2021-03-27 02:07:51,Jonas Jenwald,"[GrabToPan] Use `Element.matches()` rather than prefixed `...matchesSelector` versions

At this point in time all of the browsers that PDF.js support now implements, with some margin based on the version numbers, `Element.matches()` according to the following compatibility information:
 - https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#browser_compatibility
 - https://caniuse.com/matchesselector",False
ebd2dfbae08be03435a0ecde461fa03a4bbd4316,2021-03-27 02:03:52,Tim van der Meij,"Merge pull request #13145 from emilio/print-oversized

print: Improve rendering of oversized pages.",True
0b6b8ef42b50794132fc01d7cc09332ca10f0396,2021-03-27 01:58:12,Tim van der Meij,"Merge pull request #13140 from Snuffleupagus/GrabToPan-cleanup

[GrabToPan] Remove more IE-specific code, and remove *unconditional* browser sniffing",True
81c602c61caf863c69a1e18854ac47c9eabf45db,2021-03-26 22:53:18,calixteman,Set CFF header to 4 when writing it because it contains 4 elements (#13149),False
81c7f905bcbd21f72ddb59455d469c8bc2e8df63,2021-03-26 20:37:49,Emilio Cobos Álvarez,"print: Improve rendering of oversized pages.

This improves and simplifies #13102 in order to make printing of test-cases
like the one in bug 1698414 (where the real page is bigger than the target
page) much better, see incoming screenshots.

The reason why we need to stop setting .style.width / .style.height is to get
the right auto-sizing behavior in both axes. This shouldn't change behavior as
long as the print resolution is >= the CSS resolution, which seems like a
reasonable assumption.

If you try to print with a lower resolution than CSS, then instead of an
stretched canvas, you'd get a centered CSS-quality canvas, which seems
sensible. This could maybe be fixed with some CSS hackery (some combination of
min / max and viewport units perhaps?), but I think it's more trouble than it's
worth.",False
34184a89f9e4e4b49a0333b5c99d67f999f9d922,2021-03-25 20:38:16,Jonas Jenwald,"Remove *unconditional* browser sniffing in `web/grab_to_pan.js`

According to https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons#browser_compatibility, and manual testing in an up-to-date version of Google Chrome, the *unconditional* browser sniffing in `web/grab_to_pan.js` is no longer necessary.
In particular, this code is definitely not necessary in MOZCENTRAL-builds.",False
3c3cbe78aebd67a32d5f01b5d7e844337a5df1c9,2021-03-25 20:38:12,Jonas Jenwald,"Remove the remaining IE-specific checks from `web/grab_to_pan.js` (PR 12328 follow-up)

Given that all versions of Internet Explorer are now *explicitly* unsupported, we can remove some more dead code in this file.",False
63471bcbbeee3fc1c6b1df988174640a124f097a,2021-03-25 17:32:39,calixteman,"XFA - Convert some template properties into CSS ones (#13082)

- implement few positioning properties: position, width, height, anchor;
  - implement font element;
  - implement fill element (used by font) and its children (linear, radial, ...);
  - font property is inherited from ancestor container (see https://www.pdfa.org/wp-content/uploads/2020/07/XFA-3_3.pdf#page=43) so let CSS handles that stuff;
  - in order to reduce the number of properties to set, only set non default properties and put the default in CSS;
  - set a background to some containers to be able to see them (will be removed in a future commit).",False
a10f87c7ead9514fbe030db6e2a6596c77deb820,2021-03-25 16:54:28,Jonas Jenwald,"[PDFHistory] Correctly simulate an internal destination in the `pushPage`-method (PR 12493 follow-up)

The intention, in PR 12493, was that the page we're adding to the browser history should behave as if it were a ""regular"" internal destination (to properly convey user intent).
Unfortunately, since I didn't consider all the edge-cases correctly, it ended up behaving like a URL-hash instead which obviously wasn't intended. Note that currently this isn't a problem, however it can become an issue (in some cases) with upcoming re-factoring around `PDFHistory` and OpenAction support[1].

---
[1] I've started working on fixing the following TODO, which will require a couple of smaller tweaks here and there: https://github.com/mozilla/pdf.js/blob/9d0ce6e79fc70b1b47d6320c8ee18fd6cbe8467d/web/app.js#L1680-L1681",False
685a60055efcf2847d592edb9851302e07bba022,2021-03-25 02:31:53,Jonas Jenwald,"[PDFHistory] Reduce unnecessary duplication, by introducing a helper-method for validating pageNumbers",False
9d0ce6e79fc70b1b47d6320c8ee18fd6cbe8467d,2021-03-25 01:17:45,Tim van der Meij,"Merge pull request #13128 from Snuffleupagus/BasePreferences-loops

Re-factor how the `BasePreferences.prefs`-property is initialized; remove some *indirect* loops",True
0ff92fb9c8ca009ccd60e2b031189f7de94b5614,2021-03-25 01:12:05,Tim van der Meij,"Merge pull request #13135 from eltociear/patch-1

Fix typo in pdf_history.js",True
0de15d59b86ff9bd6535bbff9bc338873c0dfdaa,2021-03-24 19:48:40,Ikko Ashimine,"Fix typo in pdf_history.js

occuring -> occurring",False
be521832115f42c58fc263cb6fb60a41d120bfd0,2021-03-22 19:08:05,Jonas Jenwald,"Remove some *indirect* loops in the `BasePreferences.getAll`-method

In the `getAll`-method, we can have just one *explicit* loop rather than two indirect ones via the old `Object.assign`-call.

Also, changes the `get`-method to be slightly more compact (while keeping the logic intact).",False
4b27f586257924363ca814426da8423298f40b45,2021-03-22 19:07:56,Jonas Jenwald,"Re-factor how the `BasePreferences.prefs`-property is initialized

Looking at this now, I cannot understand why we'd need to initialize `this.prefs` with all of the values from `this.defaults`.
Not only does this *indirectly* require one extra loop, via the `Object.assign`-call, but it also means that in GENERIC-builds changes to default-preference values might not be picked-up unless the the existing user-prefs are cleared (if the user had *manually* set prefs previously).",False
d426ffdad98106092a9fe138d7bce3aeda36fb69,2021-03-21 18:20:30,Tim van der Meij,"Merge pull request #13125 from Snuffleupagus/BaseViewer-enableXfa

Don't provide the `enableXfa` parameter to the `BaseViewer` constructor, and avoid the fallback bar with `enableXfa = true` set (PR 13069 follow-up)",True
8e736e4f98b0c79c3bb7540c2418f7750462e7cd,2021-03-21 18:18:00,Tim van der Meij,"Merge pull request #13126 from Snuffleupagus/update-packages

Update packages and translations",True
eeda2215d7ca5a3474aed29c15c8cd42d1cca7a9,2021-03-21 16:03:39,Jonas Jenwald,"Remove redundant `done`-callback functions from unit-tests which are `async`

For unit-tests which are asynchronous, using a `done`-callback is redundant and future Jasmine versions will stop supporting that pattern.",False
4814e23310ea743bb56980b7a25a9b934bf7fe0c,2021-03-21 15:42:20,Jonas Jenwald,"Add (temporary) Swedish localizations for the `page_landmark`/`loading` strings (PR 13118 follow-up)

I'm adding these temporary l10n strings, so that I don't have to stare at a bunch of warning messages in the web-console when using the development viewer.",False
36e79edfafe6137fbe666f3c632abf078a3398f3,2021-03-21 15:42:18,Jonas Jenwald,Update l10n files,False
3eb7a6b66fdbea44a2d23eec3404b75a7f2e37b2,2021-03-21 15:30:02,Jonas Jenwald,Update `npm` packages,False
35a088ffc1598dde8520dafa2cb2e1e9729d4c90,2021-03-21 15:22:01,Jonas Jenwald,"Don't provide the `enableXfa` parameter to the `BaseViewer` constructor, and avoid the fallback bar with `enableXfa = true` set (PR 13069 follow-up)

Given that the `enableXfa` parameter must to be passed to the API/Worker, and thus included in the `getDocument` call, it's not necessary to include it when initializing the `PDFViewer`-instance used in the default viewer. (Also, in `AppOptions`, the parameter is clearly marked with `OptionKind.API`.)

Furthermore, we probably don't want to display the fallback bar (in Firefox) for XFA documents when `enableXfa = true` is set.",False
c6b44d1516b9b7dd6d80ee2304477e6483e0cbdb,2021-03-20 23:10:29,Tim van der Meij,"Merge pull request #13117 from Snuffleupagus/defaultPreferences-builds

Re-factor the default preferences generation to support build targets (PR 10548)",True
39b485f69f603f92fe2803332c4e22a765cd85ed,2021-03-20 22:48:32,Tim van der Meij,"Merge pull request #13124 from Snuffleupagus/animationStarted-Node

Tweak the pre-processor condition, for Node.js environments, in the `animationStarted` helper (issue 13057)",True
71e61c3533b40017306f88f2ac8dc582f6298500,2021-03-20 18:04:38,Jonas Jenwald,"Tweak the pre-processor condition, for Node.js environments, in the `animationStarted` helper (issue 13057)

While it's still not entirely clear if this would've prevented the issue as reported, given that the particular use-case reported apparently no longer applies, this small change really cannot hurt in general *and* it won't effect ""regular"" viewer builds in any way.",False
7bcfabc43c7ca306580570d9996f20bb5e5bdd8a,2021-03-20 17:42:09,Jonas Jenwald,"Fix an edge-case related to compatibility-values in various `AppOptions`-methods

Given how the compatibility-values are being handled, it's not actually possible to override a *truthy* default-value with a *falsy* compatibility-value.
This is a simple oversight on my part, and with modern ECMAScript features this is very easy to support.",False
18bc59eb3470aba0b72fd2714e7f341b3d6cfaa7,2021-03-20 17:42:09,Jonas Jenwald,"[Chromium extension] Remove the special handling of the ""disableTelemetry"" preference

With the changes made in the previous patch, we can now list ""disableTelemetry"" in the `AppOptions` only for the `CHROME`-builds and thus remove the special-casing in the `checkChromePreferencesFile` helper function.",False
b48dc061482363142930048f59c01bb43b82180e,2021-03-20 17:42:09,Jonas Jenwald,"[gulpfile] Move common functionality, in `buildLib` and `buildDefaultPreferences`, to a helper function

Currently there's a lot of duplication in the `buildLib` and `buildDefaultPreferences` functions, which seem quite unfortunate. Hence this patch extracts the common functionality in a new `buildLibHelper` function instead.",False
56e1d7746a70fd22dafc0a302bd4b884748ed686,2021-03-20 16:20:48,Jonas Jenwald,"Re-factor the default preferences generation to support build targets (PR 10548)

Originally the default preferences where simply placed in a JSON-file, checked into the repository, which over time became impractical, annoying, and error-prone to maintain; please see PR 10548.
While that improved the overall situation a fair bit, it however inherited one quite unfortunate property of the old JSON-based solution[1]: It's still not possible for *different* build targets to specify their *own* default preference values.

With some preferences, such as e.g. `enableScripting`, it's not inconceivable that you'd want to (at least) support build-specific default preference values. Currently that's not really possible, which is why this PR re-factors the default preferences generation to support this.

---
[1] This fact isn't really clear from the `AppOptions` implementation, unless you're familiar with the `gulpfile.js` code, which could lead to some confusion for those new to this part of the code-base.",False
d775616fd4d1360490e2a9118a1468769a4a1967,2021-03-20 03:47:55,Tim van der Meij,"Merge pull request #13118 from brendandahl/page-aria

Add landmark region and aria-label for each page.",True
8269ddbd16455c4c6928b9b3828f9cc981997827,2021-03-20 03:33:20,Tim van der Meij,"Merge pull request #13105 from Snuffleupagus/BasePdfManager-parseDocBaseUrl

Improve memory usage around the `BasePdfManager.docBaseUrl` parameter (PR 7689 follow-up)",True
e7e0ecf9c89be1fad60943307aebff114189d458,2021-03-20 03:22:15,Tim van der Meij,"Merge pull request #13113 from Snuffleupagus/scripting-PresentationMode-events

Ignore some *scripting* events which don't make sense in PresentationMode",True
92d3a938975eb89aa5998d035545ae758ef10a6e,2021-03-20 03:18:57,Tim van der Meij,"Merge pull request #13116 from Snuffleupagus/enableScripting-true

Enable scripting by default in the viewer (PR 13053 follow-up)",True
8a820ac1510b597f5d9f1e8f56ae817ec693dd3e,2021-03-20 03:15:56,Tim van der Meij,"Merge pull request #13120 from Snuffleupagus/enablePrintAutoRotate-true

Rotate landscape pages, during printing, by default in the viewer (`enablePrintAutoRotate = true`)",True
9fb0f3b0dac3a3c572b3cffada45ecdc1a2eee8e,2021-03-20 02:43:51,Brendan Dahl,"Add landmark region and aria-label for each page.

Allows screen readers to jump landmarks and announce
the page. Since landmarks must have content, I also added
aria labels for the loading images.",False
1fa5ce7f48f43d720fe81d6426fae7b4c905a884,2021-03-19 18:24:21,Jonas Jenwald,"Ignore some *scripting* events which don't make sense in PresentationMode

A number of the currently supported *scripting* events only make sense in the ""normal"" viewer mode, and not when PresentationMode is active. For example:
 - Changing the zoom-level will outright break rendering in PresentationMode, since it relies on ""page-fit"" being used.
 - Focusing a particular (AcroForm) element won't work, and could break keyboard navigation, since forms should not be editable in PresentationMode (see issue 12232).",False
30c06849d81358c0372abcdb5b741e931a60cd00,2021-03-19 17:09:37,Jonas Jenwald,"Rotate landscape pages, during printing, by default in the viewer (`enablePrintAutoRotate = true`)

While this will perhaps not be perfect for *every* PDF document with mixed page orientation, based on the large number of bugs/issues seen over the years I'm however pretty convinced that it'll be an overall improvement in a majority of cases.

In order to improve things further, we'd probably need Firefox to support e.g. `@page` such that the viewer can provide better information to the print engine.",False
1de466896d123486bdffd06bfbbd5735f5792d5b,2021-03-19 17:08:46,Jonas Jenwald,"Remove one loop from `BaseViewer.getPagesOverview`

Currently, with `enablePrintAutoRotate = true` set, we're forced to loop through all the pages *twice* when checking for any landscape pages.
This seems completely unnecessary now, and using only *one* loop should be marginally more efficient in general.",False
3ce94a9f6d2fa5ca78ca15e09e3775b6f517e9c9,2021-03-19 17:07:57,Jonas Jenwald,"Change how landscape pages are rotated, for printing, with `enablePrintAutoRotate = true` set

Currently landscape pages are rotated *clockwise*, which for most documents feel wrong since holding the printed pages at their *left* edge causes the landscape pages to be viewed ""upside down"".
In general, since most documents are LTR ones, it feels more appropriate to instead rotate landscape pages *counterclockwise* for printing.",False
57e7557235c4f47ec150a28fc62d9daaf4c2b9b5,2021-03-19 16:01:54,Jonas Jenwald,"Actually reset the `PDFPageProxy._xfaPromise` property as intended (PR 13069 follow-up) (#13119)

Similar to the existing `annotationsPromise` and `_jsActionsPromise` properties, the new `_xfaPromise` should obviously also be reset, since otherwise you might end up holding onto a lot of data for pages that are no longer active.

(That caching wasn't present in the original version of PR 13069, which is why I didn't spot it until now.)",False
24e598a895b712cbfa1f34deb12bb2c0f3575fee,2021-03-19 14:41:40,calixteman,"XFA - Add a layer to display XFA forms (#13069)

- add an option to enable XFA rendering if any;
  - for now, let the canvas layer: it could be useful to implement XFAF forms (embedded pdf in xml stream for the background and xfa form for the foreground);
  - ui elements in template DOM are pretty close to their html counterpart so we generate a fake html DOM from template one:
    - it makes easier to translate template properties to html ones;
    - it makes faster the creation of the html element in the main thread.",False
2d727e6e68c14f329680e2c9cba020fa63f88602,2021-03-18 01:44:08,Jonas Jenwald,"Enable scripting by default in the viewer (PR 13053 follow-up)

Given that https://bugzilla.mozilla.org/show_bug.cgi?id=1699219 has enabled scripting for all Firefox-channels, it seems reasonable to simply set `enableScripting = true` unconditionally in the viewer preferences/options.

For now, this patch leaves the standalone viewer-components alone (such as e.g. `BaseViewer`), and if those are used scripting will thus have to be manually enabled (see e.g. the ""simpleviewer""/""singlepageviewer"" examples).",False
c4c72161718f87bd5bce96a396f55c5c8db75fc6,2021-03-17 20:18:24,Jonas Jenwald,"Improve memory usage around the `BasePdfManager.docBaseUrl` parameter (PR 7689 follow-up)

While there is nothing *outright* wrong with the existing implementation, it can however lead to increased memory usage in one particular case (that I completely overlooked when implementing this):
For ""data:""-URLs, which by definition contains the entire PDF document and can thus be arbitrarily large, we obviously want to avoid sending, storing, and/or logging the ""raw"" docBaseUrl in that case.

To address this, this patch makes the following changes:
 - Ignore any non-string in the `docBaseUrl` option passed to `getDocument`, since those are unsupported anyway, already on the main-thread.

 - Ignore ""data:""-URLs in the `docBaseUrl` option passed to `getDocument`, to avoid having to send what could potentially be a *very* long string to the worker-thread.

 - Parse the `docBaseUrl` option *directly* in the `BasePdfManager`-constructors, on the worker-thread, to avoid having to store the ""raw"" docBaseUrl in the first place.",False
bd9dee15448eb02aadc40725208c80b62a28d3a8,2021-03-17 20:18:24,Jonas Jenwald,"Move the `getPdfFilenameFromUrl` helper function from `web/ui_utils.js` and into `src/display/display_utils.js`

It seems reasonable to place this alongside the *similar* `getFilenameFromUrl` helper function. This way, with the changes in the next patch, we also avoid having to expose the `isDataScheme` function in the API itself and we instead expose `getPdfFilenameFromUrl` in the API (which feels overall more appropriate).",False
a164941351817b13ddc32bfbc88c3e9f901e8d89,2021-03-17 00:17:21,Tim van der Meij,"Merge pull request #13106 from Snuffleupagus/LineAnnotation-empty-Rect

Support `LineAnnotation`s with empty /Rect-entries (issue 6564)",True
d92b77e87f9ffb1fc9916ca18be7e6f36f2009ad,2021-03-16 18:52:39,Jonas Jenwald,"Ensure that printing, triggered from scripting, won't accidentally throw in `PDFScriptingManager._updateFromSandbox` (#13104)

The issue that this patch fixes is extremely unlikely, but still theoretically possible, and I really should've caught this earlier.
Note how `BaseViewer.pagesPromise` will only be defined when a document is active, see below, and that if a printing event (triggered from scripting) arrives while the document is been closed there's a small chance that the promise isn't defined.

https://github.com/mozilla/pdf.js/blob/eb92ed12f202de4cc8b0060aac1f1a06b26f83a4/web/base_viewer.js#L426-L428",False
dd3797a325925508abae2ae7599547a65cde90cc,2021-03-16 07:21:42,Brendan Dahl,"Merge pull request #13102 from emilio/print-small-page

print: RFC: Center when printing a PDF with smaller size than the output page.",True
5099f1977f72aeb8dee2cf1a29d42f5008fe7e27,2021-03-15 21:03:43,Jonas Jenwald,"Support `LineAnnotation`s with empty /Rect-entries (issue 6564)

This extends PR 13033 slightly, with a heuristic to support corrupt PDF documents where the `LineAnnotation`s have an empty /Rect-entry. Please note that while I have no idea if this is ""correct"", this patch at least makes us output the same /BBox as re-saving in Adobe Reader does.",False
1d70bfe6e62730263022b19df948eac0dfcb3fba,2021-03-15 14:21:53,Emilio Cobos Álvarez,"print: RFC: Center when printing a PDF with smaller size than the output page.

This builds on top of #13100, but this changes printing behavior intentionally
so I thought it was worth discussing separately, to improve the rendering on
test-cases like the one in https://bugzil.la/1697778.

This matches what e.g.  Evince does when you print the PDF in there on an A4
printer.

We use margins to center horizontally, and flex to center vertically. The
reasoning for this is that it should have better browser support (though maybe
pdf.js no longer supports browsers without flex support?) and it's just as
simple.",False
eb92ed12f202de4cc8b0060aac1f1a06b26f83a4,2021-03-14 20:23:50,Tim van der Meij,"Merge pull request #13100 from emilio/container-overflow

print: Ensure print containers have the right size and don't create overflow.",True
93c062669c8a199f48564a372d89296ff3e87b96,2021-03-14 19:59:40,Tim van der Meij,"Merge pull request #13101 from emilio/print-bogus-supports

print: Remove invalid @supports condition.",True
b932eaf6a79d8fc3dd28bcd8e5e509a7fe06a4ac,2021-03-14 19:45:04,Emilio Cobos Álvarez,"print: Remove invalid @supports condition.

@supports() is not supposed to report support for page descriptors, this is
depending on a Chromium bug, which doesn't treat as invalid:

```
<div style=""size: 1pt 1pt"">
```

Even though it should. That is
https://bugs.chromium.org/p/chromium/issues/detail?id=1079214

There's no need to use @supports for this. If the descriptor is not accepted it
will just be ignored.

That way, when Firefox implements @page { size }, which is in progress, it will
get the right behavior.",False
baed09f1ffcafd3f3f916e87e60f21ff057ce93a,2021-03-14 19:19:46,Emilio Cobos Álvarez,"print: Ensure print containers have the right size and don't create overflow.

First, there's just no need to do something like this, this is simpler and
closer to what the screen renderer does.

Second, this causes overflow, which Firefox tries to compensate for when
fitting to page width, and fails at it. That is tracked in:

https://bugzilla.mozilla.org/show_bug.cgi?id=1698136

But this bug works around it by not causing overflow.

For modern browsers, we could avoid the duplication setting the style attribute
by using something like width: min/max-content, but this is not a big deal I
think, let me know if you'd prefer that.

Also I had to add a max-height for Chromium not to create extra pages. This
is harmless in Firefox and workarounds the Chromium bug, so so be it.",False
7fef896a9fba6366b22da70747d8eff273ba47e9,2021-03-14 16:29:09,Tim van der Meij,"Merge pull request #13094 from timvandermeij/no-var-src

Enable the `no-var` linting rule for `src/core/{operator_list, pattern}.js`",True
6df8f301cd80659f085fd85094f2df074170c169,2021-03-14 16:23:52,Tim van der Meij,"Merge pull request #13098 from Snuffleupagus/eslint-no-var-external

Enable the ESLint `no-var` rule in the `external/` folder",True
a2f0573a640aa0611157636cc473176bf1dd3d2d,2021-03-14 16:19:31,Tim van der Meij,"Enable the `no-var` linting rule for `src/core/operator_list.js`

This is mostly done using `gulp lint --fix` with a few manual changes in
the following diff:

```diff
diff --git a/src/core/operator_list.js b/src/core/operator_list.js
index 66c26fe05..cbcd12d97 100644
--- a/src/core/operator_list.js
+++ b/src/core/operator_list.js
@@ -40,7 +40,8 @@ const QueueOptimizer = (function QueueOptimizerClosure() {
     // 'count' groups of (save, transform, paintImageMaskXObject, restore)+
     // have been found at iFirstSave.
     const iFirstPIMXO = iFirstSave + 2;
-    for (var i = 0; i < count; i++) {
+    let i;
+    for (i = 0; i < count; i++) {
       const arg = argsArray[iFirstPIMXO + 4 * i];
       const imageMask = arg.length === 1 && arg[0];
       if (
@@ -106,8 +107,8 @@ const QueueOptimizer = (function QueueOptimizerClosure() {
       // assuming that heights of those image is too small (~1 pixel)
       // packing as much as possible by lines
       let maxX = 0;
-      let map = [],
-        maxLineHeight = 0;
+      const map = [];
+      let maxLineHeight = 0;
       let currentX = IMAGE_PADDING,
         currentY = IMAGE_PADDING;
       let q;
@@ -326,9 +327,9 @@ const QueueOptimizer = (function QueueOptimizerClosure() {
           if (fnArray[i] !== OPS.transform) {
             return false;
           }
-          var iFirstTransform = context.iCurr - 2;
-          var firstTransformArg0 = argsArray[iFirstTransform][0];
-          var firstTransformArg3 = argsArray[iFirstTransform][3];
+          const iFirstTransform = context.iCurr - 2;
+          const firstTransformArg0 = argsArray[iFirstTransform][0];
+          const firstTransformArg3 = argsArray[iFirstTransform][3];
           if (
             argsArray[i][0] !== firstTransformArg0 ||
             argsArray[i][1] !== 0 ||
@@ -342,8 +343,8 @@ const QueueOptimizer = (function QueueOptimizerClosure() {
           if (fnArray[i] !== OPS.paintImageXObject) {
             return false;
           }
-          var iFirstPIXO = context.iCurr - 1;
-          var firstPIXOArg0 = argsArray[iFirstPIXO][0];
+          const iFirstPIXO = context.iCurr - 1;
+          const firstPIXOArg0 = argsArray[iFirstPIXO][0];
           if (argsArray[i][0] !== firstPIXOArg0) {
             return false; // images don't match
           }
@@ -423,9 +424,9 @@ const QueueOptimizer = (function QueueOptimizerClosure() {
           if (fnArray[i] !== OPS.showText) {
             return false;
           }
-          var iFirstSetFont = context.iCurr - 3;
-          var firstSetFontArg0 = argsArray[iFirstSetFont][0];
-          var firstSetFontArg1 = argsArray[iFirstSetFont][1];
+          const iFirstSetFont = context.iCurr - 3;
+          const firstSetFontArg0 = argsArray[iFirstSetFont][0];
+          const firstSetFontArg1 = argsArray[iFirstSetFont][1];
           if (
             argsArray[i][0] !== firstSetFontArg0 ||
             argsArray[i][1] !== firstSetFontArg1
```",False
96d2a2f795805c8bbb7d0d27e37c4fd9b4665003,2021-03-14 16:13:25,Jonas Jenwald,"Enable the ESLint `no-var` rule in the `external/` folder

These changes were done automatically, by using the `gulp lint --fix` command.",False
24ff738e7b990fe9c5ce7461bfc2bf70096ed9d8,2021-03-14 16:13:05,Tim van der Meij,"Enable the `no-var` linting rule for `src/core/pattern.js`

This is mostly done using `gulp lint --fix` with a few manual changes in
the following diff:

```diff
diff --git a/src/core/pattern.js b/src/core/pattern.js
index 365491ed3..eedd8b686 100644
--- a/src/core/pattern.js
+++ b/src/core/pattern.js
@@ -105,7 +105,7 @@ const Pattern = (function PatternClosure() {
   return Pattern;
 })();

-var Shadings = {};
+const Shadings = {};

 // A small number to offset the first/last color stops so we can insert ones to
 // support extend. Number.MIN_VALUE is too small and breaks the extend.
@@ -597,16 +597,15 @@ Shadings.Mesh = (function MeshClosure() {
       if (!(0 <= f && f <= 3)) {
         throw new FormatError(""Unknown type6 flag"");
       }
-      var i, ii;
       const pi = coords.length;
-      for (i = 0, ii = f !== 0 ? 8 : 12; i < ii; i++) {
+      for (let i = 0, ii = f !== 0 ? 8 : 12; i < ii; i++) {
         coords.push(reader.readCoordinate());
       }
       const ci = colors.length;
-      for (i = 0, ii = f !== 0 ? 2 : 4; i < ii; i++) {
+      for (let i = 0, ii = f !== 0 ? 2 : 4; i < ii; i++) {
         colors.push(reader.readComponents());
       }
-      var tmp1, tmp2, tmp3, tmp4;
+      let tmp1, tmp2, tmp3, tmp4;
       switch (f) {
         // prettier-ignore
         case 0:
@@ -729,16 +728,15 @@ Shadings.Mesh = (function MeshClosure() {
       if (!(0 <= f && f <= 3)) {
         throw new FormatError(""Unknown type7 flag"");
       }
-      var i, ii;
       const pi = coords.length;
-      for (i = 0, ii = f !== 0 ? 12 : 16; i < ii; i++) {
+      for (let i = 0, ii = f !== 0 ? 12 : 16; i < ii; i++) {
         coords.push(reader.readCoordinate());
       }
       const ci = colors.length;
-      for (i = 0, ii = f !== 0 ? 2 : 4; i < ii; i++) {
+      for (let i = 0, ii = f !== 0 ? 2 : 4; i < ii; i++) {
         colors.push(reader.readComponents());
       }
-      var tmp1, tmp2, tmp3, tmp4;
+      let tmp1, tmp2, tmp3, tmp4;
       switch (f) {
         // prettier-ignore
         case 0:
@@ -897,7 +895,7 @@ Shadings.Mesh = (function MeshClosure() {
         decodeType4Shading(this, reader);
         break;
       case ShadingType.LATTICE_FORM_MESH:
-        var verticesPerRow = dict.get(""VerticesPerRow"") | 0;
+        const verticesPerRow = dict.get(""VerticesPerRow"") | 0;
         if (verticesPerRow < 2) {
           throw new FormatError(""Invalid VerticesPerRow"");
         }
```",False
67b866b9ed10ee9863fa2d6a11b2910956d1c7ab,2021-03-14 16:10:50,Tim van der Meij,"Merge pull request #13095 from Snuffleupagus/eslint-cmapscompress

Enable linting of the `external/cmapscompress/` folder",True
cc59c81fe6aa5dca130abf2902b0787d15b6edc4,2021-03-14 16:04:06,Tim van der Meij,"Merge pull request #13096 from Snuffleupagus/eslint-no-var-stats

Enable the ESLint `no-var` rule in the `test/stats/` folder",True
0ad9265555b42ed30cd27c087ea5f311fa6faa91,2021-03-14 16:01:55,Tim van der Meij,"Merge pull request #13097 from Snuffleupagus/eslint-no-var-add_test

Enable the ESLint `no-var` rule in `test/add_test.js`",True
7ec2bd0f01d7fa59ea1f23f2ae127b3436914549,2021-03-14 14:55:51,Jonas Jenwald,"Enable the ESLint `no-var` rule in `test/add_test.js`

These changes were done automatically, by using the `gulp lint --fix` command.",False
473f0aeeb27abd7fc5dc5f3b369ee7b8308922ac,2021-03-14 14:45:45,Jonas Jenwald,"Enable the ESLint `no-var` rule in the `test/stats/` folder

Note that the majority of these changes were done automatically, by using the `gulp lint --fix` command, and the manual changes were limited to the following diff:

```diff
diff --git a/test/stats/statcmp.js b/test/stats/statcmp.js
index 7c4dbf1d3..22d535a5a 100644
--- a/test/stats/statcmp.js
+++ b/test/stats/statcmp.js
@@ -1,13 +1,7 @@
 ""use strict"";

 const fs = require(""fs"");
-
-try {
-  var ttest = require(""ttest"");
-} catch (e) {
-  console.log('\nttest is not installed -- to intall, run ""npm install ttest""');
-  console.log(""Continuing without significance test...\n"");
-}
+const ttest = require(""ttest"");

 const VALID_GROUP_BYS = [""browser"", ""pdf"", ""page"", ""round"", ""stat""];

@@ -134,9 +128,7 @@ function stat(baseline, current) {
   if (ttest) {
     labels.push(""Result(P<.05)"");
   }
-  let i,
-    row,
-    rows = [];
+  const rows = [];
   // collect rows and measure column widths
   const width = labels.map(function (s) {
     return s.length;
@@ -146,7 +138,7 @@ function stat(baseline, current) {
     const key = keys[k];
     const baselineMean = mean(baselineGroup[key]);
     const currentMean = mean(currentGroup[key]);
-    row = key.split("","");
+    const row = key.split("","");
     row.push(
       """" + baselineGroup[key].length,
       """" + Math.round(baselineMean),
@@ -165,7 +157,7 @@ function stat(baseline, current) {
         row.push("""");
       }
     }
-    for (i = 0; i < row.length; i++) {
+    for (let i = 0; i < row.length; i++) {
       width[i] = Math.max(width[i], row[i].length);
     }
     rows.push(row);
@@ -181,8 +173,8 @@ function stat(baseline, current) {
   console.log(""-- Grouped By "" + options.groupBy.join("", "") + "" --"");
   const groupCount = options.groupBy.length;
   for (let r = 0; r < rows.length; r++) {
-    row = rows[r];
-    for (i = 0; i < row.length; i++) {
+    const row = rows[r];
+    for (let i = 0; i < row.length; i++) {
       row[i] = pad(row[i], width[i], i < groupCount ? ""right"" : ""left"");
     }
     console.log(row.join("" | ""));
@@ -208,5 +200,5 @@ function main() {
   stat(baseline, current);
 }

-var options = parseOptions();
+const options = parseOptions();
 main();
```",False
98e658ddf01b62c2e3755700467d501c55f57d5d,2021-03-14 00:02:58,Jonas Jenwald,"Enable linting of the `external/cmapscompress/` folder

Given that this our ""own"" code, there's no good reason as far as I'm concerned to not lint it.",False
b9f4d89254976a946f48b4a46024f41cf9c24e8c,2021-03-13 23:54:23,Jonas Jenwald,"Fix *most* linting/formatting issues in the `external/cmapscompress/` folder

These changes were done automatically, by using the `gulp lint --fix` command, in preparation for the next patch.",False
c86f44f4233b892de6c5ea2882ca88d0e7d6d003,2021-03-13 23:22:18,Tim van der Meij,"Merge pull request #13093 from Snuffleupagus/eslint-no-var-builder

Enable the ESLint `no-var` rule in the `external/builder/` folder",True
f0f307a4b573849e3da39e178a0ad93607305d2c,2021-03-13 22:20:13,Jonas Jenwald,"Enable the ESLint `no-var` rule in the `external/builder/` folder

As part of testing this, I've diffed the output of `gulp mozcentral` with/without this patch and the *only* difference is the incremented `version`/`build` numbers.",False
06494ccdac5158e4b813cd2fc20a01e2ccfa0edc,2021-03-13 22:17:58,Jonas Jenwald,"Replace *most* cases of `var` with `let`/`const` in the `external/builder/` folder

These changes were done automatically, by using the `gulp lint --fix` command, in preparation for the next patch.",False
fb78604383d205bc81747fcb1597ea2f2e854783,2021-03-13 22:09:53,Tim van der Meij,"Merge pull request #13091 from Snuffleupagus/eslint-no-var

Enable the ESLint `no-var` rule globally",True
6b9795851192f92875ecfb812350a99d3826a5bd,2021-03-13 22:04:05,Tim van der Meij,"Merge pull request #13092 from Snuffleupagus/eslint-no-var-importL10n

Enable the ESLint `no-var` rule in the `importL10n/` folder",True
2ffa428d78f53d049b6246483b571557392e6f2d,2021-03-13 21:53:41,Jonas Jenwald,Enable the ESLint `no-var` rule in the `importL10n/` folder,False
5b5061afa8509ded83e0fad8197abf917db1a55e,2021-03-13 20:42:53,Jonas Jenwald,"Enable the ESLint `no-var` rule globally

A significant portion of the code-base has now been converted to use `let`/`const`, rather than `var`, hence it should be possible to simply enable the ESLint `no-var` rule globally.
This way we can ensure that new code won't accidentally use `var`, and it also removes the need to manually enable the rule in various folders.

Obviously it makes sense to continue the efforts to replace `var`, but that should probably happen on a file and/or folder basis.

Please note that this patch excludes the following code:
 - The `extensions/` folder, since that seemed easiest for now (and I don't know exactly what the support situation is for the Chromium-extension).

 - The entire `external/` folder is ignored, since most of it's currently excluded from linting.
   For the code that isn't imported from elsewhere (and should be ignored), we should probably (at some point) bring the code up to the same linting/formatting standard as the rest of the code-base.

 - Various files in the `test/` folder are ignored, as necessary, since the way that a lot of this code is loaded will require some care (or perhaps larger re-factoring) when removing `var` usage.",False
412f01aeaf69821daa957203c86dae3f45db46f1,2021-03-13 17:51:05,Jonas Jenwald,"Dispatch a ""Doc/WillClose"" event, when scripting is enabled, when closing the document

This event is mentioned in the specification, see https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/AcrobatDC_js_api_reference.pdf#G5.1963176, and it's also listed as a valid type in https://github.com/mozilla/pdf.js/blob/fb87704b386bdc940ceef4eff31b1374432a6122/src/shared/util.js#L164-L170

Since we're already dispatching a ""PageClose"" event in this case, it seems reasonable to *also* dispatch a ""Doc/WillClose"" event as well.",False
17c0bf04734d5739332b327a4e96770d06bc6df3,2021-03-13 17:45:53,Tim van der Meij,"Merge pull request #13084 from Snuffleupagus/type1-class

Enable the ESLint `no-var` rule in a few font-parsing files, and convert `src/core/type1_parser.js` to use ""standard"" classes",True
1abdcbaab58d2877183e6ec86d24f5d0842170be,2021-03-13 17:34:00,Tim van der Meij,"Merge pull request #13087 from Snuffleupagus/eslint-examples-no-var

Enable the ESLint `no-var` rule in the `examples/` folder",True
ba567321da062dfef879ecaa105ab4f036df3a42,2021-03-13 17:28:29,Tim van der Meij,"Merge pull request #13079 from Snuffleupagus/issue-13075

Ensure that `getDocument` handles Node.js `Buffer`s more gracefully (issue 13075)",True
6ae81255bcfb3103bd18a350785aff2ff4aec329,2021-03-13 17:25:34,Tim van der Meij,"Merge pull request #13090 from Snuffleupagus/eslint-no-var-gulpfile

Enable the ESLint `no-var` rule in `gulpfile.js`",True
22e0ed51c648e28f67621520388044b81cdadee4,2021-03-13 16:20:11,Jonas Jenwald,"Remove unnecessary `/* eslint no-var: error */` lines in the `test/unit/` folder (PR 12528 follow-up)

These lines are no longer needed, since the ESLint `no-var` rule has been enabled in the entire folder.",False
f58fee0956d96cb08b069da2b06a8a915a995b42,2021-03-13 16:17:06,Jonas Jenwald,"Enable the ESLint `no-var` rule in `gulpfile.js`

Given that `let`/`const` is already used here and there in this file, converting the rest of the `var` occurrences shouldn't be a problem.

Note that the majority of these changes were done automatically, by using the `gulp lint --fix` command, and the manual changes were limited to the following diff:

```diff
diff --git a/gulpfile.js b/gulpfile.js
index e2360c8ec..905420c33 100644
--- a/gulpfile.js
+++ b/gulpfile.js
@@ -676,8 +676,8 @@ gulp.task(""default_preferences-pre"", function () {
       ],
     }).code;
   }
-  var babel = require(""@babel/core"");
-  var ctx = {
+  const babel = require(""@babel/core"");
+  const ctx = {
     rootPath: __dirname,
     saveComments: false,
     defines: builder.merge(DEFINES, {
@@ -690,7 +690,7 @@ gulp.task(""default_preferences-pre"", function () {
       ""pdfjs-lib"": ""../pdf"",
     },
   };
-  var preprocessor2 = require(""./external/builder/preprocessor2.js"");
+  const preprocessor2 = require(""./external/builder/preprocessor2.js"");
   return merge([
     gulp.src([""web/{app_options,viewer_compatibility}.js""], {
       base: ""."",
@@ -1418,14 +1418,14 @@ function buildLib(defines, dir) {
     });
     return licenseHeaderLibre + content;
   }
-  var babel = require(""@babel/core"");
+  const babel = require(""@babel/core"");
   const versionInfo = getVersionJSON();
-  var bundleDefines = builder.merge(defines, {
+  const bundleDefines = builder.merge(defines, {
     BUNDLE_VERSION: versionInfo.version,
     BUNDLE_BUILD: versionInfo.commit,
     TESTING: process.env.TESTING === ""true"",
   });
-  var ctx = {
+  const ctx = {
     rootPath: __dirname,
     saveComments: false,
     defines: bundleDefines,
@@ -1433,10 +1433,10 @@ function buildLib(defines, dir) {
       ""pdfjs-lib"": ""../pdf"",
     },
   };
-  var licenseHeaderLibre = fs
+  const licenseHeaderLibre = fs
     .readFileSync(""./src/license_header_libre.js"")
     .toString();
-  var preprocessor2 = require(""./external/builder/preprocessor2.js"");
+  const preprocessor2 = require(""./external/builder/preprocessor2.js"");
   return merge([
     gulp.src(
       [
```",False
50681d71c8f629c5785590fd853c1a74a1ce5e2d,2021-03-13 15:22:38,Jonas Jenwald,"Ensure that `getDocument` handles Node.js `Buffer`s more gracefully (issue 13075)

While the JSDocs have never advertised `getDocument` as supporting Node.js `Buffer`s, that apparently doesn't stop users from passing such data structures to `getDocument`.
In theory the existing `instanceof Uint8Array` check ought to have caught Node.js `Buffer`s, however for reasons that I don't even pretend to understand that check actually passes. Hence this patch which, *only* in Node.js environments, will special-case `Buffer`s to hopefully provide a slightly better out-of-the-box behaviour in Node.js environments[1].

---
[1] Although I'm not sure that we necessarily want to advertise this in the JSDocs, given the specialized use-case.",False
61318c42aac7bd2085c1f245318e5ed970949f4a,2021-03-13 01:46:16,Tim van der Meij,"Merge pull request #13085 from Snuffleupagus/driver-rasterize-errors

Ensure that *all* errors are handled in `rasterizeTextLayer`/`rasterizeAnnotationLayer`",True
be4a41960a8934def460934d70d2c2d01b24e4c0,2021-03-13 01:42:03,Tim van der Meij,"Merge pull request #13081 from Snuffleupagus/objectFromMap

Replace the `objectFromEntries` helper function with an `objectFromMap` one instead, and simplify the data lookup in the AnnotationStorage.getValue method",True
6af9b6449e701d6b397d1286857c2e8b4ae4d781,2021-03-13 01:38:05,Tim van der Meij,"Merge pull request #13074 from Snuffleupagus/scripting-refactor-destroy

Re-factor the `PDFScriptingManager._destroyScripting` method (PR 13042 follow-up)",True
d144d01afe91e025621af7627645abaafdca9e87,2021-03-12 22:22:58,Jonas Jenwald,"Simplify the `animationStarted` handling in the `mobile-viewer/` example

(This is something that I happened to notice while working on the previous patch.)

The code in the `examples/mobile-viewer/viewer.js` file is essentially copied from an older version of the default viewer, hence we can slightly simplify the `animationStarted` handling here.",False
5c712f2131346fcdde202408af1378fe7e3cb6f3,2021-03-12 22:22:52,Jonas Jenwald,"Enable the ESLint `no-var` rule in the `examples/` folder

Updating the examples to use `let`/`const` should be fine, given that they are available in all browsers/platforms that the PDF.js library now supports; please note the following compatibility information:

 - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const#browser_compatibility",False
276fa4ad8ffde8a05a2f4b60e713e68ec31608aa,2021-03-12 21:46:59,Jonas Jenwald,"Replace *most* cases of `var` with `let`/`const` in the `examples/` folder

These changes were done automatically, by using the `gulp lint --fix` command, in preparation for the next patch.",False
39cd844243df690d35c05b83b064ed1023192999,2021-03-12 18:35:53,Jonas Jenwald,"Ensure that *all* errors are handled in `rasterizeTextLayer`/`rasterizeAnnotationLayer`

Currently errors occurring within the `src/display/{text_layer, annotation_layer}.js` files are not being handled properly by the test-suite, and the tests simply time out rather than failing as intended.
This makes it *very* easy to accidentally overlook a certain type of errors, see e.g. https://github.com/mozilla/pdf.js/pull/13055#discussion_r589005041, which this patch will thus prevent.",False
ab91f42a5e3a41d618876c8a3dae1ce14f0bc7af,2021-03-12 16:46:50,Jonas Jenwald,"Convert code in `src/core/type1_parser.js` to use ""standard"" classes

All of this code predates the existence of native JS classes, however we can now clean this up a little bit.",False
8fc8dc020e5ac4aecef3d5c7aabe42d694e83d1d,2021-03-12 16:35:48,Jonas Jenwald,"Enable the ESLint `no-var` rule in the `src/core/type1_parser.js` file

Note that the majority of these changes were done automatically, by using `gulp lint --fix`, and the manual changes were limited to the following diff:

```diff
diff --git a/src/core/type1_parser.js b/src/core/type1_parser.js
index 192781de1..05c5fe2e5 100644
--- a/src/core/type1_parser.js
+++ b/src/core/type1_parser.js
@@ -251,7 +251,7 @@ const Type1CharString = (function Type1CharStringClosure() {
               // vhea tables reconstruction -- ignoring it.
               this.stack.pop(); // wy
               wx = this.stack.pop();
-              var sby = this.stack.pop();
+              const sby = this.stack.pop();
               sbx = this.stack.pop();
               this.lsb = sbx;
               this.width = wx;
@@ -263,8 +263,8 @@ const Type1CharString = (function Type1CharStringClosure() {
                 error = true;
                 break;
               }
-              var num2 = this.stack.pop();
-              var num1 = this.stack.pop();
+              const num2 = this.stack.pop();
+              const num1 = this.stack.pop();
               this.stack.push(num1 / num2);
               break;
             case (12 << 8) + 16: // callothersubr
@@ -273,7 +273,7 @@ const Type1CharString = (function Type1CharStringClosure() {
                 break;
               }
               subrNumber = this.stack.pop();
-              var numArgs = this.stack.pop();
+              const numArgs = this.stack.pop();
               if (subrNumber === 0 && numArgs === 3) {
                 const flexArgs = this.stack.splice(this.stack.length - 17, 17);
                 this.stack.push(
@@ -397,9 +397,9 @@ const Type1Parser = (function Type1ParserClosure() {
     if (discardNumber >= data.length) {
       return new Uint8Array(0);
     }
+    const c1 = 52845,
+      c2 = 22719;
     let r = key | 0,
-      c1 = 52845,
-      c2 = 22719,
       i,
       j;
     for (i = 0; i < discardNumber; i++) {
@@ -416,9 +416,9 @@ const Type1Parser = (function Type1ParserClosure() {
   }

   function decryptAscii(data, key, discardNumber) {
-    let r = key | 0,
-      c1 = 52845,
+    const c1 = 52845,
       c2 = 22719;
+    let r = key | 0;
     const count = data.length,
       maybeLength = count >>> 1;
     const decrypted = new Uint8Array(maybeLength);
@@ -429,7 +429,7 @@ const Type1Parser = (function Type1ParserClosure() {
         continue;
       }
       i++;
-      var digit2;
+      let digit2;
       while (i < count && !isHexDigit((digit2 = data[i]))) {
         i++;
       }
@@ -599,7 +599,7 @@ const Type1Parser = (function Type1ParserClosure() {
               if (token !== ""/"") {
                 continue;
               }
-              var glyph = this.getToken();
+              const glyph = this.getToken();
               length = this.readInt();
               this.getToken(); // read in 'RD' or '-|'
               data = length > 0 ? stream.getBytes(length) : new Uint8Array(0);
@@ -638,7 +638,7 @@ const Type1Parser = (function Type1ParserClosure() {
           case ""OtherBlues"":
           case ""FamilyBlues"":
           case ""FamilyOtherBlues"":
-            var blueArray = this.readNumberArray();
+            const blueArray = this.readNumberArray();
             // *Blue* values may contain invalid data: disables reading of
             // those values when hinting is disabled.
             if (
@@ -672,7 +672,7 @@ const Type1Parser = (function Type1ParserClosure() {
       }

       for (let i = 0; i < charstrings.length; i++) {
-        glyph = charstrings[i].glyph;
+        const glyph = charstrings[i].glyph;
         encoded = charstrings[i].encoded;
         const charString = new Type1CharString();
         const error = charString.convert(
@@ -728,12 +728,12 @@ const Type1Parser = (function Type1ParserClosure() {
         token = this.getToken();
         switch (token) {
           case ""FontMatrix"":
-            var matrix = this.readNumberArray();
+            const matrix = this.readNumberArray();
             properties.fontMatrix = matrix;
             break;
           case ""Encoding"":
-            var encodingArg = this.getToken();
-            var encoding;
+            const encodingArg = this.getToken();
+            let encoding;
             if (!/^\d+$/.test(encodingArg)) {
               // encoding name is specified
               encoding = getEncoding(encodingArg);
@@ -764,7 +764,7 @@ const Type1Parser = (function Type1ParserClosure() {
             properties.builtInEncoding = encoding;
             break;
           case ""FontBBox"":
-            var fontBBox = this.readNumberArray();
+            const fontBBox = this.readNumberArray();
             // adjusting ascent/descent
             properties.ascent = Math.max(fontBBox[3], fontBBox[1]);
             properties.descent = Math.min(fontBBox[1], fontBBox[3]);
```",False
82062f7e0d41c46579214b758801c30c379bc58a,2021-03-12 16:30:38,Jonas Jenwald,"Enable the ESLint `no-var` rule in the `src/core/cff_parser.js` file

Note that the majority of these changes were done automatically, by using `gulp lint --fix`, and the manual changes were limited to the following diff:

```diff
diff --git a/src/core/cff_parser.js b/src/core/cff_parser.js
index d684c200e..2e2b811e4 100644
--- a/src/core/cff_parser.js
+++ b/src/core/cff_parser.js
@@ -555,7 +555,7 @@ const CFFParser = (function CFFParserClosure() {
           stackSize %= 2;
           validationCommand = CharstringValidationData[value];
         } else if (value === 10 || value === 29) {
-          var subrsIndex;
+          let subrsIndex;
           if (value === 10) {
             subrsIndex = localSubrIndex;
           } else {
@@ -886,15 +886,15 @@ const CFFParser = (function CFFParserClosure() {
         format = bytes[pos++];
         switch (format & 0x7f) {
           case 0:
-            var glyphsCount = bytes[pos++];
+            const glyphsCount = bytes[pos++];
             for (i = 1; i <= glyphsCount; i++) {
               encoding[bytes[pos++]] = i;
             }
             break;

           case 1:
-            var rangesCount = bytes[pos++];
-            var gid = 1;
+            const rangesCount = bytes[pos++];
+            let gid = 1;
             for (i = 0; i < rangesCount; i++) {
               const start = bytes[pos++];
               const left = bytes[pos++];
@@ -938,7 +938,7 @@ const CFFParser = (function CFFParserClosure() {
           }
           break;
         case 3:
-          var rangesCount = (bytes[pos++] << 8) | bytes[pos++];
+          const rangesCount = (bytes[pos++] << 8) | bytes[pos++];
           for (i = 0; i < rangesCount; ++i) {
             let first = (bytes[pos++] << 8) | bytes[pos++];
             if (i === 0 && first !== 0) {
@@ -1173,7 +1173,7 @@ class CFFDict {
   }
 }

-var CFFTopDict = (function CFFTopDictClosure() {
+const CFFTopDict = (function CFFTopDictClosure() {
   const layout = [
     [[12, 30], ""ROS"", [""sid"", ""sid"", ""num""], null],
     [[12, 20], ""SyntheticBase"", ""num"", null],
@@ -1229,7 +1229,7 @@ var CFFTopDict = (function CFFTopDictClosure() {
   return CFFTopDict;
 })();

-var CFFPrivateDict = (function CFFPrivateDictClosure() {
+const CFFPrivateDict = (function CFFPrivateDictClosure() {
   const layout = [
     [6, ""BlueValues"", ""delta"", null],
     [7, ""OtherBlues"", ""delta"", null],
@@ -1265,11 +1265,12 @@ var CFFPrivateDict = (function CFFPrivateDictClosure() {
   return CFFPrivateDict;
 })();

-var CFFCharsetPredefinedTypes = {
+const CFFCharsetPredefinedTypes = {
   ISO_ADOBE: 0,
   EXPERT: 1,
   EXPERT_SUBSET: 2,
 };
+
 class CFFCharset {
   constructor(predefined, format, charset, raw) {
     this.predefined = predefined;
@@ -1695,7 +1696,7 @@ class CFFCompiler {
             // For offsets we just insert a 32bit integer so we don't have to
             // deal with figuring out the length of the offset when it gets
             // replaced later on by the compiler.
-            var name = dict.keyToNameMap[key];
+            const name = dict.keyToNameMap[key];
             // Some offsets have the offset and the length, so just record the
             // position of the first one.
             if (!offsetTracker.isTracking(name)) {
```",False
f3948aeb906bd19464974a20f23272b39f0dd4d1,2021-03-12 16:27:27,Jonas Jenwald,"Enable the ESLint `no-var` rule in the `src/core/font_renderer.js` file

Note that the majority of these changes were done automatically, by using `gulp lint --fix`, and the manual changes were limited to the following diff:

```diff
diff --git a/src/core/font_renderer.js b/src/core/font_renderer.js
index e1538c481..00f5424cd 100644
--- a/src/core/font_renderer.js
+++ b/src/core/font_renderer.js
@@ -152,9 +152,9 @@ const FontRendererFactory = (function FontRendererFactoryClosure() {
   }

   function lookupCmap(ranges, unicode) {
-    let code = unicode.codePointAt(0),
-      gid = 0;
-    let l = 0,
+    const code = unicode.codePointAt(0);
+    let gid = 0,
+      l = 0,
       r = ranges.length - 1;
     while (l < r) {
       const c = (l + r + 1) >> 1;
@@ -199,7 +199,7 @@ const FontRendererFactory = (function FontRendererFactoryClosure() {
         flags = (code[i] << 8) | code[i + 1];
         const glyphIndex = (code[i + 2] << 8) | code[i + 3];
         i += 4;
-        var arg1, arg2;
+        let arg1, arg2;
         if (flags & 0x01) {
           arg1 = ((code[i] << 24) | (code[i + 1] << 16)) >> 16;
           arg2 = ((code[i + 2] << 24) | (code[i + 3] << 16)) >> 16;
@@ -366,7 +366,7 @@ const FontRendererFactory = (function FontRendererFactoryClosure() {
       while (i < code.length) {
         let stackClean = false;
         let v = code[i++];
-        var xa, xb, ya, yb, y1, y2, y3, n, subrCode;
+        let xa, xb, ya, yb, y1, y2, y3, n, subrCode;
         switch (v) {
           case 1: // hstem
             stems += stack.length >> 1;
@@ -494,7 +494,7 @@ const FontRendererFactory = (function FontRendererFactoryClosure() {
                 bezierCurveTo(xa, y2, xb, y3, x, y);
                 break;
               case 37: // flex1
-                var x0 = x,
+                const x0 = x,
                   y0 = y;
                 xa = x + stack.shift();
                 ya = y + stack.shift();
```",False
56fd01bf8d1cbdfade0fe8d10cedbcfecef33258,2021-03-12 10:47:54,Brendan Dahl,"Merge pull request #13078 from brendandahl/disable-missing

Disable intermittent unit test ""creates pdf doc from non-existent URL""",True
47a5550f101ff56cd1502ad7b28c40f26b34638b,2021-03-12 01:10:40,Brendan Dahl,"Disable intermittent unit test ""creates pdf doc from non-existent URL""

Disable this test so we don't have to manually review unit test
failure log all the time.",False
1b42fe2917b6efa32f5467da1bd5e6af0c6a92be,2021-03-11 22:13:49,Brendan Dahl,"Merge pull request #13015 from calixteman/avoid_dl

JS - Avoid a popup to ask for updating Acrobat.",True
b3264328959740503350d2b5b64c255aa3265182,2021-03-11 21:07:38,Jonas Jenwald,"Simplify the data lookup in the `AnnotationStorage.getValue` method

Rather than first checking if data exists before fetching it from storage, we can simply do the lookup directly and then check its value.
Note that this follows the same pattern as utilized in the `AnnotationStorage.setValue` method.",False
a0e584eeb228df3ed4e7dd3ad4c9f54ed37b3c75,2021-03-11 21:07:34,Jonas Jenwald,"Replace the `objectFromEntries` helper function with an `objectFromMap` one instead

Given that it's only used with `Map`s, and that it's currently implemented in such a way that we (indirectly) must iterate through the data *twice*, some simplification cannot hurt here.
Note that the only reason that we're not using `Object.fromEntries(...)` directly, at each call-site, is that that one won't guarantee that a `null` prototype is being used.",False
3d4bb5e5c591a957ece5de8a63f1290ac47f3326,2021-03-10 23:57:06,Brendan Dahl,"Merge pull request #13018 from calixteman/xfa_bind

XFA - Create Form DOM in merging template and data trees",True
52a598915f780b503efe0e4e35aba85edf02b6aa,2021-03-10 17:38:19,Jonas Jenwald,"Re-factor the `PDFScriptingManager._destroyScripting` method (PR 13042 follow-up)

*Please note:* Given the pre-existing issues raised in PR 13056, which seem to block immediate progress there, this patch extracts some *overall* improvements of the scripting/sandbox destruction in `PDFScriptingManager`.

As can be seen in `BaseViewer.setDocument`, it's currently necessary to *manually* delay the `PDFScriptingManager`-destruction in order for things to work correctly. This is, in hindsight, obviously an *extremely poor* design choice on my part; sorry about the churn here!

In order to improve things overall, the `PDFScriptingManager._destroyScripting`-method is re-factored to wait for the relevant events to be dispatched *before* sandbox-destruction occurs.
To avoid the scripting/sandbox-destruction hanging indefinitely, we utilize a timeout to force-destroy the sandbox after a short time (currently set to 1 second).",False
324367272701d1e3b9e69561d6b6d24fd6e598df,2021-03-08 18:40:30,Calixte Denizet,"XFA - Create Form DOM in merging template and data trees
  - Spec: http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.364.2157&rep=rep1&type=pdf#page=171;
  - support for the 2 ways of merging: consumeData and matchTemplate;
  - create additional nodes in template DOM when occur node allows it;
  - support for global values in data DOM.",False
5e3af62d582133d1f3e2550768e87680c8c2076c,2021-03-07 23:30:57,Tim van der Meij,"Merge pull request #13063 from Snuffleupagus/more-web-optional-chaining

Use more optional chaining in the web/-folder (PR 12961 follow-up)",True
bc13932ac1cbc79f7c7b6fa24d4b1ac0979a96a2,2021-03-07 20:50:52,Jonas Jenwald,"Use more optional chaining in the `web/`-folder (PR 12961 follow-up)

I overlooked these cases previously, but there's no reason why optional chaining (and nullish coalescing) cannot be used here as well.",False
bdde621366db14af008c3612730d92ac72dad610,2021-03-07 20:40:11,Jonas Jenwald,"Avoid unnecessary `size_kb` calculation, for large files, in `PDFDocumentProperties._parseFileSize` (PR 13050 follow-up)",False
34c9e889ac2c19ab112cbc4d00ca35bc76cba0cf,2021-03-07 18:21:49,Tim van der Meij,"Merge pull request #13062 from Snuffleupagus/rm-features

Remove the `test/features` folder, since it's very out of date (issue 11954)",True
36bb4fa82307f757c3ffb5e44955945b1dde7621,2021-03-07 18:11:30,Jonas Jenwald,"Remove the `test/features` folder, since it's very out of date (issue 11954)

These tests, and their [accompanying Wiki page](https://github.com/mozilla/pdf.js/wiki/Required-Browser-Features), haven't received any real updates for *many years* and are sufficiently out of date to be effectively useless now.
Providing *irrelevant* compatibility information seems overall worse than not providing any information, and as suggested in the issue it'd probably be better to use https://github.com/mozilla/pdf.js#online-demo for checking if a particular platform/browser is supported.

Thanks to version control, it's easy to restore these files should the need ever arise. However, re-introducing these tests would essentially require updating every single test-case *and* a commitment to keeping them up to date with future code changes.",False
ba1b4097dc6650a008748979fb96cafd54d1cc5d,2021-03-07 17:53:18,Tim van der Meij,"Merge pull request #13055 from calixteman/reset_radio

JS - reset correctly radio buttons",True
11d86df4a7cfc8b18f1ae5c5bc1a4972ceb20fc7,2021-03-07 17:24:13,Tim van der Meij,"Merge pull request #13060 from Snuffleupagus/update-packages

Update packages and translations",True
d4cf751f9136f06128a610811025b10197514753,2021-03-07 16:35:10,Jonas Jenwald,Update l10n files,False
75eb2aedaa9cfc626369dacd578e819befa53291,2021-03-07 16:30:57,Jonas Jenwald,Update `npm` packages,False
c01ef24541e1263d2e5f74c1e37b25b373f006cc,2021-03-07 15:34:40,Calixte Denizet,JS - reset correctly radio buttons,False
709c57a66b176d17db4b2e034d16daddd3860f33,2021-03-07 01:03:07,Tim van der Meij,"Merge pull request #13054 from Snuffleupagus/scripting-pageOpenClose

Move handling of the PageOpen/PageClose events into the `PDFScriptingManager` (PR 13042 follow-up)",True
87dd93b7fc3cba0c3d4ebc92cbffbee45bafac73,2021-03-06 14:42:32,Jonas Jenwald,"Move handling of the PageOpen/PageClose events into the `PDFScriptingManager` (PR 13042 follow-up)

By moving this code from the `BaseViewer` and into `PDFScriptingManager`, all of the scripting initialization/handling code is now limited to just one file/class which help overall readability (in my opinion). Also, this patch is a *net reduction* in number of lines of code which can never hurt.

As part of these changes, the intermediary ""pageopen""/""pageclose"" events are now removed in favor of using the ""regular"" viewer events directly in `PDFScriptingManager`. Hence this removes some (strictly unnecessary) indirection in the current code, when handling PageOpen/PageClose events, which leads to overall fewer function calls in this part of the code.",False
fb87704b386bdc940ceef4eff31b1374432a6122,2021-03-06 02:13:42,Tim van der Meij,"Merge pull request #13042 from Snuffleupagus/PDFScriptingManager

[api-minor] Move the viewer scripting initialization/handling into a new `PDFScriptingManager` class",True
a6d1cba38cb5e61f965f7b34fc84b9938766883a,2021-03-06 01:01:48,Jonas Jenwald,"[api-minor] Move the viewer scripting initialization/handling into a new `PDFScriptingManager` class

The *main* purpose of this patch is to allow scripting to be used together with the viewer components, note the updated ""simpleviewer""/""singlepageviewer"" examples, in addition to the full default viewer.
Given how the scripting functionality is currently implemented in the default viewer, trying to re-use this with the standalone viewer components would be *very* hard and ideally you'd want it to work out-of-the-box.

For an initial implementation, in the default viewer, of the scripting functionality it probably made sense to simply dump all of the code in the `app.js` file, however that cannot be used with the viewer components.
To address this, the functionality is moved into a new `PDFScriptingManager` class which can thus be handled in the same way as all other viewer components (and e.g. be passed to the `BaseViewer`-implementations).

Obviously the scripting functionality needs quite a lot of data, during its initialization, and for the default viewer we want to maintain the current way of doing the lookups since that helps avoid a number of redundant API-calls.
To that end, the `PDFScriptingManager` implementation accepts (optional) factories/functions such that we can maintain the current behaviour for the default viewer. For the viewer components specifically, fallback code-paths are provided to ensure that scripting will ""just work""[1].

Besides moving the viewer handling of the scripting code to its own file/class, this patch also takes the opportunity to re-factor the functionality into a number of helper methods to improve overall readability[2].
Note that it's definitely possible that the `PDFScriptingManager` class could be improved even further (e.g. for general re-use), since it's still heavily tailored to the default viewer use-case, however I believe that this patch is still a good step forward overall.

---

[1] Obviously *all* the relevant document properties might not be available in the viewer components use-case (e.g. the various URLs), but most things should work just fine.

[2] The old `PDFViewerApplication._initializeJavaScript` method, where everything was simply inlined, have over time (in my opinion) become quite large and somewhat difficult to *easily* reason about.",False
5b9638329c77d541b9c1e43f77f0521cf77e688c,2021-03-06 01:01:48,Jonas Jenwald,"Move `apiPageLayoutToSpreadMode` and `apiPageModeToSidebarView` from `web/app.js` and into `web/ui_utils.js`

These changes will be necessary for the next patch, since we don't want to accidentally pull in the entire default viewer in the standalone viewer components.",False
583d77a53f79ed56599979168039bbe0021ab37d,2021-03-06 00:57:25,Tim van der Meij,"Merge pull request #13053 from Snuffleupagus/dev-enableScripting

Enable scripting by default in the development viewer; remove the standalone `acroforms` example",True
bd7868f54c2498eecc458ed67fb0fba47ce0a35a,2021-03-05 04:26:51,Jonas Jenwald,"Remove the standalone `acroforms` example

At this point in time the standalone `acroforms` example is no longer needed, since both the `simpleviewer` and `singlepageviewer` examples already support AcroForms by default.
Moreover, the `acroforms` example no longer illustrate best practices, given the direct usage of `PDFPageView` for a multipage document.",False
7dc1bbf05e29fac0efa20d20543f518229f235bc,2021-03-05 04:26:51,Jonas Jenwald,"Enable scripting by default in the development viewer

Given that scripting is now enabled in Firefox Nightly (but only there), it seems weird to not have scripting enabled by default in `gulp server` mode.",False
4b49db7c95e111cfb7e24a991228dc55a6299f7c,2021-03-05 04:16:48,Tim van der Meij,"Merge pull request #13050 from Snuffleupagus/l10n-fallback

Collect all l10n fallback strings, used in the viewer, in one helper function (PR 12981 follow-up)",True
038668bf8cbf73490e06a70b4d24364499ab484e,2021-03-04 16:04:51,Jonas Jenwald,"Collect all l10n fallback strings, used in the viewer, in one helper function (PR 12981 follow-up)

Rather than having to spell out the English fallback strings at *every* single `IL10n.get` call-site throughout the viewer, we can simplify things by collecting them in *one* central spot.
This provides a much better overview of the fallback l10n strings used, which makes future changes easier and ensures that fallback strings occuring in multiple places cannot accidentally get out of sync.
Furthermore, by making the `fallback` parameter of the `IL10n.get` method *optional*[1] many of the call-sites (and their surrounding code) become a lot less verbose.

---
[1] It's obviously still possible to pass in a fallback string, it's just not required.",False
8d203b3039ee715ca7da79e3be8899bd1d27799c,2021-03-04 00:21:22,Tim van der Meij,"Merge pull request #13045 from mozilla/dependabot/npm_and_yarn/pug-code-gen-2.0.3

Bump pug-code-gen from 2.0.1 to 2.0.3",True
6312a321dfa03504a5cf3e015c6780df6f77b784,2021-03-03 07:58:49,dependabot[bot],"Bump pug-code-gen from 2.0.1 to 2.0.3

Bumps [pug-code-gen](https://github.com/pugjs/pug) from 2.0.1 to 2.0.3.
- [Release notes](https://github.com/pugjs/pug/releases)
- [Commits](https://github.com/pugjs/pug/compare/pug-code-gen@2.0.1...pug@2.0.3)

Signed-off-by: dependabot[bot] <support@github.com>",False
9d91237d14f99f9f6baa8b7e7a131cf5468099ca,2021-03-02 03:55:44,Tim van der Meij,"Merge pull request #13039 from Snuffleupagus/issue-13036

Change the background to ensure that the sidebar is visible/readable when the viewer is narrow (issue 13036)",True
7c52c01267a8c4c83fcdf1fb7dc28fb6990ef8ba,2021-03-01 22:57:27,Jonas Jenwald,"Change the background to ensure that the sidebar is visible/readable when the viewer is narrow (issue 13036)

This is more fallout from PR 11077.",False
63c5d449f243637385db5bacba046742784e386b,2021-03-01 00:32:01,Tim van der Meij,"Merge pull request #13033 from timvandermeij/annotation-line-without-appearance

Implement rendering line annotations without appearance stream",True
5828ff6cb0ca1c5676e2610d7e15f589500359ad,2021-02-28 23:27:58,Tim van der Meij,Implement rendering line annotations without appearance stream,False
d6e0b2d92e243c56a6ce02be3d6cab92e9df9213,2021-02-28 19:22:06,Tim van der Meij,"Merge pull request #13032 from Snuffleupagus/parseDestDictionary-actionName-warn

Don't warn about actions that require scripting support in `Catalog.parseDestDictionary`",True
5f37d4e2b4dfe10ffc2a8ad154a025214b3cca11,2021-02-28 19:17:13,Tim van der Meij,"Merge pull request #13031 from timvandermeij/annotation-square-circle-no-appearance-stream

Implement rendering square/circle annotations without appearance stream",True
39cf4a00085aff687aa8541beea107ae2fc94646,2021-02-28 17:43:17,Jonas Jenwald,"Don't warn about actions that require scripting support in `Catalog.parseDestDictionary`

Now that we have scripting support, warning about e.g. JavaScript actions doesn't seem necessary anymore. Especially considering that scripting-related actions are/will not be parsed by the `Catalog.parseDestDictionary` method anyway, since it's intended for handling ""simple"" actions.",False
fa6cebf0454093ba46f874487b5f788337e30f9d,2021-02-27 23:35:12,Tim van der Meij,Implement rendering square/circle annotations without appearance stream,False
8e74278b65d2abf7ee720aa615af87757b05626e,2021-02-27 20:41:37,Tim van der Meij,"Merge pull request #13030 from Snuffleupagus/cmap-class-async

Modernize some of the code in `src/core/cmap.js` by using classes and async/await",True
05de20071a43f7dac9903835f479d57e863521f7,2021-02-27 18:50:43,Jonas Jenwald,"Modernize some of the code in `src/core/cmap.js` by using classes and async/await

This converts a couple of our old ""classes"" to proper ECMAScript classes, and replaces a lot of manual Promise-wrapping with async/await instead.",False
5a8b849944545e21fe6fc1bdaf1a92c88a1d7082,2021-02-27 18:05:49,Tim van der Meij,"Merge pull request #13029 from timvandermeij/no-var

Enable the `no-var` linting rule in more core files",True
4e96d59fca600cc51224c7a68850a7e560fb145b,2021-02-27 17:50:09,Tim van der Meij,"Use a buffer instead of string concatenation in `reverseIfRtl` in `src/core/unicode.js`

This avoids creating intermediate strings and should be slightly more
efficient.",False
24f80f1e387d1807de18394d6f8d4d170becaa45,2021-02-27 17:21:01,Tim van der Meij,Enable the `no-var` linting rule in `src/core/primitives.js`,False
ed337274192447d0dd40c05c230cf301752b573a,2021-02-27 17:16:57,Tim van der Meij,Enable the `no-var` linting rule in `src/core/glyphlist.js`,False
e051d4d0297befcecf8638c3f20ff39bcdde979f,2021-02-27 17:14:55,Tim van der Meij,Enable the `no-var` linting rule in `src/core/ccitt_stream.js`,False
0897dddbbe4c197461bb58cd110e989f683c14b7,2021-02-27 17:14:50,Tim van der Meij,Enable the `no-var` linting rule in `src/core/unicode.js`,False
cb82dda7552b6f739e0b5f6355dab8608b9b48bd,2021-02-27 17:14:45,Tim van der Meij,Enable the `no-var` linting rule in `src/core/metrics.js`,False
052db45e7a26fead95b5233e3425008784daa8cf,2021-02-27 03:52:23,Tim van der Meij,"Merge pull request #13023 from calixteman/fix_color_test

Fix integration test with js-colors",True
2da850d8c91029dcf7ea3716c8d0c2ebe61604ed,2021-02-27 03:12:11,Tim van der Meij,"Merge pull request #13024 from Snuffleupagus/Puppeteer-8

Update Puppeteer to version 8",True
55786a488092b606ba193bd6479f69709f3ff413,2021-02-27 03:09:30,Tim van der Meij,"Merge pull request #13026 from Snuffleupagus/crypto-classes

Convert code in `src/core/crypto.js` to use ""normal"" classes",True
848753671fcf8db4aefb79d5b29f2dbacaa56dc1,2021-02-27 02:52:38,Tim van der Meij,"Merge pull request #13025 from Snuffleupagus/function-classes

Convert code in `src/core/function.js` to use ""normal"" classes",True
5dd749cd60be38e3d21f8760e2a3ae87f6b46c2a,2021-02-26 21:20:00,Brendan Dahl,"Merge pull request #13014 from Snuffleupagus/Firefox-contentDispositionFilename

[api-minor] Support the Content-Disposition filename in the Firefox PDF Viewer (bug 1694556, PR 9379 follow-up)",True
6b4c4f80e40c1ff2651905ff0b74cf1e9f496d12,2021-02-26 20:21:45,Jonas Jenwald,"Convert code in `src/core/crypto.js` to use ""normal"" classes

All of this code predates the existence of native JS classes, however we can now clean this up a bit. This patch thus let us remove some variable ""shadowing"" from the code.",False
b8847578732cd4d9e56c8ac8fd8d54e6d71b6cb2,2021-02-26 20:21:39,Jonas Jenwald,"Inline the `concatArrays` function in `calculatePDF20Hash`

This helper function is first of all only called *twice*, and secondly it also leads to unnecessary intermediate allocations given how the `TypedArray`s are handled.
Hence we can simply inline this small function, and thus directly allocate the combined `TypedArray` instead.",False
9a9a5b236545838436169fccc6ac7658e04eb7f6,2021-02-26 20:21:32,Jonas Jenwald,"Replace the `compareByteArrays` functions, in `src/core/crypto.js`, with the `isArrayEqual` helper function

The `compareByteArrays` is first of all duplicated in multiple closures in the `src/core/crypto.js` file. Secondly, despite its name, it's also functionally equivalent to the now existing `isArrayEqual` helper function.

The `isArrayEqual` helper function is changed to use a standard `for`-loop, rather than `Array.prototype.every`, since that ought to be slightly more efficient given that we're now using it with (potentially) larger data.",False
e69e8622a9ff67d9aa90e6ca655c1dde0847b74f,2021-02-26 17:50:59,Jonas Jenwald,"Convert code in `src/core/function.js` to use ""normal"" classes

All of this code predates the existence of native JS classes, however we can now clean this up a bit. This patch thus let us remove some variable ""shadowing"" from the code.",False
bb155cea5db7d40e5179c9554e2b91ce64faaf59,2021-02-26 16:38:02,Jonas Jenwald,"Update Puppeteer to version 8

Hopefully the updated Chromium-version might help reduce the number of intermittent test failures.

Please find additional information at https://github.com/puppeteer/puppeteer/releases/tag/v8.0.0",False
17363bbc6fa46f04bf308a23443b931c85856ff2,2021-02-26 16:10:02,Calixte Denizet,"Fix integration test with js-colors
  - need to wait for color change to check its value.",False
6fd899dc443425747098935207096328e7b55eb2,2021-02-26 15:20:29,Jonas Jenwald,"[api-minor] Support the Content-Disposition filename in the Firefox PDF Viewer (bug 1694556, PR 9379 follow-up)

As can be seen [in the mozilla-central code](https://searchfox.org/mozilla-central/rev/a6db3bd67367aa9ddd9505690cab09b47e65a762/toolkit/components/pdfjs/content/PdfStreamConverter.jsm#1222-1225), we're already getting the Content-Disposition filename. However, that data isn't passed through to the viewer nor to the `PDFDataTransportStream`-implementation, which explains why it's currently being ignored.

*Please note:* This will also require a small mozilla-central patch, see https://bugzilla.mozilla.org/show_bug.cgi?id=1694556, to forward the necessary data to the viewer.",False
061637d3f4e354042307f2029e79c48ab0e72337,2021-02-26 04:05:17,Tim van der Meij,"Merge pull request #13021 from Snuffleupagus/createObjectURL-rm-shadow

Remove the, strictly unnecessary, closure and variable shadowing from `createObjectURL`",True
163a840a1e90b068c2a8de1d5866c75600c3b85c,2021-02-26 03:57:49,Tim van der Meij,"Merge pull request #13020 from Snuffleupagus/rm-some-NullL10n-use

Remove the `NullL10n` default value from viewer components not included in the `COMPONENTS`-bundle",True
6cb911cdd03c3a4cc8a10c02221c6e2a7a921da5,2021-02-26 03:52:29,Tim van der Meij,"Merge pull request #13019 from Snuffleupagus/PDFFindBar-null

Remove the `findResultsCount`-check from `PDFFindBar.updateResultsCount`, and unnecessary defaults from the constructor",True
70d1869fe594a542f5e1df5a3fa0edd88bea1bd2,2021-02-25 21:04:23,Jonas Jenwald,"Remove the, strictly unnecessary, closure and variable shadowing from `createObjectURL`

Note that this particular helper function is, with the exception of the `GENERIC` default viewer and the (unsupported) SVG-backend, mostly unused at this point in time. Hence we should be able to clean-up this helper function slightly.

Also, fixes a small inconsistency in the `SVGGraphics` initialization in the viewer, by passing in the `disableCreateObjectURL` compatibility-option. Given that the SVG-backend isn't officially supported/recommended this shouldn't have been an issue, but given that I spotted this it can't hurt to fix it.",False
85251da218b3af0cdbe50262127ec3bd7a397272,2021-02-25 20:38:04,Jonas Jenwald,"Remove the `NullL10n` default value from viewer components not included in the `COMPONENTS`-bundle

For any viewer component not listed in `web/pdf_viewer.component.js`, it shouldn't be necessary to provide a default value for the `l10n`-parameters.
Note also that these *specific* components are heavily tailored towards the default viewer use-case, rather than for general usage.",False
c277e39b0bfce88c95c568e7ac5008e224229832,2021-02-25 20:35:07,Jonas Jenwald,"Remove the `findResultsCount`-check from `PDFFindBar.updateResultsCount`, and unnecessary defaults from the constructor

Given that `PDFFindBar` is written *specifically* for the default viewer, rather than general usage (as opposed to the `PDFFindController`), we should be able to simply assume that the `findResultsCount` DOM-element is always present. Even more so, when we're purposely not doing any similar checks for other DOM-elements in this code.

Also, remove unnecessary `null` defaults for the various DOM-element options in the constructor, since the code simply assumes that all of the relevant DOM-elements are in fact available.",False
8b7dee0aae14bee691c7d9ba6352be098a2d9858,2021-02-25 01:27:12,Tim van der Meij,"Merge pull request #13009 from Snuffleupagus/openOrDownloadData

Move the opening of PDF file attachments into the `DownloadManager`-implementations",True
0b7415f982c11b41b52d5358bbdc4bd467d73aee,2021-02-24 22:07:44,Brendan Dahl,"Merge pull request #13011 from brendandahl/remove-new-line

Remove extra new line from HTML source.",True
ecd45cc9af53f97146298576fe5daaf489dac22b,2021-02-24 20:22:48,Calixte Denizet,"JS - Avoid a popup to ask for updating Acrobat.
  - this popup appears because js is enabled;
  - and because the pdf contains some unsupported features (e.g. XFA);
  - can be tested with: https://www.cbsa-asfc.gc.ca/publications/forms-formulaires/a10.pdf.",False
45329af926b5b2d1b06158673fe39e4d718fadfd,2021-02-24 14:43:02,calixteman,"XFA -- Add support for SOM expressions (#12983)

- specifications: http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.364.2157&rep=rep1&type=pdf#page=87;
 - add a parser for SOM expressions;
 - add search functions to resolve those expressions;
 - search functions will be used to bind data into template.",False
19c3fd1e2fa983859ffc6d6aca71867ec9fe782e,2021-02-24 07:30:05,Brendan Dahl,"Remove extra new line from HTML source.

This avoids issues in mozcentral with linting.",False
df931ef685b4d12e761168f8123cb7b15d510291,2021-02-23 18:14:23,Jonas Jenwald,"Move the opening of PDF file attachments into the `DownloadManager`-implementations

Note how the `PDFAttachmentViewer` handles PDF file attachments specially, by opening them in a new window/tab, rather than forcing them to be downloaded. This is done to improve the overall UX, since browsers in general are able to handle PDF files internally.
However, for file *annotations* we're currently not attempting to do the same thing and are instead just downloading them directly. In order to unify the behaviour, without having to duplicate a lot of code, the opening of PDF file attachments is thus moved into a new `DownloadManager.openOrDownloadData` method.",False
fafe039849018097d2acde1555afd6742b12e07b,2021-02-21 19:51:38,Tim van der Meij,"Merge pull request #13008 from timvandermeij/webpack-stream

Allow minor and patch versions for the `webpack-stream` dependency again",True
62d5b15a2492cc3d0c02652d7ba3732dfc02de34,2021-02-21 19:43:41,Tim van der Meij,"Allow minor and patch versions for the `webpack-stream` dependency again

Fixes #11996.",False
f3aa4408a53bc2be3a89155a7da9d1fc30036393,2021-02-21 19:20:03,Tim van der Meij,"Merge pull request #13005 from calixteman/colors

JS - Fix setting a color on an annotation",True
34fd1976211ca3b183868fc779932bb49b68f5b6,2021-02-21 19:07:43,Tim van der Meij,"Merge pull request #13007 from Snuffleupagus/update-packages

Update packages and translations",True
476230bd17c82cd0afd5d893d08d4618407b713d,2021-02-21 16:37:32,Jonas Jenwald,Update l10n files,False
385bf67bc944e3c6904c8f41d2126e4c7577f25a,2021-02-21 16:22:55,Jonas Jenwald,Update `npm` packages,False
2194fb940dac25b3da799474a1e2a9ceb63ab18a,2021-02-20 23:20:31,Tim van der Meij,"Merge pull request #13004 from Snuffleupagus/cancelBound

Add a `this`-bound method for `InternalRenderTask.cancel`",True
4a5f1d1b7aa0e0576fc21c455555bb0923978186,2021-02-20 19:54:37,Calixte Denizet,"JS - Fix setting a color on an annotation
 - strokeColor corresponds to borderColor;
 - support fillColor and textColor;
 - support colors on the different annotations;
 - fix typo in aforms (+test).",False
d69cf702f3d6668736711113d42ae9e3025d41ea,2021-02-20 19:17:57,Jonas Jenwald,"Add a `this`-bound method for `InternalRenderTask.cancel`

This is similar to the other methods, and the only reason for this not having been done originally is that the `cancel` functionality is a later addition.",False
3d80c21a8e5583c0594b2d5e039f3eab65e09975,2021-02-19 04:31:44,Tim van der Meij,"Merge pull request #13001 from Snuffleupagus/AnnotationStorage-serializable

Send the `AnnotationStorage`-data to the worker-thread as a `Map`",True
e9038cc3d1284676cd62c8aff4969fc1e597a649,2021-02-18 21:43:43,Jonas Jenwald,"Send the `AnnotationStorage`-data to the worker-thread as a `Map`

Rather than converting the `AnnotationStorage`-data to an Object, before sending it to the worker-thread, we should be able to simply send the internal `Map` directly.
The ""structured clone algorithm"" doesn't have a problem with `Map`s, however the `LoopbackPort` used when workers are *disabled* (e.g. in Node.js environments) didn't use to support them. With PR 12997 having lifted that restriction, we should now be able to simply send the `AnnotationStorage`-data as-is rather than having to iterate through it to first create an Object.

*Please note:* The changes in `src/core/annotation.js` could have been a lot more compact if we were able to use optional chaining in the `src/core` folder. Unfortunately that's still not possible, since SystemJS is being used in the development viewer (i.g. `gulp server`) and fixing that is *still* blocked by [bug 1247687](https://bugzilla.mozilla.org/show_bug.cgi?id=1247687).",False
0fa9976268dca5f0e67fa0c358afb1eeb01808fb,2021-02-18 15:02:25,calixteman,"XFA - Add support for prototypes (#12979)

- specifications: http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.364.2157&rep=rep1&type=pdf#page=225&zoom=auto,-207,784
 - add a clone method on nodes in order to be able to clone a proto;
 - support ids in template namespace;
 - prevent from cycle when applying protos.",False
4619b1b56882579c05f3824df8c15ef6a2923c07,2021-02-18 01:27:46,Tim van der Meij,"Merge pull request #12997 from Snuffleupagus/metadata-worker

Move the Metadata parsing to the worker-thread",True
77862bdb8ed161a14319e750242c65291b5131a4,2021-02-18 01:09:54,Tim van der Meij,"Merge pull request #12999 from Snuffleupagus/LoopbackPort-rm-sync

[api-minor] Remove support for synchronous event dispatching in `LoopbackPort`",True
1d3af89cae071028c2207f858a096d2034809e0c,2021-02-18 01:07:03,Tim van der Meij,"Merge pull request #12998 from Snuffleupagus/renderInteractiveForms-defaults

Simplify the default value handling of `renderInteractiveForms` in the viewer components",True
b5be5153756cb16f599ab514f35c24abe2dd5602,2021-02-18 00:58:06,calixteman,"XFA - Add a lexer/parser for FormCalc language (#12936)

- the language specifications are: http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.364.2157&rep=rep1&type=pdf#page=1049
 - it can be used to:
   * as a scripting language for calculation, validations, ...
   * in SOM expressions to select nodes: http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.364.2157&rep=rep1&type=pdf#page=101",False
4de8b7e4338452d988c0d499ef52a318a661be3e,2021-02-18 00:08:09,Brendan Dahl,"Merge pull request #12830 from calixteman/field

JS -- Fix doc.getField and add missing field methods",True
3398070e26586164218d17a20b91bf6428902396,2021-02-17 20:42:29,Jonas Jenwald,"[api-minor] Remove support for synchronous event dispatching in `LoopbackPort`

*Please note:* The `defer` parameter has been enabled by default ever since PR 9777 (in 2018), which first shipped in PDF.js release `2.0.943`.
With workers *disabled*, e.g. in Node.js environments, this has been used ever since without any problems reported[1].

The impetus for this change was that I happened to notice that *if* the `LoopbackPort` was used with synchronous event dispatching, we'd simply send that data as-is to the listeners. This created an inconsistency in the data returned from the `pdf.worker.js` file, since `postMessage` used with *actual* workers (or the `LoopbackPort` with `defer = true`) will ignore/throw when encountering unclonable data.
Originally my intention was simply to just call `cloneValue` regardless of the event dispatching used in `LoopbackPort`, however looking at the use-cases (or lack thereof) of the `LoopbackPort` it seemed reasonable to simply remove the `defer` parameter instead.

This patch is tagged ""[api-minor]"" since the `LoopbackPort` is still exposed in the API, although I really hope that no third-party is using this (since disabling workers leads to bad performance).

Finally, this patch changes a `forEach` loop to `for...of` and makes uses of optional changing in existing code.

---
[1] As evident by the `npm test` command run by Github Actions, and previously by Travis.",False
d366bbdf5137681a492ff14495b5c56fc6bad069,2021-02-17 17:42:01,Jonas Jenwald,"Move the `encodeToXmlString` helper function to `src/core/core_utils.js`

With the previous patch this function is now *only* accessed on the worker-thread, hence it's no longer necessary to include it in the *built* `pdf.js` file.",False
b66f294f644fed777f329319230b73a4f40c9555,2021-02-17 17:42:01,Jonas Jenwald,"Move the XML-parser to the `src/core/`-folder

With the previous patch this functionality is now *only* accessed on the worker-thread, hence it's no longer necessary to include it in the *built* `pdf.js` file.",False
cc3a6563eef044df6ee6347186e844d57a06e7a6,2021-02-17 17:42:01,Jonas Jenwald,"Move the Metadata parsing to the worker-thread

The only reason, as far as I can tell, for parsing the Metadata on the main-thread is how it was originally implemented. When Metadata support was first implemented, it utilized the [`DOMParser`](https://developer.mozilla.org/en-US/docs/Web/API/DOMParser) which isn't available in workers.
Today, with the custom XML-parser being used, that's no longer an issue and it seems reasonable to move the Metadata parsing to the worker-thread[1], since that's where all parsing should happen (for performance reasons).

Based on these changes, we'll be able to reduce the now unnecessary duplication of the XML-parser (and related code) in both of the *built* `pdf.js`/`pdf.worker.js` files.

Finally, this patch changes the `_repair` method to use ""Array + join"" rather than string concatenation.

---
[1] This needed the previous patch, to enable sending of `Map`s between threads with workers disabled.",False
73bf45e64bc8899a8f53b06e3727ea8733817473,2021-02-17 17:41:59,Jonas Jenwald,"Support `Map` and `Set`, with `postMessage`, when workers are disabled

The `LoopbackPort` currently doesn't support `Map` and `Set`, which it should since the ""structured clone algorithm"" used in browsers does support both of them; please see https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm#supported_types",False
ccef734ebb80e50b0ed15ddc0f4c26cc1619f1ad,2021-02-17 15:49:39,Calixte Denizet,Remove Promise.all and async+done from unit/scripting_spec,False
0a28e51e401982f46b31fa086c7773e7f28e024e,2021-02-17 15:17:55,Jonas Jenwald,"Simplify the default value handling of `renderInteractiveForms` in the viewer components

I happened to look at this code, and I can't for the life of me figure out why I didn't just implement it like this patch in the first place (since the current format feels overly verbose).",False
82f75a8ac26bdfb457b0f5535693146eb4cf21de,2021-02-17 15:12:52,Calixte Denizet,"JS -- Fix doc.getField and add missing field methods
 - getField(""foo"") was wrongly returning a field named ""foobar"";
 - field object had few missing unimplemented methods",False
952bc08ec0a1b11128a87f196d3d4651e231d60e,2021-02-17 03:13:13,Tim van der Meij,"Merge pull request #12995 from Snuffleupagus/errorFontMissing-no-fallback-bar

Stop showing the fallback bar for ""errorFontMissing"" errors (PR 11218 follow-up)",True
bab059d8fdc94a196d82025459011d955cd3a227,2021-02-17 03:06:24,Tim van der Meij,"Merge pull request #12964 from calixteman/12963

Avoid infinite loop when getting annotation field name",True
9887644702aa8ec4fa8faeeedbee0aa673cf7799,2021-02-16 20:59:13,Jonas Jenwald,"Stop showing the fallback bar for ""errorFontMissing"" errors (PR 11218 follow-up)

*This is somewhat similar to PR 12931.*

For PDF documents where fonts are completely missing in the /Resources dictionaries, there's basically no ""correct"" way of rendering the document.
Hence it's very unlikely that another PDF viewer will do a better job than PDF.js in these cases, and consequently it seems highly questionable if the fallback bar really helps here.",False
b5735f201727860772f3c9bb61c0604507df6aac,2021-02-16 00:57:34,Tim van der Meij,"Merge pull request #12993 from Snuffleupagus/metadata-subject

[api-minor] Change the `dc:subject` Metadata field to an Array",True
0fc8267576d8d99afe3263122a8efcf773785051,2021-02-15 00:28:19,Calixte Denizet,"Avoid infinite loop when getting annotation field name
 - aims to fix issue #12963;
 - use a Set to track already visited objects;
 - remove the loop limit in getInheritableProperty and use a RefSet too.",False
b26c7974fe2a884ce83cd2d2146e353137bba5c9,2021-02-14 21:46:40,Jonas Jenwald,"[api-minor] Change the `dc:subject` Metadata field to an Array

This patch simply extends the existing handling of the `dc:creator` field, which should hopefully suffice here; please refer to https://wwwimages2.adobe.com/content/dam/acom/en/devnet/xmp/pdfs/XMP%20SDK%20Release%20cc-2016-08/XMPSpecificationPart1.pdf#page=34",False
f892c002757d349c589a19c151aa321e2eeb8f89,2021-02-14 19:47:16,Tim van der Meij,"Merge pull request #12991 from Snuffleupagus/viewer-Firefox-rm-misc-code

Stop including unused/unnecessary code in the viewer, for `MOZCENTRAL`-builds",True
b9beca90c7c01b255c1eae493cfd43aad5a8d028,2021-02-14 19:43:48,Tim van der Meij,"Merge pull request #12992 from Snuffleupagus/scripting-compact-fallback-events

Use a more compact format for the fallback EventBus-listeners in `PDFViewerApplication_initializeJavaScript`",True
209fe604725d81bfbacb760eb005c1ca19c245d2,2021-02-14 17:07:37,Jonas Jenwald,"Use a more compact format for the fallback EventBus-listeners in `PDFViewerApplication_initializeJavaScript`

Given that these event listeners should essentially never be needed, but are included simply to avoid breakage in edge-cases, it can't hurt to make this code slightly less verbose.",False
48f4580991bda3b2f9756d768a436151bc5c2cb2,2021-02-14 17:02:50,Jonas Jenwald,"A couple of small `BaseViewer` tweaks

 - Mark `BaseViewer.initializeScriptingEvents` as an `async` method, since that's actually how it's being used in the default viewer (see `PDFViewerApplication-_initializeJavaScript`).

 - Change `BaseViewer._pageWidthScaleFactor` to access the *internal* scroll/spread-modes directly, rather than using the getters, since that's consistent with the rest of the code (and not just for these properties).",False
4c107d8d7c9a45245e9136ad9301e1a6dea0091c,2021-02-14 15:09:49,Jonas Jenwald,"Remove the useless `PresentationModeState.CHANGING`-case in `PDFCursorTools` (PR 12788 follow-up)

For reasons that I now can't for the life of me understand, I included handling of the `PresentationModeState.CHANGING`-case despite it not actually doing anything.",False
1ca816d7247f5f7b3e53a7c9421d313f8e905731,2021-02-14 15:09:42,Jonas Jenwald,"Directly use `requestIdleCallback` in `MOZCENTRAL`-builds

Given the following compatibility information, we really shouldn't need to check for the availability of `requestIdleCallback` in Firefox; see https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback#browser_compatibility",False
7f8a9b12d9e521c68e5b055b52b860059f4ef19e,2021-02-14 15:09:34,Jonas Jenwald,"Stop including the ""errorWrapper"" HTML code in `MOZCENTRAL`-builds

Given that these HTML elements are not being used at all in `MOZCENTRAL`-builds, note the preprocessor check in `PDFViewerApplication._otherError`, we obviously don't need the HTML code either.",False
c79fd71457a561fb8ea2a739dacaf555296cf344,2021-02-13 19:42:58,Tim van der Meij,"Merge pull request #12896 from calixteman/text_layer

Modifiy the way to compute baseline to have a better match between canvas and text layer",True
4b639d5d4426f12765f7d16d4e201dd1e0cbbc11,2021-02-13 17:37:01,Tim van der Meij,"Merge pull request #12988 from Snuffleupagus/rm-unneeded-MissingDataException

Remove unneeded `instanceof MissingDataException` checks",True
1ee747a620d40c0d35459374675227ec9455e9a3,2021-02-13 16:56:05,Jonas Jenwald,"Remove unneeded `instanceof MissingDataException` checks

The following checks are all unneeded, and could easily cause confusion when reading the code. (All of them are my fault as well, since I've sometimes added those checks without really thinking about the surrounding code.)

 - In `PartialEvaluator.hasBlendModes` there cannot be any `MissingDataException`s thrown, given that the `Page.getOperatorList` method waits for all the necessary /Resources to load first. Furthermore, note also that if an error is thrown from `PartialEvaluator.hasBlendModes` then it'd completely break rendering of that page, since any errors thrown from `Page.getOperatorList` are simply sent to the main-thread.

 - In `PartialEvaluator.handleColorN` there cannot be any `MissingDataException`s thrown, given that again the `Page.getOperatorList` method waits for all the necessary /Resources to load before operatorList parsing starts.

 - In `XRef.readXRef` there cannot be any `MissingDataException`s thrown, given that we're *explicitly* requesting (and waiting for) the entire document in `pdfManagerReady` (in `src/core/worker.js`) before re-parsing of a corrupt document starts.",False
3f3b01b7106b64f979c539776f7371cb1b3ec3cc,2021-02-13 04:03:55,Brendan Dahl,"Merge pull request #12759 from calixteman/font_size

Annotation -- Don't compute appearance when nothing has changed",True
dee75c17649725a9845e5c588762cbb5727e7f57,2021-02-13 01:55:37,Tim van der Meij,"Merge pull request #12986 from Snuffleupagus/rm-loading_error_indicator

Remove the unused ""loading_error_indicator"" l10n string (PR 2719 follow-up)",True
ea06bb0e36fbc2ea2bbbd140851b94a7e05cd719,2021-02-12 23:57:21,Calixte Denizet,"[api-minor] Annotation -- Don't compute appearance when nothing has changed
 * don't set a value in annotationStorage by default:
   - having an undefined when the annotation is rendered for saving/printing means nothing has changed so use normal appearance
   - aims to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1681687
 * change the way to compute font size when this one is null in DA:
   - make fontSize proportional to line height
   - in multiline case, take into account the number of lines for text entered to adapt the font size",False
a8021208eaef252363c226046c575577530cc164,2021-02-12 18:49:58,calixteman,Restore window.alert after use in scripting test (#12987),False
6e2ae2264b4c89d119ece8d7ab37d613dfde8db0,2021-02-12 17:42:37,Jonas Jenwald,"Remove the unused ""loading_error_indicator"" l10n string (PR 2719 follow-up)

This l10n string has been completely unused ever since PR 2719, which is now *eight* years ago.",False
b4421b076aa6eda4490b34dfbf5b3e635be49aea,2021-02-12 15:58:02,Calixte Denizet,"Modifiy the way to compute baseline to have a better match between canvas and text layer
 - use ascent of the fallback font instead of the one from pdf to position spans
 - use TextMetrics.fontBoundingBoxAscent if available or
 - use a basic heuristic to guess ascent in drawing char on a canvas
 - compute ascent as a ratio of font height",False
fc925827b2703cbefdc10373680fe49499c2ed8b,2021-02-12 15:52:54,dhufnagel,"fix initial state of checkboxes in display layer (#12904)

consider the export value when multiple checkboxes have the same name",False
d5cad9ad3f3be6a26577651cbdda5c4c7e3f2336,2021-02-12 04:44:05,Tim van der Meij,"Merge pull request #12981 from Snuffleupagus/app-localizeMessage

Collect the l10n error/warning message lookup, in `web/app.js`, in a new helper method",True
069d5b10869ba12173fddd2bf5064ae10ffcf24d,2021-02-12 04:36:45,Tim van der Meij,"Merge pull request #12984 from Snuffleupagus/more-Date-now

Replace a few `new Date().getTime()` instances with `Date.now()`",True
3831c131e37eaf4164f28b3e1dc9999919266f0d,2021-02-12 04:33:20,Tim van der Meij,"Merge pull request #12982 from Snuffleupagus/license_header_2021

Update the year in the `license_header` files",True
4733f163e8160c60d9010e256af42acd1e6d5198,2021-02-12 03:30:42,Jonas Jenwald,"Replace a few `new Date().getTime()` instances with `Date.now()`

The former format is not only more verbose, but it's also *slightly* less efficient since it creates a new `Date` object.",False
133158e4d53668f8f2e67bb29378fbc930dbbaf2,2021-02-11 22:22:26,Jonas Jenwald,Update the year in the `license_header` files,False
fe3f074f6d5755d38620580cb08b2c92d8ff13bc,2021-02-11 17:00:53,Jonas Jenwald,"Collect the l10n error/warning message lookup, in `web/app.js`, in a new helper method

Some of the localization strings (e.g. ""loading_error"") are repeated multiple times throughout the `web/app.js` file, which means that we need to duplicate the fallback strings as well. Furthermore, the signature of the `IL10n.get` method makes the call-sites quite verbose.

By adding a new helper method, in `PDFViewerApplication`, we're able to gather the localization fallback strings in one central spot in `web/app.js` and also make the lookup of the error/warning messages more compact.",False
0479deef4eb961d31e395bd3224a86bf23834fb3,2021-02-11 17:00:37,calixteman,"XFA -- Add other objects (#12949)

- connectionSet: http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.364.2157&rep=rep1&type=pdf#page=969
 - datasets: http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.364.2157&rep=rep1&type=pdf#page=1038
  - signature: http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.364.2157&rep=rep1&type=pdf#page=1040
  - stylesheet: the same
  - xhtml: http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.364.2157&rep=rep1&type=pdf#page=1187",False
25b581c2a9ac4037e10e3d840bea113eed1e5389,2021-02-10 22:43:44,Jonas Jenwald,Slightly simplify the parameter handling in `initPassiveLoading.onOpenWithURL`,False
b375a867eb6f4541c8bf41fe4bac9ac11e063768,2021-02-10 22:43:43,Jonas Jenwald,"Use arrow functions in `PDFViewerApplication.initPassiveLoading`

This code is *very* old and it even predates the existence of arrow functions. Hence we can now reduce the overall verbosity by not having to explicitly spell out `PDFViewerApplication` everywhere.",False
3787bd41ef861c8c00ebd987241e6cc89708aa5f,2021-02-10 22:34:43,calixteman,"XFA -- Add localset object (#12948)

- Specifications: http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.364.2157&rep=rep1&type=pdf#page=943",False
7f7f22037ed3b23909701797f218589533d9957e,2021-02-10 21:47:56,Brendan Dahl,"Merge pull request #12978 from Snuffleupagus/rename-es5-to-legacy

[api-minor] Rename `-es5` to `-legacy`, to reduce confusion over what's actually supported  (issue 12976)",True
0068dba00966496ef41fc1a3454d1bb04d36c09d,2021-02-10 20:31:59,Jonas Jenwald,"[api-minor] Rename `-es5` to `-legacy`, to reduce confusion over what's actually supported  (issue 12976)

*Please note that this will also require some edits of the Wiki.*",False
31098c404d1bd3a934359a1a755e20e4e1db57ed,2021-02-10 16:58:49,Jonas Jenwald,"Use `Math.hypot`, instead of `Math.sqrt` with manual squaring (#12973)

When the PDF.js project started `Math.hypot` didn't exist yet, and until recently we still supported browsers (IE 11) without a native `Math.hypot` implementation; please see this compatibility information: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot#browser_compatibility

Furthermore, somewhat recently there were performance improvements of `Math.hypot` in Firefox; see https://bugzilla.mozilla.org/show_bug.cgi?id=1648820

Finally, this patch also replaces a couple of multiplications with the exponentiation operator.",False
3a2c259b5732579299c814279fc58c393d41e30f,2021-02-10 04:48:02,Tim van der Meij,"Merge pull request #12972 from Snuffleupagus/pr-12354-followup

[GENERIC viewer] Skip the `iframe`-case when checking if the `container` div, on `BaseViewer`-instances, is absolutely positioned (PR 12354 follow-up)",True
e51c349a8d8b8be79a80023c949aaccc648c636b,2021-02-10 04:39:27,Tim van der Meij,"Merge pull request #12975 from Snuffleupagus/rm-contextmenu

Remove the `contentmenu` usage, from PresentationMode, since it's no longer working",True
32a4a30f3a71443732054d4d7dc7009bdc731a92,2021-02-09 18:59:48,Jonas Jenwald,"Remove the `contentmenu` usage, from PresentationMode, since it's no longer working

This feature was Firefox-specific, and it's now been removed from the HTML specification and it's disabled by default starting with Firefox 85. Hence it seems completely unnecessary to keep this code in the default viewer.

Please refer to https://groups.google.com/g/mozilla.dev.platform/c/tc11BCenm2c and the resources that it links to.",False
9fa20ad8c5cede72655b32b3a31e6aa2cbc28374,2021-02-09 16:37:20,Jonas Jenwald,"[GENERIC viewer] Skip the `iframe`-case when checking if the `container` div, on `BaseViewer`-instances, is absolutely positioned (PR 12354 follow-up)

Given that `getComputedStyle` only works on visible elements, the result of PR 12354 is that if the viewer is placed in a *hidden* `iframe` the viewer will now be broken. This obviously wasn't the intention of that PR, hence I believe that we should limit the `position: absolute;` check slightly to avoid this.",False
884c65c602b6395a34e69ef43a989feb759efe15,2021-02-09 00:44:44,Tim van der Meij,"Merge pull request #12971 from nt1m/bool-attrs

Use DOM hidden property instead of attribute methods",True
e525714dea6b19e08df4660e2b709ef5cb2a85b7,2021-02-08 22:54:27,Brendan Dahl,"Merge pull request #12970 from Snuffleupagus/viewer-error

Split `PDFViewerApplication.error` into two methods, for PDF document loading/parsing errors vs other errors (PR 11647 follow-up)",True
2ca886baee098d86cb4fde55fbbd595011e0b63b,2021-02-08 04:51:49,Tim Nguyen,Use DOM hidden property instead of attribute methods,False
27727234ba5cb8e9623fdc8972edf24203cd408d,2021-02-08 02:58:53,Jonas Jenwald,"Split `PDFViewerApplication.error` into two methods, for PDF document loading/parsing errors vs other errors (PR 11647 follow-up)

With these changes, we can easily unblock the ""load"" event regardless of where an error occurred.",False
3d33313e4eb6e8469c7f71b35c445c59540e9050,2021-02-07 17:38:16,Tim van der Meij,"Merge pull request #12962 from Snuffleupagus/issue-9462

Handle errors gracefully, in `PartialEvaluator.translateFont`, when fetching the font file (issue 9462)",True
0296885967c1e4c75f4ee866a5113bba5d348bb6,2021-02-07 17:29:48,Tim van der Meij,"Merge pull request #12966 from Snuffleupagus/update-packages

Update packages and translations",True
1d56785b6bb0a435119058a759b8828d7aedefb7,2021-02-07 16:34:23,Jonas Jenwald,Update l10n files,False
70b62eec82e77a383f73c616e1e88acdf036dc7d,2021-02-07 16:34:22,Jonas Jenwald,Update `npm` packages,False
e6fe8a7d53a35d3efcf85dba120db9143b84e2f6,2021-02-07 00:14:53,Jonas Jenwald,"Handle errors gracefully, in `PartialEvaluator.translateFont`, when fetching the font file (issue 9462)

The *third* page of the referenced PDF document currently fails to render completely, since one of its font files fail to load.
Since that error isn't handled, a large part of the text is thus missing which looks quite bad. By ""replacing"" the font data with an *empty* stream, we'll thus be able to fallback to rendering the text with a standard font (instead of using `ErrorFont`). While there's obviously no guarantee that things will look perfect, actually rendering the text at all should be an improvement in general.

Also, print a warning in `PartialEvaluator.loadFont` when the `PartialEvaluator.translateFont` method rejects, since that'd have helped debug/fix the issue faster.",False
8ccd9eac3d1fb1d1a4d4db7656dd47c427a1ce00,2021-02-07 00:08:04,Tim van der Meij,"Merge pull request #12965 from Snuffleupagus/ObjectLoader-errors

Request all data, rather than throwing, when encountering general errors in `ObjectLoader._walk` (issue 9462, PR 3289 follow-up)",True
6263a21fb5add4d82364ad9001febf684531a094,2021-02-06 23:57:15,Tim van der Meij,"Merge pull request #12961 from Snuffleupagus/web-optional-chaining

Use optional chaining, where possible, in the `web/`-folder",True
d2a21a117122bd12d02ab5101a0c5ec4f5596e0f,2021-02-06 23:46:48,Tim van der Meij,"Merge pull request #12941 from justinribeiro/resolve-button-aria-expanded

fix(a11y): resolve sidebar, find, toolbar missing aria-expanded and aria-controls state",True
d3e65f24e3594c35dd23ad6378507a62f5e96710,2021-02-06 19:03:50,Jonas Jenwald,"Request all data, rather than throwing, when encountering general errors in `ObjectLoader._walk` (issue 9462, PR 3289 follow-up)

*As far as I can tell, this has been broken ever since PR 3289 (back in 2013) without anyone noticing.*

For any non-`MissingDataException` errors encountered in `ObjectLoader._walk`, we're simply throwing immediately which thus has the potential to *completely* break rendering of an entire page.
In practice this is obviously only an issue for PDF documents which are in one way or another corrupt, since that's the only way that `XRef.fetch` will throw non-`MissingDataException` errors. To make matters worse these errors are *intermittent*, since they can only occur if the document is still loading when the `ObjectLoader`-code runs (note the early return in `ObjectLoader.load`).

Please note that we cannot simply catch the error and let ""normal"" parsing continue in `ObjectLoader._walk`, since that could lead to errors elsewhere given that resources ""below"" the current one (in the graph) might not be checked as intended then.
All-in-all, the only way to make absolutely sure that we won't cause *unexpected* `MissingDataException`s somewhere else in the code-base is to fallback to fetching the *entire* document in this edge-case.",False
374da648dd5df2fa7616d06d4f46f97bdd892c13,2021-02-06 05:38:29,Justin Ribeiro,"fix(a11y): resolve sidebar, find, toolbar missing aria-expanded and
aria-controls state

In testing, screen readers such as JAWS have trouble understanding the expanded state of the buttons that expand hidden menus due to lacking aria-expanded attribute. Also, given that the buttons do not contain the controlled/shown element, they should also define the aria-controls attribute with associated element id per https://www.w3.org/TR/wai-aria-1.1/#aria-expanded

This fixes adds these requirements for the sidebar, find, and secondary toolbar buttons.",False
a392082e302366a25a17d1ba35551a2acd9e5195,2021-02-06 04:36:09,Brendan Dahl,"Merge pull request #12944 from calixteman/xfa_config

XFA -- Update config object",True
a447d05292395017f6c86ecc476a621cc0a6fcaa,2021-02-06 03:34:27,Brendan Dahl,"Merge pull request #11647 from Snuffleupagus/notifyPagesLoaded

[Firefox] Block the ""load"" event until all pages are loaded, to ensure that printing works (bug 1618553)",True
08c23c12dccb133ced86cb4153f15a36629db4ee,2021-02-06 02:31:57,Jonas Jenwald,"[Firefox] Block the ""load"" event until all pages are loaded, to ensure that printing works (bug 1618553)",False
69ed0e92300a3762a90daadcba4fdf05063ede33,2021-02-06 00:51:00,Brendan Dahl,"Merge pull request #12946 from calixteman/xfa_template

XFA -- Add template object",True
9d47e69771456de9d4d7511a4f5189f8beb5fc80,2021-02-05 23:52:51,Calixte Denizet,XFA -- Update config object,False
063a072742bd8cd9042e334a10bc11f4713aec81,2021-02-05 22:20:11,Jonas Jenwald,"Use optional chaining, where possible, in the `web/`-folder

By using optional chaining, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining, it's possible to reduce unnecessary code-repetition in many cases.",False
dc19965d78614c922e670ef60212eaf78cf14412,2021-02-05 22:20:07,Jonas Jenwald,"Slightly re-factor how the `BaseViewer`/`PDFThumbnailViewer` handle page labels internally, to make the `null` default value clearer

Currently it's not *immediately* clear from the code itself, unless you look at the definition of `this._pageLabels`, that the default value is `null`.[1]
We can improve this, and also reduce the amount of code, by using modern ECMAScript features such as optional chaining and nullish coalescing.

---
[1] Keep in mind that an *empty* string is actually a valid page label, according to the PDF specification.",False
094e0b2239af73c27e17e1f486df6b45451b74d8,2021-02-05 04:25:50,Tim van der Meij,"Merge pull request #12956 from Snuffleupagus/Puppeteer-7

Update Puppeteer to version 7",True
fd4e76a7e3709e825294fa68c8d50b34efe18635,2021-02-04 22:33:11,Jonas Jenwald,"Update Puppeteer to version 7

Please see:
 - https://github.com/puppeteer/puppeteer/releases/tag/v7.0.1
 - https://github.com/puppeteer/puppeteer/releases/tag/v7.0.0",False
652ff5789789103af7cf1f15d69a4bd862b6c17a,2021-02-04 01:35:10,Calixte Denizet,"XFA -- Add template object
 - Specifications: http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.364.2157&rep=rep1&type=pdf#page=596",False
27ffbdf7dfa445e26c975ed7a354c0d6abaf8a8e,2021-02-04 01:22:38,Tim van der Meij,"Merge pull request #12952 from Snuffleupagus/issue-12951

Don't focus the `PasswordPrompt` input-field on load, when the viewer is embedded in e.g. an `iframe` (issue 12951)",True
0d85de980b600912b2287756e7a95af895463f24,2021-02-04 01:15:45,Brendan Dahl,"Merge pull request #12954 from calixteman/xfa_attrs

XFA -- Add attributes and children in XFAObject",True
7e0554afe2b5594962a13020bcfb4bad346ccb70,2021-02-03 23:26:00,Calixte Denizet,"XFA -- Add attributes and children in XFAObject
 - in order to evaluate SOM expressions nodes and their attributes must be checked in the same order as in the xml;
 - add an object XFAObjectArray with a parameter max to handle multiple children with the same name.",False
d1586bbbe71cd2f72a7ae8c6afea1f7457664602,2021-02-03 20:18:40,Jonas Jenwald,"Don't focus the `PasswordPrompt` input-field on load, when the viewer is embedded in e.g. an `iframe` (issue 12951)

Given that we don't focus the viewer *itself* (among other things) when the viewer is embedded, I suppose that it makes some sense to not focus the `PasswordPrompt` input-field either on load.
In order to improve the overall UX here, if an *incorrect* password was provided we'll still focus the input-field.

Fixes 12951 (assuming we care to do so, of course).",False
86a4ba55c56f735e51e29a7aa368bcdcce9d8a23,2021-02-03 03:48:08,Tim van der Meij,"Merge pull request #12947 from Snuffleupagus/Puppeteer-6

Update Puppeteer to version 6 (issue 12945)",True
7a765343e495285c3c576eeb1b0c848e1e1c358d,2021-02-03 03:45:59,Tim van der Meij,"Merge pull request #12943 from Snuffleupagus/issue-6961-test

Re-enable the `issue6961` test-case (issue 7112)",True
003965e1e861e5f2e9f84fa6b448d2176541cd66,2021-02-02 17:48:22,Jonas Jenwald,"Update Puppeteer to version 6 (issue 12945)

Please see https://github.com/puppeteer/puppeteer/releases/tag/v6.0.0",False
cacb1cc7bae2a9a8ee0288c50d593ac09e38d2c4,2021-02-02 15:01:16,Jonas Jenwald,Re-enable the `issue6961` test-case (issue 7112),False
e16c99fc020903d705ed7e81cbf3b83cf84e139b,2021-02-02 08:04:39,Brendan Dahl,"Merge pull request #12879 from calixteman/xfa_parser

XFA - Add a parser for XFA files",True
0ff5cd7eb59cdef432aacddd6ac19fbc0f7642ea,2021-02-01 18:15:31,Calixte Denizet,"XFA - Add a parser for XFA files
 - the parser is base on a class extending XMLParserBase
 - it handle xml namespaces:
   * each namespace is assocated with a builder
   * builder builds nodes belonging to the namespace
   * when a node is inserted in the parent namespace compatibility is checked (if required)
 - to avoid name collision between xml names and object properties, use Symbol.",False
c92011e0935e12f2244ead98aaa6cc9743a99a35,2021-01-31 18:50:50,Tim van der Meij,"Merge pull request #12935 from Snuffleupagus/fullscreen-MOZCENTRAL-rm-prefixes

Remove prefixed fullscreen properties/methods from the MOZCENTRAL builds",True
1c802e0e6ce1e3250c874dbef1ab7d140512108d,2021-01-31 18:15:14,Jonas Jenwald,"Remove prefixed fullscreen properties/methods from the MOZCENTRAL builds

The unprefixed version of the fullscreen API has been enabled for quite some time in Firefox, see below, hence we can (slightly) clean-up the relevant code.

 - https://developer.mozilla.org/en-us/docs/Web/API/Document/fullscreenEnabled#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen#browser_compatibility",False
59f938d073333cd6ed0d9ee77cf2037e3dade53f,2021-01-30 20:30:55,Tim van der Meij,"Merge pull request #12933 from Snuffleupagus/rm-CSS-variables-polyfill

Stop polyfilling CSS variables in GENERIC builds",True
619e1d8bcf8124ec7d6a4d7b8d60405c59d67b7e,2021-01-30 20:08:07,Jonas Jenwald,"Stop polyfilling CSS variables in GENERIC builds

At this point in time, all browsers that we support have native support for CSS variables; please see https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties#browser_compatibility and https://github.com/mozilla/pdf.js/blob/9af8501e6c44eb32bea905c3b56b4c1e6c5f5ba5/gulpfile.js#L79-L91

This reduces the size of the *built* `viewer.css` file, in GENERIC builds, from `93 814` to `55 285` bytes (~41 percent).",False
9af8501e6c44eb32bea905c3b56b4c1e6c5f5ba5,2021-01-30 19:06:35,Tim van der Meij,"Merge pull request #12932 from Snuffleupagus/rm-ms-prefix

Stop including `-ms` prefixed CSS rules in GENERIC builds",True
88ca21339941149a2d15e3e65f052c4d74b6829c,2021-01-30 18:30:04,Jonas Jenwald,"Stop including `-ms` prefixed CSS rules in GENERIC builds

Given that IE 11/Edge is now unsupported in PDF.js, and that Microsoft Edge is now a Chromium-browser, we can avoid (some) unnecessary bloat in the built CSS files.",False
31b78921caf0266589c8cc26cb8be02c7ecf483f,2021-01-30 02:34:28,Tim van der Meij,"Merge pull request #12931 from Snuffleupagus/errorFontLoadNative-no-fallback-bar

Stop showing the fallback bar for ""errorFontLoadNative"" errors (PR 10539 follow-up)",True
fec8c4c43f5bf9b7a7a1a09a0ffdc2d20f2b6e47,2021-01-29 21:18:55,Jonas Jenwald,"Access `this._onUnsupportedFeature` directly in `FontFaceObject.getPathGenerator`

Given that `FontFaceObject` is not exposed in the public API, but only accessed internally, there's no need to assume that a `FontFaceObject`-instance is ever initialized without `onUnsupportedFeature` being provided. This is also consistent with the `BaseFontLoader` implementation.",False
5a522a5c71aae03f546b6d2731e7b04935ff0a9b,2021-01-29 21:18:51,Jonas Jenwald,"Stop showing the fallback bar for ""errorFontLoadNative"" errors (PR 10539 follow-up)

With PR 10539, we'll now always attempt to fallback to the PDF.js built-in font renderer for fonts that fail to load (i.e. are rejected by the sanitizer). Generally speaking, these errors are the result of insufficient validation in the PDF.js font code, however in almost all cases we've seen thus far our built-in font renderer manages just fine.
However, we still trigger the `onUnsupportedFeature` reporting, which in Firefox causes the fallback bar to be displayed. Given that, in a majority of cases[1], things look fine it seems unfortunate to bother the user with the fallback bar here.

Note that even though we no longer show the fallback bar in this case, we still report telemetry as before.

---
[1] The only *known* case where things aren't fine with the built-in font renderer is issue 10232, however that document is sufficiently broken that there's a couple of other things that will trigger the fallback bar.",False
d6de6ea0fa3804003f3c15238e858a33aa139c0c,2021-01-29 04:23:24,Tim van der Meij,"Merge pull request #12920 from roiLeo/patch-1

fix(acroforms): pdf path in acroforms example",True
e4e92d10e87a947b981cfd21936d7de3e1e5ec50,2021-01-29 04:14:10,Tim van der Meij,"Merge pull request #12922 from Snuffleupagus/getTextContent-globalImageCache

Ignore globally cached images in `PartialEvaluator.getTextContent` (PR 11930 follow-up)",True
8805614a03ce21029aa16b63b40de16ea31ac462,2021-01-29 04:12:12,Tim van der Meij,"Merge pull request #12924 from brendandahl/fix-clone

Fix font data clone error when pdfBug is enabled.",True
72da2aa1662d6bcefcc7f350b1914cf01983dfc5,2021-01-28 14:49:26,Jonas Jenwald,"Ignore globally cached images in `PartialEvaluator.getTextContent` (PR 11930 follow-up)

Given that we'll only cache `/XObject`s of the `Image`-type globally, we can utilize that in `PartialEvaluator.getTextContent` as well. This way, in cases such as e.g. issue 12098, we can avoid having to fetch/parse `/XObject`s that we already know to be `Image`s. This is helpful, since `Stream`s are not cached on the `XRef` instance (given their potential size) and the lookup can thus be somewhat expensive in general.

Also, skip a redundant `RefSetCache.has` check in the `GlobalImageCache.getData` method.",False
52fb5abb0b69025cf5888af2491c06141fb9cdc8,2021-01-28 04:08:43,Brendan Dahl,"Fix font data clone error when pdfBug is enabled.

The widths property should be an object to match what metrics returns.

In ZapfDingbats.pdf I was getting a data clone error with pdfBug enabled.
In buildCharCodeToWidth() there was an encoding with the name ""at"" which
is also the name of a method on an array. buildCharCodeToWidth assumes an
object is passed in, so when it checked for the ""at"" property, it found the
method and copied it over.

This only seemed to affect Firefox.",False
d52e5b0505ccf6cc5b527c811b7602e5265ced1a,2021-01-28 02:50:58,Tim van der Meij,"Merge pull request #12903 from Snuffleupagus/GlobalImageCache-byteSize

Improve global image caching for small images (PR 11912 follow-up, issue 12098)",True
286271152fb069cf7e688b0f26cf253b98ccafce,2021-01-28 02:39:00,Tim van der Meij,"Merge pull request #12910 from calixteman/bidi

Add back dir property in spans in text layer",True
7c4d751ea9c6cff33426d2e46c914ebe4f1584c9,2021-01-27 15:42:36,roiLeo,fix(acroforms): pdf path in acroforms example,False
639437d2875a5005975727ceffcf09dd678ea312,2021-01-27 04:15:45,Tim van der Meij,"Merge pull request #12911 from calixteman/reg_test

Fix text layer regression tests in using the correct line-height property",True
d8507733607eb47998e961863797c2f6368b44f4,2021-01-27 04:12:47,Tim van der Meij,"Merge pull request #12916 from Snuffleupagus/dist-sandbox

Include `pdf.sandbox.js` when building the pdfjs-dist files",True
85a4bc85e73ed462c7539256a276636f915744d4,2021-01-26 21:04:19,Jonas Jenwald,"Include `pdf.sandbox.js` when building the pdfjs-dist files

Currently it's missing in pdfjs-dist, however that's not a big issue considering that it's broken in non-TESTING builds before PR 12914 anyway.",False
465697eb10558d5c440ed058b292f588bcb2f8e8,2021-01-26 19:26:01,calixteman,"JS - QuickJS sandbox initialization must be the last evaluated string (#12914)

- aims to fix issue #12912",False
1ab6d2c604971f4d98ebd36d85d7bca3088ca4cc,2021-01-26 16:30:12,Jonas Jenwald,"Improve global image caching for small images (PR 11912 follow-up, issue 12098)

When implementing the `GlobalImageCache` functionality I was mostly worried about the effect of *very large* images, hence the maximum number of cached images were purposely kept quite low[1].
However, there's one fairly obvious problem with that approach: In documents with hundreds, or even thousands, of *small* images the `GlobalImageCache` as implemented becomes essentially pointless.

Hence this patch, where the `GlobalImageCache`-implementation is changed in the following ways:
 - We're still guaranteed to be able to cache a *minimum* number of images, set to `10` (similar as before).
 - If the *total* size of all the cached image data is below a threshold[2], we're allowed to cache additional images.

This patch thus *improve*, but doesn't completely fix, issue 12098. Note that that document is created by a *very poor* PDF generator, since every single page contains the *entire* document (with all of its /Resources) and to create the individual pages clipping is used.[3]

---
[1] Currently set to `10` images; imagine what would happen to overall memory usage if we encountered e.g. 50 images each 10 MB in size.

[2] This value was chosen, somewhat randomly, to be `40` megabytes; basically five times the [maximum individual image size per page](https://github.com/mozilla/pdf.js/blob/6249ef517d3aaacc9aa6c9e1f5377acfaa4bc2a7/src/display/api.js#L2483-L2484).

[3] This surely has to be some kind of record w.r.t. how badly PDF generators can mess things up...",False
539256c35127a9a57d5e5e31fd35f042b3b10d7b,2021-01-26 16:30:05,Calixte Denizet,"Add back dir property in spans in text layer
 - aims to fix #12909",False
a3f6882b06b3ae6b2c02d0be4a650460a84c009c,2021-01-26 04:10:57,calixteman,JS -- add support for choice widget (#12826),False
52641e8643c3eb934226b7d3db082a3f41bc0e11,2021-01-26 03:31:07,Calixte Denizet,Fix text layer regression tests in using the correct line-height property,False
6249ef517d3aaacc9aa6c9e1f5377acfaa4bc2a7,2021-01-24 23:23:54,Tim van der Meij,"Merge pull request #12901 from timvandermeij/bump-versions

Bump versions in `pdfjs.config`",True
7e4709433a23bfa42ef8703112954d2d30f5c99e,2021-01-24 23:19:33,Tim van der Meij,Bump versions in `pdfjs.config`,False
f2c7338b02092db72719dfe106c9688397dc5d90,2021-01-24 16:58:24,Tim van der Meij,"Merge pull request #12897 from calixteman/12895

JS - Fix mouse event names",True
00b4eb2a2c1e6acb1c211cb49b22a37d4090e349,2021-01-24 16:56:23,Tim van der Meij,"Merge pull request #12898 from Snuffleupagus/update-packages

Update packages and translations",True
12e6d9b81e5cd5c5189735c625fa0c12569ba469,2021-01-24 16:53:39,Tim van der Meij,"Merge pull request #12899 from Snuffleupagus/eslint-env-es2021

Update the ESLint `env` to use ""es2021""",True
eb015ca023d5157efc84802e80e80aafff2e957c,2021-01-24 15:55:43,Jonas Jenwald,"Update the ESLint `env` to use ""es2021""

Currently this is inconsistent, since we're using ECMAScript 2021 in the parser options.",False
09442351b8c64a75d33a388eb3f5f35a8f3e20e2,2021-01-24 13:13:09,Jonas Jenwald,Update l10n files,False
bc325155073c3430e0609363eeea80371d249157,2021-01-24 13:08:38,Jonas Jenwald,"Update the `eslint-plugin-unicorn` package to the latest version

Please see https://github.com/sindresorhus/eslint-plugin-unicorn/releases/tag/v27.0.0 for additional details.",False
fea6d2fd34cd87a6d15c9fff8a701b94279f8c7d,2021-01-24 13:04:00,Jonas Jenwald,Update `npm` packages,False
34d2e72df2d4a16c88b21f790b72554dc7c51a17,2021-01-24 00:56:22,Calixte Denizet,"JS - Fix mouse event names
  - fix issue #12895",False
d4c4f5d4e52dbc84146dc2b06d313fdd74cc2637,2021-01-24 00:05:08,Tim van der Meij,"Merge pull request #12870 from Snuffleupagus/page-advance

Add previous/next-page functionality that takes scroll/spread-modes into account (issue 11946)",True
7102e4a5c302a7920484ba00ac803affecdabaaa,2021-01-23 23:16:36,Tim van der Meij,"Merge pull request #12893 from Snuffleupagus/eslint-no-use-before-define

Enable, a basic version of, the ESLint `no-use-before-define` rule",True
61ceae6b4c200cd689c2e1d99c500306b3b264e9,2021-01-23 20:53:19,Jonas Jenwald,"Enable, a basic version of, the ESLint `no-use-before-define` rule

Given how our existing code-base is written, we simply can't (and probably don't want to) enable *all* of this ESLint rule. The reason is that we have a lot of code, especially related to functions, which is fine at runtime but might to a static analyzer *look* like a problem.
However, even in its most *basic* version this ESLint rule can help catch some outright bugs; see PR 12891.

Please find additional details about the ESLint rule at https://eslint.org/docs/rules/no-use-before-define",False
25b84ce84c95ba06d1ee57e578672048269c39c1,2021-01-23 20:38:07,Tim van der Meij,"Merge pull request #12828 from dhufnagel/feature/annotation_layer_display_fontsize

[api-minor] Set font size and color for text widget annotations",True
c9a1d8cb2e7dc64814759cdf5bbf39c2953f3bad,2021-01-23 20:16:42,Tim van der Meij,"Merge pull request #12891 from Snuffleupagus/DefaultAppearanceEvaluator-fixes

Ensure that `parseDefaultAppearance` won't attempt to access a not yet defined variable (PR 12831 follow-up)",True
ef1d33a29e5903669ea85b77ab1f3221fb0c3d34,2021-01-23 20:04:22,Jonas Jenwald,"Use slightly less verbose font-names in the ""Default appearance"" unit-tests

The new names are not only less verbose, but also uses a *very* common PDF font-naming convention.",False
6bcb4e3ad9d713649fc16f5e55b0362fcb41ad47,2021-01-23 20:03:28,Jonas Jenwald,"Ensure that `parseDefaultAppearance` won't attempt to access a not yet defined variable (PR 12831 follow-up)

Note how, in the `if (this.stateManager.stateStack.length !== 0) {` branch, we're attempting to access the not yet defined variable[1] `args`. If this code-path is ever hit, an Error will be thrown and parsing will thus be aborted immediately (likely leading to e.g. rendering bugs).

Note that I found this purely by accident, since I happened to glance at the LGTM report. However, I've since found that the error is also present during the unit-test[2] and with this patch we're actually testing the *intended* thing here.

As part of fixing this, and to avoid re-introducing a similar bug in the future, we'll now instead always reset `args.length` *before* attempting to read the next operator.
Also, we can use the existing `EvaluatorPreprocessor.savedStatesDepth` getter to simplify the save/restore detection a tiny bit.

---
[1] The ESLint rule `no-use-before-define` would have helped catch this problem, but unfortunately we cannot enable that without quite a bit of refactoring all over the code-base.

[2] The unit-test was updated such that it would fail in the `master`-branch.",False
c5083cda028963a5d12c2d4264ade904ea016930,2021-01-23 03:42:14,Dominik Hufnagel,"set font size and color on annotation layer

use the default appearance to set the font size and color of a text
annotation widget",False
a2b592f4a232f7afb9fa60adc44c960fd58bf559,2021-01-23 02:08:15,Jonas Jenwald,"Add previous/next-page functionality that takes scroll/spread-modes into account (issue 11946)

 - For wrapped scrolling, we unfortunately need to do a fair bit of parsing of the *current* page layout. Compared to e.g. the spread-modes, where we can easily tell how the pages are laid out, with wrapped scrolling we cannot tell without actually checking. In particular documents with varying page sizes require some care, since we need to check all pages on the ""row"" of the current page are visible and that there aren't any ""holes"" present. Otherwise, in the general case, there's a risk that we'd skip over pages if we'd simply always advance to the previous/next ""row"" in wrapped scrolling.

 - For horizontal scrolling, this patch simply maintains the current behaviour of advancing *one* page at a time. The reason for this is to prevent inconsistent behaviour for the next and previous cases, since those cannot be handled identically. For the next-case, it'd obviously be simple to advance to the first not completely visible page. However for the previous-case, we'd only be able to go back *one* page since it's not possible to (easily) determine the page layout of non-visible pages (documents with varying page sizes being a particular issue).

 - For vertical scrolling, this patch maintains the current behaviour by default. When spread-modes are being used, we'll now attempt to advance to the next *spread*, rather than just the next page, whenever possible. To prevent skipping over a page, this two-page advance will only apply when both pages of the current spread are visible (to avoid breaking documents with varying page sizes) and when the second page in the current spread is fully visible *horizontally* (to handle larger zoom values).

In order to reduce the performance impact of these changes, note that the previous/next-functionality will only call `getVisibleElements` for the scroll/spread-modes where that's necessary and that ""normal"" vertical scrolling is thus unaffected by these changes.

To support these changes, the `getVisibleElements` helper function will now also include the `widthPercent` in addition to the existing `percent` property.
The `PDFViewer._updateHelper` method is changed slightly w.r.t. updating the `currentPageNumber` for the non-vertical/spread modes, i.e. won't affect ""normal"" vertical scrolling, since that helped simplify the overall calculation of the page advance.

Finally, these new `BaseViewer` methods also allow (some) simplification of previous/next-page functionality in various viewer components.

*Please note:* There's one thing that this patch does not attempt to change, namely disabling of the previous/next toolbarButtons respectively the firstPage/lastPage secondaryToolbarButtons. The reason for this is that doing so would add quite a bit of complexity in general, and if for some reason `BaseViewer._getPageAdvance` would get things wrong we could end up incorrectly disabling the buttons. Hence it seemed overall safer to *not* touch this, and accept that the buttons won't be `disabled` despite in some edge-cases no further scrolling being possible.",False
6ffb6b1c0c4ac24ee2031b4d41ff3e760005fd03,2021-01-23 00:54:33,Tim van der Meij,"Merge pull request #12885 from Snuffleupagus/worker-tweak-caching

Simplify the `PDFFunctionFactory._localFunctionCache` initialization (PR 12034 follow-up); Fix the `gStateObj` lookup in `TranslatedFont._removeType3ColorOperators` (PR 12718 follow-up)",True
25d84e4c409d2ac58d595a990d066eaa57728c53,2021-01-23 00:51:40,Tim van der Meij,"Merge pull request #12887 from Snuffleupagus/keep-logical-assignment-operators

Keep logical assignment operators in `MOZCENTRAL`/`TESTING`-builds",True
5b675c7bf7a88256723aebee9e2aa7298fdd4858,2021-01-23 00:38:59,Tim van der Meij,"Merge pull request #12886 from Snuffleupagus/_getSaveFieldResources-fontName

Use `_defaultAppearanceData` directly in `WidgetAnnotation._getSaveFieldResources` (PR 12831 follow-up)",True
553314849620694068795e9ba2cda37446c407ef,2021-01-23 00:36:17,Tim van der Meij,"Merge pull request #12890 from Snuffleupagus/cleanup-eslint-off-rules

Enable ESLint rules that no longer need to be disabled on a directory/file-basis",True
73da90610284bc43f29efc1043247290c5eeb9e7,2021-01-23 00:31:45,Tim van der Meij,"Merge pull request #12888 from Snuffleupagus/stylelint-shorthand-property-no-redundant-values

Enable the Stylelint `shorthand-property-no-redundant-values` rule",True
4db7330677664e6a5b5ee88228c7474ad9d91583,2021-01-22 22:17:03,Jonas Jenwald,"Enable ESLint rules that no longer need to be disabled on a directory/file-basis

Given that browsers/environments without native support for both arrow functions and object shorthand properties are no longer supported in PDF.js, please refer to the compatibility information below, we can now enable a fair number of ESLint rules and also simplify/remove some `.eslintrc` files.

With the exception of the `no-alert` cases, all code changes were made automatically by using `gulp lint --fix`.

 - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#browser_compatibility",False
38c9f1a37a48320c2388123271f0a9736dfbe541,2021-01-22 19:06:02,Jonas Jenwald,"Enable the Stylelint `shorthand-property-no-redundant-values` rule

Note that these changes were done automatically, using `gulp lint --fix`; this rule will help avoid unnecessary repetition in the CSS.

Please find additional details about the Stylelint rule at https://stylelint.io/user-guide/rules/shorthand-property-no-redundant-values",False
4215534b3e95e46becffb0db1f424ae39e4e3f5c,2021-01-22 18:36:21,Jonas Jenwald,"Keep logical assignment operators in `MOZCENTRAL`/`TESTING`-builds

Given how recently logical assignment operators support were added to browsers, we're intentionally translating them even in `SKIP_BABEL = true` builds for the time being.
However, in either `MOZCENTRAL` or `TESTING` builds it should be OK to simply leave logical assignment operators intact.",False
ca1f58ea42dd99d99e33f2d1197a14cbea1a3b21,2021-01-22 17:53:04,Jonas Jenwald,"Use `_defaultAppearanceData` directly in `WidgetAnnotation._getSaveFieldResources` (PR 12831 follow-up)

With the changes in PR 12831, it's no longer necessary to keep track of the `fontName`-string separately since it's available through the `_defaultAppearanceData`-property as well.",False
8137c0547d89e23ed05c62f79fae67ccacc9878b,2021-01-22 16:57:38,Jonas Jenwald,"Fix the `gStateObj` lookup in `TranslatedFont._removeType3ColorOperators` (PR 12718 follow-up)

As can be seen in https://github.com/mozilla/pdf.js/blob/2cba29036180b420778bd2c91d21d71bd207c146/src/core/evaluator.js#L986 the `gStateObj` (which is actually an Array despite its name), is wrapped in Array when it's inserted into the OperatorList. Hence we obviously need to take this into account when accessing it in `TranslatedFont._removeType3ColorOperators`; this mistake happened because we don't have any test-cases for this particular code-path as far as I know.",False
cfaf23dee2511f3288c988a6b0314f0fa68d8995,2021-01-22 16:55:05,Jonas Jenwald,"Simplify the `PDFFunctionFactory._localFunctionCache` initialization (PR 12034 follow-up)

By changing this a `shadow`ed getter, we can simply access it directly and not worry about it being initialized. I have no idea why I didn't just implement it this way in the first place.",False
2cba29036180b420778bd2c91d21d71bd207c146,2021-01-22 03:30:26,Brendan Dahl,"Merge pull request #12836 from calixteman/update_buttons

JS -- update radio/checkbox values even if there are no actions",True
10396986974a24a9107231673bf5bb12edd94e27,2021-01-22 00:45:31,calixteman,"Add a parser to get font data from the default appearance (#12831)

* Add a parser to get font data from the default appearance
 - pdfium & poppler use a special parser too to get these info.

* Update src/core/default_appearance.js

Co-authored-by: Jonas Jenwald <jonas.jenwald@gmail.com>

Co-authored-by: Jonas Jenwald <jonas.jenwald@gmail.com>",False
4142001fc21de735ee8c0b4de9d9000f8b164f5b,2021-01-21 22:01:59,Brendan Dahl,"Merge pull request #12869 from calixteman/lw

Fix zoom issue with too thin lines",True
9d4bad91e27f4de4b5672a148f80d777b14fe90a,2021-01-21 01:33:04,Tim van der Meij,"Merge pull request #12878 from Snuffleupagus/worker-compat-checks

Remove redundant compatibility checks, for modern `generic` builds, in `src/core/worker.js`",True
f45ba02fd3b8b4cf54cec21579873d12926b640f,2021-01-21 01:03:02,Brendan Dahl,"Merge pull request #12850 from calixteman/missing_cstes

JS -- Add few missing constants in global scope",True
b4eb55250e7a412c0c9a7438a3ba28734529de80,2021-01-20 17:39:56,Jonas Jenwald,"Remove redundant compatibility checks, for modern `generic` builds, in `src/core/worker.js`

With the recent additions of optional chaining and nullish coalescing to the PDF.js code-base, a couple of the checks in `src/core/worker.js` are now redundant; please see this compatibility information:
 - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator#browser_compatibility

In practice, for the non-translated/non-polyfilled PDF.js builds, browsers without support for optional chaining and nullish coalescing will simply throw immediately upon loading of the code.
Hence both the `globalThis` and `Promise.allSettled` checks are now unnecessary, given this compatibility information:
 - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis#browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled#browser_compatibility

*Please note:* The `ReadableStream` check is however still necessary, since Node.js doesn't support that.",False
a10dc1cb6e24b83d1b713e3fd3dc9a44788541d1,2021-01-19 23:39:08,Tim van der Meij,"Merge pull request #12871 from Snuffleupagus/simplify-pdfSidebarNotification

Only display a notification on the `sidebarToggle`-button, and not the individual view-buttons (PR 7959 follow-up)",True
5e1e0e03a676865533930941357773020aa091a9,2021-01-19 23:28:01,Tim van der Meij,"Merge pull request #12875 from Snuffleupagus/src-display-more-optional-chaining

Replace some ternary operators with optional chaining, and nullish coalescing, in the `src/display/`-folder",True
2731dd4b49ae3584baeb6d8c0e0effd139f3f970,2021-01-19 23:22:16,Tim van der Meij,"Merge pull request #12874 from Snuffleupagus/docs-less-es5

Put less emphasis on ""ES5""/""ES6"" in the README and other documentation",True
5520737798adc9cf32ae6e893324aad3f3376f9e,2021-01-19 22:19:12,Jonas Jenwald,"Update the main, and pdfjs-dist, README to also include recent ECMAScript features

This adds ""optional chaining"" and ""nullish coalescing"" to the list of features needed when using the *modern*, i.e. non-translated/non-polyfilled, build of the PDF.js library.",False
298ee5cfbb5cbaea56ee6a3023856c4b30148ca0,2021-01-19 21:50:02,Jonas Jenwald,"Replace some ternary operators with optional chaining, and nullish coalescing, in the `src/display/`-folder

This way, we can further reduce unnecessary code-repetition in some cases.",False
abd2346e2a563b2b2842e18de333c27c5c8ef0e7,2021-01-19 17:32:02,Jonas Jenwald,"Put less emphasis on ""ES5""/""ES6"" in the README and other documentation

 - Don't explicitly mention ""ES5"" in https://mozilla.github.io/pdf.js/getting_started/#download, since that's no longer accurate. As-is, this will more than likely give users the wrong impression regarding our *actual* browser support.

 - Reword the ""Getting the Code""-section of the README, since an ES6-compatible browser is no longer sufficient for development purposes given our usage of modern ECMAScript features.

 - Update the ""Building PDF.js""-section of the README, to explicitly mention both the `gulp generic` and `gulp generic-es5` commands.

Hopefully this will help reduce *some* user confusion, but we should perhaps also consider changing the ""-es5""-suffix in our build-scripts and build-folders. (That would however require coming up with a ""better"" suffix, which might not be trivial.)",False
e997f60656872766e03755a111b3e22f960c6d49,2021-01-18 16:06:42,Jonas Jenwald,"Only display a notification on the `sidebarToggle`-button, and not the individual view-buttons (PR 7959 follow-up)

The whole purpose of showing a notification on the `sidebarToggle` button, when the sidebar is closed, was to give users *some* kind of indication that the PDF document contains outline/attachments/layers without having to manually open the sidebar to check.
However, in the implementation in PR 7959, I also added notifications for each view-buttons in the sidebar. Looking back at this, I've always questioned the value of the last part, since the view-buttons already have a `disabled`-state which shows if they're available or not. Hence we're actually, in a sense, duplicating notifications for the outline/attachments/layers-buttons without adding (in my opinion) all that much overall value.

All-in-all, I'm thus proposing that we only display the notification on the `sidebarToggle`-button itself, since that should really be sufficient here, which also allows us to simplify the relevant code a fair bit.",False
9754216c600a571f3cd10f819a88269b98ab2616,2021-01-16 20:22:27,Calixte Denizet,"Fix zoom issue with too thin lines
 - aims to fix issue #12868: apply zoom factor to linewidth after setting it to 1.
 - only apply 1px-width when required
 - the sign of getSinglePixelWidth is used to know if 1px-width is required",False
172abc02e122d86d63562053fc6eecb2bcd5a62e,2021-01-16 01:24:34,Tim van der Meij,"Merge pull request #12864 from calixteman/6127

Enforce linewidth to 1px when at least one of scale factor is lower than 1",True
0d1b19632d42ab7b0d5813af16031dce4e05394a,2021-01-15 17:48:24,Calixte Denizet,Enforce linewidth to 1px when at least one of scale factor is lower than 1,False
d9df96d2997441d62acc11d6fb73ef84238d2b88,2021-01-15 17:43:59,calixteman,"Merge pull request #12863 from Snuffleupagus/pr-12812-followup

Remove a duplicated reference test (PR 12812 follow-up)",True
cf7eb879344200300756fa08dd3d73153c4b1971,2021-01-15 15:27:15,Jonas Jenwald,"Remove a duplicated reference test (PR 12812 follow-up)

 - Remove a *duplicated* reference test, see ""issue12810"", from the manifest.

 - Improve the spelling in a couple of comments in `src/core/canvas.js`, most notable of the word ""parallelogram"".

 - Update a comment, also in `src/core/canvas.js`, to actually agree with the value used to reduce confusion when reading the code.",False
6619f1f3f2da93efd89baa760faa9af597be4716,2021-01-15 04:51:44,Brendan Dahl,"Merge pull request #12812 from calixteman/too_thin

Enforce line width to be at least 1px after applied transform",True
db70efa3c6c2348030594a7fbb05aeb5c8f6c87b,2021-01-15 00:08:29,Tim van der Meij,"Merge pull request #12861 from Snuffleupagus/bug-1671312-ArialNarrow

Always re-measure non-embedded ArialNarrow fonts (bug 1671312, PR 12725 follow-up)",True
2600e59acba505fdadc03fdd044d873de16852c8,2021-01-14 20:21:48,Jonas Jenwald,"Always re-measure non-embedded ArialNarrow fonts (bug 1671312, PR 12725 follow-up)

While PR 12725 fixed bug 1671312 as reported, i.e. the ""In the upper right corner ""Purposes' has bad kerning.""-part, it however broke other parts of the text rendering.
Note in particular the tables, e.g. on page 2 and beyond, where the glyphs are now rendered too close together. The reason for this is that the fonts in question are non-embedded ArialNarrow, which we just replace with Helvetica which obviously is not narrow. Given that the font replacement isn't a perfect fit for non-embedded ArialNarrow, we still need to re-measure the glyph widths in this case.",False
dcd1589b2cfcdc5cab1924ea9d4cda014114e2ab,2021-01-13 02:34:10,Tim van der Meij,"Merge pull request #12855 from Snuffleupagus/find-normalization

[api-minor] Highlight search results correctly for normalized text (PR 9448)",True
1bcbf69c96315e44764b21ec84d7401c39dff930,2021-01-13 01:26:19,Tim van der Meij,"Merge pull request #12853 from Snuffleupagus/BaseViewer-initializeScriptingEvents

Fix the initialization/resetting of scripting-related events in the `BaseViewer`",True
f1749f03e3f3c691653b6ac7108195bfea67e6a2,2021-01-13 00:58:52,Jonas Jenwald,Ensure that `PDFViewerApplication.close` has a *consistent* return value,False
13742eb82d7f3aedf6b9b93d81fbdadcb5f232f7,2021-01-13 00:58:50,Jonas Jenwald,"Inlude the JS `actions` for the page when dispatching the ""pageopen""-event in the `BaseViewer`

Note first of all how the `PDFDocumentProxy.getJSActions` method in the API caches the result, which makes repeated lookups cheap enough to not really be an issue.
Secondly, with the previous patch, we're now only dispatching ""pageopen""/""pageclose""-events when there's actually a sandbox that listens for them.

All-in-all, with these changes we can thus simplify the default-viewer ""pageopen""-event handler a fair bit.",False
6dae2677d5fabe3116065c6ada5e50aec451dcba,2021-01-12 22:38:08,Ross Johnson,"[api-minor] Highlight search results correctly for normalized text (PR 9448)

This patch is a rebased *and* refactored version of PR 9448, such that it applies cleanly given that `PDFFindController` has changed since that PR was opened; obviously keeping the original author information intact.

This patch will thus ensure that e.g. fractions, and other things that we normalize before searching, will still be highlighted correctly in the textLayer.

Furthermore, this patch also adds basic unit-tests for this functionality.

*Note:* The `[api-minor]` tag is added, since third-party implementations of the `PDFFindController` must now always use the `pageMatchesLength` property to get accurate length information (see the `web/text_layer_builder.js` changes).

Co-authored-by: Ross Johnson <ross@mazira.com>
Co-authored-by: Jonas Jenwald <jonas.jenwald@gmail.com>",False
a882a854461a60a3a38654a6d925c33ecf3cd979,2021-01-12 18:58:09,Jonas Jenwald,"Fix the initialization/resetting of scripting-related events in the `BaseViewer`

The ""pageopen""/""pageclose""-events are only necessary if, and only if, there's actually a sandbox to dispatch the events in. Hence we shouldn't dispatch those events unconditionally, as soon as `enableScripting` is set, but rather initialize that functionality only when needed.

Furthermore, in `web/app.js`, there's currently a bug since we're attempting to *manually* simulate a ""pageopen""-event for a page that may not actually have been rendered at the time. With the modified `BaseViewer.initializeScriptingEvents` method, we'll now dispatch a correct ""pageopen""-event here.",False
1de1ae0be6849911430e087decb744936ac56366,2021-01-12 16:14:58,calixteman,"Merge pull request #12838 from calixteman/authors

[api-minor] Change the ""dc:creator"" Metadata field to an Array",True
43d5512f5c9f370d39dfae946311d83e23ff0136,2021-01-12 02:04:07,Calixte Denizet,"[api-minor] Change the ""dc:creator"" Metadata field to an Array
 - add scripting support for doc.info.authors
 - doc.info.metadata is the raw string with xml code",False
8e6bec6e2e582e7d87661cd7b0d48bfd77ddcdb4,2021-01-11 21:49:28,Calixte Denizet,"JS -- Add few missing constants in global scope
 - these constants are available in pdfium implementation too
 - fix error code in aform.js",False
631bada0df53acd221d49e8cea83a1700abb7c05,2021-01-10 23:33:40,Tim van der Meij,"Merge pull request #12848 from timvandermeij/annotation-horizontal

Correctly align annotation content in horizontal/spead scrolling modes",True
36e6ae5b2f05f8e133bf66fb7195dfa2d2bb7bdb,2021-01-10 23:28:13,Tim van der Meij,"Correctly align annotation content in horizontal/spread scrolling modes

Not only was long text in popups no longer wrapped correctly, the
alignment was also center instead of left (or right, depending on the
locale used) for both text in popups and the other parts within the
annotation's section, such as the icon.",False
b3dccd66ab6f895aa4a721082fdac05277c6818b,2021-01-10 22:32:12,Calixte Denizet,"Enforce line width to be at least 1px after applied transform
 * add a comment to explain how minimal linewidth is computed.
 * when context.linewidth < 1 after transform, firefox and chrome
   don't render in the same way (issue #12810).
 * set lineWidth to 1 after transform and before stroking
   - aims fix issue #12295
   - a pixel can be transformed into a rectangle with both heights < 1.
     A single rescale leads to a rectangle with dim equals to 1 and
     the other to something greater than 1.
 * change the way to render rectangle with null dimensions:
   - right now we rely on the lineWidth set before ""re"" but
     it can be set after ""re"" and before ""S"" and in this case the rendering
     will be wrong.
   - render such rectangles as a single line.",False
666ef6dac06863e9c9016c9d86d445b096eb3831,2021-01-10 20:46:41,Tim van der Meij,"Merge pull request #12846 from Snuffleupagus/stylelint-length-zero-no-unit

Enable the Stylelint `length-zero-no-unit` rule",True
246a6f9d1329c95e4944d491943de4eda393a28e,2021-01-10 18:39:36,Jonas Jenwald,"Enable the Stylelint `length-zero-no-unit` rule

Note that these changes were done automatically, using `gulp lint --fix`.
With this rule, we'll thus enforce a *consistent* formatting of zero-lengths in our CSS files.

Please find additional details about the Stylelint rule at https://stylelint.io/user-guide/rules/length-zero-no-unit",False
f224a0eb9f5cb4798d9505f8b618934e12b19885,2021-01-10 18:23:30,Tim van der Meij,"Merge pull request #12845 from Snuffleupagus/cleanup-more-CSS-dir

Remove unnecessary `dir`-dependent CSS rules, and simplify som findbar-button rules (PR 11077 follow-up)",True
ddad2fe28a4630c2ad5db3bf02bc5d722f823820,2021-01-10 18:08:16,Tim van der Meij,"Merge pull request #12844 from Snuffleupagus/update-packages

Update packages and translations",True
3210b91cf85437f0befb626b94c8d937a65a075d,2021-01-10 18:04:49,Jonas Jenwald,Update l10n files,False
0e23b8b6ce105eb5915065f93fee1489513a640e,2021-01-10 18:04:49,Jonas Jenwald,"Update the `eslint-plugin-unicorn` package to the latest version

Please see https://github.com/sindresorhus/eslint-plugin-unicorn/releases/tag/v25.0.0 for additional details.",False
e14db97740e7141587f3fa79b38db972cd463295,2021-01-10 18:04:35,Jonas Jenwald,Update `npm` packages,False
ccbee6d2be579cb9f6d96b6be264eb3ac33714af,2021-01-10 18:00:36,Jonas Jenwald,"Remove unnecessary `dir`-dependent CSS rules, and simplify som findbar-button rules (PR 11077 follow-up)

With the updated default viewer UI, some `dir`-dependent CSS rules are now redundant since *identical* rules are being specified for both LTR and RTL mode; after PR 12807 landed I've found even more of these cases.

Note in particular that the findbar-button rules can be simplified quite a bit, since there's a fair amount of unnecessary duplication in the CSS.",False
f85b8721d1948b956d4e0abfc864c4b1c121f0b5,2021-01-10 17:51:28,Tim van der Meij,"Merge pull request #12842 from Snuffleupagus/issue-12841

Improve handling of JPEG images without an EOI marker (issue 12841)",True
699d65eb1c34271e6fc9bd7d64fee433c57b01bb,2021-01-10 17:47:28,Tim van der Meij,"Merge pull request #12840 from Snuffleupagus/sort-exports

Use ESLint to ensure that `export`s are sorted alphabetically",True
7ce969e8caf16f15f07d46ee17c853e1a8ad40e7,2021-01-10 03:42:38,calixteman,"Merge pull request #12843 from Snuffleupagus/issue-12394-test

Fix broken ""issue12394"" test-case",True
66b2c1936857bd862412d5d9ed73fc505ffa802a,2021-01-10 02:12:56,Jonas Jenwald,"Fix broken ""issue12394"" test-case

This test-case is currently broken, with the reference image being completely empty, since it uses the old ""annotationStorage"" format in the manifest.",False
81525fd446779f0a29003cf06e3ba33751954826,2021-01-10 01:07:51,Jonas Jenwald,"Use ESLint to ensure that `export`s are sorted alphabetically

There's built-in ESLint rule, see `sort-imports`, to ensure that all `import`-statements are sorted alphabetically, since that often helps with readability.
Unfortunately there's no corresponding rule to sort `export`-statements alphabetically, however there's an ESLint plugin which does this; please see https://www.npmjs.com/package/eslint-plugin-sort-exports

The only downside here is that it's not automatically fixable, but the re-ordering is a one-time ""cost"" and the plugin will help maintain a *consistent* ordering of `export`-statements in the future.
*Note:* To reduce the possibility of introducing any errors here, the re-ordering was done by simply selecting the relevant lines and then using the built-in sort-functionality of my editor.",False
cd9422a0754b5b317677e2c9bc210cc25d3184cf,2021-01-10 00:49:39,Jonas Jenwald,"Improve handling of JPEG images without an EOI marker (issue 12841)

Given that the PDF document in the issue contains the same very large JPEG image *three* times, this patch includes a test-case where only the first page has been extracted from it.",False
7f199e7017751a1938272f450c0384cc4850981f,2021-01-10 00:40:29,Tim van der Meij,"Merge pull request #12777 from Snuffleupagus/currentOutlineItem

Add support for finding/highlighting the outlineItem, corresponding to the currently visible page, in the sidebar (issue 7557, bug 1253820, bug 1499050)",True
492a8171b3c87ab3746266a01e68f84d40938eac,2021-01-09 20:39:46,Jani Pehkonen,"Add an icon for the ""find/highlight the current outlineItem"" functionality",False
5729c0b32f10ac17d0e86262f8e52d00b6518958,2021-01-09 20:39:44,Jonas Jenwald,"Add support for finding/highlighting the outlineItem, corresponding to the currently visible page, in the sidebar (issue 7557, bug 1253820, bug 1499050)

This implementation is inspired by the behaviour in (recent versions of) Adobe Reader, since it leads to reasonably simple and straightforward code as far as I'm concerned.
*Specifically:* We'll only consider *one* destination per page when finding/highlighting the current outline item, which is similar to e.g. Adobe Reader, and we choose the *first* outline item at the *lowest* level of the outline tree.

Given that this functionality requires not only parsing of the `outline`, but looking up *all* of the destinations in the document, this feature can when initialized have a non-trivial performance overhead for larger PDF documents.
In an attempt to reduce the performance impact, the following steps are taken here:

 - The ""find current outline item""-functionality will only be enabled once *one* page has rendered and *all* the pages have been loaded[1], to prevent it interfering with data regular fetching/parsing early on during document loading and viewer initialization.

 - With the exception of a couple of small and simple `eventBus`-listeners, in `PDFOutlineViewer`, this new functionality is initialized *lazily* the first time that the user clicks on the `currentOutlineItem`-button.

 - The entire ""find current outline item""-functionality is disabled when `disableAutoFetch = true` is set, since it can easily lead to the setting becoming essentially pointless[2] by triggering *a lot* of data fetching from a relatively minor viewer-feature.

 - Fetch the destinations *individually*, since that's generally more efficient than using `PDFDocumentProxy.getDestinations` to fetch them all at once. Despite making the overall parsing code *more* asynchronous, and leading to a lot more main/worker-thread message passing, in practice this seems faster for larger documents.

Finally, we'll now always highlight an outline item that the user manually clicked on, since only highlighting when the new ""find current outline item""-functionality is used seemed inconsistent.

---
[1] Keep in mind that the `outline` itself already isn't fetched/parsed until at least *one* page has been rendered in the viewer.

[2] And also quite slow, since it can take a fair amount of time to fetch all of the necessary `destinations` data when `disableAutoFetch = true` is set.",False
c0a6d6cd212436a2ed4e796815fc11d04d94c638,2021-01-09 01:33:41,Tim van der Meij,"Merge pull request #12394 from calixteman/appearance

In a text widget, Font resources can be in the appearance",True
5fed65203ec9b2acddf8c1e6eedb141f8715c21c,2021-01-09 01:26:17,Tim van der Meij,"Merge pull request #12837 from Snuffleupagus/unit-test-factories

Remove unncessary `CanvasFactory`/`CMapReaderFactory`/`FileReaderFactory` duplication in unit-tests",True
6089b8f408b98910c06f20e423959cb666246463,2021-01-09 01:20:40,Tim van der Meij,"Merge pull request #12834 from Snuffleupagus/es5-types

Try to fix TypeScript definitions for the es5-build in pdfjs-dist (issue 12872)",True
941b65f68326b1e74374eb2040399773f67e09c8,2021-01-08 22:03:59,Jonas Jenwald,"Remove unncessary `CanvasFactory`/`CMapReaderFactory`/`FileReaderFactory` duplication in unit-tests

Given that the API will now, after PR 12039, automatically pick the correct factories to use depending on the environment (browser vs. Node.js), we can utilize that in the unit-tests as well. This way we don't have to manually repeat the same initialization code in *multiple* unit-tests.
*Note:* The *official* PDF.js API is defined in `src/pdf.js`, hence the new exports in `src/display/api.js` will not affect that.

Also, updates the unit-test `FileReaderFactory` helpers similarily.

*Drive-by change:* Fix the `CMapReaderFactory` usage in the annotation unit-tests, since the cache should only contain raw data and not a Promise. While this obviously works as-is, having unit-tests that ""abuse"" the intended data format can easily lead to unnecessary failures if changes are made to the relevant `src/core/` code.",False
7172f0a9286fd09f9baaeb82f808bd6543c3f5cb,2021-01-08 21:13:16,Calixte Denizet,JS -- update radio/checkbox values even if there are no actions,False
83119b90000ed7c18582a1e7c9948aedb106cecb,2021-01-08 14:43:47,Calixte Denizet,"In a text widget, Font resources can be in the appearance",False
aabf768e534d3a39bc9ef5212def5a19be702167,2021-01-08 13:59:47,Jonas Jenwald,"Try to fix TypeScript definitions for the es5-build in pdfjs-dist (issue 12872)

Given that we're already using the `external/dist/` folder for things we simply want to copy to pdfjs-dist during building, this patch *should* hopefully work since it's based on the suggestion in issue 12827.

As long as this only requires a *single/small* file, to fix the TypeScript definitions in es5-builds, this solution seem acceptable as far as I'm concerned. (Although, please note that I don't know enough about TypeScript to actually test the patch.)",False
35845d1bbb7d6b581e48ddd8d8f1a96ab9a931d2,2021-01-08 04:28:23,Tim van der Meij,"Merge pull request #12820 from Snuffleupagus/pageclose-skip

Don't dispatch ""pageclose"" events if a ""pageopen"" wasn't dispatched for the page (PR 12747 follow-up)",True
048081fb692955b117e43b2164a0551c2709eac1,2021-01-08 03:45:41,Tim van der Meij,"Merge pull request #12824 from Snuffleupagus/preEvaluateFont-errors

Improve the handling of errors, in `PartialEvaluator.loadFont`, occuring in `PartialEvaluator.preEvaluateFont` (issue 12823)",True
373230185af7012dfc502c83bd22ddbc42a95dbf,2021-01-08 03:41:31,Jonas Jenwald,"Unconditionally initialize the `this._pageOpenPendingSet` in `BaseViewer._initializeScriptingEvents` (PR 12747 follow-up)

With the code dispatching a ""pageopen"" event on the existing (general) `BaseViewer` event ""pagesinit"", in practice this means that the `Set` is always being created. Hence we can simplify the method overall, by always initializing the `this._pageOpenPendingSet` property.",False
32b0e00ba7e0635a224041a7e00c28e40c04b4e2,2021-01-08 03:41:31,Jonas Jenwald,"Don't dispatch ""pageclose"" events if a ""pageopen"" wasn't dispatched for the page (PR 12747 follow-up)

Given that ""pageopen"" events are not guaranteed to occur, if the page becomes inactive *before* it finishes rendering, we should probably also avoid dispatching a ""pageclose"" event in that case to avoid confusing/inconsistent state in any event handlers.",False
ac5168a23f51baf86b3a5c3c418870cb45ce1c1a,2021-01-08 03:32:53,Tim van der Meij,"Merge pull request #12822 from Snuffleupagus/scripting-contentLength

Improve the `PDFViewerApplication._contentLength` handling in the viewer, related mostly to scripting",True
5bde4b71f85cde9aa6780d561467e9c0b4bd157e,2021-01-08 03:26:42,Tim van der Meij,"Merge pull request #12292 from calixteman/encoding

Fix encoding issues when printing/saving a form with non-ascii characters",True
4be76c89d1b00c38b31525497005b71c0024e538,2021-01-08 03:13:35,Brendan Dahl,"Merge pull request #12816 from calixteman/page_actions

JS -- Plug PageOpen and PageClose actions",True
95e094c0bd905c594cf2269665540c7cd78776f9,2021-01-08 02:54:24,Tim van der Meij,"Merge pull request #12815 from Snuffleupagus/update-webpack-example

Update webpack example",True
d8e42f7b087f9c4208b8f14cd7c1c9fb0761a6cf,2021-01-08 02:52:16,Tim van der Meij,"Merge pull request #12825 from fdaveine/worker-loader-missing-option-for-webpack-usage

An option is missing for last versions of worker-loader to use pdf.js with webpack",True
35b15cc0b5dabad116cdbbb2cfd91de6152f0ba5,2021-01-07 19:44:02,fabien,"1. Add `filename` option in `worker-loader` package require. Without this option, since version 3.0.0, it tell webpack to generate a worker file named `pdf.worker.worker.js` instead of the expected `pdf.worker.js`.
2. Update README of webpack example to mention that a version 3.0.0 or higher of the `worker-loader` package is now required.",False
78c32c26971b36163a0c7ddf6264109efc97a954,2021-01-07 16:08:38,Jonas Jenwald,"Improve the handling of errors, in `PartialEvaluator.loadFont`, occuring in `PartialEvaluator.preEvaluateFont` (issue 12823)

Currently any errors thrown in `preEvaluateFont`, which is a *synchronous* method, will not be handled at all in the `loadFont` method and we were thus failing to return an `ErrorFont`-instance as intended here.

Also, add an *explicit* check in `PartialEvaluator.preEvaluateFont` to ensure that Type0-fonts always have a *valid* dictionary.",False
7d3632d5d543ed05e75cc254b4be6f1659f26dbd,2021-01-07 15:03:48,Jonas Jenwald,"Improve the `PDFViewerApplication._contentLength` handling in the viewer, related mostly to scripting

Ensure that `PDFViewerApplication._contentLength` is always updated with the *correct* length, as returned by `PDFDocumentProxy.getDownloadInfo`, and only let the `PDFViewerApplication._initializeMetadata` method overwrite if it's not already been set.

Finally, in `PDFViewerApplication._initializeJavaScript`, the fallback `_contentLength` handling is now moved to just after the fallback `documentInfo` handling, such that all the fallback code is in one place within the method.",False
6523f8880bd91cf1f8ccbf0215dd7e1ea1590e9f,2021-01-06 18:01:15,Calixte Denizet,JS -- Plug PageOpen and PageClose actions,False
95f0f3b621171dc157020d06dd9e7b9a8425e6d2,2021-01-06 15:32:13,Jonas Jenwald,"Try to re-add the `worker-loader` package, in pdfjs-dist, using `peerDependencies` (PR 11474 follow-up)

There's been a number of (somewhat) recent issues where people are having trouble using pdfjs-dist together with `webpack`, since that library purposely doesn't declare any dependencies; refer to PR 11474 for additional context.

In an *attempt*, although I don't know how much this will actually help in practice (given my limited `webpack` experience), let's try to list `worker-loader` as a *peer*-dependency to see if that helps. This should, unless I'm completely misunderstanding https://docs.npmjs.com/cli/v6/configuring-npm/package-json#peerdependencies, prevent `worker-loader` from being installed by default for *all* pdfjs-dist users while still indicating the dependency for those who need it.",False
56424967f274591ff3cb7496c7fc9df9ff769e18,2021-01-05 21:53:18,Calixte Denizet,Fix encoding issues when printing/saving a form with non-ascii characters,False
67746ac1c0bde32c68b9049a82a28a460d314325,2021-01-05 17:12:11,Jonas Jenwald,"Update the webpack-versions used in `examples/webpack`

Once the next PDF.js release is made, the `webpack` example will no longer work since the non-translated builds now use ECMAScript features not supported by older `webpack`-versions.",False
ed3758f84d2a285a19a0fa32baa1b75d990f54ee,2021-01-03 23:40:19,Tim van der Meij,"Merge pull request #12808 from calixteman/pending

Disable a test using  pending function",True
a3c2d651ef25284352d12948f85c633fc1b42388,2021-01-03 23:36:27,Calixte Denizet,"Disable a test using ""pending"" function",False
ca18af6af3064fea7b2dff79e90ba594c4ba478e,2021-01-03 23:16:37,Tim van der Meij,"Merge pull request #12774 from calixteman/doc_action_test

JS -- Add tests for print/save actions",True
187542da8de342644469134e638e9fb8de28f640,2021-01-03 19:57:55,Tim van der Meij,"Merge pull request #12807 from Snuffleupagus/rm-CSS-dir-duplication

Remove unnecessary `dir`-dependent CSS rules, and add a missing CSS variable (PR 11077 follow-up)",True
94f102076914d27f826a02551f41cf06ebfc5d1c,2021-01-03 19:31:03,Jonas Jenwald,"Remove unnecessary `dir`-dependent CSS rules, and add a missing CSS variable (PR 11077 follow-up)

With the updated default viewer UI, a couple of `dir`-dependent CSS rules have now become redundant since *identical* rules are being specified for both LTR and RTL mode.

Furthermore, there's also some unnecessary re-defining of the `toolbarButton`/`secondaryToolbarButton`-icon related CSS rules.

Finally, for the toggle-buttons there's a particular styling applied to the `:hover:active` state, however the color wasn't defined with CSS variables.",False
1810e65d96bc9f8ac0d4bfe130f2cfed6643f4a8,2021-01-03 17:12:42,Tim van der Meij,"Merge pull request #12804 from Snuffleupagus/DownloadManager-rm-onerror

Remove the `DownloadManager.onerror` functionality, since its only usage is unlikely to be helpful",True
4d643b853ac7323225556fcd1d16048b2de819b2,2021-01-03 17:09:49,Tim van der Meij,"Merge pull request #12805 from Snuffleupagus/rm-CSS-button-image-transform

Remove unnecessary toolbarButton icon-flipping in RTL mode (PR 11077 follow-up)",True
5cb31a7ab65b84b90d217786135db6f59f80acf7,2021-01-02 18:34:31,Jonas Jenwald,"Remove unnecessary toolbarButton icon-flipping in RTL mode (PR 11077 follow-up)

With the updated default viewer UI, a couple of the toolbarButton icons are now *vertically* symmetrical; hence we can remove some now unneeded `transform: scaleX(-1);` rules from the viewer CSS.",False
775d45b36ac6b75795f55c143e21034ff4370a9a,2021-01-02 17:55:42,Jonas Jenwald,"Remove the `DownloadManager.onerror` functionality, since its only usage is unlikely to be helpful

Note how the `onerror` functionality is not being used in the GENERIC `DownloadManager`, since we have no way of knowing if downloading succeeded.
Hence this functionality is only *possibly* useful in MOZCENTRAL builds, however as outlined in the existing comments it's unlikely to be helpful in practice. Generally speaking, if downloading failed once in [`PdfStreamConverter.jsm`](https://searchfox.org/mozilla-central/rev/809ac3660845fef6faf18ec210232fdadc0f1ad9/toolkit/components/pdfjs/content/PdfStreamConverter.jsm#294-406) it seems very likely that it would fail again; all-in-all I'm thus suggesting that we just remove the `onerror` functionality altogether here.",False
c4b95d925fb741bbe4cd1fd9808ce40470bcce4d,2021-01-02 17:07:08,Jonas Jenwald,"Add a new helper method, on `PDFViewerApplication`, to determine the document filename

Currently this code is duplicated no less than three times in the `web/app.js` file, and by introducing a helper method we can avoid unnecessary repetition.",False
c3e02b34719e26edfeecc43ceb92d14e7d06f413,2021-01-02 17:05:09,Tim van der Meij,"Merge pull request #12802 from Snuffleupagus/FirefoxCom-requestAsync

Add a new `FirefoxCom.requestAsync` method, to simplify the code in `web/firefoxcom.js`",True
a49b3e04d5b3cd89175f51040a64038569b0446a,2021-01-01 20:09:26,Jonas Jenwald,"Add a new `FirefoxCom.requestAsync` method, to simplify the code in `web/firefoxcom.js`

There's a fair number of cases where `FirefoxCom.request`-calls are manually wrapped in a Promise to make it asynchronous. We can reduce the amount of boilerplate code in these cases by introducing a new `FirefoxCom.requestAsync` method instead.

Furthermore, a couple of `FirefoxCom.request`-calls in the `DownloadManager` are also changed to be asynchronous rather than using callback-functions.
With this patch, we're thus able to replace a lot of *direct* usages of `FirefoxCom.request` with the new `FirefoxCom.requestAsync` method instead.",False
0caf72d5bd1bb9b60d38d51b037065a7386fa3d9,2021-01-01 19:12:06,Jonas Jenwald,"Convert `FirefoxCom` to a class, with `static` methods

*Please note:* It's highly recommended to ignore whitespace-only changes when looking at this patch.

Besides modernizing this code, by converting it to a standard class, the existing JSDoc comments are updated to actually agree better with the way that this functionality is used now. (The next patch will reduce usage of `FirefoxCom.request` significantly, hence the JSDocs for the optional `callback` is removed to not unnecessarily advertise that functionality.)

Finally, the unnecessary/unused `return` statement at the end of `FirefoxCom.request` is also removed.",False
04321546ceded1fe68f7f8d4926e4a31cbedf780,2021-01-01 18:33:56,Tim van der Meij,"Merge pull request #12801 from Snuffleupagus/FirefoxCom-document-listener

Modernize the `FirefoxCom.request` method",True
8b3b5424471a44e0784b69b638c9093afd4e031b,2020-12-31 20:47:42,Jonas Jenwald,"Ensure that the ""pdf.js.response"" event listener, in `FirefoxCom.request`, actually applies to the current `Text` node

Given that the event listener is registered on the document, there could in *theory* be more than one of these listeners present at any one time.
In practice this doesn't currently happen, since all of the `actions` invoked in [`PdfStreamConverter.jsm`](https://searchfox.org/mozilla-central/rev/bfbacfb6a4efd98247e83d3305e912ca4f7e106a/toolkit/components/pdfjs/content/PdfStreamConverter.jsm#933-952) are *synchronous* methods. However, there's no guarantee that this will always be the case, and it's easy enough to prevent any future issues here by simply registering the ""pdf.js.response"" event listener on the `Text` node instead. This works since, as can be seen in [`PdfStreamConverter.jsm`](https://searchfox.org/mozilla-central/rev/bfbacfb6a4efd98247e83d3305e912ca4f7e106a/toolkit/components/pdfjs/content/PdfStreamConverter.jsm#919,943), the event is dispatched on the element itself rather than the document.",False
99b1a62c9787bbc9232963d2cf8c1cee97140db6,2020-12-31 19:17:39,Jonas Jenwald,"Use `remove`, rather than `removeChild`, when removing the temporary `Text` nodes used in `FirefoxCom`

This is the ""modern"" way of removing a node from the DOM, which has the benefit of being a lot shorter and more concise.

Also, this patch removes the `return` statement from the ""pdf.js.response"" event listener, since it's always `undefined`, given that none of the `callback`-functions used here ever return anything (and don't need to either). Generally speaking, returning a value from an event listener isn't normally necessary either.",False
cc49b65a11fbe3cfc9099377ebe3410713a953c0,2020-12-31 18:01:28,Jonas Jenwald,"Use the `once: true` option, rather than manually removing the ""pdf.js.response"" event listener in `FirefoxCom.request`

When this code was originally added, the `once` option didn't exist yet.",False
f305e042eeeac4b3a496f629eb92cb842dca44a7,2020-12-31 17:40:44,Tim van der Meij,"Merge pull request #12800 from Snuffleupagus/DefaultExternalServices-async-fallback

Convert `DefaultExternalServices.fallback` to an asynchronous method",True
11ec2b75308aa0f85c8ad29ca54cbdc570062613,2020-12-31 01:18:40,Jonas Jenwald,"Convert `DefaultExternalServices.fallback` to an asynchronous method

This method currently accepts a callback-function, which does feel a bit old fashioned now. At the time that this code was introduced, native Promises didn't exist yet and there's a custom Promise-implementation used instead.

However, today with Promises and async/await being used *a lot* it seems reasonable to change `DefaultExternalServices.fallback` to an `async` method instead such that the callback-function can be removed.",False
6e55326343be543a11a8110e16ceb1c3f0f9f6e6,2020-12-30 18:35:21,Tim van der Meij,"Merge pull request #12796 from Snuffleupagus/BaseTreeViewer._finishRendering

Extract common functionality into a new `BaseTreeViewer._finishRendering` method",True
03f10739d88b6267f0f9af702e01a5cae9c4e8e3,2020-12-30 18:18:58,Jonas Jenwald,"Extract common functionality into a new `BaseTreeViewer._finishRendering` method

Note how the end of the `{PDFOutlineViewer, PDFAttachmentViewer, PDFLayerViewer}.render` methods share *almost* identical code, hence we can reduce some duplication by introducing the new `BaseTreeViewer` helper method here.

Furthermore, setting `this._lastToggleIsShow` can be made ever so slightly more efficient, since we don't care about the number of "".treeItemsHidden""-classes but only want to know if at least one exists.",False
57bec090ae55925c59d67b5da0fa2e9c266efae8,2020-12-30 18:02:31,Tim van der Meij,"Merge pull request #12793 from Snuffleupagus/Eventbus-once

Support the `once` option, when registering `EventBus` listeners",True
739d7c6d774b6c1f1aa8ee2ab133ebb3c33d2453,2020-12-29 21:19:13,Jonas Jenwald,"Support the `once` option, when registering `EventBus` listeners

This follows the same principle as the `once` option that exists in the native `addEventListener` method, and will thus automatically remove an `EventBus` listener when it's invoked; see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters

Finally, this patch also tweaks some the existing `EventBus`-code to use modern features such as optional chaining and logical assignment operators.",False
9a779c2e9037524e6bb8557021eaea83d2eb5682,2020-12-29 21:07:11,Tim van der Meij,"Merge pull request #12792 from timvandermeij/readme-ci

Switch the badge in the README from Travis CI to GitHub Actions (PR 12760 follow-up)",True
0ae10bbacdb57f545f8e87439f71f59e19c8b481,2020-12-29 21:02:52,Tim van der Meij,Switch the badge in the README from Travis CI to GitHub Actions,False
3e34281e3b6e9078ac91dd365393ff15e3a02340,2020-12-29 01:06:29,Tim van der Meij,"Merge pull request #12788 from Snuffleupagus/presentationmodechanged-state

Include the `state` in the ""presentationmodechanged"" event, and remove the separate `active`/`switchInProgress` properties",True
c185061757663f7995ee73bc90f42749c61db3f3,2020-12-29 01:01:17,Jonas Jenwald,"Include the `state` in the ""presentationmodechanged"" event, and remove the separate `active`/`switchInProgress` properties

Given that we already have a `PresentationModeState`-enumeration, we should use that with the ""presentationmodechanged"" event rather than including separate properties. Note that this new behaviour, of including an enumeration-value in the event, is consistent with lots of other existing viewer-events.

To hopefully avoid issues in custom implementations of the default viewer, any attempt to access the removed properties will now throw.",False
50303fc8f47719f494ce1c6601c5194aa8633579,2020-12-29 00:56:10,Tim van der Meij,"Merge pull request #12766 from Snuffleupagus/issue-11004

Ignore, rather than throwing on, unsupported Coding style default (COD) options in JPEG 2000 images (issue 11004)",True
2ad948ac11ef17f2b4cb721181be7277e907c6a0,2020-12-29 00:28:47,Tim van der Meij,"Merge pull request #12781 from Snuffleupagus/update-packages

Update packages and translations",True
776d6f053906016517d2c194778c9c40aa97dcf0,2020-12-29 00:27:18,Tim van der Meij,"Merge pull request #12780 from Snuffleupagus/rm-CSS-noResults

Remove unused `.noResults` CSS-rule",True
689e3e9732d767fe1c90f8ecf8a63fbddf71423c,2020-12-27 15:43:54,Jonas Jenwald,Update l10n files,False
94dfb460919c616765c1b144c9f92df68ee4ded1,2020-12-27 15:41:18,Jonas Jenwald,Update `npm` packages,False
e8b8020667b6f9c939bd710872c0c52822120b2e,2020-12-26 17:34:32,Jonas Jenwald,"Remove unused `.noResults` CSS-rule

This CSS-rule was added all the way back in PR 1808, however it's been completely unused for years (I didn't bother finding out *exactly* when that happened). Looking at its only usage, see https://github.com/mozilla/pdf.js/pull/1808/files#diff-987d91686287a25ac2405baaf17b699a5fc1a176a53f8ea347a72ef486001f7bR795, it's already clear from the surrounding code that it's indeed unnecessary now.",False
ffd4bc790c5fb2c43caed9420f08893cf442199a,2020-12-24 23:21:00,Calixte Denizet,"JS -- Add tests for print/save actions
 * change PDFDocument::hasJSActions to return true when there are JS actions in catalog.",False
df53e7811ce5e1337d27ddd7b6a3bf8b86a86d9d,2020-12-24 16:20:04,calixteman,"Merge pull request #12773 from Snuffleupagus/move-sandboxBundleSrc

Pass in the ""sandboxBundleSrc"" option when calling `DefaultExternalServices.createScripting`",True
0a7d5940d30c17c972f759015f837a100b26b276,2020-12-24 16:17:18,calixteman,"Merge pull request #12771 from Snuffleupagus/viewer-dispatchEventInSandbox-fixes

[Scripting] Try to ensure that the `WillPrint`/`DidPrint` respectively `DidSave` events are always dispatched",True
47ff3195e459e6569c438fc37490444758f04f8c,2020-12-23 18:35:49,Jonas Jenwald,"Pass in the ""sandboxBundleSrc"" option when calling `DefaultExternalServices.createScripting`

Similar to e.g. the ""locale"" option, this in *only* done for those build-targets where the ""sandboxBundleSrc"" is actually defined.
With these changes we can remove an `AppOptions` dependency from the `web/generic_scripting.js` file, thus limiting *direct* `AppOptions` usage in the default viewer files.",False
a4786c96898de09cb6174f4abe6b7d19009d1cb6,2020-12-23 16:33:21,Jonas Jenwald,"[Scripting] Await manually triggered `dispatchEventInSandbox` calls in the viewer

Given that the `dispatchEventInSandbox` method (on the scripting-classes) is asynchronous, there's a very real risk that the events won't be dispatched/handled until *after* their associated functionality has actually run (with the ""Will..."" events being particularily susceptible to this issue).
To reduce the likelihood of that happening, we can simply `await` the `dispatchEventInSandbox` calls as necessary. A couple of methods are now marked as `async` to support these changes, however that shouldn't be a problem as far as I can tell.

*Please note:* Given that the browser ""beforeprint""/""afterprint"" events are *synchronous*, we unfortunately cannot await the `WillPrint`/`DidPrint` event dispatching. To fix this properly the web-platform would need support for asynchronous printing, and we'll thus have to hope that things work correctly anyway.",False
0daf51c340718429774ef93a2be47dcf5242c297,2020-12-23 16:22:56,Jonas Jenwald,"[Scripting] Try to ensure that the `WillPrint`/`DidPrint` respectively `DidSave` events are always dispatched

Note that currently the `DidSave` event is not *guaranteed* to actually be dispatched if there's any errors during saving, which is easily fixed by simply moving it to occur in the `finally`-handler in `PDFViewerApplication.save` method.

For the `WillPrint`/`DidPrint` events, things are unfortunately more complicated. Currently these events will *only* be dispatched iff the printing request comes from within the viewer itself (e.g. by the user clicking on the ""Print"" toolbar button), however printing can be triggered in a few additional ways:
 - In the GENERIC viewer:
   - By the <kbd>Ctrl</kbd>+<kbd>P</kbd> keyboard shortcut.
 - In the MOZCENTRAL viewer, i.e. the Firefox built-in viewer:
   - By the <kbd>Ctrl</kbd>+<kbd>P</kbd> keyboard shortcut.
   - By the ""Print"" item, as found in either the Firefox ""Hamburger menu"" or in the browser-window menu.

In either of the cases described above, no `WillPrint`/`DidPrint` events will be dispatched. In order to *guarantee* that things work in the general case, we thus have to move the `dispatchEventInSandbox` calls to the ""beforeprint""/""afterprint"" event handlers instead.",False
d060cd2a6179301f2b92e3dc91c4dd480d7387e0,2020-12-23 11:48:37,Brendan Dahl,"Merge pull request #12637 from calixteman/buttons

JS -- Add support for buttons",True
6516ff20b504eae3280c52f67a8277bebceb2537,2020-12-22 22:10:23,Brendan Dahl,"Merge pull request #12770 from calixteman/rm_timeout

Remove timeout in annotation integration test",True
9dc331ec621cad157a7a8046b3eb0bfce2412e08,2020-12-22 21:20:28,Calixte Denizet,Remove timeout in annotation integration test,False
7c3facb17462ea3f612d076293b6287691d1a248,2020-12-22 21:11:51,Calixte Denizet,"JS -- Add support for buttons
 * radio buttons
 * checkboxes",False
9c99df7cac7c5014738a124b5b4904ccd5217ee3,2020-12-22 03:26:56,Brendan Dahl,"Merge pull request #12765 from Snuffleupagus/_initializeAutoPrint-scripting-tweaks

Avoid the `getJavaScript` API-call in `PDFViewerApplication._initializeAutoPrint` when ""enableScripting"" is set",True
cffb7af3b077f6f5e348aefd5362f2dd98dc5b59,2020-12-22 01:05:52,Jonas Jenwald,"Ignore, rather than throwing on, unsupported Coding style default (COD) options in JPEG 2000 images (issue 11004)

Similar to other markers that we currently skip, by ignoring unsupported Coding style default (COD) options we'll at least render *something* here (although some JPEG 2000 images may look slightly wrong).
Note that if the unsupported COD options lead to additional errors, during parsing, we'll still abort parsing of the JPEG 2000 image.",False
3ea1c43b1579f381d787596e919b3429c47c89ab,2020-12-21 23:14:08,Brendan Dahl,"Merge pull request #12751 from calixteman/da_not_a_string

Add a default DA for textfield to avoid issues when printing or saving",True
7bab8350c0d7c479234e1474d0681f52c599bd9d,2020-12-21 16:38:17,Jonas Jenwald,"Avoid the `getJavaScript` API-call in `PDFViewerApplication._initializeAutoPrint` when ""enableScripting"" is set

Rather than calling `getJavaScript` in the API and then ignoring the result, when ""enableScripting"" is set, it should be more efficient/faster to simply skip it altogether instead.

Finally, the `setTimeout` call at the end of `PDFViewerApplication._initializeAutoPrint` is removed, since it doesn't seem necessary any more as far as I can tell.[1]
Note that when this functionality was originally added, back in PR 2839, it seems that `pagesPromise` simply waited for the `getPage` calls of *all* pages to resolve. Today, on the other hand, the viewer fetches *and* renders the first page *before* doing the remaining `getPage` calls, and only afterwards is `pagesPromise` resolved. Hence it's not really clear why we now need to delay printing even further with a `setTimeout` call.

---
[1] The patch was tested with the following documents: https://github.com/mozilla/pdf.js/blob/master/test/pdfs/bug1001080.pdf and https://github.com/mozilla/pdf.js/blob/master/test/pdfs/issue6106.pdf",False
a7c682c6009548ff10cabed9968939045437beb2,2020-12-20 04:08:45,Calixte Denizet,"Add a default DA for textfield to avoid issues when printing or saving
 * it aims to fix issue #12750",False
c3730c177a2ff7b9ba12b81027d0a2bc1252044f,2020-12-20 03:03:46,Tim van der Meij,"Merge pull request #12761 from Snuffleupagus/unittest-no-components

Stop running `gulp components` as part of the unit-tests",True
175793b1cde12e6143e430e714106cf784421744,2020-12-20 02:49:07,Jonas Jenwald,"Stop running `gulp components` as part of the unit-tests

The `gulp components` task is only necessary when running the reference-tests, since they use the `SimpleLinkService` during the `annotationLayer` sub-tests.
However, unit-tests don't actually use any part of the `gulp components` build, and we can thus reduce the overall runtime of the standalone unit-tests by not building unnecessary files.",False
1104089b6733acf2f8b246a12c7b7f847593ed25,2020-12-20 02:42:08,Tim van der Meij,"Merge pull request #12760 from timvandermeij/github-actions

Switch from Travis CI to GitHub Actions",True
dd190a59b97ddaafb457a85326584dfa7cd7105c,2020-12-20 02:31:58,Tim van der Meij,Switch from Travis CI to GitHub Actions,False
1c8ead133a478c16fa34dd1036210e49cb08d04c,2020-12-20 01:43:28,Tim van der Meij,"Merge pull request #12758 from Snuffleupagus/AnnotationStorage-rm-event

Run `AnnotationStorage.resetModified` when destroying the `PDFDocumentLoadingTask`/`PDFDocumentProxy`",True
af52c5fd17da30873e203a331976eeb9151c3d61,2020-12-20 01:28:53,Tim van der Meij,"Merge pull request #12748 from Snuffleupagus/scripting-misc-fixes

Update the events, used with scripting, to use lower-case names and avoid using DOM events internally in the viewer + misc scripting-related tweaks",True
f9530e56dabf63c5daa4c8ef5f787271bb853580,2020-12-19 18:35:31,Jonas Jenwald,"Run `AnnotationStorage.resetModified` when destroying the `PDFDocumentLoadingTask`/`PDFDocumentProxy`

This will, in a very simple way using the existing events, thus allow the viewer to remove the ""beforeunload"" `window` event listener when the document is closed.
Generally speaking we want to avoid having *global* event listeners for the PDF document instance, which is why the `EventBus` exists, and instead reserve global events for the viewer itself. However, the `AnnotationStorage` ""beforeunload"" event unfortunately needs to be document-specific and we should thus ensure that it's correctly removed when the document is destroyed.",False
517af6b6ab164d92f188524e80c56e3e129e3f8f,2020-12-19 17:36:32,Jonas Jenwald,"Delay initialization of the `AnnotationStorage` callbacks slightly in the default viewer

These callbacks should not be necessary *before* the document has been initialized. Furthermore, move the functionality to a new helper-method since `PDFViewerApplication.load` is already quite large.",False
958ea2be8be36b08eb4672031335235d1512645d,2020-12-19 17:08:10,Jonas Jenwald,"Move the functionality of the `webViewerDownloadOrSave` function into a new `PDFViewerApplication` method instead

Given that this relies on accessing properties on the `PDFDocumentProxy`-instance, it seems more appropriate for this code to live in `PDFViewerApplication`.",False
6f40f4e7c2c46fc51b320d014294e9eebcbb18f8,2020-12-19 14:02:58,Jonas Jenwald,"Remove the arbitrary timeout in the ""must check that first text field has focus"" integration-test (PR 12702 follow-up)

It seems that the timeout is way too short in practice, since this new integration-test failed *intermittently* already in PR 12702 (which is where the test was added).

The ideal solution here would be to simply await an event, dispatched by the viewer, however that unfortunately doesn't appear to be supported by Puppeteer.
Instead, the solution implemented here is to add a new method in `PDFViewerApplication` which Puppeteer can query to check if the scripting/sandbox has been fully initialized.",False
54f45dc935ba34f63f91291f35a5eeb3ee0e80ff,2020-12-19 13:43:12,Jonas Jenwald,"Don't dispatch a ""doc/Open"" event in the sandbox when creating it failed

There's really no point, as far as I can tell, to attempt to dispatch an event in a non-existent sandbox. Generally speaking, even trying to do this *could* possibly even lead to errors in some cases.

Furthermore, utilize optional chaining to simplify some `dispatchEventInSandbox` calls throughout the viewer.

Finally, replace superfluous `return` statements with `break` in the switch-statement in the `updateFromSandbox` event-handler.",False
c78f153bda9178e24b1c46f93fe03d86ce66551a,2020-12-19 02:40:36,Jonas Jenwald,"Remove the `ENABLE_SCRIPTING` build-target, since it's not necessary

There's no really compelling reason, as far as I can tell, to introduce the `ENABLE_SCRIPTING` build-target, instead of simply re-using the existing `TESTING` build-target for the new `gulp integrationtest` task.

In general there should be no problem with just always enable scripting in TESTING-builds, and if I were to *guess* the reason that this didn't seem to work was most likely because the Preferences ended up over-writing the `AppOptions`.
As it turns out the GENERIC-viewer has already has built-in support for disabling of Preferences, via the `AppOptions`, and this can be utilized in TESTING-builds as well to ensure that whatever `AppOptions` are set they're always respected.",False
eff4d8182db0c8e7dd452012baa5124d5ef58fb6,2020-12-19 02:40:32,Jonas Jenwald,"Update the events, used with scripting, to use lower-case names and avoid using DOM events internally in the viewer

For DOM events all event names are lower-case, and the newly added PDF.js scripting-events thus ""stick out"" quite a bit. Even more so, considering that our internal `eventBus`-events follow the same naming convention.
Hence this patch, which changes the ""updateFromSandbox""/""dispatchEventInSandbox"" events to be lower-case instead.

Furthermore, using DOM events for communication *within* the PDF.js code itself (i.e. between code in `web/app.js` and `src/display/annotation_layer.js/`) feels *really* out of place.
That's exactly the reason that we have the `EventBus` abstraction, since it allowed us to remove prior use of DOM events, and this patch thus re-factors the code to make use of the `EventBus` instead for scripting-related events.
Obviously for events targeting a *specific element* using DOM events is still fine, but the ""updatefromsandbox""/""dispatcheventinsandbox"" ones should be using the `EventBus` internally.

*Drive-by change:* Use the `BaseViewer.currentScaleValue` setter unconditionally in `PDFViewerApplication._initializeJavaScript`, since it accepts either a string or a number.",False
e2b6d79dee9ffd2aba715d6b3cb8fa143d86153c,2020-12-19 02:33:41,Jonas Jenwald,"Tweak the `LinkAnnotationElement._bindJSAction` and `WidgetAnnotationElement.{_setEventListener, _setEventListeners}` methods

 - Update the `LinkAnnotationElement._bindJSAction` call-site to actually agree with the JSDocs, by passing in the `data`.

 - Prevent the links created by `LinkAnnotationElement._bindJSAction` from being displayed with empty hashes; compare with e.g. `LinkAnnotationElement. _bindNamedAction`.

 - The overall indentation-level in `WidgetAnnotationElement._setEventListener` can be reduced slightly by using early returns, which improves the overall readability of this method a bit. (We're also able to avoid unnecessary `in` usage here.)

 - The code can also be made *slightly* more efficient overall, by moving the `this.data.actions` check into `WidgetAnnotationElement._setEventListeners` instead. This way we can avoid useless `this._setEventListener`-calls when there are no actions present.",False
6dc39cb873160a3bfffece6e98e5cc3decb9dd8b,2020-12-19 02:33:41,Jonas Jenwald,"Tweak the new `mouseState` parameter, and its usage, in the viewer components and the `AnnotationLayer`

 - Actually remove the `isDown` property when destroying the scripting-instance.

 - Mark all `mouseState` usage as ""private"" in the various classes.

 - Ensure that the `AnnotationLayer` actually treats the parameter as properly *optional*, the same way that the viewer components do.

 - For now remove the `mouseState` parameter from the `PDFPageView` class, and keep it only on the `BaseViewer`, since it's questionable if all of the scripting-functionality will work all that well without e.g. a full `BaseViewer`.

 - Append the `mouseState` to the JSDoc for the `AnnotationElement` class, and just move its definition into the base-`AnnotationElement` class.",False
e6e280982536d27582b55ee41b2c200f29e79ac5,2020-12-19 02:03:32,calixteman,"Merge pull request #12702 from calixteman/doc_actions

JS - Collect and execute actions at doc level",True
6efd35099332a19dea89f7b5b7839640f3d18c17,2020-12-19 02:01:20,Tim van der Meij,"Merge pull request #12747 from Snuffleupagus/pageopen-pageclose

Add new ""pageopen""/""pageclose"" events for usage with JavaScript actions",True
b7fc916f48cbd1b5fa87dddde25d3f25949a521b,2020-12-19 01:44:06,Tim van der Meij,"Merge pull request #12753 from Snuffleupagus/issue-12752

Ignore, rather than throwing on, Coding style component (COC) markers in JPEG 2000 images (issue 12752)",True
f2378eb715c1ab46fbdccc3a1cc81541e9c85f13,2020-12-19 01:39:35,Tim van der Meij,"Merge pull request #12754 from calixteman/event_sb_creation

Dispatch an event on sandbox creation",True
1e2173f038f941cdbfd0fc4abd91fc92906021c7,2020-12-19 00:33:59,Calixte Denizet,"JS - Collect and execute actions at doc and pages level
 * the goal is to execute actions like Open or OpenAction
 * can be tested with issue6106.pdf (auto-print)
 * once #12701 is merged, we can add page actions",False
4ae9064d60551e4911134c0e2eff5df23f927bca,2020-12-18 23:42:43,Calixte Denizet,"Dispatch an event on sandbox creation
 * the goal is to be able to know when the sandbox is ready for mochitest in m-c",False
142f131ee1c2ab917d098b5a5bfe439ba9d656fd,2020-12-18 23:38:36,calixteman,"Merge pull request #12741 from calixteman/global_eval

JS -- Actions must be evaluated in global scope",True
48a76aea2b9fe85aa003831b31361c7f1598c184,2020-12-18 22:48:32,Jonas Jenwald,"Ignore, rather than throwing on, Coding style component (COC) markers in JPEG 2000 images (issue 12752)

Similar to other markers that we currently skip, by ignoring the Coding style component (COC) marker we'll at least prevent outright errors (although some JPEG 2000 images may look slightly wrong).",False
167ff1a7fcbdc96d4af4fa757f7ec372dd110152,2020-12-18 02:31:45,Calixte Denizet,"JS -- Actions must be evaluated in global scope
 * All the public properties of doc are injected into globalThis, in order to make them available through `this`
 * Put event in the global scope too.",False
c366390f6bb2fa303d0d85879afda2c27ee06c28,2020-12-18 02:24:29,calixteman,"Merge pull request #12689 from calixteman/mv_stuff_from_mc

In order to simplify m-c code, move some in pdf.js",True
0e69973d710f80ad0ced5048837f774de3635a9d,2020-12-17 19:56:20,Jonas Jenwald,"Add a new ""pagesdestroy"" event, dispatched *before* the `BaseViewer` removes an existing document

This new event essentially mirrors the existing ""pagesinit"" event, and will allow e.g. a custom implementation of the viewer to be notified before the current PDF document is removed from the viewer.

By using this new event, we're thus able to dispatch a ""pageclose"" event for JavaScript actions when closing the existing document.",False
2a83c965e877154260882a8271a3b015db960f18,2020-12-17 19:56:20,Jonas Jenwald,"Add new ""pageopen""/""pageclose"" events for usage with JavaScript actions

Having looked at the Acrobat JavaScript specification, see https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/AcrobatDC_js_api_reference.pdf#G5.1963437, I suppose that introducing these two new events is probably the easiest solution overall.

However there's a number of things that, as far as I'm concerned, will help the overall implementation:
 - Only dispatch these new events when `enableScripting = true` is set.
 - Handle them *separately* from the existing ""pagechanging"" event dispatching, to avoid too much clutter.
 - Don't dispatch either of the events if the page didn't actually change.
 - When waiting for pages to render, don't dispatch ""pageopen"" if the page is no longer active when rendering finishes.
 - Ensure that we only use *one* ""pagerendered"" event listener.
 - Ensure that ""pageopen"" is actually dispatched when the document loads.

I suppose that we *could* avoid adding the ""pageclose"" event, and use the existing ""pagechanging"" event instead, however having a separate event might allow more flexibility in the future. (E.g. I don't know if we'll possibly want to dispatch ""pageclose"" on document close, as mentioned briefly in the specification.)",False
8bff4f1ea9d91ae6282979e1d1398ed4b9ed8b67,2020-12-17 19:33:26,Calixte Denizet,"In order to simplify m-c code, move some in pdf.js
 * move set/clear|Timeout/Interval and crackURL code in pdf.js
 * remove the ""backdoor"" in the proxy (used to dispatch event) and so return the dispatch function in the initializer
 * remove listeners if an error occured during sandbox initialization
 * add support for alert and prompt in the sandbox
 * add a function to eval in the global scope",False
3447f7c7035016c0231b97e2793f47a90070d812,2020-12-17 00:45:16,Brendan Dahl,"Merge pull request #12742 from calixteman/map

Don't use 'in' operator to check if key is in a Map",True
03814bd6a2a2e13e97a37829f3d43fe5a4541f2f,2020-12-16 20:30:12,Calixte Denizet,Don't use 'in' operator to check if key is in a Map,False
3c603fb28befaf9befbb4df9c612406f9225f23c,2020-12-16 10:54:55,Brendan Dahl,"Merge pull request #12635 from calixteman/js_display_evts

JS -- Send events to the sandbox from annotation layer",True
0655f50810e5fbb522da06d546b0e1e7290d1917,2020-12-16 03:28:23,Tim van der Meij,"Merge pull request #12737 from Snuffleupagus/Safari-10

Change the minimum ""supported"" version of the Safari-browser to Safari 10",True
6502ae889d9a2fb6df887a30bee02356533f7cb7,2020-12-15 20:58:47,Calixte Denizet,JS -- Send events to the sandbox from annotation layer,False
499d865ebf316283f3166959c79e8adc34ad2201,2020-12-15 14:19:32,Jonas Jenwald,"Change the minimum ""supported"" version of the Safari-browser to Safari 10

According to https://github.com/mozilla/pdf.js/wiki/Frequently-Asked-Questions#faq-support, Safari 9 is still listed as ""mostly supported"".

Given that the *last* release from the Safari 9 branch was on [September 1, 2016](https://en.wikipedia.org/wiki/Safari_version_history#Safari_9), it's questionable at least to me if it actually makes sense for us to even pretend to ""support"" such an old browser.
Especially when the *first* release from the Safari 10 branch was on [September 20, 2016](https://en.wikipedia.org/wiki/Safari_version_history#Safari_10), which is now over four years ago.

Based on the MDN compatibility data, this patch thus removes the following polyfills:
 - `TypedArray.prototype.slice()`, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice#Browser_compatibility
 - `String.prototype.codePointAt()`, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt#Browser_compatibility
 - `String.fromCodePoint()`, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint#Browser_compatibility",False
640a08444c2fc2c22ebb0ba4a8826bf8ecdd5e4d,2020-12-15 04:34:10,Tim van der Meij,"Merge pull request #12724 from calixteman/follow-up-12707

Follow-up of #12707: Add an integration test for checkboxes as radio …",True
c6c9cc96bf779e2923ebb639c584eefbbd104e8b,2020-12-15 04:30:04,Calixte Denizet,"Follow-up of #12707: Add an integration test for checkboxes as radio buttons
 * Integration tests: Add a function to load a pdf and wait for a selected element
 * Integration tests: Add a function to close all the open pages",False
a825b9195b1300cc0e9ad8a70a1edb73a7f1ab81,2020-12-15 04:09:48,Tim van der Meij,"Merge pull request #12700 from calixteman/12699

Fix automatic zoom under spread mode",True
5354a97025514696b61cad41def12bfa1f0b0585,2020-12-15 04:06:36,Tim van der Meij,"Merge pull request #12736 from Snuffleupagus/rm-IE-polyfills

Remove the remaining IE 11 polyfills",True
785487c55819faba2b56ef84d8905ddd9e915b54,2020-12-14 22:27:00,Calixte Denizet,"Fix automatic zoom under spread mode (#12699)

Reset scale when update spread mode",False
a2874b380a18d246baf626ead03fb3e68b95669f,2020-12-14 19:01:25,Jonas Jenwald,"Remove the remaining IE 11 polyfills

We really ought to settle on the *lowest* supported versions of various browsers[1], since that should allow even more clean-up, but given that https://github.com/mozilla/pdf.js/wiki/Frequently-Asked-Questions#faq-support *explicitly* lists IE 11 as unsupported after PDF.js version `2.6.347` there's a number of polyfills that are no longer needed.

Based on the MDN compatibility data, this patch thus removes the following polyfills:
 - `String.prototype.startsWith()`, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith#Browser_compatibility

 - `String.prototype.endsWith()`, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith#Browser_compatibility

  - `String.prototype.includes()`, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes#Browser_compatibility

 - `Array.prototype.includes()`, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes#Browser_compatibility

  - `Array.from()`, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from#Browser_compatibility

  - `Object.assign()`, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Browser_compatibility

  - `Math.log2()`, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log2#Browser_compatibility

  - `Number.isNaN()`, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Browser_compatibility

  - `Number.isInteger()`, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger#Browser_compatibility

  - `Map.prototype.entries()`, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries#Browser_compatibility

  - `Set.prototype.entries()`, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/entries#Browser_compatibility

  - `WeakMap`, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap#Browser_compatibility

  - `WeakSet`, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet#Browser_compatibility

  - `Symbol`, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility

Finally, this patch also attempts to update the compatibility information for the remaining polyfills.

---
[1] For example: It's questionable if Safari 9 should be listed as supported, given that the last release from that branch was in 2016.",False
959dc379ee6b5259e7ce804a25dc19d795c6cafc,2020-12-13 18:08:40,Tim van der Meij,"Merge pull request #12733 from Snuffleupagus/bug-1292316-test

Add a test-case for bug 1292316",True
61d92692010ebea9ece9dc57a18cdfaf0effddd3,2020-12-13 18:06:36,Tim van der Meij,"Merge pull request #12734 from Snuffleupagus/update-packages

Update packages and translations",True
3655777db7b3fbfdcce4f2487b77b3ae4027f76a,2020-12-13 16:16:32,Jonas Jenwald,"Enable the ESLint `no-unsafe-optional-chaining` rule

Given that we're using optional chaining in the code-base, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining, it can't hurt to add this ESLint rule to help catch one possible source of bugs when using optional chaining expressions.

Please find additional details about the ESLint rule at https://eslint.org/docs/rules/no-unsafe-optional-chaining",False
ad91972eb249ea02be4540560e312f16858e54bd,2020-12-13 16:13:49,Jonas Jenwald,Update l10n files,False
e09f2a462ded52d113b798e0731ee3925bff098d,2020-12-13 16:08:37,Jonas Jenwald,Update `npm` packages,False
e3caa29239d39cd44a5fba11082d0689844790a0,2020-12-12 18:03:28,Tim van der Meij,"Merge pull request #12732 from Snuffleupagus/scripting_spec-fail

Call `done.fail` correctly in the `scripting_spec.js` unit-tests",True
7f89be5dbfdd37e24874e8357fca1be8f7f583c0,2020-12-12 17:54:31,Jonas Jenwald,"Add a test-case for bug 1292316

It appears that the PDF document in [bug 1292316](https://bugzilla.mozilla.org/show_bug.cgi?id=1292316) now renders ""correctly""[1] when compared to e.g. Adobe Reader and PDFium. Most likely this bug was fixed by a *somewhat* recent patch, or patches, to the `XRef.indexObjects` method.

Before just closing [bug 1292316](https://bugzilla.mozilla.org/show_bug.cgi?id=1292316) as WFM, I figured that it probably can't hurt to add it as a new test-case to avoid accidentally regressing this document in the future.

---
[1] Given that the XRef table is corrupt, and that we're forced to recover, there's generally speaking probably some question as to what actually constitutes ""correct"" in this case.",False
9adb225a7d4eca3b5ed695513e41b669cd6939d7,2020-12-12 17:11:47,Jonas Jenwald,"Call `done.fail` correctly in the `scripting_spec.js` unit-tests

The `done.fail` method should *always* be called with a reason, to ensure that any errors are propagated as intended to the test results.",False
d1848f5022dfc22d699b781ff20209a561974014,2020-12-12 01:06:19,Tim van der Meij,"Merge pull request #12725 from brendandahl/remeasure-std

Use widths defined by font for standard fonts.",True
217a00ee3a026bae742653d01a182a6fbdf486f1,2020-12-12 00:49:49,Tim van der Meij,"Merge pull request #12718 from Snuffleupagus/issue-12705

Ignore color-operators in Type3 glyphs beginning with a `d1` operator (issue 12705)",True
8beb62e397bbf2c9ce45e26d0b6c501ec4d95562,2020-12-12 00:38:52,Tim van der Meij,"Merge pull request #12728 from Snuffleupagus/gulpfile-move-timezone

[gulpfile.js] Move the time-zone hack to the `testing-pre` task, such that *all* tests work regardless of the current time-zone",True
67e5db75d885ed648f409ee29b7d03ccde2f7cf2,2020-12-11 20:19:13,Jonas Jenwald,"Ignore color-operators in Type3 glyphs beginning with a `d1` operator (issue 12705)

Please refer to the PDF specification at https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#G8.1977497 and https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#G7.3998470

This patch removes the color-operators in the evaluator, since that should be more efficient than doing it repeatedly in the main-thread when rendering the Type3 glyphs.",False
20557d8199d738df5d6e5ff16ab6d291e2bf43cb,2020-12-11 16:47:16,Jonas Jenwald,"[gulpfile.js] Move the time-zone hack to the `testing-pre` task, such that *all* tests work regardless of the current time-zone

Currently only the `gulp unittest` task actually set the time-zone, which means that locally I'm now getting failures with e.g. `gulp test`.

*Please note:* I firmly believe that the unit-tests in question should be re-written, since even with this patch applied there's failures when running http://localhost:8888/test/unit/unit_test.html directly in a browser.",False
45d9ab6e457fdd03b0e0c1bd56ad7f16ec900281,2020-12-11 05:00:39,Brendan Dahl,"Use widths defined by font for standard fonts.

There doesn't seem to be anything definitive about this in
the spec, but from experimenting, it seems acrobat lets
PDFs override the widths of the standard fonts.",False
00b4f86db301546d21d5dc79c61e2a9a829667a4,2020-12-11 03:36:59,Tim van der Meij,"Merge pull request #12717 from Snuffleupagus/issue-12714

Ensure that the /Annots-entry, on /Page-instances, is actually an Array (issue 12714)",True
954ac3d944cb16506ae9c93b531ff719e03a7bea,2020-12-11 02:49:37,Tim van der Meij,"Merge pull request #12719 from calixteman/emailvalidate

JS -- add function eMailValidate used to validate an email address",True
e53ae01330c8b57207057a7e6fb3075ca8f7a982,2020-12-11 02:38:53,Tim van der Meij,"Merge pull request #12723 from mozilla/dependabot/npm_and_yarn/ini-1.3.7

Bump ini from 1.3.5 to 1.3.7",True
31ea30ab2549ef7667a5fab80baa22addecaad3a,2020-12-11 02:22:03,Brendan Dahl,"Merge pull request #12668 from calixteman/interaction

Add some integration tests using puppeteer",True
f94269c0d134ca737d7c3e4799b7b3e0c13f4dd8,2020-12-11 02:21:37,Calixte Denizet,JS -- add function eMailValidate used to validate an email address,False
7a0d89b3c05c35d49079e66fec828f91f9fbf62e,2020-12-11 02:18:56,dependabot[bot],"Bump ini from 1.3.5 to 1.3.7

Bumps [ini](https://github.com/isaacs/ini) from 1.3.5 to 1.3.7.
- [Release notes](https://github.com/isaacs/ini/releases)
- [Commits](https://github.com/isaacs/ini/compare/v1.3.5...v1.3.7)

Signed-off-by: dependabot[bot] <support@github.com>",False
7097114e0c9fa0410171355899dab88f95e3344b,2020-12-11 02:13:35,Tim van der Meij,"Merge pull request #12720 from calixteman/fix_co

Be sure that CalculationOrder is either null or a non-empty array",True
85ab53fef055c3bf79b2cf45cb7c4224c9ad2c74,2020-12-11 02:11:11,Tim van der Meij,"Merge pull request #12722 from calixteman/printf

JS -- fix printd issue with negative number",True
5b42ac364a3b602d9aa3975503faa0e17fb1bcac,2020-12-11 01:25:15,Calixte Denizet,"Add some integration tests using puppeteer and Jasmine
 * run with `gulp integrationtest`",False
c7b09b8efc5a8257552e0787fd86897bd122f3e4,2020-12-10 23:13:04,Calixte Denizet,JS -- fix printd issue with negative number,False
25bf504ff5239e6aa6eb9b3e28e661d2bf93bc56,2020-12-10 20:32:11,Calixte Denizet,Be sure that CalculationOrder is either null or a non-empty array,False
796a0d3155c96c41a67870705eea70f0bd0bced1,2020-12-10 16:12:00,Jonas Jenwald,"Ensure that the /Annots-entry, on /Page-instances, is actually an Array (issue 12714)

In the referenced PDF document, the second and third page has *corrupt* /Annots-entries which contain /Dict-data rather than the intended Arrays.",False
93b3ba2abb4e2eb760589899ff38cb99e8f0cbae,2020-12-10 04:13:07,Tim van der Meij,"Merge pull request #12712 from Snuffleupagus/issue-12704

Attempt to handle collapsed outline items, in the default viewer, according to the specification (issue 12704, PR 10890 follow-up)",True
f48cfba9459a8d6fce45972a93d987d27b0fbe37,2020-12-10 03:59:03,Tim van der Meij,"Merge pull request #12707 from calixteman/radio_check

Checkboxes with the same name must behave like a radio buttons group",True
0629a8f553a600c834a88408cef348aade35c800,2020-12-10 03:39:06,Tim van der Meij,"Merge pull request #12703 from Snuffleupagus/GenericScripting-rm-scriptElement

Ensure that the `pdf.sandbox.js` is removed from the DOM on destroy, and unbreak the Chromium-extension (PR 12695 follow-up)",True
6218b9a51255dd2960f579db32cd29ea3b687e35,2020-12-10 02:45:50,Jonas Jenwald,"Re-factor/re-name the `scripting` getter, on the `externalServices`-implementations, to a `createScripting` method

Given that the GENERIC default viewer supports opening more than one document, and that a unique scripting-instance is now used for each document, the changes made in this patch seem appropriate.",False
a7230eb03371e77f4f0fd4da5966b5bba9d43ecb,2020-12-10 02:45:50,Jonas Jenwald,"Move the `GenericScripting` class to its own file, such that it can be used in the Chromium-extension

While it's not entirely clear to me that it's ultimately desirable to use the `pdf.sandbox.js` in the Chromium-extension, given that the MOZCENTRAL-build uses `pdf.scripting.js` directly in a *custom* sandbox, the current state isn't that great since setting `enableScripting = true` with the Chromium-extension will currently fail completely.

Hence this patch, which should at least unbreak things for now.",False
6c807f3f86efdf33d41746d3e578815c7d2401e6,2020-12-10 02:45:50,Jonas Jenwald,"Move destroying of the scripting-instance from `PDFViewerApplication.close` and into its own helper method

Since the `close` method has become quite large, this small re-factoring shouldn't hurt (and may also be useful with future changes to the `_initializeJavaScript` method).",False
8d72981c18d350f5fd9f86d62f3e11fbd8b94685,2020-12-10 02:45:50,Jonas Jenwald,"Move cancelling of idleCallbacks from `PDFViewerApplication.close` and into its own helper method

Since the `close` method has become quite large, this small re-factoring shouldn't hurt.",False
7ce6634c51a38cf7d43c4a259cb59cfaa69e45a7,2020-12-10 02:45:47,Jonas Jenwald,"Ensure that the `pdf.sandbox.js` scriptElement is also removed from the DOM (PR 12695 follow-up)

I completely missed this previously, but we obviously should remove the scriptElement as well to *really* clean-up everything properly.

Given that there's multiple existing usages of `loadScript` in the code-base, the safest/quickest solution seemed to be to have call-sites opt-in to remove the scriptElement using a new parameter.",False
09f79ffa92497bf08940bd1995a9d3effd97ed4a,2020-12-10 01:18:36,Jonas Jenwald,"Attempt to handle collapsed outline items, in the default viewer, according to the specification (issue 12704, PR 10890 follow-up)

This patch *attempts* to actually implement what's described for the `Count`-entry in the PDF specification, see https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#G11.2095911, which I mostly ignored back in PR 10890 since it seemed unnecessarily complicated[1].

Besides issue 12704, I've also tested a couple of other documents (e.g. the PDF specification) and these changes don't *seem* to break anything else; additional testing would be helpful though!

---
[1] At the time, all PDF documents that I tested worked even with a very simple approach and I thus hoped that it'd would suffice.",False
1fcffe80349a98378262c8a16f7b50ff34c3fe82,2020-12-08 20:23:19,Calixte Denizet,"Checkboxes with the same name must behave like a radio buttons group
 * aims to fix issue #12706",False
b194c820bfbf30734589bb37f7f632bcc7790352,2020-12-08 01:05:23,Brendan Dahl,"Merge pull request #12634 from calixteman/aform

JS -- Add aform functions",True
0f899edfc8c110c9741b370c386db5f0f78d39c4,2020-12-08 00:07:34,Calixte Denizet,"JS -- Add aform functions
 * These functions aren't in the PDF specs but seems to be widely used
 * So the specs for these functions are:
   * http://www.sfu.ca/~wcs/ForGraham/Aladdin%20stuff/Acrobat%20Reader%205.0/Contents/MacOS/JavaScripts/AForm.js
   * pdfium source code",False
d784af3f38d5604b653c06fb40a6fe6a021d45d3,2020-12-06 21:22:33,Tim van der Meij,"Merge pull request #12696 from timvandermeij/annotation-quadpoints

Fix non-standard quadpoints orders for annotations",True
3df72c3fac83e9beefa0827cd5f3784594336c6c,2020-12-06 21:21:41,Tim van der Meij,"Merge pull request #12695 from Snuffleupagus/sandbox-build

Various clean-up and improvements related to `pdf.sandbox.js` building, and the related default-viewer functionality",True
012e15f7a36133994cf4c078f2888701f998ce5d,2020-12-06 20:32:41,Tim van der Meij,"Fix non-standard quadpoints orders for annotations

This change requires us to use valid quadpoints arrays in the existing
unit tests too due to the normalization.",False
b2dfb5513692321307d85d5d20e985ae3a3fb22e,2020-12-06 18:51:49,Jonas Jenwald,"Re-factor the `scripting` getter in GENERIC-builds, since using the same sandbox for *multiple* PDF documents seems highly questionable

Similar to the previous patch, the GENERIC default viewer is capable of opening more than *one* PDF document and we should ensure that we handle that case correctly.",False
1e007f9285ad1ded6696baa4da86e5d3fbfecbb4,2020-12-06 18:50:43,Jonas Jenwald,"Actually remove a `scripting`-instance, and its global events, upon document closing

I was actually quite surprised to find that, despite the various `scripting`-getters implementing `destroySandbox` methods, there were no attempts at actually cleaning-up either the ""sandbox"" or removing the globally registered event listeners.",False
f4d8a427f0358790f123ce5823be6b049de47b2d,2020-12-06 18:48:10,Jonas Jenwald,"Ensure that the *correct* PDF document is still active after *every* asynchronous API-call in `PDFViewerApplication._initializeJavaScript`

This patch also changes the method to skip *all* data fetching when ""enableScripting"" isn't active. Finally, simplifies some event-data accesses in the ""updateFromSandbox"" listener.",False
1f2f8c907b193907a3f3e6ffe175ebc7dcc037cd,2020-12-06 17:38:36,Jonas Jenwald,"Tweak the ""filesize"" handling in `PDFViewerApplication._initializeJavaScript`

Another possible option here could be to use the `contentLength`, when it exists, and then using e.g. a custom event to always update the ""filesize"" in the sandbox ""after the fact"" with the result of the `getDownloadInfo`-call.",False
bfdb39a1e67447442d861feaf69e404084d24226,2020-12-06 17:12:56,Jonas Jenwald,"Stop re-fetching the `metadata` unconditionally in `PDFViewerApplication._initializeJavaScript`

We can easily avoid unnecessary API-calls here, since most of the time the `metadata` will already be available here. In the *rare* case that it's not available, we can simply wait for the existing `getMetadata`-call to resolve.",False
f8ea83609f8277b15bedeb1549f185dd2f596a75,2020-12-06 17:00:33,Jonas Jenwald,"Dispatch a `metadataloaded` event once the `PDFViewerApplication._initializeMetadata` method is done

This will be useful in the following patch, and note that there's also an old issue (see 5765) which asked for such an event. However, given that the use-case wasn't *clearly* specified, and that we didn't have an internal use for it at the time it wasn't implemented.

Also, ensure that all of the metadata-related properties are actually reset when the document is closed.",False
c549069ebdac524de182eafef5bf0e5e5589a6fa,2020-12-06 03:34:34,Jonas Jenwald,"Replace the `testMode` parameter in `src/pdf.sandbox.js` with a constant, set using the pre-processor

This simplifies not just this code, but the unit-tests as well, and should be sufficient as far as I can tell.
Note also that currently, in the *built* `pdf.sandbox.js` file, there's even a line reading `testMode = testMode && false;` because of an accidentally flipped pre-processor statement.

Finally, in the `scripting_spec.js` unit-test, defines `sandboxBundleSrc` at the top of the file to make it easier to find and/or change it when necessary.",False
c39f1aedb2e2405c91528c23c852b0b3a682f64f,2020-12-06 03:34:34,Jonas Jenwald,"Re-implement working `dev-sandbox`/`watch-dev-sandbox` gulp-tasks

Compared to the, previously removed, `sandbox`/`watch-sandbox` gulp-tasks, these ones should work even when run against an non-existent/empty `build`-folder.

Also, to ensure that the development viewer actually works out-of-the-box, `gulp server` will now also include `gulp watch-dev-sandbox` to remove the need to *manually* invoke the build-tasks.

Finally, this patch also removes the `web/devcom.js` file since it shouldn't actually be needed, assuming that the ""sandbox""-loading code in the `web/genericcom.js` file is actually *correctly* implemented.",False
13d7244529873647d8e0122e744f496584d35023,2020-12-06 03:34:32,Jonas Jenwald,"Re-factor how the `pdf.sandbox.js` file is built (PR 12604 follow-up)

The way that the `pdf.sandbox.js` building was implemented feels all kinds of inconsistent/wrong, and it ""sticks out"" quite a bit when compared to the rest of the `gulpfile.js`. This patch thus attempts to improve the current situation slightly, to hopefully make future maintenance easier.

One thing that strikes you, pretty immediately, when looking at PR 12604 is that the two new `gulp`-tasks added (i.e. `sandbox` and `watch-sandbox`) don't even work!?
The reason for this is that they implicitly dependent upon the result of the `buildnumber`-task, which isn't listed as a dependency. (Try running `gulp clean` *first*, and invoking any of the new `gulp`-tasks will inevitably fail.)

Furthermore, there's another (potentially big) problem with the implementation of e.g. the `gulp sandbox` task, since it doesn't actually wait for all building to complete before the task is considered as ""done"". This has the potential to cause all sorts of subtle bugs elsewhere, and the fact that things even ""work"" as-is can probably be attributed mostly to luck.

Unfortunately there's no *perfect* way to improve things here, since the `pdf.sandbox.js` file depends on including the `pdf.scripting.js` file as a string, however I firmly believe that improvements are still possible here.
To that end, this patch updates all relevant build-targets to create a *temporary* `pdf.scripting.js` file as part of the setup in the `gulp`-tasks, and then reads that file during the `pdf.sandbox.js` building.
This at least allows us to bring all of this ""sandbox""-build code much more in-line with the existing build-system.",False
1f29d274743ba19b0770b522ef7a6c893947eaf9,2020-12-06 03:14:48,Jonas Jenwald,"Change how we're passing `pdf.sandbox.js`-specific options to `createWebpackConfig` in `gulpfile.js`

Given the somewhat ""specialized"" nature of the `pdf.sandbox.js` building, it ought to be possible to re-factor how some of the options are handled.
Note in particular that the `gulp-strip-comments` dependency seems somewhat unncessary, since the *main* source of comments are just the default license header. Hence I seems much more reasonable to simply not include that to begin with, rather than removing it after the fact (the few remaining Webpack-related should be few/small enough to not really matter much in practice).

This way we're able to further reduce the special-casing related to the `pdf.sandbox.js`-building, which will make future changes/maintenance easier by bringing this code more in-line with existing patterns in `gulpfile.js`.

(If we really want to reduce the filesize, we might want to consider always minifying the `GENERIC`-build of the `pdf.sandbox.js` file.)",False
e3b6a9fb23ffb0652b25322348bc8908654a9027,2020-12-06 02:09:38,Tim van der Meij,"Implement quadpoints rendering for link annotations

Each quadrilateral needs to have its own link element, so the first
quadrilateral can use the already created element, but the next
quadrilaterals need to clone that element.",False
7be4a14d8755fa9393b20cecdbbc66626cf9a937,2020-12-06 00:46:40,Tim van der Meij,"Move documentation of the `render` methods to the `AnnotationElement` class

Not only does this reduce boilerplate since the documentation is the
same for all annotation classes, it also wasn't correct for the
annotation types that support quadpoints since they return an array of
section elements instead of a single one.",False
cb422a80b0b40555c4fe58330b3552f6e6faace6,2020-12-06 00:37:17,Tim van der Meij,"Move quadrilateral rendering logic into a method on the `AnnotationElement` class

Doing so avoids some code duplication.",False
02730800313deb5451b98d74fa58782faeb5f73f,2020-12-06 00:31:07,Tim van der Meij,"Move quadrilateral creation logic to the constructor of the `AnnotationElement` class

Using an object for the various constructor options makes extensions
easier and makes the code self-documenting.",False
d742e3cde82c9dd9f57df87c76d7b15617db16cf,2020-12-05 15:45:11,Jonas Jenwald,"Actually utilize the PDF.js build-system fully when bundling the `pdf.sandbox.js` file

There's no good reason, as far as I can tell, to use search-and-replace to include the *stringified* `pdf.scripting.js` file in the built `pdf.sandbox.js` file. Instead we could, and even should, utilize the existing `PDFJSDev.eval(...)`-functionality, which is not only simpler but will also be more efficient as well (no need for a regular expression).",False
715b8aa3898abb550b3df361c303cebdca87e5a1,2020-12-05 15:45:11,Jonas Jenwald,"Move, and rename, the `src/scripting_api/quickjs-sandbox.js` file to `src/pdf.sandbox.js`

The current location feels somewhat strange, and also inconsistent with the existing way that bundling is done.

Finally, add the version/build numbers at the top of the *built* `pdf.sandbox.js` files, since all other built files include that information given that it's often helpful to be able to easily determine the *exact* version.",False
54ca67d6282e264814bbf91bbe3d4bfb87b5129f,2020-12-05 01:19:39,Tim van der Meij,"Merge pull request #12693 from Snuffleupagus/mv-ColorConverters

[Regression] Prevent the *built* `pdf.scripting.js`/`pdf.sandbox.js` files from accidentally including most of the main-thread code (PR 12631 follow-up)",True
155c17c99acb539b241f95e9fa4a249aff5c1c5c,2020-12-04 18:47:26,Jonas Jenwald,"[Regression] Prevent the *built* `pdf.scripting.js`/`pdf.sandbox.js` files from accidentally including most of the main-thread code (PR 12631 follow-up)

*This is a recent regression, which I stumbled upon while working on cleaning-up the gulpfile related to `pdf.sandbox.js` building.*

By placing the `ColorConverters` functionality in the `src/display/display_utils.js` file, you end up including a *significant* chunk of the `pdf.js` file in the built `pdf.scripting.js`/`pdf.sandbox.js` files.
Given that I cannot imagine that this was actually intended, since it inflates the built files with unnecessary/unused code, this moves `ColorConverters` to a new file instead (thus breaking the dependencies).

To hopefully reduce the risk future bugs, along these lines, a big comment is also placed at the top of the new file.
Finally, the `ColorConverters` is converted to a class with static methods, since this felt slightly cleaner overall.",False
c1f41df4adf16f7ab2dc85ac284b134921b28d97,2020-12-03 19:15:56,calixteman,"Merge pull request #12685 from calixteman/12684

Fix issue #12684: replace bitwise ORs by ORs",True
d4f4b43d29cfb91bbaea74b3f369621c1ddc0cb4,2020-12-03 03:32:11,Calixte Denizet,Fix issue #12684: replace bitwise ORs by ORs,False
a618b02e6274c173c414855d8311930c43b99c00,2020-12-03 02:30:41,Tim van der Meij,"Merge pull request #12682 from Snuffleupagus/findbar-notFound

[Generic viewer] Re-factor how the `notFound` appearance is set on the ""findInput"" in the `PDFFindBar`",True
7a60824f2e14b8a72a85345fba0f75d24ec95e5b,2020-12-03 02:23:24,Tim van der Meij,"Merge pull request #12681 from Snuffleupagus/pr-8808-update-test

Update the link for the ""pr8808"" test-case (issue 12680)",True
7325382db38942088f937c7c9aa5d980778c9912,2020-12-03 02:21:02,Tim van der Meij,"Merge pull request #12679 from Snuffleupagus/pr-12666-followup

Fix the `treeitem-expanded`/`treeitem-collapsed` images in dark-mode (PR 12666 follow-up)",True
313ee2843670141c4cf2418bfea080485a41130a,2020-12-02 19:53:20,Jonas Jenwald,"[Generic viewer] Re-factor how the `notFound` appearance is set on the ""findInput"" in the `PDFFindBar`

Rather than having two slightly different ways of setting the pending/notFound appearance on the ""findInput"", we can simply use ""data-status"" in both cases since they're obviously mutually exclusive.",False
dc84c8a02af7b4c3fbca7457160642045f1dbf35,2020-12-02 19:36:09,Jonas Jenwald,"Update the link for the ""pr8808"" test-case (issue 12680)

This seems like a very minor issue, since in general we can't really help if domains are blocked from certain networks, however in this particular case I suppose that using the Internet Archive should work.",False
488a81a7bc0f7a10045b8430c4052218d0e7ce0b,2020-12-02 16:18:32,Jonas Jenwald,"Fix the `treeitem-expanded`/`treeitem-collapsed` images in dark-mode (PR 12666 follow-up)

I completely missed updating these in PR 12666; sorry about that!",False
956fcab96721f7a69e5d74ee5f5b5e1677b26bbe,2020-12-02 06:20:16,Brendan Dahl,"Merge pull request #12631 from calixteman/app

JS -- Implement app object",True
db6b67c0722395beb7675c068fe320ba96bcf283,2020-12-02 04:15:13,Tim van der Meij,"Merge pull request #12673 from calixteman/split

Split underline, strikeout, squiggly annotions div into multiple divs",True
b43b5caf8397d53947fcbc6ad6c7fb6afb183814,2020-12-02 04:01:20,Tim van der Meij,"Merge pull request #12666 from Snuffleupagus/rm-dark-images

Use the same SVG images, in the default viewer, regardless of the CSS theme",True
830070ca419c86aac7917ee54a546ef4cc9d71c2,2020-12-01 20:34:48,Calixte Denizet,"Split underline, strikeout, squiggly annotions div into multiple divs
 * Follow up of #12505
 * Fix bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1679696",False
f2ec546cbb2e923dd2b7a2469f25ea234afd23ef,2020-12-01 16:15:09,Jonas Jenwald,"Use the same SVG images, in the default viewer, regardless of the CSS theme

As mentioned in https://github.com/mozilla/pdf.js/wiki/Frequently-Asked-Questions#faq-support, PDF.js version `2.6.347` is the last release with IE 11/Edge support.
Hence we should now be able to reduce unnecessary duplication in the default viewer image resources, note the files in the `web/images/` folder with a `-dark` suffix, by using only *one* SVG-image for each icon and letting the `background-color` depend on the CSS theme instead.

For the `gulp mozcentral` build-target, the resulting `web/images/` folder is reduced from `43 997` to `28 566` bytes (~35 percent).

*Please note:* I don't really know if this implementation is necessarily the *best* solution, but it seems to work well enough in e.g. Firefox Nightly and Google Chrome Beta as far as my testing goes.",False
43550be484a066163f122625d025ff3a40d59957,2020-11-29 20:05:43,Tim van der Meij,"Merge pull request #12665 from Snuffleupagus/update-packages

Update packages and translations",True
c42029489ec1f4a24acb3f07c147bd1fbf2587e7,2020-11-29 14:31:46,Jonas Jenwald,"Run `gulp lint --fix`, to account for changes in Prettier version `2.2.1`

Please refer to https://github.com/prettier/prettier/blob/master/CHANGELOG.md#221 for additional details.",False
cd2e6d803afc9705b6eb128347afe9984c8bf93c,2020-11-29 14:20:36,Jonas Jenwald,Update l10n files,False
58f865404c6f63c4703c743bd393e223715263be,2020-11-29 14:17:33,Jonas Jenwald,"Fix (some) vulnerabilities reported by `npm audit`

This was done automatically, using the `npm audit fix` command.",False
e15c63abc7f191c50a74c222f3d032b918ec52f1,2020-11-29 14:13:20,Jonas Jenwald,Update `npm` packages,False
e072f1db6beb75e0b8de7216c3c48962bcec2084,2020-11-26 02:28:03,Tim van der Meij,"Merge pull request #12652 from calixteman/quickjs_followup

Add a README about quickjs-eval.js file (build and license)",True
256068556de2355c7a8091a789f5b970affc84b7,2020-11-26 02:24:41,Tim van der Meij,"Merge pull request #12662 from Snuffleupagus/issue-12402

Check the top-level /Pages dictionary when finding the trailer in `XRef.indexObjects` (issue 12402)",True
1bde38af38d149d81aeae96bc2ebf12689e22ccb,2020-11-26 02:21:17,Tim van der Meij,"Merge pull request #12655 from calixteman/12654

Parenthesis in names are not escaped when saving",True
672e2f183246f47db1c6e9bcc8d01607f297ba2c,2020-11-26 01:58:45,Tim van der Meij,"Merge pull request #12656 from mozilla/dependabot/npm_and_yarn/highlight.js-9.18.5

Bump highlight.js from 9.13.1 to 9.18.5",True
8a132f584d8443d3d206929edcc992b6490c001d,2020-11-25 19:44:53,Jonas Jenwald,"Check the top-level /Pages dictionary when finding the trailer in `XRef.indexObjects` (issue 12402)

In addition to the existing /Root and /Pages validation, also check that the /Pages-entry actually is a dictionary and that it has a valid /Count-entry.
This way we can avoid picking a trailer candidate which e.g. the `Catalog.numPages` getter will just end up rejecting, thus breaking PDF document loading completely.",False
18b525de2e2fd7d272821a6fc4e5d99f159e7b4e,2020-11-25 16:58:12,Calixte Denizet,Parenthesis in names are not escaped when saving,False
b6fdade6c6ba07c1fe86a6373b3212ebaaa0c3af,2020-11-25 04:59:33,dependabot[bot],"Bump highlight.js from 9.13.1 to 9.18.5

Bumps [highlight.js](https://github.com/highlightjs/highlight.js) from 9.13.1 to 9.18.5.
- [Release notes](https://github.com/highlightjs/highlight.js/releases)
- [Changelog](https://github.com/highlightjs/highlight.js/blob/9.18.5/CHANGES.md)
- [Commits](https://github.com/highlightjs/highlight.js/compare/9.13.1...9.18.5)

Signed-off-by: dependabot[bot] <support@github.com>",False
8413a5865a811edc6b797326183b48807fbdf26a,2020-11-24 18:24:04,Calixte Denizet,Add a README about quickjs-eval.js file (build and license),False
b1d3b6eb12b471af060c40a2d1fe479b1878ceb7,2020-11-22 20:37:32,Tim van der Meij,"Merge pull request #12647 from timvandermeij/update-puppeteer

Update Puppeteer to version 5.5.0",True
a936f1f70c0ec720b72346dc8de73dccfb51bb06,2020-11-22 18:56:49,Tim van der Meij,Update Puppeteer to version 5.5.0,False
d88d47d62166e9469714413deddd2d0020821bad,2020-11-21 19:12:48,Tim van der Meij,"Merge pull request #12645 from Snuffleupagus/async-PDFDocumentProperties-open

Convert the `PDFDocumentProperties.open` method to be async",True
4615815cc7b11620d70c1ff186e20089ca14d46f,2020-11-21 18:24:36,Jonas Jenwald,"Convert the `PDFDocumentProperties.open` method to be async

By using `await`, rather than chaining promises, this method becomes more compact and slightly easier to reason about (at least in my opinion).",False
d3f7959689b9ccd9b292ccebf73377370c64268a,2020-11-21 01:54:33,Tim van der Meij,"Merge pull request #12642 from Snuffleupagus/api-getMetadata-contentLength

[api-minor] Add ""contentLength"" to the information returned by the `getMetadata` method",True
283aac4c53ffaf9e7114745a634c41fcebb75d82,2020-11-20 20:16:52,Calixte Denizet,"JS -- Implement app object
 * https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/AcrobatDC_js_api_reference.pdf
 * Add color, fullscreen objects + few constants.",False
01d12b465c1d065f148ed9a5107f27c5b09a48e7,2020-11-20 20:00:36,Jonas Jenwald,"[api-minor] Add ""contentLength"" to the information returned by the `getMetadata` method

Given that we already include the ""Content-Disposition""-header filename, when it exists, it shouldn't hurt to also include the information from the ""Content-Length""-header.
For PDF documents opened via a URL, which should be a very common way for the PDF.js library to be used, this will[1] thus provide a way of getting the PDF filesize without having to wait for the `getDownloadInfo`-promise to resolve[2].

With these API improvements, we can also simplify the filesize handling in the `PDFDocumentProperties` class.

---
[1] Assuming that the server is correctly configured, of course.

[2] Since that's not *guaranteed* to happen in general, with e.g. `disableAutoFetch = true` set.",False
c88e8058707895e30abe9b91751c6ed5ffaa499f,2020-11-19 22:10:21,Brendan Dahl,"Merge pull request #12604 from calixteman/quickjs

JS -- Add a sandbox based on quickjs",True
4ba28de2608866dcb10d627d77dc19ff3d017c17,2020-11-19 22:05:47,Brendan Dahl,"Merge pull request #12567 from calixteman/hidden

[api-minor] JS -- hidden annotations must be built in case a script show them",True
c7974e99963b41089070269d058c3420eb73d2b2,2020-11-19 18:10:46,Calixte Denizet,"JS -- Add a sandbox based on quickjs
 * quickjs-eval.js has been generated using https://github.com/mozilla/pdf.js.quickjs/
 * lazy load of sandbox code
 * Rewrite tests to use the sandbox
 * Add a task `watch-sandbox` which update bundle pdf.sandbox.js on change in the sandbox code",False
d3936ac9d2f7d11a8eeca6bdf86c3cd77cfbf02f,2020-11-19 01:46:09,Tim van der Meij,"Merge pull request #12636 from Snuffleupagus/AppOptions-setAll

Add an `AppOptions.setAll` method, and use it in `PDFViewerApplication._readPreferences`",True
cc861c34e9abe3044835ac5cf26e8028bb6e5e03,2020-11-18 16:40:21,Jonas Jenwald,"Add an `AppOptions.setAll` method, and use it in `PDFViewerApplication._readPreferences`

Given that it's generally faster to call *one* function and have it loop through an object, rather than looping through an object and calling a function for every iteration, this patch will reduce the total time spent in `PDFViewerApplication._readPreferences` ever so slightly.
Also, over time we've been adding more and more preferences, rather than removing them, so using the new `AppOptions.setAll` method should be generally beneficial as well.

While the effect of these changes is quite small, it does reduces the time it takes for the preferences to be fully initialized. Given the amount of asynchronous code during viewer initialization, every bit of time that we can save should thus help.
Especially considering the recently added `viewerCssTheme` preference, which needs to be read very early to reduce the risk of the viewer UI ""flashing"" visibly as the theme changes, I figured that a couple of small patches reducing the time spend reading preferences cannot hurt.",False
4886a7cf69e8fe4c92242a730e35889cde8592d7,2020-11-18 16:15:18,Jonas Jenwald,"Skip `Promise.all` in `PDFViewerApplication._parseHashParameters` unless actually necessary

Given that only two debugging hash parameters (i.e. `disableWorker` and `pdfBug`) will make this method asynchronous, we can avoid what's most of the time is an unnecessary `Promise.all` invocation.",False
a06f487bd40539cb44adaf9e6031d3beb3248c98,2020-11-17 04:37:06,Tim van der Meij,"Merge pull request #12630 from Snuffleupagus/BasePreferences-less-async

Reduce, now unnecessary, asynchronicity in the `BasePreferences` constructor",True
eda730af652dc5f9593539c2dcb99ed8d2d03fe1,2020-11-17 04:30:38,Tim van der Meij,"Merge pull request #12625 from Snuffleupagus/viewerCssTheme-option

Add a new preference, `viewerCssTheme`, to allow forcing the use of the light/dark viewer CSS themes (issue 12290)",True
40a4d53fb3abdb6f8b0bc2fdc8a4ec41fda062d9,2020-11-17 01:43:13,Jonas Jenwald,"Add a new preference, `viewerCssTheme`, to allow forcing the use of the light/dark viewer CSS themes (issue 12290)

While this does work pretty well in my quick testing, it's *very much* a hack since as far as I can tell there's no support in the CSS specification for using e.g. a CSS variable to override a `@media (prefers-color-scheme: dark) {...}` block.

The solution implemented here is thus to *edit* the viewer CSS, by either removing the entire `@media ...` block in light-mode or by ensuring that its rules become *unconditionally* applied in dark-mode.
To simplify the overall implementation, since all of this does seem like somewhat of an edge-case, the `viewerCssTheme` preference will *only* be read during viewer initialization. (Similar to many other existing preferences, a reload is thus required when changing it.)",False
f39d87bff1459b08f563db793d21f27ef843baab,2020-11-16 23:56:29,Brendan Dahl,"Merge pull request #12569 from calixteman/events

JS -- Fix events dispatchment and add tests",True
7adcb90a2d7e22cb6b9d9e7ed470d6b72417ed82,2020-11-16 18:49:54,Jonas Jenwald,"Reduce, now unnecessary, asynchronicity in the `BasePreferences` constructor

Originally the default preferences were defined in a JSON-file checked into the repository, which was loaded using SystemJS in development mode.
Over the years a number of changes have been made to this code, most notably:
 - The preferences JSON-file is now generated automatically, during building, from the `AppOptions` abstraction.
 - All SystemJS usage has been removed from the development viewer.

Hence the default preferences are now available *synchronously* even in the development viewer, and it's thus no longer necessary to defer to the microtask queue (since `getDefaultPreferences` is async) just to get the default preferences.

While the effect of these changes is quite small, it *does* reduces the time it takes for the preferences to be fully initialized. Given the amount of asynchronous code during viewer initialization, every bit of time that we can save should thus help.",False
ed27fc6c5224979c5208d8889b954855dd7f47a7,2020-11-16 03:50:40,Tim van der Meij,"Merge pull request #12624 from Snuffleupagus/update-packages

Update packages and translations",True
237c2f7832c8ad2325cdcbaab990d4b4747dacb7,2020-11-15 18:27:28,Jonas Jenwald,Update l10n files,False
e1f43907d28882ff1e2780d546779a3453ddce03,2020-11-15 18:27:28,Jonas Jenwald,Update `npm` packages,False
2aefc406b454b0a06c5f7d1e90ddf07057ea6bac,2020-11-14 21:34:15,Tim van der Meij,"Merge pull request #12622 from Snuffleupagus/hasJSActions-cleanup

Some `hasJSActions`, and general annotation-code, related cleanup in the viewer and API",True
bfc5d0d57c2257c36dba43e5581e867600d1be3a,2020-11-14 21:14:50,Tim van der Meij,"Merge pull request #12621 from calixteman/12614

Follow-up for #12585: set elements class in render instead of in _createQuadrilaterals",True
1bf640bb86b5b369d093fcd3b979f3330b0a266e,2020-11-14 21:02:09,Tim van der Meij,"Merge pull request #12618 from Snuffleupagus/thumbnails-render-transform

Ensure that rendering of thumbnails work correctly on HiDPI displays (issue 9820)",True
1f658960935cf67fe97e315ae0aa3543e31e1061,2020-11-14 20:54:37,Tim van der Meij,"Merge pull request #12616 from Snuffleupagus/PDFThumbnailViewer-cleanup

Improve the cleanup functionality for thumbnails",True
de628cec59e65cf5b2597ef0af8f27c7c3b1f592,2020-11-14 18:28:35,Jonas Jenwald,"Some `hasJSActions`, and general annotation-code, related cleanup in the viewer and API

 - Add support for logical assignment operators, i.e. `&&=`, `||=`, and `??=`, with a Babel-plugin. Given that these required incrementing the ECMAScript version in the ESLint and Acorn configurations, and that platform/browser support is still fairly limited, always transpiling them seems appropriate for now.

 - Cache the `hasJSActions` promise in the API, similar to the existing `getAnnotations` caching. With this implemented, the lookup should now be cheap enough that it can be called unconditionally in the viewer.

 - Slightly improve cleanup of resources when destroying the `WorkerTransport`.

 - Remove the `annotationStorage`-property from the `PDFPageView` constructor, since it's not necessary and also brings it more inline with the `BaseViewer`.

 - Update the `BaseViewer.createAnnotationLayerBuilder` method to actaually agree with the `IPDFAnnotationLayerFactory` interface.[1]

 - Slightly tweak a couple of JSDoc comments.

---
[1] We probably ought to re-factor both the `IPDFTextLayerFactory` and `IPDFAnnotationLayerFactory` interfaces to take parameter objects instead, since especially the `IPDFAnnotationLayerFactory` one is becoming quite unwieldy. Given that that would likely be a breaking change for any custom viewer-components implementation, this probably requires careful deprecation.",False
03018cfe40a12f2429c6ce84acaf4ba043b53a71,2020-11-14 16:12:35,Calixte Denizet,Follow-up for #12585: set elements class in render instead of in _createQuadrilaterals,False
2e551acc8d515d5c3585b545b4ae873e70bfe7ee,2020-11-13 21:42:36,Jonas Jenwald,"Ensure that rendering of thumbnails work correctly on HiDPI displays (issue 9820)

*Note that I wasn't able to reproduce the issue in Firefox, but only in Chromium-browsers.*

The bug, and it's feels almost trivial once you've found it, is that we're not passing the `transform` parameter as intended to `PDFPageProxy.render` when drawing thumbnails on HiDPI displays. Instead the canvas context is, for reasons that I don't even pretent to understand, *manually* scaled in `PDFThumbnailView._getPageDrawContext`, which thus doesn't guarantee that the `baseTransform` property on the `CanvasGraphics`-instances becomes correct.

The solution is really simple though, just handle the `transform` the same way in `PDFThumbnailView.draw` as in `PDFPageView.paintOnCanvas` and things should just work.",False
1a22836dcbc404bda6057d47427cec0a9aa6cf1e,2020-11-13 18:01:01,Jonas Jenwald,"Improve the cleanup functionality for thumbnails

*This is a pre-existing issue that I noticed while working on PR 12613, and fixing this also brings the thumbnail code inline with the page code.*

Given the intermittent nature of all of this, it's somewhat difficult to reproduce it consistently; however the following steps should at least provide an outline:
 1. Open the sidebar, and the thumbnailView, and start scrolling around.
 2. *Quickly* close the sidebar, so that all thumbnails won't have time to finish rendering.
 3. Either wait for the cleanup-timeout to occur, or simply run `PDFViewerApplication.cleanup()` in the console.

What *intermittently* happens here is that `WorkerTransport.startCleanup` rejects, and consequently that cleanup doesn't complete as intended, since some of the thumbnails are left in a *pending* renderingState[1].
Fixing this is simple though, and only requires updating `PDFThumbnailViewer.cleanup` along the lines of `BaseViewer.cleanup`.

---
[1] Keep in mind that thumbnails will *only* render when the thumbnailView is visible, to reduce resource usage.",False
59b35600be8c6ac2a00504a1813c52925e85c511,2020-11-13 02:27:21,Tim van der Meij,"Merge pull request #12613 from Snuffleupagus/isPageCached

Trigger cleanup, once rendering has finished, in `PDFThumbnailView.draw`",True
4a9994b54c043928bac1287f0261bd8eb9dd0f0c,2020-11-12 21:39:47,Jonas Jenwald,"Trigger cleanup, once rendering has finished, in `PDFThumbnailView.draw`

This patch will help reduce memory usage, especially for longer documents, when the user scrolls around in the thumbnailView (in the sidebar).

Note how the `PDFPageProxy.cleanup` method will, assuming it's safe to do so, release main-thread resources associated with the page. These include things such as e.g. image data (which can be arbitrarily large), and also the operatorList (which can also be quite large).
Hence when pages are evicted from the `PDFPageViewBuffer`, on the `BaseViewer`-instance, the `PDFPageView.destroy` method is invoked which will (among other things) call `PDFPageProxy.cleanup` in the API.

However, looking at the `PDFThumbnailViewer`/`PDFThumbnailView` classes you'll notice that there's no attempt to ever call `PDFPageProxy.cleanup`, which implies that in certain circumstances we'll essentially keep all resources allocated permanently on the `PDFPageProxy`-instances in the API.
In particular, this happens when the users opens the sidebar and starts scrolling around in the thumbnails. Generally speaking you obviously need to keep all thumbnail *images* around, since otherwise the thumbnailView is useless, but there's still room for improvement here.

Please note that the case where a *rendered page* is used to create the thumbnail is (obviously) completely unaffected by the issues described above, and this rather only applies to thumbnails being explicitly rendered by the `PDFThumbnailView.draw` method.
For the latter case, we can fix these issues simply by calling `PDFPageProxy.cleanup` once rendering has finished. To prevent *accidentally* pulling the rug out from under `PDFPageViewBuffer` in the viewer, which expects data to be available, this required adding a couple of new methods[1] to enable checking that it's indeed safe to call `PDFPageProxy.cleanup` from the `PDFThumbnailView.draw` method.

It's really quite fascinating that no one has noticed this issue before, since it's been around since basically ""forever"".

---
[1] While it should be *very* rare for `PDFThumbnailView.draw` to be called for a pageView that's also in the `PDFPageViewBuffer`, given that pages are rendered before thumbnails and that the *rendered page* is used to create the thumbnail, it can still happen since rendering is asynchronous.
Furthermore, it's also possible for `PDFThumbnailView.setImage` to be disabled, in which case checking the `PDFPageViewBuffer` for active pageViews *really* matters.",False
8b5bc8d7f9dd351ef5e816e99f6f764987875d49,2020-11-12 19:54:36,Jonas Jenwald,Improve the `pageNumber` validation in `BaseViewer.isPageVisible` (PR 10217 follow-up),False
85de01e34ba177d192e714046519ec4825d5b651,2020-11-11 00:19:58,Brendan Dahl,"Merge pull request #12585 from calixteman/12576

Fix popup for highlights without popup (follow-up of #12505)",True
611207d2c936656d3a5b22450e4ad515b7f75570,2020-11-10 22:03:54,Calixte Denizet,"Fix popup for highlights without popup (follow-up of #12505)
 * remove 1st param of _createPopup (almost useless for a method)
 * prepend popup div to avoid to have them on top of some highlights (and so ""disable"" partially mouse events)
 * add a ref test for issue #12504",False
2dfac4cb41c7820557dd47df2938aaaa45856f6a,2020-11-10 21:56:29,Calixte Denizet,"JS -- Fix events dispatchment and add tests
 * dispatch event to take into account calculation order
 * use a map for actions in Field",False
83658c974d9894bfee8cdf4b49339b722152f610,2020-11-10 20:56:38,calixteman,"Merge pull request #12582 from calixteman/doc

JS -- Implement doc object",True
8de98079ca05f8f7001ee077771055a57dc0e948,2020-11-10 20:46:42,Calixte Denizet,"JS -- Implement doc object
 * https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/js_api_reference.pdf#page=335
 * it has all the properties/methods defined in the spec
 * unimplemented methods are there but with an empty body to avoid exception when calling an undefined method
 * implement zoom, zoomType, layout, pageNum, ...",False
b11592a75693cd63168a7faf2657bdb97c83bc60,2020-11-10 17:18:34,Calixte Denizet,"JS -- hidden annotations must be built in case a script show them
 * in some pdf, there are actions with ""event.source.hidden = ...""
 * in order to handle visibility when printing, annotationStorage is extended to store multiple properties (value, hidden, editable, ...)",False
1c17e078ec3e5011134d5db3bd440c45f96fd8e4,2020-11-10 04:56:54,Tim van der Meij,"Merge pull request #12546 from calixteman/hasjs

[api-minor] JS -- Add listener for sandbox events only if there are some actions",True
a5279897a771432d5279ea44a0eafc4eedcba328,2020-11-09 23:07:59,Calixte Denizet,"JS -- Add listener for sandbox events only if there are some actions
* When no actions then set it to null instead of empty object
* Even if a field has no actions, it needs to listen to events from the sandbox in order to be updated if an action changes something in it.",False
55f55f58594b9a6947fecaabf8ef4e3b02002023,2020-11-08 04:12:21,Tim van der Meij,"Merge pull request #12598 from Snuffleupagus/globalThis-check

Fail early, in modern `GENERIC` builds, if `globalThis` isn't available (PR 11799 follow-up, issue 12596)",True
b068cdb72552085d824d25a3e0a54d862c3a33d2,2020-11-08 04:10:46,Tim van der Meij,"Merge pull request #12595 from Snuffleupagus/src-display-optional-chaining

Convert files in the `src/display/`-folder to use optional chaining where possible",True
797feddc22ae34d560dcad23faacf0550e1b4409,2020-11-08 04:06:16,Tim van der Meij,"Merge pull request #12594 from Snuffleupagus/eslint-no-useless-escape

Enable the ESLint `no-useless-escape` rule (PR 12551 follow-up)",True
a03b383edb24b146db271f44f470434618889146,2020-11-07 23:30:33,Jonas Jenwald,"Fail early, in modern `GENERIC` builds, if `globalThis` isn't available (PR 11799 follow-up, issue 12596)

It probably doesn't hurt to explicitly check for `globalThis` as well, in addition to the existing checks.",False
1dad255784dec991b18cc66bb4b0efd5a9cc3a6f,2020-11-07 17:52:06,Jonas Jenwald,"Convert files in the `src/display/`-folder to use optional chaining where possible

By using optional chaining, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining, it's possible to reduce unnecessary code-repetition in many cases.
Note that these changes also reduce the size of the *built* `pdf.js` file, when `SKIP_BABEL == true` is set, and for the `MOZCENTRAL` build-target that result in a `0.1%` filesize reduction from a simple and mostly mechanical code change.",False
96028443684715024d475ed47b9c7563fa2cdd02,2020-11-07 17:36:24,Jonas Jenwald,"Enable the ESLint `no-useless-escape` rule (PR 12551 follow-up)

Note that a number of these cases are covered by existing unit-tests, and a few others only matter for the development/build scripts.
Furthermore, I've also tried to the best of my ability to test each case *manually* to hopefully further reduce the likelihood of this patch introducing any bugs.

Please find additional details about the ESLint rule at https://eslint.org/docs/rules/no-useless-escape",False
e3851a6765f2d8b896587e12f89ac839b9692a56,2020-11-07 02:46:26,Tim van der Meij,"Merge pull request #12591 from Snuffleupagus/strokeColor-Pattern

Improve the Pattern-detection in `CanvasGraphics.stroke`",True
018fd43096fee3e021d3d145098ef80eea5c12fd,2020-11-06 23:29:50,Brendan Dahl,"Merge pull request #12530 from calixteman/js_utils

JS -- Add 'util' object",True
f69e848b1c2efe9d2cc47d7c658e480ef15b94ab,2020-11-06 22:42:29,Calixte Denizet,"JS -- Add 'util' object

This patch provides an implementation of the util object as described:
 * https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/js_api_reference.pdf#page=716",False
78de919bf496ce129fac6e47653aefd1426ca19f,2020-11-06 16:16:35,Jonas Jenwald,"Improve the Pattern-detection in `CanvasGraphics.stroke`

The vast majority of the time, unless a Pattern is active, the `strokeColor`-property contains a ""simple"" colour value represented by a String. Hence it seems somewhat ridiculous to do a `hasOwnProperty` check on a String, and it's should thus be possible to improve things a tiny bit here.

Unfortunately using a simple `instanceof` check would only work for `TilingPattern`s, but not for the `ShadingIRs` given how they are implemented; see `src/display/pattern_helper.js`. (While that file could probably do with some clean-up, given the age of some of its code, that probably shouldn't happen here.)

Finally, the `this.type = ""Pattern""`-property of the various Shadings/TilingPatterns were removed, since I cannot see why it's necessary when we can simply check for a `getPattern` method instead. Note that part of this code even pre-dates the main/worker-thread split, which probably in part explains why it looks the way it does.",False
be0794cb0887b8067795b94cdabf37c5bd361eeb,2020-11-06 04:32:11,Tim van der Meij,"Merge pull request #12564 from hakubo/patch-1

Make sure that Popup is rendered next to trigger for textAnnotation",True
99ac2d1036a33edb50d2095263a5ffa432089370,2020-11-06 04:23:39,Tim van der Meij,"Merge pull request #12583 from Snuffleupagus/nonBlendModesSet

Add global caching, for /Resources without blend modes, and use it to reduce repeated fetching/parsing in `PartialEvaluator.hasBlendModes`",True
646f895d352e921d2e2c0369cc610f657190bdf5,2020-11-06 03:23:21,Tim van der Meij,"Merge pull request #12568 from calixteman/defaultvalue

[api-minor] JS -- Add default value in annotation data",True
082cd8fc6c63614c4e2e09c3a16d7010e48bc100,2020-11-05 21:29:08,Jonas Jenwald,"Add global caching, for /Resources without blend modes, and use it to reduce repeated fetching/parsing in `PartialEvaluator.hasBlendModes`

The `PartialEvaluator.hasBlendModes` method is necessary to determine if there's any blend modes on a page, which unfortunately requires *synchronous* parsing of the /Resources of each page before its rendering can start (see the ""StartRenderPage""-message).
In practice it's not uncommon for certain /Resources-entries to be found on more than one page (referenced via the XRef-table), which thus leads to unnecessary re-fetching/re-parsing of data in `PartialEvaluator.hasBlendModes`.

To improve performance, especially in pathological cases, we can cache /Resources-entries when it's absolutely clear that they do not contain *any* blend modes at all[1]. This way, subsequent `PartialEvaluator.hasBlendModes` calls can be made significantly more efficient.

This patch was tested using the PDF file from issue 6961, i.e. https://github.com/mozilla/pdf.js/files/121712/test.pdf:
```
[
    {  ""id"": ""issue6961"",
       ""file"": ""../web/pdfs/issue6961.pdf"",
       ""md5"": ""a80e4357a8fda758d96c2c76f2980b03"",
       ""rounds"": 100,
       ""type"": ""eq""
    }
]
```

which gave the following results when comparing this patch against the `master` branch:
```
-- Grouped By browser, page, stat --
browser | page | stat         | Count | Baseline(ms) | Current(ms) |  +/- |     %  | Result(P<.05)
------- | ---- | ------------ | ----- | ------------ | ----------- | ---- | ------ | -------------
firefox | 0    | Overall      |   100 |         1034 |         555 | -480 | -46.39 |        faster
firefox | 0    | Page Request |   100 |          489 |           7 | -482 | -98.67 |        faster
firefox | 0    | Rendering    |   100 |          545 |         548 |    2 |   0.45 |
firefox | 1    | Overall      |   100 |          912 |         428 | -484 | -53.06 |        faster
firefox | 1    | Page Request |   100 |          487 |           1 | -486 | -99.77 |        faster
firefox | 1    | Rendering    |   100 |          425 |         427 |    2 |   0.51 |
```

---
[1] In the case where blend modes *are* found, it becomes a lot more difficult to know if it's generally safe to skip /Resources-entries. Hence we don't cache anything in that case, however note that most document/pages do not utilize blend modes anyway.",False
39f59547296a7c97597f3688e149c4f34785b419,2020-11-05 18:14:23,Calixte Denizet,"JS -- Add default value in annotation data
 * these values are used when a form is resetted",False
b642d4910869732fbd1e0a9c28457ffb58e71e01,2020-11-05 11:15:17,Jakub Olek,Make sure that Popup is rendered next to trigger for textAnnotation,False
8b652d685b4e66ea95dc036bd7aa2a200766ceb5,2020-11-05 03:27:37,Tim van der Meij,"Merge pull request #12572 from Snuffleupagus/getVisibleElements-object

Change the `getVisibleElements` helper function to take a parameter object",True
1de2bc4816c0c1859444c5b277d545833a9b9ddd,2020-11-05 00:11:28,Brendan Dahl,"Merge pull request #12505 from calixteman/12504

Split highlight annotation div into multiple divs",True
ba761e42f0ecb7e181c6ce330bb78076b0e88026,2020-11-04 16:45:04,Jonas Jenwald,"Change the `getVisibleElements` helper function to take a parameter object

Given the number of parameters, and the fact that many of them are booleans, the call-sites are no longer particularly easy to read and understand. Furthermore, this slightly improves the formatting of the JSDoc-comment, since it needed updating as part of these changes anyway.

Finally, this removes an unnecessary `numViews === 0` check from `getVisibleElements`, since that should be *very* rare and more importantly that the `binarySearchFirstItem` function already has a fast-path for that particular case.",False
4e13559cb0af2bb5465b69d02b5e0853d101fbd7,2020-11-04 03:36:49,Tim van der Meij,"Merge pull request #12559 from Snuffleupagus/goToPage-labels

Also update the browser history when the user *manually* change pages using the pageNumber-input (PR 12493 follow-up)",True
3e52098e294fb4b8ffb288189e814a218c6c03a7,2020-11-03 04:25:39,Tim van der Meij,"Merge pull request #12555 from calixteman/color

Replace css color rgb(...) by #...",True
8550f73b2288cb8cc3786b733d2472d163536428,2020-11-03 03:56:24,Tim van der Meij,"Merge pull request #12562 from Snuffleupagus/lgtm-exclude-unused-local-variable

Try adding a very basic `lgtm.yml` file, to prevent LGTM complaining about unused variables (issue 11965)",True
322b1072afa14c243ea443bda5044981747dede0,2020-11-02 16:06:17,Jonas Jenwald,"Use optional chaining in `web/pdf_history.js`

Since we're now free to use e.g. optional chaining everywhere *except* for the worker, we can thus simplify this code a bit.",False
9d11b51a3e172cea1b1d5b5a86f298a72a098eb8,2020-11-02 14:55:04,Calixte Denizet,"Replace css color rgb(...) by #...

* it's faster to generate the color code in using a table for components
* it's very likely a way faster to parse (when setting the color in the canvas)",False
83a37383791a8039190c3eeb370926dbae636b4b,2020-11-01 21:30:40,Jonas Jenwald,"Try adding a very basic `lgtm.yml` file, to prevent LGTM complaining about unused variables (issue 11965)

*Please note:* I cannot be sure if this actually helps, since we've not enabled LGTM for the PDF.js repository[1], however I hope that it should stop LGTM reporting things that we're already using ESLint to enforce.

---
[1] In case the patch does nothing, we can simply revert it and move on :-)",False
911948c5c029726c3bc35a72b27bf4f268cf34f4,2020-11-01 20:07:24,Jonas Jenwald,"Also update the browser history when the user *manually* change pages using the pageNumber-input (PR 12493 follow-up)

This patch addresses a review comment, which pointed out that we should *also* handle the pageNumber-input, from PR 12493.

Given that a user *manually* changing pages using the pageNumber-input, on the toolbar, could be regarded as a pretty strong indication of user-intent w.r.t. navigation in the document, hence I suppose that updating the browser history in this case as well probably won't hurt.",False
4eaa058c168cfbf8548caddb574a4889e8576efd,2020-11-01 20:07:24,Jonas Jenwald,"Add early returns to a couple of `PDFLinkService` methods, when there's no active PDF document

All of these methods will, in one way or another, cause e.g. scrolling or zooming to occur and consequently they don't really make sense unless there's an active PDF document. Especially since all of these methods end up calling into a `BaseViewer`-instance, which already contains similar early returns in essentially all of it's methods and setters.",False
47b3b39a8831a69e27a7f5b0ecb53404059d9344,2020-11-01 19:16:20,Tim van der Meij,"Merge pull request #12561 from Snuffleupagus/static-analyzer-warnings

Fix some static static analyzer warnings (issue 11965)",True
c89f21b9b288194305604888287ee40bf0150807,2020-11-01 18:40:49,Tim van der Meij,"Merge pull request #12560 from Snuffleupagus/update-packages

Update `npm` packages",True
a177afc206dfe69188b5e5749bd2c9ff6b12184c,2020-11-01 16:38:38,Jonas Jenwald,"Fix some static static analyzer warnings (issue 11965)

This fixes only those warnings, as reported by https://lgtm.com/projects/g/mozilla/pdf.js?mode=list, that make sense (as far as I'm concerned).

Hence this patch leaves the following things unaddressed:
 - The ""recommendation""-category, since it only complains about unused variables. However, note that all of those cases are purposely included and that there's thus ESLint-disable comments added to explictly allow them.
 - The ""warning""-category, which still contains two complaints. However, as far as I can tell, they are both false positives.

Given first of all the false positives of the LGTM static analyzer, and secondly that we'd need to add (essentially duplicated) disable-comments for the unused variable cases, it's not entirely clear to me if we actually want to work towards including LGTM in the PDF.js project (e.g. running alongside Travis) or if we should just close issue 11965.",False
75af932b798dba7331b742eca8b8ce6575afc836,2020-11-01 14:34:57,Jonas Jenwald,Update `npm` packages,False
46e60a266cc9bdb6ff952accc3957798fcb29826,2020-10-31 05:11:39,Tim van der Meij,"Merge pull request #12552 from Snuffleupagus/annotation-fixes

Miscellaneous (small) improvements in `src/core/annotation.js`",True
e341e6e542e4479c183efbcd36a22f581800a8af,2020-10-31 04:35:19,Tim van der Meij,"Merge pull request #12525 from brendandahl/mark-info

[api-minor] Implement API to get MarkInfo from the catalog.",True
8a8b4f96970408568d1b2fa724c36013b4e03227,2020-10-30 23:29:45,Brendan Dahl,Collect telemetry in the viewer on whether a PDF is tagged.,False
f5c821e9c3b4e06b85aad8f68bb63d68e4cb73a3,2020-10-30 23:29:45,Brendan Dahl,[api-minor] Implement API to get MarkInfo from the catalog.,False
fdb65200120dfe121d74537423846b227c8aef52,2020-10-30 17:57:05,Jonas Jenwald,"Change the `Catalog.openAction` getter back to using an Object internally (PR 12543 follow-up)

Given that the `Map`-pattern apparently has undesirable performance characteristics, change this getter back to using an Object instead and check its size before returning it.",False
a1e5581a0b729b71593583a100cbdba2227fece2,2020-10-30 17:53:05,Jonas Jenwald,"Let `Annotation._collectActions` return `null` when no actions are present

Rather than returning an *empty* Object[1] we should be returning `null` instead, since that's consistent with existing API-functionality.
To avoid having to *manually* track if the Object is empty, this patch also introduces a small helper function to check its size.",False
8540b4cc763e45b5e934fdb1e338081cd3b492b0,2020-10-30 17:47:52,Jonas Jenwald,"Stop calling `Font.charsToGlyphs`, in `src/core/annotation.js`, with unused arguments

As can be seen in `src/core/fonts.js`, this method only accepts *one* parameter, hence it's somewhat difficult to understand what the Annotation-code is actually attempting to do here.
The only possible explanation that I can imagine, is that the intention was initially to call `Font.charToGlyph` *directly* instead. However, note that that'd would not actually have been correct, since that'd ignore one level of font-caching (see `this.charsCache`). Hence the unused arguments are removed, in `src/core/annotation.js`, and the `Font.charToGlyph` method is now marked as ""private"" as intended.",False
bf870bd2acc7eb3ddd64752522172651544e46c0,2020-10-30 03:48:51,Tim van der Meij,"Merge pull request #12551 from Snuffleupagus/no-useless-escape

Fix *some* errors reported by the ESLint `no-useless-escape` rule",True
46e94cad17301f99868538c40f0387707651a306,2020-10-29 20:10:40,Jonas Jenwald,"Fix *some* errors reported by the ESLint `no-useless-escape` rule

This patch removes unnecessary escape-sequence in (mostly) strings, as a first step, since the ones in regular expressions probably requires more careful testing (just in case).
The only exception is a regular expression in `src/core/annotation.js`, since we should have both unit- and reference-tests for this code *and* given [this information on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes#Types):
 > Inside a character set, the dot loses its special meaning and matches a literal dot.

Please find additional details about the ESLint rule at https://eslint.org/docs/rules/no-useless-escape",False
7853d9798b9cfe52b01472953e9b4ec485c372f2,2020-10-29 02:51:49,Tim van der Meij,"Merge pull request #12543 from Snuffleupagus/openActionMap

Use a `Map`, rather than an `Object`, internally in the `Catalog.openAction` getter (PR 11644 follow-up)",True
91ca2674c3f0c5c4c86625b6685abb7608df71ab,2020-10-29 02:45:00,Tim van der Meij,"Merge pull request #12542 from Snuffleupagus/murmurhash-slice-test

Add a `MurmurHash3_64.update` unit-test for TypedArrays which share the same underlying ArrayBuffer (PR 12534 follow-up)",True
820fb7f9694a34d4780464db034e01945696cc4c,2020-10-28 19:13:44,Jonas Jenwald,"Update all `Object.fromEntries` call-sites to ensure that a `null` prototype is used

Given that `Object.fromEntries` doesn't seem to *guarantee* that a `null` prototype is used, we thus hack around that by using `Object.assign` with `Object.create(null)`.",False
9fc7cdcc9d6d29b04ce8bbd6feee08d5b839f507,2020-10-28 19:13:28,Jonas Jenwald,"Use a `Map`, rather than an `Object`, internally in the `Catalog.openAction` getter (PR 11644 follow-up)

This provides a work-around to avoid having to conditionally try to initialize the `openAction`-object in multiple places.
Given that `Object.fromEntries` doesn't seem to *guarantee* that a `null` prototype is used, we thus hack around that by using `Object.assign` with `Object.create(null)`.",False
852c61ef57d6fa87288af5b87e4d9f18e1a8557f,2020-10-28 17:12:04,Jonas Jenwald,"Add a `MurmurHash3_64.update` unit-test for TypedArrays which share the same underlying ArrayBuffer (PR 12534 follow-up)

This probably ought to have been included in PR 12534, but better late than never I suppose, since it helps to more clearly demonstrate the bug in a way that a reference-test alone just cannot do.

When writing this unit-test I also noticed that it required a certain amount of ""luck"" to actually trigger the bug, prior to the patch, since it seems that the bug only reproduced for certain *unfortunate* sequences of TypedArray data. (The added unit-test contains one such, purposely simple, example.)",False
ea4d88a3305ca682072764c163f8949262930099,2020-10-28 04:41:10,Tim van der Meij,"Merge pull request #12395 from calixteman/checks

Render not displayed annotations in using normal appearance when printing",True
08b00c13a74c7307ed81cf1c7e9556af1f40005d,2020-10-28 02:56:37,Tim van der Meij,"Merge pull request #12539 from Snuffleupagus/TestReporter-import

Use standard `import` statements more when running the unit-tests",True
6fae381c575061bd31ce20964c77db4c56afabd5,2020-10-28 02:52:47,Tim van der Meij,"Merge pull request #12540 from Snuffleupagus/BaseViewer-version-check

Ensure that the same version of PDF.js is used in both the API and the Viewer (PR 8959 follow-up)",True
6be2f84b4e4f607362a37cd053689b6912ad2c5a,2020-10-27 23:30:31,Calixte Denizet,Render not displayed annotations in using normal appearance when printing,False
62b19f7e9a0775725cbf96e163cef7830ac47aff,2020-10-27 21:39:42,Jonas Jenwald,"Ensure that the same version of PDF.js is used in both the API and the Viewer (PR 8959 follow-up)

Given that we're now accessing certain API-functionality *directly* in this file, e.g. the AnnotationStorage and Optional Content configuration, ensuring that there's not a version mismatch definitely seem like a good idea to prevent any *subtle* future bugs.",False
d8da6afa4c5d937ed19ace88685e56bcbe6e6267,2020-10-27 16:17:40,Jonas Jenwald,"Update the description of the test-case used in the `escapeString` unit-test

The description *itself* didn't escape the control characters correctly, leading to line-breaks being inserted in the test logs.",False
92477333f66b0828977e8f4224ac03b604bee1c9,2020-10-27 16:17:35,Jonas Jenwald,"Load the non-test files with standard `import` statements when running the unit-tests

The unit-test files themselves shouldn't be loaded until Jasmine has been setup/configured, however that doesn't matter for the ""normal"" PDF.js library files. Hence we can simply `import` them in the standard way.",False
8eeb0bcbe43551450c92e705d4a34ed748d32fa1,2020-10-27 16:00:15,Jonas Jenwald,"Import the `TestReporter`, in the unit and font tests

This way it's no longer necessary to load it as a script in the html-files.",False
8098102714f722988b28b2e00da4d7c1ba2ae8a1,2020-10-27 04:36:47,Tim van der Meij,"Merge pull request #12532 from Snuffleupagus/refactor-font-tests

Modernize, and remove SystemJS usage from, the font-tests",True
939af08ee1c2610a9cb7cb1f2f3da5e8539179d3,2020-10-27 04:12:44,Jonas Jenwald,"Remove SystemJS usage from the font-tests

With these changes, SystemJS is now *only* used to load the worker-file in development mode (pending removal once https://bugzilla.mozilla.org/show_bug.cgi?id=1247687 is fixed).",False
15a5f66973245625cb4e43b994acd307e511aa6c,2020-10-27 04:12:44,Jonas Jenwald,"Enable the ESLint `no-var` rule in the `test/font/` folder

This was done automatically, using the `gulp lint --fix` command.",False
6967b9dd96638bbfa88ae169ab5302278ce72a44,2020-10-27 04:12:44,Jonas Jenwald,"Modernize the font-tests

This patch first of all enables linting of the files in the `test/font/` folder, and secondly it also re-factors all test files to use native `import`/`export` statements. Finally, all tests are now loaded correctly, rather than being included as scripts through the `font_test.html` file.",False
71a14be8e7aa7779e6cf45b7d910427c69b7ad72,2020-10-27 04:04:03,Tim van der Meij,"Merge pull request #12534 from Snuffleupagus/murmurhash-slice

Ensure that `MurmurHash3_64.update` handles `ArrayBuffer` input correctly, to avoid hash-collisions (issue 12533)",True
b27e4fac9ed846afddbcfda08d61f1e77fbfcf84,2020-10-27 03:58:03,Tim van der Meij,"Merge pull request #12527 from Snuffleupagus/worker-rm-require

Remove SystemJS usage from the development viewer and the unit-tests",True
f2fa053c51613baa23bec3739b3bb4550bc379e1,2020-10-26 20:57:33,Jonas Jenwald,"Ensure that `MurmurHash3_64.update` handles `ArrayBuffer` input correctly, to avoid hash-collisions (issue 12533)

Different fonts incorrectly end up with *identical* hashes, despite having different /ToUnicode data.
The issue, and it's very interesting that we've apparently not seen it before, appears to be caused by the fact that different /ToUnicode entries share the *same* underlying `ArrayBuffer`, which thus becomes problematic at the `const dataUint32 = new Uint32Array(data.buffer, 0, blockCounts);` line. The simplest solution thus seem to be to just *copy* the input, when it's an `ArrayBuffer`, rather than using it as-is. (Note that if we'd stringified the input, when calling `MurmurHash3_64.update`, the issue would also have been fixed. In this case, we're already creating an unique TypedArray.)",False
666535be47e24f7ae03c24afe57120c6b50a62fc,2020-10-26 17:46:01,Jonas Jenwald,"Prevent use of optional chaining and nullish coalescing in the `src/shared/` folder

Given that this code is used on the worker-thread, where SystemJS is still used during development, we need to (for now) handle this folder the same way as the `src/core/` one.",False
c293fc2b8fd57895d4b1bfca3532a0ea87d4fafe,2020-10-26 15:41:48,Jonas Jenwald,"Add (some) optional chaining usage in `src/display/api.js`

Since we no longer use SystemJS to load the unit-tests, there's now nothing that prevents us from using optional chaining and nullish coalescing in the `src/display/` directory.",False
1c4495843cf9aa861087213ad4640b792f779195,2020-10-26 15:41:48,Jonas Jenwald,"Load all unit-tests with native `import`, rather than SystemJS",False
d9084c0be24dd4f829666bb2c45bd5d43eb5f180,2020-10-26 15:41:48,Jonas Jenwald,"Load the fake worker, in non-`PRODUCTION` mode, with native async `import`

This removes the last SystemJS usage from both the API and the default viewer.",False
126f42a266c492bbfa081771c5c260efa0556e40,2020-10-26 15:41:44,Jonas Jenwald,"Only ignore the `src/core/{glyphlist, unicode}.js` files, during building of `pdf.worker.js`, when source-maps are enabled

This produces a slightly smaller built `pdf.worker.js` file, for e.g. the `gulp mozcentral` build-target.",False
56fa6d414cb1115e03f9c1aa9f1d5bc52efcb7ac,2020-10-26 15:38:00,Jonas Jenwald,"Add a `getArrayLookupTableFactory` helper function and use it to re-format `src/core/{glyphlist, unicode}.js`

*Please note:* Once https://bugzilla.mozilla.org/show_bug.cgi?id=1247687 is implemented, and we've removed SystemJS completely, this entire patch can (and even should) be reverted.

This is similar to the existing `getLookupTableFactory` helper function, but is implemented as outlined in issue 6774.
The re-formatting of the tables were done automatically, by using find-and-replace with regular expressions.

For reasons that I don't even pretend to understand, using this particular structure for these *very* long lookup tables allow SystemJS to process the files correctly/quickly and the development viewer thus works as intended.",False
441d9c8cc0795ef9f27648e54aa5f612599048af,2020-10-26 15:38:00,Jonas Jenwald,"Change `src/core/{glyphlist, unicode}.js` to use standard `import`/`export` statements

While the *built* `pdf.worker.js` file still works correctly with these changes, despite these two files being excluded by Babel[1], the development viewer does not because of issues with SystemJS[2] and/or its Babel-plugin (both of which are old).
Furthermore, note also that excluding these two files from Babel-processing isn't *generally* necessary since e.g. the `gulp mozcentral` command works anyway. The explanation is rather that it's actually the source-map generation which fails for these huge sequences when building the `pdf.worker.js` file.

However, not using standard `import`/`export` statements in all files means we also need to use SystemJS when e.e. running the unit-tests. This is very unfortunate, since SystemJS (or its old Babel-version) doesn't support modern ECMAScript features such as e.g. optional chaining and nullish coalescing.

Unfortunately it also seems that https://bugzilla.mozilla.org/show_bug.cgi?id=1247687, which tracks the implementation of worker-modules in Firefox, has stalled since there hasn't been any updates for six months now.

To hopefully address all of the above, this patch is the first in a series that attempts to further reduce our reliance on SystemJS.

---
[1] The only difference being how the dependencies are handled, in the Webpack-bundled file.

[2] Parsing takes way too long and consumes too much memory, thus rendering the development viewer essentially unusable.",False
b2a4dacd31afbc5dac2fc1f0a9d3ab256631c72f,2020-10-25 23:11:20,Tim van der Meij,"Merge pull request #12529 from Snuffleupagus/scripting-build-tweaks

Tweak the `pdf.scripting.js` bundling, to improve overall consistency",True
2251677e5aad9f6db8635c91899fe5225df885d0,2020-10-25 23:04:13,Tim van der Meij,"Merge pull request #12528 from timvandermeij/test-unit-no-var

Convert `var` to `const`/`let` in the `test/unit` folder",True
61ffa9caa9b934d2db4c0a6bda7101ee663f0767,2020-10-25 21:06:56,Jonas Jenwald,"Tweak the `pdf.scripting.js` bundling, to improve overall consistency

This brings the new `pdf.scripting.js` bundling more in-line with the pre-existing handling for the  `pdf.js`/`pdf.worker.js` files:
 - Add a new `src/pdf.scripting.js` file as the entry-point for the build scripts.

 - Add the version/build numbers at the top of the *built* `pdf.scripting.js` files, since all other built files include that information given that it's often helpful to be able to easily determine the *exact* version.

 - Tweak the `createScriptingBundle` in the gulp-file, since it looks like a little bit too much copy-and-paste in the variable names.",False
fe08ef4e39c8f2f577a3d559c7c5a583606abb30,2020-10-25 20:47:12,Tim van der Meij,"Fix `var` conversions that ESLint could not do automatically

This mainly involves the `crypto_spec.js` file which declared most
variables before their usage, which is not really consistent with the
rest of the codebase. This also required reformatting some long arrays
in that file because otherwise we would exceed the 80 character line
limit. Overall, this makes the code more readable.",False
3e2bfb5819272e62d368b6de0af31c316fe55221,2020-10-25 20:10:51,Tim van der Meij,"Convert `var` to `const`/`let` in the `test/unit` folder

This has been done automatically using ESLint's `--fix` argument.",False
314ac21842319cb4942424750c2d093a512305c6,2020-10-25 20:08:52,Tim van der Meij,"Disable `var` usage for the `test/unit` folder

This allows us to enforce that `var` is not used anymore in the unit
tests to modernize the code and prevent subtle bugs.",False
b4ca3d55b8b0b906db25954ee59da69811cec586,2020-10-24 22:26:12,Tim van der Meij,"Merge pull request #12508 from calixteman/button_fallback_font

Fallback font for buttons must be ZapfDingbats.",True
0d1a8743588880596aedf4712e36220dfdc9520f,2020-10-24 20:33:57,Tim van der Meij,"Merge pull request #12464 from baloone/Fix_getVisibleElements_in_rtl_direction

Fix getVisibleElements helper in RTL-locales",True
e8e029dfb5b8105c47f04262001c2f93d4b400ab,2020-10-24 19:41:06,Tim van der Meij,"Merge pull request #12522 from Snuffleupagus/_initializeJavaScript-fixes

Fix a couple of edge-cases in `PDFViewerApplication._initializeJavaScript` (PR 12432 follow-up)",True
da73537fdb1e72ff4c2851549a77184086e75fbf,2020-10-24 19:36:01,Tim van der Meij,"Merge pull request #12524 from Snuffleupagus/pr-12333-followup

A couple of small (viewer) tweaks of tooltip-only Annotations (PR 12333 follow-up)",True
180f35ee91b0e5dce88e1af23795987035e6f7a7,2020-10-24 19:17:57,Tim van der Meij,"Merge pull request #12526 from Snuffleupagus/TilingPattern-args

Improve argument/name handling when parsing TilingPatterns (PR 12458 follow-up)",True
c493dc96fa30c20bae6aec820b4e05501975d979,2020-10-24 19:12:33,Tim van der Meij,"Merge pull request #12516 from Snuffleupagus/fieldObjects-annotation-undefined

Prevent issues, in `PDFDocument.fieldObjects`, for invalid Annotations",True
b478d3e7b9cce8659f94d4299ab32f59b497e0b7,2020-10-24 17:19:46,Jonas Jenwald,"Improve argument/name handling when parsing TilingPatterns (PR 12458 follow-up)

 - Handle the arguments correctly in `PartialEvaluator.handleColorN`.
   For TilingPatterns with a base-ColorSpace, we're currently using the `args` when computing the color. However, as can be seen we're passing the Array as-is to the `ColorSpace.getRgb` method, which means that the `Name` is included as well.[1]
   Thankfully this hasn't, as far as I know, caused any actual bugs, but that may be more luck than anything else given how the `ColorSpace` code is implemented. This can be easily fixed though, simply by popping the `Name`-object off of the `args` Array.

 - Cache TilingPatterns using the `Name`-string, rather than the object directly.
   This is not only consistent with other caches in `PartialEvaluator`, but importantly it also ensures that the cache lookup always works correctly. Note that since `Name`-objects, similar to other primitives, uses a cache themselves a *manually* triggered `cleanup`-call could thus (theoretically) cause the `LocalTilingPatternCache` to not find an existing entry. While the likelihood of this happening is *extremely* small, it's still something that we should fix.

---
[1] The `args` Array can e.g. look like this: `[0.043, 0.09, 0.188, 0.004, /P1]`, which means that we're passing in the `Name`-object to the `ColorSpace` method.",False
37c86b2daac769e58e274c123a80ef9a256a2c10,2020-10-24 15:30:03,Calixte Denizet,"Fallback font for buttons must be ZapfDingbats.

Fix bug https://bugzilla.mozilla.org/show_bug.cgi?id=1669099.",False
85e6c67cf3ec92356beda87daa0b9d9689d6a499,2020-10-23 18:56:16,Calixte Denizet,"Split highlight annotation div into multiple divs

Fix for issue #12504.
Highlight annotation may have several rectangles so we must have several divs to add mouse events handlers.",False
9f8d9802f936c18d9b2dc34877a40948979db360,2020-10-23 18:01:45,Jonas Jenwald,"A couple of small (viewer) tweaks of tooltip-only Annotations (PR 12333 follow-up)

Ensure that these tooltip-only Annotations are handled as ""internalLink""s, to ensure that they behave as expected in PresentationMode (e.g. they should still use a `pointer`-cursor).

Ensure that `PDFLinkService.getDestinationHash` won't create links with empty hashes, since those don't really make a lot of sense in general (this improves things for tooltip-only Annotations).

This PDF file can be used for testing: http://mirrors.ctan.org/macros/latex/contrib/pdfcomment/doc/pdfcomment.pdf#page=14",False
7bf9a872ed27d7ad59a9c3bf653a46acefc8b00b,2020-10-23 15:58:44,Jonas Jenwald,"Fix a couple of edge-cases in `PDFViewerApplication._initializeJavaScript` (PR 12432 follow-up)

 - Return early in `PDFViewerApplication._initializeJavaScript` for PDF documents without any `fieldObjects`, which is the vast majority of all documents, to prevent errors when trying to parse a non-existent object.

 - Similar to the other `PDFViewerApplication._initialize*` methods, ignore the `fieldObjects` if the document was closed before the data resolved.

 - Fix the JSDoc comment for the `generateRandomStringForSandbox` helper function, since there's currently a bit too much copy-and-paste going on :-)

 - Change `FirefoxScripting` to a class with static methods, which is consistent with the surrounding code in `web/firefoxcom.js`.",False
1eaf9c961b72f9f8803ecd55a90545abc651c8f2,2020-10-23 08:27:58,Brendan Dahl,"Merge pull request #12432 from calixteman/scripting_api

JS - Add the basic architecture to be able to execute embedded js",True
8cf27494b3fe2cc3425f99d8d6185ed4ae688a2b,2020-10-23 03:55:52,Tim van der Meij,"Merge pull request #12503 from calixteman/no_quad

Invalidate an annotation with no quadPoints (when it's required)",True
4258586c38ea26b90999f9d00b2eca00c4f64bb6,2020-10-23 01:30:05,Tim van der Meij,"Merge pull request #12515 from Snuffleupagus/eslint-no-abusive-eslint-disable

Enable the `unicorn/no-abusive-eslint-disable` ESLint plugin rule",True
b44a975d7cfeabf63e1462affe826b5261eb73bf,2020-10-22 16:54:43,Jonas Jenwald,"Prevent issues, in `PDFDocument.fieldObjects`, for invalid Annotations

For an invalid Annotation, there's one code-path where `undefined` is returned from `AnnotationFactory._create`. That'd currently, incorrectly, trigger an error during the `PDFDocument._collectFieldObjects` parsing which thus seem good to avoid.
Along these lines, the filtering in `PDFDocument.fieldObjects` is also updated to handle both `null` and `undefined` the same way.",False
60d2ff54086096c670fe0342425e5468a9352af5,2020-10-22 16:17:53,Jonas Jenwald,"Enable the `unicorn/no-abusive-eslint-disable` ESLint plugin rule

This rule prevents *accidental* disabling of ESLint completely, be ensuring that inline ESLint disable comments always list the affected rules explicitly.

Please see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/master/docs/rules/no-abusive-eslint-disable.md for additional information.",False
e76a96892a55f0e43ebd7345d870eaa1b3d99823,2020-10-21 22:30:56,Calixte Denizet,JS - Add the basic architecture to be able to execute embedded js,False
d2ef878702f754b964817a1aa7cd82ba89085a35,2020-10-21 17:23:19,Calixte Denizet,"Invalidate an annotation with no quadPoints (when it's required)

Some pdf softwares don't remove highlight annotations but make the QuadPoints array empty.
And the Rect for the annotation can be [-32768, -32768, 32768, 32768] so it leads to have a giant div which catches all the mouse events and make the pdf unusable when there are some forms elements.",False
b7b048e36c428b9dfa8e05380629f20a3eb48d2a,2020-10-21 03:04:09,Mohamed,Fix getVisibleElements helper in RTL-locales,False
e389ed6201df7955147dafda3a6813fff8ca5934,2020-10-21 01:50:11,Tim van der Meij,"Merge pull request #12493 from Snuffleupagus/PDFHistory.pushPage

Support adding pages, in addition to regular destinations, to the browser history and use it with thumbnails (issue 12440)",True
b302fd3a6ece8559105c3e1d608872a274db2cf7,2020-10-18 19:59:15,Jonas Jenwald,"Move updating of `this._maxUid` into `PDFHistory._updateInternalState`

There's no compelling reason to update this property *manually* in multiple places, since that's error-prone with any future code changes, given that `_updateInternalState` is always called just before anyway.",False
295716f49646877a023c5f5a39211f2ae29439e4,2020-10-18 19:34:00,Jonas Jenwald,"Support adding pages, in addition to regular destinations, to the browser history and use it with thumbnails (issue 12440)

While the referenced issue could very well be seen as an edge-case, this patch adds support for updating of the browser history when interacting with the thumbnails in the sidebar (assuming we want to do this).

The main reason for adding the history implementation in the first place, was to simplify navigating back to a previous position in the document when named/explicit destinations are used (e.g. when clicking on ""links"" or when using the outline in the sidebar).
As such, it never really crossed by mind to update the browser history when the thumbnails are used. However, a user clicking on thumbnails could be regarded as a pretty strong indication of user-intent w.r.t. navigation in the document, hence I suppose that updating the browser history in this particular case probably won't hurt.",False
8431cfe4829bc5c27f826329c3938c038f31eaf2,2020-10-18 17:59:59,Jonas Jenwald,"Re-name and re-factor the `PDFLinkService.navigateTo` method

This modernizes and improves the code, by using `async`/`await` and by extracting the helper function to its own method.
To hopefully avoid confusion, given the next patch, the method is also re-named to `goToDestination` to make is slightly clearer what it actually does.",False
4b4ac8a13d9f0f4ed5a20535c5c5c67f37d0a01f,2020-10-18 17:57:47,Tim van der Meij,"Merge pull request #12491 from Snuffleupagus/update-packages

Update packages and translations",True
ab31f95cb4c814c3eb4fb65412c353c903779847,2020-10-18 14:31:06,Jonas Jenwald,Update l10n files,False
641ad1c3a0a22424c491d3ba96a5a31beaa14920,2020-10-18 14:27:52,Jonas Jenwald,Update `npm` packages,False
d2874d4ed4e24b9b7c63516e94e521aa6f263452,2020-10-18 02:29:27,Tim van der Meij,"Merge pull request #12489 from calixteman/field_obj_test

Add a test for pdfDocument::fieldObjects",True
e46e31486719178b35377470f5243ffd29a03439,2020-10-17 23:18:40,Calixte Denizet,Add a test for pdfDocument::fieldObjects,False
3fa3cb6d8a48d8c2bd9897b3eef7ba4f9f24b5f1,2020-10-17 18:36:22,Tim van der Meij,"Merge pull request #12485 from calixteman/calculation_order

[api-minor] JS - Add a function in api to get the fields ids in AcroForm::CO",True
c30a3a94f0bcb91b1cb2a1c120c2d70bb331a364,2020-10-17 16:26:40,Calixte Denizet,JS - Add a function in api to get the fields ids in AcroForm::CO,False
ff2631493e29f5ae6b2b13bd9705e5b2f87ef0cf,2020-10-17 02:25:43,Tim van der Meij,"Merge pull request #12481 from calixteman/issue_12475

Get urls if any in AA::D dictionary for pushbuttons",True
32bceae73207beeecc2caea998ace89fc3f80041,2020-10-17 02:10:40,Tim van der Meij,"Merge pull request #12483 from Snuffleupagus/formInfo-hasFields

Don't store complex data in `PDFDocument.formInfo`, and replace the `fields` object with a `hasFields` boolean instead",True
127bb03e031657a890534e77427933c4dd4afb87,2020-10-17 02:00:17,Tim van der Meij,"Merge pull request #12486 from Snuffleupagus/font-Dict-cacheKey

Stop caching the *parsed* Font data on its `Dict` object (PR 7347 follow-up)",True
f956d0a96a79e8f56807ff5be201ab1bcd59fe2e,2020-10-16 21:15:01,Jonas Jenwald,"Stop caching the *parsed* Font data on its `Dict` object (PR 7347 follow-up)

Given that *all* fonts are, ever since PR 7347, now cached in the ""normal"" `fontCache` there's actually no reason for the special `font.translated` construction. (Given how Objects in JavaScript are references, rather than raw values, the old code shouldn't have caused any significant memory overhead.)

Instead we can simply store the `cacheKey`, which is a simple string, on only the Font `Dict`s where it's needed and thus look-up all fonts using the `fontCache` instead.",False
29af15f37e364701289fe9f0cfe17872264524b3,2020-10-16 16:33:47,Jonas Jenwald,"Add more validation in the `PDFDocument._hasOnlyDocumentSignatures` method

If this method is ever passed invalid/unexpected data, or if during the course of parsing (since it's used recursively) such data is found, it will fail in a non-graceful way.
Hence this patch, which ensures that we don't attempt to access non-existent properties and also that errors such as the one fixed in PR 12479 wouldn't have occured.",False
3351d3476d1f3bf6ff9098d267fbba0ff4f3257a,2020-10-16 16:17:27,Jonas Jenwald,"Don't store complex data in `PDFDocument.formInfo`, and replace the `fields` object with a `hasFields` boolean instead

*This patch is based on a couple of smaller things that I noticed when working on PR 12479.*

 - Don't store the /Fields on the `formInfo` getter, since that feels like overloading it with unintended (and too complex) data, and utilize a `hasFields` boolean instead.
   This functionality was originally added in PR 12271, to help determine what kind of form data a PDF document contains, and I think that we should ensure that the return value of `formInfo` only consists of ""simple"" data.
   With these changes the `fieldObjects` getter instead has to look-up the /Fields manually, however that shouldn't be a problem since the access is guarded by a `formInfo.hasFields` check which ensures that the data both exists and is valid. Furthermore, most documents doesn't even have any /AcroForm data anyway.

 - Determine the `hasFields` property *first*, to ensure that it's always correct even if there's errors when checking e.g. the /XFA or /SigFlags entires, since the `fieldObjects` getter depends on it.

 - Simplify a loop in `fieldObjects`, since the object being accessed is a `Map` and those have built-in iteration support.

 - Use a higher logging level for errors in the `formInfo` getter, and include the actual error message, since that'd have helped with fixing PR 12479 a lot quicker.

 - Update the JSDoc comment in `src/display/api.js` to list the return values correctly, and also slightly extend/improve the description.",False
b710fbcb00159142451ccc5d583ada72ca1e6cdc,2020-10-16 01:55:34,Tim van der Meij,"Merge pull request #12478 from Snuffleupagus/async-translateFont

Convert `PartialEvaluator.translateFont` to an `async` method",True
ee665fc053e434e5989dddf155c3681276221dc1,2020-10-16 01:49:05,Tim van der Meij,"Merge pull request #12479 from Snuffleupagus/fix-formInfo-test

Fix the ""should get form info when AcroForm is present"" unit-test",True
ce3d3a6ff8e4cb7db302deffdac54951655afc8f,2020-10-15 23:12:36,Calixte Denizet,Get urls if any in AA::D dictionary for pushbuttons,False
5f8957e8dfa966f6aa3e88c0b2b6f36b677fb190,2020-10-15 16:56:32,Jonas Jenwald,"Fix the ""should get form info when AcroForm is present"" unit-test

The last unit-test didn't work correctly, since an error was thrown in `PDFDocument._hasOnlyDocumentSignatures` because the mocked `XRef`-instance wasn't actually being set correctly.

Also, updates the `XRefMock` to use `async` methods where appropriate.",False
bc6b47a50e7932c1c8a36e03fa1da346c8dd29f4,2020-10-15 13:12:58,Jonas Jenwald,"Convert `PartialEvaluator.translateFont` to an `async` method

This allows us to make a slight simplification in `PartialEvaluator.loadFont`, which thus removes an old TODO-comment from the method.
Furthermore, in `PartialEvaluator.translateFont`, the CMap-handling is now limited to only *composite* fonts to avoid having to wait for a ""dummy""-Promise for most fonts.",False
a373137304b548620da2b82c00a4edb3538bc711,2020-10-15 02:57:47,Tim van der Meij,"Merge pull request #12429 from calixteman/collect_js

[api-minor] Add the possibility to collect Javascript actions",True
71ecc3129b1b3884be4752752a76451f49948e9b,2020-10-14 14:14:16,Calixte Denizet,Add the possibility to collect Javascript actions,False
1034769ca12907b81ec2f6a43bc5974bba838e19,2020-10-14 00:41:54,Tim van der Meij,"Merge pull request #12477 from Snuffleupagus/SaveDocument-WorkerTask

Handle `WorkerTask`s, and various PDF document properties, correctly in the ""SaveDocument"" handler in `src/core/worker.js`",True
0700a3de36a037973843972a9e695c2a47f3e430,2020-10-14 00:38:48,Tim van der Meij,"Merge pull request #12476 from Snuffleupagus/worker-rm-handler-scope

Remove the `scope` parameter from the ""GetOperatorList"" handler in `src/core/worker.js` (PR 11110 follow-up)",True
65132ba5d84ee2daf6234696cc5a4e9c78240da3,2020-10-13 23:00:43,Jonas Jenwald,"Handle `WorkerTask`s, and various PDF document properties, correctly in the ""SaveDocument"" handler in `src/core/worker.js`

 - Actually register/unregister the `WorkerTask`s, used when saving each page, correctly.
   To prevent issues when terminating the Worker, we purposely wait for all running `WorkerTask`s to complete first. Hence we need to actually handle `WorkerTask`s the same way in ""SaveDocument"" as in the rest of this file, see e.g. ""GetOperatorList"" and ""GetTextContent"".

 - Access `PDFDocument` properties in a generally safe/consistent way.
   While the current code works fine, given how the PDF document is being loaded, it still seems like a very good idea to be *consistent* in how we access these kind of properties (since in general you need to avoid `MissingDataException` everywhere in this file).

 - Change a variable name, since there's essentially no precedent in the code-base for *local* variable names to start with an underscore.",False
38629c345d84310b2067dd9719c534096b48dce8,2020-10-13 19:28:38,Jonas Jenwald,"Remove the `scope` parameter from the ""GetOperatorList"" handler in `src/core/worker.js` (PR 11110 follow-up)

Support for the `scope` parameter, in `MessageHandler.on`, was removed in PR 11110 however this particular case was unused/unnecessary for years prior to that change. (From a quick look through the history, I'm not even sure if it was actually needed in the first place.)",False
49791f55b3cb4ae1cef68a6573e764aa0db3b5fb,2020-10-11 18:20:32,Tim van der Meij,"Merge pull request #12470 from Snuffleupagus/webpack-5

Upgrade `webpack` to version 5",True
e7437a0b67b0cc7fbe251607b5990179182ea486,2020-10-11 17:36:47,Jonas Jenwald,"Use standard `import` statements when loading `PDFViewerApplication`/`AppOptions` in `web/viewer`

Given that we're no longer using SystemJS to load the `web/` files, see PR 11919, there's nothing that prevents us from using standard `ìmport` statements in this file.
Obviously it's still necessary to load part of the code conditionally on the build type, however this still allows us to clean-up and simplify at least some of this file.",False
666dd73ce8641792fb047a8fea46931abb05d1e9,2020-10-11 13:53:38,Jonas Jenwald,"Upgrade `webpack` to version 5

The only noticeable changes are that the built files are now *slightly* smaller, and that Webpack now supports optional chaining and nullish coalescing without the need for Babel plugins.",False
e59a90d8e93167c91be9b3dbf178c30cc1791191,2020-10-09 02:17:13,Tim van der Meij,"Merge pull request #12458 from Snuffleupagus/LocalTilingPatternCache

Add local caching of TilingPatterns in `PartialEvaluator.getOperatorList` (issue 2765 and 8473)",True
30e8d5dea147fcb131d8cb32a8878055133fbc34,2020-10-08 22:13:21,Jonas Jenwald,"Add local caching of TilingPatterns in `PartialEvaluator.getOperatorList` (issue 2765 and 8473)

In practice it's not uncommon for PDF documents to re-use the same TilingPatterns more than once, and parsing them is essentially equal to parsing of a (small) page since a `getOperatorList` call is required.

By caching the internal TilingPattern representation we can thus avoid having to re-parse the same data over and over, and there's also *less* asynchronous parsing required for repeated TilingPatterns.

Initially I had intended to include (standard) benchmark results with this patch, however it's not entirely clear that this is actually necessary here given the preliminary results.
When testing this manually in the development viewer, using `pdfBug=Stats`, the following (approximate) reduction in rendering times were observed when comparing `master` against this patch:
 - http://pubs.usgs.gov/sim/3067/pdf/sim3067sheet-2.pdf (from issue 2765): `6800 ms` -> `4100 ms`.
 - https://github.com/mozilla/pdf.js/files/1046131/stepped.pdf (from issue 8473): `54000 ms` -> `13000 ms`
 - https://github.com/mozilla/pdf.js/files/1046130/proof.pdf (from issue 8473): `5900 ms` -> `2500 ms`

As always, whenever you're dealing with documents which are ""slow"", there's usually a certain level of subjectivity involved with regards to what's deemed acceptable performance.
Hence it's not clear to me that we want to regard any of the referenced issues as fixed, however the improvements are significant enough to warrant caching of TilingPatterns in my opinion.",False
99a2302d88aa0df8254e225cedc9c68e8ba9aacb,2020-10-08 01:34:31,Tim van der Meij,"Merge pull request #12454 from Snuffleupagus/terser-5

Upgrade `terser` to version 5",True
3461eac7b88dead80a28026dacf75789ab34218b,2020-10-07 18:08:17,Jonas Jenwald,"Upgrade `terser` to version 5

The only significant change is that the `minify` command is now asynchronous, which we can handle easily by simply making the containing functions `async`.
Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function#Browser_compatibility, using `async`/`await` in the gulpfile should no longer be an issue as far as I can tell.",False
fd1d9cc85f631ee2c871c79cb10cc511c1e8d8d4,2020-10-07 01:33:03,Tim van der Meij,"Merge pull request #12451 from Snuffleupagus/acorn-8

Upgrade `acorn` to version 8",True
bc036c05bd6443a3de1984aaf38c8efd6d1ecf08,2020-10-06 17:23:08,Jonas Jenwald,"Upgrade `acorn` to version 8

I've run `gulp mozcentral`, `gulp generic`, and `gulp generic-es5` with `master` respectively this patch and then diffed the build output. With the (obvious) exception of increased version/build numbers, there were no actual changes from the updated Acorn version.",False
7ae3e13f16a465278e192e5f36083fc9b88cad65,2020-10-06 02:24:39,Tim van der Meij,"Merge pull request #12450 from janpe2/cff-xuid

Fix invalid `XUID` entries in CFF fonts",True
10e76231238e46d6299c0e1d1647cdddd9b8da2c,2020-10-06 02:17:31,Tim van der Meij,"Merge pull request #12448 from Snuffleupagus/eslint-no-debugger-alert

Enable the ESLint `no-debugger` and `no-alert` rules",True
935568c2f1d395a0a92df60365bc96a45e3d26cc,2020-10-05 20:08:01,Jani Pehkonen,"Fix invalid `XUID` entries in CFF fonts

In CFF fonts, entry `XUID` should be an array that has no more than
16 elements. In the issue, the length is 20, which causes the fonts to fail.
See Appendix B, ""Implementation Limits"" in PostScript Language Reference Manual
https://web.archive.org/web/20170218093716/https://www.adobe.com/products/postscript/pdfs/PLRM.pdf
Actually entries `XUID` and `UniqueID` are obsolete altogether.
https://blogs.adobe.com/CCJKType/2016/06/no-more-xuid-arrays.html",False
ba079453bf57d522f1adac45506d756b39673a45,2020-10-05 17:11:06,Jonas Jenwald,"Enable the ESLint `no-debugger` and `no-alert` rules

The `debugger`-statement would only, potentially, make sense during development and we thus want to prevent it from being accidentally included when landing code.
The `alert`, `confirm`, and `prompt` functions should generally be avoided, with the few intended cases manually allowed.

Please find additional details about the ESLint rules at:
 - https://eslint.org/docs/rules/no-debugger
 - https://eslint.org/docs/rules/no-alert",False
b3e32e200113350d018fbec56e62364f4260088e,2020-10-05 03:08:31,Tim van der Meij,"Merge pull request #12446 from Snuffleupagus/firefox-print-RenderingCancelledException

[Firefox] Stop logging `RenderingCancelledException`s as errors when printing",True
a1028e2b9b906e0128cf7d3a4e52b636787560ec,2020-10-05 02:57:22,Tim van der Meij,"Merge pull request #12445 from timvandermeij/packages

Upgrade minor/major versions of dependencies that don't require code changes",True
505f14e81661eb50f34ed20533189fa66d266fa9,2020-10-04 23:56:59,Tim van der Meij,"Upgrade minor/major versions of dependencies that don't require code changes

The changelogs of those dependencies showed no breaking changes for us.
Most of the time the major version bump was done to remove compatibility
with very outdated Node.js versions.

Only for `autoprefixer` and `gulp-postcss` a change was required, which
is including `postcss` in our `package.json` explicitly since it's now
a peer dependency of those packages.

Now only `acorn`,`systemjs`, `terser` and `yargs` are not the latest
versions because they require more work.",False
069ddc868699bc8b3c642dce0ec7c28b483d1968,2020-10-04 23:55:31,Jonas Jenwald,"[Firefox] Stop logging `RenderingCancelledException`s as errors when printing

In the rest of the viewer code-base, we purposely don't treat `RenderingCancelledException`s as actual errors (since they aren't) and consequently we never log them.
Hence it makes sense, as far as I'm concerned, to simply treat `RenderingCancelledException`s the same way when printing in Firefox.

While I don't print a whole lot, I cannot remember seeing these ""errors"" logged when printing until *very* recently[1]. Given that the browser print functionality and UI, in Firefox, is under active development it's certainly possible that there's some recent changes to the related timings which make `RenderingCancelledException`s more likely now.

---
[1] Interestingly, only some PDF documents seem to be affected as well; I'm able to reproduce this pretty consistently by opening https://www.uni-muenster.de/imperia/md/content/ziv/pdf/printpay_flyer.pdf in Firefox and then repeating the following sequence:
Clicking on the PDF.js print button, and then cancelling printing.",False
e0c80a3556867cc4e9e1e523097141021342b225,2020-10-04 21:00:39,Tim van der Meij,"Remove the `fancy-log` dependency

This dependency hasn't been updated in two years and the only place that
uses it is the `externaltest` target in the Gulpfile. We can simply
replace `fancy-log` usage there with `console.log` like we do in all
other places in the Gulpfile because we're not interested in the
timestamps here. Gulp already prints timestamps and these tests finish
within a second anyway.

Note that it remains in `package-lock.json` because other Gulp-related
packages have it as a dependency, but at least we're no longer depending
on it directly anymore now.",False
910772cfcfcd5369586c98881f8bc870ca32dce2,2020-10-04 19:45:44,Tim van der Meij,"Merge pull request #12444 from Snuffleupagus/update-packages

Update packages and translations",True
c5a1a6fdd5fc3a9faa795f8296b630c94d086c7d,2020-10-04 19:00:24,Jonas Jenwald,"Remove now unnecessary `no-unsanitized/method` disabling in `test/unit/jasmine-boot.js`

With the latest release of the `eslint-plugin-no-unsanitized` package, we no longer need to disable this rule; see https://github.com/mozilla/eslint-plugin-no-unsanitized/pull/150",False
ffb0bb885c949d0cdc02fa5e61ba44e0b72dc690,2020-10-04 19:00:24,Jonas Jenwald,Update l10n files,False
082e7b5200c3afc9fcb7c57970222ab7863b493c,2020-10-04 19:00:24,Jonas Jenwald,"Fix (some) vulnerabilities reported by `npm audit`

This was done automatically, using the `npm audit fix` command.",False
522c93b9161cfbbb56cf5ca49efd0d95e4d01da4,2020-10-04 19:00:23,Jonas Jenwald,Update `npm` packages,False
47131707bc810094fac2422752d9640b75cda698,2020-10-04 18:31:09,Tim van der Meij,"Merge pull request #12442 from timvandermeij/upgrade-puppeteer

Upgrade Puppeteer to version 5.3.1",True
c10aac9a1d8cdb8ff881e05f69d3620470ca8419,2020-10-04 02:36:31,Tim van der Meij,Upgrade Puppeteer to version 5.3.1,False
2823beba6991f0cf26380291c7c54b522c0242f4,2020-10-04 02:06:13,Tim van der Meij,"Merge pull request #12441 from Snuffleupagus/src-eslint-config

Re-factor how the ESLint `no-var` rule is enabled in the `src/` folder",True
9416b14e8b06a39a1a57f2baf22aebab2370edeb,2020-10-03 23:45:29,Jonas Jenwald,"Re-factor how the ESLint `no-var` rule is enabled in the `src/` folder

This simplifies/consolidates the ESLint configuration slightly in the `src/` folder, and prevents the addition of any new files where `var` is being used.[1]
Hence we no longer need to manually add `/* eslint no-var: error */` in files, which is easy to forget, and can instead disable the rule in the `src/core/` files where `var` is still in use.

---
[1] Obviously the `no-var` rule can, in the same way as every other rule, be disabled on a case-by-case basis where actually necessary.",False
48e27a1a22a83f1f1be481f992f75f9cee7e5804,2020-10-03 23:29:56,Tim van der Meij,"Merge pull request #12437 from Snuffleupagus/src-display-no-var

Enable the ESLint `no-var` rule in the `src/display/` folder",True
6ff1fe4ea962aab93ca34c30ad4c1c59fa00a395,2020-10-03 23:20:39,Tim van der Meij,"Merge pull request #12333 from calixteman/tooltip

Add tooltip if any in annotations layer",True
76e96d4364852249429ff6fb3d45001de65bb167,2020-10-03 22:17:13,Tim van der Meij,"Merge pull request #12436 from Snuffleupagus/src-shared-no-var

Enable the ESLint `no-var` rule in the `src/shared/` folder",True
d86546e14c977a44fde2a182d4756c94e30a19cb,2020-10-03 22:09:54,Tim van der Meij,"Merge pull request #12439 from Snuffleupagus/viewer-version-build

Add `version`/`build` info at the top of the *built* `web/viewer.js` file",True
eb0cc7f9c316de91990a2a3baa7a205951a4dda5,2020-10-03 12:49:53,Jonas Jenwald,"Add `version`/`build` info at the top of the *built* `web/viewer.js` file

This should be helpful to easily determine the *exact* version of the viewer itself, when looking at a *built* `web/viewer.js` file.
Note that we're already including this information in other built files, such as e.g. `pdf.js`, `pdf.worker.js`, `pdf_viewer.js`, and `pdf.image_decoders.js`.",False
2a7d1557f97dae5b5fe92567a849167214333eec,2020-10-03 11:57:45,Jonas Jenwald,"Enable the ESLint `no-var` rule in the `src/shared/` folder

Previously this rule has been enabled in the `web/` folder, and in select files in the `src/` sub-folders.
In this case, enabling of this rule didn't actually require any further code changes.

Please find additional details about the ESLint rule at https://eslint.org/docs/rules/no-var",False
52f6016e6ca045a5675888ab1ced812d63b57d2e,2020-10-02 19:59:13,Jonas Jenwald,"Fix the remaining ESLint `no-var` errors in the `src/display/` folder

While most of necessary changes were fixed automatically, see the previous patch, there's a number of cases that needed to be fixed manually.",False
e557be5a17551a1e2687c0cb53d7f083e51f45cb,2020-10-02 19:47:28,Jonas Jenwald,"Re-format the `src/display/` files to enforce the ESLint `no-var` rule

This was done automatically, using `gulp lint --fix`.",False
2a8983d76b5efde58067a0917bd653d9b58a3aae,2020-10-02 19:46:23,Jonas Jenwald,"Enable the ESLint `no-var` rule in the `src/display/` folder

Previously this rule has been enabled in the `web/` folder, and in select files in the `src/` sub-folders.
Note that a number of the files in the `src/display/` folder were already enforcing the `no-var` rule, and thanks to Prettier the necessary re-writing will be (mostly) handled automatically.

Please find additional details about the ESLint rule at https://eslint.org/docs/rules/no-var",False
20b12d2bda2ca270884900f3b1b9ff7d4cf4f3a9,2020-10-02 13:41:18,calixteman,Add tooltip if any in annotations layer,False
88f72d6b1c37dfc0dbb6715685bf8cb4ae516cd7,2020-10-01 01:42:42,Tim van der Meij,"Merge pull request #12426 from Snuffleupagus/app-triggerPrinting

Re-factor how printing is triggered in the default viewer",True
8e7a6e010dda6475df2d4ab99c44a6d0680b7602,2020-10-01 01:23:16,Tim van der Meij,"Merge pull request #12419 from Snuffleupagus/fallbackToSystemFont-cidToGidMap

Use the `cidToGidMap`, if it exists, when building the glyph mapping for non-embedded composite fonts (issue 12418)",True
89ce326d12f6a6101039ea12e66ad01535b1b606,2020-09-30 18:40:19,Jonas Jenwald,"Re-factor how printing is triggered in the default viewer

This adds a new `PDFViewerApplication.triggerPrinting` method, which takes care of checking that printing is actually supported before calling `window.print`, to remove the need to duplicate that code in multiple places.

Also, removes the `PDFViewerApplication.printing` getter since it's not really necessary any more.",False
d49b2f6cc2b7ed86da22d55ddb1af0b8a5fe5a1e,2020-09-30 02:00:53,Tim van der Meij,"Merge pull request #12422 from Snuffleupagus/find-not-shiftKey

Don't trigger searching, in the `GENERIC` viewer, when <kbd>Shift</kbd> is used together with the regular keyboard shortcut (issue 12421)",True
8fa4e48f46c447c6ba1dac3bcc6e6accaf93bef4,2020-09-30 01:57:42,Tim van der Meij,"Merge pull request #12423 from Snuffleupagus/escodegen-2

Update `escodegen` to version 2.0",True
db4cefbac3e51f4300053cd293bba76ff20ab494,2020-09-29 19:26:34,Jonas Jenwald,"Add basic support for the optional chaining operator `?.`

For now we need to use a Babel-plugin, since part of our build system doesn't support this fully (e.g. Babel-loader, Webpack 4.x, and SystemJS).

While the `?.` operator will thus always be transpiled by Babel, even in modern builds, simply supporting it for development purposes seems like a step in the right direction.

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining",False
5107259176152c9217cafe21e3454f480598fd50,2020-09-29 19:26:24,Jonas Jenwald,"Update `escodegen` to version 2.0

This release contains support for additional modern ECMAScript features, such as e.g. the nullish coalescing operator `??` and the optional chaining operator `?.`.",False
f399ac7f16df28d59c2d6391b2e4a70adb1fa529,2020-09-29 15:20:20,Jonas Jenwald,"Don't trigger searching, in the `GENERIC` viewer, when <kbd>Shift</kbd> is used together with the regular keyboard shortcut (issue 12421)

Please note that this change won't affect the Firefox built-in PDF Viewer, since it uses the native browser findbar. However, it brings the `GENERIC` viewer inline with how searching is normally triggered in browsers.

Note that in Firefox searching is only triggered by <kbd>Ctrl</kbd>+<kbd>F</kbd> (or <kbd>command</kbd>+<kbd>F</kbd> on Mac), but <kbd>Shift</kbd> isn't used; see https://support.mozilla.org/en-US/kb/keyboard-shortcuts-perform-firefox-tasks-quickly#w_search

Furthermore, looking at the ""Miscellaneous"" section of https://support.mozilla.org/en-US/kb/keyboard-shortcuts-perform-firefox-tasks-quickly#firefox:mac:fx81 the <kbd>command</kbd>+<kbd>Shift</kbd>+<kbd>F</kbd> shortcut is even reserved for the ""Toggle Full Screen"" functionality on Mac.",False
bd3b15b89710dad25c73dd2ef9b7c18395507b87,2020-09-28 18:10:43,Jonas Jenwald,"Use the `cidToGidMap`, if it exists, when building the glyph mapping for non-embedded composite fonts (issue 12418)",False
6728c8fa6108fc0593ed7a60b90ed1b0a9f90af8,2020-09-27 02:32:13,Tim van der Meij,"Merge pull request #12405 from nickyc975/fixed-active-element-in-shadow-dom

Fixed keydown event handling problem with shadow DOM.",True
8608f0e6115bf22b4520ed0ef73f3c7bdb451df9,2020-09-26 23:19:00,Tim van der Meij,"Merge pull request #12417 from Snuffleupagus/pageView-error

Remove the `PDFPageView.{error, stats}` properties, and some related viewer clean-up",True
2043596035e82d5a29b51e2f52368dde44f3d321,2020-09-25 18:12:55,Jonas Jenwald,"Use template strings when calculating the CSS `transform`s, in the `PDFPageView.cssTransform` method

In my opinion this slightly improves readability, by grouping related properties together.",False
8467f45ab7ea1ab5f83938d47257775f8d24e1fc,2020-09-25 18:12:46,Jonas Jenwald,"Change the `finishRenderTask` helper function, in `PDFThumbnailView.draw`, to be asynchronous

This simplifies the implementation slightly, and is also (almost) identical to the `finishPaintTask` helper function in `PDFPageView.draw`.",False
a4e5458774e9e1ddaef63f3cb17845086b997a04,2020-09-25 18:12:46,Jonas Jenwald,"Update all `BaseViewer.getPageView`/`PDFThumbnailViewer.getThumbnail` call-sites, in `web/app.js`, to check the returned value properly

Given how those are used, there *should* not be any situation in which e.g. `undefined` is ever returned. However, actually checking that the pageView/thumbnail is defined cannot hurt.

Also, re-factor `webViewerPageRendered` slightly since the `pageView` is no longer unconditionally necessary after the previous patches; note in particular that the thumbnails will only be updated when the sidebar *and* the thumbnailView is visible.

Finally, fixes a bug in `webViewerPageChanging` whereby an empty string would not be treated as a valid pageLabel and instead be replaced by `null`.",False
e46055a92c980b3cb221760ddbd8bfbd2144d1e8,2020-09-25 18:12:44,Jonas Jenwald,"Remove the `PDFPageView.stats` property, and fetch it manually only when debugging is enabled

Given that the default viewer only uses the ""page stats"" when debugging is enabled, it seems much simpler and more straightforward to simply query the API *directly* when this information is actually required. That way, there's a bit less information that needs to be stored/updated on each `PDFPageView`-instance.

Finally, since the `EventBus` now exists, we no longer need to handle the ""page stats""-case in the regular listeners in `web/app.js`, but can instead add special ""page stats""-listeners only when debugging is enabled.",False
9efc1784b20f77a93227a15d065d069b2e420482,2020-09-25 17:51:12,Jonas Jenwald,"Remove the `PDFPageView.error` property, and simply include Errors in the ""pagerendered"" event instead

The way that rendering errors are handled in `PDFPageView` is *very* old, and predates e.g. the introduction of the `EventBus` by several years.
Hence we should be able to simplify things a bit here, by including the Error (when it exists) in the ""pagerendered"" event and thus avoid having to reach into `PDFPageView` for it.",False
7b15094cdfdc56b1e8d932b1a8c9811e5fab2823,2020-09-25 17:51:05,Jonas Jenwald,"Ignore `RenderingCancelledException` when logging errors in `PDFRenderingQueue.renderView`

Note that a `RenderingCancelledException` *should* never actually reach this method, but better safe than sorry I suppose, considering that both `PDFPageView` and `PDFThumbnailView` are already catching `RenderingCancelledException`s since those are *not* Errors in the normal sense of the word.",False
120c5c2261e4d55f3d1d82daab61c9254e243e3f,2020-09-25 03:18:21,Tim van der Meij,"Merge pull request #12409 from Snuffleupagus/bug-1627030

Compute the `transformOrigin` correctly, for negative values, when rendering `AnnotationElement`s (bug 1627030)",True
740e07cad4b25395735b1758270f32dc658cbad0,2020-09-25 02:27:00,Tim van der Meij,"Merge pull request #12414 from calixteman/bug_1666753

Need to reset the streams when printing",True
5af352e65abbdad1da522baff3c78c893d514b78,2020-09-24 22:43:09,Calixte Denizet,Need to reset the streams when printing,False
fca53a8eb04668600b939c7627114276815964fa,2020-09-24 13:58:29,Jonas Jenwald,"Compute the `transformOrigin` correctly, for negative values, when rendering `AnnotationElement`s (bug 1627030)

This changes the `transformOrigin` calculations in `AnnotationElement._createContainer` and `PopupAnnotationElement.render`, to ensure that e.g. the clickable area of annotations and/or popups are both positioned correctly.

The problem occurs for *negative* values, since they're not negated correctly because of how the `transformOrigin` strings were build; see issue 12406 for a more in-depth explanation. Previously, for negative values, the `transformOrigin` strings would thus be ignored since they're not valid.",False
252e258a590513590b564b8b2a889e27a9004f7c,2020-09-24 05:47:56,Nicky Chen,"Fixed keydown event handling problem with shadow DOM.
Editable elements in shadow DOMs can not be detected in old version.",False
139c8a8cb57cabab2e54bcf8814d6e3098985e16,2020-09-22 02:54:38,Tim van der Meij,"Merge pull request #12397 from Snuffleupagus/webpack-stream-update

Update the `webpack-stream` dependency (issue 11996)",True
3e9c489b8b6cd059c264a87839e1a60dff33b8f7,2020-09-20 19:05:56,Jonas Jenwald,"Update the `webpack-stream` dependency (issue 11996)

Given that the long-standing `webpack-stream` issue 201 was recently fixed in PR 207, and a new version released, we should now finally be able to update the dependency.
However, depending on if/when `webpack-stream` gets support for Webpack 5 (which is currently in beta) we may still want remove our `webpack-stream` dependency.",False
b8c856a53a51a85b1fb44572cd8a6534b3f064cb,2020-09-20 19:04:36,Tim van der Meij,"Merge pull request #12396 from Snuffleupagus/update-packages

Update packages and translations",True
fcfbc06a9ca1a6cc76379981cb2608cf726695a2,2020-09-20 15:13:35,Jonas Jenwald,Update l10n files,False
4dcedeb98eb68024f5b50449388243f9df15a17a,2020-09-20 15:10:20,Jonas Jenwald,"Fix (some) vulnerabilities reported by `npm audit`

This was done automatically, using the `npm audit fix` command.",False
36b8d5e72d0936ebb264d1b4be98180efc96c956,2020-09-20 15:04:24,Jonas Jenwald,Update `npm` packages,False
c98046e5e324367ec53a9ff7cdc9dd71b7336241,2020-09-19 19:58:53,Tim van der Meij,"Merge pull request #12393 from Snuffleupagus/issue-12392

Prevent errors if the `InkList` property, in InkAnnotations, is missing and/or not an Array (issue 12392)",True
2497e8eab9e394206c2ab9f874490e700aa92fef,2020-09-19 19:04:32,Jonas Jenwald,"Prevent errors if the `InkList` property, in InkAnnotations, is missing and/or not an Array (issue 12392)

To prevent a future bug, the `Vertices` property in PolylineAnnotations are handled the same way.",False
26ae7ba2ad97b50fedfbd714d703c3d0a63c53a3,2020-09-18 03:15:17,Tim van der Meij,"Merge pull request #12387 from calixteman/fix_12386

Use the same kind of strings for radio values",True
802b4c085002f42d22b996646771b27d6193ab1f,2020-09-18 02:35:18,Tim van der Meij,"Merge pull request #12388 from jsg2021/patch-1

Refactor the container/viewer checks in the BaseViewer constructor",True
d37a44536952be88baaf092d044348ddfc2f1227,2020-09-18 01:59:10,Jonathan Grimes,"Refactor the container/viewer checks in the BaseViewer constructor
The previous checks prevented specifying a container/viewer that was in another
document/window.
Fixes #12385",False
d51e7e86ffbb82f2912d3687ab160c4448a68b6d,2020-09-16 22:17:25,Calixte Denizet,Use the same kind of strings for radio values,False
558d3870d3f00aba317cb44b3e1f6256283fab23,2020-09-16 02:49:17,Tim van der Meij,"Merge pull request #12369 from emilio/better-cancelation-follow-up

canvas: fix restore() with existing SMask groups and re-land #12363.",True
374aad77c4995d22451c421829f6f424ee55b0a5,2020-09-16 02:34:57,Tim van der Meij,"Merge pull request #12375 from Snuffleupagus/emptyDict-set

Ensure that the empty dictionary won't be accidentally modified, and slightly improve the ""SaveDocument"" handler in `src/core/worker.js`",True
e73354a32d69e07683e17606f79222a33c678aca,2020-09-16 00:00:14,Brendan Dahl,"Merge pull request #12377 from calixteman/fix_radio_saving

Set parent of radio annotation even if there is no 'V' field",True
16dd5403c7d751b48455266f8f2aea781e7a649a,2020-09-15 18:11:57,Calixte Denizet,Set parent of radio annotation even if there is no 'V' field,False
ed4e7cd8a495e092add73ef168ec7ed74ea4bdea,2020-09-15 13:27:40,Jonas Jenwald,"A couple of small improvements in the ""SaveDocument"" handler in `src/core/worker.js`

 - Check that the ""Info""-entry, in the XRef-trailer, is actually a dictionary before accessing it. This is similar to the `PDFDocument.documentInfo` method and follows the general principal of validating data carefully before accessing it, given how often PDF-software may create corrupt PDF files.

 - Slightly simplify the ""XFA""-lookup, since there's no point in trying to fetch something from the empty dictionary.",False
a531c98cd2bdc53e62011b9836f34aea41975c55,2020-09-15 12:59:00,Jonas Jenwald,"Ensure that the empty dictionary won't be accidentally modified

Currently there's nothing that prevents modification of the `Dict.empty` primitive, which obviously needs to be *truly* empty to prevent any future (hard to find) bugs.",False
b0c7a74a0c7403aba86087f8180d75c16ec58602,2020-09-15 03:39:31,Tim van der Meij,"Merge pull request #12361 from Snuffleupagus/_getSaveFieldResources

Ensure that all necessary /Font resources are included when saving a `WidgetAnnotation`-instance (issue 12294)",True
9d7b1d89ca8fb98a0f33010c6b7140ff271f9059,2020-09-15 02:46:17,Tim van der Meij,"Merge pull request #12370 from timvandermeij/annotation-reset

Implement resetting of created streams for annotations",True
3ecd984758cd02f29baeb78f92b072bcde5e153c,2020-09-15 02:38:50,Tim van der Meij,Implement resetting of created streams for annotations,False
1e11f871b6995f859a612c999d01474294cecab8,2020-09-14 23:55:04,Brendan Dahl,"Merge pull request #12374 from calixteman/escape_string

Replace \n and \r by \n and \r when saving a string",True
0c8de5aaf9a73119d5911d65716d39f347070f75,2020-09-14 21:04:39,Calixte Denizet,Replace \n and \r by \n and \r when saving a string,False
c992b8e460d16a10b813e15d0dfa46aeaf5a701d,2020-09-14 18:52:40,Jonas Jenwald,"Ensure that all necessary /Font resources are included when saving a `WidgetAnnotation`-instance (issue 12294)

This patch contains a possible approach for fixing issue 12294, which compared to other PRs is purposely limited to the affected `WidgetAnnotation` code.

As mentioned elsewhere, considering that we're (at least for now) trying to fix *one specific* case, I think that we should avoid modifying the `Dict` primitive[1] and/or avoid a solution that (indirectly) modifies an existing `Dict`-instance[2].
This patch simply fixes the issue at hand, since that seems easiest for now, and I'd suggest that we worry about a more general approach if/when that actually becomes necessary.

Hence the solution implemented here, for `WidgetAnnotation`, is to simply use a combination of the local *and* AcroForm /DR resources during OperatorList-parsing to ensure that things work correctly regardless of where a particular /Font resource is found.
For saving of form-data, on the other hand, we want to avoid increasing the file-size unnecessarily and need to be smarter than just merging all of the available resources. To achive this, a new `WidgetAnnotation._getSaveFieldResources` method will when necessary produce a combined resources `Dict` with only the minimum amount of data from the AcroForm /DR resources included.

---
[1] You want to avoid anything that could cause the general `Dict` implementation to become slower, or more complex, just for handling an edge-case in my opinion.

[2] If an existing `Dict`-instance is modified unexpectedly, that could very easily lead to problems elsewhere since e.g. `Dict`-instances created during parsing are not expected to be changed.",False
741ce4f7fc451473c45b7a42ccc4138c94234e14,2020-09-13 17:37:09,Tim van der Meij,"Merge pull request #12372 from Snuffleupagus/skip-FBF-makeref

Skip failing FBF tests, when running `makeref`, in Firefox as well",True
18767445a4ed158689a948ac6b60fc6f0c8078ac,2020-09-13 15:54:04,Jonas Jenwald,"Skip failing FBF tests, when running `makeref`, in Firefox as well

This will allow `makeref` to run ""successfully"" on the bots, since in the current state testing/makeref is just overall broken.
Obviously we still need to figure what's causing the intermittent failures, and fix them, but let's at least unblock things for now; see issue 12371.",False
bf8b1adf73812aa0918032573ba17fae0b47f9c1,2020-09-12 20:07:54,Emilio Cobos Álvarez,"canvas: Properly restore all the remaining items in stateStack in endDrawing.

We were correctly finishing the SMask group but not restoring all the extra
transformations applied in stateStack, so if somebody ends up drawing to the
same context after canceling mid-draw we'd get artifacts.

This re-lands #12363 and fixes Mozilla bug 1664178[1].

[1]: https://bugzilla.mozilla.org/show_bug.cgi?id=1664178",False
3a277f3ba558692415ee8b00ff6e8082dbe6f535,2020-09-12 20:07:54,Emilio Cobos Álvarez,"canvas: restore() should reflect that smask groups are finished when stateStack is empty.

This fixes the issue that caused #12363 to get reverted, see #12367.
When we end the SMask group and stateStack.length is zero, nothing updates
this.current to reflect it.",False
b058266a7a1db15e112f1cd8de9a3636ed2b8d7f,2020-09-12 20:02:24,Tim van der Meij,"Merge pull request #12368 from Snuffleupagus/revert-12363-better-cancelation

Revert ""canvas: Properly restore all the remaining items in stateStack in endDrawing""",True
f43d1b316ba4708778f2f3f4137f5459c92fd505,2020-09-12 19:45:33,Jonas Jenwald,"Revert ""canvas: Properly restore all the remaining items in stateStack in endDrawing""",False
cdac6f4e688c5fbee3e521912a306ce73ae23865,2020-09-12 18:33:34,Tim van der Meij,"Merge pull request #12363 from emilio/better-cancelation

canvas: Properly restore all the remaining items in stateStack in endDrawing",True
ef1e9a1a3e0704388c01ca583fd66d0f1b5121c5,2020-09-12 17:20:56,Emilio Cobos Álvarez,"canvas: Properly restore all the remaining items in stateStack in endDrawing.

We were correctly finishing the SMask group but not restoring all the extra
transformations applied in stateStack, so if somebody ends up drawing to the
same context after canceling mid-draw we'd get artifacts.

This fixes Mozilla bug 1664178[1].

[1]: https://bugzilla.mozilla.org/show_bug.cgi?id=1664178",False
dfebe7b90792a10c548309505da5f96617dd6bdf,2020-09-12 01:48:30,Tim van der Meij,"Merge pull request #12365 from Snuffleupagus/forbid-DecodeStream.length

Ensure that the `length` property won't be *accidentally* accessed on a `DecodeStream`-instance",True
008eed0efebe32bfca20b95b41b152d232af5e9e,2020-09-11 22:25:12,Brendan Dahl,"Merge pull request #12364 from calixteman/really_fix_name_issue

Dict keys need to be escaped too when saving",True
a11b7341a1f2b32d05ba2794c738ed65043d1a3b,2020-09-11 16:55:40,Jonas Jenwald,"Ensure that the `length` property won't be *accidentally* accessed on a `DecodeStream`-instance

For these streams, compared to `Stream` and `ChunkedStream`, there's no well defined concept of length and consequently no `length` getter.[1] However, attempting to access the non-existent `length` won't currently error, but just return `undefined`, which could thus easily lead to bugs elsewhere in the code-base.

---
[1] However, note that *all* stream implementations have an `isEmpty` getter which can be used instead.",False
fc154590e8d6d307fc899202c88ae6a8142845ba,2020-09-11 15:55:05,Calixte Denizet,Dict keys need to be escaped too when saving,False
aef3fedc295932641d4a35ca767056fbc929fe07,2020-09-11 03:48:59,Tim van der Meij,"Merge pull request #12362 from Snuffleupagus/loadingBar-width

Let the loadingBar have the same width as the viewerContainer",True
8cfcd7a488b01d47411485c2ecac6690d1da6bc1,2020-09-11 02:41:35,Tim van der Meij,"Merge pull request #12360 from calixteman/12359

Reset cursor position when focus is out of text field",True
17a507016aa036385aa5db949c6a96fca3ea56b8,2020-09-10 20:46:24,Jonas Jenwald,"Let the loadingBar have the same width as the viewerContainer

For years the loadingBar and sidebarContainer has had a slightly annoying and unfortunate dependency, since the loadingBar width follows the main toolbar width[1].
To prevent the loadingBar from obscuring part of the sidebarContainer, especially the buttons, the sidebarContainer is thus moved down when the loadingBar is visible. This has always annoyed me[2], since it means that the buttons in the sidebar may thus move vertically which seems bad from a UX perspective.

Now that CSS variables are available in all supported browsers[3] however, fixing the loadingBar/sidebarContainer overlap issues are finally easy. The solution is simply to let the sidebarContainer, when visible, control the loadingBar left position (right in RTL locales) in the same way that the viewerContainer is handled. Hence the sidebarContainer can now have a *consistent* vertical postition, without the loadingBar overlapping it.

---
[1] Obviously the right position (left in RTL locales) of the loadingBar is, potentially, reduced to account for a scrollbar.

[2] I've tried to fix this a few times, but it always seemed like more trouble than it's worth.

[3] https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties#Browser_compatibility",False
865de9ab90e45ca1011989c1004631f39bd3a3b8,2020-09-10 19:50:30,Brendan Dahl,"Merge pull request #12357 from calixteman/escape_name

PDF names need to be escaped when saving",True
dc4eb71ff152460afdd8762043226443f005f503,2020-09-10 19:38:13,Calixte Denizet,PDF names need to be escaped when saving,False
44b24fcc2936e1d75c249aa161970ab8fa83e4d2,2020-09-10 14:07:13,Calixte Denizet,Reset cursor position when focus is out of text field,False
f9d56320f5b82853afb5a1d379d4981b15214251,2020-09-10 03:10:53,Tim van der Meij,"Merge pull request #12349 from calixteman/followup_12344

Follow-up of pr #12344",True
eea97eabc83c905b431ebca7108383e1b2ecb349,2020-09-10 02:24:35,Tim van der Meij,"Merge pull request #12356 from calixteman/no_future

Set the modification date to the current day when saving",True
e8822e19127c4d3150351a4ad86a2fc03e6cb455,2020-09-10 02:11:29,Tim van der Meij,"Merge pull request #12352 from Snuffleupagus/sidebar-resizer-CSS-vars

Remove CSS variables feature-testing from `PDFSidebarResizer`",True
82dede0458fdaf80961c328ee5ea1a5fef2f4aca,2020-09-10 02:02:36,Tim van der Meij,"Merge pull request #12354 from Snuffleupagus/BaseViewer-container-position-absolute

Ensure that the `container` div, on `BaseViewer`-instances, is absolutely positioned",True
01c1d87171cd7d5a72edaedeb86360242d211ddb,2020-09-10 01:56:08,Jonas Jenwald,"Remove CSS variables feature-testing from `PDFSidebarResizer`

CSS variables are now supported in all reasonably modern browsers, according to:
 - https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties#Browser_compatibility
 - https://caniuse.com/css-variables",False
908e7ae5e409db4745e2efbf7b8d79457be0831e,2020-09-09 22:36:39,Calixte Denizet,Set the modification date to the current day when saving,False
c27dcf2b0331a3efe3da3a957e0056d329342190,2020-09-09 18:54:47,Jonas Jenwald,"Ensure that the `container` div, on `BaseViewer`-instances, is absolutely positioned

The `getVisibleElements` helper function currently requires the viewerContainer to be absolutely positioned; possibly fixing this is tracked in issue 11626.

Without `position: absolute;` set, in the CSS, there's a number of things that won't work correctly such as e.g.
 - Determining which pages are currently visible, thus forcing all of them to render on load and increasing resource usage significantly; note https://github.com/mozilla/pdf.js/wiki/Frequently-Asked-Questions#allthepages

 - Scrolling pages into view, by using the `BaseViewer.currentPageNumber` setter or similar.

Based on the number of opened issues over the years, the fact that `position: absolute;` is required has shown to be something that users can very easily overlook unless they follow e.g. the `simpleviewer` example to the letter.
Hence, to improve things until such a time that issue 11626 is fixed, we'll now refuse to initialize a `BaseViewer` instance unless the `container` has the required CSS set. (Forcibly setting `position: absolute;` on the viewerContainer element is bound to cause significantly more issues/confusion, hence the current approach of throwing an Error.)",False
2594f0c7380332a4e12ceee6a4c32b86c838904f,2020-09-09 16:56:38,Jonas Jenwald,"Revert ""[PDFSidebarResizer] Refactor the clamping in `_updateWidth`""

This reverts commit 9e4552d7920fcba13b3d74e1e180fc49180f4436 for causing the sidebar to become too narrow when the entire viewer is resized.

**Steps to reproduce:**
 1. Load the viewer.
 2. Open the sidebar.
 3. Resize the sidebar, making it wider.
 4. Resize the entire viewer, i.e. the browser window, making it *narrower* than 400 pixels.

**Expected result:**
 The sidebar width is clamped at 200 pixels.

**Actual result:**
 The sidebar becomes too narrow.

The cause of this bug is, in hindsight, quite obvious since the `clamp` helper function implicitly assumes that the `min`/`max` arguments are correctly sorted. At viewer widths *below* 400 pixels, that assumption is broken which explains the bug.",False
64a6efd95ead4cd5d4efa2202bac1cde7fbb72e7,2020-09-09 15:16:02,Calixte Denizet,Follow-up of pr #12344,False
e51e9d1f33bd6e404bfa795799f1cc035537091e,2020-09-09 04:14:04,Brendan Dahl,"Merge pull request #12345 from calixteman/save_btn

Don't try to save something for a button which is neither a checkbox nor a radio",True
68b99c59eee01af835c94d16e4ba1baec70e5f08,2020-09-09 03:43:52,calixteman,"Save form data in XFA datasets when pdf is a mix of acroforms and xfa  (#12344)

* Move display/xml_parser.js in shared to use it in worker

* Save form data in XFA datasets when pdf is a mix of acroforms and xfa

Co-authored-by: Brendan Dahl <brendan.dahl@gmail.com>",False
622e2fbd3a230f2820a70eb26b04d7871c23c27a,2020-09-09 02:41:31,Tim van der Meij,"Merge pull request #12343 from Snuffleupagus/rm-old-Opera

Remove some code/comments relevant for old (pre-Chromium) versions of Opera",True
7e5026dfc5131b70fceb9aeccadbdbd04daa0244,2020-09-09 00:17:46,Calixte Denizet,Don't try to save something for a button which is neither a checkbox nor a radio,False
7b1418368d63c28b231936cfd17727fdcaf64364,2020-09-08 16:24:51,Jonas Jenwald,Remove some code/comments relevant for old (pre-Chromium) versions of Opera,False
ed47f77527b0dd1647c7cd05cd59e816a176df9e,2020-09-08 02:07:07,Tim van der Meij,"Merge pull request #12339 from Snuffleupagus/bug-1663390

Support broken /FitH destinations that are missing the ""top"" value (bug 1663390)",True
f78b348cff5108229a544d686f5dbc0c149f9e09,2020-09-07 13:58:55,Jonas Jenwald,"Support broken /FitH destinations that are missing the ""top"" value (bug 1663390)

See https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#G11.2095870",False
20c891542bb3fa36f1595f92c13a5edb049063d2,2020-09-07 01:55:36,Tim van der Meij,"Merge pull request #12269 from calixteman/highlight

Add support for missing appearances for hightlights, strikeout, squiggly and underline annotations.",True
d4881814239fbad4f966b4f0983c5a9945651992,2020-09-06 22:48:19,Tim van der Meij,"Merge pull request #12336 from Snuffleupagus/rm-DOM-polyfills

Remove, manually implemented, DOM polyfills only necessary for IE 11 support",True
babeae9448f3d1e032f00027f3ca50f91ca2aac4,2020-09-06 21:54:17,Jonas Jenwald,"Remove, manually implemented, DOM polyfills only necessary for IE 11 support

Please refer to the following compatibility information:
 - https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove#Browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/add#Browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/remove#Browser_compatibility
 - https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/toggle#Browser_compatibility

Finally, for the `pushState`/`replaceState` polyfills, please refer to PRs 10461 and 11318 for additional details.",False
65ecd981fef3787335830b6869f6fb6d5b15a230,2020-09-06 19:10:15,Calixte Denizet,"Add support for missing appearances for hightlights, strikeout, squiggly and underline annotations.",False
50958c46f76f927b83bacee705803b33a1018c0a,2020-09-06 17:49:55,Tim van der Meij,"Merge pull request #12331 from Snuffleupagus/Promise-polyfill

[api-minor] Only support browsers/environments that have *basic* support for `Promise` natively",True
83e1bbea6e23db8744420f70d8fb943962c867dd,2020-09-06 17:45:49,Tim van der Meij,"Merge pull request #12328 from Snuffleupagus/rm-web-IE

Remove code-paths only relevant for IE 11/Edge (non-Chromium based) from the `web/` folder",True
b5ba3a3e008ff3ab1ab8c87a345b88f063dd02ea,2020-09-06 17:31:44,Tim van der Meij,"Merge pull request #12329 from Snuffleupagus/css-variables-treeitem

Rename the `--outline-...` CSS variables to `--treeitem-...` instead (PR 11077 follow-up)",True
26800aaa9595bc72b968064461688b3888e7de54,2020-09-06 17:22:32,Tim van der Meij,"Merge pull request #12330 from Snuffleupagus/update-packages

Update packages and translations",True
449c7763d54da2be33b7935409edd394144e8e84,2020-09-06 17:15:56,Jonas Jenwald,"[api-minor] Only support browsers/environments that have *basic* support for `Promise` natively

Based on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#Browser_compatibility and https://caniuse.com/#feat=promises, all even remotely modern browsers already support *basic* `Promise` functionality natively.

The only reason for keeping the `Promise` polyfill (at all) is to be able to support recent additions to the specification, such as e.g. `finally` and `allSettled`.
Note that this patch will, on its own, remove support for IE 11/Edge (non-Chromium based) in both the general PDF.js library and the default viewer.",False
6c8f1f7d6ffd560e2aefa2360cb825902341a9d9,2020-09-06 15:53:59,Jonas Jenwald,"Run `gulp lint --fix`, to account for changes in Prettier version `2.1.x`",False
60c9556b66e27d38c0cdabd9452fc13f50b6ca7d,2020-09-06 15:53:09,Jonas Jenwald,"Restore the ""gets expected character types"" test, in `test/unit/pdf_find_utils_spec.js`, to its intended formatting

This was ""broken"" by the introduction of Prettier, however a recent update (version `2.1.x`) will now correctly ignore these escape sequences.",False
54eeaba0141896f6c605dd3b35ef3149266a1e50,2020-09-06 15:21:34,Jonas Jenwald,Update l10n files,False
0aef40f89766da9e59df7990a5f3fd03fd2ad278,2020-09-06 15:19:49,Jonas Jenwald,Update `npm` packages,False
cdeeec966dc9a5e9f72484f0bf7575ca0342bb61,2020-09-06 02:36:44,Jonas Jenwald,"Rename the `--outline-...` CSS variables to `--treeitem-...` instead (PR 11077 follow-up)

Given that the outlineView/attachmentsView/layersView all share a common base-class and CSS rules, see PRs 12169 and 12170, the names of the CSS variables in question feels slightly strange now.",False
87b002c52f6cabf075bc5cc74d40f21e99b7e839,2020-09-05 20:48:15,Jonas Jenwald,"Remove code-paths only relevant for IE 11/Edge (non-Chromium based) from the `web/` folder

This patch purposely starts small, by removing IE-specific code from various JS/CSS files in the `web/` folder.

There's obviously lots of potential for additional clean-up, especially the removal of no longer necessary polyfills in `src/shared/compatibility.js`, however that will require some care considering that certain polyfills may also be necessary for e.g. Node.js or the Chromium-extension as well.
Generally speaking, once we start removing polyfills it's probably a good idea to consult the compatibility information on https://developer.mozilla.org/ and also https://caniuse.com/ first. (Deciding on the lowest supported Chromium version, for the extension, would also seem like a good idea.)",False
4caa14b4dc458bcc98aa5f818007c71bf7173e2d,2020-09-05 01:36:54,Tim van der Meij,"Merge pull request #12326 from Snuffleupagus/bug-1661259

Revert ""Download, rather than opening, PDF attachments in Firefox (bug 1661259, PR 12286 follow-up)""",True
a52e229ca67c645a7cb8a507981da214b0a7d31a,2020-09-04 15:37:34,Jonas Jenwald,"Revert ""Download, rather than opening, PDF attachments in Firefox (bug 1661259, PR 12286 follow-up)""

This reverts commit 2a0de0b66b41c345cd357cbb828b3ca6f49fd395.

I can no longer reproduce these issues locally, and if ad blockers are still interfering with this functionality we really ought to pursue a mozilla-central solution to the problem instead. (Also, I'm no longer getting an ""Open with Firefox""-option in the ""Open with""-dialog making the PDF attachments experience worse for all users.)",False
05fede43f7786b88dea41cf7dd2669cd0942e314,2020-09-04 03:20:34,Tim van der Meij,"Merge pull request #12323 from timvandermeij/bump

Bump versions in `pdfjs.config`",True
b30a34c98dab39a223deda390c7a35b079252715,2020-09-04 03:13:50,Tim van der Meij,Bump versions in `pdfjs.config`,False
3be9c65f0492a077b3fe287407709f583b3daf0b,2020-09-04 01:41:23,Tim van der Meij,"Merge pull request #12321 from Snuffleupagus/BaseViewer-validate-viewer-option

Ensure that the `viewer` property, on `BaseViewer`-instances, is a valid div-element (issue 12320)",True
89f6bb0fc6b76009bff922ac5d5c3c4ddbc21ae2,2020-09-03 18:36:36,Jonas Jenwald,"Ensure that the `viewer` property, on `BaseViewer`-instances, is a valid div-element (issue 12320)

This should help prevent future issues, caused by the user omitting the `viewer` option and/or providing an incorrect `container` option, when initializing a `BaseViewer`-instance.",False
84da13b4871f937bdd6d65fe561e301680f28dbb,2020-09-03 02:43:36,Brendan Dahl,"Merge pull request #12315 from emilio/more-resilient-print-callback

print: Make the firefox printing code able to fail and be re-invoked.",True
f4f4ec30f46d7bc7fc586056aaf7b532d1bb3d17,2020-09-03 02:26:21,Emilio Cobos Álvarez,"print: Make the firefox printing code able to fail and be re-invoked.

This fixes a set of issues described in Mozilla bug 1662426[1].

In particular, once the print callback fails once (because the printing
operation has been canceled in Gecko / replaced by a newer one, for example) it
can't be re-invoked.

This patch fixes it by properly cancelling the render task if it throws, or if
the print callback is called again while ongoing.

[1]: https://bugzilla.mozilla.org/show_bug.cgi?id=1662426",False
ed9ea8f9b21f6d5fae7ffd0389782d3a3c81c6b9,2020-09-02 01:33:03,Tim van der Meij,"Merge pull request #12310 from Snuffleupagus/issue-12308

Add support for /Print and /SaveAs named actions in the viewer (issue 12308)",True
695523712c7e8c5aef62fe0e6165f988b3a11f4e,2020-09-01 12:54:38,Jonas Jenwald,"Add support for /Print and /SaveAs named actions in the viewer (issue 12308)

All of the core/display functionality needed to support this already exists, we simply need to handle these named actions in the viewer and the buttons will ""just"" work.

Unfortunately there's not really any good way of testing this, but given the size and scope of the patch that's hopefully OK.",False
60ffac04808da1e427b395f783c028d84d5b8ecb,2020-09-01 02:59:44,Tim van der Meij,"Merge pull request #12296 from Snuffleupagus/mergeSubDicts

Add support, in `Dict.merge`, for merging of ""sub""-dictionaries",True
c48fe10f758f6fbd8fe93f17fc121137922e3c5e,2020-09-01 02:12:18,Tim van der Meij,"Merge pull request #12301 from Snuffleupagus/stylelint

Add (basic) support for Stylelint, to allow linting of CSS files",True
784a420027ff57b7e526d52d707d2d49db600efe,2020-08-31 02:48:32,Jonas Jenwald,"Add support, in `Dict.merge`, for merging of ""sub""-dictionaries

This allows for merging of dictionaries one level deeper than previously. This could be useful e.g. for /Resources dictionaries, where you want to e.g. merge their respective /Font dictionaries (and other) together rather than picking just the first one.",False
8aa2718d225ad701a5b8a2788b42d221f1e4327d,2020-08-31 01:19:08,Jonas Jenwald,"Re-format all `web/*.css` files using Stylelint/Prettier

This was done automatically, using `gulp lint --fix`.",False
7b5a540a5256900c769941965a61be9750bb3eb9,2020-08-31 01:18:35,Jonas Jenwald,"Add (basic) support for Stylelint, to allow linting of CSS files

This is *similar* to the existing linting for JavaScript files, but covers CSS files instead.
While there's a lot of rules that could potentially be used, the main advantage of using Stylelint is that it has Prettier integration which means that we can automatically enforce a *consistent* style for our CSS files as well.

As a proof of concept, this patch is purposely limited to:
 - Adding a simple rule, here `block-no-empty` is chosen; see https://stylelint.io/user-guide/rules/block-no-empty
 - Adding Prettier integration, to unify the style of our CSS files.

Please find additional information at https://stylelint.io/",False
aa27e7fb8d57893fac3810efc56c5d65ce6bd7ec,2020-08-31 00:44:24,Tim van der Meij,"Merge pull request #12170 from Snuffleupagus/optional-content-viewer-2

[api-minor] Add support for toggling of Optional Content in the viewer (issue 12096)",True
66aabe3ec73cee2880b07bf6dd7e5a38fc4518db,2020-08-30 19:58:40,Jonas Jenwald,"[api-minor] Add support for toggling of Optional Content in the viewer (issue 12096)

*Besides, obviously, adding viewer support:* This patch attempts to improve the general API for Optional Content Groups slightly, by adding a couple of new methods for interacting with the (more complex) data structures of `OptionalContentConfig`-instances. (Thus allowing us to mark some of the data as ""private"", given that it probably shouldn't be manipulated directly.)

By utilizing not just the ""raw"" Optional Content Groups, but the data from the `/Order` array when available, we can thus display the Layers in a proper tree-structure with collapsible headings for PDF documents that utilizes that feature.

Note that it's possible to reset all Optional Content Groups to their default visibility state, simply by double-clicking on the Layers-button in the sidebar.
(Currently that's indicated in the Layers-button tooltip, which is obviously easy to overlook, however it's probably the best we can do for now without adding more buttons, or even a dropdown-toolbar, to the sidebar.)

Also, the current Layers-button icons are a little rough around the edges, quite literally, but given that the viewer will soon have its UI modernized anyway they hopefully suffice in the meantime.

To give users *full* control of the visibility of the various Optional Content Groups, even those which according to the `/Order` array should not (by default) be toggleable in the UI, this patch will place those under a *custom* heading which:
 - Is collapsed by default, and placed at the bottom of the Layers-tree, to be a bit less obtrusive.
 - Uses a slightly different formatting, compared to the ""regular"" headings.
 - Is localizable.

Finally, note that the thumbnails are *purposely* always rendered with all Optional Content Groups at their default visibility state, since that seems the most useful and it's also consistent with other viewers.
To ensure that this works as intended, we'll thus disable the `PDFThumbnailView.setImage` functionality when the Optional Content Groups have been changed in the viewer. (This obviously means that we'll re-render thumbnails instead of using the rendered pages. However, this situation ought to be rare enough for this to not really be a problem.)",False
2393443e733df6d7614504b72562f8a0e3857ff3,2020-08-30 19:58:40,Jonas Jenwald,"Include the `/Order` array, if available, when parsing the Optional Content configuration

The `/Order` array is used to improve the display of Optional Content groups in PDF viewers, and it allows a PDF document to e.g. specify that Optional Content groups should be displayed as a (collapsable) tree-structure rather than as just a list.

Note that not all available Optional Content groups must be present in the `/Order` array, and PDF viewers will often (by default) hide those toggles in the UI.
To allow us to improve the UX around toggling of Optional Content groups, in the default viewer, these hidden-by-default groups are thus appended to the parsed `/Order` array under a *custom* nesting level (with `name == null`).

Finally, the patch also slightly tweaks an `OptionalContentConfig` related JSDoc-comment in the API.",False
9ba5f9fa3475bf920c6a647fe741830ce55ab4ff,2020-08-30 19:58:40,Jonas Jenwald,"Create an `OptionalContentConfig`-instance once for each task, when running the reference test-suite

This avoids the need to make a round-trip to the worker-thread for *every* single page that's being tested, which should thus be more efficient.",False
ef5a5c142af6c8ae5eb81e1a1a37f19ef43e6c86,2020-08-30 19:44:01,Tim van der Meij,"Merge pull request #12299 from Snuffleupagus/progressBar-indeterminate

Update the indeterminate progressBar to the new design (PR 11077 follow-up)",True
d1cc382383d7fa5e2f843622b0fe79263ca94790,2020-08-30 19:37:43,Tim van der Meij,"Merge pull request #12300 from Snuffleupagus/findbar-hover

Fix various :hover effects in the findbar (PR 11077 follow-up)",True
06b53d770a4e0ff64427c50d21fba60477901169,2020-08-30 19:31:24,Tim van der Meij,"Merge pull request #12259 from brendandahl/cmap-fix

Fix handling of symbolic fonts and unicode cmaps.",True
d383193913341f5cb905dcc72fcc47b6fbbaf256,2020-08-30 19:23:22,Tim van der Meij,"Merge pull request #12298 from Snuffleupagus/doorHanger-positions

Tweak the vertical positions of the `findbar` and `secondaryToolbar` (PR 11077 follow-up)",True
931f2cff1e5a9a7cfbb5b8651d0b207e649a9bf8,2020-08-29 19:14:51,Jonas Jenwald,"Fix various :hover effects in the findbar (PR 11077 follow-up)

This patch:
 - Removes the :hover effect from the `findMsg` element, since it's a simple span and clicking it *obviously* does nothing.
 - Given the way that the checkboxes are visually hidden, with `opacity: 0;` and absolute positioning, they are unfortunately still focusable (fixed by adding `pointer-events: none;`). To reproduce this, in `master`: Place the mouse pointer over the upper left-hand corner of the ""Highlight all""-option, and notice that the :hover effect vanishes and clicking toggles the ""Match case""-option instead.",False
55e1dda52ab7bcc994e9c046833832e38f0e674c,2020-08-28 19:48:41,Jonas Jenwald,"Update the indeterminate progressBar to the new design (PR 11077 follow-up)

This special progressBar is only used in the (fortunately) rare case when a server doesn't provide a valid `Content-Length` header. Since this progressBar isn't normally seen, when testing the default viewer, it's certainly very easy to see why these CSS rules were missed during review.

Furthermore, this patch also makes a couple of *small* progressBar CSS tweaks not related to the colours.",False
16f5080bef459e64eddd46cf8b3e89580755eb37,2020-08-28 16:34:10,Jonas Jenwald,"Tweak the vertical positions of the `findbar` and `secondaryToolbar` (PR 11077 follow-up)

With the changes in PR 11077, these panels are no longer aligned exactly with the *center* of the corresponding toolbar buttons. This is especially noticeable for the `findbar` at narrow viewer width.",False
45e8a31cc0cf0c4a5abe60acfa68658a0b79f225,2020-08-28 03:03:11,Brendan Dahl,"Fix handling of symbolic fonts and unicode cmaps.

In issue 12120, the font has a 1,0 cmap and is marked symbolic which
according to the spec means we should directly use the cmap instead of
the extra steps that are defined in 9.6.6.4.

However, just fixing that caused bug 1057544 to break. The font in bug
1057544 has a 0,1 cmap (Unicode 1.1) which we were not using, but is
easy to support. We're also easily able to support some of the other
unicode cmaps, so I added those as well.

There was also a second issue with bug 1057544, the cmap doesn't have
a mapping for the ""quoteright"" glyph, but it is defined in the post
table. To handle this, I've moved post table as a  fallback for any
font that has an encoding.",False
eb3654e278c010f3b83dbfe4d69fcc49d41c97b5,2020-08-28 02:34:57,Tim van der Meij,"Merge pull request #12287 from calixteman/bug_1661226

Bug 1661226 - Push button are not rendered with renderInteractiveForms enabled",True
6db8907d82b7b08aef83f695a9ee5aad89d455ce,2020-08-28 01:43:19,Tim van der Meij,"Merge pull request #12293 from Snuffleupagus/bug-1661259

Download, rather than opening, PDF attachments in Firefox (bug 1661259, PR 12286 follow-up)",True
2a0de0b66b41c345cd357cbb828b3ca6f49fd395,2020-08-27 20:00:15,Jonas Jenwald,"Download, rather than opening, PDF attachments in Firefox (bug 1661259, PR 12286 follow-up)

Unfortunately the work-around implemented in PR 12286 didn't actually work in all cases, please refer to the previous commit messages.
To prevent opening of PDF attachments from being completely broken for some users, we'll simply force-download them for now in MOZCENTRAL-builds to unbreak things. (Given that the ""Open with"" dialog now features a ""Open with Firefox""-option, this is less bad than it previously would've been.)",False
a23079c2dd0ea039ee9b2d80de8ab52ca204821d,2020-08-27 20:00:15,Jonas Jenwald,"Ensure that `PDFAttachmentViewer._bindLink` assigns the correct contentType when downloading PDF attachments

This should provide better filetype detection when downloading PDF attachments in the viewer.

Also, to avoid creating the ""is PDF file"" regular expression more than once it's extracted into a global constant instead.",False
de932573ddc36ae5525f195f5425941fc4dfd087,2020-08-27 20:00:05,Jonas Jenwald,"Revert ""Use a link, rather than `window.open`, when opening PDF attachments in Firefox (bug 1661259)""

This reverts commit 1e5d4b6a8025477c3b15b3a320b1cc41ccd7c2bc, since it unfortunately doesn't work in all situations.

Please note that I did *successfully* test the patch in a local Firefox build, obviously with an ad blocker installed.
However, I've now tested the *latest* Nightly-build with my default profile, and unfortunately I can still reproduce the bug there!?",False
ba94f04ba355518ea95c99454c704c5a2de51f89,2020-08-27 14:15:14,Calixte Denizet,Bug 1661226 - Push button are not rendered with renderInteractiveForms enabled,False
a6f66891cce39df90647d6ef6617e448b63dedfc,2020-08-27 01:55:56,Tim van der Meij,"Merge pull request #12286 from Snuffleupagus/bug-1661259

Use a link, rather than `window.open`, when opening PDF attachments in Firefox (bug 1661259)",True
3e437ce63c04b603ca6fd21d3643383cf443a46f,2020-08-27 01:48:19,Tim van der Meij,"Merge pull request #12285 from Snuffleupagus/sourceEventType-optional

Ensure that the `sourceEventType` parameter is actually optional in `PDFViewerApplication.{download, save}` (PR 12248 follow-up)",True
1e5d4b6a8025477c3b15b3a320b1cc41ccd7c2bc,2020-08-26 22:32:51,Jonas Jenwald,"Use a link, rather than `window.open`, when opening PDF attachments in Firefox (bug 1661259)

Unfortunately e.g. ad blockers can interfere with `window.open` calls, thus preventing PDF attachments from being opened/viewed. For the MOZCENTRAL-build, we can work-around this problem by using a (hidden) link instead.",False
77a1e531c23bd325b43868e1499d95b4abc6ef40,2020-08-26 15:15:25,Jonas Jenwald,"Ensure that the `sourceEventType` parameter is actually optional in `PDFViewerApplication.{download, save}` (PR 12248 follow-up)

Without these changes, clicking on the ""Open With Different Viewer""-button on the Firefox fallback bar won't actually do anything and the following is printed in the web-console:
```
Uncaught TypeError: (destructured parameter) is undefined
    download resource://pdf.js/web/viewer.js:956
    response resource://pdf.js/web/viewer.js:1054
    listener resource://pdf.js/web/viewer.js:11891
viewer.js:956:1
```

Furthermore, this patch also fixes `PDFViewerApplication.fallback` to pass in an explicit `sourceEventType` when triggering downloading. While this, on its own, would obviously have been sufficient to fix the bug described above, it seems wrong to outright break backwards compatibility of any older `PDFViewerApplication.download` calls.",False
4ffdbe6ec9d6d638d9fb1c31d3c8faa3fbaa6dce,2020-08-26 03:48:00,Tim van der Meij,"Merge pull request #12271 from timvandermeij/acroform-type-detection

Improve AcroForm/XFA form type detection",True
0f229d537f96ed2e6a945959a5e7b4a2865d6c16,2020-08-26 02:58:55,Tim van der Meij,"Inline the `setup` method in the `parse` method in `src/core/document.js`

Now that the `parse` method is simplified we can inline the `setup`
method in the `parse` method since it's only two lines of code. This
avoids some indirection.",False
280207c7402342ad7a1334dc40a077967f1080ef,2020-08-26 02:58:55,Tim van der Meij,"Redo the form type detection logic and include unit tests

Good form type detection is important to get reliable telemetry and to
only show the fallback bar if a form cannot be filled out by the user.

PDF.js only supports AcroForm data, so XFA data is explicitly unsupported
(tracked in issue #2373). However, the previous form type detection
couldn't separate AcroForm and XFA well enough, causing form type
telemetry to be incorrect sometimes and the fallback bar to be shown for
forms that could in fact be filled out by the user.

The solution in this commit is found by studying the specification and
the form documents that are available to us. In a nutshell the rules are:

- There is XFA data if the `XFA` entry is a non-empty array or stream.
- There is AcroForm data if the `Fields` entry is a non-empty array and
  it doesn't consist of only document signatures.

The document signatures part was not handled in the old code, causing a
document with only XFA data to also be marked as having AcroForm data.
Moreover, the old code didn't check all the data types.

Now that AcroForm and XFA can be distinguished, the viewer is configured
to only show the fallback bar for documents that only have XFA data. If
a document also has AcroForm data, the viewer can use that to render the
form. We have not found documents where the XFA data was necessary in
that case.

Finally, we include unit tests to ensure that all cases are covered and
move the form type detection out of the `parse` function so that it's
only executed if the document information is actually requested
(potentially making initial parsing a tiny bit faster).",False
f0bf62ff54199745d902546cbb73ca1922e7daf1,2020-08-26 02:58:55,Tim van der Meij,"Mark the `catDict` member as private in the `Catalog` class

Not only is `catDict` never accessed anymore outside of this file, it
should also never happen since it's internal to the catalog. If data
from it is needed elsewhere, the catalog should provide a getter for it
that can do basic data integrity checks and abstract away any
unnecessary details.",False
f20f0bcc78c43dac8b100192419b6b3111bd5696,2020-08-26 02:58:55,Tim van der Meij,"Move the AcroForm logic from the document to the catalog

The `AcroForm` entry is part of the catalog, not of the document, so its
logic should be placed there instead. The document should look in the
catalog to fetch it, and not have knowledge of `catDict`, which is a
member internal to the catalog.

Moreover, make the AcroForm member private on the document instance. It's
only used internally and was also never intended to be public. For users
it's exposed by the `getMetadata` API endpoint as `IsAcroFormPresent`.
Only a boolean is exposed, so we now also only store the boolean on the
document instance.

Finally, the annotation code needs access to the full AcroForm
dictionary, so it's updated to fetch the data from the catalog instead
of the document that now only holds the boolean.",False
b41a2f4d5a7e6c1acdac49c92869a12be18dd45c,2020-08-26 02:58:55,Tim van der Meij,"Move the collection logic from the document to the catalog

The `Collection` entry is part of the catalog, not of the document, so
its logic should be placed there instead. The document should look in the
catalog to fetch it, and not have knowledge of `catDict`, which is a
member internal to the catalog.

Moreover, remove the collection member from the document instance. It's
only used internally and was also never intended to be public. For users
it's exposed by the `getMetadata` API endpoint as `IsCollectionPresent`.
Moving this out of the `parse` function makes sure that the getter is
only executed if the document information is actually requested
(potentially making initial parsing a tiny bit faster).",False
935d95b4629ce70363d6a4cf67951ae77fae7905,2020-08-26 02:58:55,Tim van der Meij,"Move the version logic from the document to the catalog

The `Version` entry is part of the catalog, not of the document, so its
logic should be placed there instead. The document should look in the
catalog to fetch it, and not have knowledge of `catDict`, which is a
member internal to the catalog.

Moreover, make the version member private on the document instance. It's
only used internally and was also never intended to be public. For users
it's exposed by the `getMetadata` API endpoint as `PDFFormatVersion`.

Finally, clarify how the version from the header and the version from
the catalog are treated using a comment.",False
525cc733d244eb70054c27aa005e160f9ea23d5e,2020-08-26 01:48:08,Tim van der Meij,"Merge pull request #12276 from Snuffleupagus/worker-ensure

Access the `XRef`/`Catalog` data correctly in the ""GetStats""/""GetPageIndex"" handlers in `src/core/worker.js`",True
bd16c363cec319e60d1dc5cab0033d1fd0f7e882,2020-08-25 15:44:14,Jonas Jenwald,"Access the `Catalog` data correctly in the ""GetPageIndex"" handler in `src/core/worker.js`

Even though the code obviously works as-is, given that we have unit-tests for it, it still feels incorrect to just *assume* that the `Catalog`-instance has all of its properties immediately available. Especially when (almost) all of the other handlers, in `src/core/worker.js`, protect their data accesses with appropriate `pdfManager.ensure` calls.",False
2e6e2c3b41c19433f2c8a8b841375524fa1ae96a,2020-08-25 15:44:11,Jonas Jenwald,"Access the `XRef` data correctly in the ""GetStats"" handler in `src/core/worker.js`

Even though the code obviously works as-is, given that we have unit-tests for it, it still feels incorrect to just *assume* that the `XRef`-instance has all of its properties immediately available. Especially when (almost) all of the other handlers, in `src/core/worker.js`, protect their data accesses with appropriate `pdfManager.ensure` calls.",False
34cec29288212a6ca5bb9d703d6c5102c47e635d,2020-08-25 01:25:33,Tim van der Meij,"Merge pull request #12270 from janpe2/type1-accents

Accent positioning in Type1 `seac` glyphs",True
0f4fc12c5e02610fdba7fd03c85efac2465cd03e,2020-08-24 00:37:08,Tim van der Meij,"Merge pull request #12268 from Snuffleupagus/numPages-padding

Reduce the leading padding for the `numPages` span (PR 11077 follow-up)",True
e7febbf0f7f49f77129fc137645c4945524db25f,2020-08-23 23:31:25,Jani Pehkonen,"Accent positioning in Type1 `seac` glyphs

In `display/canvas.js` the accent offsets must be multiplied by `fontSize` to make the offsets large enough. Another problem is in `core/type1_parser.js` when the Type1 command `seac` is handled. There is an error in the Adobe Type1 spec. See chapter 6 in Type1 Font Format Supplement, which provides an errata: The arguments of `seac` specify the offset of the left side bearing (LSB) points, not the offset of origins. This can be fixed in `core/type1_parser.js` by adding the difference of the LSB values.",False
7762205c5281292e0ac1f807a312285ef34670a0,2020-08-23 19:51:07,Jonas Jenwald,"Reduce the leading padding for the `numPages` span (PR 11077 follow-up)

Currently there's enough leading padding that the `numPages` span feels somewhat ""disconnected"" from the `pageNumber` input, which seems unfortunate when they contain related state.",False
7df8aa34a5cd4dc41964de5f942376d26ec366b6,2020-08-23 17:07:30,Tim van der Meij,"Merge pull request #12263 from timvandermeij/acroform-fixes

Fix AcroForm printing/saving edge cases",True
73bc8e1d9f18b581f131c08273edaeda90fc6896,2020-08-23 16:30:02,Tim van der Meij,"Include forms/print reference tests for the document from #12233

In addition to the unit tests these reference tests make sure that this
document, that triggered some edge cases in our code, can be rendered
and printed successfully now.",False
a8efc0296beb4c390c55a40daa1aa1c1e8d133a7,2020-08-23 16:30:02,Tim van der Meij,"Obtain the export values for choice widgets from the normal appearance

The down appearance (`D`) is optional and not available in the document
from #12233, so the checkboxes are never saved/printed as checked
because the checked appearance is based on the export value that is
missing because the `D` entry is not available.

Instead, we should use the normal appearance (`N`) since that one is
required and therefore always available.

Finally, the /Off appearance is optional according to section 12.7.4.2.3
of the specification, so that needs to be taken into account to match
the specification and to fix reference test failures for the
`annotation-button-widget-print` test. That is a file that doesn't
specify an /Off appearance in the normal appearance dictionary.",False
1b82ad8fff45f8964f5b3decf6f525d38dd4a76a,2020-08-23 16:30:01,Tim van der Meij,"Decode widget form values consistently

The helper method `_decodeFormValue` is used to ensure that it happens
in one place. Note that form values are field values, display values
and export values.",False
3398e69aef04ca13e623c4d07ea735a69c341c08,2020-08-23 16:01:57,Tim van der Meij,"Merge pull request #12267 from Snuffleupagus/update-packages

Update packages and translations",True
ba8c5bde5fe542f1b0dde35365213dea044d3788,2020-08-23 13:40:38,Jonas Jenwald,Update l10n files,False
cb27999681d09e26c391aac5820d4ccfaa0ace54,2020-08-23 13:38:45,Jonas Jenwald,Update `npm` packages,False
364b9cc8028847a6123680a31de1cca8798d48e5,2020-08-23 00:29:52,Tim van der Meij,"Merge pull request #12265 from Snuffleupagus/issue-12262

Don't warn when navigating away from a modified form, if printing has occurred (issue 12262)",True
fa02808f765030a47d2c6f3e41dcf3102b6c00ae,2020-08-22 23:34:25,Jonas Jenwald,"Mark the `setModified` method, on `AnnotationStorage`, as ""private"" (PR 12241 follow-up)

Since it shouldn't be called manually, we can just mark it as ""private"".",False
1f5021d76ac12f44e378ceac72b6333772e4edab,2020-08-22 21:39:17,Jonas Jenwald,"Prevent errors if `PDFDocumentProxy.saveDocument` is called without the `annotationStorage` parameter (PR 12241 follow-up)

Obviously it doesn't make sense to call that method without providing an `AnnotationStorage`-instance, however we should ensure that doing so won't cause errors.
Hence we need to check that `annotationStorage` is actually defined, before attempting to call its `resetModified` method.",False
f2e3d6c81919fed88423220174deb588f12cd710,2020-08-22 21:19:56,Jonas Jenwald,"Don't warn when navigating away from a modified form, if printing has occurred (issue 12262)

This solution is obviously *not* perfect, since printing being cancelled will thus remove the warning as well. However, a similar problem already exists for saving, since the user may cancel that one as well.

All-in-all, since way cannot really detect with absolute certainty that either saving or printing actually finished, this seems good enough for now.",False
9d7609d255a647c8689a8e2d74e1dd661624dfb5,2020-08-22 20:18:42,Tim van der Meij,"Merge pull request #12261 from Snuffleupagus/renderInteractiveForms-defaults

Also enable `renderInteractiveForms` by default in the viewer components (PR 12201 follow-up)",True
36e149800e17ae72463307f3e56fd4723c2373e5,2020-08-22 19:31:33,Tim van der Meij,"Unconditionally set the field value for choice widgets in the annotation storage

This commit makes the following improvements:

- The code is similar to the other interactive form widgets now, with a
  clear note for the only difference.
- Calling `getOrCreateValue` unconditionally ensures that choice widgets
  always have a value in the annotation storage. Previously we only
  inserted a value in the annotation storage when an option matched or
  when a selection was changed. However, this causes breakage when
  saving/printing because comboboxes, which we don't fully support yet
  but are rendered, might not have a value in storage at all. Their
  field value might not match any option since it allows the user to
  enter a custom value.
- Calling `getOrCreateValue` unconditionally ensures that forms with
  choice widgets no longer always trigger a warning when the user
  navigates away from the page. This fixes
  https://github.com/mozilla/pdf.js/pull/12241#discussion_r474279654",False
a8de614a9fead1dc4652ae01423e1305c554d017,2020-08-22 17:54:04,Jonas Jenwald,"Also enable `renderInteractiveForms` by default in the viewer components (PR 12201 follow-up)

Given that `renderInteractiveForms` is now enabled by default in ""full"" viewer, it seems reasonable to enable it by default in the viewer components as well.
Especially considering that it's simple to disable, when creating the affected components, for anyone implementing their own viewer.",False
5fed7112a28db7394df86997f923366168fed6b6,2020-08-22 17:41:41,Tim van der Meij,"Use the export value instead of the display value for choice widget option selection

The export value is used when the document is saved, so it should also
be used when the document is opened to determine which choice widget
option is selected. The display value is, as the name implies, only to
be used for viewer display purposes and not for other logic.

This makes sure that in the document from #12233 the ""Favourite colour""
choice widget is correctly initialized with ""Red"" instead of ""Black""
because the field value is equal to the export value (always the case),
but not the display value (not always the case). Moreover, saving now
also correctly uses the export value and not the display value.",False
37c5660394a9741387400d28b53c8b6ea03eb80c,2020-08-22 16:58:41,Tim van der Meij,"Merge pull request #12260 from utopianknight/replace-menuArrow-icon

Replace menu dropdown icon",True
43a439643daf163f085a06966d323fd6cc7baf05,2020-08-22 13:40:51,utopianknight,Replaced menu dropdown icon,False
1ff578cbd417cf3ff4979255bb04b4f28dbdd322,2020-08-22 03:16:29,Tim van der Meij,"Merge pull request #12244 from yangjiang3973/fix-webpack

fix webpack config problem caused by breaking changes of worker-loader",True
909c5af5ed9a552c143bc91657dada4e22cc6ff9,2020-08-22 02:58:37,Tim van der Meij,"Merge pull request #12256 from escapewindow/12241-followup

#12241 followup - move event listener to PDFViewerApplication.load",True
3c790936c1964d33fe118e4a6d561b11bd0f62de,2020-08-22 02:47:20,Tim van der Meij,"Merge pull request #12247 from timvandermeij/acroform-choice-null

 Improve the field value parsing for choice widgets to handle `null` values",True
b1423336c36e5de4b8492c1b0eaac7c5c29284e8,2020-08-21 22:23:39,Aki Sasaki,#12241 followup - move event listener to PDFViewerApplication.load,False
0d5ef5dd0a119e483b4be56c2572c2ce3147f4b4,2020-08-21 06:41:29,Brendan Dahl,"Merge pull request #12248 from brendandahl/pdf-save-as

Support file save triggered from the Firefox integrated version.",True
80231751036a18832526842f2bf4c5d71e12c9cd,2020-08-21 06:35:08,Brendan Dahl,"Support file save triggered from the Firefox integrated version.

Related to https://bugzilla.mozilla.org/show_bug.cgi?id=1659753

This allows Firefox trigger a ""save"" event from ctrl/cmd+s or the ""Save
Page As"" context menu, which in turn lets pdf.js generate a new PDF if
there is form data to save.

I also now use `sourceEventType` on downloads so Firefox can determine if
it should launch the ""open with"" dialog or ""save as"" dialog.",False
10f61b8c9624bb1a697e46af87e764da4e76be19,2020-08-21 06:26:59,Brendan Dahl,"Merge pull request #12241 from escapewindow/prevent-default

confirm if leaving a modified form without saving",True
83365a3756085563d34b7ca91f1e8863792280cb,2020-08-21 05:53:06,Aki Sasaki,confirm if leaving a modified form without saving,False
2e95d08f128dfab6c91adaaecb3b21465417f368,2020-08-21 03:38:02,Tim van der Meij,"Merge pull request #12251 from DesWurstes/master

Return the query with the findcontrolstate",True
164be97dfc4892f9ca885b9b7a5cddb891d6c2e5,2020-08-21 02:11:36,Tim van der Meij,"Merge pull request #12250 from Snuffleupagus/dropdownToolbarButton-adjustWidth

Update the zoom dropdown width calculation to work better in locales with long zoom-strings (PR 11077 follow-up)",True
72f48ee089c57a8c19a17834f24cc73f23ea2ff4,2020-08-20 15:48:43,DesWurstes,Return the query with the findcontrols,False
2683f44b40afe27bacce1a7b96a43eab6fefbb2e,2020-08-20 13:27:42,Jonas Jenwald,"Update the zoom dropdown width calculation to work better in locales with long zoom-strings (PR 11077 follow-up)

With the changes in PR 11077, the zoom dropdown now looks ""squashed"" in locales with longer than average zoom-strings[1]. The reason is that the zoom-value and the dropdown-icon are too close together, which doesn't look good in affected locales.

To fix this, the following changes are made:
 - Increase the calculated dropdown width, in `Toolbar._adjustScaleWidth`, to account for the much wider icon (7 px -> 16 px) and the increased padding.
 - Move the dropdown-icon *slightly* outwards, and also *slightly* reduce the left (right in RTL locales) padding of the dropdown-contents.
 - Finally, remove the right (left in RTL locales) padding to reduce the chance of the *default* browser dropdown-icon being visible.

---
[1] This affects e.g. the `de` and `nl` locales, but there's probably other examples as well.",False
12c20772acbb130e8671a3c460368fb25b55e339,2020-08-20 02:57:50,Tim van der Meij,"Improve the field value parsing for choice widgets to handle `null` values

The specification states that the field value is `null` if no item is
selected and we didn't handle this case properly. Even though this did
not break the rendering because we always convert the value to an array
and the `includes` check in the display layer would simply not match,
the field value would be `[null]` which is not expected and strange from
an API perspective.

This commit fixes that by ensuring that we return an empty array in
case the field value is `null`. The API therefore still always gives an
array for the field value, but now the code is more specific so that the
value is either an empty array or an array of strings.",False
3ca037af78a3234b820411ec070a3b94e69f1163,2020-08-20 02:57:24,Tim van der Meij,"Combine the choice widget field value unit tests into one parametrized unit test

This commit follows the same pattern as another unit test in this file
and both reduces existing and future code duplication (since the next
commit will extend this test with an additional input).",False
965d20db2aad7b2f5cf33b9770933ac311608ac7,2020-08-20 02:23:11,Tim van der Meij,"Merge pull request #11077 from utopianknight/modern-look

Implement Photon design for the viewer",True
c0b671d91b037065c9bf16e6b6920d32334dea61,2020-08-19 15:51:13,utopianknight,Photon Design,False
dee0c29f6fe6ce6b0b3605527353a1089d674af0,2020-08-19 14:32:16,IanJiang0817,fix webpack config problem caused by breaking changes of worker-loader,False
b52b36f6a570d6010e51f7c359a180449bd589fe,2020-08-18 16:41:18,Tim van der Meij,"Merge pull request #12230 from timvandermeij/reference-test-print

Implement reference testing for printing",True
483efedc664abeed12cd5d66d62417ebd68cc81a,2020-08-18 16:06:33,Tim van der Meij,Include reference tests for text/choice/button widget printing,False
8ccf09d5dd410a7ebd9c048b91bbd73fa7f7e5ba,2020-08-18 16:06:33,Tim van der Meij,"Implement reference testing for printing

This commit includes support for rendering pages in printing mode,
which, when combined with annotation storage data, is useful for testing
if form data is correctly rendered onto the printed canvas.",False
37e9c97cec3f0c91f7e73ccdf20d2aa37c46b75b,2020-08-18 03:13:04,Tim van der Meij,"Merge pull request #12229 from brendandahl/ann-event

Dispatch event when annotations have finished rendering.",True
7bba4931ad0228b42c712906862ccbab56759230,2020-08-18 02:59:24,Brendan Dahl,"Dispatch event when annotations have finished rendering.

This is needed for some smoke tests in mozilla central for testing forms
in pdf.js.

Note: AnnotationLayerBuilder.render() doesn't really need to be async, but
we're talking of making the annotation's render functions async, so this
will make that switch easier.",False
ebb903e5067b15081d2cf8e953996bf5ffb8da72,2020-08-17 23:00:26,Tim van der Meij,"Merge pull request #12227 from Snuffleupagus/dist-more-es5

Include `image_decoders-es5`/`minified-es5` in the `pdfjs-dist` library (issue 12220)",True
e079c180c3859a52bdf5396d3558d309a051708d,2020-08-17 18:48:14,Jonas Jenwald,"Include `minified-es5` in the `pdfjs-dist` library (issue 12220)

Note that this will increase the run-time of `gulp dist` and `gulp dist-install`, but that's unavoidable given that there's now additional building happening.",False
1cf660ba7355f112089b6b7ef8a4cb8d1f35eb05,2020-08-17 18:29:50,Jonas Jenwald,"Add a `image_decoders-es5` gulp task, and include it in the `pdfjs-dist` library",False
628a1ee04e7f4bae8061532f6298aa1e25c87c59,2020-08-17 16:56:19,Tim van der Meij,"Merge pull request #12219 from Snuffleupagus/handleTransferFunction

Add (basic) support for transfer functions to Images (issue 6931, bug 1149713)",True
1058f1660502297218f5f0010c1fdcbef19c485a,2020-08-17 14:04:12,Jonas Jenwald,"Add (basic) support for transfer functions to Images (issue 6931, bug 1149713)

This is *similar* to the existing transfer function support for SMasks, but extended to simple image data.
Please note that the extra amount of data now being sent to the worker-thread, for affected /ExtGState entries, is limited to *at most* 4 `Uint8Array`s each with a length of 256 elements.

Refer to https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#G9.1658137 for additional details.",False
9d3e046a4f54be27adf5857651fd706677276c76,2020-08-17 11:47:25,Jonas Jenwald,"Don't cache /ExtGState entries that contain fonts (PR 12087 follow-up)

I completely overlooked the fact that `PartialEvaluator.handleSetFont` also updates the current `state`, which means that currently we're not actually handling font data correctly for cached /ExtGState data. (Thankfully, using /ExtGState to set a font is somewhat rare in practice.)",False
192afb87e34e1f7c30ad97e98599af643717eb9d,2020-08-17 02:06:37,Tim van der Meij,"Merge pull request #12203 from staktrace/zoomfix

Bug 1392361 - Fix zooming sensitivity on macOS",True
9be177d2defcfc3e51defa99fa49ab190f57d1f2,2020-08-17 01:49:30,Tim van der Meij,"Merge pull request #12210 from Snuffleupagus/minified-keep-names

Keep the original class/function names when minifying code (issue 12209)",True
66bbe82cc5c9954fbb9fec11c13039078c5d61a8,2020-08-17 01:42:02,Tim van der Meij,"Merge pull request #12212 from staktrace/touchfix

Bug 1643508 - Disable touch-based pinch zooming on pdf.js.",True
67c361b2f4b2ff3ee1c8a90ace643b769e97b85f,2020-08-13 21:08:47,Brendan Dahl,"Merge pull request #12211 from Snuffleupagus/_saveInProgress-reset

Wait until saving has finished before resetting `PDFViewerApplication._saveInProgress` (PR 12137 follow-up)",True
c6e5686b6a908a16a8fbc2ca93b5c12b08dba146,2020-08-13 18:52:30,Kartikaya Gupta,"Bug 1643508 - Disable touch-based pinch zooming on pdf.js.

Currently using a touchscreen with pdf.js doesn't work so well. In Firefox,
with apz.allow_zooming = false (default on current release/beta), it does a
reflow zoom which makes the UI elements bigger. And with apz.allow_zooming = true
(default on current Firefox nightly), or in Chrome, it does a smooth pinch-zoom
but that also scales up the entire UI. Neither of these is a particularly good
experience, so this patch just disables any multi-touch gestures. Touch-based
panning (which involves a single touch point) is left unaffected.",False
b26d736809a49941fe2a9fc7b691365496f20eeb,2020-08-13 16:47:30,Jonas Jenwald,"Ensure that the ""DocException"" message handler, in the API, will always either error or warn (depending on the build) if a valid `Error` isn't found

Having this present would have made debugging issues 11941 and 12209 so much quicker and easier.",False
22cb59e7d0eaee8937188cb6d4e03497e309e439,2020-08-13 16:30:29,Jonas Jenwald,"Wait until saving has finished before resetting `PDFViewerApplication._saveInProgress` (PR 12137 follow-up)

I obviously missed this during review, but currently `PDFViewerApplication._saveInProgress` is reset *synchronously* in `PDFViewerApplication.save`.
That was probably not intended, since it essentially renders the `PDFViewerApplication._saveInProgress` check pointless given that the actual saving is an *asynchronous* operation.",False
ea5581b70ae161d384ab4aae7e1d6f0d178d3b76,2020-08-13 14:57:58,Jonas Jenwald,"Keep the original class/function names when minifying code (issue 12209)

While this will obviously increase the size of the output of `gulp minified`/`gulp minified-es5` *slightly*, the resulting files are still a lot smaller than the non-minified builds.

See https://github.com/terser/terser#minify-options for information about various Terser options.",False
e50cb4c9d5374bf49f180c3ce21a575ebd5db3dc,2020-08-13 03:50:52,Brendan Dahl,"Merge pull request #12201 from brendandahl/enable-forms

Enable renderInteractiveForms by default.",True
213676b5e8f5981a7cba6b736370d18b63ace93b,2020-08-13 02:48:50,Kartikaya Gupta,"Bug 1392361 - Fix zooming sensitivity on macOS

The original code would get a long sequence of miniscule ""tick"" values while
pinch-zooming, and each tick value would cause a 1.1x zoom. So even the smallest
pinch gesture on a trackpad would cause high amounts of zoom. This patch
accumulates the wheel deltas until they reach an integer threshold (with a
tweak of the scaling factor to make it feel more natural) at which point it
triggers the zoom based on the integer component of the accumulated delta. The
fractional part is retained in the accumulator.",False
da62be0685e15b26dbbaa9a7c79fdec870b223ad,2020-08-12 22:58:27,Brendan Dahl,Enable renderInteractiveForms by default.,False
7edc5cb79fe829d45fed85e2b4b6d8594522cc10,2020-08-12 20:26:05,Brendan Dahl,"Merge pull request #12137 from calixteman/save

Add support for saving forms",True
1a6816ba98fd437024f6f0ddfa78e6d4dbf11371,2020-08-12 14:02:59,Calixte Denizet,Add support for saving forms,False
3380f2a7fc2e3435144d6984fbf7744433e4007f,2020-08-12 03:38:27,Tim van der Meij,"Merge pull request #12191 from Snuffleupagus/rm-AppOptions-disableCreateObjectURL

Remove the `disableCreateObjectURL` option from `web/app_options.js`",True
ac654db089ce09717a5e356ba1b66357d8963812,2020-08-12 03:22:12,Tim van der Meij,"Merge pull request #12193 from Snuffleupagus/printContainer-canvas-direction

Set `direction: ltr;` on the canvases used during printing (bug 1335712)",True
57c988853b60d068ada245428cbea1859aa8a22c,2020-08-12 03:16:13,Tim van der Meij,"Merge pull request #12192 from Snuffleupagus/misc-AnnotationStorage-improvements

A couple of (small) tweaks of the `AnnotationStorage` (PR 12173 follow-up)",True
7fb01f9f2a4d3d6e2680cf9f6df3c83446d6e763,2020-08-11 09:04:19,Brendan Dahl,"Merge pull request #12186 from brendandahl/loca-2

Fix bad truetype loca tables.",True
f6dff812237d22f8cfc0422238d39e11786f8c9f,2020-08-11 02:45:49,Brendan Dahl,"Fix bad truetype loca tables.

Some fonts have loca tables that aren't sorted or use 0 as an offset to
signal a missing glyph. This fixes the bad loca tables by sorting them
and then rewriting the loca table and potentially re-ordering the glyf
table to match.

Fixes #11131 and bug 1650302.",False
8e32c17e856859b5724df5fc7345df57589cf84d,2020-08-10 22:05:56,Jonas Jenwald,"Set `direction: ltr;` on the canvases used during printing (bug 1335712)

This essentially mirrors the CSS rules used for the viewer itself, see `web/pdf_viewer.css`, and according to my very quick tests it seems to fix https://bugzilla.mozilla.org/show_bug.cgi?id=1335712",False
4d351eab93b7f4f6ea35fadbdfebd3ef3e0773f0,2020-08-10 20:37:24,Jonas Jenwald,"A couple of (small) tweaks of the `AnnotationStorage` (PR 12173 follow-up)

 - Initialize the `AnnotationStorage`-instance, on `PDFDocumentProxy`, lazily.
 - Change the `AnnotationStorage` to use a `Map` internally, rather than a regular Object (simplifies the following points).
 - Let `AnnotationStorage.getAll` return `null` when there's no data stored, to avoid unnecessary parsing on the worker-thread. This ought to ""just work"", since the worker-thread code *should* already handle the `!annotationStorage` case everywhere.
 - Add a new `AnnotationStorage.size` getter, to be able to easily tell if there's any data stored.",False
5b94ed54878c22c80befad999ed633b2751fee93,2020-08-10 19:26:30,Jonas Jenwald,"Remove the `disableCreateObjectURL` option from `web/app_options.js`

Prior to PR 11601, the `disableCreateObjectURL` option was present on `getDocument` in the API, since it was (potentially) used when decoding JPEG images natively in the browser. Hence setting this option, which was done automatically using compatibility-code, were in some browsers necessary in order for e.g. JPEG images to be correctly rendered.

The downside of the `disableCreateObjectURL` option is that memory usage increases significantly, since we're forced to build and use `data:` URIs (rather than `blob:` URLs).
However, at this point in time the `disableCreateObjectURL` option is only necessary for *some* (non-essential) functionality in the default viewer; in particular:
 - The openfile functionality, used only when manually opening a new file in the default viewer.
 - The download functionality, used when downloading either the PDF document itself or its attached files (if such exists).
 - The print functionality, in the generic `PDFPrintService` implementation.

Hence neither the general PDF.js library, nor the *basic* functionality of the default viewer, depends on the `disableCreateObjectURL` option any more; which is why I'm thus proposing that we remove the option since using it is a performance footgun.

*Please note:* To not outright break currently ""supported"" browsers, which lack proper `URL.createObjectURL` support, this patch purposely keeps the compatibility-code to explicitly disable `URL.createObjectURL` usage *only* for browsers which are known to not work correctly.[1]

While it's certainly possible that there's additional, likely older, browsers with broken `URL.createObjectURL` support, the last time that these types of problems were reported was over *three* years ago.[2]
Hence in the *very* unlikely event that additional problems occur, as a result of these changes, we can either add a new case in the compatibility-code or simply declare the affected browser as unsupported.

---
[1] Which are IE11 (see issue 3977), and Google Chrome on iOS (see PR 8081).

[2] Given that `URL.createObjectURL` is used by default, you'd really expect more reports if these problems were widespread.",False
6620861c7d3403bd81d65d2f2fe8e7f28788ff70,2020-08-09 19:14:21,Tim van der Meij,"Merge pull request #12177 from calixteman/comb

Support comb textfields for printing",True
88b112ab0ca300b006b1972f14a468521f9ddf3e,2020-08-09 18:11:26,Calixte Denizet,Support comb textfields for printing,False
b061c300b48531204bc136ce0bc4124a8ba43ef8,2020-08-09 17:07:36,Tim van der Meij,"Merge pull request #12176 from calixteman/multiline

Support multiline textfields for printing",True
85c08ecdbd13a4684e4c5836cba0c3a1134b1c90,2020-08-09 16:10:11,Tim van der Meij,"Merge pull request #12188 from Snuffleupagus/update-packages

Update packages and translations",True
cd8bb7293b2af29b7b28f80d7164330869345e1e,2020-08-09 15:44:34,Calixte Denizet,Support multiline textfields for printing,False
7afcdbeebe6d13c9dbe417e53c8d269d81beca85,2020-08-09 14:35:40,Jonas Jenwald,Update l10n files,False
c1253fd2d9887437d86e1671ebe984a8a1662911,2020-08-09 14:33:07,Jonas Jenwald,Update `npm` packages,False
ea29d4e0d4389cad6caa7eea65a408d33971d2c0,2020-08-08 21:15:44,Tim van der Meij,"Merge pull request #12187 from Snuffleupagus/issue-4398-test

Add a test-case for issue 4398",True
1f8b54b1fed38babbe87abc35c7c8bbf2ab0416c,2020-08-08 21:13:49,Tim van der Meij,"Merge pull request #12154 from jsg2021/issue-8271

[api-minor] Allow loading pdf fonts into another document.",True
128e41d6be06a8a11e54d6b7552e6b0d5cbda9cc,2020-08-08 15:20:19,Jonas Jenwald,"Add a test-case for issue 4398

Issue 4398 was fixed by PR 4437, however a test-case wasn't included as far as I can tell. Given that PR 12186 is now in the process of re-factoring that code, adding a test-case cannot hurt as far as I'm concerned.",False
ac723a1760b9d9c67a06fe5e007d8c9a5dd2ca7e,2020-08-08 08:22:32,Jonathan Grimes,Allow loading pdf fonts into another document.,False
fea40442f71e02b9e8acc5f87d24882372967948,2020-08-08 03:21:41,Tim van der Meij,"Merge pull request #12182 from tamuratak/fix_destroy

Fix the type of PDFDocumentLoadingTask.destroy.",True
4ac62d8787e07516710449eaa4588bfbdfb52984,2020-08-07 12:40:19,Takashi Tamura,Fix the type of PDFDocumentLoadingTask.destroy.,False
8c162f57f7fb264ea6130597f959e3b197515340,2020-08-07 03:50:29,Tim van der Meij,"Merge pull request #12175 from calixteman/textfield

Support textfield and choice widgets for printing",True
1f79c9834db67f434fda41ef698cdc5690c9a6cf,2020-08-07 02:44:11,Tim van der Meij,"Merge pull request #12169 from Snuffleupagus/BaseTreeViewer-2

Extract common methods from `PDFOutlineViewer`/`PDFAttachmentViewer` into a new abstract `BaseTreeViewer` class",True
b99b3b6ab796998110f44a26448f22305b1db5b0,2020-08-07 02:25:34,Tim van der Meij,"Merge pull request #12179 from Snuffleupagus/Object.fromEntries

Add support for `Object.fromEntries`",True
1747d259f90646d5087b4b3ece7424f35bc655d0,2020-08-06 18:15:23,Calixte Denizet,Support textfield and choice widgets for printing,False
16fa9dc4ea057fb975fa9e32e6a0773752166070,2020-08-06 18:09:51,Jonas Jenwald,"Add support for `Object.fromEntries`

This provides a simpler way of creating an `Object` from e.g. a `Map`, without having to manually iterate over it.
Please see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries",False
95e102c07bc257c2120fd7fd9141762b2c813a1c,2020-08-06 03:00:50,Tim van der Meij,"Merge pull request #12173 from Snuffleupagus/render-annotationStorage

[api-minor] Fix the `annotationStorage` parameter in `PDFPageProxy.render`",True
54fc7058e42626a8f649102e483b8e612b2d5048,2020-08-06 02:38:06,Jonas Jenwald,"Re-factor the ""outlineloaded""/""attachmentsloaded"" event handlers in `PDFSidebar`

With recent changes, these event handlers are now essentially identical. Hence a new helper function is added, to reduce unnecessary duplication (will also be helpful with upcoming changes).",False
6e9da55a3930b89d738d9e76f4c0b36d02c702f6,2020-08-06 02:38:06,Jonas Jenwald,"Extract common methods from `PDFOutlineViewer`/`PDFAttachmentViewer` into a new abstract `BaseTreeViewer` class

These two classes are unsurprisingly quite similar, and with upcoming changes[1] the amount of (essentially) duplicated code will increase even further.

Notable changes:
 - Collect shared functionality in the `BaseTreeViewer` class, reducing both current and future code-duplication.
 - Reduce unnecessary duplication in the CSS rules, which will be particularly useful with upcoming changes.
 - Tweak the attachmentsView to use links, rather than buttons, to simplify (primarily) the CSS rules.

---
[1] Once API support for ""Optional Content"" lands, I've got more-or-less finished patches to add viewer support as well.",False
a6c1ef82ae148d5661def6f1ce47ccc3427c965b,2020-08-06 02:32:30,Jonas Jenwald,"Update `BaseViewer.createAnnotationLayerBuilder`, and `PDFPageView`, to accurately reflect `IPDFAnnotationLayerFactory` (PR 12147 follow-up)",False
5e44b241b221b15fd0e8fb56b153b444ccba45a7,2020-08-06 02:32:30,Jonas Jenwald,"[api-minor] Fix the `annotationStorage` parameter in `PDFPageProxy.render`

While the parameter name (clearly) suggests that an `AnnotationStorage`-instance is expected, looking at the only call-sites that include the parameter (i.e. the `PDFPrintServiceFactory` instances) it actually contains just a normal Object.

Hence it seems much more reasonable to actually pass a valid `AnnotationStorage`-instance, as the name suggests, and simply have `PDFPageProxy.render` do the `annotationStorage.getAll()` call. (Since we cannot send an `AnnotationStorage`-instance as-is to the worker-thread, given the ""structured clone algorithm"".)",False
a289eb8325db6971c91719b71be20fc165e2e850,2020-08-06 02:17:37,Tim van der Meij,"Merge pull request #12174 from Snuffleupagus/AppOptions-printResolution

Do the `AppOptions.get(""printResolution"")` lookup once in `web/app.js `, when initializing `PDFPrintServiceFactory`-instances, rather than for every printed page",True
66d5345deacf3dde88a534342369221c853dae27,2020-08-06 02:09:10,Tim van der Meij,"Merge pull request #12172 from tamuratak/fix_typedarray

Fix the type definition of TypedArray. (PR 12156 follow-up)",True
97d796e3728f94e5b124724ea0eaffc701f03359,2020-08-05 17:04:09,Jonas Jenwald,"Do the `AppOptions.get(""printResolution"")` lookup once in `web/app.js`, when initializing `PDFPrintServiceFactory`-instances, rather than for every printed page

There's really no point in repeating these lookups over and over, since the value should be constant for the duration of one print invocation anyway.",False
a0f0ab78f3755a83dd39ff2a50e34e4b7c433b6c,2020-08-05 13:31:08,Takashi Tamura,Fix the type definition of TypedArray.,False
63e33a5895bb730ce0e6a65e4d0de12ed043b649,2020-08-05 03:56:11,Tim van der Meij,"Merge pull request #12168 from Snuffleupagus/fix-types

Fix the `gulp types` task to run on Windows, and place the TypeScript definitions correctly in `pdfjs-dist`",True
02bcc25b9fc6963a7dd90d1669fa816e03111ae0,2020-08-05 03:32:39,Tim van der Meij,"Merge pull request #12171 from Snuffleupagus/unittest-shall_fail_rendering

Attempt to reduce intermittent failures in the ""multiple render() on the same canvas"" unit-test",True
85982c45dc37e174603df9eb7c14226a4b7bf7fa,2020-08-05 03:29:20,Tim van der Meij,"Merge pull request #12163 from Snuffleupagus/improve-PDFAttachmentViewer-render

Re-factor the dispatching of ""attachmentsloaded"" events, when the PDF document contains no ""regular"" attachments",True
fb85c2dc6dfc44f7d98c0dbcf6b7fbc048bafefd,2020-08-05 03:20:04,Jonas Jenwald,"Fix the `gulp types` task to run on Windows, and place the TypeScript definitions correctly in `pdfjs-dist`

 - Fix the `gulp types` task to run on Windows. Currently this fails, and the solution was to ""borrow"" the same formatting as used in the `gulp jsdoc` task.

 - Place the TypeScript definitions in their own `types` directory, when building `pdfjs-dist`. These should *not* be cluttering the main `build` directory, especially since the generated TypeScript definitions consists of *multiple folders*. (Only if the TypeScript definitions would be concatenated into *a single file*, would placing them directly in `pdfjs-dist/build` be acceptable.)",False
71f8e1f538386fcbdb31d8cc098572ce32bf5c56,2020-08-05 03:10:44,Tim van der Meij,"Merge pull request #12156 from timvandermeij/types-followup

Improve the types generation and API documentation (PR 12102 follow-up)",True
56ca027c086ac18a75643a8c27cad727627a97f6,2020-08-05 02:57:22,Tim van der Meij,"Improve consistency for the API documentation comments

Over time we used multiple different formats for JSDoc comments. This
commit standardizes those formats to the one we used most often.

Moreover, this removes the example in the outline endpoint documentation
since it now has a proper type definition and it didn't render correctly
in JSDoc.",False
ba4a07ce075a87fcbfdaaed6c22c1a1e14583d4b,2020-08-05 02:49:59,Tim van der Meij,Fix incorrect types in the API documentation,False
3116216e1d08d3ad91d516b7d4b262fbd782bd89,2020-08-05 02:47:24,Tim van der Meij,"Improve the API documentation for `PDFDocumentLoadingTask`

This commit:
- formats the documentation block according to the standards;
- replaces the callback definitions with the `function` type (we have
  that for other definitions already and the callback type was not
  rendered correctly by JSDoc);
- synchronizes the type documentation and the class documentation;
- fixes the documentation by making it easier to read and making sure
  that all optional properties are indicated as such;
- uses the `@link` tag to indicate links to other code.

The `typestest` still passes and JSDoc now renders this class correctly.",False
7e759c6e2b06652884b2176581e829fd83264194,2020-08-05 02:47:20,Tim van der Meij,"Improve the `typestest` target in the Gulpfile

This commit:
- moves the preparation work to a new `typestest-pre` target similar to
  how the other targets work;
- moves the `TYPESTEST_DIR` definition to the top of the file like we
  did for all other directory variables;
- renames the `TYPES_BUILD_DIR` variable to `TYPES_DIR` since it's
  shorter and the naming scheme then corresponds to the other directory
  variables;
- switches to `const`/template strings in the types targets where needed;
- converts the `if (err !== null)` check to `if (err)` similar to other
  targets.",False
13e44c07762fd69b36d9e73432d7648d75eb46ad,2020-08-05 02:01:24,Jonas Jenwald,"Attempt to reduce intermittent failures in the ""multiple render() on the same canvas"" unit-test

This patch should *hopefully* remove the intermittent unit-test failure, by using the *same* `optionalContentConfigPromise` for both `renderTask`s and thus get more predictable timing behaviour.",False
9989879458d4926067694387e859e871f88513ca,2020-08-05 00:30:20,Brendan Dahl,"Merge pull request #12095 from brendandahl/oc

Add support for optional marked content.",True
ac494a2278b76bf4c9c241a9d8c5b33ac8d942a8,2020-08-04 21:56:55,Brendan Dahl,"Add support for optional marked content.

Add a new method to the API to get the optional content configuration. Add
a new render task param that accepts the above configuration.
For now, the optional content is not controllable by the user in
the viewer, but renders with the default configuration in the PDF.

All of the test files added exhibit different uses of optional content.

Fixes #269.

Fix test to work with optional content.

- Change the stopAtErrors test to ensure the operator list has something,
  instead of asserting the exact number of operators.",False
e68ac05f1873fb238c99c307bc27e943e81bb682,2020-08-04 02:25:49,Tim van der Meij,"Merge pull request #12160 from tamuratak/worker_options

Use typedef to define the type of GlobalWorkerOptions (PR 12102 follow-up)",True
0b75701012f06c321ba1f926da164c4f7f217a17,2020-08-04 02:22:10,Tim van der Meij,"Merge pull request #12157 from tamuratak/fix_svggraphics

Fix the type of SVGGraphics (PR 12102 follow-up)",True
adc7645a446ed8083b114e785202748a7865afb1,2020-08-04 02:13:50,Tim van der Meij,"Merge pull request #12161 from tamuratak/exported_func

Add types to functions exported as API in src/pdf.js (PR 12102 follow-up)",True
82fece76df4068c21fa44ce9caa632a016c3fa7a,2020-08-04 02:05:28,Tim van der Meij,"Merge pull request #12162 from tamuratak/viewbox

Tweak for the type of PageViewportParameters.viewBox (PR 12102 follow-up)",True
0b65d4cacd24403b50f42f3a2052149aa339e6b6,2020-08-03 17:53:44,Jonas Jenwald,"Re-factor the dispatching of ""attachmentsloaded"" events, when the PDF document contains no ""regular"" attachments

Since the attachment fetching/parsing is already asynchronous, possibly delaying the dispatching of an ""attachmentsloaded"" event should thus not be a problem in general.
Note that in some cases, i.e. PDF documents with no ""regular"" attachments and only FileAttachment annotations, we'll thus no longer dispatch an ""attachmentsloaded"" event when `attachmentsCount === 0` and instead wait for the FileAttachment parsing to finish. (The use of a timeout still guarantees that an ""attachmentsloaded"" event is *eventually* dispatched though.)

This patch *considerably* simplifies the ""attachmentsloaded"" event handler, in `PDFSidebar`, since the details are now abstracted away from the consumer.

Finally, add a check in `_appendAttachment` to ensure (indirectly) that the FileAttachment annotation is actually relevant for the active document.",False
923ba27f1fb9c31679ba4b3a15ab7150dd5d2974,2020-08-03 17:12:42,Takashi Tamura,Tweak for the type of PageViewportParameters.viewBox,False
bc4648c0a6f35d014a1fd349e98898d2bdfdb52e,2020-08-03 15:49:48,Takashi Tamura,Add types to functions exported as API in src/pdf.js.,False
24d89330234368fb4bdf488e393436a5942e5089,2020-08-03 15:41:46,Jonas Jenwald,"Use a `DocumentFragment` when building the attachmentsView in `PDFAttachmentViewer.render`

This approach is already used in other parts of the code-base, see e.g. `PDFOutlineViewer`, and has the advantage of only invalidating the DOM once rather than for every attachment item.",False
f6fd8e9e7fc4837607e552ecc8135b666b5a76a1,2020-08-03 15:36:28,Takashi Tamura,Use typedef to define the type of GlobalWorkerOptions.,False
d72bbecee23c0bca0998b9dce64179c1a2691a62,2020-08-03 06:28:19,Takashi Tamura,Fix the type of SVGGraphics.,False
00a8b42e6703d824049eb317c05ada2eba3799a2,2020-08-02 20:15:37,Tim van der Meij,"Merge pull request #12102 from ineiti/add_types_annotations

Add types annotations",True
5a66c56eca31a924a755112a393ecd2621fb25d5,2020-08-02 18:17:46,Tim van der Meij,"Merge pull request #12108 from calixteman/radio

Add support for radios printing",True
277a92d278875e4f2c78d85f040cb4b0a81d1c30,2020-08-02 01:29:28,Tim van der Meij,"Merge pull request #12153 from timvandermeij/jasmine

Unit test improvements",True
c53e403049f4cde265a751d171fb2b7adcc91c18,2020-08-02 00:42:26,Tim van der Meij,"Update Jasmine to version 3.6.1

This is possible now that most intermittent unit test failures have been
resolved by other patches. There is only one remaining, but it's very
rare and doesn't have to block this update anymore.",False
b789a0e2160a4b59ff4afd500c5313398338b481,2020-08-02 00:39:01,Tim van der Meij,"Log the total number of tests and the random seed in the test runner

This might make debugging intermittent failures a bit easier in the
future because it allows us to spot unexpected differences in the number
of tests being run and allows us to run the tests locally in the same
order in case of intermittent failures.",False
662ac5548fe030a21288adce0c2e764c4a078d56,2020-08-02 00:32:20,Tim van der Meij,Log suite start failures in the test runner,False
c19d76f9b85aff8b5ec876d62c01bc845868ddec,2020-08-02 00:20:30,Tim van der Meij,"Use a `for...of` loop in the `specDone` handler in the test reporter

Moreover, remove a left-over reference to `test.py` since that was
ported to JavaScript a long time ago.",False
252f2ba5290a23f457d09b06560ed10a94ceb48e,2020-08-01 18:36:40,Tim van der Meij,"Merge pull request #12151 from Snuffleupagus/revert-12131-issue-8271

Revert ""[api-minor] Allow loading pdf fonts into another document.""",True
05baa4c89f9355cedd97b32951eec3125924c772,2020-08-01 16:22:39,Jonas Jenwald,"Revert ""[api-minor] Allow loading pdf fonts into another document.""",False
173b92a873dc11c53d663cb3570f5926e9fbcce7,2020-08-01 04:43:41,Tim van der Meij,"Merge pull request #12131 from jsg2021/issue-8271

[api-minor] Allow loading pdf fonts into another document.",True
0c2cef8024e9cd84b1a82c42b681b4e402e3c108,2020-08-01 04:23:51,Tim van der Meij,"Merge pull request #12148 from timvandermeij/revert

Revert ""Populate the find field with the search query when URL has #search hash""",True
81ae565d8a6af0fd90b619379cd026889a9a77d2,2020-08-01 04:11:56,Tim van der Meij,"Revert ""Populate the find field with the search query when URL has #search hash""

This reverts commit 50f73092e1f74e0fb1ea8d40763a5fba709c00c0. This
causes an inconsistency with the integrated find bar that should be
discussed more before moving on with this (refer to PR #12141).",False
0d20a2b7b4286fb37f10e28adeb4afc476f741f1,2020-08-01 03:52:10,Tim van der Meij,"Merge pull request #12144 from Snuffleupagus/uncaught-promise-AbortException

Prevent `Uncaught (in promise) AbortException` when running the unit-tests",True
b037e59abf0fe4bec41097821a30a2204b2ac2dc,2020-08-01 03:11:18,Tim van der Meij,"Merge pull request #12147 from Snuffleupagus/fix-AnnotationStorage-usage

[api-minor] Fix the `AnnotationStorage` usage properly in the viewer/tests (PR 12107 and 12143 follow-up)",True
6d192f987ef62623de3f2d9d86ff526d38f12265,2020-08-01 02:59:05,Jonas Jenwald,"Prevent `Uncaught (in promise) AbortException` when running the unit-tests

These errors can/will occur if data is still loading when the document is destroyed, which is the case in the API unit-tests that load the `tracemonkey.pdf` file.
While this patch prevents these kind of problems, and thus allows us to update Jasmine again, I cannot help but thinking that it's slightly ""hacky"". Basically, we'll simply catch and ignore (some) rejected promises once the document is destroyed and/or its data loading is aborted. However, I don't *think* that these changes should cause issues in general, since we don't really care about errors once document destruction has started (note e.g. the fair number of `catch` handlers ignoring `AbortException`s already).",False
9b16b8ef7138ff4a165c2d5e0d075aafb11f449e,2020-07-31 22:11:48,Jonathan Grimes,Allow loading pdf fonts into another document.,False
95bfc43a3b50af966ddd7eed406b731351ca88d2,2020-07-31 20:12:49,Jonas Jenwald,"Avoid doing unnecessary work in `AnnotationLayerBuilder.render`, such as cloning a `PageViewport`, when no annotations exist for a page",False
346afd1e1ccdc0fe7574a3df38eadd138963a787,2020-07-31 20:02:46,Jonas Jenwald,"[api-minor] Fix the `AnnotationStorage` usage properly in the viewer/tests (PR 12107 and 12143 follow-up)

*The [api-minor] label probably ought to have been added to the original PR, given the changes to the `createAnnotationLayerBuilder` signature (if nothing else).*

This patch fixes the following things:
 - Let the `AnnotationLayer.render` method create an `AnnotationStorage`-instance if none was provided, thus making the parameter *properly* optional. This not only fixes the reference tests, it also prevents issues when the viewer components are used.
 - Stop exporting `AnnotationStorage` in the official API, i.e. the `src/pdf.js` file, since it's no longer necessary given the change above. Generally speaking, unless absolutely necessary we probably shouldn't export unused things in the API.
 - Fix a number of JSDocs `typedef`s, in `src/display/` and `web/` code, to actually account for the new `annotationStorage` parameter.
 - Update `web/interfaces.js` to account for the changes in `createAnnotationLayerBuilder`.
 - Initialize the storage, in `AnnotationStorage`, using `Object.create(null)` rather than `{}` (which is the PDF.js default).",False
f22e702ecc18a47417286368cf65e58bdd65d306,2020-07-31 18:09:11,Calixte Denizet,Amend test for checkboxes printing to test the unchecked appearance,False
538017f7a7fc466656cdb6416b685372e44f788a,2020-07-31 18:01:49,Calixte Denizet,Add support for radios printing,False
c5663f2f6b95680c9b7ce0c0f1e0021aa22deebe,2020-07-31 03:37:18,Tim van der Meij,"Merge pull request #12141 from phillipj/populate-findbar-on-search-hash

Populate the find field with the search query when URL has #search hash",True
f676a00762231ebf3c62aa9cf6b8606999e9f14c,2020-07-31 03:26:54,Tim van der Meij,"Merge pull request #12143 from escapewindow/fix-12107

fix reftests after #12107",True
7bb65bab7ffd6cf65083c59115c87f30d38c4c55,2020-07-31 00:55:27,Aki Sasaki,"fix reftests after #12107

The f1040-annotations reftest started hanging after #12107. We traced
this to `TypeError: can't access property ""getOrCreateValue"", storage is
undefined`.

We essentially need to add `annotationStorage` to the parameters in
test/driver.js.",False
f1bbfdc16dc0c1539e02f454ef8f2442d458c1cc,2020-07-30 14:40:37,Linus Gasser,"Add typescript definitions

This PR adds typescript definitions from the JSDoc already present.
It adds a new gulp-target 'types' that calls 'tsc', the typescript
compiler, to create the definitions.

To use the definitions, users can simply do the following:

```
import {getDocument, GlobalWorkerOptions} from ""pdfjs-dist"";
import pdfjsWorker from ""pdfjs-dist/build/pdf.worker.entry"";
GlobalWorkerOptions.workerSrc = pdfjsWorker;

const pdf = await getDocument(""file:///some.pdf"").promise;
```

Co-authored-by: @oBusk
Co-authored-by: @tamuratak",False
50f73092e1f74e0fb1ea8d40763a5fba709c00c0,2020-07-30 13:41:30,Phillip Johnsen,"Populate the find field with the search query when URL has #search hash

These changes improves the existing search functionality triggered when
the URL contains a `#search` hash.

In addition to performing the actual search immediately like before,
this will ensure the search text field inside the find bar gets
populated with the text currently being searched for.",False
eb4d6a0652b468438c1e90e6a5914ba29e199018,2020-07-30 03:41:41,Tim van der Meij,"Merge pull request #12107 from calixteman/checkbox

Add support for checkboxes printing",True
cb60523a15231d6bab9eecdc559c98fa13dc2b88,2020-07-29 20:12:57,Calixte Denizet,Add support for checkboxes printing,False
6537e64cb8625f050d5eef7561277d263fed3833,2020-07-29 03:39:51,Tim van der Meij,"Merge pull request #12136 from Snuffleupagus/PDFFetchStreamRangeReader-AbortError

Ignore `fetch()` errors, in `PDFFetchStreamRangeReader`, once the request has been aborted",True
bcbbd03f7beb60c0ac8750e9f3b851d5fd8b2158,2020-07-29 03:37:25,Tim van der Meij,"Merge pull request #12135 from Snuffleupagus/pdfManagerReady-loadDocument-promise

[src/core/worker.js] Remove a useless Promise handler from the `pdfManagerReady` function",True
1b720a4b23e442eecf003448e10c1391acd6d38f,2020-07-28 20:48:49,Jonas Jenwald,"Ignore `fetch()` errors, in `PDFFetchStreamRangeReader`, once the request has been aborted

Besides making general sense, as far as I can tell, this patch should also prevent *one* source of `Uncaught (in promise) ...` exceptions.
Unfortunately `reason instanceof AbortError` doesn't work here, since `AbortError` isn't actually defined in browsers; note how even the DOM specification contains an example using the `name` property: https://dom.spec.whatwg.org/#aborting-ongoing-activities

This patch prevents the following errors from being logged in the console, when the unit-tests are running:
 - Firefox: `Uncaught (in promise) DOMException: The operation was aborted.`
 - Chrome: `Uncaught (in promise) DOMException: The user aborted a request.`",False
fbe90b63ec7b1b409cd6abfd7516ff280328ba2a,2020-07-28 18:21:50,Jonas Jenwald,"[src/core/worker.js] Remove a useless Promise handler from the `pdfManagerReady` function

Looking carefully at this code, you'll notice that the `loadDocument` function has no less than *three* Promise handling functions. This obviously makes no sense, since a Promise can only have one resolve and one reject handler.

Hence the final `onFailure`-case is unreachable, which only serves to add confusion when reading the code. Note that this code has been re-factored more than once over the years, but it seems as if this may even have been incorrect already in PR 3310 (and no-one have noticed for seven years :-).",False
403816040ef64ae17758439948771c2920f96ac4,2020-07-28 03:14:51,Tim van der Meij,"Merge pull request #12127 from Snuffleupagus/type3Dependencies

Improve how Type3-fonts with dependencies are handled",True
835b5ffddd8a5c0cfa7f1fbf7a7a6c15a48bacaa,2020-07-27 16:50:15,Jonas Jenwald,"Only check `isType3Font` the first time that `TranslatedFont.loadType3Data` is called

If the `TranslatedFont.type3Loaded` property exists, then you already know that the font must be a Type3 one.",False
f3ff526019278e33c848c23c08fc1fbab5c192db,2020-07-27 16:50:15,Jonas Jenwald,"Send/receive Type3 images the same way as other globally-cached images

There's quite frankly no particular reason to special-case Type3-fonts with image resources, which are very rare anyway, now that we have a general mechanism for sending/receiving images globally.",False
7c9d0d5939bc073d68781850e4349128a6ec8746,2020-07-27 16:50:13,Jonas Jenwald,"Improve how Type3-fonts with dependencies are handled

While the `CharProcs` streams of Type3-fonts *usually* don't rely on dependencies, such as e.g. images, it does happen in some cases.

Currently any dependencies are simply appended to the parent operatorList, which in practice means *only* the operatorList of the *first* page where the Type3-font is being used.
However, there's one thing that's slightly unfortunate with that approach: Since fonts are global to the PDF document, we really ought to ensure that any Type3 dependencies are appended to the operatorList of *all* pages where the Type3-font is being used. Otherwise there's a theoretical risk that, if one page has its rendering paused, another page may try to use a Type3-font whose dependencies are not yet fully resolved. In that case there would be errors, since Type3 operatorLists are executed synchronously.

Hence this patch, which ensures that all relevant pages will have Type3 dependencies appended to the main operatorList. (Note here that the `OperatorList.addDependencies` method, via `OperatorList.addDependency`, ensures that a dependency is only added *once* to any operatorList.)

Finally, these changes also remove the need for the ""waiting for the main-thread""-hack that was added to `PartialEvaluator.buildPaintImageXObject` as part of fixing issue 10717.",False
c7eb79ca660f2e0c8d5af5049f8407e11b2a3bcb,2020-07-27 01:25:33,Tim van der Meij,"Merge pull request #12125 from timvandermeij/puppeteer

Improve test bot stability",True
65e76a3c6b30590259ffcc209ccf9df06a5dd8fc,2020-07-27 00:11:19,Tim van der Meij,"Fix a bug in the temporary folder check in the test runner

The `noPrompt` option doesn't exist and should be `noPrompts`.",False
c7c6c90062acd81f6ad20809d7ac7eba75137669,2020-07-27 00:10:55,Tim van der Meij,"Limit the allowed versions for Jasmine and Puppeteer

Jasmine >= 3.6.0 causes intermittent test failures because of random
task abortions.

Puppeteer >= 4.0.0 causes ENOTEMPTY/EBUSY errors during shutdown on the
Windows bot.

Moreover, `jasmine-core` is a dependency of `jasmine` so it doesn't have
to be required separately.",False
01e2610cf47a0e392af4aa07677126a1c67a588a,2020-07-26 18:03:12,Tim van der Meij,"Merge pull request #12126 from Snuffleupagus/unittest-shall_fail_cleanup

Attempt to reduce intermittent failures in the ""cleans up document resources during rendering of page"" unit-test",True
86a8fd98108a63509f2c114a31c9bba1c495f8f0,2020-07-26 17:35:46,Jonas Jenwald,"Attempt to reduce intermittent failures in the ""cleans up document resources during rendering of page"" unit-test

This patch should *hopefully* remove the `Unhandled promise rejection: ...` errors, by returning the ""final"" promise. Also, by pausing/delaying of rendering slightly the likelihood of the test failing in the first place should thus be reduced.",False
7ffbda33965fde13d8465606de9550ad207b8e64,2020-07-26 17:32:25,Tim van der Meij,"Merge pull request #12124 from Snuffleupagus/unittest-browser-name

Include the browser name when printing unit-test results",True
e4ad91be0571d372884fbc98aa36b4bab4747448,2020-07-26 16:24:16,Jonas Jenwald,"Include the browser name when printing unit-test results

This uses a similar format to the reference-test logging, and will help determine in *exactly* which browser the failure occurred (since the tests run concurrently).",False
311ca6e79635149c27483a17e7e9cc94203cc247,2020-07-26 16:04:29,Tim van der Meij,"Merge pull request #12122 from Snuffleupagus/update-packages

Update packages and translations",True
ca61910a2cff897d4cddccf457bb9dc95688c92b,2020-07-26 14:48:56,Jonas Jenwald,Update l10n files,False
47ab6762255a61340cdc1fa38f5f18142c6c172b,2020-07-26 14:48:41,Jonas Jenwald,Update `npm` packages,False
bf539deada3f0687205807f62e2006dcb8fbd875,2020-07-25 03:19:37,Tim van der Meij,"Merge pull request #12106 from calixteman/storage

Add an annotation storage in order to save annotation data in acroforms",True
584902dbf86592cd75bc215865e8e33decdb5deb,2020-07-24 14:20:11,Calixte Denizet,Add an annotation storage in order to save annotation data in acroforms,False
7b0c52fdfed4642366796021093833df63236550,2020-07-24 03:17:26,Tim van der Meij,"Merge pull request #12114 from Snuffleupagus/viewer-PDFJSDev-cleanup

Remove a couple of unnecessary `PDFJSDev` checks from the viewer",True
1c809c87af7e027b8f15e2f638562069d157725a,2020-07-23 21:54:11,Jonas Jenwald,"Remove a couple of unnecessary `PDFJSDev` checks from the viewer

 - Given the `DefaultExternalServices` implementation, the `PDFViewerApplication.supportsDocumentFonts` getter is guaranteed to be defined and we can thus remove some (now) unnecessary `PDFJSDev` checks from the `webViewerInitialized` function.
 - By slightly tweaking the ""pdfBugEnabled"" definition in `web/app_options`, similar to the existing ones for ""workerSrc"" and ""cMapUrl"", we can remove some `PDFJSDev` checks from the `PDFViewerApplication._parseHashParameters` method.",False
d69fb446bff53e4d8eddc520635b004f4ac986d3,2020-07-17 23:18:14,Tim van der Meij,"Merge pull request #12023 from escapewindow/issue9297

Fix auto-rotate for printing landscape PDFs where the first page is also landscape",True
90689cf08e2cc0778ea924653037b47ed8ebd72e,2020-07-17 22:52:07,Tim van der Meij,"Merge pull request #12101 from Snuffleupagus/Dict-size-getRawValues

Add a new `size` getter and `getRawValues` method, to `Dict` instances, to simplify some code",True
04db9d902f5d10d956554f07129f30f3dfbb552e,2020-07-17 20:52:04,Aki Sasaki,"ignore `isFirstPagePortrait` in `getPagesOverview`

The current behavior for `getPagesOverview` assumes we want to only
auto-rotate if:

- `enablePrintAutoRotate` is `true`
- `isFirstPagePortrait !== isPortraitOrientation(size)`

This second check is what is breaking #9297. The two PDFs linked have a
landscape orientation first page, as well as subsequent pages. Since
`false === false`, we print portrait.

Let's drop the comparison with `isFirstPagePortrait`, and print
landscape if `!isPortraitOrientation(size)`.

Fixes #9297.",False
684a7b89ac27636735e4e92ebad25d98b81eaeeb,2020-07-17 20:02:24,Jonas Jenwald,"Remove unnecessary duplication in the `addChildren` helper function (used by the `ObjectLoader`)

Besides being fewer lines of code overall, this also avoids *one* `node instanceof Dict` check for both of the `Dict`/`Stream`-cases.",False
ea8e432c45468b30c5dc2ec3768c5a0657b9f531,2020-07-17 20:02:00,Jonas Jenwald,"Add a `getRawValues` method, to `Dict` instances, to provide an easier way of getting all *raw* values

When the old `Dict.getAll()` method was removed, it was replaced with a `Dict.getKeys()` call and `Dict.get(...)` calls (in a loop).
While this pattern obviously makes a lot of sense in many cases, there's some instances where we actually want the *raw* `Dict` values (i.e. `Ref`s where applicable). In those cases, `Dict.getRaw(...)` calls are instead used within the loop. However, by introducing a new `Dict.getRawValues()` method we can reduce the number of (strictly unnecessary) function calls by simply getting the *raw* `Dict` values directly.",False
6381b5b08f69cc55cbc55564956550001cbec653,2020-07-17 19:36:11,Jonas Jenwald,"Add a `size` getter, to `Dict` instances, to provide an easier way of checking the number of entries

This removes the need to manually call `Dict.getKeys()` and check its length.",False
e63d1ebff5947a16b8157d4194618658f6ad1f37,2020-07-17 19:32:45,Tim van der Meij,"Merge pull request #12087 from Snuffleupagus/LocalGStateCache

Add local caching of ""simple"" Graphics State (ExtGState) data in `PartialEvaluator.{getOperatorList, getTextContent}` (issue 2813)",True
c55122c8289c229fa1ff51a8fdcd1b22c9a749e3,2020-07-17 19:08:09,Tim van der Meij,"Merge pull request #12089 from timvandermeij/refsetcache

Convert `RefSetCache` to a proper class and to use a `Map` internally",True
b19a1796ac49b4357d0b2332c829ea837dbbbea5,2020-07-17 17:05:29,Tim van der Meij,"Convert `RefSetCache` to a proper class and to use a `Map` internally

Using a `Map` instead of an `Object` provides some advantages such as
cheaper ways to get the size of the cache, to find out if an entry is
contained in the cache and to iterate over the cache. Moreover, we can
clear and re-use the same `Map` object now instead of creating a new
one.",False
29adbb7cd7c8080282bef4a1095effd1a4856424,2020-07-17 17:05:29,Tim van der Meij,"Implement unit tests for the `RefSetCache` primitive

This primitive did not have unit test coverage yet, which is important
for upcoming refactoring of the primitive.",False
a604973cc74fbe66e2d23fd3d4ccd7d0d7b596ad,2020-07-17 16:59:59,Tim van der Meij,"Merge pull request #12085 from tamuratak/fix_isnodejs

Make the detection of Node.js environments on Electron strict.",True
7d26f4147fc4a35b6e9bcf918d5470bc3148bd31,2020-07-17 16:07:37,Tim van der Meij,"Merge pull request #12099 from Snuffleupagus/hasBlendModes-RefSet

Use a `RefSet`, rather than a plain Object, for tracking already processed nodes in `PartialEvaluator.hasBlendModes`",True
b3480842b3380ca3827512a11a5afc01a3f2cb84,2020-07-17 13:22:36,Jonas Jenwald,"Use a `RefSet`, rather than a plain Object, for tracking already processed nodes in `PartialEvaluator.hasBlendModes`",False
03547b5633f51ebe7687be0db8b7a0df432559b2,2020-07-15 17:57:18,Jonas Jenwald,"Change `PartialEvaluator.setGState` to an `async` method

Since this method calls `Dict.get` to fetch data, there could thus be `Error`s thrown in corrupt PDF documents when attempting to resolve an indirect object.
To ensure that this won't ever become a problem, we change the method to be `async` such that a rejected Promise would be returned and general OperatorList parsing won't break.",False
f20aeb93433cb2e34b5507f7d3565c6d5512c2ce,2020-07-15 16:17:11,Jonas Jenwald,"Slightly simplify the code in `PartialEvaluator.hasBlendModes`, e.g. by using `for...of` loops

 - Replace the existing loops with `for...of` variants instead.

 - Make use of `continue`, to reduce indentation and to make the code (slightly) easier to follow, when checking `/Resources` entries.",False
15fa3f8518a1e400370d04604a5bc08198284293,2020-07-15 16:17:11,Jonas Jenwald,"Remove a redundant `/XObject` stream dictionary `objId` check in `PartialEvaluator.hasBlendModes` (PR 6971 follow-up)

This case should no longer happen, given the `instanceof Ref` branch just above (added in PR 6971).
Also, I've run the entire test-suite locally with `continue` replaced by `throw new Error(...)` and didn't find any problems.",False
84476da26e8ae232429061ab1c0106a770cc59cb,2020-07-15 16:17:07,Jonas Jenwald,"Handle lookup errors ""silently"" in `PartialEvaluator.hasBlendModes` (PR 11680 follow-up)

Given that this method is used during what's essentially a *pre*-parsing stage, before the actual OperatorList parsing occurs, on second thought it doesn't seem at all necessary to warn and trigger fallback in cases where there's lookup errors.

*Please note:* Any any errors will still be either suppressed or thrown, according to the `ignoreErrors` option, during the *actual* OperatorList parsing.",False
981ff41b5f2e432bf39458ed8b5959575ed60986,2020-07-14 14:04:43,Jonas Jenwald,"Add local caching of non-font Graphics State (ExtGState) data in `PartialEvaluator.getTextContent`

It turns out that `getTextContent` suffers from *similar* problems with repeated GStates as `getOperatorList`; please see the previous patch.

While only `/ExtGState` resources containing Fonts will actually be *parsed* by `PartialEvaluator.getTextContent`, we're still forced to fetch/validate repeated `/ExtGState` resources even though *most* of them won't affect the textContent (since they mostly contain purely graphical state).

With these changes we also no longer need to immediately reset the current text-state when encountering a `setGState` operator, which may thus improve text-selection in some cases.",False
90eb579713152a965dc627b15f5ea8b3a1050727,2020-07-14 14:04:43,Jonas Jenwald,"Add local caching of ""simple"" Graphics State (ExtGState) data in `PartialEvaluator.getOperatorList` (issue 2813)

This patch will help pathological cases the most, with issue 2813 being a particularily problematic example. While there's only *four* `/ExtGState` resources, there's a total `29062` of `setGState` operators. Even though parsing of a single `/ExtGState` resource is quite fast, having to re-parse them thousands of times does add up quite significantly.

For simplicity we'll only cache ""simple"" `/ExtGState` resource, since e.g. the general `SMask` case cannot be easily cached (without re-factoring other code, which may have undesirable effects on general parsing).

By caching ""simple"" `/ExtGState` resource, we thus improve performance by:
 - Not having to fetch/validate/parse the same `/ExtGState` data over and over.
 - Handling of repeated `setGState` operators becomes *synchronous* during the `OperatorList` building, instead of having to defer to the event-loop/microtask-queue since the `/ExtGState` parsing is done asynchronously.

---

Obviously I had intended to include (standard) benchmark results with this patch, but for reasons I don't understand the test run-time (even with `master`) of the document in issue 2813 is *a lot* slower than in the development viewer (making normal benchmarking infeasible).
However, testing this manually in the development viewer (using `pdfBug=Stats`) shows a *reduction* of `~10 %` in the rendering time of the PDF document in issue 2813.",False
6c39aff3743564f3418ba17344e14819f923a427,2020-07-14 03:20:08,Tim van der Meij,"Merge pull request #12090 from Snuffleupagus/rm-not-xobj

Stop special-casing the (very unlikely) ""no `/XObject` found""-scenario, when parsing `OPS.paintXObject` operators, in `PartialEvaluator.{getOperatorList, getTextContent}`",True
cf0ed3c30a0d2872d1257628cd0de6ca719746c8,2020-07-14 03:15:35,Tim van der Meij,"Merge pull request #12092 from Snuffleupagus/update-packages

Update packages and translations",True
8256981aca6fc4dc7173c3d0e51346c5033c6e2b,2020-07-13 14:38:28,Jonas Jenwald,Update l10n files,False
20ad4337aca4d80a6a9ea8e4086512c8b98e5953,2020-07-13 14:36:47,Jonas Jenwald,"Fix *most* vulnerabilities reported by `npm audit`

This was automatically, by using the `npm audit fix` command.",False
fac5b5ff0c0c8ea91163100cededb6cbdea05162,2020-07-13 14:35:50,Jonas Jenwald,Update `npm` packages,False
d4d7ac1b887793e9d0dd125b71ec360ab1211c12,2020-07-13 01:29:59,Jonas Jenwald,"Stop special-casing the (very unlikely) ""no `/XObject` found""-scenario, when parsing `OPS.paintXObject` operators, in `PartialEvaluator.{getOperatorList, getTextContent}`

Originally there weren't any (generally) good ways to handle errors gracefully, on the worker-side, however that's no longer the case and we can simply fallback to the existing `ignoreErrors` functionality instead.
Also, please note that the ""no `/XObject` found""-scenario should be *extremely* unlikely in practice and would only occur in corrupt/broken documents.

Note that the `PartialEvaluator.getOperatorList` case is especially bad currently, since we'll simply (attempt to) send the data as-is to the main-thread. This is quite bad, since in a corrupt/broken document the data *could* contain anything and e.g. be unclonable (which would cause breaking errors).
Also, we're (obviously) not attempting to do anything with this ""raw"" `OPS.paintXObject` data on the main-thread and simply ensuring that we never send it definately seems like the correct approach.",False
473ea1f1a46a61415aabb7be9c6e4e916ef5652d,2020-07-12 07:26:17,Takashi Tamura,"Make the detection of Node.js environments on Electron strict.
The main process and its child processes should be detected as Node.js environments.",False
7dabc5ecc8347fbda8ce4a219c182790d9ec9187,2020-07-11 03:35:11,Tim van der Meij,"Merge pull request #12063 from Snuffleupagus/issue-10989

Tweak the heuristic, in `src/core/jpg.js`, that handles JPEG images with a wildly incorrect SOF (Start of Frame) `scanLines` parameter (issue 10989)",True
c11fc3acfc9207a377f0a852dde44984bcbe0ca6,2020-07-11 03:30:45,Tim van der Meij,"Merge pull request #12083 from Snuffleupagus/ColorSpace-rm-IR

Remove the IR (internal representation) part of the ColorSpace parsing",True
d18cf474191fca913c1abaee7ce9fef7987055b3,2020-07-10 20:52:55,Jonas Jenwald,"Remove the special handling, used when creating Indexed ColorSpaces, for the case where the `lookup`-data is a `Stream`

This special-case was added in PR 1992, however it became unnecessary with the changes in PR 4824 since all of the ColorSpace parsing is now done on the worker-thread (with only RGB-data being sent to the main-thread).",False
ea6a0e4435615ba99486a9a938b0e706c7fefa14,2020-07-10 20:52:44,Jonas Jenwald,"Remove the IR (internal representation) part of the ColorSpace parsing

Originally ColorSpaces were only *partially* parsed on the worker-thread, to obtain an IR-format which was sent to the main-thread. This had the somewhat unfortunate side-effect of causing the majority of the (potentially heavy) ColorSpace parsing to happen on the main-thread.
Hence PR 4824 which, among other things, changed ColorSpaces to be *fully* parsed on the worker-thread with only RGB-data being sent to the main-thread.

While it thus originally was necessary to have `ColorSpace.{parseToIR, fromIR}` methods, to handle the worker/main-thread split, that's no longer the case and we can thus reduce all of the ColorSpace parsing to one method instead.

Currently, when parsing a ColorSpace, we call `ColorSpace.parseToIR` which parses the ColorSpace-data from the document and then creates the IR-format. We then, immediately, call `ColorSpace.fromIR` which parses the IR-format and then finally creates the actual ColorSpace.[1]
All-in-all, this leads to a fair amount of unnecessary indirection which also (in my opinion) makes the code less clear.

Obviously these changes are not really expected to have a significant effect on performance, especially with the recently added caching of ColorSpaces, however there'll now be strictly fewer function calls, less memory allocated, and overall less parsing required during ColorSpace-handling.

---
[1] For ICCBased ColorSpaces, given the validation necessary, this currently even leads to parsing an /Alternate ColorSpace *twice*.",False
38cf49bb8181c4c8b8effef44fbd9d4068fb0d17,2020-07-10 03:14:33,Tim van der Meij,"Merge pull request #12070 from Snuffleupagus/createFontId

Re-factor the `idFactory` functionality, used in the `core/`-code, and move the `fontID` generation into it",True
72d71ba6a556093a1c88525e827e59590c9151f1,2020-07-09 03:40:40,Tim van der Meij,"Merge pull request #12056 from Snuffleupagus/_delayedFallback

Refactor/simplify the ""delayedFallback"" handling in the default viewer",True
f9157ec2436a99355045ae874da28fe67ac1f391,2020-07-08 19:35:25,Jonas Jenwald,"Unconditionally report telemetry, in the viewer, regardless of build target

Given the dummy-methods on `DefaultExternalServices`, there's no longer any compelling reason not to (attempt to) report telemetry unconditionally.

The only larger change consists of moving the `KNOWN_VERSIONS` and `KNOWN_GENERATORS` arrays ouf of the `PDFViewerApplication._initializeMetadata` method.

*Please note:* Most of this patch consists of whitespace-only changes.",False
625f8a6f517ab164c9d33284dc7cb44cff7b3e74,2020-07-08 19:00:07,Jonas Jenwald,"Refactor/simplify the ""delayedFallback"" handling in the default viewer

There's a few things that could be improved in the current implementation, such as:
 - It's currently necessary to *both* manually track the `featureId`s which should trigger delayed fallback, as well as manually report telemetry in affected cases.
Obviously there's only two call-sites as of now (forms and javaScript), but it still feels somewhat error-prone especially if more cases were to be added in the future. To address this, this patch adds a new (private) method which abstracts away these details from the call-sites.

 - Generally, it also seems nice to reduce *and* simplify the amount of state we need to store on `PDFViewerApplication` in order to support the ""delayedFallback"" functionality.
Also, having to *manually* work with the ""delayedFallback""-array in multiple places feels cumbersome and makes e.g. the `PDFViewerApplication.fallback` method less clear as to its behaviour.

 - Having code *outside* of `PDFViewerApplication`, i.e. in the event handlers, directly access properties which are marked as ""private"" via a leading underscore doesn't seem that great in general.
Furthermore, having the event handlers directly deal with that should be internal state also seem unfortunate. To address this, the patch will instead make use of a new `PDFViewerApplication.triggerDelayedFallback` callback.

 - There's at least one code-path in the viewer, see `PDFViewerApplication.error`, where `fallback` can be called without an argument.
It's currently possible (although maybe somewhat unlikely) that such a call *could* be overridden by the `featureId` of a pending ""delayedFallback"" call, thus not reporting the *correct* fallback reason.

 - The ""delayedFallback""-state weren't being reset on document close (which shouldn't affect Firefox, but nonetheless it ought to be fixed).",False
780faf6b2656d63e6107307c8c6157b8e4c93e04,2020-07-08 03:44:02,Tim van der Meij,"Merge pull request #12072 from mozilla/dependabot/npm_and_yarn/npm-6.14.6

Bump npm from 6.14.5 to 6.14.6",True
82b193045286a9f2f0153bd60e3334a8b45dd1bc,2020-07-08 00:55:19,dependabot[bot],"Bump npm from 6.14.5 to 6.14.6

Bumps [npm](https://github.com/npm/cli) from 6.14.5 to 6.14.6.
- [Release notes](https://github.com/npm/cli/releases)
- [Changelog](https://github.com/npm/cli/blob/latest/CHANGELOG.md)
- [Commits](https://github.com/npm/cli/compare/v6.14.5...v6.14.6)

Signed-off-by: dependabot[bot] <support@github.com>",False
4cc6797f1710a75bb1dd74f9436f01236e66f928,2020-07-07 20:03:31,Jonas Jenwald,"Re-factor the `idFactory` functionality, used in the `core/`-code, and move the `fontID` generation into it

Note how the `getFontID`-method in `src/core/fonts.js` is *completely* global, rather than properly tied to the current document. This means that if you repeatedly open and parse/render, and then close, even the *same* PDF document the `fontID`s will still be incremented continuously.

For comparison the `createObjId` method, on `idFactory`, will always create a *consistent* id, assuming of course that the document and its pages are parsed/rendered in the same order.

In order to address this inconsistency, it thus seems reasonable to add a new `createFontId` method on the `idFactory` and use that when obtaining `fontID`s. (When the current `getFontID` method was added the `idFactory` didn't actually exist yet, which explains why the code looks the way it does.)
*Please note:* Since the document id is (still) part of the `loadedName`, it's thus not possible for different documents to have identical font names.",False
cf8daaf78bf9a2cd0487f5a17116835419db4ec5,2020-07-07 03:20:36,Tim van der Meij,"Merge pull request #12060 from Snuffleupagus/evaluator-class

Convert the code in `src/core/evaluator.js` to use standard classes",True
1d66fce78160a5176a3edf3f9acfc741730f4ce4,2020-07-06 16:36:49,Jonas Jenwald,"Tweak the heuristic, in `src/core/jpg.js`, that handles JPEG images with a wildly incorrect SOF (Start of Frame) `scanLines` parameter (issue 10989)",False
c95fbb6e21e92311491ce3936b431f26ad3c2b65,2020-07-05 19:31:04,Jonas Jenwald,"Convert the code in `src/core/evaluator.js` to use standard classes

This removes additional `// eslint-disable-next-line no-shadow` usage, which our old pseudo-classes necessitated.

Most of the re-formatting changes, after the `class` definitions and methods were fixed, were done automatically by Prettier.

*Please note:* I'm purposely not doing any `var` to `let`/`const` conversion here, since it's generally better to (if possible) do that automatically on e.g. a directory basis instead.",False
32a0b6fa734d37503690b279cc3d1cac548ad48c,2020-07-05 19:26:23,Jonas Jenwald,"Move some constants and helper functions out of the `PartialEvaluator` closure

This will simplify the `class` conversion in the next patch, and with modern JavaScript the moved code is still limited to the current module scope.

*Please note:* For improved consistency with our usual formatting, the `TILING_PATTERN`/`SHADING_PATTERN` constants where re-factored slightly.",False
c4255fdbfd76ab3e14b33a546c6348394a857d38,2020-07-05 17:38:55,Tim van der Meij,"Merge pull request #12059 from Snuffleupagus/image-class

Convert the code in `src/core/image.js` to use ES6 classes",True
4ef43ca44b82b2ac74ce54262cfbc0cd09060e62,2020-07-05 17:35:45,Tim van der Meij,"Merge pull request #12057 from Snuffleupagus/BaseLocalCache-onlyRefs

Allow `BaseLocalCache` to, optionally, only allocate storage for caching of references (PR 12034 follow-up)",True
59da1d5829d27e6f034f3f5dc4f9c5abd517fc5b,2020-07-05 13:04:14,Jonas Jenwald,"Convert the code in `src/core/image.js` to use ES6 classes

This removes additional `// eslint-disable-next-line no-shadow` usage, which our old pseudo-classes necessitated.

*Please note:* I'm purposely not doing any `var` to `let`/`const` conversion here, since it's generally better to (if possible) do that automatically on e.g. a directory basis instead.",False
85ced3fbfdf25e95a9dc9df4a2e8e5c015ff2858,2020-07-04 18:31:32,Jonas Jenwald,"Allow `BaseLocalCache` to, optionally, only allocate storage for caching of references (PR 12034 follow-up)

*Yet another instalment in the never-ending series of things that you think of __after__ a patch has landed.*

Since `Function`s are only cached by reference, we thus don't need to allocate storage for names in `LocalFunctionCache` instances. Obviously the effect of these changes are *really tiny*, but it seems reasonable in principle to avoid allocating data structures that are guaranteed to be unused.",False
29548ad4986bb68a5d12d89e8fedac8ab35c480a,2020-07-04 15:35:15,Tim van der Meij,"Merge pull request #12034 from Snuffleupagus/Function-local-cache-3

Add local caching of `Function`s, by reference, in the `PDFFunctionFactory` (issue 2541)",True
ca719ecaa4b39e08b5ea31e01f82ca6db19a8845,2020-07-04 04:25:18,Jonas Jenwald,"Add local caching of `Function`s, by reference, in the `PDFFunctionFactory` (issue 2541)

Note that compared other structures, such as e.g. Images and ColorSpaces, `Function`s are not referred to by name, which however does bring the advantage of being able to share the cache for an *entire* page.
Furthermore, similar to ColorSpaces, the parsing of individual `Function`s are generally fast enough to not really warrant trying to cache them in any ""smarter"" way than by reference. (Hence trying to do caching similar to e.g. Fonts would most likely be a losing proposition, given the amount of data lookup/parsing that'd be required.)

Originally I tried implementing this similar to e.g. the recently added ColorSpace caching (and in a couple of different ways), however it unfortunately turned out to be quite ugly/unwieldy given the sheer number of functions/methods where you'd thus need to pass in a `LocalFunctionCache` instance. (Also, the affected functions/methods didn't exactly have short signatures as-is.)
After going back and forth on this for a while it seemed to me that the simplest, or least ""invasive"" if you will, solution would be if each `PartialEvaluator` instance had its *own* `PDFFunctionFactory` instance (since the latter is already passed to all of the required code). This way each `PDFFunctionFactory` instances could have a local `Function` cache, without it being necessary to provide a `LocalFunctionCache` instance manually at every `PDFFunctionFactory.{create, createFromArray}` call-site.

Obviously, with this patch, there's now (potentially) more `PDFFunctionFactory` instances than before when the entire document shared just one. However, each such instance is really quite small and it's also tied to a `PartialEvaluator` instance and those are *not* kept alive and/or cached. To reduce the impact of these changes, I've tried to make as many of these structures as possible *lazily initialized*, specifically:

 - The `PDFFunctionFactory`, on `PartialEvaluator` instances, since not all kinds of general parsing actually requires it. For example: `getTextContent` calls won't cause any `Function` to be parsed, and even some `getOperatorList` calls won't trigger `Function` parsing (if a page contains e.g. no Patterns or ""complex"" ColorSpaces).

 - The `LocalFunctionCache`, on `PDFFunctionFactory` instances, since only certain parsing requires it. Generally speaking, only e.g. Patterns, ""complex"" ColorSpaces, and/or (some) SoftMasks will trigger any `Function` parsing.

To put these changes into perspective, when loading/rendering all (14) pages of the default `tracemonkey.pdf` file there's now a total of 6 `PDFFunctionFactory` and 1 `LocalFunctionCache` instances created thanks to the lazy initialization.
(If you instead would keep the document-""global"" `PDFFunctionFactory` instance and pass around `LocalFunctionCache` instances everywhere, the numbers for the `tracemonkey.pdf` file would be instead be something like 1 `PDFFunctionFactory` and 6 `LocalFunctionCache` instances.)
All-in-all, I thus don't think that the `PDFFunctionFactory` changes should be generally problematic.

With these changes, we can also modify (some) call-sites to pass in a `Reference` rather than the actual `Function` data. This is nice since `Function`s can also be `Streams`, which are not cached on the `XRef` instance (given their potential size), and this way we can avoid unnecessary lookups and thus save some additional time/resources.

Obviously I had intended to include (standard) benchmark results with these changes, but for reasons I don't really understand the test run-time (even with `master`) of the document in issue 2541 is quite a bit slower than in the development viewer.
However, logging the time it takes for the relevant `PDFFunctionFactory`/`PDFFunction ` parsing shows that it takes *approximately* `0.5 ms` for the `Function` in question. Looking up a cached `Function`, on the other hand, is *one order of magnitude faster* which does add up when the same `Function` is invoked close to 2000 times.",False
1f7175542e6ea155ddaeb17ded6a66b3c435d9e5,2020-07-04 04:12:52,Tim van der Meij,"Merge pull request #12039 from Snuffleupagus/Node-utils

[api-minor] Use the `NodeCanvasFactory`/`NodeCMapReaderFactory` classes as defaults in Node.js environments (issue 11900)",True
4a7e29865da590a33894d6ec39d0a070cfca1643,2020-07-02 08:14:23,Jonas Jenwald,"[api-minor] Use the `NodeCanvasFactory`/`NodeCMapReaderFactory` classes as defaults in Node.js environments (issue 11900)

This moves, and slightly simplifies, code that's currently residing in the unit-test utils into the actual library, such that it's bundled with `GENERIC`-builds and used in e.g. the API-code.

As an added bonus, this also brings out-of-the-box support for CMaps in e.g. the Node.js examples.",False
fe3df495cc0c2b1232ae367d30fba0f135889110,2020-07-02 04:11:41,Brendan Dahl,"Merge pull request #12040 from wojtekmaj/replace-non-inclusive

Replace non-inclusive ""whitelist"" term with ""allowlist""",True
ec635b822a261432e0245d8f033395665b2f3de7,2020-07-02 03:46:28,Tim van der Meij,"Merge pull request #12044 from Snuffleupagus/issue-12010

Adjust the heuristics used when dealing with rectangles, i.e. `re` operators, with zero width/height (issue 12010)",True
fef24658e7e0d993ce3fd3c03e2ce7473b376dc2,2020-07-02 03:32:49,Jonas Jenwald,"Adjust the heuristics used when dealing with rectangles, i.e. `re` operators, with zero width/height (issue 12010)",False
75fed026301ade971da46c40597cf3c0bc65d7c9,2020-07-02 03:21:21,Tim van der Meij,"Merge pull request #12043 from Snuffleupagus/issue-4260-test

Add a reduced test-case for issue 4260 (PR 4521 follow-up)",True
3359739ffeb615ed7f5b4bb8dfdde816b8f791c4,2020-07-02 03:18:37,Tim van der Meij,"Merge pull request #12036 from Snuffleupagus/test-renderTaskOnContinue

Add at least *some* test-coverage for the `RenderTask.onContinue` functionality",True
4097c83602b1196abe10f1dac053faa5cd34870c,2020-07-02 03:14:28,Tim van der Meij,"Merge pull request #12049 from Snuffleupagus/eslint_no-promise-executor-return

Enable the `no-promise-executor-return` ESLint rule",True
4bc5bc454eee592e4eb39d2188e56f030db6e739,2020-07-01 16:31:39,Jonas Jenwald,"Enable the `no-promise-executor-return` ESLint rule

Please see https://eslint.org/docs/rules/no-promise-executor-return for additional information.",False
e451cabe3734f4a27566b2c7e2ef55c570d771f8,2020-06-30 12:56:41,Jonas Jenwald,Add a reduced test-case for issue 4260 (PR 4521 follow-up),False
bce306f168804af19d8d155152b2d53512ac6275,2020-06-30 02:06:06,Brendan Dahl,"Merge pull request #12041 from sylvestre/patch-1

Replace Mozilla Labs by just Mozilla",True
529062a61bd53bd844c7b1ab04e1f666a8c357ca,2020-06-29 21:18:35,Sylvestre Ledru,"Replace Mozilla Labs by just Mozilla

Mozilla labs isn't a thing",False
78970bbbe1f6e292c1314fafc5fc49d1ace22c2e,2020-06-29 20:45:14,Wojciech Maj,"Replace non-inclusive ""whitelist"" term with ""allowlist""",False
4a5b68e077c4dc2c8bcbd78c0d3b84feb7b47bc6,2020-06-29 04:08:34,Jonas Jenwald,"Add at least *some* test-coverage for the `RenderTask.onContinue` functionality

The default viewer, and thus Firefox, depends on the `RenderTask.onContinue` functionality to pause/continue rendering (such that the most visible page always renders first).
Despite this functionality thus being very important, it has however never actually been tested *at all* as far as I can tell. Hence this patch which adds a new boolean `renderTaskOnContinue` parameter (`false` by default), that can be used to force a reference-test to use the `RenderTask.onContinue` code-path in the `InternalRenderTask` class.

Note that I purposely made this new reference-test behaviour *optional*, since I didn't want to negatively affect the general runtime of the tests (given that there's a slight delay added to the rendering). Also, for e.g. benchmarking you'd most likely want to stay away from the `RenderTask.onContinue` functionality for similar reasons.",False
9993397e30bdd6c3e63800753da3e4c971fa2f35,2020-06-28 18:54:53,Tim van der Meij,"Merge pull request #12032 from Snuffleupagus/update-packages

Update packages and translations",True
93b18875128b454eb66c7e1a2698e85a634d2058,2020-06-27 15:07:41,Jonas Jenwald,Update l10n files,False
ff3fbb91b9910937b312eccf2c26f9697d80f6d8,2020-06-27 15:02:51,Jonas Jenwald,"Fix *most* vulnerabilities reported by `npm audit`

This was automatically, by using the `npm audit fix` command.",False
1d6d1c78ae5e7fe6ae3e4aad4bd485ae5d32f5d2,2020-06-27 15:00:30,Jonas Jenwald,Update `npm` packages,False
d8d6a9841824c42b01e73bf6ae64a686d340eb14,2020-06-27 03:04:54,Tim van der Meij,"Merge pull request #12028 from Snuffleupagus/issue-11124

Attempt to detect inline images which contain ""EI"" sequence in the actual image data (issue 11124)",True
43c22195175e1a4deb5852a63eb3f1a746686be7,2020-06-27 02:45:51,Tim van der Meij,"Merge pull request #12024 from DylanLacey/update_needle

Update Needle to 2.5.0 or greater.",True
28d2ada59ca2a19c0206f06aeb29fefb5309ec28,2020-06-26 16:45:06,Jonas Jenwald,"Attempt to detect inline images which contain ""EI"" sequence in the actual image data (issue 11124)

This should reduce the possibility of accidentally truncating some inline images, while *not* causing the ""EI"" detection to become significantly slower.[1]
There's obviously a possibility that these added checks are not sufficient to catch *every* single case of ""EI"" sequences within the actual inline image data, but without specific test-cases I decided against over-engineering the solution here.

*Please note:* The interpolation issues are somewhat orthogonal to the main issue here, which is the truncated image, and it's already tracked elsewhere.

---
[1] I've looked at the issue a few times, and this is the first approach that I was able to come up with that didn't cause *unacceptable* performance regressions in e.g. issue 2618.",False
f2b295882f19e8ff36e173eee7d2656dd5095b3f,2020-06-25 09:24:54,Dylan Lacey,"Update Needle to 2.5.0 or greater.

Versions of `needle` prior to `2.5.0` cannot cope with redirects (as documented: https://github.com/tomas/needle/issues/312).

This prevents prebuilt `canvas` binaries from being downloaded on MacOS,
requiring the global install of its dependencies.

Updating Needle restores it to functionality, addressing this.  It also avoids
the need to add `request` to `package.json`; it also obsoletes https://github.com/mozilla/pdf.js/pull/12018.",False
276d917b7c54fdd41c597ddbe7ea392d5c1cff2b,2020-06-25 03:36:32,Tim van der Meij,"Merge pull request #12012 from Snuffleupagus/ColorSpace-parse-cache

Improve (local) caching of parsed `ColorSpace`s (PR 12001 follow-up)",True
b8e135293458b02a2bedce45ed3e5e45237208ae,2020-06-25 03:23:10,Jonas Jenwald,"Stop passing in unnecessary parameters when parsing the `Alternate` entry of `ICCBased` ColorSpaces (PR 9659 follow-up)

With the changes made in PR 9659, `ColorSpace.fromIR` no longer takes a second `pdfFunctionFactory` parameter and there's thus one call-site that can be simplified.",False
19d79764836d34ef224da0b21d7d92933b67d3d4,2020-06-25 03:23:10,Jonas Jenwald,"Improve (local) caching of parsed `ColorSpace`s (PR 12001 follow-up)

This patch contains the following *notable* improvements:
 - Changes the `ColorSpace.parse` call-sites to, where possible, pass in a reference rather than actual ColorSpace data (necessary for the next point).
 - Adds (local) caching of `ColorSpace`s by `Ref`, when applicable, in addition the caching by name. This (generally) improves `ColorSpace` caching for e.g. the SMask code-paths.
 - Extends the (local) `ColorSpace` caching to also apply when handling Images and Patterns, thus further reducing unneeded re-parsing.
 - Adds a new `ColorSpace.parseAsync` method, almost identical to the existing `ColorSpace.parse` one, but returning a Promise instead (this simplifies some code in the `PartialEvaluator`).",False
51e87b924812b8ba406cbf59b558bfe525be2426,2020-06-25 03:23:10,Jonas Jenwald,"Add a proper `LocalColorSpaceCache` class, rather than piggybacking on the image one (PR 12001 follow-up)

This will allow caching of ColorSpaces by either `Name` *or* `Ref`, which doesn't really make sense for images, thus allowing (better) caching for ColorSpaces used with e.g. Images and Patterns.",False
e22bc483a59085ef23add359a8b05cb901cd25ce,2020-06-25 03:23:10,Jonas Jenwald,"Re-factor `ColorSpace.parse` to take a parameter object, rather than a bunch of (randomly) ordered parameters

Given the number of existing parameters, this will avoid needlessly unwieldy call-sites especially with upcoming changes in later patches.",False
ac4a5c3ace85c22880e2fb9ead3cff4fbb12c5c4,2020-06-25 03:14:52,Tim van der Meij,"Merge pull request #12021 from Snuffleupagus/move-fetchBuiltInCMap

Move the `fetchBuiltInCMap` method to the `PartialEvaluator.prototype`",True
f0708717a9f7bb9176e295e6e9f39128d7ca8e28,2020-06-24 20:59:47,Jonas Jenwald,"Move the `fetchBuiltInCMap` method to the `PartialEvaluator.prototype`

Defining this *inline* in the ""constructor"" looks slightly weird (I really don't know why I wrote it like that originally), and it can simply be changed to a regular method instead.",False
c1cb9ee9fc8f5af8f0a8ed1417ac716ac9477f24,2020-06-21 23:08:27,Tim van der Meij,"Merge pull request #12016 from Snuffleupagus/issue-8078

Tweak the `QueueOptimizer` to recognize `OPS.paintImageMaskXObject` operators as *repeated* when the ""skew"" transformation matrix elements are non-zero (issue 8078)",True
3c81b5e26ed6890d43fda8f8a8921bbc70f53d37,2020-06-21 23:00:34,Tim van der Meij,"Merge pull request #12017 from Snuffleupagus/api-intentStates-Map

Convert the `PDFPageProxy.intentStates` property from an `Object` to a `Map`",True
4cb0c032f3753dcc82077551ced0d7f9da430187,2020-06-21 20:32:42,Jonas Jenwald,"Convert the `PDFPageProxy.intentStates` property from an `Object` to a `Map`

As can be seen in the code there's a handful of places where this structure needs to be iterated, something that becomes cumbersome when dealing with `Object`s. Hence, by changing this to a `Map` instead we can both simplify the code and avoid creating unnecessary closures.

Particularily the `PDFPageProxy._tryCleanup` method becomes a lot more readable, at least in my opinion.

Finally, since this property is intended to be ""private"" the name is adjusted to reflect that.",False
cabc2cc4fcc5c2361c693e4324419f3b49b2479b,2020-06-21 19:26:14,Jonas Jenwald,"Add a `InternalRenderTask.completed` getter and use it to simplify `PDFPageProxy._destroy`

This patch aims to simplify the `PDFPageProxy._destroy` method, by:
 - Replacing the unnecessary `forEach` with a ""regular"" `for`-loop instead.
 - Use a more appropriate variable name, since `intentState.renderTasks` contain instances of `InternalRenderTask`.
 - Move the ""is rendering completed""-handling to a new `InternalRenderTask.completed` getter, to abstract away some (mostly) internal `InternalRenderTask` state.",False
a04a5d8325ff967a26f4baae3413a3d061c3f29f,2020-06-21 14:59:05,Jonas Jenwald,"Tweak the loop in `ChunkedStreamManager.abort` to clarify what's being iterated (PR 11985 follow-up)

In hindsight, using the `for (let [key, value] of myMap) { ... }`-format when we don't care about the `key` probably wasn't such a great idea. Since `Map`s have explicit support for iterating either `key`s or `value`s, we should probably use that instead here.",False
e18fa3fc455aebe34a014f28d74df350bd7c1dc1,2020-06-20 15:48:48,Jonas Jenwald,"Tweak the `QueueOptimizer` to recognize `OPS.paintImageMaskXObject` operators as *repeated* when the ""skew"" transformation matrix elements are non-zero (issue 8078)

*First of all, I should mention that my understanding of the finer details of the `QueueOptimizer` (and its related `CanvasGraphics` methods) is somewhat limited.*
Hence I'm not sure if there's actually a very good reason for *only* considering ImageMasks where the ""skew"" transformation matrix elements are zero as *repeated*, however simply looking at the code I just don't see why these elements cannot be non-zero as long as they are *all identical* for the ImageMasks.
Furthermore, looking at the *group* case (which is what we're currently falling back to), there's no particular limitation placed upon the transformation matrix elements.

While this patch obviously isn't enough to *completely* fix the issue, since there should be a visible Pattern rendered as well[1], it seem (at least to me) like enough of an improvement that submitting this is justified.
With these changes the referenced PDF document will no longer hang the *entire* browser, and rendering also finishes in a *reasonable* time (< 10 seconds for me) which seem fine given the *huge* number of identical inline images present.[2]

---
[1] Temporarily changing the Pattern to a solid color *does* render the correct/expected area, which suggests that the remaining problem is a pre-existing issue related to the Pattern-handling itself rather than the `QueueOptimizer` functionality.

[2] The document isn't exactly rendered immediately in e.g. Adobe Reader either.",False
8cfdfb237abc3a20013306eb43dd4cfdb76e4a8e,2020-06-18 03:00:28,Tim van der Meij,"Merge pull request #12005 from Snuffleupagus/cff-class

Convert the code in `src/core/cff_parser.js` to use ES6 classes",True
3067917582b22497b52b22fe112df65a87896abd,2020-06-18 02:53:17,Tim van der Meij,"Merge pull request #12004 from Snuffleupagus/worker-class

Convert the code in `src/core/worker.js` to use ES6 classes",True
880a0a0f59994a90e11f603f9acd50080f5a5d61,2020-06-16 16:03:21,Jonas Jenwald,"Convert the code in `src/core/cff_parser.js` to use ES6 classes

This removes multiple instances of `// eslint-disable-next-line no-shadow`, which our old pseudo-classes necessitated.

*Please note:* I'm purposely not doing any `var` to `let`/`const` conversion here, since it's generally better to (if possible) do that automatically on e.g. a directory basis instead.",False
fb9b574f3d2c7b69b067dd87350c56cfef6725a9,2020-06-16 15:24:59,Jonas Jenwald,"Convert the code in `src/core/worker.js` to use ES6 classes

This removes one instance of `// eslint-disable-next-line no-shadow`, which our old pseudo-classes necessitated.

*Please note:* I'm purposely not doing any `var` to `let`/`const` conversion here, since it's generally better to (if possible) do that automatically on e.g. a directory basis instead.",False
6bb64da1c33f7c867af8ac34337e89055729a17b,2020-06-16 03:19:14,Tim van der Meij,"Merge pull request #12002 from Snuffleupagus/cff-encodeNumber

Small improvements in `CFFCompiler.encodeNumber` and `CFFCompiler.encodeFloat`",True
87b089ba42ccd6c2069b328586c9f2153c2e9491,2020-06-15 17:21:28,Jonas Jenwald,"Lazily initialize, and cache, the regular expression used in `CFFCompiler.encodeFloat`

There's no particular reason for re-creating the regular expression over and over for every `encodeFloat` invocation, as far as I can tell.",False
517d92a1213c46224f1cc66ad49b6a7b5bf8ef5f,2020-06-15 17:21:20,Jonas Jenwald,"Simplify the ""is integer"" checks in `CFFCompiler.encodeNumber`

The `isNaN` check is obviously redundant, since `NaN` is the only value that isn't equal to itself; see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN#Examples

The `parseFloat`/`parseInt` comparison would make sense if the `value` ever contains a String, which however is never actually the case. Besides looking through the code, I've also run the entire test-suite locally with `assert(typeof value === ""number"", ""encodeNumber"");` added at the top of the method and there were no failures.

Hence we can simplify the ""is integer"" check a bit in the `CFFCompiler.encodeNumber` method.",False
a91f24cda9163cdf07509e12898a8c398d6b15de,2020-06-14 16:50:13,Tim van der Meij,"Merge pull request #12001 from Snuffleupagus/cache-ColorSpace-locally

Add local caching of `ColorSpace`s, by name, in `PartialEvaluator.getOperatorList` (issue 2504)",True
5c39de805cd56952611852153ad1725516bd6778,2020-06-14 15:21:45,Jonas Jenwald,"Add local caching of `ColorSpace`s, by name, in `PartialEvaluator.getOperatorList` (issue 2504)

By caching parsed `ColorSpace`s, we thus don't need to re-parse the same data over and over which saves CPU cycles *and* reduces peak memory usage. (Obviously persistent memory usage *may* increase a tiny bit, but since the caching is done per `PartialEvaluator.getOperatorList` invocation and given that `ColorSpace` instances generally hold very little data this shouldn't be much of an issue.)
Furthermore, by caching `ColorSpace`s we can also lookup the already parsed ones *synchronously* during the `OperatorList` building, instead of having to defer to the event loop/microtask queue since the parsing is done asynchronously (such that error handling is easier).

Possible future improvements:
 - Cache/lookup parsed `ColorSpaces` used in `Pattern`s and `Image`s.
 - Attempt to cache *local* `ColorSpace`s by reference as well, in addition to only by name, assuming that there's documents where that would be beneficial and that it's not too difficult to implement.
 - Assuming there's documents that would benefit from it, also cache repeated `ColorSpace`s *globally* as well.

Given that we've never, until now, been doing *any* caching of parsed `ColorSpace`s and that even using a simple name-only *local* cache helps tremendously in pathological cases, I purposely decided against complicating the implementation too much initially.
Also, compared to parsing of `Image`s, simply creating a `ColorSpace` instance isn't that expensive (hence I'd be somewhat surprised if adding a *global* cache would help much).

---

This patch was tested using:
 - The default `tracemonkey` PDF file, which was included mostly to show that ""normal"" documents aren't negatively affected by these changes.
 - The PDF file from issue 2504, i.e. https://dl-ctlg.panasonic.com/jp/manual/sd/sd_rbm1000_0.pdf, where most pages will switch *thousands* of times between a handful of `ColorSpace`s.

with the following manifest file:
```
[
    {  ""id"": ""tracemonkey"",
       ""file"": ""pdfs/tracemonkey.pdf"",
       ""md5"": ""9a192d8b1a7dc652a19835f6f08098bd"",
       ""rounds"": 100,
       ""type"": ""eq""
    },
    {  ""id"": ""issue2504"",
       ""file"": ""../web/pdfs/issue2504.pdf"",
       ""md5"": """",
       ""rounds"": 20,
       ""type"": ""eq""
    }
]
```

which gave the following results when comparing this patch against the `master` branch:
 - Overall
```
-- Grouped By browser, pdf, stat --
browser | pdf         | stat         | Count | Baseline(ms) | Current(ms) |  +/- |     %  | Result(P<.05)
------- | ----------- | ------------ | ----- | ------------ | ----------- | ---- | ------ | -------------
firefox | issue2504   | Overall      |   640 |          977 |         497 | -479 | -49.08 |        faster
firefox | issue2504   | Page Request |   640 |            3 |           4 |    1 |  59.18 |
firefox | issue2504   | Rendering    |   640 |          974 |         493 | -481 | -49.37 |        faster
firefox | tracemonkey | Overall      |  1400 |          116 |         111 |   -5 |  -4.43 |
firefox | tracemonkey | Page Request |  1400 |            2 |           2 |    0 |  -2.86 |
firefox | tracemonkey | Rendering    |  1400 |          114 |         109 |   -5 |  -4.47 |
```

 - Page-specific
```
-- Grouped By browser, pdf, page, stat --
browser | pdf         | page | stat         | Count | Baseline(ms) | Current(ms) |   +/- |      %  | Result(P<.05)
------- | ----------- | ---- | ------------ | ----- | ------------ | ----------- | ----- | ------- | -------------
firefox | issue2504   | 0    | Overall      |    20 |         2295 |        1268 | -1027 |  -44.76 |        faster
firefox | issue2504   | 0    | Page Request |    20 |            6 |           7 |     1 |   15.32 |
firefox | issue2504   | 0    | Rendering    |    20 |         2288 |        1260 | -1028 |  -44.93 |        faster
firefox | issue2504   | 1    | Overall      |    20 |         3059 |        2806 |  -252 |   -8.25 |        faster
firefox | issue2504   | 1    | Page Request |    20 |           11 |          14 |     3 |   23.25 |        slower
firefox | issue2504   | 1    | Rendering    |    20 |         3047 |        2792 |  -255 |   -8.37 |        faster
firefox | issue2504   | 2    | Overall      |    20 |          411 |         295 |  -116 |  -28.20 |        faster
firefox | issue2504   | 2    | Page Request |    20 |            2 |          42 |    40 | 1897.62 |
firefox | issue2504   | 2    | Rendering    |    20 |          409 |         253 |  -156 |  -38.09 |        faster
firefox | issue2504   | 3    | Overall      |    20 |          736 |         299 |  -437 |  -59.34 |        faster
firefox | issue2504   | 3    | Page Request |    20 |            2 |           2 |     0 |    0.00 |
firefox | issue2504   | 3    | Rendering    |    20 |          734 |         297 |  -437 |  -59.49 |        faster
firefox | issue2504   | 4    | Overall      |    20 |          356 |         458 |   102 |   28.63 |
firefox | issue2504   | 4    | Page Request |    20 |            1 |           2 |     1 |   57.14 |        slower
firefox | issue2504   | 4    | Rendering    |    20 |          354 |         455 |   101 |   28.53 |
firefox | issue2504   | 5    | Overall      |    20 |         1381 |         765 |  -616 |  -44.59 |        faster
firefox | issue2504   | 5    | Page Request |    20 |            3 |           5 |     2 |   50.00 |        slower
firefox | issue2504   | 5    | Rendering    |    20 |         1378 |         760 |  -617 |  -44.81 |        faster
firefox | issue2504   | 6    | Overall      |    20 |          757 |         299 |  -459 |  -60.57 |        faster
firefox | issue2504   | 6    | Page Request |    20 |            2 |           5 |     3 |  150.00 |        slower
firefox | issue2504   | 6    | Rendering    |    20 |          755 |         294 |  -462 |  -61.11 |        faster
firefox | issue2504   | 7    | Overall      |    20 |          394 |         302 |   -92 |  -23.39 |        faster
firefox | issue2504   | 7    | Page Request |    20 |            2 |           1 |    -1 |  -34.88 |        faster
firefox | issue2504   | 7    | Rendering    |    20 |          392 |         301 |   -91 |  -23.32 |        faster
firefox | issue2504   | 8    | Overall      |    20 |         2875 |         979 | -1896 |  -65.95 |        faster
firefox | issue2504   | 8    | Page Request |    20 |            1 |           2 |     0 |   11.11 |
firefox | issue2504   | 8    | Rendering    |    20 |         2874 |         978 | -1896 |  -65.99 |        faster
firefox | issue2504   | 9    | Overall      |    20 |          700 |         332 |  -368 |  -52.60 |        faster
firefox | issue2504   | 9    | Page Request |    20 |            3 |           2 |     0 |   -4.00 |
firefox | issue2504   | 9    | Rendering    |    20 |          698 |         329 |  -368 |  -52.78 |        faster
firefox | issue2504   | 10   | Overall      |    20 |         3296 |         926 | -2370 |  -71.91 |        faster
firefox | issue2504   | 10   | Page Request |    20 |            2 |           2 |     0 |  -18.75 |
firefox | issue2504   | 10   | Rendering    |    20 |         3293 |         924 | -2370 |  -71.96 |        faster
firefox | issue2504   | 11   | Overall      |    20 |          524 |         197 |  -327 |  -62.34 |        faster
firefox | issue2504   | 11   | Page Request |    20 |            2 |           3 |     1 |   58.54 |
firefox | issue2504   | 11   | Rendering    |    20 |          522 |         194 |  -328 |  -62.81 |        faster
firefox | issue2504   | 12   | Overall      |    20 |          752 |         369 |  -384 |  -50.98 |        faster
firefox | issue2504   | 12   | Page Request |    20 |            3 |           2 |    -1 |  -36.51 |        faster
firefox | issue2504   | 12   | Rendering    |    20 |          749 |         367 |  -382 |  -51.05 |        faster
firefox | issue2504   | 13   | Overall      |    20 |          679 |         487 |  -193 |  -28.38 |        faster
firefox | issue2504   | 13   | Page Request |    20 |            4 |           2 |    -2 |  -48.68 |        faster
firefox | issue2504   | 13   | Rendering    |    20 |          676 |         485 |  -191 |  -28.28 |        faster
firefox | issue2504   | 14   | Overall      |    20 |          474 |         283 |  -191 |  -40.26 |        faster
firefox | issue2504   | 14   | Page Request |    20 |            2 |           4 |     2 |   78.57 |
firefox | issue2504   | 14   | Rendering    |    20 |          471 |         279 |  -192 |  -40.79 |        faster
firefox | issue2504   | 15   | Overall      |    20 |          860 |         618 |  -241 |  -28.05 |        faster
firefox | issue2504   | 15   | Page Request |    20 |            2 |           3 |     0 |   10.87 |
firefox | issue2504   | 15   | Rendering    |    20 |          857 |         616 |  -241 |  -28.15 |        faster
firefox | issue2504   | 16   | Overall      |    20 |          389 |         243 |  -147 |  -37.71 |        faster
firefox | issue2504   | 16   | Page Request |    20 |            2 |           2 |     0 |    2.33 |
firefox | issue2504   | 16   | Rendering    |    20 |          387 |         240 |  -147 |  -37.94 |        faster
firefox | issue2504   | 17   | Overall      |    20 |         1484 |         672 |  -812 |  -54.70 |        faster
firefox | issue2504   | 17   | Page Request |    20 |            2 |           3 |     1 |   37.21 |
firefox | issue2504   | 17   | Rendering    |    20 |         1482 |         669 |  -812 |  -54.84 |        faster
firefox | issue2504   | 18   | Overall      |    20 |          575 |         252 |  -323 |  -56.12 |        faster
firefox | issue2504   | 18   | Page Request |    20 |            2 |           2 |     0 |  -16.22 |
firefox | issue2504   | 18   | Rendering    |    20 |          573 |         251 |  -322 |  -56.24 |        faster
firefox | issue2504   | 19   | Overall      |    20 |          517 |         227 |  -290 |  -56.08 |        faster
firefox | issue2504   | 19   | Page Request |    20 |            2 |           2 |     0 |   21.62 |
firefox | issue2504   | 19   | Rendering    |    20 |          515 |         225 |  -290 |  -56.37 |        faster
firefox | issue2504   | 20   | Overall      |    20 |          668 |         670 |     2 |    0.31 |
firefox | issue2504   | 20   | Page Request |    20 |            4 |           2 |    -1 |  -34.29 |
firefox | issue2504   | 20   | Rendering    |    20 |          664 |         667 |     3 |    0.49 |
firefox | issue2504   | 21   | Overall      |    20 |          486 |         309 |  -177 |  -36.44 |        faster
firefox | issue2504   | 21   | Page Request |    20 |            2 |           2 |     0 |   16.13 |
firefox | issue2504   | 21   | Rendering    |    20 |          484 |         307 |  -177 |  -36.60 |        faster
firefox | issue2504   | 22   | Overall      |    20 |          543 |         267 |  -276 |  -50.85 |        faster
firefox | issue2504   | 22   | Page Request |    20 |            2 |           2 |     0 |   10.26 |
firefox | issue2504   | 22   | Rendering    |    20 |          541 |         265 |  -276 |  -51.07 |        faster
firefox | issue2504   | 23   | Overall      |    20 |         3246 |         871 | -2375 |  -73.17 |        faster
firefox | issue2504   | 23   | Page Request |    20 |            2 |           3 |     1 |   37.21 |
firefox | issue2504   | 23   | Rendering    |    20 |         3243 |         868 | -2376 |  -73.25 |        faster
firefox | issue2504   | 24   | Overall      |    20 |          379 |         156 |  -223 |  -58.83 |        faster
firefox | issue2504   | 24   | Page Request |    20 |            2 |           2 |     0 |   -2.86 |
firefox | issue2504   | 24   | Rendering    |    20 |          378 |         154 |  -223 |  -59.10 |        faster
firefox | issue2504   | 25   | Overall      |    20 |          176 |         127 |   -50 |  -28.19 |        faster
firefox | issue2504   | 25   | Page Request |    20 |            2 |           1 |     0 |  -15.63 |
firefox | issue2504   | 25   | Rendering    |    20 |          175 |         125 |   -49 |  -28.31 |        faster
firefox | issue2504   | 26   | Overall      |    20 |          181 |         108 |   -74 |  -40.67 |        faster
firefox | issue2504   | 26   | Page Request |    20 |            3 |           2 |    -1 |  -39.13 |        faster
firefox | issue2504   | 26   | Rendering    |    20 |          178 |         105 |   -72 |  -40.69 |        faster
firefox | issue2504   | 27   | Overall      |    20 |          208 |         104 |  -104 |  -49.92 |        faster
firefox | issue2504   | 27   | Page Request |    20 |            2 |           2 |     1 |   48.39 |
firefox | issue2504   | 27   | Rendering    |    20 |          206 |         102 |  -104 |  -50.64 |        faster
firefox | issue2504   | 28   | Overall      |    20 |          241 |         111 |  -131 |  -54.16 |        faster
firefox | issue2504   | 28   | Page Request |    20 |            2 |           2 |    -1 |  -33.33 |
firefox | issue2504   | 28   | Rendering    |    20 |          239 |         109 |  -130 |  -54.39 |        faster
firefox | issue2504   | 29   | Overall      |    20 |          321 |         196 |  -125 |  -39.05 |        faster
firefox | issue2504   | 29   | Page Request |    20 |            1 |           2 |     0 |   17.86 |
firefox | issue2504   | 29   | Rendering    |    20 |          319 |         194 |  -126 |  -39.35 |        faster
firefox | issue2504   | 30   | Overall      |    20 |          651 |         271 |  -380 |  -58.41 |        faster
firefox | issue2504   | 30   | Page Request |    20 |            1 |           2 |     1 |   50.00 |
firefox | issue2504   | 30   | Rendering    |    20 |          649 |         269 |  -381 |  -58.60 |        faster
firefox | issue2504   | 31   | Overall      |    20 |         1635 |         647 |  -988 |  -60.42 |        faster
firefox | issue2504   | 31   | Page Request |    20 |            1 |           2 |     0 |   30.43 |
firefox | issue2504   | 31   | Rendering    |    20 |         1634 |         645 |  -988 |  -60.49 |        faster
firefox | tracemonkey | 0    | Overall      |   100 |           51 |          51 |     0 |    0.02 |
firefox | tracemonkey | 0    | Page Request |   100 |            1 |           1 |     0 |   -4.76 |
firefox | tracemonkey | 0    | Rendering    |   100 |           50 |          50 |     0 |    0.12 |
firefox | tracemonkey | 1    | Overall      |   100 |           97 |          91 |    -5 |   -5.52 |        faster
firefox | tracemonkey | 1    | Page Request |   100 |            3 |           3 |     0 |   -1.32 |
firefox | tracemonkey | 1    | Rendering    |   100 |           94 |          88 |    -5 |   -5.73 |        faster
firefox | tracemonkey | 2    | Overall      |   100 |           40 |          40 |     0 |    0.50 |
firefox | tracemonkey | 2    | Page Request |   100 |            1 |           1 |     0 |    3.16 |
firefox | tracemonkey | 2    | Rendering    |   100 |           39 |          39 |     0 |    0.54 |
firefox | tracemonkey | 3    | Overall      |   100 |           62 |          62 |    -1 |   -0.94 |
firefox | tracemonkey | 3    | Page Request |   100 |            1 |           1 |     0 |   17.05 |
firefox | tracemonkey | 3    | Rendering    |   100 |           61 |          61 |    -1 |   -1.11 |
firefox | tracemonkey | 4    | Overall      |   100 |           56 |          58 |     2 |    3.41 |
firefox | tracemonkey | 4    | Page Request |   100 |            1 |           1 |     0 |   15.31 |
firefox | tracemonkey | 4    | Rendering    |   100 |           55 |          57 |     2 |    3.23 |
firefox | tracemonkey | 5    | Overall      |   100 |           73 |          71 |    -2 |   -2.28 |
firefox | tracemonkey | 5    | Page Request |   100 |            2 |           2 |     0 |   12.20 |
firefox | tracemonkey | 5    | Rendering    |   100 |           71 |          69 |    -2 |   -2.69 |
firefox | tracemonkey | 6    | Overall      |   100 |           85 |          69 |   -16 |  -18.73 |        faster
firefox | tracemonkey | 6    | Page Request |   100 |            2 |           2 |     0 |   -9.90 |
firefox | tracemonkey | 6    | Rendering    |   100 |           83 |          67 |   -16 |  -18.97 |        faster
firefox | tracemonkey | 7    | Overall      |   100 |           65 |          64 |     0 |   -0.37 |
firefox | tracemonkey | 7    | Page Request |   100 |            1 |           1 |     0 |  -11.94 |
firefox | tracemonkey | 7    | Rendering    |   100 |           63 |          63 |     0 |   -0.05 |
firefox | tracemonkey | 8    | Overall      |   100 |           53 |          54 |     1 |    2.04 |
firefox | tracemonkey | 8    | Page Request |   100 |            1 |           1 |     0 |   17.02 |
firefox | tracemonkey | 8    | Rendering    |   100 |           52 |          53 |     1 |    1.82 |
firefox | tracemonkey | 9    | Overall      |   100 |           79 |          73 |    -6 |   -7.86 |        faster
firefox | tracemonkey | 9    | Page Request |   100 |            2 |           2 |     0 |  -15.14 |
firefox | tracemonkey | 9    | Rendering    |   100 |           77 |          71 |    -6 |   -7.86 |        faster
firefox | tracemonkey | 10   | Overall      |   100 |          545 |         519 |   -27 |   -4.86 |        faster
firefox | tracemonkey | 10   | Page Request |   100 |           14 |          13 |     0 |   -3.56 |
firefox | tracemonkey | 10   | Rendering    |   100 |          532 |         506 |   -26 |   -4.90 |        faster
firefox | tracemonkey | 11   | Overall      |   100 |           42 |          41 |    -1 |   -2.50 |
firefox | tracemonkey | 11   | Page Request |   100 |            1 |           1 |     0 |  -27.42 |        faster
firefox | tracemonkey | 11   | Rendering    |   100 |           41 |          40 |    -1 |   -1.75 |
firefox | tracemonkey | 12   | Overall      |   100 |          350 |         332 |   -18 |   -5.16 |        faster
firefox | tracemonkey | 12   | Page Request |   100 |            3 |           3 |     0 |   -5.17 |
firefox | tracemonkey | 12   | Rendering    |   100 |          347 |         329 |   -18 |   -5.15 |        faster
firefox | tracemonkey | 13   | Overall      |   100 |           31 |          31 |     0 |    0.52 |
firefox | tracemonkey | 13   | Page Request |   100 |            1 |           1 |     0 |    4.95 |
firefox | tracemonkey | 13   | Rendering    |   100 |           30 |          30 |     0 |    0.20 |
```",False
6fb08271b42a32023f6cc94e80e21711b21349e9,2020-06-14 03:50:43,Tim van der Meij,"Merge pull request #12000 from Snuffleupagus/buildImage-errors

Ensure that `PDFImage.buildImage` won't accidentally swallow errors, e.g. from ColorSpace parsing (issue 6707, PR 11601 follow-up)",True
8f7128da15895d6a5c1b6ec18d8ce38bed049ca6,2020-06-14 03:41:42,Tim van der Meij,"Merge pull request #11999 from Snuffleupagus/update-packages

Update packages and translations",True
4b51bcc7331a2a19ad404e96cf09bf2ff79daed7,2020-06-13 18:32:37,Jonas Jenwald,"Ensure that `PDFImage.buildImage` won't accidentally swallow errors, e.g. from ColorSpace parsing (issue 6707, PR 11601 follow-up)

Because of a really stupid `Promise`-related mistake on my part, when re-factoring `PDFImage.buildImage` during the `NativeImageDecoder` removal, we're no longer re-throwing errors occuring during image parsing/decoding as intended.
The result is that some (fairly) corrupt documents will never finish loading, and unfortunately there were apparently no sufficiently corrupt images in the test-suite to catch this.",False
960d639dee750d4a1385756dc1f384a5841e88c9,2020-06-13 14:09:20,Jonas Jenwald,Update l10n files,False
603a9e3ea382934bbffecf84038cdaa037e81b24,2020-06-13 14:06:11,Jonas Jenwald,Update `npm` packages,False
c809f00b3bdfd99a77f5ee9ea98eb76dee110ea1,2020-06-13 03:37:32,Tim van der Meij,"Merge pull request #11997 from Snuffleupagus/nullish-coalescing

Add basic support for the nullish coalescing operator `??`",True
d75a06821237f8dc7e3f60258060903d4295e3c8,2020-06-13 03:34:05,Tim van der Meij,"Merge pull request #11969 from emalysz/11961-unsupported-feature-telemetry-error

For #11961: collect telemetry on all unique unsupported features that…",True
b4ae958ca402d2b200250d3179ddcddad64adbd4,2020-06-12 18:46:54,Jonas Jenwald,"Add basic support for the nullish coalescing operator `??`

For now we need to use a Babel-plugin, since Webpack 4.x doesn't seem to support it yet. (Most likely we'll have to update to Webpack 5, once that becomes available, in order for this to be directly supported. This is thus also blocked on removing the `webpack-stream` package.)

While the `??` operator will thus always be transpiled by Babel, even in modern builds, simply supporting it for development purposes seems like a step in the right direction.

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator",False
05fe9c85b6702c6509204bc305127ed542f65205,2020-06-12 03:42:51,Emma Malysz,"For #11961: collect telemetry on all unique unsupported features that trigger fallback error.

This expands upon the telemetry we are collecting that shows the fallback error.",False
973936f469424145c3e2cfe5585f93932bf3f11a,2020-06-12 03:13:10,Tim van der Meij,"Merge pull request #11993 from Snuffleupagus/OperatorList-dependencies-set

Change the `dependencies` property, on `OperatorList` instances, from an Object to a Set",True
63a7aaa6f60b8ad132c1badd7013f22f7a8e2ac7,2020-06-12 03:10:39,Tim van der Meij,"Merge pull request #11992 from Snuffleupagus/preprocessor-rm-HTML-comment-trailing-whitespace

Prevent the (old) preprocessor from appending trailing whitespace when removing closing HTML comments",True
10f31bb46d8e6e4504e8c9ebde576dff3fc834fa,2020-06-11 19:57:13,Jonas Jenwald,"Change the `dependencies` property, on `OperatorList` instances, from an Object to a Set

Since this is completely internal functionality, and furthermore limited to the worker-thread, this change should thus not have any observable effect for e.g. an API-user.",False
02a1d0f6c577f932624cc09de863cd52aca6236c,2020-06-11 19:35:38,Jonas Jenwald,"Remove the unused `intent`/`pageIndex` properties from `OperatorList` instances (PR 11069 follow-up)

Apparently I completely overlooked the fact that with the changes in PR 11069 these properties became *completely* unused, and consequently they thus ought to be removed.",False
85a67456ed9c53b6d08a97d86f0702ccd7c26fd1,2020-06-11 15:45:18,Jonas Jenwald,"Prevent the (old) preprocessor from appending trailing whitespace when removing closing HTML comments

This can currently be seen in the *built* `web/viewer.html` file, at the line containing ""  <script src=""viewer.js""></script>  "".",False
c9934de87c5af842a2f4629f820c150280b54a7f,2020-06-11 03:07:45,Tim van der Meij,"Merge pull request #11987 from Snuffleupagus/svg-paintImageXObject-GlobalImageCache

Update `SVGGraphics` to account for globally cached images (PR 11912 follow-up)",True
00d45fce33259d17c095fb057983924049de6e1e,2020-06-10 19:01:26,Jonas Jenwald,"Update `SVGGraphics` to account for globally cached images (PR 11912 follow-up)

Since there's (essentially) no tests for the SVG-backend, these changes didn't make in into PR 11912 when the code in the `src/display/canvas.js` file was modified.",False
a327f386ffdd7f801749d09d160e3624b7ee5fbd,2020-06-10 03:31:14,Tim van der Meij,"Merge pull request #11985 from Snuffleupagus/rm-isEmptyObj

Convert some `Object`s to `Map`s in `ChunkedStreamManager`, and move the `isEmptyObj` helper function to the test utils",True
88fdb482b097b7d899215838f657352deb4e1199,2020-06-09 21:20:16,Jonas Jenwald,"Move the `isEmptyObj` helper function from `src/shared/util.js` to `test/unit/test_utils.js`

Since this helper function is no longer used anywhere in the main code-base, but only in a couple of unit-tests, it's thus being moved to a more appropriate spot.

Finally, the implementation of `isEmptyObj` is also tweaked slightly by removing the manual loop.",False
159e13c4e45b01b267e783cd2ba5e7e25cef33d9,2020-06-09 21:20:14,Jonas Jenwald,"Convert the `ChunkedStreamManager.promisesByRequest` property to a `Map`

Compared to regular `Object`s, `Map`s have a number of advantageous properties: Of particular importance in this case is the built-in iteration support, and that determining if the structure is empty is easy.",False
dda7a5d1b7888287cf7bb82995190d5f2cbbff7b,2020-06-09 21:20:11,Jonas Jenwald,"Convert the `ChunkedStreamManager.requestsByChunk` property to a `Map`

Compared to regular `Object`s, `Map`s have a number of advantageous properties: Of particular importance in this case is the built-in iteration support, and that determining if the structure is empty is easy.",False
17e23ffb33e11dfa26830e3fd58d0c57b3a86ef1,2020-06-09 21:19:53,Jonas Jenwald,"Convert the `ChunkedStreamManager.chunksNeededByRequest` property to a `Map` (containing `Set`s)

Compared to regular `Object`s, `Map`s (and `Set`s) have a number of advantageous properties: Of particular importance in this case is the built-in iteration support, and that determining if the structure is empty is easy.",False
a4fa4554d6c12107bea53766f4cfbc480ce93d0c,2020-06-08 02:45:35,Tim van der Meij,"Merge pull request #11977 from timvandermeij/refset

Convert the `RefSet` primitive to a proper class and use a `Set` internally",True
4c2e056796d62e6b8ee572a2e51cd69b125ffa0f,2020-06-07 22:31:29,Tim van der Meij,"Convert the `RefSet` primitive to a proper class and use a `Set` internally

The `RefSet` primitive predates ES6, so that most likely explains why an
object is used internally to track the entries. However, nowadays we can
use built-in JavaScript sets for this purpose. Built-in types are often
more efficient/optimized and using it makes the code a bit more clear
since we don't have to assign `true` to keys anymore just to indicate
their presence.",False
4c36dadfe2b1adedc592cc8d114a8a75fa0d0403,2020-06-07 22:28:17,Tim van der Meij,"Merge pull request #11978 from timvandermeij/unit-test-primitives

Improve unit test coverage for primitives",True
550a38f1bafd78d0caaa8d67c4b8b404c9b02e26,2020-06-07 21:01:40,Tim van der Meij,"Improve unit test coverage for primitives

This commit includes unit tests for:

- `isEOF`
- `isStream`
- `Ref`'s string representation and caching
- `Dict`'s XRef assignment",False
4cfeda31fa21ee95c91f00761c7530077c2f5526,2020-06-07 20:57:06,Tim van der Meij,"Merge pull request #11976 from Snuffleupagus/rm-dead-network-code

Remove unused methods from `NetworkManager`, in `src/display/network.js`",True
466d10f6fc4c28880687b96d6743ccd7fc0a24fd,2020-06-07 19:33:32,Jonas Jenwald,"Remove unused methods from `NetworkManager`, in `src/display/network.js`

Both of the removed methods were added in PR 2719, however they are no longer used:
 - It appears that `hasPendingRequests` was never used at all, even from the beginning.
 - The only general PDF.js library usage of `abortAllRequests` was removed in PR 6879, which is now four years ago. (Originally the Firefox-specific network implementation, see https://searchfox.org/mozilla-central/source/browser/extensions/pdfjs/content/PdfJsNetwork.jsm, was shared with the `src/display/network.js` file and *there* this method is used. However, since all of the Firefox-specific code now lives directly in mozilla-central, that's not relevant for the removal in this patch.)",False
2bd0690fdde781fd1158db941287e0f45f21891c,2020-06-07 18:34:24,Tim van der Meij,Convert `var` to `const`/`let` in `test/unit_primitives_spec.js`,False
c97200ff5921518048c5f741f1c1b2b03ea18630,2020-06-07 17:23:26,Tim van der Meij,"Merge pull request #11974 from Snuffleupagus/sendImgData

A couple of small image caching/sending improvements",True
b779507370190e4baf6301e34e3ff5260318b686,2020-06-07 16:39:41,Tim van der Meij,"Merge pull request #11963 from tamuratak/srgb_conv

Avoid calling Math.pow if possible.",True
df7d8c74cac4ceae84dfeb0efffd7fb399fed6d7,2020-06-07 15:31:51,Jonas Jenwald,"Extract the actual sending of image data from the `PartialEvaluator.buildPaintImageXObject` method

After PRs 10727 and 11912, the code responsible for sending the decoded image data to the main-thread has now become a fair bit more involved the previously.
To reduce the amount of duplication here, the actual code responsible for sending the data is thus extracted into a new helper method instead.",False
aff0d563260a2eb20f0724197d5f29691b359d99,2020-06-07 15:26:04,Jonas Jenwald,"Remove an unnecessary `RefSetCache.prototype.has()` call from `GlobalImageCache.getData`

We can simply attempt to get the data *directly*, and instead check the result, rather than first checking if it exists.",False
7acb112ca9f3ab3143a1a8ae82d824b0c59bc8d1,2020-06-07 09:47:18,Takashi Tamura,"Optimization:
Avoid calling Math.pow if possible when calculating the transfer
function of the CalRGB color space since calling Math.pow is expensive.

If the value of color is larger than the threshold, 0.99554525,
the final result of the transform is larger that 254.5
since ((1 + 0.055) * 0.99554525 ** (1 / 2.4) - 0.055) * 255 === 254.50000003134699",False
039307f88c9596ae6e1bda8cae3a042a5ff67cec,2020-06-06 03:42:14,Tim van der Meij,"Merge pull request #11972 from Snuffleupagus/ChunkedStream-loadedChunks-Set

Change the `loadedChunks` property, on `ChunkedStream` instances, from an Array to a Set",True
891c706aa81d4755b84280a0d1360540153de8f1,2020-06-06 03:33:19,Tim van der Meij,"Merge pull request #11953 from emalysz/11838-fallback-after-click

For #11838: trigger fallback bar after user clicks in pdf",True
b7272a34ebc1695922760956091458aa4c89c7ed,2020-06-05 18:33:06,Jonas Jenwald,"Change the `loadedChunks` property, on `ChunkedStream` instances, from an Array to a Set

In the old code the use of an Array meant that we had to *manually* track the `numChunksLoaded` property, given that simply using the Array `length` wouldn't have worked since there's no guarantee that the data is loaded in order when e.g. range requests are in use.

Tracking closely related state *separately* in this manner never seem like a good idea, and we can now instead utilize a Set to avoid that.",False
7aa1b2d418d740368ca863951c963136ea07fb74,2020-06-05 03:26:49,Tim van der Meij,"Merge pull request #11964 from aplum/fix-webpack-import

Fix pdfjs-dist/webpack causing errors with certain configs",True
ad261a2da408001ee8d73b5bea3db3e9d24f527a,2020-06-05 03:23:45,Tim van der Meij,"Merge pull request #11967 from havocbcn/jpg-rgb

Do not transform jpeg RGB components",True
802aa14a9988f4788f6b280340e514d1c70e8611,2020-06-04 18:38:47,Carlos Rodríguez,"Jpeg encoded with RGB -instead of YCbCr- write the components index as ""RGB"" in ASCII to say it so

On ISO/IEC 10918-6:2013 (E), section 6.1: (http://www.itu.int/rec/T-REC-T.872-201206-I/en)

""Images encoded with three components are assumed to be RGB data encoded as YCbCr unless the image contains an APP14 marker segment as specified in 6.5.3, in which case the colour encoding is considered either RGB or YCbCr according to the application data of the APP14 marker segment""

But common jpeg libraries consider RGB too if components index are ASCII R (0x52), G (0x47) and B (0x42): https://stackoverflow.com/questions/50798014/determining-color-space-for-jpeg/50861048

Issue #11931",False
6e9d158a98b695e0cf1411490585b25fbb099c0b,2020-06-04 02:33:46,Emma Malysz,For #11838: trigger fallback bar after user clicks in pdf,False
3b9031f6a32adca1db9eb95c068d3d37c33a6ef0,2020-06-04 00:20:41,Alex Plumley,"Fix pdfjs-dist/webpack causing errors with certain configs

Using `require.resolve(""worker-loader"")` to check if `worker-loader` is installed causes webpack to include `worker-loader` in the output bundle, which is not the intended effect. Aside from increasing the bundle size unnecessarily, it also causes errors for webpack configs with targets that don't have node's built-in modules.

These errors can be fixed by configuring webpack `externals` to exclude `worker-loader`, but it's more difficult to figure out this solution than to figure out that `worker-loader` needs to be installed (even without this explicit error message).

To solve this, the explicit check for `worker-loader` has been removed. An alternative solution would be to use webpack's `resolveWeak`. Documentation has also been added in `examples/webpack` to help users.",False
96ad60f116f420945daa29dea185eac6e558d67e,2020-06-03 03:21:55,Tim van der Meij,"Merge pull request #11958 from Snuffleupagus/rm-getOpenActionDestination

[api-minor] Remove the deprecated `PDFDocumentProxy.getOpenActionDestination` method (PR 11644 follow-up)",True
64378fc366478581eb5bfae9fdcf059a3416a054,2020-06-02 15:58:00,Jonas Jenwald,"[api-minor] Remove the deprecated `PDFDocumentProxy.getOpenActionDestination` method (PR 11644 follow-up)

This method has been printing a `deprecated` warning in two releases, hence it should hopefully be safe to remove now.",False
8fc1126b5a2b6d2fa0cfa98a061882ef21c1abc9,2020-06-01 16:21:06,Tim van der Meij,"Merge pull request #11948 from timvandermeij/bump

Bump versions in `pdfjs.config` and update the getting started page of the website for the new release",True
a98b81f8aefa9a6d9b5efb4451e956dd59e604f4,2020-06-01 16:15:04,Tim van der Meij,Bump versions in `pdfjs.config` and update the getting started page of the website for the new release,False
0974d60523c82ed993fc42b3b16a7957f9926dce,2020-06-01 15:09:40,Tim van der Meij,"Merge pull request #11947 from Snuffleupagus/GlobalImageCache-assert-not-inline

Ensure that that we don't attempt to cache *inline* images in the `GlobalImageCache` (PR 11912 follow-up)",True
af815e417d3ba1306404ba0767971370116bcc03,2020-06-01 04:30:30,Jonas Jenwald,"Ensure that that we don't attempt to cache *inline* images in the `GlobalImageCache` (PR 11912 follow-up)

Since *inline* images, i.e. those defined inside of `/Contents` streams, are by their very definition page-specific it thus seem like a good idea to actually enforce that they won't accidentally end up in the `GlobalImageCache`.",False
58797103273e9a615f87c96dd899290026bbdf47,2020-05-30 17:54:25,Tim van der Meij,"Merge pull request #11945 from Snuffleupagus/update-packages

Update packages and translations",True
f2cbd5de42c6a694b70f36a98d07074ba0d779f0,2020-05-30 14:31:34,Jonas Jenwald,Update l10n files,False
da482310ee22afa35b14fadd880d140d71bf9d9f,2020-05-30 14:28:10,Jonas Jenwald,Update `npm` packages,False
878619956ba0aa15784887143446903f94caed6d,2020-05-30 03:22:25,Tim van der Meij,"Merge pull request #11943 from Snuffleupagus/cleanup-preprocessCSS

Remove unused code from the `external/builder/builder.js` file",True
d7dee0ea1c1e9b3a572bebcfee8532c193c8059f,2020-05-29 20:48:16,Jonas Jenwald,"Remove the `hasPrefixedFirefox` functionality from the `external/builder/builder.js` file

This functionality has been completely unused ever since PR 9566 (two years ago).",False
ce234ab3c748d703157e39f9f01a8a6252d95194,2020-05-29 20:44:38,Jonas Jenwald,"Remove the `deprecatedInMozcentral` functionality from the `external/builder/builder.js` file

This functionality has been completely unused ever since PR 9629 (two years ago).",False
fe5689705da98090e6e40d6a0c18fef3fc66c2f8,2020-05-28 03:42:37,Tim van der Meij,"Merge pull request #11930 from Snuffleupagus/LocalImageCache

Improve the *local* image caching in `PartialEvaluator.getOperatorList`",True
efc2588d125f756bd01360a1c36176da04257326,2020-05-28 03:28:53,Tim van der Meij,"Merge pull request #11940 from Snuffleupagus/pdf.js-export-comments

Add comments to the `export` list in the `src/pdf.js` file (PR 11914 follow-up)",True
15493ebdc39d5bc3fcb33f0d6ffa36e58d960306,2020-05-28 03:27:58,Tim van der Meij,"Merge pull request #11939 from Snuffleupagus/acorn-7

Update Acorn to version 7",True
4d60430b1ca5cddf7f0ef6dda86f119494cf4685,2020-05-27 17:27:25,Jonas Jenwald,"Add comments to the `export` list in the `src/pdf.js` file (PR 11914 follow-up)

When converting this file to use standard `import`/`export` statements, I sorted the exports in the same order as the imports to simplify things.

However, looking at the list of `export`ed properties it probably doesn't hurt to add a couple of comments to clarify from where specifically the `export`s originated.",False
6a1490faa759d7834b7f54b5e0403f4877c48677,2020-05-27 15:24:27,Jonas Jenwald,"Update Acorn to version 7

By updating to the new major version of Acorn, we'll get support for newer ECMAScript features as they become available (although some features are currently also blocked by ESLint support and/or SystemJS usage).

Please see https://github.com/acornjs/acorn/releases/tag/7.2.0 for details.",False
4ef547f4008b6dc02700768c6e038a64bc2e88f6,2020-05-26 13:19:01,Jonas Jenwald,"Improve caching of empty `/XObject`s in the `PartialEvaluator.getTextContent` method

It turns out that `getTextContent` suffers from *similar* problems with repeated images as `getOperatorList`; please see the previous patch.

While only `/XObject` resources of the `Form`-type will actually be *parsed* in `PartialEvaluator.getTextContent`, since those are the only ones that may contain text, we're still forced to fetch repeated image resources where the name differs (but not the reference).
Obviously it's less bad in this case, since we're not actually parsing `/XObject`s of e.g. the `Image`-type. However, you still want to avoid even fetching the data whenever possible, since `Stream`s are not cached on the `XRef` instance (given their potential size) and the lookup can thus be somewhat expensive in general.

To address these issues, we can simply replace the exiting name-only caching in `PartialEvaluator.getTextContent` with a new cache backed by `LocalImageCache` instead.",False
d62c9181bd2534278bface643c363d245574af07,2020-05-25 18:44:14,Jonas Jenwald,"Improve the *local* image caching in `PartialEvaluator.getOperatorList`

Currently the local `imageCache`, as used in `PartialEvaluator.getOperatorList`, will miss certain cases of repeated images because the caching is *only* done by name (usually using a format such as e.g. ""Im0"", ""Im1"", ...).
However, in some PDF documents the `/XObject` dictionaries many contain hundreds (or even thousands) of distinctly named images, despite them referring to only a handful of actual image objects (via the XRef table).

With these changes we'll now cache *local* images using both name and (where applicable) reference, thus improving re-usage of images resources even further.

This patch was tested using the PDF file from [bug 857031](https://bugzilla.mozilla.org/show_bug.cgi?id=857031), i.e. https://bug857031.bmoattachments.org/attachment.cgi?id=732270, with the following manifest file:
```
[
    {  ""id"": ""bug857031"",
       ""file"": ""../web/pdfs/bug857031.pdf"",
       ""md5"": """",
       ""rounds"": 250,
       ""lastPage"": 1,
       ""type"": ""eq""
    }
]
```

which gave the following results when comparing this patch against the `master` branch:
```
-- Grouped By browser, page, stat --
browser | page | stat         | Count | Baseline(ms) | Current(ms) | +/- |    %  | Result(P<.05)
------- | ---- | ------------ | ----- | ------------ | ----------- | --- | ----- | -------------
firefox | 0    | Overall      |   250 |         2749 |        2656 | -93 | -3.38 |        faster
firefox | 0    | Page Request |   250 |            3 |           4 |   1 | 50.14 |        slower
firefox | 0    | Rendering    |   250 |         2746 |        2652 | -94 | -3.44 |        faster
```

While this is certainly an improvement, since we now avoid re-parsing ~1000 images on the first page, all of the image resources are small enough that the total rendering time doesn't improve that much in this particular case.

In pathological cases, such as e.g. the PDF document in issue 4958, the improvements with this patch can be very significant. Looking for example at page 2, from issue 4958, the rendering time drops from ~60 seconds with `master` to ~30 seconds with this patch (obviously still slow, but it really showcases the potential of this patch nicely).

Finally, note that there's also potential for additional improvements by re-using `LocalImageCache` instances for e.g. /XObject data of the `Form`-type. However, given that recent changes in this area I purposely didn't want to complicate *this* patch more than necessary.",False
9d38dd4e8b53eada0c506e26a2b3827d8d45e3d0,2020-05-24 17:59:22,Tim van der Meij,"Merge pull request #11927 from timvandermeij/svg-fill-opacity-shading

Implement fill opacity for shading patterns in the SVG back-end",True
f14215da37ec596ab636cd9db1d8ff31e9bcb108,2020-05-24 17:55:40,Tim van der Meij,"Implement fill opacity for shading patterns in the SVG back-end

In the PDF file from the issue below, the fill alpha (`ca`) is set
before drawing the circles using the `setGState` operator. Doing so
causes the global alpha to be set on the canvas' context for the canvas
back-end, but this was not handled in the SVG back-end. This patch fixes
that by taking the fill opacity into account when drawing shading
patterns in the same way as done elsewhere so it is only included if the
value is non-default.

Fixes #11812.",False
3b615e4ca369ff31e6399dea80383ffeffe96240,2020-05-23 19:03:46,Tim van der Meij,"Merge pull request #11601 from Snuffleupagus/rm-nativeImageDecoderSupport

[api-minor] Decode all JPEG images with the built-in PDF.js decoder in `src/core/jpg.js`",True
cd6d0894894c97264eca993b10d0d9faa02fa829,2020-05-23 15:51:38,Tim van der Meij,"Merge pull request #11926 from Snuffleupagus/GlobalImageCache-clear-onlyData

Allow `GlobalImageCache.clear` to, optionally, only remove the actual data (PR 11912 follow-up)",True
8af70d75aa4ce502e128fa6333e3a2c99f439ffb,2020-05-23 15:00:24,Jonas Jenwald,"Allow `GlobalImageCache.clear` to, optionally, only remove the actual data (PR 11912 follow-up)

When ""Cleanup"" is triggered, you obviously need to remove all globally cached data on *both* the main- and worker-threads.
However, the current the implementation of the `GlobalImageCache.clear` method also means that we lose *all* information about which images were cached and not just their data. This thus has the somewhat unfortunate side-effect of requiring images, which were previously known to be ""global"", to *again* having to reach `NUM_PAGES_THRESHOLD` before being cached again.

To avoid doing unnecessary parsing after ""Cleanup"", we can thus let `GlobalImageCache.clear` keep track of which images were cached while still removing their actual data. This should not have any significant impact on memory usage, since the only extra thing being kept is a `RefSetCache` (essentially an Object) with a couple of `Set`s containing only integers.",False
973f39b55816a4f2d50cd8acb09dc9c9ba3b7ad4,2020-05-23 04:02:12,Tim van der Meij,"Merge pull request #11924 from Snuffleupagus/issue-11922

Avoid hanging the worker-thread for CMap data with ridiculously large ranges (issue 11922)",True
56ebf01ae0c4ad52d4a265267934c8cf5a0fddfe,2020-05-22 18:53:17,Jonas Jenwald,"Avoid hanging the worker-thread for CMap data with ridiculously large ranges (issue 11922)

This patch was inspired by https://github.com/kermitt2/xpdf-4.00/blob/ad2b64f1244b32fca0ff0868af1cfa0238c9933e/xpdf/CharCodeToUnicode.cc#L480-L484",False
ebef67b3549d8612cbece0e8a3b3355a41c80fdf,2020-05-22 03:52:48,Jonas Jenwald,"Stop building any `src/` files during the `gulp default_preferences` task

With the changes made in the previous patch, the `web/app_options.js` file no longer depends on anything *except* files residing in the `web/` folder. Hence the `gulp default_preferences` task can now be further simplified and thus becomes even faster than before; see also PR 11724.",False
18e0b10d3cb142313f45855878afec496c4e9496,2020-05-22 03:52:48,Jonas Jenwald,"[api-minor] Remove the `disableCreateObjectURL` option from the `getDocument` parameters, since it's now unused in the API

With the changes in previous patches, the `disableCreateObjectURL` option/functionality is no longer used for anything in the API and/or in the Worker code.

Note however that there's some functionality, mainly related to file loading/downloading, in the GENERIC version of the default viewer which still depends on this option.
Hence the `disableCreateObjectURL` option (and related compatibility code) is moved into the viewer, see e.g. `web/app_options.js`, such that it's still available in the default viewer.",False
cc4cc8b11b7f346cb272fd21fa0e8fbdaf9ed61d,2020-05-22 03:52:48,Jonas Jenwald,"Remove the, now unused, `releaseImageResources` helper function

With the changes in the previous patch, this is now dead code which should thus be removed.",False
0351852d746b2b7bf1b555989978fad8d2432edf,2020-05-22 03:52:48,Jonas Jenwald,"[api-minor] Decode all JPEG images with the built-in PDF.js decoder in `src/core/jpg.js`

Currently some JPEG images are decoded by the built-in PDF.js decoder in `src/core/jpg.js`, while others attempt to use the browser JPEG decoder. This inconsistency seem unfortunate for a number of reasons:

 - It adds, compared to the other image formats supported in the PDF specification, a fair amount of code/complexity to the image handling in the PDF.js library.

 - The PDF specification support JPEG images with features, e.g. certain ColorSpaces, that browsers are unable to decode natively. Hence, determining if a JPEG image is possible to decode natively in the browser require a non-trivial amount of parsing. In particular, we're parsing (part of) the raw JPEG data to extract certain marker data and we also need to parse the ColorSpace for the JPEG image.

 - While some JPEG images may, for all intents and purposes, appear to be natively supported there's still cases where the browser may fail to decode some JPEG images. In order to support those cases, we've had to implement a fallback to the PDF.js JPEG decoder if there's any issues during the native decoding. This also means that it's no longer possible to simply send the JPEG image to the main-thread and continue parsing, but you now need to actually wait for the main-thread to indicate success/failure first.
   In practice this means that there's a code-path where the worker-thread is forced to wait for the main-thread, while the reverse should *always* be the case.

 - The native decoding, for anything except the *simplest* of JPEG images, result in increased peak memory usage because there's a handful of short-lived copies of the JPEG data (see PR 11707).
Furthermore this also leads to data being *parsed* on the main-thread, rather than the worker-thread, which you usually want to avoid for e.g. performance and UI-reponsiveness reasons.

 - Not all environments, e.g. Node.js, fully support native JPEG decoding. This has, historically, lead to some issues and support requests.

 - Different browsers may use different JPEG decoders, possibly leading to images being rendered slightly differently depending on the platform/browser where the PDF.js library is used.

Originally the implementation in `src/core/jpg.js` were unable to handle all of the JPEG images in the test-suite, but over the last couple of years I've fixed (hopefully) all of those issues.
At this point in time, there's two kinds of failure with this patch:

 - Changes which are basically imperceivable to the naked eye, where some pixels in the images are essentially off-by-one (in all components), which could probably be attributed to things such as different rounding behaviour in the browser/PDF.js JPEG decoder.
   This type of ""failure"" accounts for the *vast* majority of the total number of changes in the reference tests.

 - Changes where the JPEG images now looks *ever so slightly* blurrier than with the native browser decoder. For quite some time I've just assumed that this pointed to a general deficiency in the `src/core/jpg.js` implementation, however I've discovered when comparing two viewers side-by-side that the differences vanish at higher zoom levels (usually around 200% is enough).
   Basically if you disable [this downscaling in canvas.js](https://github.com/mozilla/pdf.js/blob/8fb82e939cf0c8618a4e775ff17fc96f726872b5/src/display/canvas.js#L2356-L2395), which is what happens when zooming in, the differences simply vanish!
   Hence I'm pretty satisfied that there's no significant problems with the `src/core/jpg.js` implementation, and the problems are rather tied to the general quality of the downscaling algorithm used. It could even be seen as a positive that *all* images now share the same downscaling behaviour, since this actually fixes one old bug; see issue 7041.",False
4a3a24b002d5e5e9c0b838390d283d8bb186c339,2020-05-22 03:24:28,Tim van der Meij,"Merge pull request #11912 from Snuffleupagus/GlobalImageCache

Attempt to cache repeated images at the document, rather than the page, level (issue 11878)",True
dda6626f401f1d1aec82b2c9180198f254f86f3e,2020-05-21 21:43:45,Jonas Jenwald,"Attempt to cache repeated images at the document, rather than the page, level (issue 11878)

Currently image resources, as opposed to e.g. font resources, are handled exclusively on a page-specific basis. Generally speaking this makes sense, since pages are separate from each other, however there's PDF documents where many (or even all) pages actually references exactly the same image resources (through the XRef table). Hence, in some cases, we're decoding the *same* images over and over for every page which is obviously slow and wasting both CPU and memory resources better used elsewhere.[1]

Obviously we cannot simply treat all image resources as-if they're used throughout the entire PDF document, since that would end up increasing memory usage too much.[2]
However, by introducing a `GlobalImageCache` in the worker we can track image resources that appear on more than one page. Hence we can switch image resources from being page-specific to being document-specific, once the image resource has been seen on more than a certain number of pages.

In many cases, such as e.g. the referenced issue, this patch will thus lead to reduced memory usage for image resources. Scrolling through all pages of the document, there's now only a few main-thread copies of the same image data, as opposed to one for each rendered page (i.e. there could theoretically be *twenty* copies of the image data).
While this obviously benefit both CPU and memory usage in this case, for *very* large image data this patch *may* possibly increase persistent main-thread memory usage a tiny bit. Thus to avoid negatively affecting memory usage too much in general, particularly on the main-thread, the `GlobalImageCache` will *only* cache a certain number of image resources at the document level and simply fallback to the default behaviour.

Unfortunately the asynchronous nature of the code, with ranged/streamed loading of data, actually makes all of this much more complicated than if all data could be assumed to be immediately available.[3]

*Please note:* The patch will lead to *small* movement in some existing test-cases, since we're now using the built-in PDF.js JPEG decoder more. This was done in order to simplify the overall implementation, especially on the main-thread, by limiting it to only the `OPS.paintImageXObject` operator.

---
[1] There's e.g. PDF documents that use the same image as background on all pages.

[2] Given that data stored in the `commonObjs`, on the main-thread, are only cleared manually through `PDFDocumentProxy.cleanup`. This as opposed to data stored in the `objs` of each page, which is automatically removed when the page is cleaned-up e.g. by being evicted from the cache in the default viewer.

[3] If the latter case were true, we could simply check for repeat images *before* parsing started and thus avoid handling *any* duplicate image resources.",False
604a6f96aa83aeb1fc4d76e968d28ab61e733c8d,2020-05-20 18:20:26,Tim van der Meij,"Merge pull request #11919 from Snuffleupagus/less-SystemJS

Reduce usage of SystemJS, in the development viewer, even further",True
8d56a69e7468f609f8f3e8ed71672060e5b0073d,2020-05-20 17:06:52,Jonas Jenwald,"Reduce usage of SystemJS, in the development viewer, even further

With these changes SystemJS is now only used, during development, on the worker-thread and in the unit/font-tests, since Firefox is currently missing support for worker modules; please see https://bugzilla.mozilla.org/show_bug.cgi?id=1247687

Hence all the JavaScript files in the `web/` and `src/display/` folders are now loaded *natively* by the browser (during development) using standard `import` statements/calls, thanks to a nice `import-maps` polyfill.

*Please note:* As soon as https://bugzilla.mozilla.org/show_bug.cgi?id=1247687 is fixed in Firefox, we should be able to remove all traces of SystemJS and thus finally be able to use every possible modern JavaScript feature.",False
a5c60cdd314d99131db7e17cce71a95d7a5ca69d,2020-05-20 16:58:44,Tim van der Meij,"Merge pull request #11914 from Snuffleupagus/less-require

Convert the `src/pdf.js` and `src/pdf.worker.js` files to use standard `import`/`export` statements",True
e2c3312416d34f4756da9dbbb3b3d02a32e4d1e3,2020-05-20 16:48:23,Jonas Jenwald,"Convert the `src/pdf.js` and `src/pdf.worker.js` files to use standard `import`/`export` statements

As part of reducing our reliance on SystemJS in the development viewer, this patch replaces usage of `require` statements with modern standards `import`/`export` statements instead.

If we want to try and move forward with reducing usage of SystemJS, we don't have much choice but to make these kind changes (despite what prior test-results showed, however I'm no longer able to reproduce the issues locally).",False
d4d933538b9fba893a464362d0f37f6ec14b4099,2020-05-20 16:48:18,Jonas Jenwald,"Re-factor `setPDFNetworkStreamFactory`, in src/display/api.js, to also accept an asynchronous function

As part of trying to reduce the usage of SystemJS in the development viewer, this patch is a necessary step that will allow removal of some `require` statements.

Currently this uses `SystemJS.import` in non-PRODUCTION mode, but it should be possible to replace those with standard *dynamic* `import` calls in the future.",False
0960e6c0b5f2bdb45b8f4d280a3353ed230f448a,2020-05-20 16:25:20,Tim van der Meij,"Merge pull request #11917 from Snuffleupagus/bug-1632644

[Firefox] Allow PDF attachments to, once again, be opened directly in the browser (bug 1632644)",True
93e7f630c10b7c0585bcb290b1c4217673a71720,2020-05-20 15:39:04,Jonas Jenwald,"Remove unnecessary empty string fallback from the `getPDFFileNameFromURL` call in `web/pdf_document_properties.js` (PR 10114 follow-up)

Given that the `getPDFFileNameFromURL` helper function has a specific code-path for handling non-string inputs, this empty string fallback really isn't necessary at the call-site in `web/pdf_document_properties.js`.",False
108258a8f83838757cd3b7d0009ca6441a71c4bf,2020-05-20 15:38:59,Jonas Jenwald,"[Firefox] Allow PDF attachments to, once again, be opened directly in the browser (bug 1632644)

Apparently the old link format used in MOZCENTRAL-builds, with the blob URL separated from the filename with a `?` character violates the specification; see https://bugzilla.mozilla.org/show_bug.cgi?id=1632644#c5

Obviously just removing the `?`-part of the URL would have worked, but that would also have meant that we'd no longer be able to provide the correct filename when the user attempts to download the opened PDF attachment.
To fix this we'll instead append the filename in the hash-part of the URL, which however required using a *custom* hash-parameter to avoid triggering the fallback ""named destination"" code-paths in the viewer.

Note that only changing the `web/pdf_attachment_viewer.js` file wasn't sufficient to fix the bug, and we also need to tweak the `webViewerInitialized` function in `web/app.js` since MOZCENTRAL-builds used to ignore *everything* in the URL hash.
This particular code is very old, but changing it *should* be completely safe given that the `PDFViewerApplication.setTitleUsingUrl` method since some time now stores both the original URL (in `this.url`) as well as one without the hash (in `this.baseUrl`). The latter one is already used everywhere where it matters, so this change seem fine to me.

This patch thus restores the original behaviour for PDF attachments in the MOZCENTRAL-build, by once again allowing them to be opened *directly* in the browser without downloading. (The fallback added in PR 11845 is obviously kept, since it seems generally useful to have.)",False
6ffcedc24bba417694a9d0e15eaf16cadf4dad15,2020-05-17 03:18:28,Tim van der Meij,"Merge pull request #11911 from Snuffleupagus/getDefaultPreferences-rm-SystemJS

Remove the SystemJS dependency from the `web/preferences.js` file",True
8f24415a46fc56c4307ef79d8f256f5b2ebc7723,2020-05-16 19:52:15,Jonas Jenwald,"Remove the SystemJS dependency from the `web/preferences.js` file

Originally the `default_preferences.json` file was checked into the repository, and we thus needed to load it in non-PRODUCTION mode (which was originally done asynchronously using `XMLHttpRequest`). Over the years a lot has changed and the `default_preferences.json` file is now built, by the `gulp default_preferences` task, from the `web/app_options.js` file. Hence it's no longer necessary, in non-PRODUCTION mode, to use SystemJS here since we can simply use a standard `import` statement instead.

Note how e.g. `web/app.js` already imports from `web/app_options.js` in the same exact way that `web/preferences.js` now does, hence this patch will *not* result in any significant changes in the built/bundled viewer file.

This is another (small) part in trying to reduce usage of SystemJS, with the goal of hopefully getting rid of it completely. (I've started working on this, and doing so has identified a number of problem areas; this patch addresses one of them.)",False
34218ed1920c0d8d177cbfb0d90a891f34bfbe02,2020-05-16 18:01:20,Tim van der Meij,"Merge pull request #11910 from Snuffleupagus/update-packages

Update packages and translations",True
c12c92e5983d33e376e714541288867b56a3117f,2020-05-16 15:17:08,Jonas Jenwald,Update l10n files,False
4f6664f3f5519cb8ae5caf43938c192d229d6dd4,2020-05-16 15:14:41,Jonas Jenwald,Update `npm` packages,False
887d2f29489acd93057b35a642ceb32d94c58c75,2020-05-16 15:13:21,Jonas Jenwald,Update the `eslint-plugin-unicorn` package,False
15087c35d164a4152b21adde908b4d7619897bb3,2020-05-15 14:58:10,Tim van der Meij,"Merge pull request #11905 from Snuffleupagus/less-require

Reduce the usage of `require` statements in code-paths not protected by pre-processor and/or run-time checks",True
ec0ab91a2b8b11d95e8000a6d2db33afd9239221,2020-05-14 19:27:49,Jonas Jenwald,"Reduce the usage of `require` statements in code-paths not protected by pre-processor and/or run-time checks

This replaces some additional `require`/`exports` usage with standard `import`/`export` statements instead.
Hence another, small, part in the effort to reduce the reliance on SystemJS-specific functionality in the development viewer.",False
8b9492a5c41d0776488a27021981b60fbf23a3bf,2020-05-12 02:47:52,Tim van der Meij,"Merge pull request #11892 from Snuffleupagus/minified-es5

Add a `minified-es5` gulp task (issue 11858)",True
fd80bc817871a4e8c39becadef8cb011457cd71e,2020-05-12 02:41:08,Tim van der Meij,"Merge pull request #11890 from Snuffleupagus/eslint-7

Update ESLint to version 7",True
9b71ccb13b599c51227c20e52f1d99cb6ca2c9ec,2020-05-10 17:11:42,Jonas Jenwald,"Add a `minified-es5` gulp task (issue 11858)

By re-factoring the existing gulp tasks, most of the code can be re-used for both the existing `gulp minified` as well as the new `gulp minified-es5` task.",False
8440958bcf1611eab175e025dcdd6fc5f83588c0,2020-05-10 17:08:58,Jonas Jenwald,"Ensure that the `DEFINES` build target constants, in `gulpfile.js`, cannot be changed",False
9118cea9f700c155fcbbffeb8a94e58fb3117a46,2020-05-10 15:03:44,Jonas Jenwald,"Enable the ESLint `default-case-last` rule, and tweak the existing `use-isnan` rule

These changes were made possible by ESLint version 7, and neither of these rules required any code changes.

Please find additional details about the ESLint rules at https://eslint.org/docs/rules/default-case-last and https://eslint.org/docs/rules/use-isnan",False
f8bff283f3dda17f65a5d0e936bacc707a4caac0,2020-05-10 15:02:46,Jonas Jenwald,"Update ESLint to version 7

Please see https://eslint.org/blog/2020/05/eslint-v7.0.0-released for a list of notable changes.",False
1ee63dc465b11247a1d9194634d9f9fe01ecaba1,2020-05-10 03:52:13,Tim van der Meij,"Merge pull request #11889 from Snuffleupagus/_parsedAnnotations-move-catch

Handle errors individually for each annotation in the `_parsedAnnotations` getter",True
73636e052a9006820d2bdf8a04f8e1d9989be94b,2020-05-09 16:03:39,Jonas Jenwald,"Handle errors individually for each annotation in the `_parsedAnnotations` getter

While working on PR 11872, it occurred to me that it probably wouldn't be a bad idea to change the `_parsedAnnotations` getter to handle errors individually for each annotation. This way, one broken/corrupt annotation won't prevent the rest of them from being e.g. fetched through the API.",False
7823d593f9f3d10a876656c22fcff17f95a2490a,2020-05-09 03:12:12,Tim van der Meij,"Merge pull request #11880 from Snuffleupagus/issue-11875

Attempt to respect the ""zoom"" hash parameter, even when the ""nameddest"" parameter is present (issue 11875)",True
bf2ce760f0856eaebd2fc389b07932688b4449c9,2020-05-08 03:31:30,Tim van der Meij,"Merge pull request #11873 from Snuffleupagus/eslint-assert

Use the ESLint `no-restricted-syntax` rule to ensure that `assert` is always called with two arguments",True
9c341cfec63f429920e36d795b2ef0c4c2f76bad,2020-05-08 03:23:26,Tim van der Meij,"Merge pull request #11879 from Snuffleupagus/eslint-grouped-accessor-pairs

Enable the ESLint `grouped-accessor-pairs` rule",True
af1bb04662ca54f6ef98618bafeaeb0bedce02e7,2020-05-07 17:23:07,Jonas Jenwald,"Attempt to respect the ""zoom"" hash parameter, even when the ""nameddest"" parameter is present (issue 11875)

Given that the `PDFLinkService.setHash` method itself if completely synchronous, moving the handling of ""nameddest"" to occur last *shouldn't* cause any problems (famous last words).
This way the destination will still override any previous parameter, such as e.g. the ""page"", as expected. Furthermore, given that the `PDFLinkService.navigateTo` method is asynchronous that should provide additional guarantees that the ""nameddest"" parameter is always respected.

As sort-of expected, this fairly innocent looking change also required some tweaks in the `PDFHistory` to prevent dummy history entires upon document load (only an issue when both ""page"" *and* ""nameddest"" parameters are provided in the hash).",False
744af9eeb8a244707cf73e74e88085c9ecafb927,2020-05-07 15:13:19,Jonas Jenwald,"Enable the ESLint `grouped-accessor-pairs` rule

This rule complements the existing `accessor-pairs` nicely, and ensures that a getter/setter pair is always consistently ordered.

Please find additional details about this rule at https://eslint.org/docs/rules/grouped-accessor-pairs",False
e1f340a0c2cf66f6c3a091291fdd494844f3dc43,2020-05-05 17:10:05,Jonas Jenwald,"Use the ESLint `no-restricted-syntax` rule to ensure that `assert` is always called with two arguments

Having `assert` calls without a message string isn't very helpful when debugging, and it turns out that it's easy enough to make use of ESLint to enforce better `assert` call-sites.
In a couple of cases the `assert` calls were changed to ""regular"" throwing of errors instead, since that seemed more appropriate.

Please find additional details about the ESLint rule at https://eslint.org/docs/rules/no-restricted-syntax",False
491904d30a4f03785fa3c947fae179f4fd5a518a,2020-05-05 01:49:27,Tim van der Meij,"Merge pull request #11872 from Snuffleupagus/issue-11871

Gracefully handle annotation parsing errors in `Page.getOperatorList` (issue 11871)",True
c32f145c94bb85af7f32de51fcee040e70343e45,2020-05-05 01:39:13,Tim van der Meij,"Merge pull request #11863 from brendandahl/unsupported-features

Add more categories of unsupported features.",True
b1be33c96f34d3e6fc66c6f9cf485a4468d16009,2020-05-04 23:32:16,Brendan Dahl,"Add more categories of unsupported features.

Fixes #11815",False
4aabd063fcf098452829d4601f60920f0fc054a9,2020-05-04 20:39:48,Jonas Jenwald,"Gracefully handle annotation parsing errors in `Page.getOperatorList` (issue 11871)

This should ensure that a page will always render successfully, even if there's errors during the Annotation fetching/parsing.
Additionally the `OperatorList.addOpList` method is also adjusted to ignore invalid data, to make it slightly more robust.",False
2711f4bc8c4a153ed0231899cf498d904481f844,2020-05-03 19:44:16,Tim van der Meij,"Merge pull request #11869 from Snuffleupagus/gulpfile-cleanup

Various smaller clean-up in `gulpfile.js`",True
a9e7798ac6c7f37d82c10f9f79599fa6390ea61f,2020-05-03 15:04:08,Jonas Jenwald,"Split the `createBundle` helper function, in gulpfile.js, into separate ones for the main/worker-thread files

All of the other *similar* helper functions only target one file per function, and there's no particular reason for this one to be different.
This patch will simplify future changes, e.g. experimenting with using `gulp watch` instead of SystemJS for the development viewer.",False
21495c1dd17641aad6d1bac5f764b0fde47911a4,2020-05-03 15:04:02,Jonas Jenwald,"Remove the `gulp bundle` task since it's unused and doesn't really make sense

Not only is there no code depending on it now, the actual task itself doesn't even make sense as-is. Note that it uses the default `DEFINES` configuration *unaltered*, which is neither useful nor correct since the resulting build thus won't make sense without an actual built target set.",False
d822578450262db7290e2f33f14c6823b7140ad6,2020-05-02 18:22:12,Tim van der Meij,"Merge pull request #11868 from Snuffleupagus/update-packages

Update packages and translations",True
30bd3b24c25ccf22aec20d2526443a9b65f84207,2020-05-02 16:55:28,Jonas Jenwald,Update l10n files,False
8fac59de965ed162444e70dd02ce4e14f938e1de,2020-05-02 16:53:41,Jonas Jenwald,Update `npm` packages,False
822939caced0ed828ef92d0fd8fe34ad6cf1f38a,2020-05-02 03:22:41,Tim van der Meij,"Merge pull request #11864 from Snuffleupagus/rm-react-example

Remove the `create-react-app` example (issue 11729)",True
3dc0567a37e3883f53f316e5bca14ce4231670f2,2020-05-01 16:12:35,Jonas Jenwald,"Remove the `create-react-app` example (issue 11729)

Given that none of the PDF.js contributors know React, maintaining and/or providing supporting for the example isn't really feasible unfortunately.
Even something as simple as running/testing the example becomes difficult for anyone completely unfamiliar with React, and furthermore:

 - It's very difficult to tell if the example demonstrates React best-practices, since the PDF.js contributors don't know React.

 - We also have no reasonable way of keeping the example up-to-date with changes in React.

 - The React example, in its current form, is even *hard-coding* the PDF.js version to a now unsupported version.

 - The example is currently triggering ""fake worker"" usage, see issue 11729, which is really *really* bad. Note that the ""fake worker"" functionality is *only* intended as a fallback, and it should absolutely *not* under any circumstances be advertised and certainly shouldn't be triggered in official PDF.js examples.",False
b6f69d47b654d754f5a8126fe73df9d2ac5d1f00,2020-04-29 03:17:24,Tim van der Meij,"Merge pull request #11834 from xelan/feature/preserve-error-types

Preserve error types during translation",True
f5fd24a61f8f77b1090c8278cc6446739ff44f9c,2020-04-28 13:06:30,Andreas Erhard,"Preserve error types during translation

By preserving the exception type, more fine-grained error handling can be performed via client-side logic (e.g. redirect to a search page if a PDF is not found, or to a ticket system in case of invalid PDF files).

The original exception is now re-thrown.

Fixes #11658",False
8fb82e939cf0c8618a4e775ff17fc96f726872b5,2020-04-27 20:35:06,Tim van der Meij,"Merge pull request #11853 from timvandermeij/acroform-names

Include the name for interactive form elements",True
371e699905e41ec830b7b5c47975f50056c87160,2020-04-27 20:25:35,roccobeno,"Include the name for interactive form elements

We already rendered the name for radio buttons, but it was missing for
all other interactive form elements. This commit adds that so that
values entered in form elements can be read based on the element name.",False
d469b420a7b0e8c68797db1d95d54627e2c38fa8,2020-04-27 17:09:30,Tim van der Meij,"Merge pull request #11807 from timvandermeij/puppeteer

Introduce Puppeteer for handling browsers during tests",True
9ebb18f50555870e120e67c0fc3f71a85c944668,2020-04-27 16:33:12,Tim van der Meij,"Implement a command line flag to skip Chrome when running tests

To save time or resources during development it can be useful to run
tests only in Firefox. Previously this could be done by editing the
browser manifest file, but since that file is no longer used for
Puppeteer, this command line flag replaces it. For example, executing
`gulp unittest --noChrome` will only run the unit tests in Firefox.",False
4834a276fdbfc897cb7716cf70ed4d81ad04080d,2020-04-27 16:33:12,Tim van der Meij,"Introduce Puppeteer for handling browsers during tests

This commit replaces our own infrastructure for handling browsers during
tests with Puppeteer. Using our own infrastructure for this had a few
downsides:

- It has proven to not always be reliable, especially when closing the
  browser, causing failures on the bots because browsers were still
  running even though they should have been stopped. Puppeteer should do
  a better job with this because it uses the browser's test built-in
  instrumentation tools for this (the devtools protocol) which our code
  didn't. This also means that we don't have to pass
  parameters/preferences to tweak browser behavior anymore.
- It requires the browsers under test to be installed on the system,
  whereas Puppeteer downloads the browsers before the test. This means
  that setup is much easier (no more manual installations and browser
  manifest files) as well as testing with different browser versions
  (since they can be provisioned on demand). Moreover, this ensures that
  contributors always run the tests in both Firefox and Chrome,
  regardless of which browsers they have installed locally.
- It's all code we have to maintain, so Puppeteer abstracts away how the
  browsers start/stop for us so we don't have to keep that code.

By default, Puppeteer only installs one browser during installation,
hence the need for a post-install script to install the second browser.
This requires `cross-env` to make passing the environment variable work
on both Linux and Windows.",False
d86720b7dc0c20a0aac92875981ed45bfa8ce77d,2020-04-26 18:12:17,Tim van der Meij,"Identify browsers using the name instead of the path

The other testing code already uses the name of the browser as the
unique identifier, so I don't see a good reason to not use that for
identifying browsers to quit as well. Doing so simplifies the (already
somewhat complex) testing logic and ensures that we can use existing
functionality (such as the `getSession` function) to retrieve sessions.",False
bf416db23dbaf6c3ab3c41912fe240893e864e27,2020-04-26 17:09:33,Tim van der Meij,"Merge pull request #11847 from Snuffleupagus/move-maybeValidDimensions

Move the `maybeValidDimensions` check, used with JPEG images, to occur earlier (PR 11523 follow-up)",True
911c33f0256d0b5f80a91fc56b8eac537f7356d8,2020-04-26 15:37:46,Jonas Jenwald,"Move the `maybeValidDimensions` check, used with JPEG images, to occur earlier (PR 11523 follow-up)

Given that the `NativeImageDecoder.{isSupported, isDecodable}` methods require both dictionary lookups *and* ColorSpace parsing, in hindsight it actually seems more reasonable to the `JpegStream.maybeValidDimensions` checks *first*.",False
7363308b97d9d1ae606d2a71221a96e012cfcd45,2020-04-25 02:42:37,Tim van der Meij,"Merge pull request #11845 from Snuffleupagus/less-createObjectURL

Use the native `URL.createObjectURL` method more in the `web/` folder",True
fd9f3d7d5eb3928dea692b2ee757750335f9e53d,2020-04-24 16:57:19,Jonas Jenwald,"Let `PDFAttachmentViewer._bindPdfLink` fallback to downloading the PDF file, when opening the `blobUrl` fails

This is a simple work-around for https://bugzilla.mozilla.org/show_bug.cgi?id=1632644 which was caused by platform changes in Firefox. Ideally the Firefox bug should still be fixed, but these PDF.js changes seem generally useful to prevent both current and future issues here.",False
cd666e3a370fc666bd68369d26556b68a30fc37d,2020-04-24 15:21:08,Jonas Jenwald,"Use the native `URL.createObjectURL` method in `web/pdf_attachment_viewer.js`

There's no particular reason for using the PDF.js helper function `createObjectURL` here, given that the relevant code-path is already guarded by multiple ""disableCreateObjectURL"" option checks.",False
0baabf69db7c83dec424b5004348f46529467ea8,2020-04-24 14:59:33,Jonas Jenwald,"Use the native `URL.createObjectURL` method more in `web/firefoxcom.js`

Given that `URL.createObjectURL` is assumed to always be available in MOZCENTRAL builds, note the existing usage in the file, there's no reason to depend on the PDF.js helper function `createObjectURL` at all here.

Furthermore this patch also changes `DownloadManager.downloadData` to actually revoke the `blobUrl` after downloading has completed, which is similar to the existing code in `DownloadManager.download`.",False
cd2878755bf88496dd69cc80864a675cd7f12b7a,2020-04-24 03:41:25,Tim van der Meij,"Merge pull request #11844 from Snuffleupagus/API-release-font-data

[api-minor] Immediately release the `font.data` property once the font been attached to the DOM (PR 11777 follow-up)",True
e23d5f6022f9174b916bb833e79cf18ed166e57e,2020-04-24 03:26:50,Tim van der Meij,"Merge pull request #11837 from Snuffleupagus/webviewerloaded-top

Always attempt to dispatch the ""webviewerloaded"" event at the embedding `document` (PR 10318 follow-up, issue 11829)",True
c355f91d2e451da65224a66d163ad65ebe88a973,2020-04-23 16:34:57,Jonas Jenwald,"[api-minor] Immediately release the `font.data` property once the font been attached to the DOM (PR 11777 follow-up)

*This patch implements https://github.com/mozilla/pdf.js/pull/11777#issuecomment-609741348*

This extends the work from PR 11773 and 11777 further, by immediately releasing the `font.data` property once the font been attached to the DOM. By not unnecessarily holding onto this data on the main-thread, we'll thus reduce the memory usage of fonts even further (especially beneficial in longer documents with composite fonts).

The new behaviour is controlled by the recently added `fontExtraProperties` API option (adding a new option just for this patch didn't seem necessary), since there's one edge-case in the SVG renderer where the `font.data` property is necessary (see the `pdf2svg` example).

Note that while the default viewer does run clean-up with an idle timeout, that timeout will be reset whenever rendering occurs *or* when scrolling happens in the viewer. In practice this means that unless the user doesn't interact with the viewer in *any* way during an extended period of time, currently set to 30 seconds, the `PDFDocumentProxy.cleanup` method will never be called and font resources will thus not be cleaned-up.",False
c8feea6990415b50719f4ec622003acc55d67cc6,2020-04-23 03:19:13,Tim van der Meij,"Merge pull request #11835 from Snuffleupagus/PageViewport-rotation-validation

[api-minor] Change `PageViewport` to throw when the `rotation` is not a multiple of 90 degrees",True
6ec42061a0738867b6efca3aa32e7cf4b6a6034a,2020-04-23 03:15:43,Tim van der Meij,"Merge pull request #11831 from Snuffleupagus/Travis-Node-LTS

Use Node LTS releases to fix Travis CI builds (issue 10790)",True
479173ce4507e43d279331df237d1dd834aed070,2020-04-23 02:22:20,Jonas Jenwald,"Always attempt to dispatch the ""webviewerloaded"" event at the embedding `document` (PR 10318 follow-up, issue 11829)

This is necessary in order to support cases where the default viewer is embedded in a *dynamically* created <iframe> element.

In order to also support a use-case where there's *multiple* <iframe> elements (containing default viewers) on the same page, the ""webviewerloaded"" event now includes a `source` detail parameter such that it's possible to associate an event with the relevant DOM element.",False
cdc60402f6e506d6d707aba61623762ac74475c6,2020-04-22 18:49:13,Jonas Jenwald,"[api-minor] Change `PageViewport` to throw when the `rotation` is not a multiple of 90 degrees

As evident from the code, `PageViewport` only supports[1] `rotation` values which are a multiple of 90 degrees. Besides it being somewhat difficult to imagine meaningful use-cases for a non-multiple of 90 degrees `rotation`, the code also becomes both simpler and more efficient by not having to consider arbitrary `rotation` values.

However, any invalid rotation will *silently* fallback to assume zero `rotation` which probably isn't great for e.g. `PDFPageProxy.getViewport` in the API. Hence this patch, which will now enforce that only valid `rotation` values are accepted.

---
[1] As far as I can tell, from looking through the history, nothing else has ever been supported either.",False
0874b493020dc0f9b0d76294efae622a0aae30ed,2020-04-22 03:36:27,Jonas Jenwald,"Use Node LTS releases to fix Travis CI builds (issue 10790)

Hopefully we don't need the *latest* Node.js releases for the unit-tests to work on Travis, and by using ""long-term support"" releases instead we should be able to avoid these types of sudden failures in the future as well.",False
571f287983bf382c17213cf47c99658840b6c322,2020-04-22 03:01:52,Tim van der Meij,"Merge pull request #11825 from Snuffleupagus/extensions-viewer-less-AppOptions-lookup

Avoid reading the ""disablePreferences""/""locale"" options, when initializing the viewer, in extension builds",True
a13db5d91ae08f4d164fe75fb6f22a4eeab9e960,2020-04-21 03:50:46,Tim van der Meij,"Merge pull request #11823 from Snuffleupagus/validateOS2Table-improvement

[src/core/fonts.js] Improve the `validateOS2Table` function and other code",True
f243f0564ed9ce3bd8741bcdd4d5d9152bf9fa49,2020-04-21 03:45:14,Tim van der Meij,"Merge pull request #11826 from Snuffleupagus/issue-11657

Change the ""download"" keyboard shortcut (Ctrl+S) handling, in GENERIC/CHROME builds, to utilize the `EventBus` (issue 11657); add a new ""openfile"" keyboard shortcut (Ctrl+O), in GENERIC builds",True
5733d9dd248e73581d3e6595f8b3509df796f5f2,2020-04-20 20:45:44,Jonas Jenwald,"Add a new ""openfile"" keyboard shortcut (Ctrl+O), in GENERIC builds

Somewhat surprisingly, despite the GENERIC viewer implementing ""openfile"" support, there's never been a keyboard shortcut available. Similar to the previous patch, this utilizes the `EventBus` for consistency with the `Toolbar`/`SecondaryToolbar` buttons.

*Please note:* This patch should NOT be construed as carte blanche to simply convert all of the code in `webViewerKeyDown`, or elsewhere, to make use of the `EventBus` instead of direct function calls.
Any further changes, along the lines in this patch, would need to be evaluated on a case-by-case basis to determine if they are actually wanted, given that many/most existing cases in `webViewerKeyDown` should already be *indirectly* observable through the `EventBus` instance.",False
a8a22283c3f5caa775767d7ebf729500ccdb2b45,2020-04-20 20:41:30,Jonas Jenwald,"Change the ""download"" keyboard shortcut (Ctrl+S) handling, in GENERIC/CHROME builds, to utilize the `EventBus` (issue 11657)

This improves the consistency of the ""download"" handling, in the default viewer, such that the `Toolbar`/`SecondaryToolbar` buttons *and* the keyboard shortcut are now handled in the same way (using the `EventBus`).

Given that the ""download"" keyboard shortcut handling is limited to GENERIC/CHROME builds and that the issue does raise a valid point about only being able to observe *some* downloads, these changes seem acceptable in this particular case.

Finally the pre-processor condition is adjusted to *explicitly*, rather than implicitly, list the affected build targets.

*Please note:* This patch should NOT be construed as carte blanche to simply convert all of the code in `webViewerKeyDown`, or elsewhere, to make use of the `EventBus` instead of direct function calls.
Any further changes, along the lines in this patch, would need to be evaluated on a case-by-case basis to determine if they are actually wanted, given that many/most existing cases in `webViewerKeyDown` should already be *indirectly* observable through the `EventBus` instance.",False
256aae02d270f668645190e484522af1b2b1b572,2020-04-20 16:39:33,Jonas Jenwald,"Avoid reading the ""disablePreferences""/""locale"" options, when initializing the viewer, in extension builds

These two `AppOptions` are only defined in GENERIC builds, hence it's completely unnecessary to check them in the extension builds (e.g. MOZCENTRAL and CHROME).

Also, simply let the ""printResolution"" option be defined in all builds since it's being accessed in `web/firefox_print_service.js` as well.",False
695140728a153c02a92f2ce7e1c548f4e2ee1cd5,2020-04-19 14:55:25,Jonas Jenwald,"[src/core/fonts.js] Improve the `validateOS2Table` function

Rather than creating a new `Stream` just to validate the OS/2 TrueType table, it's simpler/better to just pass in a reference to the font data and use that instead (similar to other TrueType helper functions).",False
033d27fc25342f309fc208b0f8cc555bc78cdeaa,2020-04-19 14:48:20,Jonas Jenwald,"[src/core/fonts.js] Replace some unnecessary `Stream.getUint16()` calls with `Stream.skip(2)` instead

There's a handful of cases in the code where the intention is simply to advance the `Stream` position, but rather than only doing that the code instead fetches/computes a Uint16 value (and without using the result for anything).",False
4fae1ac5c4c63a0dc09a6fd3f3f4d2d7d716c306,2020-04-19 14:48:15,Jonas Jenwald,"[src/core/fonts.js] Replace some unnecessary `Stream.getBytes(...)` calls with `Stream.skip(...)` instead

There's a handful of cases in the code where the intention is simply to advance the `Stream` position, but rather than only doing that the code instead fetches the bytes in question (and without using the result for anything).",False
49f59eb627646ae9a6e166ee2e0ef2cac9390b4f,2020-04-18 18:14:39,Tim van der Meij,"Merge pull request #11822 from Snuffleupagus/update-packages

Update packages and translations",True
cf58f787f14e4f5dc2696a34e9f5548fb89eb0d4,2020-04-18 14:41:19,Jonas Jenwald,Update l10n files,False
d67c1899b5b2d7781da3f28b1359dc4575b79ec9,2020-04-18 14:38:46,Jonas Jenwald,Update `npm` packages,False
44da021012d02953490bf884c8615061af997549,2020-04-18 04:04:39,Tim van der Meij,"Merge pull request #11814 from tamuratak/svg_text_vertical

Support the vertical writing mode with SVG backend.",True
7b23476e61f62caf41f3ddd8df2c70c2596bc8ba,2020-04-18 03:49:47,Tim van der Meij,"Merge pull request #11818 from Snuffleupagus/eslint-dot-notation

Enable the `dot-notation` ESLint rule",True
c1733d2bcdfcac435a331a3b0dca7c0e73689a38,2020-04-18 03:40:46,Tim van der Meij,"Merge pull request #11819 from Snuffleupagus/decodeScan-rm-findNextFileMarker-call

[src/core/jpg.js] Remove redundant marker validation at the end of the `decodeScan` function (PR 11805 follow-up)",True
2a292c79105d685bf504483e46a6a52d174bd093,2020-04-18 03:34:19,Tim van der Meij,"Merge pull request #11821 from timgates42/bugfix_typo_occurrences

docs: Fix simple typo, occurences -> occurrences",True
8795a34563f74b09962309b582f2470db0b2e85e,2020-04-18 03:23:18,Tim Gates,"docs: Fix simple typo, occurences -> occurrences

There is a small typo in gulpfile.js, systemjs.config.js.

Should read `occurrences` rather than `occurences`.",False
518d26dfb4a5d97c6247034513b8923f21169632,2020-04-17 19:10:02,Jonas Jenwald,"[src/core/jpg.js] Remove redundant marker validation at the end of the `decodeScan` function (PR 11805 follow-up)

With the MCU parsing changes made in PR 11805, the final marker validation is no longer necessary before the `decodeScan` function returns.",False
1cc3dbb6944b764f26f19207d1ccb13978cddb65,2020-04-17 15:54:46,Jonas Jenwald,"Enable the `dot-notation` ESLint rule

*Please note:* These changes were done automatically, using the `gulp lint --fix` command.

This rule is already enabled in mozilla-central, see https://searchfox.org/mozilla-central/rev/567b68b8ff4b6d607ba34a6f1926873d21a7b4d7/tools/lint/eslint/eslint-plugin-mozilla/lib/configs/recommended.js#103-104

The main advantage, besides improved consistency, of this rule is that it reduces the size of the code (by 3 bytes for each case). In the PDF.js code-base there's close to 8000 instances being fixed by the `dot-notation` ESLint rule, which end up reducing the size of even the *built* files significantly; the total size of the `gulp mozcentral` build target changes from `3 247 456` to `3 224 278` bytes, which is a *reduction* of `23 178` bytes (or ~0.7%) for a completely mechanical change.

A large number of these changes affect the (large) lookup tables used on the worker-thread, but given that they are still initialized lazily I don't *think* that the new formatting this patch introduces should undo any of the improvements from PR 6915.

Please find additional details about the ESLint rule at https://eslint.org/docs/rules/dot-notation",False
32f9cabf8283df91887cf2fc26563cc7068ec2af,2020-04-17 05:31:51,Takashi Tamura,Support the vertical writing mode with SVG backend.,False
c218e94f664c97d3c95994d57b11d11488dae54b,2020-04-17 03:02:58,Tim van der Meij,"Merge pull request #11813 from AndyTeas/patch-1

Suppress browser autofill on page number",True
69b3ab4c416e4d8917848fecd5bc81340dd51e64,2020-04-16 14:19:17,AndyTeas,"Suppress browser autofill on page number

What the user did:
    Open the PDF Viewer in Chrome;
    Mouse click into the “Page number” input field;

What they saw:
    A pop-up list with seemingly random numbers

What you were expecting to see:
    Nothing

What they see is the Chrome “Autofill” feature at work – that is suggesting values that you have previously entered into number fields in forms, as possible values you may want to enter into this field.  The list has nothing to do with the PDF currently open but the user does not know this.",False
96923eb2a69727e67f08471ee7c2b2187d094e39,2020-04-16 03:38:58,Tim van der Meij,"Merge pull request #11805 from Snuffleupagus/issue-11794

Always skip over any additional, unexpected, RSTx (restart) markers in corrupt JPEG images (issue 11794)",True
a7def05aa1c46715f6d578c75e3f9dc45b020fd5,2020-04-16 03:38:16,Tim van der Meij,"Merge pull request #11810 from Snuffleupagus/fromCodePoint-followup

A couple of small `String.fromCodePoint` improvements (PR 11698 and 11769 follow-up)",True
b9cce0e0c12cb4381f8169ab2d3a19f6990654a6,2020-04-16 03:02:08,Tim van der Meij,"Merge pull request #11806 from Snuffleupagus/pr-10738-followup

[api-minor] Fix the return value of `PDFDocumentProxy.getViewerPreferences` when no viewer preferences are present (PR 10738 follow-up)",True
44b4a74f48c9491d02dd85a5d0b21e7af8409671,2020-04-15 17:15:08,Jonas Jenwald,"A couple of small `String.fromCodePoint` improvements (PR 11698 and 11769 follow-up)

 - Add a reduced test-case for issue 11768, to prevent future regressions.
   (Given that PR 11769 is only a work-around, rather than a proper solution, it may not be entirely accurate for the issue to be closed as fixed.)

 - Add more validation of the charCode, as found by the heuristics, in `PartialEvaluator._buildSimpleFontToUnicode` to prevent future issues.",False
06f6f8719f92b4131a72eba4f66e90c4ab898d79,2020-04-15 02:57:08,Jonas Jenwald,"Always skip over any additional, unexpected, RSTx (restart) markers in corrupt JPEG images (issue 11794)",False
26cffd03b0f54a37b22c6a4ecee50fef66aceab5,2020-04-15 02:57:08,Jonas Jenwald,"[src/core/jpg.js] Remove some redundant marker validation during the MCU parsing in the `decodeScan` function

Some of the code in `src/core/jpg.js` is fairly old, and has with time become unnecessary when the surrounding code has been updated to handle various types of JPEG corruption.
In particular the `if (!marker || marker <= 0xff00) { ... }` branch is now dead code, since:

 - The `!marker` case can no longer happen, since we would already have broken out of the loop thanks to the `!fileMarker` branch a handful of lines above.

 - The `marker <= 0xff00` case can also no longer happen, since the `findNextFileMarker` function validate markers much more thoroughly (by checking `marker >= 0xffc0 && marker <= 0xfffe`). Hence we'd again have broken out of the loop via the `!fileMarker` branch above when no valid marker was found.",False
746eaf31541e52d47e67e30b11f0c40706d3ab37,2020-04-15 02:55:50,Jonas Jenwald,"[api-minor] Fix the return value of `PDFDocumentProxy.getViewerPreferences` when no viewer preferences are present (PR 10738 follow-up)

This patch fixes yet another instalment in the never-ending series of ""what the *bleep* was I thinking"", by changing the `PDFDocumentProxy.getViewerPreferences` method to return `null` by default.
Not only is this method now consistent with many other API methods, for the data not present case, but it also avoids having to e.g. loop through an object to check if it's actually empty (note the old unit-test).",False
50bc4a18e8c564753365d927d5ec6a6d2cce3072,2020-04-15 02:27:23,Tim van der Meij,"Merge pull request #11809 from Snuffleupagus/Prettier-2

Update Prettier to version 2.0",True
426945b4803962f2056b0297382fc01a792275fc,2020-04-14 15:58:14,Jonas Jenwald,"Update Prettier to version 2.0

Please note that these changes were done automatically, using `gulp lint --fix`.

Given that the major version number was increased, there's a fair number of (primarily whitespace) changes; please see https://prettier.io/blog/2020/03/21/2.0.0.html
In order to reduce the size of these changes somewhat, this patch maintains the old ""arrowParens"" style for now (once mozilla-central updates Prettier we can simply choose the same formatting, assuming it will differ here).",False
a4dd081d7be075c102abe164c74d5900c73066a8,2020-04-11 22:26:35,Tim van der Meij,"Merge pull request #11800 from Snuffleupagus/rm-gitpod-README

Remove any mention of Gitpod from the README (issue 11732)",True
5234c22c295e66457210f65f541f85c330c72d7e,2020-04-11 20:17:27,Jonas Jenwald,"Remove any mention of Gitpod from the README (issue 11732)

 - Since the Gitpod contributing work-flow is, from the PDF.js project perspective, completely unsupported we don't want to mention it in such a highly visible way as the README file.

 - Since Gitpod is a commercial service, we probably want to avoid *potentially* being seen as advertising and/or endorsing it by mentioning it (somewhat prominently) in the PDF.js README file.

 - By leaving the actual Gitpod files in the repository, for now, this should thus avoid outright breaking things for any existing users.",False
71d16686e4094feb913e710c71d040b57f176bdd,2020-04-11 19:32:19,Tim van der Meij,"Merge pull request #11799 from Snuffleupagus/allSettled

Fail early, in modern `GENERIC` builds, if certain required browser functionality is missing (PR 11771 follow-up)",True
ecbcde7ff3f2433bc4aa19f2b483b24a2829792b,2020-04-11 17:12:03,Jonas Jenwald,"Fail early, in modern `GENERIC` builds, if certain required browser functionality is missing (PR 11771 follow-up)

With two kind of builds now being produced, with/without translation/polyfills, it's unfortunately somewhat easy for users to accidentally pick the wrong one.

In the case where a user would attempt to use a modern build of PDF.js in an older browser, such as e.g. IE11, the failure would be immediate when the code is loaded (given the use of unsupported ECMAScript features).
However in some browsers/environments, a modern PDF.js build may load correctly and thus *appear* to function, only to fail for e.g. certain API calls. To hopefully lessen the support burden, and to try and improve things overall, this patch adds additional checks to ensure that a modern build of PDF.js cannot be used in browsers/environments which lack native support for `Promise.allSettled`.[1] Hence we'll fail early, with an error message telling users to pick an ES5-compatible build instead.

*Please note:* While it's probably too early to tell if this will be a widespread issue, it's possible that this is the sort of patch that *may* warrant being `git cherry-pick`ed onto the current beta version (v2.4.456).

---
[1] This was a fairly recent addition to the web platform, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled#Browser_compatibility",False
8527303858ff9cd2cb6a9d4b3444a8a1216a997d,2020-04-11 00:57:41,Tim van der Meij,"Merge pull request #11797 from Snuffleupagus/mozcentral-ignore-fallback-cursor-images

Don't bundle the fallback `grab`/`grabbing` cursor images when running `gulp mozcentral`",True
ddd90e671d750a4f4a0b73c4342344a6d3257a1e,2020-04-10 21:25:06,Jonas Jenwald,"Don't bundle the fallback `grab`/`grabbing` cursor images when running `gulp mozcentral`

These cursor images are only necessary as a fallback for older browsers, hence there's no reason to keep shipping them in Firefox as far as I can tell; see https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Browser_compatibility",False
12aba0f91a5cd3e36fa81cb799540f8073990831,2020-04-10 01:58:04,Brendan Dahl,"Merge pull request #11789 from Snuffleupagus/bug-792816

Add a new `pdfjs.enablePermissions` preference, off by default, to allow the PDF documents to disable copying in the viewer (bug 792816)",True
8521f70157769d9691ee41b03d40b663e3c57e16,2020-04-08 21:50:47,Jonas Jenwald,"Add a new `pdfjs.enablePermissions` preference, off by default, to allow the PDF documents to disable copying in the viewer (bug 792816)

*Please note:* Most of the necessary API work was done in PR 10033, and the only remaining thing to do here was to implement it in the viewer.

The new preference should thus allow e.g. enterprise users to disable copying in the viewer, for PDF documents whose permissions specify that.

In order to simplify things the ""copy""-permission was implemented using CSS, as suggested in https://bugzilla.mozilla.org/show_bug.cgi?id=792816#c55, which should hopefully suffice.[1]
The advantage of this approach, as opposed to e.g. disabling the `textLayer` completely, is first of all that it ensures that searching still works correctly even in copy-protected documents. Secondly this also greatly simplifies the overall implementation, since it doesn't require a lot of code for something that's disabled by default.

---
[1] As the discussion in the bug shows, this kind of copy-protection is not very strong and is also generally easy to remove/circumvent in various ways. Hence a simple solution, targeting ""regular""-users rather than ""power""-users is hopefully deemed acceptable here.",False
4fe92605b75d7e0952738b7f1575d78145b69aeb,2020-04-08 02:43:02,Tim van der Meij,"Merge pull request #11727 from Snuffleupagus/issue-11713

Add a heuristic to scale even single-char text, when the horizontal/vertical scaling differs significantly (issue 11713)",True
91efde52465da31381bfbbddb1b3f597ab5bc5a7,2020-04-07 04:06:23,Jonas Jenwald,"Add a heuristic to scale even single-char text, when the horizontal/vertical scaling differs significantly (issue 11713)

At this point in time, compared to when the ""ignore single-char"" code was added, we *should* generally be doing a much better job of combining text into as few chunks as possible.
However, there's still bad cases where we're not able to combine text as much as one would like, which is why I'm *not* proposing to simply measure/scale all text. Instead this patch will to only measure/scale single-char text in cases where the horizontal/vertical scale is off significantly, since that's were you'd expect bad text-selection behaviour otherwise.

Note that most of the movement caused by this patch is with Type3 fonts, which is a somewhat special font type and one where our current text-selection behaviour is probably the least good.",False
70c54ab9d9e853d9a1c27bce8f30f5722af4aaf4,2020-04-07 03:40:12,Tim van der Meij,"Merge pull request #11746 from Snuffleupagus/issue-11740

Create the glyph mapping correctly for composite Type1, i.e. CIDFontType0, fonts (issue 11740)",True
9871ccc69fca8478dbebd80a9a18591410c4b3d0,2020-04-07 02:24:14,Tim van der Meij,"Merge pull request #11777 from Snuffleupagus/Font-exportData-2

[api-minor] Change `Font.exportData` to, by default, stop exporting properties which are completely unused on the main-thread and/or in the API (PR 11773 follow-up)",True
2d46230d23dc506e43692ccef8f24468bd9c38d0,2020-04-06 15:17:09,Jonas Jenwald,"[api-minor] Change `Font.exportData` to, by default, stop exporting properties which are completely unused on the main-thread and/or in the API (PR 11773 follow-up)

For years now, the `Font.exportData` method has (because of its previous implementation) been exporting many properties despite them being completely unused on the main-thread and/or in the API.
This is unfortunate, since among those properties there's a number of potentially very large data-structures, containing e.g. Arrays and Objects, which thus have to be first structured cloned and then stored on the main-thread.

With the changes in this patch, we'll thus by default save memory for *every* `Font` instance created (there can be a lot in longer documents). The memory savings obviously depends a lot on the actual font data, but some approximate figures are: For non-embedded fonts it can save a couple of kilobytes, for simple embedded fonts a handful of kilobytes, and for composite fonts the size of this auxiliary can even be larger than the actual font program itself.

All-in-all, there's no good reason to keep exporting these properties by default when they're unused. However, since we cannot be sure that every property is unused in custom implementations of the PDF.js library, this patch adds a new `getDocument` option (named `fontExtraProperties`) that still allows access to the following properties:

 - ""cMap"": An internal data structure, only used with composite fonts and never really intended to be exposed on the main-thread and/or in the API.
   Note also that the `CMap`/`IdentityCMap` classes are a lot more complex than simple Objects, but only their ""internal"" properties survive the structured cloning used to send data to the main-thread. Given that CMaps can often be *very* large, not exporting them can also save a fair bit of memory.

 - ""defaultEncoding"": An internal property used with simple fonts, and used when building the glyph mapping on the worker-thread. Considering how complex that topic is, and given that not all font types are handled identically, exposing this on the main-thread and/or in the API most likely isn't useful.

 - ""differences"": An internal property used with simple fonts, and used when building the glyph mapping on the worker-thread. Considering how complex that topic is, and given that not all font types are handled identically, exposing this on the main-thread and/or in the API most likely isn't useful.

 - ""isSymbolicFont"": An internal property, used during font parsing and building of the glyph mapping on the worker-thread.

  - ""seacMap"": An internal map, only potentially used with *some* Type1/CFF fonts and never intended to be exposed in the API. The existing `Font.{charToGlyph, charToGlyphs}` functionality already takes this data into account when handling text.

 - ""toFontChar"": The glyph map, necessary for mapping characters to glyphs in the font, which is built upon the various encoding information contained in the font dictionary and/or font program. This is not directly used on the main-thread and/or in the API.

 - ""toUnicode"": The unicode map, necessary for text-extraction to work correctly, which is built upon the ToUnicode/CMap information contained in the font dictionary, but not directly used on the main-thread and/or in the API.

 - ""vmetrics"": An array of width data used with fonts which are composite *and* vertical, but not directly used on the main-thread and/or in the API.

 - ""widths"": An array of width data used with most fonts, but not directly used on the main-thread and/or in the API.",False
8770ca30144b0f33d94d2f3f754cff25cf339b7c,2020-04-06 14:51:02,Jonas Jenwald,"Make the `decryptAscii` helper function, in `src/core/type1_parser.js`, slightly more efficient

By slicing the Uint8Array directly, rather than using the prototype and a `call` invocation, the runtime of `decryptAscii` is decreased slightly (~30% based on quick logging).
The `decryptAscii` function is still less efficient than `decrypt`, however ASCII encoded Type1 font programs are sufficiently rare that it probably doesn't matter much (we've only seen *two* examples, issue 4630 and 11740).",False
938d519192bb806ac4ad1e1c07273ce579f5941f,2020-04-06 14:51:02,Jonas Jenwald,"Create the glyph mapping correctly for composite Type1, i.e. CIDFontType0, fonts (issue 11740)

This updates `Type1Font.getGlyphMapping` with a code-path ""borrowed"" from `CFFFont.getGlyphMapping`.",False
6a8c59130129b06eea4b53c359732118f46b05bf,2020-04-06 14:51:02,Jonas Jenwald,"Improve detection of binary/ASCII `eexec` encrypted Type1 font programs in `Type1Parser` (issue 11740)

The PDF document, in the referenced issue, actually contains ASCII-encoded Type1 data which we currently *incorrectly* identify as binary.

According to the specification, see https://www-cdf.fnal.gov/offline/PostScript/T1_SPEC.PDF#[{%22num%22%3A203%2C%22gen%22%3A0}%2C{%22name%22%3A%22XYZ%22}%2C87%2C452%2Cnull], the current checks are insufficient to decide between binary/ASCII encoded Type1 font programs.",False
2619272d73615220f9736ca83b3b3711238ae735,2020-04-06 00:23:48,Jonas Jenwald,"Change the signature of `TranslatedFont`, and convert it to a proper class

In preparation for the next patch, this changes the signature of `TranslatedFont` to take an object rather than individual parameters. This also, in my opinion, makes the call-sites easier to read since it essentially provides a small bit of documentation of the arguments.

Finally, since it was necessary to touch `TranslatedFont` anyway it seemed like a good idea to also convert it to a proper `class`.",False
0400109b8763e53cf657d72fbf1bdab2df9927b9,2020-04-06 00:20:33,Tim van der Meij,"Merge pull request #11773 from Snuffleupagus/Font-exportData-1

[api-minor] Change `Font.exportData` to use an explicit white-list of exportable properties, and stop exporting internal/unused properties",True
59f54b946d4fb54ce7cbad89f9b7e8fb7d61b473,2020-04-05 19:57:50,Jonas Jenwald,"Ensure that all `Font` instances have the `vertical` property set to a boolean

Given that the `vertical` property is always accessed on the main-thread, ensuring that the property is explicitly defined seems like the correct thing to do since it also avoids boolean casting elsewhere in the code-base.",False
c5e1fd3fde5f07b8412a08d6e3fa79693192483e,2020-04-05 19:57:50,Jonas Jenwald,"Use ""standard"" shadowing in the `Font.spaceWidth` method

With `Font.exportData` now only exporting white-listed properties, there should no longer be any reason to not use standard shadowing in the `Font.spaceWidth` method.
Furthermore, considering the amount of other changes to the code-base over the years it's not even clear to me that the special-case was necessary any more (regardless of the preceding patches).",False
a5e4cccf13266dc5f9c6b9aa41e4ad6e51e65f4d,2020-04-05 19:57:50,Jonas Jenwald,"[api-minor] Prevent `Font.exportData` from exporting internal/unused properties

A number of *internal* font properties, which only make sense on the worker-thread, were previously exported. Some of these properties could also contain potentially large Arrays/Objects, which thus unnecessarily increases memory usage since we're forced to copy these to the main-thread and also store them there.

This patch stops exporting the following font properties:

 - ""_shadowWidth"": An internal property, which was never intended to be exported.

 - ""charsCache"": An internal cache, which was never intended to be exported and doesn't make any sense on the main-thread. Furthermore, by the time `Font.exportData` is called it's usually `undefined` or a mostly empty Object as well.

 - ""cidEncoding"": An internal property used with (some) composite fonts.
   As can be seen in the `PartialEvaluator.translateFont` method, `cidEncoding` will only be assigned a value when the font dictionary has an ""Encoding"" entry which is a `Name` (and not in the `Stream` case, since those obviously cannot be cloned).
   All-in-all this property doesn't really make sense on the main-thread and/or in the API, and note also that the resulting `cMap` property is (partially) available already.

 - ""fallbackToUnicode"": An internal map, part of the heuristics used to improve text-selection in (some) badly generated PDF documents with simple fonts. This was never intended to be exposed on the main-thread and/or in the API.

 - ""glyphCache"": An internal cache, which was never intended to be exported and which doesn't make any sense on the main-thread. Furthermore, by the time `Font.exportData` is called it's usually a mostly empty Object as well.

 - ""isOpenType"": An internal property, used only during font parsing on the worker-thread. In the *very* unlikely event that an API consumer actually needs that information, then `fontType` should be a (generally) much better property to use.

Finally, in the (hopefully) unlikely event that any of these properties become necessary on the main-thread, re-adding them to the white-list is easy to do.",False
664f7de54097c799b25979cd2af5141fd36f7e66,2020-04-05 19:57:48,Jonas Jenwald,"Change `Font.exportData` to use an explicit white-list of exportable properties

This patch addresses an existing, and very long standing, TODO in the code such that it's no longer possible to send arbitrary/unnecessary font properties to the main-thread.
Furthermore, by having a white-list it's also very easy to see *exactly* which font properties are being exported.

Please note that in its current form, the list of exported properties contains *every* possible enumerable property that may exist in a `Font` instance.
In practice no single font will contain *all* of these properties, and e.g. embedded/non-embedded/Type3 fonts will all differ slightly with respect to what properties are being defined. Hence why only explicitly set properties are included in the exported data, to avoid half of them being `undefined`, which however should not be a problem for any existing consumer (since they'd already need to handle those cases).

Since a fair number of these font properties are completely *internal* functionality, and doesn't make any sense to expose on the main-thread and/or in the API, follow-up patch(es) will be required to trim down the list. (I purposely included all properties here for brevity and future documentation purposes.)",False
09cccd8ecc343d3358d981a42e8ee174f1a87b3f,2020-04-05 19:16:36,Tim van der Meij,"Merge pull request #11780 from Snuffleupagus/refactor-PDFViewerApplication-load

Move the initialization of ""page labels""/""metadata""/""auto print"" out of `PDFViewerApplication.load`",True
9ef58347ed3b640db1d4397a716b247688dd628a,2020-04-05 19:11:00,Jonas Jenwald,"A couple of small improvements of the `PDFViewerApplication.{_initializeMetadata, _initializePdfHistory}` methods

 - Use template strings when printing document/viewer information in `_initializeMetadata`, since the old format feels overly verbose.
   Also, get the WebGL state from the `BaseViewer` instance[1] rather than the `AppOptions`. Since the `AppOptions` value could theoretically have been changed (by the user) after the viewer components were initialized, it seems much more useful to print the *actual* value that'll be used during rendering.

 - Change `_initializePdfHistory` to actually do the ""is embedded""-check first, in accordance with the comment and given that the ""disableHistory"" option usually shouldn't be set.

---
[1] Admittedly reaching into the `BaseViewer` instance and just grabbing the value perhaps isn't a great approach overall, but given that the WebGL-backend isn't even on by default this probably doesn't matter too much.",False
b9add6509932c903b5c14d84556ef3a6551e5414,2020-04-05 19:11:00,Jonas Jenwald,"Move the initialization of ""auto print"" out of `PDFViewerApplication.load`

Over time, with more and more API-functionality added, the `PDFViewerApplication.load` method has become quite large and complex. In an attempt to improve the current situation somewhat, this patch moves the fetching and initialization of ""auto print"" out into its own (private) helper method instead.",False
d07be1a89bed0b78dcd18f5134f6601caac0b9fb,2020-04-05 19:11:00,Jonas Jenwald,"Move the initialization of ""metadata"" out of `PDFViewerApplication.load`

Over time, with more and more API-functionality added, the `PDFViewerApplication.load` method has become quite large and complex. In an attempt to improve the current situation somewhat, this patch moves the fetching and initialization of ""metadata"" out into its own (private) helper method instead.",False
32f1d0de76d6566e62cc98f4351ed383337ed24b,2020-04-05 19:11:00,Jonas Jenwald,"Move the initialization of ""page labels"" out of `PDFViewerApplication.load`

Over time, with more and more API-functionality added, the `PDFViewerApplication.load` method has become quite large and complex. In an attempt to improve the current situation somewhat, this patch moves the fetching and initialization of ""page labels"" out into its own (private) helper method instead.",False
9dedaa5eb9ac1fee9671862be789bb05c140f7eb,2020-04-05 19:04:11,Tim van der Meij,"Merge pull request #11781 from Snuffleupagus/fix-gulp-jsdoc

Update the ""gulp jsdoc"" task to account for API changes in the `mkdirp` package (PR 11772 follow-up)",True
f53e1409f659a3c829257fc45c9a39c669c51be6,2020-04-05 15:50:10,Jonas Jenwald,"Update the ""gulp jsdoc"" task to account for API changes in the `mkdirp` package (PR 11772 follow-up)

I completely overlooked the fact that we had *one* occurrence of an asynchronous `mkdirp` call in the gulpfile, which thus breaks since the package now uses Promises rather than a callback function; sorry about that!",False
702fec534dfade256e71acc329a5c2960fe0434a,2020-04-04 18:06:52,Tim van der Meij,"Merge pull request #11769 from Snuffleupagus/charToGlyph-fontCharCode-range

Ensure that `Font.charToGlyph` won't fail because `String.fromCodePoint` is given an invalid code point (issue 11768)",True
87142a635e9da6d4b394d2521675a0cb4cbc55c2,2020-04-03 13:19:50,Jonas Jenwald,"Ensure that `Font.charToGlyph` won't fail because `String.fromCodePoint` is given an invalid code point (issue 11768)

*Please note:* This patch on its own is *not* sufficient to address the underlying problem in the referenced issue, hence why no test-case is included since the *actual* bug still needs to be fixed.

As can be seen in the specification, https://tc39.es/ecma262/#sec-string.fromcodepoint, `String.fromCodePoint` will throw a RangeError for invalid code points.

In the event that a CMap, in a composite font, contains invalid data and/or we fail to parse it correctly, it's thus possible that the glyph mapping that we build end up with entires that cause `String.fromCodePoint` to throw and thus `Font.charToGlyph` to break.
If that happens, as is the case in issue 11768, significant portions of a page/document may fail to render which seems very unfortunate.

While this patch doesn't fix the underlying problem, it's hopefully deemed useful not only for the referenced issue but also to prevent similar bugs in the future.",False
79a99737a06e10f226ed880a8f50b5366089cec1,2020-04-03 03:14:38,Tim van der Meij,"Merge pull request #11772 from Snuffleupagus/update-packages

Update packages and translations",True
9a3b52f52bf675a813df2d55102a252a81e5b64b,2020-04-02 15:52:18,Jonas Jenwald,Update l10n files,False
7b7fe602100d8047a810a620a18f2035e32d0a58,2020-04-02 15:52:13,Jonas Jenwald,"Update the `mkdirp` package, since its major version was increased",False
412fec1545a086e61ecf27133849d197a3ab04eb,2020-04-02 15:43:14,Jonas Jenwald,Update `npm` packages,False
7ed71a0d7c3db9ebe6d486f70e05434aa36b5e63,2020-04-02 01:35:19,Tim van der Meij,"Merge pull request #11771 from Snuffleupagus/issue-11762

Fail early, in modern `GENERIC` builds, if certain required browser functionality is missing (issue 11762)",True
710704508c89727b6217a739f3927e6d319426c4,2020-04-01 23:12:48,Jonas Jenwald,"Fail early, in modern `GENERIC` builds, if certain required browser functionality is missing (issue 11762)

With two kind of builds now being produced, with/without translation/polyfills, it's unfortunately somewhat easy for users to accidentally pick the wrong one.

In the case where a user would attempt to use a modern build of PDF.js in an older browser, such as e.g. IE11, the failure would be immediate when the code is loaded (given the use of unsupported ECMAScript features).
However in some browsers/environments, in particular Node.js, a modern PDF.js build may load correctly and thus *appear* to function, only to fail for e.g. certain API calls. To hopefully lessen the support burden, and to try and improve things overall, this patch adds checks to ensure that a modern build of PDF.js cannot be used in browsers/environments which lack native support for critical functionality (such as e.g. `ReadableStream`). Hence we'll fail early, with an error message telling users to pick an ES5-compatible build instead.

To ensure that we actually test things better especially w.r.t. usage of the PDF.js library in Node.js environments, the `gulp npm-test` task as used by Node.js/Travis was changed (back) to test an ES5-compatible build.
(Since the bots still test the code as-is, without transpilation/polyfills, this shouldn't really be a problem as far as I can tell.)
As part of these changes there's now both `gulp lib` and `gulp lib-es5` build targets, similar to e.g. the generic builds, which thanks to some re-factoring only required adding a small amount of code.

*Please note:* While it's probably too early to tell if this will be a widespread issue, it's possible that this is the sort of patch that *may* warrant being `git cherry-pick`ed onto the current beta version (v2.4.456).",False
ce1727626c8aa6e364e3b4929c72d50f711ef442,2020-03-31 03:47:30,Tim van der Meij,"Merge pull request #11655 from Snuffleupagus/rm-getGlobalEventBus

[api-minor] Remove the `getGlobalEventBus` viewer functionality, and the `eventBusDispatchToDOM` option/preference (PR 11631 follow-up)",True
35c9f8de38b324e2ffedaf3299c74e5742445a2f,2020-03-31 03:23:49,Tim van der Meij,"Merge pull request #11767 from Snuffleupagus/issue-11766

Replace the RTL images with CSS transforms of the standard images (issue 11766)",True
63efe612450c5dccfb9f1b9f2c8c6cbdb55f9a5d,2020-03-31 02:17:49,Jonas Jenwald,"Replace the RTL images with CSS transforms of the standard images (issue 11766)

This avoids unnecessary duplication of many images, thus reducing the size of PDF.js image resources slightly.

Note that since the images should only be flipped horizontally, this required specifying the horizontal/vertical scaling separately for the hiDPI-images.",False
664b79abe0ca4ea6437eda510989276d49a35961,2020-03-29 15:54:46,Jonas Jenwald,"[api-minor] Remove the `eventBusDispatchToDOM` option/preference, and thus the general ability to dispatch ""viewer components"" events to the DOM

This functionality was only added to the default viewer for backwards compatibility and to support the various PDF viewer tests in mozilla-central, with the intention to eventually remove it completely.
While the different mozilla-central tests cannot be *easily* converted from DOM events, it's however possible to limit that functionality to only MOZCENTRAL builds *and* when tests are running.

Rather than depending of the re-dispatching of internal events to the DOM, the default viewer can instead be used in e.g. the following way:
```javascript
document.addEventListener(""webviewerloaded"", function() {
  PDFViewerApplication.initializedPromise.then(function() {
    // The viewer has now been initialized, and its properties can be accessed.

    PDFViewerApplication.eventBus.on(""pagerendered"", function(event) {
      console.log(""Has rendered page number: "" + event.pageNumber);
    });
  });
});
```",False
7fd5f2dd61a4ae906fcc09b2371fbbb5484af1e6,2020-03-29 15:50:23,Jonas Jenwald,"[api-minor] Remove the `getGlobalEventBus` viewer functionality (PR 11631 follow-up)

The correct/intended way of working with the ""viewer components"" is by providing an `EventBus` instance upon initialization, and the `getGlobalEventBus` was only added for backwards compatibility.
Note, for example, that using `getGlobalEventBus` doesn't really work at all well with a use-case where there's *multiple* `PDFViewer` instances on a one page, since it may then be difficult/impossible to tell which viewer a particular event originated from.

All of the ""viewer components"" examples have been previously updated, such that there's no longer any code/examples which relies on the now removed `getGlobalEventBus` functionality.",False
c12ea21c14478df9a4f4bc10a078d902c174a6d6,2020-03-28 02:14:16,Tim van der Meij,"Merge pull request #11755 from Snuffleupagus/rm-fonts-sizes-encoding

Remove the unused `sizes` and `encoding` properties on `Font` instances",True
14c999e3ee95c5314868b6e5323b1b441ef21817,2020-03-27 14:42:01,Jonas Jenwald,"Remove the unused `sizes` and `encoding` properties on `Font` instances

The `sizes` property doesn't appear to have been used ever since the code was first split into main/worker-threads, which is so many years ago that I wasn't able to easily find exactly in which PR/commit it became unused.

The `encoding` property is always assigned the `properties.baseEncoding` value, however the `PartialEvaluator` doesn't actually compute/set that value any more. Again it was difficult to determine when it became unused, but it's been that way for years.",False
fa4b431091c51a82315dce7da7b848cc6498bcea,2020-03-26 03:18:07,Tim van der Meij,"Merge pull request #11745 from Snuffleupagus/eslint-no-shadow

Enable the ESLint `no-shadow` rule",True
ff0f9fd01887bb522331b54b9dac64e05bf8c5a0,2020-03-26 03:07:41,Tim van der Meij,"Merge pull request #11747 from gdh1995/fix-removing-wheel

Add `passive: false` when removing wheel listeners",True
8745286dc115c2324021b159ec7a365312bc517b,2020-03-26 02:57:19,Tim van der Meij,"Merge pull request #11646 from Snuffleupagus/_setDocumentAllowFetchPages

Ensure that automatic printing still works when the viewer and/or its pages are hidden (bug 1618621, bug 1618955)",True
a527eb8c92f60f6580fea435b37142de895e2e2e,2020-03-25 20:12:27,gdh1995,"Add `passive: false` when removing wheel listeners

Code of listening `wheel` event uses `{passive: false}`,
while this argument will be treated as `true` before Firefox 49,
accordin to https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Browser_compatibility .

This commit adds it when removing wheel listeners,
so that such listeners can be really removed.",False
fdfcde2b40dbdd3cbadc86cd877d5c38251c9ebd,2020-03-25 16:27:12,Jonas Jenwald,"Remove a spurious `console.log` from the `ChromiumBrowser` function in `test/webbrowser.js` file

This looks entirely like something which was left-over from debugging, and that line hasn't been touched since PR 4515, especially considering that the corresponding branch in `FirefoxBrowser` doesn't print anything.",False
dcb16af968598d789b078cd33525d1c503401253,2020-03-25 16:27:12,Jonas Jenwald,"Whitelist closure related cases to address the remaining `no-shadow` linting errors

Given the way that ""classes"" were previously implemented in PDF.js, using regular functions and closures, there's a fair number of false positives when the `no-shadow` ESLint rule was enabled.

Note that while *some* of these `eslint-disable` statements can be removed if/when the relevant code is converted to proper `class`es, we'll probably never be able to get rid of all of them given our naming/coding conventions (however I don't really see this being a problem).",False
1d2f787d6a80bf850c0dbb3160ede45e9bdee5cb,2020-03-25 16:26:05,Jonas Jenwald,"Enable the ESLint `no-shadow` rule

This rule is *not* currently enabled in mozilla-central, but it appears commented out[1] in the ESLint definition file; see https://searchfox.org/mozilla-central/rev/c80fa7258c935223fe319c5345b58eae85d4c6ae/tools/lint/eslint/eslint-plugin-mozilla/lib/configs/recommended.js#238-239

Unfortunately this rule is, for fairly obvious reasons, impossible to `--fix` automatically (even partially) and each case thus required careful manual analysis.
Hence this ESLint rule is, by some margin, probably the most difficult one that we've enabled thus far. However, using this rule does seem like a good idea in general since allowing variable shadowing could lead to subtle (and difficult to find) bugs or at the very least confusing code.

Please find additional details about the ESLint rule at https://eslint.org/docs/rules/no-shadow

---
[1] Most likely, a very large number of lint errors have prevented this rule from being enabled thus far.",False
475fa1f97f6dc0bdf3a75f3810024d6a1d2a558f,2020-03-25 04:22:21,Tim van der Meij,"Merge pull request #11744 from janpe2/cff-glyph-zero

The first glyph in CFF CIDFonts must be named 0 instead of "".notdef""",True
292b77fe7b5d824afadafe67cc43c91d27741b24,2020-03-25 04:21:31,Tim van der Meij,"Merge pull request #11707 from Snuffleupagus/issue-11694

Always prefer the PDF.js JPEG decoder for very large images, in order to reduce peak memory usage (issue 11694)",True
f85105379e9497a655620f351bbed32bcf48a1f0,2020-03-25 03:40:37,Tim van der Meij,"Merge pull request #11738 from Snuffleupagus/no-shadow-src-core

Remove variable shadowing from the JavaScript files in the `src/core/` folder",True
c54e773637798a28bc63d37408662c6fa14b6d2e,2020-03-25 03:14:23,Tim van der Meij,"Merge pull request #11742 from Snuffleupagus/no-shadow-test-unit

Remove variable shadowing from the JavaScript files in the `test/unit/` folder",True
a24ad28d751f82ed1d3777d1a336a3b76c915d15,2020-03-24 21:24:37,Jonas Jenwald,"Rename `BaseViewer._setDocumentViewerElement` to `BaseViewer._viewerElement`

It was pointed out the the old name felt confusing, so let's just rename the getter since it's an internal property anyway.",False
c5b0b5c754b1b925b1e3b6cff52823e1364c1f5d,2020-03-24 20:56:29,Jonas Jenwald,"Ensure that automatic printing still works when the viewer and/or its pages are hidden (bug 1618621, bug 1618955)

Please note that this patch, on its own, won't magically fix all of these printing bugs without [bug 1618553](https://bugzilla.mozilla.org/show_bug.cgi?id=1618553) also being fixed.
(However I don't foresee that being too difficult, famous last words :-), but it will as suggested require a platform API that we can notify when the viewer is ready.)

Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1618621
Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1618955
Fixes 8208",False
a22c0eab483e6899f433e3d60d51b9c6c8aff6ab,2020-03-24 19:26:50,Jani Pehkonen,"The first glyph in CFF CIDFonts must be named 0 instead of "".notdef""

Fixes #11718 in which the `ff` ligature glyph is at index zero in a CFF font. Beacuse this is a CIDFont, glyph names are CIDs, which are integers. Thus the string `"".notdef""` is not correct. The rest of the charset data is already parsed correctly as integers when the boolean argument `cid` is true.",False
66ee8f5acd05d50f3532308469f12cfbf8dc0d9f,2020-03-24 15:14:17,Jonas Jenwald,"Remove variable shadowing from the JavaScript files in the `test/unit/` folder

*This is part of a series of patches that will try to split PR 11566 into smaller chunks, to make reviewing more feasible.*

Once all the code has been fixed, we'll be able to eventually enable the ESLint no-shadow rule; see https://eslint.org/docs/rules/no-shadow",False
85838fc50507f4a98d97930b4ba8b40f388d39a4,2020-03-24 04:42:20,Tim van der Meij,"Merge pull request #11736 from Snuffleupagus/more-wheel-passive

Add `passive: false` to the `wheel` event listener used in `PDFPresentationMode` (issue 11735, PR 10765 follow-up)",True
404d698dd2cc33554f78212c0f59e457be4a7134,2020-03-24 04:36:02,Tim van der Meij,"Merge pull request #11734 from Snuffleupagus/rm-throw-methods

Remove old API methods which were previously converted to throwing (PR 11219 follow-up)",True
216cbca16ccca2702b3e2255cad9edeb9a171ded,2020-03-23 22:58:30,Jonas Jenwald,"Remove variable shadowing from the JavaScript files in the `src/core/` folder

*This is part of a series of patches that will try to split PR 11566 into smaller chunks, to make reviewing more feasible.*

Once all the code has been fixed, we'll be able to eventually enable the ESLint no-shadow rule; see https://eslint.org/docs/rules/no-shadow",False
59eada697230b587979b8995f71f0b43bef48e68,2020-03-23 21:37:32,Jonas Jenwald,"Add `passive: false` to the `wheel` event listener used in `PDFPresentationMode` (issue 11735, PR 10765 follow-up)",False
5eabe08c742c75cee856cefbce2de5058ef279a8,2020-03-23 21:11:06,Jonas Jenwald,"Exclude the `setPDFNetworkStreamFactory` function from the built API docs

Please note that the `setPDFNetworkStreamFactory` functionality isn't exposed in the public API, i.e. not listed among the exports in the `src/pdf.js` file, and that even if it were it wouldn't really be useful considering that none of the `PDFNetworkStream`/`PDFFetchStream`/`PDFNodeStream` classes are exported either.",False
c3c197d87a95abaf77130bceca31c38c3d1ec0b8,2020-03-23 21:11:03,Jonas Jenwald,"Remove old API methods which were previously converted to throwing (PR 11219 follow-up)

These methods were deprecated already in PDF.js version `2.1.266`, see PRs 10246 and 10369, and were converted to throw `Error`s upon invocation in PDF.js version `2.4.456`, see PR 11219.
Hence it ought to be possible to remove these methods now.",False
b86df97725cef5ec29feea3d61b8a7112c21ebcb,2020-03-22 21:45:44,Tim van der Meij,"Merge pull request #11725 from Snuffleupagus/app-ViewHistory-init

Re-factor `PDFViewerApplication.load` such that `{PDFViewer, PDFThumbnailViewer}.setDocument` happens slightly earlier",True
c551c332ec32b5283c9758597c90c684fb042f8d,2020-03-22 21:08:13,Tim van der Meij,"Merge pull request #11723 from Snuffleupagus/no-shadow-src-display

Remove variable shadowing from the JavaScript files in the `src/display/` folder",True
066ff6252727834bf82f3fbe7365f6c799f0a486,2020-03-22 21:00:56,Tim van der Meij,"Merge pull request #11724 from Snuffleupagus/default_preferences-web-files

Only build the necessary `web/` files during the `gulp default_preferences` task",True
f53db81c209f474538264752c0b67384a87e5dd4,2020-03-22 20:56:18,Tim van der Meij,"Merge pull request #11728 from Snuffleupagus/PDFDocumentProperties-constructor-props

Remove unnecessary checks from the `PDFDocumentProperties` constructor",True
d3044ac394294657fce83ac84c6c7a77f0ce68f4,2020-03-22 20:19:41,Jonas Jenwald,"Remove unnecessary checks from the `PDFDocumentProperties` constructor

Given that none of the relevant options are marked as optional in the code/JSDocs, and that the `PDFDocumentProperties` class is specific to the default viewer (and not exposed as part of the viewer components), there's no good reason as far as I can tell for these checks.",False
9f70bca12c9e3ad245dabe4df307795d44bc3c3e,2020-03-22 14:51:05,Jonas Jenwald,"Re-factor `PDFViewerApplication.load` such that `{PDFViewer, PDFThumbnailViewer}.setDocument` happens slightly earlier

The `BaseViewer.setDocument` method in particular is necessary for rendering to start when the viewer loads, hence you obviously want that to happen as soon as possible and without any unnecessary delays.
Unfortunately *some* API calls need to be done before that, note existing comments, however the `ViewHistory` initialization (and subsequent fetching of data) in particular can be moved slightly without any adverse effects.

As part of testing I've used logging with `performance.now()` inserted in various parts of this code, and there's *obviously* no discernible changes between `master` and this patch for e.g. rendering starting in the viewer.

*Note:* The vast majority of this patch is simple indentation changes, which were forced by Prettier (and done automatically with `gulp lint --fix`).",False
08f9718a374764d39509277d4a7f94056b1bee4d,2020-03-21 18:25:06,Jonas Jenwald,"Add a bit more validation in the `ViewHistory` constructor

 - Ensure that `database.files` actually contains an Array, rather than some arbitrary data.

 - Only try to lookup an existing entry when the `database` existed on load, since there's obviously nothing to find when `database.files = []` was set (this case is very common in the MOZCENTRAL build since `sessionStorage` is being used there).",False
29ee2590d4eb468ca3e338ced9ac7f7d08d0b6c5,2020-03-21 16:04:32,Jonas Jenwald,"Only build the necessary `web/` files during the `gulp default_preferences` task

By explicitly specifying only the required `web/` files, the runtime of the gulp task is reduced by approximately 30 percent.",False
3539a17d2a85c0c28f74a27dc6b76c8a97b40d69,2020-03-21 03:39:41,Jonas Jenwald,"Remove variable shadowing from the JavaScript files in the `src/display/` folder

*This is part of a series of patches that will try to split PR 11566 into smaller chunks, to make reviewing more feasible.*

Once all the code has been fixed, we'll be able to eventually enable the ESLint no-shadow rule; see https://eslint.org/docs/rules/no-shadow",False
3cebb430c2ae3ebc6af110648c2577374c74c11c,2020-03-21 01:36:45,Tim van der Meij,"Merge pull request #11721 from Snuffleupagus/travis-no-npm-update

Don't let Travis run `npm update` during setup",True
6ecc9fae1cc0149f4ffd10ed56148ea798409ea4,2020-03-21 01:34:24,Tim van der Meij,"Merge pull request #11720 from Snuffleupagus/eslint-no-unsanitized

Update the `eslint-plugin-no-unsanitized` package to the latest version",True
ab2b2ae30b61d288e9fbc6f70c2f351618e96488,2020-03-21 01:30:09,Tim van der Meij,"Merge pull request #11719 from Snuffleupagus/rm-fonts-widechars

Remove the unused `wideChars` property on `Font` instances",True
62a9c26cdae9118dea89dc18b5cad844bbc7faf5,2020-03-20 21:07:19,Jonas Jenwald,"Always prefer the PDF.js JPEG decoder for very large images, in order to reduce peak memory usage (issue 11694)

When JPEG images are decoded by the browser, on the main-thread, there's a handful of short-lived copies of the image data; see https://github.com/mozilla/pdf.js/blob/c3f4690bde8137d80c74203b1ad91476fc2ca160/src/display/api.js#L2364-L2408
That code thus becomes quite problematic for very big JPEG images, since it increases peak memory usage a lot during decoding. In the referenced issue there's a couple of JPEG images whose dimensions are `10006 x 7088` (i.e. ~68 mega-pixels), which causes the *peak* memory usage to increase by close to `1 GB` (i.e. one giga-byte) in my testing.

By letting the PDF.js JPEG decoder, rather than the browser, handle very large images the *peak* memory usage is considerably reduced and the allocated memory also seem to be reclaimed faster.

*Please note:* This will lead to movement in some existing `eq` tests.",False
78b1dad2a92ef8dd2ed1262ec05348b61da3de9a,2020-03-20 20:15:15,Jonas Jenwald,"Don't let Travis run `npm update` during setup

Letting Travis update npm packages can lead to unexpected and completely unrelated failures for any PR and/or merge, see e.g. 11719, if there's ever backwards *incompatible* changes when a package is updated.

The *exact* package versions are specified in `package-lock.json`, and they should thus be used when running tests. Note that the bots won't update npm packages, and neither should Travis as far as I'm concerned.",False
b02be3b2689ac80b908d39e104d2014668a5e044,2020-03-20 15:55:39,Jonas Jenwald,Update the `eslint-plugin-no-unsanitized` package to the latest version,False
1cd9d5a8fde59ca882457231434ef788a332b3f7,2020-03-20 15:07:32,Jonas Jenwald,"Remove the unused `wideChars` property on `Font` instances

This property was added in PR 1599 (almost eight years ago), but has been unused ever since PR 3674 (six and a half years ago).",False
4893b14a522f6aced286d7fd2f4c79dd2807f6f0,2020-03-20 03:44:59,Tim van der Meij,"Merge pull request #11717 from timvandermeij/bump

Bump versions in `pdfjs.config` and update the getting started page of the website for the new release",True
1bca1e3823479835d53212f23943babc5eaa4102,2020-03-20 03:37:45,Tim van der Meij,Update the getting started page of the website for the new release,False
a94407f983c206a532cfc69f06b194b4cb3834ec,2020-03-20 03:31:17,Tim van der Meij,Bump versions in `pdfjs.config`,False
228a591ca3655237c22f4401b30abee22e52532c,2020-03-20 03:05:29,Tim van der Meij,"Merge pull request #11716 from Snuffleupagus/private-PDFPageProxy-pageIndex

[api-minor] Change the pageIndex, on `PDFPageProxy` instances, to a private property",True
caabaab4a5c897fc30b2e105182118b6b4c1017e,2020-03-20 03:00:13,Tim van der Meij,"Merge pull request #11711 from Snuffleupagus/update-packages

Update packages and translations",True
3d06e4af6614d9e207136167c6784d2af73d2113,2020-03-20 02:58:32,Tim van der Meij,"Merge pull request #11714 from Snuffleupagus/eslint-prefer-exponentiation-operator

Enable the `prefer-exponentiation-operator` ESLint rule",True
ae2900e510bbb6bc54d7c56ded35a0bb2e31a414,2020-03-19 20:17:11,Jonas Jenwald,"[api-minor] Change the pageIndex, on `PDFPageProxy` instances, to a private property

This property has never been documented and/or *intentionally* exposed through the API, instead the `PDFPageProxy.pageNumber` property is the documented/intended API to use here.
Hence pageIndex is changed to a ""private"" property on `PDFPageProxy` instances, and internal API functionality is also updated to *consistently* use `this._pageIndex` rather than a mix of formats.",False
e011be037e31dab05db48ba43b5338bb0ed55bd3,2020-03-19 17:11:25,Jonas Jenwald,"Enable the `prefer-exponentiation-operator` ESLint rule

Please see https://eslint.org/docs/rules/prefer-exponentiation-operator for additional information.",False
4ac34c62830996e3a519602cf05638835a14a759,2020-03-19 14:28:49,Jonas Jenwald,Update l10n files,False
577ada48d0afbaa266377e06b4dd09efa198c0e0,2020-03-19 14:25:14,Jonas Jenwald,Update `npm` packages,False
c3f4690bde8137d80c74203b1ad91476fc2ca160,2020-03-18 03:08:11,Tim van der Meij,"Merge pull request #11706 from Snuffleupagus/mv-webViewerOpenFile

Move the `webViewerOpenFile` function, and the ""openfile"" eventBus listener, since they only matter in GENERIC builds of the default viewer",True
300a663458c9b8221aeb8e9191a355deb3ebfecc,2020-03-17 18:00:38,Jonas Jenwald,"Move the `webViewerOpenFile` function, and the ""openfile"" eventBus listener, since they only matter in GENERIC builds of the default viewer

This is similar to the existing implementation of the `webViewerFileInputChange` function and its associated ""fileinputchange"" event.",False
f9ce22c08acd9a59adc1c66915ac994b37e34d8e,2020-03-17 02:17:27,Tim van der Meij,"Merge pull request #11700 from Snuffleupagus/viewer-JS-warn

Ensure that the JavaScript-warning is always displayed, in the viewer, regardless of browser printing support",True
b3d7d1c6144ff15e2edf4d63f374239889a3852d,2020-03-15 19:11:13,Jonas Jenwald,"Ensure that the JavaScript-warning is always displayed, in the viewer, regardless of browser printing support

The viewer doesn't currently support executing of any JavaScript, as found in some PDF documents, for security reasons. (Although there's a small hack to at least provide basic support for automatic printing on document load, without running scripts.)

However, in the event that the browser doesn't support printing we're not run *any* of this code. In particular that means that we're also not displaying the ""Warning: JavaScript is not supported"" message, which seems strange since JavaScript found in a PDF document can really contain *anything* (and not only printing instructions).

It thus seem reasonable, as far as I'm concerned, to always display the JavaScript-warning *even* if printing happens to be unsupported.",False
1bc5cef2b585fa0b265d1e7213139eda5e809d88,2020-03-15 18:06:09,Tim van der Meij,"Merge pull request #11698 from Snuffleupagus/issue-11697

Don't accidentally accept invalid glyphNames which *appear* to follow the Cdd{d}/cdd{d} format in `PartialEvaluator._buildSimpleFontToUnicode` (issue 11697)",True
4dc1058ceb2215c0f852d79106d8f48fa5233033,2020-03-15 17:55:08,Tim van der Meij,"Merge pull request #11553 from tamuratak/svg_texthscale

Fix the horizontal scaling of texts with SVG backend. #10988",True
aa3e5a2b8fc396fbb85f2cb0fcb3c0327a5fb08c,2020-03-15 17:46:37,Tim van der Meij,"Merge pull request #11644 from Snuffleupagus/openAction

[api-minor] Add more general OpenAction support (PR 10334 follow-up, issue 11642)",True
6db227d82ab95ff466bbee7ba046535ec3bf492f,2020-03-15 03:28:35,Tim van der Meij,"Merge pull request #11699 from mozilla/dependabot/npm_and_yarn/acorn-6.4.1

Bump acorn from 6.4.0 to 6.4.1",True
15e8692eff6bb71f28c3521e3bd64dc19834f523,2020-03-14 04:05:47,Jonas Jenwald,"Don't accidentally accept invalid glyphNames which *appear* to follow the Cdd{d}/cdd{d} format in `PartialEvaluator._buildSimpleFontToUnicode` (issue 11697)

The /Differences array of the problematic font contains a `/c.1` entry, which is consequently detected as a *possible* Cdd{d}/cdd{d} glyphName by the existing heuristics.
Because of how the base 10 conversion is implemented, which is necessary for the base 16 special case, the parsed charCode becomes `0.1` thus causing `String.fromCodePoint` to throw since that obviously isn't a valid code point.

To fix the referenced issue, and to hopefully prevent similar ones in the future, the patch adds *additional* validation of the charCode found by the heuristics.",False
977839c046b4224eb7394019151e5a63745d1ea4,2020-03-14 03:43:33,dependabot[bot],"Bump acorn from 6.4.0 to 6.4.1

Bumps [acorn](https://github.com/acornjs/acorn) from 6.4.0 to 6.4.1.
- [Release notes](https://github.com/acornjs/acorn/releases)
- [Commits](https://github.com/acornjs/acorn/compare/6.4.0...6.4.1)

Signed-off-by: dependabot[bot] <support@github.com>",False
960fdf9113be5fdcc1c2d5aabaa0da3e11a2edc0,2020-03-14 03:12:32,Tim van der Meij,"Merge pull request #11695 from Snuffleupagus/no-shadow-web

Remove variable shadowing from the JavaScript files in the `web/` folder",True
886b256adacb47ffc896829c6b93e7670963c15a,2020-03-13 17:29:58,Jonas Jenwald,"Remove variable shadowing from the JavaScript files in the `web/` folder

*This is part of a series of patches that will try to split PR 11566 into smaller chunks, to make reviewing more feasible.*

Once all the code has been fixed, we'll be able to eventually enable the ESLint `no-shadow` rule; see https://eslint.org/docs/rules/no-shadow",False
a23ce6b483a928f7fee1328305521392f26f8f69,2020-03-13 04:01:07,Tim van der Meij,"Merge pull request #11692 from Snuffleupagus/no-shadow-prepare

Move `IsLittleEndianCached`/`IsEvalSupportedCached` to `src/shared/util.js`, and rename the `isSpace` helper function to `isWhiteSpace`",True
c5f67300e9b36542fcb1b5df517bfa6b9ac811fe,2020-03-12 16:06:59,Jonas Jenwald,"Rename the `isSpace` helper function to `isWhiteSpace`

Trying to enable the ESLint rule `no-shadow`, against the `master` branch, would result in a fair number of errors in the `Glyph` class in `src/core/fonts.js`.
Since the glyphs are exposed through the API, we can't very well change the `isSpace` property on `Glyph` instances. Thus the best approach seems, at least to me, to simply rename the `isSpace` helper function to `isWhiteSpace` which shouldn't cause any issues given that it's only used in the `src/core/` folder.",False
e4758beaaa6b8af90e6f1875cf33bc2fe789941f,2020-03-12 16:06:26,Jonas Jenwald,"Move `IsLittleEndianCached` and `IsEvalSupportedCached` to `src/shared/util.js`

Rather than duplicating the lookup and caching in multiple files, it seems easier to simply move all of this functionality into `src/shared/util.js` instead.
This will also help avoid a bunch of ESLint errors once the `no-shadow` rule is eventually enabled.",False
6db8e085eed4a4609b24716305a9633cb0b78a93,2020-03-12 01:32:06,Tim van der Meij,"Merge pull request #11686 from janpe2/reftest-image-dim

Magnifier positioning in reftest analyzer",True
4ff67a518e676a2520c34a11e2c635aac6195681,2020-03-12 01:28:48,Tim van der Meij,"Merge pull request #11690 from Snuffleupagus/rm-toolbarButton-transition

Remove transition effects from toolbar buttons/fields",True
1dd617e09146409fd1742d2b0594658771779512,2020-03-11 18:32:39,Jonas Jenwald,"Remove transition effects from toolbar buttons/fields

While Firefox originally used transition effects for browser UI toolbar buttons, that was removed years ago in https://bugzilla.mozilla.org/show_bug.cgi?id=1393057

Since the PDF.js viewer toolbar transitions were likely based on the Firefox ones, it seems reasonable that these transition effects are removed from PDF.js as well. Besides removing a bunch of CSS, this also makes the toolbar feel ever so slightly more ""snappy"" without these delays on mouse interaction.

(In order to make it more feasible to modernize/improve the viewer UI, trying to clean-up/simplify existing rules iteratively seems like the most reasonble way to make any progress here w.r.t. being able to test/review things.)",False
e0daabd2dd2cc3272728806a6b926baba15b85e1,2020-03-10 22:39:15,Jani Pehkonen,"Magnifier positioning in reftest analyzer

When reftest analyzer shows magnified pixels, there is a seemingly random offset between the mouse position and the magnified position. The reason for this is that reftest analyzer assumes all images have 800 * 1000 pixels but actually the test images have varying sizes.",False
af8d0b9597ccd0e020910eafd74dd6ad140db520,2020-03-10 03:34:28,Tim van der Meij,"Merge pull request #11680 from Snuffleupagus/hasBlendModes-fetch-errors

Prevent lookup errors in `PartialEvaluator.hasBlendModes` from breaking all parsing/rendering of a page (issue 11678)",True
6dfa10fe978f2c31af81a2716771967df5bf4311,2020-03-10 03:26:46,Tim van der Meij,"Merge pull request #11676 from Snuffleupagus/BaseViewer-reset-PromiseCapability

Slightly improve the `BaseViewer.{firstPagePromise, onePageRendered, pagesPromise}` functionality",True
3adbba55b2c6c24ff94dfa6d53c9655ca01eb5f7,2020-03-09 18:04:53,Jonas Jenwald,"Limit the number of warning messages printed by any one `Lexer.getHexString` invocation

*This patch fixes something that's annoyed me every now and then over the years, when debugging/fixing corrupt PDF documents.*

For corrupt PDF documents where `Lexer.getHexString` encounters invalid characters, there's very rarely just a handful of them. In practice it's not uncommon for there to be many hundreds, or even many thousands, invalid hex characters found.
Not only is the resulting console warning spam utterly useless in these cases, there's often enough of it that performance may even suffer; hence this patch which limits the amount of messages that any one `Lexer.getHexString` invocation may print.",False
65e6ea2cb257cc06fee637532be27e0ac89fc45b,2020-03-09 16:30:12,Jonas Jenwald,"Prevent lookup errors in `PartialEvaluator.hasBlendModes` from breaking all parsing/rendering of a page (issue 11678)

The PDF document in question is *corrupt*, since it contains an XObject with a truncated dictionary and where the stream contents start without a ""stream"" operator.",False
3eb4c1940dd94fd11d239bf1b36d3582b6aa3781,2020-03-08 13:53:45,Jonas Jenwald,"Initialize the `textLayerFactory` once in `BaseViewer.setDocument`, rather than repeating it for every page

For reasons that I don't even pretend to understand, the `textLayerFactory` property is determined for *every single* page in the PDF document.
Given that the `TextLayerMode` should be consistent for *all* pages in a document, we obviously could/should define `textLayerFactory` just once instead.",False
1fac29d1849ebc4b2b29a090b587d1ffed9f3adf,2020-03-08 13:53:44,Jonas Jenwald,"Slightly improve the `BaseViewer.{firstPagePromise, onePageRendered, pagesPromise}` functionality

There's a couple of issues with this functionality:
 - The respective `PromiseCapability` instances are not being reset, in `BaseViewer._resetView`, when the document is closed which is inconsistent with all other state.
 - While the default viewer depends on these promises, and they thus ought to be considered part of e.g. the `PDFViewer` API-surface, they're not really defined in a particularily user-visible way (being that they're attached to the `BaseViewer` instance *inline* in `BaseViewer.setDocument`).
 - There's some internal `BaseViewer` state, e.g. `BaseViewer._pageViewsReady`, which is tracked manually and could instead be tracked indirectly via the relevant `PromiseCapability`, thus reducing the need to track state *twice* since that's always best to avoid.

*Please note:* In the existing implementation, these promises are not defined *until* the `BaseViewer.setDocument` method has been called.
While it would've been simple to lift that restriction in this patch, I'm purposely choosing *not* to do so since this ensures that any Promise handlers added inside of `BaseViewer.setDocument` are always invoked *before* any external ones (and keeping that behaviour seems generally reasonable).",False
7b07b88e714f55b14b933e6fafc44b247aec41ab,2020-03-08 03:37:57,Tim van der Meij,"Merge pull request #11675 from ji-1/master

Fix typo in comment",True
df22dfb5311c58e6dbcda3c2a19eab08c9497552,2020-03-07 09:07:22,Jiwon Jeon,Fix typo,False
1a97c142b30c67f240819cead8dcf19e4ee7949a,2020-03-07 03:33:09,Tim van der Meij,"Merge pull request #11523 from Snuffleupagus/issue-10880

Add a heuristic, in `src/core/jpg.js`, to handle JPEG images with a wildly incorrect SOF (Start of Frame) `scanLines` parameter (issue 10880)",True
001b0b270b4d8a0cb14111011fdaea0ff42e2368,2020-03-07 03:25:17,Tim van der Meij,"Merge pull request #11667 from Snuffleupagus/move-dispatchDOMEvent

Add a deprecation warning for the `eventBusDispatchToDOM` option/preference (PR 11631 follow-up)",True
1bb25f5cb866973437abb912e422a3e1ecd2fb16,2020-03-07 03:21:39,Tim van der Meij,"Merge pull request #11673 from Snuffleupagus/FontLoader-bind-more-await

Update the `FontLoader.bind` method to avoid explicitly returning `undefined`",True
5d566b9dbe353375fe39ca761a380e62afa4c698,2020-03-07 03:17:14,Tim van der Meij,"Merge pull request #11672 from Snuffleupagus/Dict-set-value-assert

Slightly simplify the lookup of data in `Dict.{get, getAsync, has}`",True
977049cd0c94881fe37d11f7b77aaeb8191408a9,2020-03-07 03:12:16,Tim van der Meij,"Merge pull request #11671 from Snuffleupagus/update-packages

Update packages and translations",True
7d4be08dad9a2fb243431351f3bb29266d410c8a,2020-03-06 22:15:24,Jonas Jenwald,"Update the `FontLoader.bind` method to avoid explicitly returning `undefined`

The only reason for the `return undefined;` lines was to appease the ESLint `consistent-return` rule, but that's not actually necessary if you make use of the fact that the method is `async` and that we can thus await the Promise rather than returning it.",False
160cfc408440aad5f45875cadb1af6995b7ed802,2020-03-06 18:42:14,Jonas Jenwald,"Slightly simplify the lookup of data in `Dict.{get, getAsync, has}`

Note that `Dict.set` will only be called with values returned through `Parser.getObj`, and thus indirectly via `Lexer.getObj`. Since neither of those methods will ever return `undefined`, we can simply assert that that's the case when inserting data into the `Dict` and thus get rid of `in` checks when doing the data lookups.
In this case, since `Dict.set` is fairly hot, the patch utilizes an *inline check* and when necessary a direct call to `unreachable` to not affect performance of `gulp server/test` too much (rather than always just calling `assert`).

For very large and complex PDF files this will help performance *slightly*, since `Dict.{get, getAsync, has}` is called *a lot* during parsing in the worker.

This patch was tested using the PDF file from issue 2618, i.e. http://bugzilla-attachments.gnome.org/attachment.cgi?id=226471, with the following manifest file:
```
[
    {  ""id"": ""issue2618"",
       ""file"": ""../web/pdfs/issue2618.pdf"",
       ""md5"": """",
       ""rounds"": 250,
       ""type"": ""eq""
    }
]
```

which gave the following results when comparing this patch against the `master` branch:
```
-- Grouped By browser, stat --
browser | stat         | Count | Baseline(ms) | Current(ms) | +/- |    %  | Result(P<.05)
------- | ------------ | ----- | ------------ | ----------- | --- | ----- | -------------
Firefox | Overall      |   250 |         2838 |        2820 | -18 | -0.65 |        faster
Firefox | Page Request |   250 |            1 |           2 |   0 | 11.92 |        slower
Firefox | Rendering    |   250 |         2837 |        2818 | -19 | -0.65 |        faster
```",False
af8c371fa925d67103311d1aa5190e78d75bc09a,2020-03-06 17:38:15,Jonas Jenwald,Update l10n files,False
824e5c8156a752d4659580e9506102f422435534,2020-03-06 17:36:21,Jonas Jenwald,Update `npm` packages,False
01fb309a2ab0b77807de2bedb0ba379323e7e502,2020-03-06 17:33:00,Jonas Jenwald,"[api-minor] Add more general OpenAction support (PR 10334 follow-up, issue 11642)

This patch deprecates the existing `getOpenActionDestination` API method, in favor of a better and more general `getOpenAction` method instead. (For now JavaScript actions, related to printing, are still handled as before.)

By clearly separating ""regular"" Print actions from the JavaScript handling, it's thus possible to get rid of the somewhat annoying and strictly incorrect warning when the viewer loads.",False
0fb44f5dd6e521b5ff1103c96a6964ee6c6e0af0,2020-03-05 17:57:00,Jonas Jenwald,"Move the `dispatchDOMEvent` functionality out from the `EventBus` and add a deprecation warning for the `eventBusDispatchToDOM` option/preference (PR 11631 follow-up)

It occured to me that similar to the `getGlobalEventBus` function, it's probably a good idea to *also* notify users of the fact that `eventBusDispatchToDOM` is now deprecated.

Rather than depending of the re-dispatching of internal events to the DOM, the default viewer can instead be used in e.g. the following way:
```javascript
document.addEventListener(""webviewerloaded"", function() {
  PDFViewerApplication.initializedPromise.then(function() {
    // The viewer has now been initialized, and its properties can be accessed.

    PDFViewerApplication.eventBus.on(""pagerendered"", function(event) {
      console.log(""Has rendered page number: "" + event.pageNumber);
    });
  });
});
```",False
3ed1bc917d222ac0cd20014c2dcc00e5a4022d03,2020-03-05 16:34:19,Jonas Jenwald,"Update the `waitOnEventOrTimeout` helper function to handle internal events consistently with the rest of the viewer components (PR 11631 follow-up)

I overlooked this in PR 11631; sorry about that!

Also, ensure that `EventBus` instances *always* track ""external"" events using a boolean regardless of the actual option value.",False
25693c6b6df8c6ddc316bc8cfb74ba3b601a07b6,2020-03-05 03:42:33,Tim van der Meij,"Merge pull request #11664 from Snuffleupagus/bug-1619595

Prevent the zoom dropdown icon from being overridden when the element is `:active` (bug 1619595)",True
ecbe0076fc3ed71a6b7675bfe3ed7579032e298a,2020-03-04 20:46:41,Jonas Jenwald,"Prevent the zoom dropdown icon from being overridden when the element is `:active` (bug 1619595)

This changes the dropdown icon from being set using the `background` CSS property, to being set with `::after` which is *similar* to all the other toolbar button icons (which use `::before`).
Also tweaks the dropdown `background-color` on `:hover` slightly, since the other changes made it too light.",False
c95b9b1e1721f4fa790e93c81ed0c8f62683a22c,2020-03-04 04:03:13,Tim van der Meij,"Merge pull request #11653 from Snuffleupagus/ensureStateFont

Ensure that there's always a setFont (Tf) operator before text rendering operators (issue 11651)",True
b56e058b4bd6d03299fd74b1b9f926dda3ce5afc,2020-03-04 03:56:24,Tim van der Meij,"Merge pull request #11660 from janpe2/type1notdef

Fix Type1 font parsing when .notdef is not at index zero",True
71e76869504503f39b4f1b1ecdf76042a784923c,2020-03-04 01:25:51,Jani Pehkonen,"Fix Type1 font parsing when .notdef is not at index zero

Fixes #11477
The PDF draws many space characters but the embedded fonts don't have a glyph named `space`, so `.notdef` should be drawn instead. PDF.js assumed that Type1 fonts define `.notdef` as the first glyph (index 0). However, now the fonts have the glyph `A` at index 0 and `.notdef` is the last one, so `A` appears where spaces are expected.

Because the rest of the font machinery in `core/fonts.js` assumes `.notdef` is at index zero, it's easiest to modify `core/type1_parser.js` so that it ""repairs"" fonts and makes sure `.notdef` is at index 0.",False
65e514e063dee03e1a04e1b736a8874090ba28f2,2020-03-03 14:35:18,Jonas Jenwald,"Ensure that there's always a setFont (Tf) operator before text rendering operators (issue 11651)

The PDF document in question is *corrupt*, since it contains multiple instances of incorrect operators.
We obviously don't want to slow down parsing of *all* documents (since most are valid), just to accommodate a particular bad PDF generator, hence the reason for the inline check before calling the `ensureStateFont` method.",False
52749d1f0dd04d344310c5ac599d30e0e0a4b390,2020-03-03 04:00:07,Tim van der Meij,"Merge pull request #11631 from Snuffleupagus/getGlobalEventBus-deprecate

[api-minor] Deprecate `getGlobalEventBus` and update the ""viewer components"" examples accordingly",True
8ea8fa5958006f65e88840f9d02f1343e1ce7390,2020-03-03 03:49:53,Tim van der Meij,"Merge pull request #11654 from Snuffleupagus/BaseFontLoader-isFontLoadingAPISupported

Simplify the `BaseFontLoader.isFontLoadingAPISupported` getter",True
1ad65cf4051ddb92a63442600cb78e40a131ee1d,2020-03-03 03:44:48,Jonas Jenwald,"Simplify the `BaseFontLoader.isFontLoadingAPISupported` getter

It's no longer necessary to special-case this getter in the `GenericFontLoader` case, since the GENERIC build hasn't been using `mozPrintCallback` for years now (furthermore Firefox 63 is really old as well).",False
d6b67cd28a86d5cf0022b64a4f23dfa6f0166ab6,2020-03-02 11:24:41,Takashi Tamura,Fix the horizontal scaling of texts with SVG backend. #10988,False
d60c1f68b7596d32b0784c368c231655c4a2fc6f,2020-03-01 23:03:14,Tim van der Meij,"Merge pull request #11556 from tamuratak/vertical_h_scaling

Fix the vertical writing mode with horizontal scaling. #11555.",True
d8c9f119b0c661a40039c629940c5984e740ff3b,2020-02-29 04:18:29,Takashi Tamura,"Fix the vertical writing mode with horizontal scaling. #11555.
It is not valid to multiply textHScale when the writing mode is vertical.

See 9.4.4 Text Space Details, https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#G8.1694762",False
e6d8899827d1d1a8a4cf543edb0fe9e4bb404ba5,2020-02-28 22:39:29,Brendan Dahl,"Merge pull request #11590 from brendandahl/riot

Update links from IRC to Riot.",True
594a8dfac431e1594fc6a5d64fe91cca1b3e3480,2020-02-28 05:56:17,Brendan Dahl,"Update links from IRC to Matrix.

Mozilla's IRC is going away and we're migrating to Matrix/Riot.",False
e1586016c5528a8959749905c0662692fad0239b,2020-02-28 04:06:11,Tim van der Meij,"Merge pull request #11577 from Snuffleupagus/Pages-tree-refs

Prevent circular references in the /Pages tree",True
175a6fc64c1882ce1fbac8e55d774585c4d2ffac,2020-02-28 03:53:13,Tim van der Meij,"Merge pull request #11608 from Snuffleupagus/ignoreDestinationZoom

Add a `ignoreDestinationZoom` option/preference to allow users to preserve the current zoom level when navigating to internal destinations (issue 5064, 11606)",True
4a1b056c82f7dfa5e2532445c65d5e1917f3c16d,2020-02-28 00:08:13,Jonas Jenwald,"Re-factor the `EventBus` to allow servicing of ""external"" event listeners *after* the viewer components have updated

Since the goal has always been, essentially since the `EventBus` abstraction was added, to remove all dispatching of DOM events[1] from the viewer components this patch tries to address one thing that came up when updating the examples:
The DOM events are always dispatched last, and it's thus guaranteed that all internal event listeners have been invoked first.
However, there's no such guarantees with the general `EventBus` functionality and the order in which event listeners are invoked is *not* specified. With the promotion of the `EventBus` in the examples, over DOM events, it seems like a good idea to at least *try* to keep this ordering invariant[2] intact.

Obviously this won't prevent anyone from manually calling the new *internal* viewer component methods on the `EventBus`, but hopefully that won't be too common since any existing third-party code would obviously use the `on`/`off` methods and that all of the examples shows the *correct* usage (which should be similarily documented on the ""Third party viewer usage"" Wiki-page).

---
[1] Looking at the various Firefox-tests, I'm not sure that it'll be possible to (easily) re-write all of them to not rely on DOM events (since getting access to `PDFViewerApplication` might be generally difficult/messy depending on scopes).
In any case, even if technically feasible, it would most likely add *a lot* of complication that may not be desireable in the various Firefox-tests. All-in-all, I'd be fine with keeping the DOM events only for the `MOZCENTRAL` target and gated on `Cu.isInAutomation` (or similar) rather than a preference.

[2] I wouldn't expect any *real* bugs in a custom implementation, simply based on event ordering, but it nonetheless seem like a good idea if any ""external"" events are still handled last.",False
9a437a158f754df875819e55ab689d2bb33598f9,2020-02-27 19:14:48,Jonas Jenwald,"[api-minor] Deprecate `getGlobalEventBus` and update the ""viewer components"" examples accordingly

To avoid outright breaking third-party usages of the ""viewer components"" the `getGlobalEventBus` functionality is left intact, but a deprecation message is printed if the function is invoked.

The various examples are updated to *explicitly* initialize an `EventBus` instance, and provide that when initializing the relevant viewer components.",False
03f5dd2cf2f448ae372a8cc5a7fe3ca3d09d4034,2020-02-27 13:12:50,Jonas Jenwald,"Add a `ignoreDestinationZoom` option/preference to allow users to preserve the current zoom level when navigating to internal destinations (issue 5064, 11606)",False
965ebe63fd2b20809b956c85f848df85f597ec0b,2020-02-27 02:56:27,Tim van der Meij,"Merge pull request #11540 from tamuratak/charspacing

Fix text spacing with vertical fonts. #7687 and #11526.",True
bde78cda33e8b2a5c01ac4c0cbc570e51a161e16,2020-02-27 02:39:28,Tim van der Meij,"Merge pull request #11630 from Snuffleupagus/README-gitpod

Attempt to clarify, and improve the wording of, the Gitpod section of the README",True
ac6bb2e10354d56414857ecc81e8f348374e0d58,2020-02-26 18:20:22,Jonas Jenwald,"Attempt to clarify, and improve the wording of, the Gitpod section of the README",False
30e0f028b54c50b1bfe5d90e878b62003c8e5173,2020-02-26 03:48:19,Tim van der Meij,"Merge pull request #11625 from Snuffleupagus/issue-11451

Use the same non-embedded Wingdings fallback for fonts named ""Wingdings-Regular"" too (PR 5463 follow-up, issue 11451)",True
c55d30a7151513e0dadbb2268b03772672e36380,2020-02-24 22:10:06,Jonas Jenwald,"Use the same non-embedded Wingdings fallback for fonts named ""Wingdings-Regular"" too (PR 5463 follow-up, issue 11451)

This patch extends the existing heuristics, which are really the best that we can do in general for these kinds of non-embedded *and* non-standard fonts.

Furthermore, this patch also tries to improve the copy-and-paste behaviour for non-embedded Wingdings fonts by also using the `ZapfDingbatsEncoding` in this case.

*Note:* I'm not sure that adding additional tests for Wingdings fonts matters that much, given how limited our ""support"" for them really is.",False
dd893d59d99314fc9a377905432139db7b6f1873,2020-02-23 02:02:04,Tim van der Meij,"Merge pull request #11623 from Snuffleupagus/eslint-disallow-new-primitives

Use the ESLint `no-restricted-syntax` rule to prevent direct usage of `new Cmd()`/`new Name()`/`new Ref()`",True
bf09d79eea640adce8cceb86200502e5cb974eab,2020-02-23 01:45:00,Jonas Jenwald,"Use the ESLint `no-restricted-syntax` rule to prevent direct usage of `new Cmd()`/`new Name()`/`new Ref()`

Given that all of these primitives implement caching, to avoid unnecessarily duplicating those objects *a lot* during parsing, it would thus be good to actually enforce usage of `Cmd.get()`/`Name.get()`/`Ref.get()` in the code-base.
Luckily it turns out that there's an ESLint rule, which is fairly easy to use, that can be used to disallow arbitrary JavaScript syntax.

Please find additional details about the ESLint rule at https://eslint.org/docs/rules/no-restricted-syntax",False
c3c3b8cd815edbb85524436c730ef339762209b1,2020-02-22 18:46:07,Jonas Jenwald,"Add a heuristic, in `src/core/jpg.js`, to handle JPEG images with a wildly incorrect SOF (Start of Frame) `scanLines` parameter (issue 10880)

*This whole patch feels somewhat arbitrary, and I'd be slightly worried about possibly breaking something else.*

To limit the impact of these changes, we only re-parse JPEG images using a reduced `scanLines` value if and only if: An unexpected EOI (End of Image) marker was encountered during decoding of Scan data *and* the ""actual"" `scanLines` value is at least one order of magnitude smaller than expected.",False
5494f7d5bc938229d7e5ae02adccc422e14ea4b4,2020-02-22 18:46:07,Jonas Jenwald,"Add basic validation of the `scanLines` parameter in JPEG images, before delegating decoding to the browser

In some cases PDF documents can contain JPEG images that the native browser decoder cannot handle, e.g. images with DNL (Define Number of Lines) markers or images where the SOF (Start of Frame) marker contains a wildly incorrect `scanLines` parameter.
Currently, for ""simple"" JPEG images, we're relying on native image decoding to *fail* before falling back to the implementation in `src/core/jpg.js`. In some cases, note e.g. issue 10880, the native image decoder doesn't outright fail and thus some images may not render.

In an attempt to improve the current situation, this patch adds additional validation of the JPEG image SOF data to force the use of `src/core/jpg.js` directly in cases where the native JPEG decoder cannot be trusted to do the right thing.
The only way to implement this is unfortunately to parse the *beginning* of the JPEG image data, looking for a SOF marker. To limit the impact of this extra parsing, the result is cached on the `JpegStream` instance and this code is only run for images which passed all of the pre-existing ""can the JPEG image be natively rendered and/or decoded"" checks.

---

*Slightly off-topic:* Working on this *really* makes me start questioning if native rendering/decoding of JPEG images is actually a good idea.
There's certain kinds of JPEG images not supported natively, and all of the validation which is now necessary isn't ""free"". At this point, in the `NativeImageDecoder`, we're having to check for certain properties in the image dictionary, parse the `ColorSpace`, and finally read the actual image data to find the SOF marker.
Furthermore, we cannot just send the image to the main-thread and be done in the ""JpegStream"" case, but we also need to wait for rendering to complete (or fail) before continuing with other parsing.
In the ""JpegDecode"" case we're even having to parse part of the image on the main-thread, which seems completely at odds with the principle of doing all heavy parsing in the Worker, and there's also a couple of potentially large (temporary) allocations/copies of TypedArray data involved as well.",False
3472b671e7f765b8acb4ef2419a6b085f7726815,2020-02-22 03:07:24,Tim van der Meij,"Merge pull request #11621 from Snuffleupagus/update-packages

Update packages and translations",True
7f1e15e088a85a29c98df58415b517b7f72603f4,2020-02-22 03:05:22,Tim van der Meij,"Merge pull request #11620 from Snuffleupagus/RefSetCache-forEach-rm-thisArg

Remove the unused `thisArg` from `RefSetCache.forEach`",True
ed011581274796580e85b15a162a2c59d61fccbe,2020-02-21 22:10:08,Jonas Jenwald,Update l10n files,False
e7242e69c40cc9e5819ed61c5295b19f79e0e34b,2020-02-21 22:08:22,Jonas Jenwald,Update `npm` packages,False
6b44ae2170ee4a04a2f268d8f944415c8b280d7b,2020-02-21 18:53:05,Jonas Jenwald,"Remove the unused `thisArg` from `RefSetCache.forEach`

Given that this is completely unused, and that a ""normal"" function call may be a *tiny* bit more efficient, there's no good reason as far as I can tell to keep it.",False
3c7b7be1002817705820b18ee486080aeb4cbfed,2020-02-19 06:19:39,Jonas Jenwald,Prevent circular references in the /Pages tree,False
e2b30e9e9c16d45477718e9c0608a189f5839b81,2020-02-19 04:32:07,Tim van der Meij,"Merge pull request #11607 from Snuffleupagus/app-initializedPromise

Add a `PDFViewerApplication.initializedPromise` property to allow (easier) tracking of when the default viewer has been initialized",True
54484bd3c3e41eaaeaf5641279346c1ef26d8ce2,2020-02-19 04:18:44,Tim van der Meij,"Merge pull request #11616 from Snuffleupagus/demo-link

Update the PDF.js web page to link to both versions of the demo viewer (PR 11241 follow-up)",True
e242cfdd9b795c3bdfa91831f3dd412925d5aa32,2020-02-18 17:08:41,Jonas Jenwald,"Attempt to improve/clarify the ""Online demo"" section of the README

Hopefully this will help, now that there's *two* version of the viewer available.",False
16c261fada3408b6fdaec9cbf899cd328c4eccad,2020-02-18 16:49:33,Jonas Jenwald,"Update the PDF.js web page to link to both versions of the demo viewer (PR 11241 follow-up)

Rather than adding two buttons, it seems easier to simply link to the relevant section of the README instead (since it also means fewer things to keep up-to-date).",False
e6aaf097b6edb8ea8188b820fa7fde1a1133e981,2020-02-18 03:52:46,Tim van der Meij,"Merge pull request #11605 from Snuffleupagus/eslint-fix-arg

Update `gulp lint` to support passing of the `--fix` argument on the command line",True
44587f345914f9602c46d05188f6ed5eed38c27f,2020-02-17 18:44:56,Jonas Jenwald,"Add a `PDFViewerApplication.initializedPromise` property to allow (easier) tracking of when the default viewer has been initialized

This complements the existing `PDFViewerApplication.initialized` boolean property, and may be helpful for custom implementations of the default viewer. This will thus provide users of the default viewer an alternative to setting the preference to dispatch events to the DOM (and listen for the ""localized"" event), since they can instead use:
```javascript
document.addEventListener(""webviewerloaded"", function() {
  PDFViewerApplication.initializedPromise.then(function() {
    // The viewer has now been initialized.
  })
});
```

Note that in order to avoid manually tracking the initialization state *twice*, this implementation purposely uses the `PromiseCapability` functionality to handle both `PDFViewerApplication.initialized` and `PDFViewerApplication.initializedPromise` internally.",False
1c76ef7888c7a9a888c1af08a6252740c018f82f,2020-02-16 19:46:56,Jonas Jenwald,"Update `gulp lint` to support passing of the `--fix` argument on the command line

*I've had this patch locally for awhile, but have apparently missed to upstream it.*

This simplifies enabling of new ESLint rules, since most of them support automatic fixing of errors, without having to edit `gulpfile.js` or manually invoke ESLint directly.",False
64351caf1f754ebda626d5b5d38f7fb79b1837b4,2020-02-16 18:12:09,Tim van der Meij,"Merge pull request #11602 from Snuffleupagus/gulp-lint-chromium

Move validation of `chromium/preferences_schema.json` to its own gulp task",True
9fd2402321fcc11c10404c0ade7f088a50034645,2020-02-16 18:00:42,Jonas Jenwald,"Move validation of `chromium/preferences_schema.json` to its own gulp task

With the way that the `default_preferences.json` file is now generated at build time, the `gulp lint` task is now noticeably slower than before. This slowdown has been, and still is, somewhat annoying during the deployment of new ESLint rules.

Hence this patch, which moves the `chromium/preferences_schema.json` validation from `gulp lint` and into a new `gulp lint-chromium` task instead. *Obviously* this new task is run as part of the `gulp npm-test` task, and thus through `npm test` on Node.js/Travis, such that it's still being tested as before.",False
4092aa9fbde49016fe4cec92cece1d39cbe0c92f,2020-02-16 17:47:27,Tim van der Meij,"Merge pull request #11604 from Snuffleupagus/eslint-prefer-starts-ends-with

Enable the `unicorn/prefer-starts-ends-with` ESLint plugin rule",True
f6c813710a257833b6641f551238249e46a35540,2020-02-16 17:43:54,Tim van der Meij,"Merge pull request #11603 from Snuffleupagus/eslint-no-buffer-constructor

Enable the `no-buffer-constructor` ESLint rule",True
bc31a4be5df0c2238fd015cb7b0dfc9a264e607b,2020-02-16 17:11:53,Jonas Jenwald,"Enable the `unicorn/prefer-starts-ends-with` ESLint plugin rule

This complements the existing `mozilla/use-includes-instead-of-indexOf` plugin rule, by also disallowing unnecessary regular expressions when comparing strings.

Please see https://github.com/sindresorhus/eslint-plugin-unicorn/blob/master/docs/rules/prefer-starts-ends-with.md for additional information.",False
6ebd851d279cfb618a01531eba033d3e2aa35cf5,2020-02-16 16:51:40,Jonas Jenwald,"Enable the `no-buffer-constructor` ESLint rule

According to https://nodejs.org/api/buffer.html#buffer_class_buffer: `new Buffer(...)` is deprecated in up-to-date versions of Node.js, hence you want to prevent it from being accidentally used.

Please see https://eslint.org/docs/rules/no-buffer-constructor for additional information.",False
f6ffc2bf3756c6f2aeda3f853d4f1847dcb4f5e4,2020-02-15 03:54:20,Tim van der Meij,"Merge pull request #11598 from Snuffleupagus/polyfill-Map-Set-iteration

Add polyfills to support iteration of `Map` and `Set`",True
cb01a7de09516cf9d91602ec2892609699b03438,2020-02-15 03:52:08,Tim van der Meij,"Merge pull request #11241 from Snuffleupagus/modern-builds

[api-minor] Produce non-translated/non-polyfilled builds by default",True
c97c778f8f9418c4122a8d27ba85f8274252ca13,2020-02-14 22:42:07,Jonas Jenwald,[api-minor] Produce non-translated/non-polyfilled builds by default,False
4a76ab352cb3a2d22886f83821547817e106d9c9,2020-02-14 20:23:02,Jonas Jenwald,"Add polyfills to support iteration of `Map` and `Set`

Without this, things such as e.g. `Metadata.getAll` is broken in IE11 (see PR 11596).

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Browser_compatibility

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#Browser_compatibility",False
cd3f2d49e6223719b1408c96343a4188220ac161,2020-02-14 03:31:51,Tim van der Meij,"Merge pull request #11596 from Snuffleupagus/metadata-map

Re-factor how `Metadata` class instances store its data internally",True
12400489c2f2b3f93fe394806a5f276c1d588161,2020-02-14 03:26:59,Tim van der Meij,"Merge pull request #11593 from Snuffleupagus/LoopbackPort-postMessage-compatibility

Remove `LoopbackPort.postMessage` special-case for polyfilled `TypedArray`s",True
5cdfff4a47f0e8a7072777aab5c7d81661131040,2020-02-13 22:53:15,Jonas Jenwald,"Re-factor how `Metadata` class instances store its data internally

Please note that these changes do *not* affect the *public* interface of the `Metadata` class, but only touches internal structures.[1]

These changes were prompted by looking at the `getAll` method, which simply returns the ""private"" metadata object to the consumer. This seems wrong conceptually, since it allows way too easy/accidental changes to the internal parsed metadata.
As part of fixing this, the internal metadata was changed to use a `Map` rather than a plain Object.

---
[1] Basically, we shouldn't need to worry about someone depending on internal implementation details.",False
3f1568b51aa215d2797b736ec6778ca38ec1799e,2020-02-13 21:50:52,Jonas Jenwald,"A couple of small improvements of the `Metadata._repair` method

 - Remove the ""capturing group"" in the regular expression that removes leading ""junk"" from the raw metadata, since it's not necessary here (it's simply a case of too much copy-pasting in a prior patch).
   According to [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Cheatsheet#Groups_and_ranges) you want to, for performance reasons, avoid ""capturing groups"" unless actually needed.

 - Add inline comments to document a bunch of magic values in the code.",False
a5db4e985abd16a14b38ff07275fb65c37692aed,2020-02-13 17:20:41,Jonas Jenwald,"Remove `LoopbackPort.postMessage` special-case for polyfilled `TypedArray`s

Given that all `TypedArray` polyfills were removed in PDF.js version `2.0`, since native support is now required, this branch has been dead code for awhile.",False
993a1d78259643eaef3070e641521252819c2bb9,2020-02-13 04:17:02,Tim van der Meij,"Merge pull request #11586 from Snuffleupagus/expandTextDivs-padding

[TextLayer] Immediately set the padding, rather than checking if it's empty, in `expandTextDivs`",True
7b0836ca752bc8ce3b465dc56374aaebf60dbc22,2020-02-11 20:22:36,Jonas Jenwald,"[TextLayer] Immediately set the padding, rather than checking if it's empty, in `expandTextDivs`

In practice it's extremely rare[1] for the padding to be zero in *all* components, hence it seems better to just set it directly rather than creating a temporary variable and checking for the ""no padding""-case.

---
[1] In the `tracemonkey.pdf` file that only happens with `0.08%` of all text elements.",False
512dbe306076eff807ccc8780316166d3f35aac5,2020-02-11 05:19:23,Takashi Tamura,"Fix text spacing with vertical fonts. #7687 and #11526.

When the writing mode is vertical, we have to reverse
the sign of spacing since we are subtracting it from
current.y. We have to add it to current.y.
See 9.4.4 Text Space Details, https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#G8.1694762",False
10be0997a78835fb04f0d992dd3d38118c4eb176,2020-02-11 01:15:25,Tim van der Meij,"Merge pull request #11582 from Snuffleupagus/Array-fail-on-enumerable-properties

[api-minor] Ensure that the `Array.prototype` doesn't contain any enumerable properties",True
ae5a34c520e1548d6fc22ea0cc55ca542248cb0a,2020-02-10 18:47:27,Jonas Jenwald,"[api-minor] Ensure that the `Array.prototype` doesn't contain any enumerable properties

Over the years there's been a fair number of issues/PRs opened, where people have wanted to add `hasOwnProperty` checks in (hot) loops in the font parsing code. This has always been rejected, since we don't want to risk reducing performance in the Firefox PDF viewer simply because some users of the general PDF.js library are *incorrectly* extending the `Array.prototype` with enumerable properties.

With this patch the general PDF.js library will now fail immediately with a hopefully useful Error message, rather than having (some) fonts fail to render, when the `Array.prototype` is incorrectly extended.

Note that I did consider making this a warning, but ultimately decided against it since it's first of all possible to disable those (with the `verbosity` parameter). Secondly, even when printed, warnings can be easy to overlook and finally a warning may also *seem* OK to ignore (as opposed to an actual Error).",False
dced0a38212b7544200f395abb477d1612082193,2020-02-09 22:03:09,Tim van der Meij,"Merge pull request #11579 from Snuffleupagus/issue-11578

Ignore spaces when normalizing the font name in `Font.fallbackToSystemFont` (issue 11578)",True
61056a9238edb7566e7cce26bee540c7dff62fa0,2020-02-09 22:02:35,Tim van der Meij,"Merge pull request #11551 from Snuffleupagus/issue-11549

Allow skipping of errors when reading broken/corrupt ToUnicode data (issue 11549)",True
2fb4076e05d8135e95eb79a93fd56c0e089a66a9,2020-02-09 21:46:25,Tim van der Meij,"Merge pull request #11568 from Snuffleupagus/PDF-header-validation

Ensure that the PDF header contains an actual number (PR 11463 follow-up)",True
102af0f91563bab27cd2c180a0657cb4e5cf382e,2020-02-09 21:36:23,Tim van der Meij,"Merge pull request #11547 from Snuffleupagus/convertCmykToRgb-scale

Use fewer multiplications in `JpegImage._convertCmykToRgb`",True
f178805412fddcc8102366704218ac2ea4bb7226,2020-02-09 21:24:28,Tim van der Meij,"Merge pull request #11557 from Snuffleupagus/_getLinearizedBlockData-xScaleBlockOffset

Avoid re-calculating the `xScaleBlockOffset` when not necessary in `JpegImage._getLinearizedBlockData`",True
7948faf6757b9e9cfcd56edea9fdeb320edefd19,2020-02-09 01:12:28,Tim van der Meij,"Merge pull request #11573 from Snuffleupagus/api-cleanup-returns

[api-minor] Change `PDFDocumentProxy.cleanup`/`PDFPageProxy.cleanup` to return data",True
45e2ab80e46775d42117e76d45384328020f30c8,2020-02-09 01:01:58,Tim van der Meij,"Merge pull request #11570 from Snuffleupagus/zoom_adjustScaleWidth

Re-factor `Toolbar._adjustScaleWidth` to improve/simplify how the zoom dropdown width is calculated",True
a73a38029c86746f732a394d54e96881bde309d7,2020-02-09 00:43:56,Tim van der Meij,"Merge pull request #11569 from Snuffleupagus/rm-most-setAttribute

Replace most remaining `Element.setAttribute(""style"", ...)` usage with `Element.style = ...` instead",True
7937165537335ba3ad42803112cb2a3972a9004d,2020-02-09 00:29:04,Jonas Jenwald,Ignore spaces when normalizing the font name in `Font.fallbackToSystemFont` (issue 11578),False
b54c1fe39528c72281e9158d1920deec7c4ea285,2020-02-08 19:59:29,Jonas Jenwald,"Re-factor `Toolbar._adjustScaleWidth` to improve/simplify how the zoom dropdown width is calculated

This patch contains some *much* needed clean-up of, and improvements to, this old code thus addressing a number of issues:

 - Set more reasonable *default* values for the widths, in `web/viewer.css`, since the current ones are actually too small even for the (default) `en-US` locale.
   This obviously result in a slightly larger zoom dropdown width for many locales, but the more consistent UI does look good to me.

 - Stop setting the `min-width`/`max-width` and just use `width` instead.

 - Set an explicit `height` of the zoom dropdown, in an attempt to get Google Chrome to display it with the same height as the toolbar buttons.

 - Remove additional `Element.setAttribute(""style"", ...)` usage.

 - Actually check *all* of the predefined l10n strings, since the old implementation (implicitly) assumed that the currently selected one was the longest (note e.g. the `ja-JP` locale where one string is considerably longer than the rest).

 - Stop invalidating the DOM multiple times when doing the measurements. This was achieved by using a temporary in-memory `canvas`, and we now only need to query the DOM once in order to get the current font properties of the zoom dropdown.",False
7117ee03d6128e698f6d343e35cf541eca00cfc0,2020-02-07 21:30:29,Jonas Jenwald,"[api-minor] Change `PDFDocumentProxy.cleanup`/`PDFPageProxy.cleanup` to return data

This patch makes the following changes, to improve these API methods:

 - Let `PDFPageProxy.cleanup` return a boolean indicating if clean-up actually happened, since ongoing rendering will block clean-up.
   Besides being used in other parts of this patch, it seems that an API user may also be interested in the return value given that clean-up isn't *guaranteed* to happen.

 - Let `PDFDocumentProxy.cleanup` return the promise indicating when clean-up is finished.

 - Improve the JSDoc comment for `PDFDocumentProxy.cleanup` to mention that clean-up is triggered on *both* threads (without going into unnecessary specifics regarding what *exactly* said data actually is).
   Add a note in the JSDoc comment about not calling this method when rendering is ongoing.

 - Change `WorkerTransport.startCleanup` to throw an `Error` if it's called when rendering is ongoing, to prevent rendering from breaking.
   Please note that this won't stop *worker-thread* clean-up from happening (since there's no general ""something is rendering""-flag), however I'm not sure if that's really a problem; but please don't quote me on that :-)
   All of the caches that's being cleared in `Catalog.cleanup`, on the worker-thread, *should* be re-filled automatically even if cleared *during* parsing/rendering, and the only thing that probably happens is that e.g. font data would have to be re-parsed.
  On the main-thread, on the other hand, clearing the caches is more-or-less guaranteed to cause rendering errors, since the rendering code in `src/display/canvas.js` isn't able to re-request any image/font data that's suddenly being pulled out from under it.

 - Last, but not least, add a couple of basic unit-tests for the clean-up functionality.",False
88c35d872f7c802f41636707c93b9b4632b2b794,2020-02-07 16:55:07,Jonas Jenwald,"Ensure that the PDF header contains an actual number (PR 11463 follow-up)

While it would be nice to change the `PDFFormatVersion` property, as returned through `PDFDocumentProxy.getMetadata`, to a number (rather than a string) that would unfortunately be a breaking API change.
However, it does seem like a good idea to at least *validate* the PDF header version on the worker-thread, rather than potentially returning an arbitrary string.",False
a5fec297c01321fdf531e30e4403d642f0eec004,2020-02-07 03:50:45,Tim van der Meij,"Merge pull request #11567 from Snuffleupagus/css-variables

Add support for CSS variables using the `PostCSS CSS Variables` package (issue 11462)",True
e12e83702d76437389038e34f35ab3439f39c976,2020-02-07 03:40:41,Tim van der Meij,"Merge pull request #11559 from bhasto/curveto2-fix

Fix how curveTo2 (v operator) is translated to SVG",True
09a6e17d22d132d4d322aa8491e6f945d8ffebd5,2020-02-07 03:00:07,Brendan Dahl,"Merge pull request #11528 from janpe2/type1-nonemb-notdef

Hide .notdef glyphs in non-embedded Type1 fonts and don't ignore Widths",True
5cbd44b628bca16b866a580432e8c8cc21a6fb5e,2020-02-06 02:56:47,Jonas Jenwald,"Replace most remaining `Element.setAttribute(""style"", ...)` usage with `Element.style = ...` instead

This should hopefully be useful in environments where restrictive CSPs are in effect.
In most cases the replacement is entirely straighforward, and there's only a couple of special cases:
 - For the `src/display/font_loader.js` and `web/pdf_outline_viewer.js `cases, since the elements aren't appended to the document yet, it shouldn't matter if the style properties are set one-by-one rather than all at once.
 - For the `web/debugger.js` case, there's really no need to set the `padding` inline at all and the definition was simply moved to `web/viewer.css` instead.

*Please note:* There's still *a single* case left, in `web/toolbar.js` for setting the width of the zoom dropdown, which is left intact for now.
The reasons are that this particular case shouldn't matter for users of the general PDF.js library, and that it'd make a lot more sense to just try and re-factor that very old code anyway (thus fixing the `setAttribute` usage in the process).",False
102142537f2e8718324213b124c8538a7d83198d,2020-02-06 00:43:21,Jonas Jenwald,"Update the left/right CSS calculation for the `sidebarContainer` HTML element to enable IE11 compatibility

As gross as this hack is, it nonetheless seem necessary to allow using CSS variables; see also https://github.com/mozilla/pdf.js/pull/11567#issuecomment-582166160",False
cb61bdee347296879a3926d38930a62d3985c40e,2020-02-06 00:43:19,Jonas Jenwald,"Add support for CSS variables using the `PostCSS CSS Variables` package (issue 11462)

Having thought *briefly* about using `css-vars-ponyfill`, I'm no longer convinced that it'd be a good idea. The reason is that if we actually want to properly support CSS variables, then that functionality should be available in *all* of our CSS files.
Note in particular the `pdf_viewer.css` file that's built as part of the `COMPONENTS` target, in which case I really cannot see how a rewrite-at-the-client solution would ever be guaranteed to always work correctly and without accidentally touching other CSS in the surrounding application.

All-in-all, simply re-writing the CSS variables at build-time seems much easier and is thus the approach taken in this patch; courtesy of https://github.com/MadLittleMods/postcss-css-variables
By using its `preserve` option, the built files will thus include *both* a fallback and a modern `var(...)` format[1]. As a proof-of-concept this patch removes a couple of manually added fallback values, and converts an additional sidebar related property to use a CSS variable.

---
[1] Comparing the `master` branch with this patch, when using `gulp generic`, produces the following diff for the built `web/viewer.css` file:
```diff
@@ -408,6 +408,7 @@

 :root {
   --sidebar-width: 200px;
+  --sidebar-transition-duration: 200ms;
 }

 * {
@@ -550,27 +551,28 @@
   position: absolute;
   top: 32px;
   bottom: 0;
-  width: 200px; /* Here, and elsewhere below, keep the constant value for compatibility
-                   with older browsers that lack support for CSS variables. */
+  width: 200px;
   width: var(--sidebar-width);
   visibility: hidden;
   z-index: 100;
   border-top: 1px solid rgba(51, 51, 51, 1);
   -webkit-transition-duration: 200ms;
           transition-duration: 200ms;
+  -webkit-transition-duration: var(--sidebar-transition-duration);
+          transition-duration: var(--sidebar-transition-duration);
   -webkit-transition-timing-function: ease;
           transition-timing-function: ease;
 }
 html[dir='ltr'] #sidebarContainer {
   -webkit-transition-property: left;
   transition-property: left;
-  left: -200px;
+  left: calc(-1 * 200px);
   left: calc(-1 * var(--sidebar-width));
 }
 html[dir='rtl'] #sidebarContainer {
   -webkit-transition-property: right;
   transition-property: right;
-  right: -200px;
+  right: calc(-1 * 200px);
   right: calc(-1 * var(--sidebar-width));
 }

@@ -640,6 +642,8 @@
 #viewerContainer:not(.pdfPresentationMode) {
   -webkit-transition-duration: 200ms;
           transition-duration: 200ms;
+  -webkit-transition-duration: var(--sidebar-transition-duration);
+          transition-duration: var(--sidebar-transition-duration);
   -webkit-transition-timing-function: ease;
           transition-timing-function: ease;
 }
```",False
393aed9978d4b50be6b9567ee1a8b9238a62e130,2020-02-02 21:33:29,Branislav Hašto,"Fix how curveTo2 (v operator) is translated to SVG

Based on the PDF spec, with `v` operator, current point should be used as the first control point of the curve.

Do not overwrite current point before an SVG curve is built, so it can b actually used as first control point.",False
d6754d1e22fb7b3eb98ace8ce671eac094a4859d,2020-02-02 18:22:03,Tim van der Meij,"Merge pull request #11554 from Snuffleupagus/update-packages

Update `npm` packages",True
4d5aa99c88d555cc3605102d5d75989ec344ce2a,2020-02-02 18:04:34,Tim van der Meij,"Merge pull request #11558 from Snuffleupagus/GrabToPan-eslint

Remove the `eslint-disable no-var` rule from the `web/grab_to_pan.js` file",True
6558be3a68b51daa70fbf435bf306939567f7449,2020-02-02 13:28:28,Jonas Jenwald,"Remove the `eslint-disable no-var` rule from the `web/grab_to_pan.js` file

Since this rule is now enforced in the entire `/web` folder, there's no good reason for it to remain disabled in this file. Most likely, it's added to reduce the number of linting errors when we started enforcing block-scoped variables.",False
a4440a1c6bf96707caa2bcc5e45a1b49c40d794d,2020-02-01 16:28:50,Jonas Jenwald,"Avoid re-calculating the `xScaleBlockOffset` when not necessary in `JpegImage._getLinearizedBlockData`

As can be seen in the code, the `xScaleBlockOffset` typed array doesn't depend on the actual image data but only on the width and x-scale. The width is obviously consistent for an image, and it turns out that in practice the `componentScaleX` is quite often identical between two (or more) adjacent image components.
All-in-all it's thus not necessary to *unconditionally* re-compute the `xScaleBlockOffset` when getting the JPEG image data.

While avoiding, in many cases, one or more loops can never be a bad thing these changes are unfortunately completely dominated by the rest of the JpegImage code and consequently doesn't really show up in benchmark results. *Hence I'd understand if this patch is ultimately deemed not necessary.*",False
9ac5395ca4e01bd88005c7966fa1727d1c0741e5,2020-01-31 19:32:59,Jonas Jenwald,Update l10n files,False
763f1425d5575d9262543f3e4206b10d733c71ac,2020-01-31 18:34:49,Jonas Jenwald,Update `npm` packages,False
4c54395ff69b2e89d0a2e94e33f96a5e7886989b,2020-01-30 17:49:05,Jonas Jenwald,"Allow skipping of errors when reading broken/corrupt ToUnicode data (issue 11549)

This will allow font loading/parsing to continue, rather than immediately failing, when broken/corrupt CMap data is encountered.",False
517ccb7a394148942616433d49782cc8126a49fe,2020-01-30 03:30:41,Tim van der Meij,"Merge pull request #11546 from tamuratak/radialaxial

Fix the indices of arguments for RadialAxial. It is related to #10646.",True
ce4f41d06a9658a06bf586aec2b8f8090b92d9dd,2020-01-29 23:04:58,Jonas Jenwald,"Use fewer multiplications in `JpegImage._convertCmykToRgb`

*Note:* This is inspired by PR 5473, which made similar changes for another kind of JPEG data.

Since the implementation in `src/core/jpg.js` only supports 8-bit data, as opposed to similar code in `src/core/colorspace.js`, the computations can be further simplified since the `scale` is always constant.
By updating the coefficients, effectively inlining the `scale`, we'll thus avoid *four* multiplications for each loop iteration.

Unfortunately I wasn't able, based on a quick look through the test-files, to find a sufficiently *large* CMYK JPEG image in order for these changes to really show up in benchmark results. However, when testing the `cmykjpeg.pdf` manually there's a total of `120 000` fewer multiplication with this patch.",False
0b701e79501b845a8400acb9d00a5a0f7576d15a,2020-01-29 15:48:50,Takashi Tamura,Fix the indices of arguments for RadialAxial. It is related to #10646.,False
89d345c7bd71407d1acb32273aa81152855bbb5f,2020-01-29 03:29:04,Tim van der Meij,"Merge pull request #11542 from Snuffleupagus/dist-lib-readme

Add a README file to the `/lib` folder in `pdfjs-dist` (issue 11539)",True
6d5de7e808ad77a0ed85f8e915635b95f498fb5b,2020-01-29 03:27:04,Tim van der Meij,"Merge pull request #11545 from Snuffleupagus/debugger-createObjectURL

Use the native `URL.createObjectURL` method in `web/debugger.js`",True
7ae504222f96c30add159de9c1c5fca1735a78df,2020-01-29 03:24:46,Tim van der Meij,"Merge pull request #11544 from Snuffleupagus/decodeHuffman

Make the `decodeHuffman` function, in `src/core/jpg.js`, slightly more efficient",True
e9dc1796739cd915f5e775b6b32b44f6de3326f0,2020-01-29 03:20:30,Tim van der Meij,"Merge pull request #11537 from Snuffleupagus/setupFakeWorker-configure

Send the `verbosity` level when setting up fake workers (issue 11536)",True
a12f78154c6199dfb3930703239b29d6c7a1272f,2020-01-29 01:51:08,Jonas Jenwald,"Use the native `URL.createObjectURL` method in `web/debugger.js`

There's no particular reason for using the PDF.js helper function `createObjectURL`[1] in the debugger, instead of the native `URL.createObjectURL` directly, for a couple of reasons:
 - The relevant code-path only applies to fonts loaded with the Font Loading API, and this isn't supported in IE anyway.
 - The debugger can, since quite some time, not even be loaded in IE any more.
 - General support for IE is now limited, and there's no guaratee that everything actually works.

---
[1] It provides a fallback for browsers with broken `Blob` support, which as usual means Internet Explorer :-P",False
f5a617a3341285b84655fe6cab8fa35acf12748e,2020-01-28 18:53:58,Jonas Jenwald,"Make the `decodeHuffman` function, in `src/core/jpg.js`, slightly more efficient

Rather than repeating the `typeof node` check twice, we can use a `switch` statement instead.

This patch was tested using the PDF file from issue 3809, i.e. https://web.archive.org/web/20140801150504/http://vs.twonky.dk/invitation.pdf, with the following manifest file:
```
[
    {  ""id"": ""issue3809"",
       ""file"": ""../web/pdfs/issue3809.pdf"",
       ""md5"": """",
       ""rounds"": 50,
       ""type"": ""eq""
    }
]
```

which gave the following results when comparing this patch against the `master` branch:
```
-- Grouped By browser, stat --
browser | stat         | Count | Baseline(ms) | Current(ms) | +/- |    %  | Result(P<.05)
------- | ------------ | ----- | ------------ | ----------- | --- | ----- | -------------
Firefox | Overall      |    50 |        12537 |       12451 | -86 | -0.69 |        faster
Firefox | Page Request |    50 |            5 |           5 |   0 |  0.77 |
Firefox | Rendering    |    50 |        12532 |       12446 | -86 | -0.69 |        faster
```",False
78afefbfb449d368557868b482a77b36695bced1,2020-01-28 15:59:14,Jonas Jenwald,Add a README file to the `/lib` folder in `pdfjs-dist` (issue 11539),False
474fe1757e654e67d20a53774edb293aa073ce0b,2020-01-27 02:02:13,Tim van der Meij,"Merge pull request #11508 from Snuffleupagus/jpg-default-marker

Simplify the handling of unsupported/incorrect markers in `src/core/jpg.js`",True
3a251db6a3f94ca7a3484af8d37ed43e5b7be3be,2020-01-27 02:01:52,Tim van der Meij,"Merge pull request #11535 from Snuffleupagus/Popup-annotation-render-last

Render Popup annotations last, once all other annotations have been rendered (issue 11362)",True
62b2b984cc029eb2afee8c7439d54f692949d561,2020-01-26 20:19:55,Jonas Jenwald,"Render Popup annotations last, once all other annotations have been rendered (issue 11362)

In the current `AnnotationLayer` implementation, Popup annotations require that the parent annotation have already been rendered (otherwise they're simply ignored).
Usually the annotations are ordered, in the `/Annots` array, in such a way that this isn't a problem, however there's obviously no guarantee that all PDF generators actually do so. Hence we simply ensure, when rendering the `AnnotationLayer`, that the Popup annotations are handled last.",False
427df2dfd76215002282ac2fa2d2a0851ee2796c,2020-01-26 17:07:45,Jonas Jenwald,"Send the `verbosity` level when setting up fake workers (issue 11536)

Interestingly the viewer already seem to work correctly as-is, with workers disabled and a non-standard `verbosity` level.
Hence this is possibly Node.js specific, but given that the issue is lacking *both* the PDF file in question and a runnable test-case, so this patch is essentially a best-effort guess at what the problem could be.",False
13930e52028e4117a52f4ac82461b86ab9e32467,2020-01-26 03:22:24,Jonas Jenwald,"Simplify the handling of unsupported/incorrect markers in `src/core/jpg.js`

 - Re-factor the ""incorrect encoding"" check, since this can be easily achieved using the general `findNextFileMarker` helper function (with a suitable `startPos` argument).

 - Tweak a condition, to make it easier to see that the end of the data has been reached.

 - Add a reference test for issue 1877, since it's what prompted the ""incorrect encoding"" check.",False
3775b711ed45aba1461aad122fb032342080d26c,2020-01-26 02:08:34,Tim van der Meij,"Merge pull request #11482 from Snuffleupagus/more-core-utils

Convert `src/core/jpg.js` to use the `readUint16` helper function in `src/core/core_utils.js`, rather than re-implementing it twice",True
cbbda9d8835fb98de8d4e699ba574e0c24311ac8,2020-01-26 02:02:28,Tim van der Meij,"Merge pull request #11515 from Snuffleupagus/cache-fallback-font

Cache the fallback font dictionary on the `PartialEvaluator` (PR 11218 follow-up)",True
188b320e182bc9d81b2daa5176f279fadf3c03d6,2020-01-25 05:05:10,Jonas Jenwald,"Convert `src/core/jpg.js` to use the `readUint16` helper function in `src/core/core_utils.js`, rather than re-implementing it twice

The other image decoders, i.e. the JBIG2 and JPEG 2000 ones, are using the common helper function `readUint16`. Most likely, the only reason that the JPEG decoder is doing it this way is because it originated *outside* of the PDF.js library.
Hence we can simply re-factor `src/core/jpg.js` to use the common `readUint16` helper function, which is especially nice given that the functionality was essentially *duplicated* in the code.",False
3f031f69c270bedd3c404e752dc12a72324aca99,2020-01-25 05:03:52,Jonas Jenwald,"Move additional worker-thread only functions from `src/shared/util.js` and into a `src/core/core_utils.js` instead

This moves the `log2`, `readInt8`, `readUint16`, `readUint32`, and `isSpace` functions since they are only used in the worker-thread.",False
794744c3fad3411a886b697cd3c4c6cb96725880,2020-01-25 04:55:36,Tim van der Meij,"Merge pull request #11534 from Snuffleupagus/prefer-const

Enable the ESLint `prefer-const` rule globally (PR 11450 follow-up)",True
83bdb525a4b2db9119402a8bba5b2d892c01c931,2020-01-25 04:50:23,Jonas Jenwald,"Fix remaining linting errors, from enabling the `prefer-const` ESLint rule globally

This covers cases that the `--fix` command couldn't deal with, and in a few cases (notably `src/core/jbig2.js`) the code was changed to use block-scoped variables instead.",False
9e262ae7fa4e8614d7950850b27020ca2f50bef8,2020-01-25 04:50:22,Jonas Jenwald,"Enable the ESLint `prefer-const` rule globally (PR 11450 follow-up)

Please find additional details about the ESLint rule at https://eslint.org/docs/rules/prefer-const

With the recent introduction of Prettier this sort of mass enabling of ESLint rules becomes a lot easier, since the code will be automatically reformatted as necessary to account for e.g. changed line lengths.

Note that this patch is generated automatically, by using the ESLint `--fix` argument, and will thus require some additional clean-up (which is done separately).",False
d2d9441373e92eb0ace027c3421caa8b0193d554,2020-01-25 04:29:13,Tim van der Meij,"Merge pull request #11489 from Snuffleupagus/rm-FIREFOX-define

Remove the `FIREFOX` build flag, since it's completely unused and simplify a couple of `PDFJSDev` checks",True
9791d7e4d3d077d03e119aa99f6f2dafc01f289d,2020-01-24 04:04:31,Tim van der Meij,"Merge pull request #11533 from Snuffleupagus/rm-useOnlyCssZoom-hash

Remove the ""useOnlyCssZoom"" (debugging) hash parameter",True
9a6ee1b7f28c6b469cd426996b3194e121b85790,2020-01-23 20:19:58,Jonas Jenwald,"Remove the ""useOnlyCssZoom"" (debugging) hash parameter

The debugging hash parameters[1] are intended to facilitate access to various tools/settings in PRODUCTION builds, protected by the `pdfBugEnabled` preference.
At this point, the remaining debugging hash parameters are mainly intended to allow access to the `PDFBug` tools and/or to quickly toggle certain larger features.

The ""useOnlyCssZoom"" functionality doesn't really seem to fit in with the rest of these hash parameters, since:
 - This is, comparatively speaking, a minor viewer-specific feature.
 - The zooming implementation will (almost) always fallback to CSS-only zooming, for any document, once the canvases becomes large enough. Hence, the majority of the CSS zooming feature can still be tested *directly* in any build of the viewer.
 - After the initial implementation, years ago, the CSS-only zooming code in question hasn't changed much (or even at all), i.e. it doesn't seem like an active development target.[2]
 - If the ""useOnlyCssZoom"" functionality was added today, it's unlikely that a hash parameter would've been added.
 - Last, but not least, there's also a `useOnlyCssZoom` preference hence toggling this functionality shouldn't be too difficult (e.g. if someone needs to hack on it).

All in all, I'm thus suggesting that we remove the ""useOnlyCssZoom"" hash parameter.

---
[1] Originally these hash parameters could be used directly in any build, which was bad since it would allow any link to potentially disable functionality and/or reduce performance.

[2] If it had seen active development over the years, I'd be *much* more inclined to keep the hash parameter.",False
0f3e87911f59ed399df3b6fe570e30371b1794b6,2020-01-23 16:35:43,Jonas Jenwald,"Return early in `PDFViewerApplication._parseHashParameters` when the hash is empty

For people running e.g. Firefox with the `pdfBugEnabled` preference set, to allow quick access to debugging tools, this method will obviously run for every opened PDF file. However, in most cases the URL hash is empty and we can thus skip most of the parsing and simply return early instead.",False
668a29aa452a3e53d5d8dbb75564b8f67e358142,2020-01-23 03:36:54,Tim van der Meij,"Merge pull request #11497 from Snuffleupagus/Promise-allSettled

Add support for `Promise.allSettled`",True
a88dec197fa59b8baee3e4f2a6655cbf8f321629,2020-01-23 03:22:59,Tim van der Meij,"Merge pull request #11511 from Snuffleupagus/eslint-no-nested-ternary

Enable the `no-nested-ternary` ESLint rule (PR 11488 follow-up)",True
be5b0096b21f9bf38f8dbed8eab941b6f7e8842a,2020-01-23 03:05:46,Tim van der Meij,"Merge pull request #11502 from Snuffleupagus/prettier-followup-fixes

Fix a couple of cases where Prettier broke existing formatting (PR 11446 follow-up)",True
0d3146d09d137320f3fdd4c33784ea94a7f87c23,2020-01-23 02:53:02,Tim van der Meij,"Merge pull request #11529 from Snuffleupagus/examples-css-tab

Display the CSS tab in the interactive examples (issue 11506 follow-up)",True
60f0c5ac70a318b28916d86093b86ed7b2188606,2020-01-23 01:15:05,Brendan Dahl,"Merge pull request #11510 from Snuffleupagus/skip-FBF-tests-Chrome-makeref

Skip failing FBF tests in Google Chrome when running `makeref` on the bots",True
3b78f4e8f813a9bbab436ec0ad85d361a89d69f2,2020-01-22 13:42:12,Jonas Jenwald,"Fix a couple of cases where Prettier broke existing formatting (PR 11446 follow-up)

These two cases should have been whitelisted prior to re-formatting respectively had the comments fixed afterwards, however I unfortunately missed them because of the massive size of the diff.",False
c5a932a9d67cd44ab6e35e5b00cbc649e3632a89,2020-01-22 05:06:39,Jonas Jenwald,"Display the CSS tab in the interactive examples (issue 11506 follow-up)

I just happened to notice that we've apparently never displayed the ""CSS"" tab [in the interactive examples](https://mozilla.github.io/pdf.js/examples/index.html#interactive-examples), which probably limits the number of users who'll notice the `direction: ltr;` CSS rule on the canvas :-)",False
809b96b40c6111f0b4776db622514a648543b7ed,2020-01-22 01:05:25,Jani Pehkonen,"Hide .notdef glyphs in non-embedded Type1 fonts and don't ignore Widths

Fixes #11403
The PDF uses the non-embedded Type1 font Helvetica. Character codes 194 and 160 (`Â` and `NBSP`) are encoded as `.notdef`. We shouldn't show those glyphs because it seems that Acrobat Reader doesn't draw glyphs that are named `.notdef` in fonts like this.

In addition to testing `glyphName === "".notdef""`, we must test also `glyphName === """"` because the name `""""` is used in `core/encodings.js` for undefined glyphs in encodings like `WinAnsiEncoding`.

The solution above hides the `Â` characters but now the replacement character (space) appears to be too wide. I found out that PDF.js ignores font's `Widths` array if the font has no `FontDescriptor` entry. That happens in #11403, so the default widths of Helvetica were used as specified in `core/metrics.js` and `.nodef` got a width of 333. The correct width is 0 as specified by the `Widths` array in the PDF. Thus we must never ignore `Widths`.",False
a39943554a57c6d90634b8a38f33567d29c25900,2020-01-21 04:36:15,Jonas Jenwald,"Simplify, and tweak, a couple of `PDFJSDev` checks

This removes a couple of, thanks to preceeding code, unnecessary `typeof PDFJSDev` checks, and also fixes a couple of incorrectly implemented (my fault) checks intended for `TESTING` builds.",False
7322a24ce4c06cbb856849e168cf4eaad28a5b3b,2020-01-21 04:36:15,Jonas Jenwald,"Remove the `FIREFOX` build flag, since it's completely unused

After PR 9566, which removed all of the old Firefox extension code, the `FIREFOX` build flag is no longer used for anything.
It thus seems to me that it should be removed, for a couple of reasons:
 - It's simply dead code now, which only serves to add confusion when looking at the `PDFJSDev` calls.
 - It used to be that `MOZCENTRAL` and `FIREFOX` was *almost* always used together. However, ever since PR 9566 there's obviously been no effort put into keeping the `FIREFOX` build flags up to date.
 - In the event that a new, Webextension based, Firefox addon is created in the future you'd still need to audit all `MOZCENTRAL` (and possibly `CHROME`) build flags to see what'd make sense for the addon.",False
ead03b513c9a43d8590c09d2d286984ccd49bbfc,2020-01-21 04:03:49,Tim van der Meij,"Merge pull request #11522 from Snuffleupagus/viewer-reportTelemetry

Ensure that the viewer telemetry reporting, and fallback code, runs in development mode and GENERIC builds",True
f171d997994c063bfa017da654d6de280a24ff20,2020-01-20 16:16:38,Jonas Jenwald,"Ensure that the viewer telemetry reporting, and fallback code, runs in development mode and GENERIC builds

While only the `MOZCENTRAL` builds will actually do anything meaningful with the telemetry data, none of the code in question actually runs *at all* in e.g. development mode.[1]
This seems bad since it essentially means that this code is completely untested, despite being quite important for the built-in Firefox PDF viewer, and this thus ought to be fixed.

In this case, the explanation for the current state of the code should be ""for historical reasons"". Before the viewer was split into the current components and before the pre-processor was improved, back when all code resided in the `web/viewer.js` file, the telemetry reporting was done with *direct* `FirefoxCom` calls. However, with the dummy `DefaultExternalServices.reportTelemetry` method there's nothing actually preventing attempting to report telemetry in any type of build.

NOTE: By running this code in GENERIC builds as well, in addition to just locally, the *viewer* part of telemetry reporting becomes tested e.g. in preview builds too which should help with reviewing.

---
[1] When fixing bug 1606566, I had to edit the relevant `PDFJSDev` checks to be able to actually test the changes locally.",False
ccf327538ba427e47d1ea16b1cc1d50f3340683b,2020-01-19 22:07:19,Tim van der Meij,"Merge pull request #11519 from tamuratak/enable_eslint_import_extensions

Enable import/extensions of ESlint plugin to enforce all `import` have a `.js` file extension.",True
918f0ff60b40f65759fc3c850df5b89bb721b092,2020-01-19 21:54:55,Tim van der Meij,"Merge pull request #11521 from Snuffleupagus/rm-supportsDocumentColors

Remove the `supportsDocumentColors` warning in MOZCENTRAL builds (bug 844349 follow-up)",True
1097fa156c73e59ba5d4feda85175858f8bb3593,2020-01-19 21:48:40,Tim van der Meij,"Merge pull request #11520 from Snuffleupagus/workerSrc-docs

Update the `GlobalWorkerOptions.workerSrc` JSDoc comment",True
a977882f54c82cc7239e5238734194881a281137,2020-01-19 19:19:26,Jonas Jenwald,"Remove the `supportsDocumentColors` warning in MOZCENTRAL builds (bug 844349 follow-up)

With https://bugzilla.mozilla.org/show_bug.cgi?id=844349 now being fixed in Firefox, the textLayer will now actually stay hidden as intended regardless of the browser settings.
Hence it should no longer be necessary to display the fallback bar, nor print a warning in the console, for documents which contains a textLayer.

Besides removing the `supportsDocumentColors` methods in the default viewer, we can also remove a now unused l10n string.",False
ee87e898db26fab3c8e99ae4e503e955f8037958,2020-01-19 17:14:42,Jonas Jenwald,"Update the `GlobalWorkerOptions.workerSrc` JSDoc comment

This particular JSDoc comment is fairly old and it also contains some now unrelated/confusing information.
The only way to *guarantee* that the PDF.js library works as expected is to correctly set the global `workerSrc`[1], hence giving the impression that the option isn't strictly necessary is thus incorrect.

---
[1] Since advertising the fallbackWorkerSrc functionality definitely seems like the *wrong* thing to do.",False
00ce7898a24e9e97225c4571f284ba48d45ccac1,2020-01-18 07:23:01,Takashi Tamura,"Enable import/extensions of ESlint plugin to enforce all `import` have a `.js` file extension.
Related to #11465.

- https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/extensions.md",False
9ab7c280aa816b2665f9d393c38c1a480b0eef1b,2020-01-16 19:42:05,Jonas Jenwald,"Cache the fallback font dictionary on the `PartialEvaluator` (PR 11218 follow-up)

This way we'll benefit from the existing font caching, and can thus avoid re-creating a fallback font over and over again during parsing.
(Thece changes necessitated the previous patch, since otherwise breakage could occur e.g. with fake workers.)",False
090ff116d453a9f00b4ce8adffb8c75811d3e712,2020-01-16 19:41:56,Jonas Jenwald,"Ensure that full clean-up is always run when handling the ""Terminate"" message in `src/core/worker.js`

This is beneficial in situations where the Worker is being re-used, for example with fake workers, since it ensures that things like font resources are actually released.",False
1b87b1c384d8ab8b8d918f750949569f74108819,2020-01-15 18:56:47,Jonas Jenwald,"Re-factor the various `ExternalServices`, used in the default viewer, to classes with static methods

This seems nicer overall, since it's now a bit clearer that the various build targets *extend* the default implementation.",False
c591826f3b996cf5fb8b286cdcc0b581b9caf769,2020-01-14 22:19:39,Jonas Jenwald,"Enable the `no-nested-ternary` ESLint rule (PR 11488 follow-up)

This rule is already enabled in mozilla-central, and helps avoid some confusing formatting, see https://searchfox.org/mozilla-central/rev/9e45d74b956be046e5021a746b0c8912f1c27318/tools/lint/eslint/eslint-plugin-mozilla/lib/configs/recommended.js#209-210

With the recent introduction of Prettier some of the existing nested ternary statements became even more difficult to read, since any possibly helpful indentation was removed.
This particular ESLint rule wasn't entirely straightforward to enable, and I do recognize that there's a certain amount of subjectivity in the changes being made. Generally, the changes in this patch fall into three categories:
 - Cases where a value is only clamped to a certain range (the easiest ones to update).
 - Cases where the values involved are ""simple"", such as Numbers and Strings, which are re-factored to initialize the variable with the *default* value and only update it when necessary by using `if`/`else if` statements.
 - Cases with more complex and/or larger values, such as TypedArrays, which are re-factored to let the variable be (implicitly) undefined and where all values are then set through `if`/`else if`/`else` statements.

Please find additional details about the ESLint rule at https://eslint.org/docs/rules/no-nested-ternary",False
78917bab91355c8907ca20c696cd4685e058dcbf,2020-01-14 19:59:59,Jonas Jenwald,"Update `src/display/{annotation_layer.js, svg.js}` to determine the `fontWeight` in the same way as with canvas (PR 6091 and 7839 follow-up)",False
6590cc32f2e1d5a42f3fef1070bf278519a7f31b,2020-01-14 19:59:53,Jonas Jenwald,Extract the subroutine bias computation into a helper function in `src/core/font_renderer.js`,False
6ab3ba95193e7ff287b7d982cc011742603c3c61,2020-01-14 05:24:44,Jonas Jenwald,"Skip failing FBF tests in Google Chrome when running `makeref` on the bots

Note that this will still allow the FBF tests to run locally, and also on the bots when invoked with `test`/`browsertest` (to not lose all the FBF test-coverage), but will no longer prevent `makeref` from running successfully on the bots.",False
40f531ee873f523e2991fd6c2ca00a336fdbfbdd,2020-01-13 00:08:17,Tim van der Meij,"Merge pull request #11503 from Snuffleupagus/issue-11499

Remove the unused `id` properties from page and thumbnail canvas/image DOM elements (issue 11499)",True
611ac783419b0597a22f5faf6ab76da136c4c4bb,2020-01-13 00:01:59,Tim van der Meij,"Merge pull request #11504 from Snuffleupagus/issue-11457

Add `direction: ltr;` to the canvases used in `examples/learning`, to ensure correct text rendering (issue 11457)",True
ba1d8d8728050d7a83a4a0255e030b19e55ffb22,2020-01-12 23:58:11,Tim van der Meij,"Merge pull request #11505 from Snuffleupagus/eslint-no-unneeded-ternary

Enable the ESLint `no-unneeded-ternary` rule",True
ecd3de83f8a4846cc264d624f701e6fc682bce53,2020-01-12 19:20:52,Jonas Jenwald,"Enable the ESLint `no-unneeded-ternary` rule

This rule is already enabled in mozilla-central, see https://searchfox.org/mozilla-central/rev/b04e3a28a2ef4dbf957018dbbdc1840d62fdbc32/tools/lint/eslint/eslint-plugin-mozilla/lib/configs/recommended.js#247-248

Please see https://eslint.org/docs/rules/no-unneeded-ternary for additional information.",False
2e5faa8edcfaa5c57ffdeddb21548f7a566e1255,2020-01-12 16:55:23,Jonas Jenwald,"Add `direction: ltr;` to the canvases used in `examples/learning`, to ensure correct text rendering (issue 11457)

This is currently the only possible way of addressing the issue, until https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/direction becomes generally available in browsers.

*Note:* This will also require manually updating https://mozilla.github.io/pdf.js/examples/#interactive-examples",False
34e7d42ce6ae7ab368bcd75ac57f60f99bc8a7ac,2020-01-11 18:58:29,Jonas Jenwald,Add helper functions to reduce unnecessary duplication when fetching l10n messages in `PDFThumbnailView`,False
16a94412e4d093b8880fc5ffbe7f486e9352eef3,2020-01-11 18:41:47,Jonas Jenwald,"Remove the unused `id` properties from page and thumbnail canvas/image DOM elements (issue 11499)

As described in the issue, having a DOM element with `id=page2` (or any other number) will automatically cause that element to become linkable through the URL hash. That's currently leading to some confusing and outright wrong behaviour, since it obviously only works for pages that have been loaded and rendered.

For PDF documents the only officially supported way to reference a particular page through the URL hash is using the `#page=2` format, which also works for all pages regardless if they're loaded or not.

As far as I can tell there's nothing in the PDF.js default viewer that actually depends on the page/thumbnail `id` at this point in time, hence why I believe that this removal ought to be safe.
Just as a pre-caution this patch adds an `aria-label` to the page canvas, similar to the thumbnail canvas/image, to at least keep this information in the DOM.",False
2942233c9c319d644485ec1f6d89d2118061e77a,2020-01-10 19:05:12,Jonas Jenwald,"Add support for `Promise.allSettled`

Please see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled",False
4729fdc0e930154c9e4c4688b6239ed4708f0e5e,2020-01-09 03:49:26,Tim van der Meij,"Merge pull request #11488 from Snuffleupagus/web-no-nested-ternary

Enable the `no-nested-ternary` ESLint rule in the `web/` directory",True
1ceffac9c52b2d6e5e049de03900465c2f3b1aa5,2020-01-08 16:26:10,Jonas Jenwald,"Enable the `no-nested-ternary` ESLint rule in the `web/` directory

This rule is already enabled in mozilla-central, and helps avoid some confusing formatting[1], see https://searchfox.org/mozilla-central/rev/a92ed79b0bc746159fc31af1586adbfa9e45e264/tools/lint/eslint/eslint-plugin-mozilla/lib/configs/recommended.js#209-210

Since some cases may not be aren't entirely straightforward to convert, and some we probably don't want to change either[2], this patch is limited to the `web/` directory as a proof-of-concept.

Please find additional details about the ESLint rule at https://eslint.org/docs/rules/no-nested-ternary

---
[1] One example with *three* ternary statements: https://github.com/mozilla/pdf.js/blob/93aa613db7a874e6ed964f394241605d5586c142/src/core/fonts.js#L2623-L2630

[2] One example that should be whitelisted: https://github.com/mozilla/pdf.js/blob/93aa613db7a874e6ed964f394241605d5586c142/src/core/jbig2.js#L82-L92",False
93aa613db7a874e6ed964f394241605d5586c142,2020-01-07 03:54:43,Tim van der Meij,"Merge pull request #11465 from Snuffleupagus/import-file-extension

Ensure that all `import` and `require` statements, in the entire code-base, have a `.js` file extension",True
3772e30f9ecc5928cdf539385ec551d1f7fb312d,2020-01-07 03:37:53,Tim van der Meij,"Merge pull request #11474 from Snuffleupagus/pdfjs-dist-rm-dependencies

[api-minor] Remove the Webpack-only npm dependencies from `pdfjs-dist` (PR 11418 follow-up)",True
049a464372bc9f5f4db137115e3c5e1dab712e19,2020-01-07 03:25:30,Tim van der Meij,"Merge pull request #11466 from Snuffleupagus/telemetry-generator-parsing

[Firefox] Slightly simplify how the generator is determined, when sending telemetry data from the viewer",True
f0999d271c8d7931c6e70e876f558a4597dcfb77,2020-01-07 03:18:09,Tim van der Meij,"Merge pull request #11472 from Snuffleupagus/license_header_year

Update the year in the `license_header` files",True
a0cf67d52f1ce244c15598cb57bd108061cb4cb1,2020-01-06 01:05:19,Jonas Jenwald,"[api-minor] Remove the Webpack-only npm dependencies from `pdfjs-dist` (PR 11418 follow-up)

Currently *all* users of `pdfjs-dist` are forced to install the `webpack` and `worker-loader` packages, despite the fact that they are *only* relevant if the `webpack.js` file is being used (with a custom Webpack build).
This really doesn't seem great, especially since those packages are the only remaining dependencies in the `pdfjs-dist` library, and it thus seem more reasonable overall that Webpack users handle those dependencies themselves.

To prevent unnecessarily cryptic runtime failures, when people update to newer `pdfjs-dist` versions, the `webpack.js` file was updated to explicitly check for the existence of the `worker-loader` package and error otherwise.
Furthermore, note that `webpack` was only listed as a dependency because of the `worker-loader` package itself (see issue 9248).

Obviously these changes may not be seen as great by Webpack users who rely on `pdfjs-dist`, since it forces them to handle the dependencies themselves, however it should improve things considerably for ""general"" users of `pdfjs-dist` by not burdening them with unnecessary dependencies.
These sort of changes are also in line with other recent changes, see PR 11418, which removed built-in fake worker loader code for specific JS builders/bundlers/frameworks. This work was prompted not only by a desire to simplify/clean-up old code, but also to lessen future support burden since the PDF.js contributors cannot be assumed to be experts in various JS bundlers.",False
94f084958a3f5dcbc47d68968c0811ffbb26ba74,2020-01-05 16:44:03,Jonas Jenwald,Update the year in the `license_header` files,False
36881e3770ecb320351c650712dadfd3b335bcbd,2020-01-04 17:31:43,Jonas Jenwald,"Ensure that all `import` and `require` statements, in the entire code-base, have a `.js` file extension

In order to eventually get rid of SystemJS and start using native `import`s instead, we'll need to provide ""complete"" file identifiers since otherwise there'll be MIME type errors when attempting to use `import`.",False
299ba44bb92eabcfb106d9ff4169702cdc8bfd6c,2020-01-03 03:59:00,Jonas Jenwald,"[Firefox] Slightly simplify how the generator is determined, when sending telemetry data from the viewer

When working on PR 11463 I couldn't help thinking that the `Array.prototype.some` callback function, used when determining the generator, was somewhat difficult to read with its partly unused and strangely named parameters.",False
b833f84307d3eb0fdc8a975310746ccb466128e2,2020-01-02 03:32:42,Rob Wu,"Merge pull request #11463 from Snuffleupagus/bug-1606566

[Firefox] Ensure that telemetry will be correctly recorded even when the PDF header is missing (bug 1606566)",True
bee941b0d23ab150cdf503523459b51c700f383a,2020-01-02 02:53:11,Jonas Jenwald,"[Firefox] Ensure that telemetry will be correctly recorded even when the PDF header is missing (bug 1606566)

As suggested in the bug we'll now always fallback to ""other"", which should be fine considering that that value is listed in the histogram definition; see https://searchfox.org/mozilla-central/rev/331f0c3b25089c9a16be65f4dc8c601aeaac8cc4/toolkit/components/telemetry/Histograms.json#9097-9106

Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1606566",False
10716aab59770b168a9c6aff8e588928c0857146,2020-01-01 20:07:49,Tim van der Meij,"Merge pull request #11447 from timvandermeij/css-color-simplifications

Convert all non-RGBA colors to RGBA colors",True
e3c0181357b17af6e67b90668416afde75b657c9,2020-01-01 19:22:37,Tim van der Meij,Convert all six-digit HEX colors to RGBA colors,False
403a994556874fe7fd2fd4b6955f2b887526ff83,2020-01-01 19:22:37,Tim van der Meij,Convert all three-digit HEX colors to RGBA colors,False
d00263740587511143e1fbc676e49d8a9bd11e9a,2020-01-01 19:18:56,Tim van der Meij,Convert all named colors to RGBA colors,False
2c2fc36c54702b205715f4db12f555af9b48125b,2020-01-01 19:18:55,Tim van der Meij,"Normalize all RGBA colors

This is not only useful to have one format for consistency, but also to
be able to quickly search for colors for e.g., finding duplicates or
when tweaking the CSS for custom deployments.",False
dd1c8a914904452cbb4d330b304cc4ee82703157,2020-01-01 19:18:55,Tim van der Meij,Convert all RGB colors to RGBA colors,False
3717dcdf57dc976b323318726c434c2093b9873e,2020-01-01 19:18:55,Tim van der Meij,Convert all HSLA colors to RGBA colors,False
0bdb1ab202e5bb482339c7b9e9335148b134f4cf,2019-12-29 01:24:57,Tim van der Meij,Convert all HSL colors to RGBA colors,False
3b448611974cf896775c51b47207a10b9707a955,2019-12-29 01:05:44,Tim van der Meij,"Merge pull request #11455 from Snuffleupagus/update-packages

Update `npm` packages and l10n files",True
cac953f5a9aa40216a95a662a394d5daae110149,2019-12-29 00:30:03,Jonas Jenwald,Update l10n files,False
05129deb004f72172e3ba1b22b8df90ec4b6cc74,2019-12-29 00:27:25,Jonas Jenwald,Update `npm` packages,False
a0fe7a77d60e50dc402125d792ba1471ab6d7731,2019-12-28 18:07:36,Tim van der Meij,"Merge pull request #11454 from Snuffleupagus/move-SegoeUISymbol

Move the SegoeUISymbol font to the `getNonStdFontMap` (PR 8698 follow-up)",True
f8ab8c4d3a1cab238f421fb560a361bf6fb91e2a,2019-12-28 15:32:49,Jonas Jenwald,"Move the SegoeUISymbol font to the `getNonStdFontMap` (PR 8698 follow-up)

For reasons that I now cannot even begin to understand, the non-standard SegoeUISymbol font was placed in the `getStdFontMap`. That honestly makes no sense, hence this patch which does what I *should* have done from the start.",False
47ab4b839f6c16ff022c7152417950627d796cee,2019-12-27 16:42:51,Tim van der Meij,"Merge pull request #11450 from Snuffleupagus/eslint-web-prefer-const

Enable the ESLint `prefer-const` rule in the `web/` directory",True
d9a5d50664f0045a4110387a42d157a14404074e,2019-12-27 05:33:58,Jonas Jenwald,"Fix remaining linting errors, from enabling the `prefer-const` ESLint rule in the `web/` directory

This covers the handful of cases that the `--fix` command couldn't deal with, and the changes aren't just fixing the linting errors but attempt to slightly improve the relevant code.",False
5d14e68bec84a82d20ccd81afeb2e86c85984075,2019-12-27 05:33:58,Jonas Jenwald,"Enable the ESLint `prefer-const` rule in the `web/` directory

Please find additional details about the ESLint rule at https://eslint.org/docs/rules/prefer-const

Note that this patch is generated automatically, by using the ESLint `--fix` argument, and will thus require some additional clean-up (which is done separately).",False
9c767e38752fa01552501bd9278a5081f6875063,2019-12-27 05:23:51,Tim van der Meij,"Merge pull request #11449 from Snuffleupagus/AutoPrintRegExp

Move the regular expression, used with auto printing in the viewer, to `web/ui_utils.js` and also use it in the API unit-tests",True
d9d856020fd80eb7b1a8731966d2ca9f56723bc2,2019-12-27 05:08:28,Jonas Jenwald,"Move the regular expression, used with auto printing in the viewer, to `web/ui_utils.js` and also use it in the API unit-tests

Rather than having a copy of this regular expression in the `test/unit/api_spec.js` file, with a comment about keeping it up-to-date with the code in the viewer (note the incorrect file reference as well), we can just import it instead to simplify all of this.",False
db8fcdf34ae22b19f026a43c46b7807f01b9ab98,2019-12-27 04:49:42,Tim van der Meij,"Merge pull request #11445 from timvandermeij/openaction-print-unit-test

Include a unit test for OpenAction dictionaries without `Type` entries (PR 11443 follow-up)",True
dfe42a5ca48e8a2da9a8ade4c14ffa3bee746e4e,2019-12-27 04:35:51,Tim van der Meij,"Include a unit test for OpenAction dictionaries without `Type` entries (PR 11443 follow-up)

The original issue did not contain a (reduced) test case that we could
include and linked test cases are not ideal for unit tests, so the
original PR could only be verified manually.

I found this a bit unfortunate considering that the print data is
exposed through the API, so I thought about how we could have an
automated test and managed to create a reduced test case with the
OpenAction dictionary from the file in the original issue.

Therefore, this commit includes a unit test for parsing OpenAction
dictionaries without `Type` entries. I verified that this PDF file
behaves the same as the original one, i.e., no print dialog is shown for
older viewers and the print dialog is shown for the most recent viewer.",False
81af207428b2fafdf4373ad6d2689928f72ee2d6,2019-12-27 04:05:56,Tim van der Meij,"Merge pull request #11446 from Snuffleupagus/prettier

Enable auto-formatting of the entire code-base using Prettier (issue 11444)",True
a63f7ad486f0aa9d0bb109eff2ac9440c4d4fcc2,2019-12-26 17:05:12,Jonas Jenwald,"Fix the linting errors, from the Prettier auto-formatting, that ESLint `--fix` couldn't handle

This patch makes the follow changes:
 - Remove no longer necessary inline `// eslint-disable-...` comments.
 - Fix `// eslint-disable-...` comments that Prettier moved down, thus causing new linting errors.
 - Concatenate strings which now fit on just one line.
 - Fix comments that are now too long.
 - Finally, and most importantly, adjust comments that Prettier moved down, since the new positions often is confusing or outright wrong.",False
de36b2aabab2b7fd647d9591f959c4540129541d,2019-12-26 17:04:24,Jonas Jenwald,"Enable auto-formatting of the entire code-base using Prettier (issue 11444)

Note that Prettier, purposely, has only limited [configuration options](https://prettier.io/docs/en/options.html). The configuration file is based on [the one in `mozilla central`](https://searchfox.org/mozilla-central/source/.prettierrc) with just a few additions (to avoid future breakage if the defaults ever changes).

Prettier is being used for a couple of reasons:

 - To be consistent with `mozilla-central`, where Prettier is already in use across the tree.

 - To ensure a *consistent* coding style everywhere, which is automatically enforced during linting (since Prettier is used as an ESLint plugin). This thus ends ""all"" formatting disussions once and for all, removing the need for review comments on most stylistic matters.

Many ESLint options are now redundant, and I've tried my best to remove all the now unnecessary options (but I may have missed some).
Note also that since Prettier considers the `printWidth` option as a guide, rather than a hard rule, this patch resorts to a small hack in the ESLint config to ensure that *comments* won't become too long.

*Please note:* This patch is generated automatically, by appending the `--fix` argument to the ESLint call used in the `gulp lint` task. It will thus require some additional clean-up, which will be done in a *separate* commit.

(On a more personal note, I'll readily admit that some of the changes Prettier makes are *extremely* ugly. However, in the name of consistency we'll probably have to live with that.)",False
8ec1dfde49dfa5278defb841f53a4bef10448bf8,2019-12-26 04:44:03,Jonas Jenwald,"Add `// prettier-ignore` comments to prevent re-formatting of certain data structures

There's a fair number of (primarily) `Array`s/`TypedArray`s whose formatting we don't want disturb, since in many cases that would lead to the code becoming much more difficult to read and/or break existing inline comments.

*Please note:* It may be a good idea to look through these cases individually, and possibly re-write some of the them (especially the `String` ones) to reduce the need for all of these ignore commands.",False
c3a1c679500e1e4cfa13291f2bcd58ebbba2eb14,2019-12-25 03:47:37,Tim van der Meij,"Merge pull request #11443 from Snuffleupagus/issue-11442

Support OpenAction dictionaries without `Type` entries when parsing `Print` actions (issue 11442)",True
11b56ad0f7f741a5db116605fdf1f4bfffdc8534,2019-12-25 03:14:31,Tim van der Meij,"Merge pull request #11423 from Snuffleupagus/bug-1605526

Ignore Metadata entries with incorrectly encoded characters, when setting the viewer title (bug 1605526)",True
c54bdab4aa012cb573f083fbe221ba463e01d143,2019-12-25 00:13:42,Tim van der Meij,"Merge pull request #11432 from wojtekmaj/preferences-const

Use const in perferences.js",True
0f641e66cc41d9f04061ca136b33ccbc76db6c18,2019-12-25 00:01:34,Tim van der Meij,"Merge pull request #11433 from wojtekmaj/pdf-thumbnail-viewer-const

Use const in pdf_thumbnail_viewer.js",True
70e3345cb419b5b319c82ffb1222aa990ec13aec,2019-12-24 15:11:33,Jonas Jenwald,"Support OpenAction dictionaries without `Type` entries when parsing `Print` actions (issue 11442)

The PDF generator didn't bother including the `Type` entry in the OpenAction dictionary, hence we skipped parsing the `Print` action.",False
1a708d8993ae5235fb3a9903a40d3e257d70bd5c,2019-12-24 04:39:51,Tim van der Meij,"Merge pull request #11430 from wojtekmaj/text-layer-builder-const

Use const in text_layer_builder.js",True
a6188a5c9835e645cb0bd3ebbd8bc8b7bac42445,2019-12-24 04:33:58,Tim van der Meij,"Merge pull request #11431 from wojtekmaj/secondary-toolbar-const

Use const in secondary_toolbar.js",True
bcf8ae3527cbb0ed5a275d69c5823fda82dcb7a0,2019-12-24 04:25:34,Tim van der Meij,"Merge pull request #11437 from wojtekmaj/create-headers

Extract & use createHeaders helper",True
32c3434c311000c02718c46f4ca5080e757412c3,2019-12-24 04:14:55,Tim van der Meij,"Merge pull request #11440 from Snuffleupagus/stats-pdfBug-tweak-test

Tweak the ""gets page stats after rendering page, with `pdfBug` set"" unit-test to remove an intermittent failure on Travis",True
934d7cbc236f38170ceb99c34dfc470f0e650931,2019-12-24 04:11:25,Tim van der Meij,"Merge pull request #11436 from wojtekmaj/npm-audit-fix

Update webpack-stream to fix vulnerabiliy reported by npm and dedupe Webpack",True
b4d95f37631c43d1d37bce3db8d2a18d9e577daa,2019-12-24 03:37:02,Jonas Jenwald,"Tweak the ""gets page stats after rendering page, with `pdfBug` set"" unit-test to remove an intermittent failure on Travis

I recently noticed a couple of intermittent failures on Travis, hence this patch which changes the expectation to be identical to the 'Page Request' check in the preceding test-case.",False
b5281e56c8135d47bf48251bcd6e6984f98e7d02,2019-12-24 03:12:06,Tim van der Meij,"Merge pull request #11429 from wojtekmaj/toolbar-const

Use const in toolbar.js",True
47c1f625f3894638a505606f89b2f1072990239b,2019-12-24 03:08:26,Tim van der Meij,"Merge pull request #11428 from wojtekmaj/ui-utils-const

Use const in ui_utils.js",True
8638b0c88a3bacff92057270bcf225a9568c2ab4,2019-12-24 03:03:11,Tim van der Meij,"Merge pull request #11427 from wojtekmaj/view-history-const

Use const in view_history.js",True
2de0447e6361bc1bbe45dde12489949ef7228888,2019-12-24 02:59:15,Tim van der Meij,"Merge pull request #11426 from wojtekmaj/viewer-const

Use const in viewer.js",True
d96d8c55e11aeeb53f17d59f8834532b5286f184,2019-12-24 02:55:30,Tim van der Meij,"Merge pull request #11425 from wojtekmaj/viewer-compatibility-const

Use const in viewer_compatibility.js",True
0330d1d286a67104da2e95a75c80bd93d0e4de6b,2019-12-23 13:30:45,Wojciech Maj,"Update webpack-stream to fix vulnerabiliy reported by npm

https://npmjs.com/advisories/1084

webpack-stream between 4.0.3 and 5.0.0 added official support for Webpack 4. Which is nice since we ARE using Webpack 4... Also, dropped support for Node.js 4 which shouldn't be a big deal for us since we are already using packages that are incompatible with Node.js 4 (Webpack 4.x supports Node.js 6 and up).",False
d40d33682bc1f903f029a4b9be58ecd85b1054d1,2019-12-23 12:38:17,Wojciech Maj,Extract & use createHeaders helper in src/display/fetch_stream.js,False
74e442ef4c43f82ba6945cf1795b722e1ff5122e,2019-12-23 12:37:12,Wojciech Maj,Use const in pdf_thumbnail_viewer.js,False
de6982e58e50fbe860a801023c26d9009dc2e96d,2019-12-23 12:36:01,Wojciech Maj,Use const in preferences.js,False
5ea91273918423d844475a52d16924f5eafb2869,2019-12-23 12:34:56,Wojciech Maj,Use const in secondary_toolbar.js,False
8a8f75cf68ae2c0e5ff8b3eee8b53f826089a913,2019-12-23 12:34:35,Wojciech Maj,Use const in text_layer_builder.js,False
790b0aede6d328a6a2b8c4ea786951e0c2b96a99,2019-12-23 12:34:13,Wojciech Maj,Use const in toolbar.js,False
cf5af97b0240a95dfbd0a5e7e3425ce60ee7350c,2019-12-23 12:33:12,Wojciech Maj,Use const in view_history.js,False
276631db30c3f22d4f97e2340330d4675d879c3f,2019-12-23 12:32:42,Wojciech Maj,Use const in viewer.js,False
b777e775f4865222d24281ca51724ac3f210b6a2,2019-12-23 12:32:19,Wojciech Maj,Use const in viewer_compatibility.js,False
cd03fe014d0fcf039e506f5f0bcf457ceae60513,2019-12-23 12:30:15,Wojciech Maj,Use const in ui_utils.js,False
ad0b0d60a5bb1f3d90fa170d55c8522cb2eeb9e8,2019-12-22 21:50:14,Jonas Jenwald,"Ignore Metadata entries with incorrectly encoded characters, when setting the viewer title (bug 1605526)

Apparently Ghostscript can, in some cases, generate/include `Metadata` with incorrectly encoded characters.[1] This results in the viewer title looking wrong, which we thus attempt to avoid by falling back to the `Info` entry instead.

*Please note:* Obviously it would be better if this was fixed in the `Metadata` parser instead, rather than using a viewer work-around, but I'm just not sure how or even *if* that could actually be done given that the `Metadata` stream contains no trace of the *original* character.

Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1605526

---
[1] The problematic characters are from the Specials Unicode block, see https://en.wikipedia.org/wiki/Specials_(Unicode_block)",False
eeaea8529472b9610e17f72b1d0e63bd2e069d20,2019-12-21 23:29:17,Jonas Jenwald,"Re-factor how the viewer title is determined, based on the `Info`/`Metadata` data

With these changes we'll always set the `pdfTitle` to the `Info` dictionary entry *first* (assuming it exists and isn't empty), before attempting to override it with the `Metadata` stream entry (assuming it exists, is non-empty *and* valid).

There should be no functional changes with this patch, but it will simplify the following patch somewhat.",False
6316b2a195654ee93b7f1952490aa2a7c4a24cc7,2019-12-21 18:07:22,Tim van der Meij,"Merge pull request #11422 from Snuffleupagus/issue-10768

Use the `strict` mode `assert` in the pdf2png Node.js example (issue 10768)",True
04df367ab644802246f4ecca7fcad67eb57b59b6,2019-12-21 17:54:51,Tim van der Meij,"Merge pull request #11418 from Snuffleupagus/simplify-fakeWorkerLoader

[api-minor] Simplify the *fallback* fake worker loader code in `src/display/api.js`",True
3783eccfa41d1f7f986c3d79462650b69ea777c3,2019-12-21 17:54:13,Jonas Jenwald,"Use the `strict` mode `assert` in the pdf2png Node.js example (issue 10768)

See https://nodejs.org/api/assert.html#assert_strict_mode",False
d370037618211c8642dd3c576edbc2d2b3d6e09e,2019-12-20 22:06:10,Jonas Jenwald,"[api-minor] Tweak the Node.js fake worker loader to prevent `Critical dependency: ...` warnings from Webpack

Since bundlers, such as Webpack, cannot be told to leave `require` statements alone we are thus forced to jump through hoops in order to prevent these warnings in third-party deployments of the PDF.js library; please see [Webpack issue 8826](https://github.com/webpack/webpack) and libraries such as [require-fool-webpack](https://github.com/sindresorhus/require-fool-webpack).

*Please note:* This is based on the assumption that code running in Node.js won't ever be affected by e.g. Content Security Policies that prevent use of `eval`. If that ever occurs, we should revert to a normal `require` statement and simply document the Webpack warnings instead.",False
8519f87efb3a24b1a8a9f03e2e8d0728a7cd642d,2019-12-20 22:06:10,Jonas Jenwald,"Re-factor the `setupFakeWorkerGlobal` function (in `src/display/api.js`), and the `loadFakeWorker` function (in `web/app.js`)

This patch reduces some duplication, by moving *all* fake worker loader code into the `setupFakeWorkerGlobal` function. Furthermore, the functions are simplified further by using `async`/`await` where appropriate.",False
a5485e1ef7033e3e50b33f95135316ad42a69ed1,2019-12-20 22:06:10,Jonas Jenwald,"[api-minor] Support loading the fake worker from `GlobalWorkerOptions.workerSrc` in Node.js

There's no particularily good reason, as far as I can tell, to not support a custom worker path in Node.js environments (even if workers aren't supported). This patch thus make the Node.js fake worker loader code-path consistent with the fallback code-path used with *browser* fake worker loader.

Finally, this patch also deprecates[1] the `fallbackWorkerSrc` functionality, except in Node.js, since the user should *always* provide correct worker options since the fallback is nothing more than a best-effort solution.

---
[1] Although it probably shouldn't be removed until the next major version.",False
591e754831a14ee23f7fb52def761b3ce041700e,2019-12-20 22:06:10,Jonas Jenwald,"Move the fake worker loader code into the `PDFWorkerClosure`

Given that this code isn't needed ""globally"" in the file, it seems reasonable to move it to where it's actually used instead.",False
aab0f917406bf78117829c449ab9f12bf0704134,2019-12-20 22:06:08,Jonas Jenwald,"[api-minor] Simplify the *fallback* fake worker loader code in `src/display/api.js`

For performance reasons, and to avoid hanging the browser UI, the PDF.js library should *always* be used with web workers enabled.
At this point in time all of the supported browsers should have proper worker support, and Node.js is thus the only environment where workers aren't supported. Hence it no longer seems relevant/necessary to provide, by default, fake worker loaders for various JS builders/bundlers/frameworks in the PDF.js code itself.[1]

In order to simplify things, the fake worker loader code is thus simplified to now *only* support Node.js usage respectively ""normal"" browser usage out-of-the-box.[2]

*Please note:* The officially intended way of using the PDF.js library is with workers enabled, which can be done by setting `GlobalWorkerOptions.workerSrc`, `GlobalWorkerOptions.workerPort`, or manually providing a `PDFWorker` instance when calling `getDocument`.

---
[1] Note that it's still possible to *manually* disable workers, simply my manually loading the built `pdf.worker.js` file into the (current) global scope, however this's mostly intended for testing/debugging purposes.

[2] Unfortunately some bundlers such as Webpack, when used with third-party deployments of the PDF.js library, will start to print `Critical dependency: ...` warnings when run against the built `pdf.js` file from this patch. The reason is that despite the `require` calls being protected by *runtime* `isNodeJS` checks, it's not possible to simply tell Webpack to just ignore the `require`; please see [Webpack issue 8826](https://github.com/webpack/webpack) and libraries such as [require-fool-webpack](https://github.com/sindresorhus/require-fool-webpack).",False
693240cf06dfde191532450837828f67691f5a9f,2019-12-20 04:21:55,Tim van der Meij,"Merge pull request #11415 from Snuffleupagus/update-packages

Update `npm` packages and l10n files",True
93865445558a177c997f4a4da40e266c44a59223,2019-12-19 16:00:57,Jonas Jenwald,Update l10n files,False
be43001b293adf4b93544181b5893096dd70064b,2019-12-19 15:58:13,Jonas Jenwald,Update `npm` packages,False
cf3f342373d56081e957d3add002777005d5b8d0,2019-12-19 03:09:48,Tim van der Meij,"Merge pull request #11413 from Snuffleupagus/gulp-npm-test

Re-factor the `npm test` command, used by Travis, to avoid running the 'default_preferences' tasks concurrently (issue 10732)",True
f406263fc262ee00cb6b0e3bcd5b277fb4c020a9,2019-12-19 02:13:09,Jonas Jenwald,"Re-factor the `npm test` command, used by Travis, to avoid running the 'default_preferences' tasks concurrently (issue 10732)

*Please note:* This patch does *not* prevent the 'default_preferences' task from running more than once during `npm test`, but it does ensure that the tasks won't run *concurrently* by running the relevant tests in *series*.

While it would obviously still make sense to re-factor the gulpfile to account for changes in `gulp` version 4, by at least tweaking the `npm test` command the intermittent failures on Travis should at least go away.",False
7ceb394c43de99e7c444141e0bd7abfa12ecb772,2019-12-15 21:15:53,Tim van der Meij,"Merge pull request #11380 from Snuffleupagus/PDFHistory-reset

Add a `reset` method to the `PDFHistory` implementation",True
e09fe7226d44eb905e5a03f02cffc96d723d8732,2019-12-15 20:56:42,Tim van der Meij,"Merge pull request #11406 from Snuffleupagus/find-scanBytes

Re-factor the `find` helper function, in `src/core/document.js`, to search through the raw bytes rather than a string",True
dbb82f05fc6824b428bd295beab211c1bca60f7f,2019-12-14 18:13:26,Jonas Jenwald,"Re-factor the `find` helper function, in `src/core/document.js`, to search through the raw bytes rather than a string

During initial parsing of every PDF document we're currently creating a few `1 kB` strings, in order to find certain commands needed for initialization.
This seems inefficient, not to mention completely unnecessary, since we can just as well search through the raw bytes directly instead (similar to other parts of the code-base). One small complication here is the need to support backwards search, which does add some amount of ""duplication"" to this function.

The main benefits here are:
 - No longer necessary to allocate *temporary* `1 kB` strings during initial parsing, thus saving some memory.
 - In practice, for well-formed PDF documents, the number of iterations required to find the commands are usually very low. (For the `tracemonkey.pdf` file, there's a *total* of only 30 loop iterations.)",False
8b35bba3479ec2cfe6e6af587b88b6d7efbf7784,2019-12-14 04:07:11,Tim van der Meij,"Merge pull request #11407 from mozilla/dependabot/npm_and_yarn/npm-6.13.4

Bump npm from 6.13.0 to 6.13.4",True
80d7b4d8ab393f5b45057d3b7779c6d10763ab0a,2019-12-13 23:00:33,dependabot[bot],"Bump npm from 6.13.0 to 6.13.4

Bumps [npm](https://github.com/npm/cli) from 6.13.0 to 6.13.4.
- [Release notes](https://github.com/npm/cli/releases)
- [Changelog](https://github.com/npm/cli/blob/latest/CHANGELOG.md)
- [Commits](https://github.com/npm/cli/compare/v6.13.0...v6.13.4)

Signed-off-by: dependabot[bot] <support@github.com>",False
1fab63724776ce65cf22d90f1f348e1317d0b811,2019-12-13 15:08:39,Jonas Jenwald,"Prevent `if (!state || false) {` in the output, in `PDFHistory._popState`, for e.g. MOZCENTRAL builds

By re-ordering the condition, which includes a `PDFJSDev` check, we can avoid meaningless output in the built files.",False
c5f2f870cb9343993ddabdff0fb2fb6132cddf1c,2019-12-13 15:08:39,Jonas Jenwald,"Move the `parseCurrentHash` helper function into `PDFHistory`

Looking at the `parseCurrentHash` function again it's now difficult for me to understand *what* I was thinking, since having a helper function that needs to be manually passed a `linkService` reference just looks weird.",False
d621899d50f82debdac16c1b71fd478badb8f5db,2019-12-13 15:08:39,Jonas Jenwald,"Add a `reset` method to the `PDFHistory` implementation

This patch addresses a couple of smaller issues with the `PDFHistory` class:
 - Most, if not all, other viewer components can be reset in one way or another, and there's no good reason for the `PDFHistory` implementation to be different here.

 - Currently it's (technically) possible to keep adding entries to the browser history, via the `PDFHistory` instance, even after the document has been closed. That obviously makes no sense, and is caused by the lack of a `reset` method.

 - The internal `this._isPagesLoaded` property was never actually reset, which would lead to it being temporarily wrong when a new document was opened in the default viewer.",False
903bf177cbbe02ea833281c6fe891dedee5e72ef,2019-12-12 04:35:58,Tim van der Meij,"Merge pull request #11404 from Snuffleupagus/global-ReadableStream

[api-minor] Move the `ReadableStream` polyfill to the global scope",True
e24050fa137b6696dc8b5b38ef820fdca7dcad05,2019-12-11 23:32:37,Jonas Jenwald,"[api-minor] Move the `ReadableStream` polyfill to the global scope

Note that most (reasonably) modern browsers have supported this for a while now, see https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream#Browser_compatibility

By moving the polyfill into `src/shared/compatibility.js` we can thus get rid of the need to manually export/import `ReadableStream` and simply use it directly instead.

The only change here which *could* possibly lead to a difference in behavior is in the `isFetchSupported` function. Previously we attempted to check for the existence of a global `ReadableStream` implementation, which could now pass (assuming obviously that the preceding checks also succeeded).
However I'm not sure if that's a problem, since the previous check only confirmed the existence of a native `ReadableStream` implementation and not that it actually worked correctly. Finally it *could* just as well have been a globally registered polyfill from an application embedding the PDF.js library.",False
af4ba75f6810126b55c12a1f0f37a874190b78a1,2019-12-10 02:38:08,Tim van der Meij,"Merge pull request #11398 from Snuffleupagus/issue-5887

Attempt to improve the `PDFDocument` error message for empty files (issue 5887)",True
b00835f58922705c9d1898d00baf2d9bde4e44c3,2019-12-09 20:15:50,Jonas Jenwald,"Attempt to improve the `PDFDocument` error message for empty files (issue 5887)

Given that the error in question is surfaced on the API-side, this patch makes the following changes:
 - Updates the wording such that it'll hopefully be slightly easier for users to understand.
 - Changes the plain `Error` to an `InvalidPDFException` instead, since that should work better with the existing Error handling.
 - Adds a unit-test which loads an empty PDF document (and also improves a pre-existing `InvalidPDFException` message and its test-case).",False
a6db0457893b7bc960d63a8aa07b9091ddea84e0,2019-12-09 00:57:46,Tim van der Meij,"Merge pull request #11387 from Snuffleupagus/issue-11385

Handle corrupt ASCII85Decode inline images with truncated EOD markers (issue 11385)",True
16778118f66f1c8971349cafe19938e4a40bde86,2019-12-09 00:53:19,Tim van der Meij,"Merge pull request #11391 from Snuffleupagus/globalThis

Replace `globalScope` with the standard `globalThis` property instead",True
71d61e4c6fc74d94c2cdd6d6b522697c92777504,2019-12-09 00:49:04,Jonas Jenwald,"Re-factor `getMainThreadWorkerMessageHandler` to support arbitrary global scopes, rather than only `window`",False
a8fc306b6e1d78eac43d841713c9dc5281a9ca3e,2019-12-09 00:49:02,Jonas Jenwald,"Replace `globalScope` with the standard `globalThis` property instead

Please see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis and note that most (reasonably) modern browsers have supported this for a while now, see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis#Browser_compatibility

Since ESLint doesn't support this new global yet, it was added to the `globals` list in the top-level configuration file to prevent issues.

Finally, for older browsers a polyfill was added in `ssrc/shared/compatibility.js`.",False
07212bf5f2d5ec10368888fb01aa90fd378c7228,2019-12-09 00:43:00,Tim van der Meij,"Merge pull request #11390 from Snuffleupagus/checkFirstPage-await-cleanup

Ensure that `PDFDocument.checkFirstPage` waits for cleanup to complete (PR 10392 follow-up)",True
7b503c89239cbf9dced03f891c76b1fa4f6400e4,2019-12-09 00:25:43,Tim van der Meij,"Merge pull request #11388 from Snuffleupagus/rm-PDFPresentationMode-viewer-option

Remove the `viewer` option from the `PDFPresentationMode` constructor",True
3d549f12fa6bf2a82096a0d02f3404b18170ec59,2019-12-09 00:22:48,Tim van der Meij,"Merge pull request #11382 from Snuffleupagus/pr-10217-follow-up

Fix an incorrect condition in `BaseViewer.isPageVisible` (PR 10217 follow-up)",True
a02122e984b6c12e80b21dafc281d644b0424be9,2019-12-07 17:01:41,Jonas Jenwald,"Ensure that `PDFDocument.checkFirstPage` waits for cleanup to complete (PR 10392 follow-up)

Given how this method is currently used there shouldn't be any fonts loaded at the point in time where it's called, but it does seem like a bad idea to assume that that's always going to be the case. Since `PDFDocument.checkFirstPage` is already asynchronous, it's easy enough to simply await `Catalog.cleanup` here.

(The patch also makes a tiny simplification in a loop in `Catalog.cleanup`.)",False
1c466b4648bed22f5720561e0da6b8ecc8dd65af,2019-12-06 04:50:56,Jonas Jenwald,"Remove the `viewer` option from the `PDFPresentationMode` constructor

The `viewer` option was *only* used for checking that a document is loaded in `PDFPresentationMode.request`, however that's just as easy to do by simply utilizing `BaseViewer.pagesCount` instead and this way we can also avoid the DOM lookup.",False
5c0336872e02a71f4a92664eaa9d8e23e681f9b7,2019-12-05 20:23:18,Jonas Jenwald,"Handle corrupt ASCII85Decode inline images with truncated EOD markers (issue 11385)

In the PDF document in question, there's an ASCII85Decode inline image where the '>' part of EOD (end-of-data) marker is missing; hence the PDF document is corrupt.",False
06b1f619c6ca1b10c14e1ea96bb56515fb347083,2019-12-04 18:08:07,Jonas Jenwald,"Fix an incorrect condition in `BaseViewer.isPageVisible` (PR 10217 follow-up)

This was a blatant oversight in PR 10217, since there's obviously no `this.pageNumber` property anywhere in the `BaseViewer`. Luckily this shouldn't have caused any bugs, since the only call-site is also validating the `pageNumber` (but correctly that time).",False
514b500a6ce8f983385ea3b50b982ad43b1ff111,2019-12-01 18:04:36,Tim van der Meij,"Merge pull request #11374 from Snuffleupagus/set-first-pdfPage

Set the first `pdfPage` immediately in `{BaseViewer, PDFThumbnailViewer}.setDocument`",True
ded56f2fe4594b1279da6788fe8dd19726f6e4ff,2019-12-01 17:53:53,Tim van der Meij,"Merge pull request #11373 from Snuffleupagus/fetch-cacheMap-rm-has

Slightly simplify the XRef cache lookup in `XRef.fetch`",True
6732df6aaeba5b838a36f9fb67ede7fa7fb52c22,2019-12-01 17:09:55,Jonas Jenwald,"Set the first `pdfPage` immediately in `{BaseViewer, PDFThumbnailViewer}.setDocument`

*This patch is simple enough that I almost feel like I'm overlooking some trivial reason why this would be a bad idea.*

Note how in `{BaseViewer, PDFThumbnailViewer}.setDocument` we're always getting the *first* `pdfPage` in order to initialize all pages/thumbnails.
However, once that's done the first `pdfPage` is simply ignored and rendering of the first page thus requires calling `PDFDocumentProxy.getPage` yet again. (And in the `BaseViewer` case, it's even done once more after `onePageRenderedCapability` is resolved.)

All in all, I cannot see why we cannot just immediately set the first `pdfPage` and thus avoid an early round-trip to the API in the `_ensurePdfPageLoaded` method before rendering can begin.",False
c3b1c8f85731ef8cec628358f34f368c97a340f4,2019-12-01 03:11:53,Jonas Jenwald,"Slightly simplify the XRef cache lookup in `XRef.fetch`

Note that the XRef cache will only hold objects returned through `Parser.getObj`, and indirectly via `Lexer.getObj`. Since neither of those methods will ever return `undefined`, we can simply `assert` that when inserting objects into the cache and thus get rid of one function call when doing cache lookups.

Obviously this won't have a huge effect on performance, however `XRef.fetch` is usually called *a lot* in larger documents and this patch thus cannot hurt.",False
62ec8109b50bf33047d415419b6f0e0b739c8d5d,2019-11-30 19:26:47,Tim van der Meij,"Merge pull request #11370 from Snuffleupagus/fetchCompressed-isStream

Stop caching Streams in `XRef.fetchCompressed`",True
168c6aecae30243732f23949216dd4e46ca43f3d,2019-11-30 14:51:08,Jonas Jenwald,"Stop caching Streams in `XRef.fetchCompressed`

I'm slightly surprised that this hasn't actually caused any (known) bugs, but that may be more luck than anything else since it fortunately doesn't seem common for Streams to be defined inside of an 'ObjStm'.[1]

Note that in the `XRef.fetchUncompressed` method we're *not* caching Streams, and that for very good reasons too.

 - Streams, especially the `DecodeStream` ones, can become *very* large once read. Hence caching them really isn't a good idea simply because of the (potential) memory impact of doing so.

 - Attempting to read from the *same* Stream more than once won't work, unless it's `reset` in between, since using any method such as e.g. `getBytes` always starts at the current data position.

 - Given that even the `src/core/` code is now fairly asynchronous, see e.g. the `PartialEvaluator`, it's generally impossible to assert that any one Stream isn't being accessed ""concurrently"" by e.g. different `getOperatorList` calls. Hence `reset`-ing a cached Streams isn't going to work in the general case.

All in all, I cannot understand why it'd ever be correct to cache Streams in the `XRef.fetchCompressed` method.

---
[1] One example where that happens is the `issue3115r.pdf` file in the test-suite, where the streams in question are not actually used for anything within the PDF.js code.",False
06412a557b1ffc5a1341680d125bba9493ec2c99,2019-11-30 14:19:51,Jonas Jenwald,"Slighthly re-factor `XRef.fetchCompressed`

 - Change all occurences of `var` to `let`/`const`.

 - Initialize the (temporary) Arrays with the correct sizes upfront.

 - Inline the `isCmd` check. Obviously this won't make a huge difference, but given that the check is only relevant for corrupt documents it cannot hurt.",False
b0aee6b1f08335c04df8d8872c5019998a0a9955,2019-11-30 02:57:38,Tim van der Meij,"Merge pull request #11363 from Snuffleupagus/fetchUncompressed-isInteger-checks

Remove the `Number.isInteger` checks from `XRef.fetchUncompressed` (PR 8857 follow-up)",True
725566cfeabe2347b3f17af1f95285f40d1d2c08,2019-11-29 03:55:39,Jonas Jenwald,"Remove the `Number.isInteger` checks from `XRef.fetchUncompressed` (PR 8857 follow-up)

Having ran the entire test-suite locally with these `Number.isInteger` checks removed, there wasn't a single test failure anywhere; see also PR 8857.
Hence everything points to this being completely unnecessary now, and by removing this code there's thus fewer function calls being made in `XRef.fetchUncompressed`.",False
dcf998a1c1737be3d14b68f378a18ea32df2cbe7,2019-11-26 02:54:54,Tim van der Meij,"Merge pull request #11356 from Snuffleupagus/rm-wrong-PDFDocument-comment

Remove outdated, and misleading, JSDoc comment from the `PDFDocument` class",True
cc76132c2426cc26b0493b6ff6624980882609f1,2019-11-25 16:06:29,Jonas Jenwald,"Remove outdated, and misleading, JSDoc comment from the `PDFDocument` class

The contents of this comment hasn't been correct for *years*, ever since the library was properly split into main/worker-threads, so it's probably high time for this to be updated.",False
827eb64b75f8d0c3b4203202a7cf15c7cbd2ce26,2019-11-23 18:33:51,Tim van der Meij,"Merge pull request #11354 from Snuffleupagus/eslint-more-rules

Enable the `getter-return`, `no-dupe-else-if`, and `no-setter-return` ESLint rules",True
1319c9f13b3bdfeed702df413b990cd59ebac444,2019-11-23 16:32:31,Jonas Jenwald,Update l10n files,False
a965662184e1e13e5a17922f639fae53f196423f,2019-11-23 16:10:30,Jonas Jenwald,"Enable the `getter-return`, `no-dupe-else-if`, and `no-setter-return` ESLint rules

All of these rules can help catch errors during development. Please note that only `getter-return` required a few changes, which was limited to disabling the rule in a couple of spots; please find additional details about these rules at:
 - https://eslint.org/docs/rules/getter-return
 - https://eslint.org/docs/rules/no-dupe-else-if
 - https://eslint.org/docs/rules/no-setter-return",False
b8f0cf0bc076716010c879d71c9da53214865281,2019-11-23 15:55:24,Jonas Jenwald,Update `npm` packages,False
2feb3170bf4f6955ecae31260fdbfeea5199c30f,2019-11-23 03:32:34,Tim van der Meij,"Merge pull request #11325 from smohtadi/custom-file-transform

Added custom file transform function",True
79aa936f33aa8affff6ed1c1333381bdab6a2f20,2019-11-23 03:24:55,Tim van der Meij,"Merge pull request #11353 from Snuffleupagus/rm-attachEvent

Remove `document.attachEvent` code from `web/pdf_print_service.js` since it's only necessary for old IE versions",True
e09310d7a450bfff4ff2b03e828a90b6eecfa8ba,2019-11-22 18:16:44,Jonas Jenwald,"Remove `document.attachEvent` code from `web/pdf_print_service.js` since it's only necessary for old IE versions

This code was originally added to support IE10 (and below), however with those browsers *explicitly* unsupported since PDF.js version `2.0` this code is now dead.",False
96c595411a476995420ff828ebc974c49efe1b45,2019-11-22 04:11:54,Tim van der Meij,"Merge pull request #11350 from Snuffleupagus/_pagesRequests-WeakMap

Convert `{BaseViewer, PDFThumbnailViewer}._pagesRequests` from an Array to a WeakMap",True
0f737582225cb768860c499492d86d0700760946,2019-11-21 14:08:37,Jonas Jenwald,"Convert `{BaseViewer, PDFThumbnailViewer}._pagesRequests` from an Array to a WeakMap

Obviously the `_pagesRequests` functionality is *mainly* used when `disableAutoFetch` is set, but it will also be used during ranged/streamed loading of documents.
However, the `_pagesRequests` property is currently an Array which seems a bit strange:

 - Arrays are zero-indexed, but the first element will never actually be set in the code.
 - The `_pagesRequests` Array is never cleared, unless a new document is loaded, and once the `PDFDocumentProxy.getPage` call has resolved/rejected the element is just replaced by `null`.
 - Unless the document is browsed *in order* the resulting `_pagesRequests` Array can also be arbitrarily sparse.

All in all, I don't believe that an Array is an appropriate data structure to use for this purpose.",False
ef1cd119083759b20f7f91a6de8732dfa4cbc0f7,2019-11-20 04:29:14,Tim van der Meij,"Merge pull request #11338 from Snuffleupagus/toolbar-buttons-init

Reduce duplication when registering event listeners for the `Toolbar` buttons, and other small clean-up",True
026121286c5f2349b7d878e4cbce180d275365e7,2019-11-20 04:16:51,Tim van der Meij,"Merge pull request #11346 from Snuffleupagus/pageViewsReady-printing

Ensure that attempting to print with `disableAutoFetch` set will fail gracefully (issue 11339)",True
0b0bf71ad0148ed6225f382cb97f6890c1abee09,2019-11-19 16:43:15,Jonas Jenwald,"Ensure that attempting to print with `disableAutoFetch` set will fail gracefully (issue 11339)

This patch simply restores the behaviour that existed prior to PR 7697, since I cannot imagine that that was changed other than by pure accident.
As mentioned by a comment in `BaseViewer.setDocument`: ""Printing is semi-broken with auto fetch disabled."", and note that since triggering of printing is a synchronous operation there's generally no easy way to load the missing data.

https://github.com/mozilla/pdf.js/pull/7697/files#diff-529d1853ee1bba753a0fcb40ea778723L1114-L1118",False
07473e9e2a84b86902972b2f0dbd654aa71ee911,2019-11-17 18:47:47,Jonas Jenwald,"Inline the `Toolbar._localized` method in the 'localized' event handler

Considering just how small/simple this code is, it doesn't seem necessary to have a separate method for it (even more so when there's only one call-site).",False
eaa2e216f4dfe8beaf969b728a76295c3bbeacb8,2019-11-17 18:29:28,Jonas Jenwald,Use `for...of` in a couple of loops in `web/toolbar.js` and `web/secondary_toolbar.js`,False
3edaebbdeded5c385d0ed5a199624462c76c30d8,2019-11-17 18:25:29,Jonas Jenwald,"Reduce duplication when registering event listeners for the `Toolbar` buttons

This uses the same kind of format as is being used in the `SecondaryToolbar` class.",False
be02e679728d86709b31aebc7e89c863512af91a,2019-11-16 18:26:01,Tim van der Meij,"Merge pull request #11335 from Snuffleupagus/issue-11330

Subtract `stream.start` when getting the `startXRef` property for documents with a Linearization dictionary (issue 11330)",True
789c2c6a7e25e6940b96d10b7b39de45e8581535,2019-11-16 18:20:40,Tim van der Meij,"Merge pull request #11334 from Snuffleupagus/FlateStream-readBlock-getBytes

Use `getBytes`, rather than looping over `getByte`, in `FlateStream.prototype.readBlock`",True
9199b02a4250a54d54c2339204f60d6550d8fb89,2019-11-16 13:59:10,Jonas Jenwald,"Subtract `stream.start` when getting the `startXRef` property for documents with a Linearization dictionary (issue 11330)

For documents with a Linearization dictionary the computed `startXRef` position will be relative to the raw file, rather than the actual PDF document itself (which begins with `%PDF-`).
Hence it's necessary to subtract `stream.start` in this case, since otherwise the `XRef.readXRef` method will increment the position too far resulting in parsing errors.",False
688d15526e1254c6c4e1c65d0b4d1c9745792752,2019-11-15 20:15:31,Jonas Jenwald,"Use `getBytes`, rather than looping over `getByte`, in `FlateStream.prototype.readBlock`

*Please note:* A a similar change was attempted in PR 5005, but it was subsequently backed out (in PR 5069) since other parts of the patch caused issues.

With these changes, it's possible to replace repeated function calls within a loop with just a single function call and subsequent assignment instead.",False
fe6d86fb523ea80029bfab35f7b6941dad439116,2019-11-15 04:15:00,smohtadi,"added transform function

added depedencies

removed gulp-transform dependency

removed dependencies

removed gulptransform dependency",False
f7aafcb218cdecb1d1b1401b6640f564bd3993fb,2019-11-12 04:44:00,Tim van der Meij,"Merge pull request #11317 from Snuffleupagus/update-npm-packages

Update npm packages",True
3a05f6fe25860e6b247c3ca5a07dc68fd147e350,2019-11-12 04:39:27,Tim van der Meij,"Merge pull request #11318 from Snuffleupagus/IE-polyfill-pushState-replaceState

[PDFHistory] Move the IE11 `pushState`/`replaceState` work-around to `src/shared/compatibility.js` (PR 10461 follow-up)",True
878432784c35a27dd115ff888a2459df1344da69,2019-11-11 22:18:04,Jonas Jenwald,"[PDFHistory] Move the IE11 `pushState`/`replaceState` work-around to `src/shared/compatibility.js` (PR 10461 follow-up)

I've always disliked the solution in PR 10461, since it required changes to the `PDFHistory` code itself to deal with a bug in IE11.
Now that IE11 support is limited, it seems reasonable to remove these `pushState`/`replaceState` hacks from the main code-base and simply use polyfills instead.",False
f46fd9e306c7a2717a477d9a47846a3cfa04f463,2019-11-11 15:53:17,Jonas Jenwald,"Fix (some) vulnerabilities reported by `npm audit`

This was done automatically, using the `npm audit fix` command.",False
ae4af9ab58889342a3b39d06d409988e6e213eec,2019-11-11 15:52:03,Jonas Jenwald,Update npm packages,False
21895aa75afb9d5a35d987923af241f349a50ea6,2019-11-11 00:13:01,Tim van der Meij,"Merge pull request #11316 from Snuffleupagus/globalScope-isNodeJS-modules

Convert `globalScope` and `isNodeJS` to proper modules",True
74e00ed93c26bdbd439e65478c649315bff50422,2019-11-10 21:14:29,Jonas Jenwald,"Change `isNodeJS` from a function to a constant

Given that this shouldn't change after the `pdf.js`/`pdf.worker.js` files have been loaded, it doesn't seems necessary to keep this as a function.",False
2817121bc1aed742dae3c413e83af2edab686e75,2019-11-10 21:14:29,Jonas Jenwald,"Convert `globalScope` and `isNodeJS` to proper modules

Slightly unrelated to the rest of the patch, but this also removes an out-of-place `globals` definition from the `web/viewer.js` file.",False
c2bd3a0bfbe8ac726ada8da0393d60b829d628ed,2019-11-10 21:02:02,Tim van der Meij,"Merge pull request #11300 from nisarhassan12/master

Simplifies code contributions by automating the dev setup",True
9de05161a78286fe4820f9226a8b86354624404e,2019-11-10 20:15:02,Tim van der Meij,"Merge pull request #11315 from timvandermeij/issue6179_reduced

Include a reduced test case for annotations without a `Border`/`BS` entry (PR 6180 follow-up)",True
6972bbea74648391db9b62a6d4734eff57be0ded,2019-11-10 19:07:42,Tim van der Meij,Include a reduced test case for annotations without a `Border`/`BS` entry (PR 6180 follow-up),False
8c97281b74293954f4c5d0f4edbba055359fdb17,2019-11-10 18:18:47,Tim van der Meij,"Merge pull request #11305 from mgrigis/master

Fix nodejs core module :  ignore url module for web browser",True
6763e1680482b4e91d853445dfd3d9c0f82936e9,2019-11-10 18:01:51,Tim van der Meij,"Merge pull request #11313 from Snuffleupagus/issue-11122

Ensure that Popup annotations, where the parent annotation is a polyline, will always be possible to open/close (issue 11122)",True
c6ee4480f7d3aa5a4ddffccf4ed537905a94007c,2019-11-10 17:35:57,Tim van der Meij,"Merge pull request #11314 from Snuffleupagus/revert-11312-async-getPageDict

Revert ""Convert `Catalog.getPageDict` to an `async` method""",True
0233fc07b6aa1706e1326bb44faf29dded8b7772,2019-11-10 03:06:23,Jonas Jenwald,"Revert ""Convert `Catalog.getPageDict` to an `async` method""",False
536a52e981b522b8614f245bf0b08cdd4c2f159d,2019-11-09 18:05:59,Jonas Jenwald,"Ensure that Popup annotations, where the parent annotation is a polyline, will always be possible to open/close (issue 11122)

For Popup annotation trigger elements consisting of an arbitrary polyline, you need to ensure that the 'stroke-width' is always non-zero since otherwise it's impossible to actually open/close the popup.

Unfortunately I don't believe that any of the test-suites can be used to test this, hence why no tests are included in the patch.",False
b1440a11c157171cf1da4c85be9400f48184b051,2019-11-09 03:08:22,Tim van der Meij,"Merge pull request #11312 from Snuffleupagus/async-getPageDict

Convert `Catalog.getPageDict` to an `async` method",True
79d7c002de2295de821e9aa9150315f9aa7ee186,2019-11-08 22:23:00,Jonas Jenwald,"Inline a couple of `isRef`/`isDict` checks in the `getPageDict` method

As we've seen in numerous other cases, avoiding unnecessary function calls is never a bad thing (even if the effect is probably tiny here).

With these changes we also avoid potentially two back-to-back `isDict` checks when evaluating possible Page nodes, and can also no longer accidentally pick a dictionary with an incorrect /Type.",False
0d89006bf16b7262fe6aceb35557a9b54e3ec396,2019-11-08 22:15:28,Jonas Jenwald,"Convert `Catalog.getPageDict` to an `async` method

This makes it possible to remove the internal `next` helper function, and also gets rid of the need to manually resolve/reject a `PromiseCapability`.",False
668650d564314d76c87665dc9d7e3d2ec6ed7d2f,2019-11-08 04:05:42,Tim van der Meij,"Merge pull request #11308 from Snuffleupagus/abortOperatorList-assert

Prevent browser exceptions from incorrectly triggering the `assert` in `PDFPageProxy._abortOperatorList` (PR 11069 follow-up)",True
98f570c103f95e74062cf1e406b843b869de38c8,2019-11-07 16:07:48,Jonas Jenwald,"Prevent browser exceptions from incorrectly triggering the `assert` in `PDFPageProxy._abortOperatorList` (PR 11069 follow-up)

For certain canvas-related errors (and probably others), the browser rendering exceptions may be propagated ""as-is"" to the PDF.js code. In this case, the exceptions are of the somewhat cryptic `NS_ERROR_FAILURE` type.
Unfortunately these aren't actual `Error`s, which thus ends up unintentionally triggering the `assert` in `PDFPageProxy._abortOperatorList`; sorry about that!",False
b21a341332e9e26e6e8c7a05b45d11ba20d99aa7,2019-11-06 09:42:19,Nisar Hassan Naqvi,Simplifies code contributions by automating the dev setup with gitpod.io,False
4e0b02025fb5c056a272ffada4c220021b04dfab,2019-11-06 03:13:42,Tim van der Meij,"Merge pull request #11307 from Snuffleupagus/stringToPDFString-little-endian

Support UTF-16 little-endian strings in the `stringToPDFString` helper function (bug 1593902)",True
80342e2fdc36fc5d08c663f87c40e378417c4826,2019-11-05 17:13:17,Jonas Jenwald,"Support UTF-16 little-endian strings in the `stringToPDFString` helper function (bug 1593902)

The bug report seem to suggest that we don't support UTF-16 strings with a BOM (byte order mark), which we *actually* do as evident by both the code and a unit-test.
The issue at play here is rather that we previously only supported big-endian UTF-16 BOM, and the `Title` string in the PDF document is using a *little-endian* UTF-16 BOM instead.

Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1593902",False
ba85ce8f8b10492820435edd4b1fc05ee0e5cbcb,2019-11-04 19:46:17,Matthieu grigis,fix nodejs core module : in web browser ignore url module,False
de77d6686c105f759a9334b96094081866b10370,2019-11-04 03:39:05,Tim van der Meij,"Merge pull request #11304 from Snuffleupagus/ObjectLoader-async-_walk

Re-factor the `ObjectLoader._walk` method to be properly asynchronous",True
04497bcb3c8df5a04565ef60a37245d73a17b4e1,2019-11-03 19:34:20,Jonas Jenwald,"Re-factor the `ObjectLoader._walk` method to be properly asynchronous

Rather than having to store a `PromiseCapability` on the `ObjectLoader` instances, we can simply convert `_walk` to be `async` and thus have the same functionality with native JavaScript instead.",False
e7f24bd5b121c9be48a996248a95c9eff870d2d1,2019-11-03 03:42:11,Tim van der Meij,"Merge pull request #11302 from Snuffleupagus/addLinkAttributes-switch-target

Slightly re-factor setting of the link `target` in `addLinkAttributes`",True
fec1f02b2a3319e18076a67af78b2c3f0154089f,2019-11-02 18:31:31,Jonas Jenwald,"Slightly re-factor setting of the link `target` in `addLinkAttributes`

I happened to look at this code and the way that the link target is set seems unecessarily convoluted, since we're using `Object.values` and `Array.prototype.includes` for *every* link being parsed.
Given that the number of link targets are so few, the easist solution honestly seem to be to just use a `switch` statement to do the link target mapping.",False
bbd2386bd9b025d2ea70cd43eec842e674f17437,2019-11-02 03:17:50,Tim van der Meij,"Merge pull request #11296 from Snuffleupagus/parseColorSpace-stopAtErrors

Allow skipping of errors when parsing broken/unsupported ColorSpaces (issue 6707, issue 11287)",True
0eda75c8fd01f264708eb9b3d0121e4d453537ed,2019-11-02 03:12:34,Tim van der Meij,"Merge pull request #11301 from Snuffleupagus/peekByte-eof

Ensure that the `peekByte` methods, on the various Streams, handles end of data correctly (PR 5286 follow-up)",True
829d6ba2dc9f89bd17c5c46448fc10ccc14c2a48,2019-11-01 22:52:33,Jonas Jenwald,"Ensure that the `peekByte` methods, on the various Streams, handles end of data correctly (PR 5286 follow-up)

When the end of data has already been reached for the various Streams, the `getByte` methods will return `-1` to signal that to the caller. Note however that the current position obviously won't be incremented in this case, meaning that the `peekByte` methods will in this case *incorrectly* decrement the position.

Thankfully the corresponding `peekBytes` shouldn't be affected by this bug, since they decrement the current position with the *actually* returned number of bytes.

I'm not aware of any bugs caused by this blatant oversight, but that doesn't mean this shouldn't be fixed :-)",False
835d8c2be50d29c633305e66d2b8ea734af596ab,2019-11-01 13:31:24,Jonas Jenwald,"Allow skipping of errors when parsing broken/unsupported ColorSpaces (issue 6707, issue 11287)

This will allow us to attempt to recover as much as possible of a page, rather than immediately failing, when a broken/unsupported ColorSpace is encountered. This patch thus extends the framework added in PRs such as e.g. 8240 and 8922, to also cover parsing of ColorSpaces.",False
30ef05c16186e9802ed91ae82808149ed5b20832,2019-11-01 04:27:52,Tim van der Meij,"Merge pull request #11290 from Snuffleupagus/MessageHandler-rm-in

[MessageHandler] Re-factor and convert the code to a proper `class`",True
c807637f405e4ac0af450bc73032ff6a066efc2d,2019-11-01 04:17:55,Tim van der Meij,"Merge pull request #11294 from Snuffleupagus/rm-non-PRODUCTION-require

Remove some unused `require` statements, used when loading fake workers, in non-`PRODUCTION` mode",True
eedd449cb430df59d901975f0a87dad79ab18026,2019-10-31 16:38:07,Jonas Jenwald,"Remove some unused `require` statements, used when loading fake workers, in non-`PRODUCTION` mode

The code in question is *only* relevant in non-`PRODUCTION` mode, i.e. the *development* version of the viewer run with `gulp server`, and has been completely unused at least since SystemJS was added.
I really cannot see any reason to keep this, since it's code which first of all isn't shipping and secondly isn't even being used in the development viewer.",False
0293222b9690ff41a0daa50043a6111e889928c2,2019-10-31 03:52:59,Jonas Jenwald,[MessageHandler] Convert the code to a proper `class`,False
5d5733c0a733f52ffbd4ad213870891727542e82,2019-10-31 03:52:59,Jonas Jenwald,[MessageHandler] Convert all instances of `var` to `const` in the code,False
f61fb3e0f926555dd5fd6ecd67d7371a1e6857ff,2019-10-31 03:52:59,Jonas Jenwald,"[MessageHandler] Re-factor the `_onComObjOnMessage` function to use early returns

When `ReadableStream` support was added to the `MessageHandler`, the `_onComObjOnMessage` function became more complex than previously.
All of the nested `if`/`else if`/`else` branches are now, at least in my opinion, making some of this code a bit difficult to follow. Hence this patch, which attempts to help readability by making use of early `return`s and `Error`s.

The patch also changes a couple of `var`/`let` occurences to `const`.",False
62f28e11a3ce8e7f19c0b7d7e4308f4780500e2a,2019-10-31 03:52:59,Jonas Jenwald,"[MessageHandler] Remove unnecessary usage of `in` from the code

Note that using `in` leads to unnecessary stringification of the properties, which seems completely unnecessary here. To avoid future problems from these changes the `MessageHandler.on` method will now assert, in non-`PRODUCTION`/`TESTING` builds, that it's always called with a function as expected.

This patch also renames `callbacksCapabilities` to `callbackCapabilities`, note the removed ""s"", since using a double plural format looks a bit strange.",False
3e46e800a02aa1f7d70f179e70efda95aa3239c1,2019-10-31 03:52:59,Jonas Jenwald,"[MessageHandler] Replace the internal `isReply` property, as sent when Promise callbacks are used, with enumeration values

Given that the `isReply` property is an internal implementation detail, changing its type shouldn't be a problem. Note that by directly indicating if either data or an Error is sent, it's no longer necessary to use `in` when handling the callback.",False
72bd8e8bdb96791bd66a961c428c9edfffd11a71,2019-10-31 03:18:48,Tim van der Meij,"Merge pull request #11284 from Snuffleupagus/ObjectLoader-allChunksLoaded

Make the `ObjectLoader` use more efficient methods when determining if data needs to be loaded",True
2d35a49dd8223cb2f5bdf1e46ba9b88a9d0a268f,2019-10-30 03:50:10,Jonas Jenwald,"Inline a couple of `isRef`/`isDict` checks in the `ObjectLoader` code

As we've seen in numerous other cases, avoiding unnecessary function calls is never a bad thing (even if the effect is probably tiny here).",False
1133dbac337979ae26606f221151c6474b301de7,2019-10-30 03:50:09,Jonas Jenwald,"Make the `ObjectLoader` use more efficient methods when determining if data needs to be loaded

Currently, for data in `ChunkedStream` instances, the `getMissingChunks` method is used in a couple of places to determine if data is already available or if it needs to be loaded.

When looking at how `ChunkedStream.getMissingChunks` is being used in the `ObjectLoader` you'll notice that we don't actually care about which *specific* chunks are missing, but rather only want essentially a yes/no answer to the ""Is the data available?"" question.
Furthermore, when looking at how `ChunkedStream.getMissingChunks` itself is implemented you'll notice that it (somewhat expectedly) always iterates over *all* chunks.

All in all, using `ChunkedStream.getMissingChunks` in the `ObjectLoader` seems like an unnecessary ""heavy"" and roundabout way to obtain a boolean value. However, it turns out there already exists a `ChunkedStream.allChunksLoaded` method, consisting of a *single* simple check, which seems like a perfect fit for the `ObjectLoader` use cases.
In particular, once the *entire* PDF document has been loaded (which is usually fairly quick with streaming enabled), you'd really want the `ObjectLoader` to be as simple/quick as possible (similar to e.g. loading a local files) which this patch should help with.

Note that I wouldn't expect this patch to have a huge effect on performance, but it will nonetheless save some CPU/memory resources when the `ObjectLoader` is used. (As usual this should help larger PDF documents, w.r.t. both file size and number of pages, the most.)",False
16fb5437c76206813693828cbe9154d32ede1093,2019-10-29 03:44:04,Tim van der Meij,"Merge pull request #11283 from Snuffleupagus/hasBlendModes-Array

Ensure that `PartialEvaluator.hasBlendModes` handles Blend Modes in Arrays (PR 11281 follow-up)",True
0496ea61f53621a4fa3439775258c331a4a5f1da,2019-10-28 16:07:05,Jonas Jenwald,"Ensure that `PartialEvaluator.hasBlendModes` handles Blend Modes in Arrays (PR 11281 follow-up)

I completely overlooked this in PR 11281, but you obviously need to make similar changes in `PartialEvaluator.hasBlendModes` since it will otherwise ignore valid Blend Modes.",False
31737565d5748f7b26533055b113f9c47ff1ec3b,2019-10-27 23:39:54,Tim van der Meij,"Merge pull request #11281 from Snuffleupagus/issue-11279

Support Blend Modes which are specified in an Array of Names (issue 11279)",True
b8d129eeeae793353bf71cec37eea13272cfb050,2019-10-26 17:56:25,Tim van der Meij,"Merge pull request #11282 from Snuffleupagus/EXCLUDE_LANG_CODES

Update l10n files",True
5c266f0e8c3f39b8d8dce146c5414dec82f2a8c7,2019-10-26 17:54:31,Jonas Jenwald,"Support Blend Modes which are specified in an Array of Names (issue 11279)

According to the specification, the first *supported* Blend Mode should be choosen in this case; please see https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#G10.4848607",False
d08ecdb9fa88e8ee177248b537910f32371327ea,2019-10-26 17:26:37,Jonas Jenwald,Update l10n files,False
8852991c6010e5fcc3eaeeb4433707c4f0ae00a1,2019-10-26 17:19:37,Jonas Jenwald,Simplify the handling of `EXCLUDE_LANG_CODES` (PR 11213 follow-up),False
4a5a4328f4e61447945aea1dcbb3b130ad7b6e00,2019-10-24 03:38:40,Tim van der Meij,"Merge pull request #11273 from Snuffleupagus/getViewport-offsets

[api-minor] Support custom `offsetX`/`offsetY` values in `PDFPageProxy.getViewport` and `PageViewport.clone`",True
9c7f691ba691d147c411777c56f90e13a1905f0b,2019-10-24 03:33:36,Tim van der Meij,"Merge pull request #11271 from Snuffleupagus/rm-DummyStatTimer

Re-factor `StatTimer` usage, in `src/display/api.js`, and remove `DummyStatTimer`",True
681bc9d70e4aab654c6b0e8731649eef294e5304,2019-10-24 00:18:14,Jonas Jenwald,"[api-minor] Support custom `offsetX`/`offsetY` values in `PDFPageProxy.getViewport` and `PageViewport.clone`

There's no good reason, as far as I can tell, to not also support `offsetX`/`offsetY` in addition to e.g. `dontFlip`.",False
2046adcc49e89fee28832d978c4cb46731cb8c5a,2019-10-24 00:00:25,Jonas Jenwald,"Change the 'gets viewport respecting ""dontFlip"" argument' unit-test to use a valid rotation angle

As can be seen in `PageViewport` only multiples of 90 degrees are really supported by the code, hence the unit-test doesn't really make sense.
(Possibly this should be enforced in the API, to avoid surprises, but given that this problem has always existed I'm passing on that for now.)",False
6f7f8257bc29be548df0556eae2ca3109af9341c,2019-10-23 18:15:18,Jonas Jenwald,"Slightly re-factor the String handling in `StatTimer`

This uses template strings in a couple of spots, and a buffer in the `toString` method.",False
8e5d3836d6e16fe53361729d868f140dbbf56c49,2019-10-23 18:15:18,Jonas Jenwald,"Remove the `enable` argument from the `StatTimer` constructor

This argument is a left-over from older API code, where we unconditionally initialized `StatTimer` instances for every page. For quite some time that's only been done when `pdfBug` is set, hence it seems unnecessary to keep this functionality.",False
9fc40f8b84c86d626c91c6240d38a2ac4abaf8ec,2019-10-23 18:15:16,Jonas Jenwald,"Remove `DummyStatTimer` since it's unused now

Since this isn't part of the API surface, removing it now that it's unused shouldn't cause any problems.",False
860da8b8409e16aa8e4312598020b78027eb2428,2019-10-23 16:53:41,Jonas Jenwald,"Stop using the `DummyStatTimer` in the API, and check if `this._stats` exists when trying to report statistics

Even though the currect situation only results in six unnecessary function calls per page, it nonetheless seems completely unnecessary to call dummy functions when `pdfBug` is *not* set (i.e. the default behaviour).",False
7aca15da70c299b9c99d85191090c599515012d5,2019-10-23 03:11:35,Tim van der Meij,"Merge pull request #11268 from Zdobnov/refactor/avoid-css-duplication

refactor: viewer.css refactored, duplications removed",True
fea102b2350d92f2800c0f07746bd6318b0eb122,2019-10-22 17:55:42,siarhei.zdabnou,border & box-shadow duplications removed,False
d7f651aa9885c1848d1c8694c038bf4e0e09d6fe,2019-10-20 18:54:17,Tim van der Meij,"Merge pull request #11263 from Snuffleupagus/viewer-disableAutoFetch-pagesCount

Attempt to reduce resource usage, by not eagerly fetching all pages, for long/large documents",True
ce816eed8e893f22187cacee9d339ad12bd2a4a8,2019-10-20 16:51:36,Jonas Jenwald,"Attempt to reduce resource usage, by not eagerly fetching all pages, for long/large documents

For *very* long/large documents fetching all pages on load may cause quite bad performance, both memory and CPU wise. In order to at least slightly alleviate this, we can let the viewer treat these kind of documents[1] as if `disableAutoFetch` were set.

---
[1] One example of a really bad case is https://bugzilla.mozilla.org/show_bug.cgi?id=1588435, which this patch should at least help somewhat. In general, for these cases, we'd probably need to implement switching between `PDFViewer`/`PDFSinglePageViewer` (as already tracked on GitHub) and use the latter for these kind of long documents.",False
826a2a69a0a9d193d2cf02cfe42f8a6fe90d9a5e,2019-10-20 03:32:37,Tim van der Meij,"Merge pull request #11262 from Snuffleupagus/mozcentral-chrome.properties

Re-add the en-US `chrome.properties` l10n file, to avoid it being removed at mozilla-central (PR 11256 follow-up)",True
0a17fca46e48d0a238b3392555a7a3b5470a0f73,2019-10-19 21:30:15,Jonas Jenwald,"Ensure that we'll never, accidentally, try and fetch the default en-US locale (PR 11213 follow-up)",False
ee57832de22adb34c7953a217c1bf4809a863508,2019-10-19 20:58:37,Jonas Jenwald,"Re-add the en-US `chrome.properties` l10n file, to avoid it being removed at mozilla-central (PR 11256 follow-up)

Unfortunately I forgot to test `gulp mozcentraldiff` with PR 11256, which is really bad since it will cause the en-US `chrome.properties` l10n file to be deleted at mozilla-central; sorry about breaking this!

In order to address this we'll have to re-add (only) the en-US `chrome.properties` l10n file, which is simple enough. Furthermore, since we're not doing any sort of build-specific parsing of the l10n files, we can just copy the en-US files as-is rather than having to run `gulp locale` during `gulp mozcentral`.",False
3c23ac212e43adfb9b6fcc778f8afcf5f69cafa7,2019-10-19 19:01:12,Tim van der Meij,"Merge pull request #11261 from Snuffleupagus/DocException

Re-factor sending of various Exceptions from the worker to the API",True
df0e1edab5c735759e329cde7b28a2f489ec6b01,2019-10-19 16:24:54,Jonas Jenwald,"Re-factor sending of various Exceptions from the worker to the API

As can be seen in the API, there's a number of document loading Exception handlers which are both really simple and highly similar. Hence these are changed such that all the relevant Exceptions are sent via *one* message instead.

Furthermore, the patch also avoids unnecessarily re-creating `UnknownErrorException`s at the worker side and removes an unnecessary `bind` call.",False
11f3851a97578c5c0fe32c85ba9b7b9e4c84ee16,2019-10-19 03:26:46,Tim van der Meij,"Merge pull request #11243 from Snuffleupagus/issue-11242

Add a fallback for non-embedded *composite* Verdana fonts (issue 11242)",True
884e1ef234c8ec4a429ad47353012e9e3a6b3209,2019-10-19 03:23:35,Tim van der Meij,"Merge pull request #11260 from Snuffleupagus/update-npm-packages

Update npm packages",True
a5d0fa5fe1d344d5ab0b191403c3090a6522634a,2019-10-18 20:16:35,Jonas Jenwald,"Fix (most) vulnerabilities reported by `npm audit`

This was done automatically, using the `npm audit fix` command.

*Please note:* There's two vulnerabilities left, however they couldn't be fixed automatically and may thus benefit from being handled separately.",False
c0c5a8282def4ad1470a5a9609d34e038660ba32,2019-10-18 20:12:02,Jonas Jenwald,Update packages,False
c54bb222caaaef7b4388a9b268a0c84267a9e27c,2019-10-18 03:26:26,Tim van der Meij,"Merge pull request #11231 from Snuffleupagus/indexObjects-entries-gen

Allow over-writing entries, in `XRef.indexObjects`, only when the generation number matches (issues 11230, 11139, 9552, 9129, 7303)",True
d0d92d34b0aefceaa3a77076567b48b7753baad3,2019-10-18 03:25:57,Tim van der Meij,"Merge pull request #11257 from Snuffleupagus/skipPages

Remove/update `skipPages` annotations from `test/test_manifest.json`",True
90d7d2103ec9bb14304be3790d64afebd31ca376,2019-10-18 03:15:58,Tim van der Meij,"Merge pull request #11256 from Snuffleupagus/firefox-rm-addon-l10n

[Firefox] Remove unused addon `l10n` files (PR 9566 follow-up)",True
2fcb5afc7b98b5572e3e40d7e86ff2f79e00b44d,2019-10-17 20:30:55,Jonas Jenwald,"Add a fallback for non-embedded *composite* Verdana fonts (issue 11242)

Obviously this won't look exactly right, but considering that the PDF file doesn't bother embedding non-standard fonts this is the best that we can do here.",False
17a3af3fc024696d9a39eecfb5bffc6a6fd260d1,2019-10-17 16:50:56,Jonas Jenwald,"Replace a couple of `skipPages` annotations with `firstPage` in `test/test_manifest.json`

Originally only `skipPages` existed, but given that `firstPage`/`lastPage` has existed for a long time now using them whenever possible looks simpler overall.",False
f3c5a690fc3a2c3721fc40cc6e9eaad681eb26b7,2019-10-17 16:50:49,Jonas Jenwald,"Remove unnecessary `skipPages` annotations from `test/test_manifest.json`

 - In the `ibwa-bad` case the sixteenth page contains corrupt/incomplete commands, but given that we're suppressing `Error`s by default now skipping hardly seems warranted any more.

 - In the `geothermal.pdf` case the first page contains an unsupported ColourSpace, but again we're suppressing `Error`s by default now and skipping hardly seems warranted any more.",False
b7ddd107411aceb91fd8f2bb9ad71592b8bf2757,2019-10-17 15:57:16,Jonas Jenwald,Update l10n files,False
b663cec3839b78eb60163677768f7f353cdc7e65,2019-10-17 15:57:11,Jonas Jenwald,"[Firefox] Stop fetching the `chrome.properties` files during `gulp importl10n` (PR 9566 follow-up)

With the removal of the (standalone) Firefox building code in PR 9566 (a year and a half ago), these files are now completely unused in the GitHub repository[1].
Hence it doesn't really seem necessary to keep fetching them with `gulp importl10n`, and the existing files in the `l10n` folder can also be removed (thanks to version control, they're easy enough to restore should the need ever arise).

The patch also allows an additional simplification, for the `gulp locale` and `gulp mozcentral` commands, since it's now possible to stop writing `l10n` files to the `extensions/firefox/` folder and instead just copy them similar to other build targets.

---
[1] They're obviously still used in `mozilla-central`, for fallback messages displayed through `PdfStreamConverter.jsm`, but that doesn't make it necessary to keep them *here* as far as I'm concerned.",False
8a057dcf90f841a5987c6e860912d7f3e8cce13d,2019-10-17 15:19:30,Jonas Jenwald,"[Firefox] Stop building the `metadata.inc`/`chrome.manifest.inc` files during `gulp locale` (PR 9566 follow-up)

With the removal of the (standalone) Firefox building code in PR 9566 (a year and a half ago), these files are now completely unused.
Hence it doesn't really make sense to keep building them as part of `gulp locale`, and the existing files in the `l10n` folder can also be removed (thanks to version control, they're easy enough to restore should the need ever arise).",False
af61d48899f9751489fffd4eb767b0b21973342b,2019-10-17 03:58:52,Tim van der Meij,"Merge pull request #11250 from Snuffleupagus/silence-Autoprefixer-message

Silence the Autoprefixer message being printed with all build logs",True
50573019b140153e4ab460e74a8018064c9c8f20,2019-10-17 03:56:40,Tim van der Meij,"Merge pull request #11253 from Snuffleupagus/issue-7156

Avoid handling keyboard shortcuts for `contentEditable` DOM elements (issue 7156)",True
d67a5d395cc556165cd827a4959a8431fb07f257,2019-10-16 20:20:43,Jonas Jenwald,"Avoid handling keyboard shortcuts for `contentEditable` DOM elements (issue 7156)

The issue has been open for years now, and has even been marked with `5-good-beginner-bug` for *months*, without any movement.
Considering just how simple the suggested solution is, I'm submitting this patch just to close out a long-standing issue.",False
171c8865709281d228a934f76455f435031d80c4,2019-10-16 16:40:16,Jonas Jenwald,"Silence the Autoprefixer message being printed with all build logs

The following is printed with every build, which gets kind of annoying when looking at the logs:
```
Replace Autoprefixer browsers option to Browserslist config.
Use browserslist key in package.json or .browserslistrc file.

Using browsers option cause some error. Browserslist config
can be used for Babel, Autoprefixer, postcss-normalize and other tools.

If you really need to use option, rename it to overrideBrowserslist.

Learn more at:
https://github.com/browserslist/browserslist#readme
https://twitter.com/browserslist
```

Given how we're using Autoprefixer, with a number of build-specific configs, simply changing the option name seems like the easiest solution here.

(I'm also adding a couple of newlines at the `autoprefixer` call-sites, to aid readability.)",False
4d0c759b7fbfc651fbd8c155cecf73d503bb643f,2019-10-16 04:09:25,Pedro Luiz Cabral Salomon Prado,"Change variable assignment (#11247)

Remove unused variable assignment in `src/core/fonts.js`",False
ecdf1375b8d0d1bf36e558b9c4e3bb9300e456ec,2019-10-16 04:04:31,Tim van der Meij,"Merge pull request #11246 from Snuffleupagus/issue-11245

Tweak the `isIOS` check, in `web/viewer_compatibility`, to attempt to support newer Safari versions (issue 11245)",True
f964cbc96149c6705d5a961fd6534f29a2066388,2019-10-15 20:52:28,Jonas Jenwald,"Tweak the `isIOS` check, in `web/viewer_compatibility`, to attempt to support newer Safari versions (issue 11245)

Obviously userAgent checks aren't that great, since it's very easy to spoof, but it probably doesn't hurt to attempt to extend this (since it's limited to `GENERIC` builds).
Besides, anyone using the default viewer can always set the `maxCanvasPixels` option to a value of their choosing.",False
ffc847eaa55dd5ce239402c24522fac146665677,2019-10-15 01:40:04,Jonas Jenwald,"Allow over-writing entries, in `XRef.indexObjects`, only when the generation number matches (issues 11230, 11139, 9552, 9129, 7303)

This patch is making me somewhat worried about future regressions, since it's certainly easy to imagine this completely breaking certain kinds of corrupt/edited PDF documents while fixing others.[1]

Obviously it passes all existing reference tests (and even improves one), however compared to many other patches there's no telling how much it could break.
The only reason that I'm even submitting this patch, is because of the number of open issues that it would address.

Generally speaking though, the best course of action would probably be if `XRef.indexObjects` was re-written to be much more robust (since it currently feels somewhat hand-wavy in parts). E.g. by actually checking/validating more of the objects before committing to them.

---
[1] Especially given that it's reverting part of PR 5910, however in the case of issue 5909 it seems that other (more recent) changes have actually made that PR redundant.",False
16ae7c6960c1296370c1600312f283a68e82b137,2019-10-14 00:58:18,Tim van der Meij,"Merge pull request #11235 from timvandermeij/jsdoc

Improve the JSDoc comments",True
ec6a99d7815a53b3f664d543c204fa5232995d0f,2019-10-14 00:53:00,Tim van der Meij,"Bundle all API documentation in a module

This commit allows JSDoc to generate all API documentation in the
`pdfjsLib` module (namespace) so the documentation becomes easier to
navigate.",False
92155f6a5f5f31642fe5ba56963d78a4df955120,2019-10-14 00:53:00,Tim van der Meij,"Don't include `src/shared/util.js` for the API documentation

This file only contains helper functions and should not be listed in the
documentation since they are not part of the public API.",False
9f4d45ddf440090ab9c248ec46a1c2c75a822c6c,2019-10-14 00:53:00,Tim van der Meij,Don't include private methods in the the `PDFPageProxy` API documentation,False
36c01c2c2a7b20b651a15549f4205cc4c476689f,2019-10-14 00:53:00,Tim van der Meij,"Deduplicate the documentation for `PDFDocumentLoadingTask` and `PDFWorker`

Both classes live inside a closure with the same name, which confuses
JSDoc. Move the documentation to the inner class to deduplicate them.",False
ca3a58f93a107eb6ead9e8376a7ba32c567cd174,2019-10-13 17:28:17,Tim van der Meij,"Consistently use `@returns` for returned data types in JSDoc comments

Sometimes we also used `@return`, but `@returns` is what the JSDoc
documentation recommends. Even though `@return` works as an alias, it's
good to use the recommended syntax and to be consistent within the
project.",False
8b4ae6f3eb7c6c9e54b8542d1588e5e49ee3e0b3,2019-10-13 17:28:17,Tim van der Meij,"Consistently use `@type` for getter data types in JSDoc comments

Sometimes we also used `@return` or `@returns`, but `@type` is what
the JSDoc documentation recommends. This also improves the documentation
because before this commit the types were not shown and now they are.",False
f4daafc0775715392cbae45ca7f5df0c6ecc3481,2019-10-13 17:28:17,Tim van der Meij,"Consistently use square brackets for optional parameters in JSDoc comments

Square brackets are recommended to indicate optional parameters. Using
them helps for automatically generating correct documentation.",False
efd331daa18a70e37ad52d2053a0e7c0a44d9737,2019-10-13 17:28:17,Tim van der Meij,"Consistently use `string` for string data types in JSDoc comments

Sometimes we also used `String`, but `string` is the what the JSDoc
documentation recommends.",False
e75991b49ed06fec3d053d77d0be17ef67da1379,2019-10-13 17:28:13,Tim van der Meij,"Consistently use `number` for numeric data types in JSDoc comments

Sometimes we also used `Number` and `integer`, but `number` is what
the JSDoc documentation recommends.",False
ff37cdb5d74160ef73d9c6a55e81231f238f2951,2019-10-13 15:52:22,Tim van der Meij,"Merge pull request #11237 from Snuffleupagus/compatibility-SKIP_BABEL

Update `src/shared/compatibility.js` to only run with `SKIP_BABEL = false` set",True
03387ebaa824d56486e86805fc8edfb4af8b60f9,2019-10-13 15:03:41,Jonas Jenwald,"Update `src/shared/compatibility.js` to only run with `SKIP_BABEL = false` set

Rather than specifying certain build targets manually, it seems much more appropriate (and future-proof) to use the `SKIP_BABEL` build target instead.

Also, the patch adds a missing `/* eslint no-var: error */` line since I'm touch the file anyway and no code-changes were necessary for it.",False
4af2755f714f562787ed4302dbc5c599a4056f39,2019-10-12 22:57:35,Tim van der Meij,"Merge pull request #11234 from Snuffleupagus/indexObjects-eq-tests

Convert a number of reference tests, for documents with corrupt XRef tables, from `load` to `eq`",True
259551d144220e710b2086c04e258cd87938ce99,2019-10-12 22:19:59,Jonas Jenwald,"Convert a number of reference tests, for documents with corrupt XRef tables, from `load` to `eq`

As part of attempting to fix a number issues containing PDF documents with corrupt XRef tables, I'd like to improve the reference test-coverage slightly *first*.
Obviously this will increase the runtime of the tests a bit, however I'd rather ""waste"" resources on the bots instead of developer time fixing regressions which could have been avoided.",False
c701ae3f4cd5f1713e09a1b0da0096664ca37f8f,2019-10-12 17:39:53,Tim van der Meij,"Merge pull request #11232 from Snuffleupagus/hasBlendModes-improvements

Cache processed 'ExtGState's in `PartialEvaluator.hasBlendModes` to avoid unnecessary parsing/lookups",True
bfcbf2d78d835133f958eb22303a3f6a16c1542c,2019-10-12 16:05:42,Jonas Jenwald,"Cache processed 'ExtGState's in `PartialEvaluator.hasBlendModes` to avoid unnecessary parsing/lookups

This simply extends the already existing caching of processed resources to avoid duplicated parsing of 'ExtGState's, which should help with badly generated PDF documents.

This patch was tested using the PDF file from issue 6961, i.e. https://github.com/mozilla/pdf.js/files/121712/test.pdf, with the following manifest file:
```
[
    {  ""id"": ""issue6961"",
       ""file"": ""../web/pdfs/issue6961.pdf"",
       ""md5"": """",
       ""rounds"": 200,
       ""type"": ""eq""
    }
]
```

which gave the following *overall* results when comparing this patch against the `master` branch:
```
-- Grouped By browser, stat --
browser | stat         | Count | Baseline(ms) | Current(ms) | +/- |    %  | Result(P<.05)
------- | ------------ | ----- | ------------ | ----------- | --- | ----- | -------------
Firefox | Overall      |   400 |         1063 |        1051 | -12 | -1.17 |        faster
Firefox | Page Request |   400 |          552 |         543 |  -9 | -1.69 |        faster
Firefox | Rendering    |   400 |          511 |         508 |  -3 | -0.61 |
```

and the following *page-specific* results:
```
-- Grouped By page, stat --
page | stat         | Count | Baseline(ms) | Current(ms) | +/- |    %  | Result(P<.05)
---- | ------------ | ----- | ------------ | ----------- | --- | ----- | -------------
0    | Overall      |   200 |         1122 |        1110 | -12 | -1.03 |
0    | Page Request |   200 |          552 |         544 |  -8 | -1.48 |        faster
0    | Rendering    |   200 |          570 |         566 |  -4 | -0.62 |
1    | Overall      |   200 |         1005 |         992 | -13 | -1.33 |        faster
1    | Page Request |   200 |          552 |         542 | -11 | -1.91 |        faster
1    | Rendering    |   200 |          452 |         450 |  -3 | -0.61 |
```",False
af71f9b40af1e564729eca8042cc71bf6e71ac1f,2019-10-12 14:54:37,Jonas Jenwald,"Inline all the possible type checks in `PartialEvaluator.hasBlendModes` to avoid unnecessary function calls

For badly generated PDF documents, with issue 6961 being one example, there's well over one hundred thousand function calls being made in total for just the *two* pages.",False
dcf49ac753dbe0cfa10f196f33b34c32b7145c40,2019-10-12 01:55:52,Tim van der Meij,"Merge pull request #11228 from Snuffleupagus/eslint-accessor-pairs

Enable the ESLint rule `accessor-pairs` for Classes",True
4bdf65b89d1e4e8c301a79aecd90b5fd24038c5b,2019-10-11 16:58:46,Jonas Jenwald,"Enable the ESLint rule `accessor-pairs` for Classes

Please see https://eslint.org/docs/rules/accessor-pairs#enforceforclassmembers",False
00c33395207412a2463fed926dd3f1d688b762e2,2019-10-11 02:55:41,Luís Takahashi,Add Create React App example with TypeScript and basic usage,False
d20ab762426ddcd32015aa153a433537beddd374,2019-10-11 02:45:49,Tim van der Meij,"Merge pull request #11218 from Snuffleupagus/loadFont-fallback

Attempt to fallback to a default font, for non-available ones, in `PartialEvaluator.loadFont`",True
94171d9d720f4bfe2cf1737c0aa7ccfad04c7c81,2019-10-10 20:19:46,huzjakd,"Attempt to fallback to a default font, for non-available ones, in `PartialEvaluator.loadFont`

This handles the two different ways that fonts can be loaded, either by Name (which is the common case) or by Reference.
Furthermore, this also takes the `ignoreErrors` option into account when deciding whether to fallback or Error.
Finally, by creating a minimal but valid Font dictionary, there's no special-cases necessary in any of the font parsing code.

Co-authored-by: huzjakd <huzjakd@gmail.com>
Co-Authored-By: Jonas Jenwald <jonas.jenwald@gmail.com>",False
d2959fc9c95495811c70f59561f5958789eae1ac,2019-10-10 03:02:22,Tim van der Meij,"Merge pull request #11219 from Snuffleupagus/throw-deprecated-methods

[api-minor] Replace all `deprecated` calls with throwing of actual `Error`s",True
1c0a93aafdd0a1ef31a0c310267752192648fd44,2019-10-10 03:00:50,Tim van der Meij,"Merge pull request #11222 from Snuffleupagus/rm-unmaintained-locales

Remove locales which are unmaintained and/or not shipping in Nightly (PR 11213 follow-up)",True
307a85901d2d47ca1fd83ba5ed61512c4cd48125,2019-10-09 13:48:00,Jonas Jenwald,"Remove locales which are unmaintained and/or not shipping in Nightly (PR 11213 follow-up)

With the sole exception of `meh`[1], none of the locales removed here have even been updated since the last change was made to the default `en-US` locale.

Please note that if/when these locales would start shipping in Nightly again, they will automatically be re-added in PDF.js as well with the `gulp importl10n` command.

---
[1] The current translation is also somewhat incomplete, to put it mildly.",False
ea729ec55c187e9ae15a2c3b1840fe23e2545dd8,2019-10-09 12:51:15,Jonas Jenwald,"[api-minor] Replace all `deprecated` calls with throwing of actual `Error`s

All of these methods have been marked as `deprecated` in *three* releases now, and I'd thus like to (slowly) move towards complete removal.

However rather than just removing the methods right away, which would cause somewhat cryptic failures, this patch tries to implement a hopefully reasonable middle ground by throwing `Error`s with (essentially) the same information as the previous warnings.

While the previous `deprecated` messages could perhaps be seen as optional, with these changes API consumers will now be forced to actually migrate their code.",False
5191d10dbca5dfafcb7d18cd0e6491ee6c5cf6b7,2019-10-09 02:55:52,Tim van der Meij,"Merge pull request #11209 from tamuratak/square_bracket_for_optional

Use square brackets for optional properties in the JSDoc comments of `src/display/api.js`",True
d5ee0830504b3a4fc9bcf06f49ccbe7458c67d1a,2019-10-08 17:04:17,Takashi Tamura,* use square brackets for optional properties in the JSDoc comments of src/display/api.js,False
cead77ef3a166849ee31925f5d6e011950e6fa5e,2019-10-06 23:20:43,Tim van der Meij,"Merge pull request #11186 from Snuffleupagus/issue-9655

Improve the heuristics, in `PartialEvaluator._buildSimpleFontToUnicode`, for glyphNames of the Cdd{d}/cdd{d} format (issue 9655)",True
a21f60415d15153ba79c3d3d44eb8c66ea11a978,2019-10-06 23:14:10,Tim van der Meij,"Merge pull request #11213 from Snuffleupagus/importl10n-fetch-langCodes

Update the `gulp importl10n` command to fetch the active language codes",True
5fb3eb772823a099c9e1fc8b2c48332495c3ca8b,2019-10-06 22:53:13,Tim van der Meij,"Merge pull request #11212 from Snuffleupagus/MessageHandler-deleteStreamController

[MessageHandler] Some additional (small) clean-up of the code",True
dee3da69d48c17a1eb7ea457fa6104f46c7aa85c,2019-10-06 21:42:29,Jonas Jenwald,"Have `gulp importl10n` list locales which may be candidates for removal

Rather than having the script remove locales automatically, which seems like a heavy-handed approach at least initially, listing these for manual checking seems nice though.",False
8d74a9ae7f26754aafaeaa33d08a1fc909e1c9f5,2019-10-06 21:42:29,Jonas Jenwald,Update l10n files,False
ed71ec37856f3bb8ea17803d5defe1da698b7d74,2019-10-06 21:42:27,Jonas Jenwald,"Update the `gulp importl10n` command to fetch the active language codes

Rather than having to manually maintain a static list of language codes, it's much easier to simply fetch the active ones from `mozilla-central` instead.

As part of this the code in `external/importL10n/locales.js` was modernized slightly, by using Promises/async functions to get rid of a bunch of annoying callbacks (which shouldn't be a problem for reasonably modern Node.js versions).",False
eabedab38ec27e519d34aa0d5adf5cf8ac6cec36,2019-10-06 17:45:13,Jonas Jenwald,"[MessageHandler] Add a non-PRODUCTION/TESTING check to ensure that `wrapReason` is called with a valid `reason`

There shouldn't be any situation where `reason` isn't either an `Error`, or a cloned ""Error"" sent via `postMessage`.",False
9201c8dad4aa0fc177504e4f40bc6a838d2499f7,2019-10-06 17:45:02,Jonas Jenwald,"[MessageHandler] Convert the `deleteStreamController` helper function to a ""private"" method instead",False
f5be2d62a3e0d02b5f92abb6ebda7d1a70426c2f,2019-10-06 14:17:29,Jonas Jenwald,"Improve the heuristics, in `PartialEvaluator._buildSimpleFontToUnicode`, for glyphNames of the Cdd{d}/cdd{d} format (issue 9655)

*Please note:* I've been thinking about possible ways of addressing this issue for a while now, but all of the solutions I came up with became too complicated and thus hurt readability of the code.
However, it occured to me that we're essentially trying to add a heuristic *on top* of another heuristic, and that it shouldn't matter how efficient the code is as long as it works.

In the PDF file in the issue the Encoding contains glyphNames of the `Cdd` format, which our existing heuristics will treat as base 10 values. However, in this particular file they actually contain base 16 values, which we thus attempt to detect and fix such that text-selection works.",False
0786363b7cee0600cdb30790b59e6500ca47aef8,2019-10-05 22:30:04,Tim van der Meij,"Merge pull request #11198 from Snuffleupagus/PDFSidebarResizer-fixes

[PDFSidebarResizer] Add a couple of (small) readability improvements in the code",True
4a1fc62d6c700f9f45901ca6e88fa0b56ac94218,2019-10-04 03:24:14,Tim van der Meij,"Merge pull request #11202 from timvandermeij/bump

Bump versions in `pdfjs.config`",True
117daf02800d66152efe60378698c49be05a8916,2019-10-04 03:19:48,Tim van der Meij,Bump versions in `pdfjs.config`,False
32d16ab5f6b95f0cd50a0ce0f42b7df44130d253,2019-10-03 15:54:19,Jonas Jenwald,"[PDFSidebarResizer] Re-factor the `resize` event listener to improve readability

I've absolutely no idea why I wrote the code that way originally, since the nested `if`s are not really helping readability one bit.
Hence this patch which changes things to use early `return`s instead, to help readability.",False
9e4552d7920fcba13b3d74e1e180fc49180f4436,2019-10-03 15:33:45,Jonas Jenwald,"[PDFSidebarResizer] Refactor the clamping in `_updateWidth`

Rather than manually clamping the `width` here, we can just `export` an already existing helper function from `ui_utils.js` instead.

(Hopefully it will eventually be possible to replace this helper function with a native `Math.clamp` function, given that there exists a ""Stage 1 Proposal"" for adding such a thing to the ECMAScript specification.)",False
c1cfe2881b643f3b4e2017fe5db349936075a4b8,2019-10-03 15:25:13,Jonas Jenwald,"[PDFSidebarResizer] Skip the `CSS.supports` checks for MOZCENTRAL builds

Since CSS variable support cannot be disabled any more in Firefox, the run-time checks are of no using for MOZCENTRAL builds.",False
4ae3f9fcf6735748599b1f436a9d5b94bdf2d393,2019-10-02 02:54:58,Tim van der Meij,"Merge pull request #11187 from Snuffleupagus/image-Error-classes

Convert the various image decoder `...Error`s to classes extending `BaseException` (PR 11185 follow-up)",True
572abdcb4a99ef41f2cd135d6c281cb83d9fcf19,2019-10-01 16:40:14,Jonas Jenwald,"Convert the various image decoder `...Error`s to classes extending `BaseException` (PR 11185 follow-up)

Somehow I missed these in PR 11185, but there's no good reason not to convert them as well.",False
8c4f4b5eec80809b380c145970dcea50ed657935,2019-09-29 18:39:42,Tim van der Meij,"Merge pull request #11182 from Snuffleupagus/disableWorker-disable-Dict-postMessage

Forbid sending of `Dict`s and `Stream`s, with `postMessage`, when workers are disabled",True
06e4eb4714ffe63c44d50a1e42311d55d75f29f5,2019-09-29 18:36:22,Tim van der Meij,"Merge pull request #11185 from Snuffleupagus/Exception-classes

Convert the various `...Exception`s to proper classes, to reduce code duplication",True
5d93fda4f2f6b4b337b4e334b799c227ce4aeedd,2019-09-29 13:46:20,Jonas Jenwald,"Convert the various `...Exception`s to proper classes, to reduce code duplication

By utilizing a base ""class"", things become significantly simpler. Unfortunately the new `BaseException` cannot be a proper ES6 class and just extend `Error`, since the SystemJS dependency doesn't seem to play well with that.
Note also that we (generally) need to keep the `name` property on the actual `...Exception` object, rather than on its prototype, since the property will otherwise be dropped during the structured cloning used with `postMessage`.",False
3f8fee371b4f8f9ba115b73febd649d062125986,2019-09-26 19:46:13,Jonas Jenwald,"Forbid sending of `Dict`s and `Stream`s, with `postMessage`, when workers are disabled

By default, i.e. with workers enabled, it's *purposely* not possible to send `Dict`s and `Stream`s from the worker-thread. This is achieved by defining a `function` on every `Dict` instance, since that ensures that [the structured clone algoritm](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm) will throw an Error on `postMessage`.

However, with workers *disabled* we fall-back to the `LoopbackPort` implementation which just ignores any `function`s, thus incorrectly allowing sending of data which *should* be unclonable.",False
cd909c531f6302f56b3d399a6c2f45aa45927390,2019-09-25 03:03:37,Tim van der Meij,"Merge pull request #11169 from Snuffleupagus/Dict-inline-Ref-checks

Reduce the number of function calls in the `Dict` class",True
f762d59ad201cbf77f1e0dd4434c581ac141f9ed,2019-09-25 02:52:17,Tim van der Meij,"Merge pull request #11173 from Snuffleupagus/ReadableStream-polyfill

Replace the bundled `ReadableStream` polyfill with the `web-streams-polyfill` npm package (issue 11157)",True
2cac68467f6ed445add8ccd5d4f0781eea9cae58,2019-09-24 12:01:39,Jonas Jenwald,"Reduce the number of function calls in the `Dict` class

The following changes were made:
 - Remove unnecessary `typeof` checks in the `get`/`getAsync` methods.
 - Reduce unnecessary code duplication in the `get`/`getAsync` methods.
 - Inline the `Ref` checks in the `get`/`getAsync`/`getArray` methods, since it helps avoid many unnecessary functions calls. I.e. this way it's possible to directly call `XRef.{fetch, fetchAsync)` only when necessary, rather than always having to call `XRef.{fetchIfRef, fetchIfRefAsync)`.

This patch was tested using the PDF file from issue 2618, i.e. http://bugzilla-attachments.gnome.org/attachment.cgi?id=226471, using the following manifest file:
```
[
    {  ""id"": ""issue2618"",
       ""file"": ""../web/pdfs/issue2618.pdf"",
       ""md5"": """",
       ""rounds"": 250,
       ""type"": ""eq""
    }
]
```
This gave the following results when comparing this patch against the `master` branch:
```
-- Grouped By browser, stat --
browser | stat         | Count | Baseline(ms) | Current(ms) | +/- |    %  | Result(P<.05)
------- | ------------ | ----- | ------------ | ----------- | --- | ----- | -------------
Firefox | Overall      |   250 |         2821 |        2790 | -32 | -1.12 |        faster
Firefox | Page Request |   250 |            2 |           2 |   0 |  6.68 |
Firefox | Rendering    |   250 |         2820 |        2788 | -32 | -1.13 |        faster
```",False
44f4cd529d18aee3f13a2e691b33fc26a6d0c997,2019-09-24 02:21:17,Tim van der Meij,"Merge pull request #11171 from Snuffleupagus/Dict-get-consistent-return-type

Fix the inconsistent return types for `Dict.{get, getAsync}`",True
0ee373f9cc8476ed22b2ab770a4725873d8ca385,2019-09-24 01:46:59,Jonas Jenwald,"Replace the bundled `ReadableStream` polyfill with the `web-streams-polyfill` npm package (issue 11157)

Compared to the recently replaced `URL` polyfill, the new `ReadableStream` polyfill isn't being exported globally for two reasons:
 - We're currently checking for the existence of a global `ReadableStream` implementation when determining if the Fetch API will be used; please see `isFetchSupported` in the src/display/display_utils.js file.
 - Given that it's much newer functionality (compared to `URL`) and that not all browsers may implement all parts of the specification yet, not exposing the `ReadableStream` globally seems safer for now.",False
7f18c57c12297abffdddc1dd6af1b0f7e1339d8e,2019-09-23 15:11:19,Jonas Jenwald,"Fix the inconsistent return types for `Dict.{get, getAsync}`

Having these methods fallback to returning `null` in only *one* particular case seems outright wrong, since a ""falsy"" value will thus be handled incorrectly.
The only reason that this hasn't caused issues in practice is that there's only one call-site passing in three keys, and in that case we're trying to read a font file where falling back to `null` isn't a problem.",False
9596d702a993bf3fc8a9a3694bf960ee0b83cbda,2019-09-21 17:35:14,Tim van der Meij,"Merge pull request #11168 from timvandermeij/updates

Remove unmaintained localizations and update translations and packages",True
27dee5e9118d50796484bd7c5f5d73af52b80598,2019-09-21 17:12:27,Tim van der Meij,Update translations and packages,False
bdd28fd717596e6034eeda8fa921dec4c8de0517,2019-09-21 17:01:42,Tim van der Meij,"Remove unmaintained localizations

Fixes #11167.",False
e91836f8324e368743d05d5c305f999f37332f70,2019-09-21 01:29:25,Tim van der Meij,"Merge pull request #11165 from Snuffleupagus/eslint-return-rules

Enable a couple of `return` related ESLint rules",True
b822356c03aafcc61a9359b6a582dd794a4f926c,2019-09-20 18:00:03,Jonas Jenwald,"Enable a couple of `return` related ESLint rules

Please find additional details at:
 - https://eslint.org/docs/rules/no-return-await
 - https://eslint.org/docs/rules/no-useless-return",False
c289f3a969cfab14d00e4f575955ed4055c01e2a,2019-09-20 03:00:08,Tim van der Meij,"Merge pull request #11146 from timvandermeij/core-js

Replace our `URL` polyfill with the one from `core-js`",True
a03727892eaba99bb9ed09d5eef53550e65dcaea,2019-09-20 02:56:02,Tim van der Meij,"Merge pull request #11163 from stof/patch-1

Fix the link in the doc website",True
4e79404d4b55f9712972dd3fbd6c52dfc0d1e164,2019-09-19 21:33:40,Christophe Coevoet,"Fix the link in the doc website

Markdown syntax is not parsed inside an HTML table.",False
1f5ebfbf0c1b880a892fafd2b6a1cd2be89a65ae,2019-09-19 17:39:51,Tim van der Meij,"Replace our `URL` polyfill with the one from `core-js`

`core-js` polyfills have proven to be of good quality and using them
prevents us from having to maintain them ourselves.",False
c71a291317f3382608beb2480eb79eee7f0be23f,2019-09-19 17:28:36,Tim van der Meij,"Upgrade `core-js` to version 3.2.1

This only required changing the import paths. The `es` folder contains
all polyfills we need now. If we want to import everything, we need to
explicitly require the `index` file.",False
3da680cdfc213412b2a7e2d34701edf407bfbbdf,2019-09-19 16:45:11,Tim van der Meij,"Merge pull request #11158 from janpe2/gradient-stops

Avoid floating point inaccuracy in gradient color stops",True
58e5f366663a24b7cf53a484d857008320bc17f5,2019-09-19 16:44:27,Tim van der Meij,"Merge pull request #11159 from Snuffleupagus/issue-11150

For Type1 fonts, replace missing font dictionary /Widths entries with ones from the font data (issue 11150)",True
7af66c8c1216f2be7bdb4f52975bc4b2abb387e5,2019-09-19 03:21:53,Tim van der Meij,"Merge pull request #11155 from Snuffleupagus/MessageHandler-misc-cleanup

Miscellaneous (small) clean-up of the `MessageHandler` code",True
af22dc9b0cbeb3d6927adb7032996699630c27f1,2019-09-18 13:45:09,Jonas Jenwald,"For Type1 fonts, replace missing font dictionary /Widths entries with ones from the font data (issue 11150)

Hopefully this patch makes sense, and in order to reduce the regression risk the implementation ensures that only completely missing widths are being replaced.",False
911df237f31274da43443479f1eecce6828ba30c,2019-09-17 23:31:17,Jani Pehkonen,Avoid floating point inaccuracy in gradient color stops,False
4bd79ec4b3d1f4988fa186398fd79a3c017c20f9,2019-09-17 17:52:24,Jonas Jenwald,"Inline the `resolveOrReject` helper function at its call-sites in `MessageHandler`, and rename an `error` key to `reason`

Given that there's only a couple of call-sites, and that the helper function is really simple, it doesn't seem entirely necessary to keep it around. While fewer function calls is always a good thing, in this case the performance impact is small enough to be unmeasurable.

With *one* single exception the code in `MessageHandler` is using `reason` when passing around various Errors, hence this patch also renames an `error` key for consistency.",False
0617984b5944eaf7cb33bd44f0145e4a48f91fa1,2019-09-17 17:48:57,Jonas Jenwald,"Remove unnecessary `data.streamId` accesses in `MessageHandler._processStreamMessage`, and use a constant object shape in `MessageHandler.sendWithStream`

The `streamId` short-hand in `MessageHandler._processStreamMessage` was only used partially througout the method, which seemed kind of strange, hence that's fixed in this patch.
Furthermore, always giving the `streamController` object a constant shape in `MessageHandler.sendWithStream` cannot hurt either.",False
d7c7f1555182ac19eb6261c0e035289b281f0d8c,2019-09-15 19:13:31,Tim van der Meij,"Merge pull request #11145 from timvandermeij/updates

Update translations and packages",True
8c53b67ec83b207023ca89775f3ed2ae41379839,2019-09-15 19:05:32,Tim van der Meij,Update packages,False
7ce36644e3582494cdfb8f92124c5cbb4004458a,2019-09-15 19:01:44,Tim van der Meij,Update translations,False
822847f9ca19ebbbf9c2b87d3f95078eab714454,2019-09-15 18:17:21,Tim van der Meij,"Merge pull request #11106 from Snuffleupagus/getOperatorList-cancel

Abort, with a small delay, `getOperatorList` on the worker-thread when rendering is cancelled (PR 11069 follow-up)",True
281ed33e4313dd767c4928a95c39feb601f15b47,2019-09-14 15:00:32,Jonas Jenwald,"Abort, with a small delay, `getOperatorList` on the worker-thread when rendering is cancelled (PR 11069 follow-up)

With this patch we're finally able to abort worker-thread parsing of the `OperatorList`, rather than *only* aborting the main-thread rendering itself, when the `RenderTask.cancel` method is being called.
This will help improve perceived performance in the default viewer, especially when reading longer and more complex documents, since pages that've been scrolled out-of-view (and thus evicted from the cache) will no longer compete for parsing resources on the worker-thread.

*Please note:* With the implementation in this patch we're *not* aborting worker-thread parsing immediately on `RenderTask.cancel`, since that would lead to *worse* performance in many cases. For example: When zoom/rotation occurs in the viewer, while parsing/rendering is still ongoing, a `cancel` call will usually be (almost) immediately folled by a new `PDFPageProxy.render` call. In that case you obviously don't want to abort parsing on the worker-thread, since that would risk throwing away a partially parsed `OperatorList` and thus force unnecessary re-parsing which will regress perceived performance (especially for more complex documents).

When choosing a reasonable delay, before cancelling `getOperatorList` on the worker-thread when `RenderTask.cancel` is called, two different positions need to be considered:
 1. The delay needs to be short enough, since a timeout in the multiple seconds range would essentially make this entire functionality meaningless (by always allowing most/all pages enough time to finish parsing).

 2. The delay cannot be *too* short, since that would actually *reduce* performance in the zoom/rotation case outlined above. Furthermore, the time between `RenderTask.cancel` and `PDFPageProxy.render` calls will obviously be affected by both general computer performance and current CPU load.

It's certainly possible that the timeout may require some further tweaks, however the value settled on in this patch was easily *one order* of magnitude larger than the delta between cancel/render in my tests.",False
b86bdefcd91f1fb5026a8429e75a512f8d499209,2019-09-14 02:43:03,Tim van der Meij,"Merge pull request #11142 from Snuffleupagus/webL10n-rm-fireL10nReadyEvent

Stop dispatching a ""localized"" event from the webL10n library, since it's unused and may clash with the default viewer",True
6d1595b6692e1e1456bc81fcc0ce2b4f8a915342,2019-09-13 16:08:36,Jonas Jenwald,"Stop dispatching a ""localized"" event from the webL10n library, since it's unused and may clash with the default viewer

Currently this leads to confusing behaviour with `eventBusDispatchToDOM = true` set, since then there's *two* different ""localized"" events being fired.",False
12ff252751870bea861944f369a9ecf462c641d3,2019-09-12 03:26:06,Tim van der Meij,"Merge pull request #11134 from Snuffleupagus/addLinkAttributes-assert-url

Ensure that `addLinkAttributes` is always called with a valid `url` parameter",True
2d2ec11c551807f27357b3f3e7ed4f8d04af6d0a,2019-09-12 03:18:39,Tim van der Meij,"Merge pull request #11138 from Rob--W/issue11137-ignore-non-loadable-embeds

[CRX] Ignore auto-generated <embed> from Chrome",True
501e0b3db7e0a885e3b6bd164dae423d584e4bff,2019-09-11 19:26:02,Rob Wu,"[CRX] Ignore auto-generated <embed> from Chrome

Fixes #11137",False
00efff532cf4754d0335560a5f1afc894ec03417,2019-09-11 16:54:04,Jonas Jenwald,"Ensure that `addLinkAttributes` is always called with a valid `url` parameter

There's no good reason for calling this helper function without a `url` parameter, and this way we can prevent that from happening.
Note how the `PDFOutlineViewer` call-site was already doing the right thing here, and only the `LinkAnnotationElement` call-site needed a small adjustment to make it work.",False
b2856b16a5252f1afa0cb24d8be567fe73b1ddeb,2019-09-11 03:00:34,Tim van der Meij,"Merge pull request #11130 from Snuffleupagus/GetOperatorList-enqueue-signature

Don't `enqueue` unused properties when sending 'GetOperatorList' data from the worker-thread (PR 11069 follow-up)",True
7f55676c94172a4337d483786126757ce06f24cc,2019-09-11 02:59:26,Tim van der Meij,"Merge pull request #11133 from Snuffleupagus/ESLint_no-async-promise-executor

Enable the `no-async-promise-executor` ESLint rule",True
2351fee957f99cbc1cf37630284af653f7588a81,2019-09-10 23:02:45,Jonas Jenwald,"Enable the `no-async-promise-executor` ESLint rule

This rule is in the process of being rolled out in mozilla-central, and it helps avoid unnecessary `async` functions together with `new Promise(...)`.

Please see https://eslint.org/docs/rules/no-async-promise-executor for additional information.",False
4fa60f006bdc692da87173b205039e05557456ed,2019-09-10 02:08:54,Tim van der Meij,"Merge pull request #11129 from Snuffleupagus/animationStarted-setInitialView

Prevent ""offsetParent is not set -- cannot scroll"" errors when the viewer loads in e.g. a hidden <iframe>",True
12e1c91f73ac3fdab5da2bf432aedc1803755469,2019-09-09 21:11:26,Jonas Jenwald,"Don't `enqueue` unused properties when sending 'GetOperatorList' data from the worker-thread (PR 11069 follow-up)

With the changes made in PR 11069, it's no longer necessary to include the `pageIndex`/`intent` parameters when sending 'GetOperatorList' data. In the previous implementation these properties were used to associate the `OperatorList` with the correct `RenderTask`, however now that `ReadableStream`s are used that's handled automatically and it's thus dead code at this point.",False
e7baf2ab61d1ae2e0784fb5ab09b30ab922e26c0,2019-09-08 17:43:50,Jonas Jenwald,"Prevent ""offsetParent is not set -- cannot scroll"" errors when the viewer loads in e.g. a hidden <iframe>

Besides avoiding errors during loading, this also ensures that the document will be correctly scrolled/zoomed into view once the viewer becomes visible.
This ""new"" behaviour was always intended, see PR 2613, however various re-factoring over the years seem to have broken this (and I'm probably at least somewhat responsible for that).",False
4bf61197fadeb72be9061ac8369c612576ec73e4,2019-09-08 00:34:11,Tim van der Meij,"Merge pull request #11127 from Snuffleupagus/eslint-plugin-mozilla

Update the `eslint-plugin-mozilla` to the latest version (PR 10905 follow-up)",True
d63da81e7c8b3b581aa6ad1d028666fc0897cdcf,2019-09-07 16:22:37,Jonas Jenwald,"Update the `eslint-plugin-mozilla` to the latest version (PR 10905 follow-up)

This required adding a number of additional dependencies, based on https://dxr.mozilla.org/mozilla-central/rev/4aed8e10318f38571712350856bf9e61c5f84e1f/tools/lint/eslint/eslint-plugin-mozilla/package.json#32-37

Since this, implicitly, enabled ""prettier""[1] for the `extensions/firefox` directory a couple of small code changes were necessary as well.

---
[1] Generally speaking I'm wondering if that name is deliberately ironic, since the style it enforces is often times extremely weird and ugly :-P",False
37d5b80ba8212d081140cdb2b07a5fb7d206f765,2019-09-07 02:26:14,Tim van der Meij,"Merge pull request #11118 from Snuffleupagus/FetchBuiltInCMap-sendWithStream

Transfer, rather than copy, CMap data to the worker-thread",True
a79cb2d5f1a4f7d672ec243567b45f577a2513b2,2019-09-07 02:21:31,Tim van der Meij,"Merge pull request #11123 from Snuffleupagus/rm-api-postMessageTransfers

[api-minor] Remove the `postMessageTransfers` parameter, and thus the ability to manually disable transferring of data, from the API",True
7dea3f9389be0a8ea5e153a9695f67184e85b7c4,2019-09-05 16:39:54,Jonas Jenwald,"[api-minor] Remove the `postMessageTransfers` parameter, and thus the ability to manually disable transferring of data, from the API

By transfering, rather than copying, `ArrayBuffer`s between the main- and worker-threads, you can avoid unnecessary allocations by only having *one* copy of the same data.
Hence manually setting `postMessageTransfers: false`, when calling `getDocument`, is a performance footgun[1] which will do nothing but waste memory.

Given that every reasonably modern browser supports `postMessage` transfers[2], I really don't see why it should be possible to force-disable this functionality.
Looking at the browser support, for `postMessage` transfers[2], it's highly unlikely that PDF.js is even usable in browsers without it. However, the feature testing of `postMessage` transfers is kept for the time being just to err on the safe side.

---
[1] This is somewhat similar to the, now removed, `disableWorker` parameter which also provided API users a much too simple way of reducing performance.

[2] See e.g. https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/postMessage#Browser_compatibility and https://developer.mozilla.org/en-US/docs/Web/API/Transferable#Browser_compatibility",False
f0534b9b51fe3764d144e1a867b0b2645535caa9,2019-09-05 14:57:27,Jonas Jenwald,"Adjust the values sent, with the 'test' message, by the `WorkerMessageHandler.setup` method

Note how the sent values have inconsistent types, with a boolean in one case and an object in the other (normal) case.
Furthermore, explicitly sending a `supportTypedArray: true` property seems superfluous at least to me.",False
7212ff4eeac2696b2733bb8de09dbb5e0715d8bc,2019-09-05 14:57:22,Jonas Jenwald,"Stop checking for the `response` property, on `XMLHttpRequest`, when setting up the `WorkerMessageHandler`

This check was added in PR 2445, however it's no longer necessary since all data[1] is now loaded on the main-thread (and then transferred to the worker-thread).
Furthermore, by default the Fetch API is now (usually) used rather than `XMLHttpRequest`.

All in all, while these checks *were* necessary at one point that's no longer the case and they can thus be removed.

---
[1] This includes both the actual PDF data, as well as the CMap data.",False
f11a4ba7503d031a40e8dff6b1934f17372b0893,2019-09-04 15:16:04,Jonas Jenwald,"Transfer, rather than copy, CMap data to the worker-thread

It recently occurred to me that the CMap data should be an excellent candidate for transfering.
This will help reduce peak memory usage for PDF documents using CMaps, since transfering of data avoids duplicating it on both the main- and worker-threads.

Unfortunately it's not possible to actually transfer data when *returning* data through `sendWithPromise`, and another solution had to be used.
Initially I looked at using one message for requesting the data, and another message for returning the actual CMap data. While that should have worked, it would have meant adding a lot more complexity particularly on the worker-thread.
Hence the simplest solution, at least in my opinion, is to utilize `sendWithStream` since that makes it *really* easy to transfer the CMap data. (This required PR 11115 to land first, since otherwise CMap fetch errors won't propagate correctly to the worker-thread.)

Please note that the patch *purposely* only changes the API to Worker communication, and not the API *itself* since changing the interface of `CMapReaderFactory` would be a breaking change.
Furthermore, given the relatively small size of the `.bcmap` files (the largest one is smaller than the default range-request size) streaming doesn't really seem necessary either.",False
7e37eb42ad20833bd86ecfd298b12f3493b5fb09,2019-09-04 02:53:58,Tim van der Meij,"Merge pull request #11115 from Snuffleupagus/MessageHandler-postMessage-wrapReason

Ensure that `Error`s are handled correctly when using `postMessage` with Streams in `MessageHandler`",True
74f5a59f43e501d9603de64b7a9393e894d7cdce,2019-09-03 03:01:07,Jonas Jenwald,Ensure that the `cancel`/`error` methods on Streams are always called with valid `reason` arguments,False
02bdacef42bbaeeaea1ef5a6c1588d5f934cbb5c,2019-09-03 03:01:07,Jonas Jenwald,"Ensure that `Error`s are handled correctly when using `postMessage` with Streams in `MessageHandler`

Having recently worked with this code, it struck me that most of the `postMessage` calls where `Error`s are involved have never been correctly implemented (i.e. missing `wrapReason` calls).",False
e59b11860d485940de51ebb2c4684aefe8d338c1,2019-09-03 02:43:24,Tim van der Meij,"Merge pull request #11108 from timvandermeij/es6-annotations

Use more ES6 syntax in the annotation code",True
2866c8a39e01d2ce42dfa42ac324453b60cd8c54,2019-09-03 02:07:27,Tim van der Meij,"Use more ES6 syntax in `src/core/annotation.js`

`let` is converted to `const` where possible.",False
c37a2c040842c87dddb8b9e89071b71005087b48,2019-09-03 01:52:33,Tim van der Meij,"Merge pull request #11112 from Snuffleupagus/TESTING-rm-version-warn

Remove the API/Worker version warning message in `TESTING` mode",True
71477dc5b10c257d2c6538e11b307ca70e9452ae,2019-09-03 01:49:31,Tim van der Meij,"Merge pull request #11111 from Snuffleupagus/MessageHandler-resolveCall

Inline the `resolveCall` helper function at its call-sites in `MessageHandler`",True
229f6f34d1aff09c27e8d5a5b902069abb72ce05,2019-09-01 20:17:26,Jonas Jenwald,"Remove the API/Worker version warning message in `TESTING` mode

The warning messages turn out to be more annoying than helpful when looking at the `console` during tests, so let's just remove them.",False
cd82b81bc797b3664ec1aa63afcd9b1e536563fb,2019-09-01 17:10:19,Jonas Jenwald,"Inline the `resolveCall` helper function at its call-sites in `MessageHandler`

There's only three call-sites and one of them doesn't even need the complete functionality of `resolveCall`, hence it seems reasonable to just inline this code.
An additional benefit of this is that the `Function.prototype.apply()` instance can also be converted into ""normal"" function calls, which should be a tiny bit more efficient.

The patch also replaces a number of unnecessary arrow functions, in relevant parts of the `MessageHandler` code, with ""normal"" functions instead.
Finally, all `Promise.resolve().then(...)` calls are replaced with `new Promise(...)` instead since the latter is a tiny bit more efficient. This also explains the test failures on the Linux bot, with a prior version of the patch, since the `Promise.resolve().then(...)` format essentially creates two Promises thus causing additional delay.",False
10165c070ee492e17650a5c0f8377bde219e1727,2019-09-01 15:57:08,Tim van der Meij,"Merge pull request #11110 from Snuffleupagus/MessageHandler-scope

Remove support for the `scope` parameter in the `MessageHandler.on` method",True
055f03938b0134fb2efb72e63ad6d984c83c518b,2019-09-01 12:54:15,Jonas Jenwald,"Remove support for the `scope` parameter in the `MessageHandler.on` method

At this point in time it's easy to convert the `MessageHandler.on` call-sites to use arrow functions, and thus let the JavaScript engine handle scopes for us, rather than having to manually keep references to the relevant scopes in `MessageHandler`.[1]
An additional benefit of this is that a couple of `Function.prototype.call()` instances can now be converted into ""normal"" function calls, which should be a tiny bit more efficient.

All in all, I don't see any compelling reason why it'd be necessary to keep supporting custom `scope`s in the `MessageHandler` implementation.

---
[1] In the event that a custom scope is ever needed, simply using `bind` on the handler function when calling `MessageHandler.on` ought to work as well.",False
49018482dcced620b0db02dd8313f52278364c68,2019-08-31 20:10:39,Tim van der Meij,"Use more ES6 syntax in `src/display/annotation_layer.js`

`let` is converted to `const` where possible, `var` usage is disabled
and template strings are used where possible.",False
d1e6d427cd502923e23b668f6172cc3927c3c0f2,2019-08-31 03:36:17,Tim van der Meij,"Merge pull request #11107 from Snuffleupagus/MessageHandler-postMessage

Various `MessageHandler` improvements when using Streams",True
f71ea2de0e1064939c7cf7f1683807a037307adc,2019-08-30 23:06:10,Jonas Jenwald,"Remove the `makeReasonSerializable` helper function, and use `wrapReason` instead, in `src/shared/message_handler.js`

Since `wrapReason` and `makeReasonSerializable` are essentially functionally equivalent it doesn't seem necessary to keep both of them around, especially when `makeReasonSerializable` only has a *single* call-site.",False
4e6a9b54c792419ff5e3dff9258f7c07d533af1c,2019-08-30 16:57:18,Jonas Jenwald,"Change the internal `stream` property, as sent when Streams are used, from a String to a Number

Given that the `stream` property is an internal implementation detail, changing its type shouldn't be a problem. By using Numbers instead, we can avoid unnecessary String allocations when creating/processing Streams.",False
252a3e35fb77de47e6e7202a63a54129556ceb84,2019-08-30 16:02:20,Jonas Jenwald,"Reduce the amount of unnecessary function calls and object allocations, in `MessageHandler`, when using Streams

With PR 11069 we're now using Streams for OperatorList parsing (in addition to just TextContent parsing), which brings the nice benefit of being able to easily abort parsing on the worker-thread thus saving resources.

However, since we're now creating many more `ReadableStream` there appears to be a tiny bit more overhead because of it (giving ~1% slower runtime of `browsertest` on the bots). In this case we're just going to have to accept such a small regression, since the benefits of using Streams clearly outweighs it.

What we *can* do here, is to try and make the Streams part of the `MessageHandler` implementation slightly more efficient by e.g. removing unnecessary function calls (which has been helpful in other parts of the code-base). To that end, this patch makes the following changes:

 - Actually support `transfers` in `MessageHandler.sendWithStream`, since the parameter was being ignored.

 - Inline the `sendStreamRequest`/`sendStreamResponse` helper functions at their respective call-sites. Obviously this causes some amount of code duplication, however I still think this change seems reasonable since for each call-site:
   - It avoids making one unnecessary function call.
   - It avoids allocating one temporary object.
   - It avoids sending, and thus structure clone, various undefined object properties.

 - Inline objects in the `MessageHandler.{send, sendWithPromise}` methods.

 - Finally, directly call `comObj.postMessage` in various methods when `transfers` are *not* present, rather than calling `MessageHandler.postMessage`, to further reduce the amount of function calls.",False
ae0d9e8c2a629bfe77f5fea409b232377a9dfd36,2019-08-30 15:05:05,Jonas Jenwald,"Replace some instances of implicit `function.bind(this)` usage, in `src/display/api.js`, with arrow functions instead",False
3dfce2d4ef0ed31e81c57d7c0cac860bb55598fe,2019-08-29 02:55:58,Tim van der Meij,"Merge pull request #11104 from Snuffleupagus/textLayer-style

[TextLayer] Avoid unnecessary font updates in `_layoutText` and remove `setAttribute` usage in `appendText`",True
9f592ebf25b6c5a3cd9cbb88036c6ac6914a040d,2019-08-29 02:41:31,Tim van der Meij,"Merge pull request #11102 from mozilla/dependabot/npm_and_yarn/mixin-deep-1.3.2

Bump mixin-deep from 1.3.1 to 1.3.2",True
667e548e5febc108bd824819e0ca135cb0082147,2019-08-28 20:22:09,Jonas Jenwald,"[TextLayer] Remove `setAttribute` usage in `appendText` (issue 8066)

One of the motivations for using `setAttribute` in the first place was to support more efficient DOM updates in the `expandTextDivs` method, since performance of the `enhanceTextSelection` mode can be somewhat bad when there's a lot of `textDivs` on the page.

With recent `TextLayer` changes/optimizations it's no longer necessary to store a complete `style`-string for every `textDiv`, and we can thus re-visit the `setAttribute` usage.
Note that with the current code, in `appendText`, there's only *one* string per `textDiv` which avoids a bunch of temporary strings. While the changes in this patch means that there's now *three* strings per `textDiv` instead, the total length of these strings are now quite a bit shorter (42 characters to be exact).",False
106b239c5d9319c454bbf8db7ad75215a9f887cc,2019-08-28 19:38:06,Jonas Jenwald,"[TextLayer] Avoid unnecessary font updates in `_layoutText` (PR 11097 follow-up)

*This should obviously have been done in PR 11097, but for some reason I completely overlooked it; sorry about that.*

There's no good reason to update the font unless you're actually going to measure the width of the textContent. This can reduce unnecessary font switching a fair bit, even for documents which are somewhat simple/short (in e.g. the `tracemonkey.pdf` file this cuts the amount of font switches almost in half).",False
594c49c5715a28d3d8a8c5ef95c41b5fa565bd04,2019-08-28 06:03:12,dependabot[bot],"Bump mixin-deep from 1.3.1 to 1.3.2

Bumps [mixin-deep](https://github.com/jonschlinkert/mixin-deep) from 1.3.1 to 1.3.2.
- [Release notes](https://github.com/jonschlinkert/mixin-deep/releases)
- [Commits](https://github.com/jonschlinkert/mixin-deep/compare/1.3.1...1.3.2)

Signed-off-by: dependabot[bot] <support@github.com>",False
184d4166394a63f5baf33249ad942e865f09bee4,2019-08-25 19:38:51,Tim van der Meij,"Merge pull request #11097 from Snuffleupagus/textLayer-measure-width

[TextLayer] Only measure the width of the text, in `_layoutText`, for multi-char text divs",True
d64b49831d5fcdf225686655e9f43081a63ab728,2019-08-25 18:52:51,Tim van der Meij,"Merge pull request #11095 from timvandermeij/api-attachments-unit-test

Include a reduced, non-linked PDF file for the attachments API unit test",True
09df1ee0ce420285b433f30586aebc6fb24e76ee,2019-08-25 18:44:57,Tim van der Meij,"Include a reduced, non-linked PDF file for the attachments API unit test",False
97d3294d3ddfa47a510015181fbc4be47a022827,2019-08-25 18:35:52,Tim van der Meij,"Merge pull request #11096 from timvandermeij/updates

Update translations/packages and upgrade to `eslint` version 6",True
a1398048e54f615ae7cbb546d3930a124cd11701,2019-08-25 16:39:04,Jonas Jenwald,"[TextLayer] Simplify building of the *expanded* transform in `expandTextDivs`

Rather than essentially re-computing the `originalTransform` every time, we can simply use it directly instead.",False
b68f7bb40473d8c5b63c1fb3e13a443756c3bbf5,2019-08-25 16:02:49,Jonas Jenwald,"[TextLayer] Only measure the width of the text, in `_layoutText`, for multi-char text divs

For performance reasons single-char text divs aren't being scaled, as outlined in a comment in `appendText`. Hence it doesn't seem necessary, or even a good idea, to unconditionally measuring the width of the text in `_layoutText`.",False
215c546fd5b32f89ce5a9dd6690364d782afeb35,2019-08-24 23:51:10,Tim van der Meij,"Upgrade to `eslint` version 6

This major version bump required two changes:

- The global line in the mobile viewer example should be removed because
  the `.eslintrc` file already defines these globals and with the new
  `eslint` version we otherwise get an error saying ""'pdfjsLib' is already
  defined as a built-in global variable"".
- The ECMA version for the examples must be set to 6 since we're using
  modules, otherwise we get an error saying ""sourceType 'module' is not
  supported when ecmaVersion < 2015"". It turns out that the previous
  version of `eslint` already used ECMA version 6 silently even though
  we set 5, see https://github.com/eslint/eslint/issues/9687#issuecomment-432413384,
  so in terms of our code nothing really changes.",False
d9cd890228e703462851e5ef49b53e8ca070f0df,2019-08-24 23:38:09,Tim van der Meij,Update packages,False
ce1acff5f05b3e42586ba339715ec4396da16e66,2019-08-24 23:35:47,Tim van der Meij,Update translations,False
56ae7a669099b3439b325e434fc6d981910db2c6,2019-08-24 23:01:00,Tim van der Meij,"Merge pull request #11069 from Snuffleupagus/getoplist-stream

Use streams for OperatorList chunking (issue 10023)",True
711040ecc57fbf7aac1f60d1ade865aee348f245,2019-08-24 19:26:41,Jonas Jenwald,"Stop re-throwing errors in the 'GetOperatorList' and 'GetTextContent' handlers, in `src/core/worker.js`

These functions aren't returning anything, now that they're using `ReadableStream`s, and it thus doesn't seem necessary to re-throw errors (also given the console message that's caused by it).",False
66e0dd1b06b299cfcbb1b7e629ac34df00d27fb4,2019-08-24 19:26:40,Yury Delendik,"Use streams for OperatorList chunking (issue 10023)

*Please note:* The majority of this patch was written by Yury, and it's simply been rebased and slightly extended to prevent issues when dealing with `RenderingCancelledException`.

By leveraging streams this (finally) provides a simple way in which parsing can be aborted on the worker-thread, which will ultimately help save resources.
With this patch worker-thread parsing will *only* be aborted when the document is destroyed, and not when rendering is cancelled. There's a couple of reasons for this:

 - The API currently expects the *entire* OperatorList to be extracted, or an Error to occur, once it's been started. Hence additional re-factoring/re-writing of the API code will be necessary to properly support cancelling and re-starting of OperatorList parsing in cases where the `lastChunk` hasn't yet been seen.
 - Even with the above addressed, immediately cancelling when encountering a `RenderingCancelledException` will lead to worse performance in e.g. the default viewer. When zooming and/or rotation of the document occurs it's very likely that `cancel` will be (almost) immediately followed by a new `render` call. In that case you'd obviously *not* want to abort parsing on the worker-thread, since then you'd risk throwing away a partially parsed Page and thus be forced to re-parse it again which will regress perceived performance.
 - This patch is already *somewhat* risky, given that it touches fundamentally important/critical code, and trying to keep it somewhat small should hopefully reduce the risk of regressions (and simplify reviewing as well).

Time permitting, once this has landed and been in Nightly for awhile, I'll try to work on the remaining points outlined above.

Co-Authored-By: Yury Delendik <ydelendik@mozilla.com>
Co-Authored-By: Jonas Jenwald <jonas.jenwald@gmail.com>",False
ee75fc1298acf08d65486972c305c82ef6051d43,2019-08-24 18:15:21,Tim van der Meij,"Merge pull request #11092 from Snuffleupagus/textLayer-expandTextDivs-padding

[TextLayer] Use an Array to build the total `padding`, rather than concatenating Strings, in `expandTextDivs`",True
42213f6a2c502c64ed7dd3c979db2a723597c626,2019-08-24 18:06:53,Tim van der Meij,"Merge pull request #11093 from Priestch/shorthand_after_print

Shorthand afterPrint signature in app.js",True
000780d27e9b92b3f50af0cd4d9ddb1a6649173a,2019-08-24 15:56:25,Priestch,Use shorthand method signature for `afterPrint` in `web/app.js`,False
29a2516e4cf853ab57e34c08d38947f210909d3a,2019-08-24 04:43:59,Jonas Jenwald,"[TextLayer] Use an Array to build the total `padding`, rather than concatenating Strings, in `expandTextDivs`

Furthermore, it's possible to re-use the same Array for all `textDiv`s on the page and the resulting padding string also becomes a lot more compact.
Please note that the `paddingLeft` branch was moved, since the padding values need to be ordered as `top, right, bottom, left`.

Finally, with this re-factoring it's no longer necessary to cache the original `style` string for every `textDiv` when `enhanceTextSelection` is enabled.",False
edbebb8bf7dee547930946a1d55268b815d55d5f,2019-08-24 02:42:42,Tim van der Meij,"Merge pull request #11090 from Snuffleupagus/textLayer-expandTextDivs-transform

[TextLayer] Use an Array to build the total `transform`, rather than concatenating Strings, in `expandTextDivs`",True
d1ef08e1472f86965f4a8add21c5527de0d0b83e,2019-08-24 02:38:39,Tim van der Meij,"Merge pull request #11091 from Snuffleupagus/textLayer-expandTextDivs-valid-padding

[TextLayer] Only handle positive padding values in `expandTextDivs`",True
932fcacff863041ef4aa91eab7dc53f73551b463,2019-08-23 16:46:20,Jonas Jenwald,"[TextLayer] Only handle positive padding values in `expandTextDivs`

Given that browsers will reject padding values smaller than zero (which may be caused by limited numerical precision during calculations in the `expand` code), it makes no sense to include those when expanding the `textDiv`s.",False
37e8a8189b8c6f89f1c245ca9c8484188c7cde4f,2019-08-23 15:47:12,Jonas Jenwald,"[TextLayer] Use an Array to build the total `transform`, rather than concatenating Strings, in `expandTextDivs`

Furthermore, it's possible to re-use the same Array for all `textDiv`s on the page.",False
490deb1b653d66e3107c2ad4b2f8a4c7c71c3108,2019-08-23 02:39:07,Tim van der Meij,"Merge pull request #11086 from Snuffleupagus/textLayer-originalTransform

[TextLayer] Only cache the `originalTransform` when `enhanceTextSelection` is enabled",True
31f319301d3797f1aef41ea77a991ed1100a7086,2019-08-22 23:43:11,Brendan Dahl,"Merge pull request #11087 from brendandahl/disable-links

Add a way to disable external links.",True
a519ceffee11f3308a37938800aa79b3aad23b1d,2019-08-22 18:17:44,Jonas Jenwald,[TextLayer] Use template strings when updating the font property in the `_layoutText` method,False
6afe3221b75d86ba97b3dae7644aabfcd58fa1c6,2019-08-22 18:17:18,Jonas Jenwald,"[TextLayer] Only cache the `originalTransform` when `enhanceTextSelection` is enabled

Given that this is completely unused in ""regular"" text-selection mode, there's no reason to unconditionally store one string for every `textDiv`.",False
98e989116c839f2c3b9d2b16752c8ad6431214c3,2019-08-21 23:50:41,Brendan Dahl,Add a way to disable external links.,False
52c6b3c138b21d2a1e31ea5496532fef340b20e0,2019-08-21 02:18:10,Tim van der Meij,"Merge pull request #11079 from Snuffleupagus/textLayer-memory

[TextLayer] Only cache the current `textDiv` style when `enhanceTextSelection` is enabled and use template strings in `expandTextDivs``",True
78f9ab53fc6285d01b9de112715ee3a3a24581f5,2019-08-21 02:08:58,Tim van der Meij,"Merge pull request #11081 from dhuang612/document-pdfjs-dist/webpack

added in information about pdfjs/webpack",True
d52d1e2d09e5706f4f9a6fe8693e88c2bfa84a74,2019-08-20 19:50:32,dhuang612,"added in information about pdfjs/webpack

updated readme with corrections",False
431a264126898304a48a52b8a3c045a7c5d43a96,2019-08-19 15:39:18,Jonas Jenwald,"[TextLayer] Reduce the amount of intermediary strings in `expandTextDivs`

By using template strings, we can avoid some unnecessary string allocations (which is also helped by shortening a variable name).",False
45dfad8640a81c325c47e422ba41109816c64809,2019-08-19 14:32:56,Jonas Jenwald,"[TextLayer] Only cache the current `textDiv` style when `enhanceTextSelection` is enabled

This will help save a little bit of memory, by not storing one unused string for each `textDiv` in regular text-selection mode.",False
852fc955bd6ffb5f2b83a3cf745d9b7b49d2b9e5,2019-08-18 18:14:31,Tim van der Meij,"Merge pull request #11076 from Snuffleupagus/XRef-fetch-isRef/cache

Replace the `XRef.cache` Array with a Map instead",True
1cd9a28c8126e8461b7fe8c8a253d6d7ee328236,2019-08-18 15:37:18,Jonas Jenwald,"Replace the `XRef.cache` Array with a Map instead

Given that the different types of `Stream`s will never be cached, this thus implies that the `XRef.cache` Array will *always* be more-or-less sparse.
Generally speaking, the longer the document the more sparse the `XRef.cache` will thus become. For example, looking at the `pdf.pdf` file from the test-suite: The length of the `XRef.cache` Array will be a few hundred thousand elements, with approximately 95% of them being empty.

Hence it seems pretty clear that an Array isn't really the best data-structure for this kind of cache, and this patch thus changes it to a Map instead.

This patch-series was tested using the PDF file from issue 2618, i.e. http://bugzilla-attachments.gnome.org/attachment.cgi?id=226471, with the following manifest file:
```
[
    {  ""id"": ""issue2618"",
       ""file"": ""../web/pdfs/issue2618.pdf"",
       ""md5"": """",
       ""rounds"": 200,
       ""type"": ""eq""
    }
]
```

which gave the following results when comparing this patch-series against the `master` branch:
```
-- Grouped By browser, stat --
browser | stat         | Count | Baseline(ms) | Current(ms) | +/- |    %  | Result(P<.05)
------- | ------------ | ----- | ------------ | ----------- | --- | ----- | -------------
Firefox | Overall      |   200 |         2736 |        2736 |   1 |  0.02 |
Firefox | Page Request |   200 |            2 |           2 |   0 | -8.26 |        faster
Firefox | Rendering    |   200 |         2733 |        2734 |   1 |  0.03 |
```",False
34a53b9f5df4909d7e306a9f070994093f392cd3,2019-08-18 15:27:48,Jonas Jenwald,"Inline the `isRef` checks in the various `XRef.fetch` related methods

The relevant methods are usually not hot enough for these changes to have an easily measurable effect, however there's been a lot of other cases where similiar inlining has helped performance. (And these changes may help offset the changes made in the next patch.)",False
1565d1849d64ea9c7a40e7f6fb93e67ee791afdb,2019-08-17 16:56:35,Tim van der Meij,"Merge pull request #11073 from brendandahl/code-point

Move polyfill for codePointAt to String prototype.",True
c8129b878755b0885f09ee4e6ae6efc44eefe8ff,2019-08-17 03:02:43,Brendan Dahl,"Move polyfill for codePointAt to String prototype.

This method belongs on the prototype not the String object.",False
20181b65d47d46db8f10ceb641daaa2990b55100,2019-08-17 02:24:55,Tim van der Meij,"Merge pull request #11070 from Snuffleupagus/Parser-getObj-rm-isString

Inline the `isString` check in the `Parser.getObj` method",True
40d3916f3110343e1b9db67455e28d49c19856f5,2019-08-16 17:21:41,Jonas Jenwald,"Reduce the number of temporary variables in the `Parser.getObj` method

This avoids allocating approximately 1.7 million short-lived variables when loading the PDF file from issue 2618, i.e. http://bugzilla-attachments.gnome.org/attachment.cgi?id=226471, in the default viewer.",False
7728a6630c63492ed56f2adb65b919f689522286,2019-08-16 14:04:24,Jonas Jenwald,"Inline the `isString` check in the `Parser.getObj` method

For very large and complex PDF files this will help performance *slightly*, since `Parser.getObj` is called *a lot* during parsing in the worker.

This patch was tested using the PDF file from issue 2618, i.e. http://bugzilla-attachments.gnome.org/attachment.cgi?id=226471, with the following manifest file:
```
[
    {  ""id"": ""issue2618"",
       ""file"": ""../web/pdfs/issue2618.pdf"",
       ""md5"": """",
       ""rounds"": 200,
       ""type"": ""eq""
    }
]
```

which gave the following results when comparing this patch against the `master` branch:
```
-- Grouped By browser, stat --
browser | stat         | Count | Baseline(ms) | Current(ms) | +/- |    %  | Result(P<.05)
------- | ------------ | ----- | ------------ | ----------- | --- | ----- | -------------
Firefox | Overall      |   200 |         2847 |        2830 | -17 | -0.60 |        faster
Firefox | Page Request |   200 |            2 |           2 |   0 | -7.14 |
Firefox | Rendering    |   200 |         2844 |        2827 | -17 | -0.60 |        faster
```",False
02dcd20263b673dc8c8325716960c28845221f91,2019-08-12 00:27:11,Tim van der Meij,"Merge pull request #11064 from Snuffleupagus/Util-class

Convert the `src/shared/util.js` file to ES6 syntax",True
7f456b3e2e70752996e03dc8de8ea7d38ea4d2ae,2019-08-11 18:05:35,Jonas Jenwald,"Replace of all usages of `var` with `let`/`const` in the `src/shared/util.js` file

Also removes a couple of unnecessary (temporary) variable assigments in `arraysToBytes` and uses template strings in a few spots.",False
f6c4a1f08088c707be90a774ae394951d94133de,2019-08-11 18:05:35,Jonas Jenwald,"Convert `Util` to a class with static methods

Also replaces `var` with `const` in all the relevant code.",False
7ee370a394bcc4cc1a2b5af90ee8abf4571ed69b,2019-08-11 18:03:52,Jonas Jenwald,"Remove the `skipEmpty` parameter from `Util.intersect` (PR 11059 follow-up)

Looking at this again, it struck me that added functionality in `Util.intersect` is probably more confusing than helpful in general; sorry about the churn in this code!
Based on the parameter name you'd probably expect it to only match when the intersection is `[0, 0,  0, 0]` and not when only one component is zero, hence the `skipEmpty` parameter thus feels too tightly coupled to the `Page.view` getter.",False
85acc9acac4c7699303216727a6300a6097e4dd3,2019-08-11 17:18:35,Tim van der Meij,"Merge pull request #11062 from Snuffleupagus/misc-viewer-cleanup

Miscellaneous small clean-up of code in the `web/` folder",True
446ce88f81523945ec8bd08d19465717cac66f72,2019-08-10 19:10:33,Jonas Jenwald,"Remove the non-`PRODUCTION` only 'disablebcmaps' hash parameter

This was added in PR 4470, but doesn't appear to have been used since.
While it's certainly easy to understand how this was helpful during development of that PR, actually providing this hash parameter isn't going to work anymore given that the original CMap files were also removed from the repository.

I suppose that the hash parameter *could* be useful if you'd attempt to update the BCMap files, however that hasn't been attempted even once in over *five* years time. Furthermore, at this point using the `AppOptions` directly in that situation should also work fine.

All in all, this seems like a piece of old and unused code which we can simply remove now.",False
04a3dc65e47315fb32ef274a6275edfb5e3d0713,2019-08-10 19:08:33,Jonas Jenwald,"Move the sidebar `toggleButton` event listener into `PDFSidebar`

This is consistent with other functionality, such as e.g. `SecondaryToolbar` and `PDFFindBar`.",False
fbe8c6127c6299d72faada32dd89f7bf5933497e,2019-08-10 02:09:01,Tim van der Meij,"Merge pull request #11059 from Snuffleupagus/boundingBox-more-validation

Fallback gracefully when encountering corrupt PDF files with empty /MediaBox and /CropBox entries",True
85b570adfb99accd078d21fc45234249b0a658ad,2019-08-10 01:32:34,Tim van der Meij,"Merge pull request #11057 from Snuffleupagus/issue-11052

Handle some corrupt/truncated JPEG images that are missing the EOI (End of Image) marker (issue 11052)",True
d637b25e36412a6bb187b9e71e5329a9a2cee372,2019-08-09 13:48:13,Jonas Jenwald,"Fallback gracefully when encountering corrupt PDF files with empty /MediaBox and /CropBox entries

This is based on a real-world PDF file I encountered very recently[1], although I'm currently unable to recall where I saw it.
Note that different PDF viewers handle these sort of errors differently, with Adobe Reader outright failing to render the attached PDF file whereas PDFium mostly handles it ""correctly"".

The patch makes the following notable changes:
 - Refactor the `cropBox` and `mediaBox` getters, on the `Page`, to reduce unnecessary duplication. (This will also help in the future, if support for extracting additional page bounding boxes are added to the API.)
 - Ensure that the page bounding boxes, i.e. `cropBox` and `mediaBox`, are never empty to prevent issues/weirdness in the viewer.
 - Ensure that the `view` getter on the `Page` will never return an empty intersection of the `cropBox` and `mediaBox`.
 - Add an *optional* parameter to `Util.intersect`, to allow checking that the computed intersection isn't actually empty.
 - Change `Util.intersect` to have consistent return types, since Arrays are of type `Object` and falling back to returning a `Boolean` thus seem strange.

---

[1] In that case I believe that only the `cropBox` was empty, but it seemed like a good idea to attempt to fix a bunch of related cases all at once.",False
0f78fdb229939670839581da6cf9d15f8f846b44,2019-08-08 14:07:41,Jonas Jenwald,"Handle some corrupt/truncated JPEG images that are missing the EOI (End of Image) marker (issue 11052)

Note that even Adobe Reader cannot render the PDF file completely, which is always a good indication that it's corrupt.",False
aaef00ce5d4c4fadbec7cc27f03e18ca212b6e87,2019-08-08 02:46:02,Tim van der Meij,"Merge pull request #11051 from Snuffleupagus/view-array-compare

Actually compare the `cropBox` and `mediaBox` correctly in the `Page.view` getter",True
e9b7996f2f283da6bbd9655f08acf87422c1e289,2019-08-07 20:45:57,Jonas Jenwald,"Actually compare the `cropBox` and `mediaBox` correctly in the `Page.view` getter

The current code will only consider the `cropBox` and `mediaBox` as equal when they both point to the *same* underlying Array. In the case where a PDF file actually specifies both boxes independently, with the exact same values in each, the comparison will currently fail and lead to an unneeded intersection computation.",False
bb5e98195d4a9758cbb2f32ba6866df4acaf5db8,2019-08-07 02:20:36,Tim van der Meij,"Merge pull request #11047 from Snuffleupagus/issue-11045

Support corrupt PDF files with invalid/non-existent Group /CS entries (issue 11045)",True
e1aed05c443480265fa1228d2d448a4629353e70,2019-08-07 00:23:08,Brendan Dahl,"Merge pull request #11049 from brendandahl/telem-add-time

Add page rendered timestamp to telemetry.",True
47077f8de941841c4bf9022bdd1d683706eab2aa,2019-08-06 22:16:33,Brendan Dahl,Add page rendered timestamp to telemetry.,False
5ac9c7c384c896466f4fade66f6b569bb5baf555,2019-08-06 18:03:05,Jonas Jenwald,"Support corrupt PDF files with invalid/non-existent Group /CS entries (issue 11045)

The PDF file in question tries to reference a non-existent ColorSpace, which should be quite rare in practice.",False
a666f1ef00ea6f30b34e7d2fce724771a28375b7,2019-08-06 02:14:00,Tim van der Meij,"Merge pull request #11048 from Snuffleupagus/linkService-compact-pagesRefCache

Use more compact keys in `PDFLinkService._pagesRefCache`",True
9acaaf5126b7cb2b02dd72f45f42dfdf3d12c6b4,2019-08-05 21:36:32,Jonas Jenwald,"Use more compact keys in `PDFLinkService._pagesRefCache`

By using the same internal formatting here as in the `Ref.toString` method, in `src/core/primitives.js`, all cache-keys will become at least two bytes shorter (and most three bytes shorter).
Obviously this won't have a huge effect on memory since there's only one cache entry per page, but it nonetheless seems wasteful to use longer keys than strictly required.",False
be70ee236d73e7d387bd7b08424436ede2f34b76,2019-08-04 19:36:10,Tim van der Meij,"Merge pull request #11013 from timvandermeij/annotations-quadpoints

[api-minor] Implement quadpoints for annotations in the core layer",True
6c05a7653d60e8245efce15288f536e27b076d95,2019-08-03 01:38:37,Tim van der Meij,"Merge pull request #11038 from Snuffleupagus/getStats-objects

[api-minor] Fix completely broken `getStats` method by returning stats in Objects, rather than in Arrays (PR 11029 follow-up)",True
0276385e6e32351d65191a1c772727ef943af61f,2019-08-02 17:39:24,Jonas Jenwald,"[api-minor] Fix completely broken `getStats` method by returning stats in Objects, rather than in Arrays (PR 11029 follow-up)

With the changes to the `StreamType`/`FontType` ""enums"" in PR 11029, one unfortunate result is that `getStats` now *always* returns empty Arrays. Something that everyone, myself included, apparently missed is that you obviously cannot index an Array with Strings :-)

I wrongly assumed that the unit-tests would catch any bugs, but they apparently suffered from the same issue as the code in `src/core/`.

Another possible option could perhaps be to use `Set`s, rather than objects, but that will require larger changes since `LoopbackPort` (in `src/display/api.js`) doesn't support them.",False
9c8fe3142a6645233d2e5632639ee742e900aae3,2019-08-02 03:48:44,Tim van der Meij,"Merge pull request #11034 from Snuffleupagus/cancel-with-AbortException

Ensure that `ReadableStream`s are cancelled with actual Errors",True
e0b38bed3c0a61b46eaeb2d96793e79ff22ab43e,2019-08-02 03:41:02,Tim van der Meij,"Merge pull request #11029 from brendandahl/pdfjs-telemetry-update

[api-minor] Update telemetry to use 'categorical' histograms.",True
2754b09888a78a28e6dcee13789066e459f202a6,2019-08-02 03:06:55,Tim van der Meij,"Merge pull request #11033 from Snuffleupagus/viewer-close-updateLoadingIndicatorState

Ensure that the loading indicator, in the pageNumber input, is hidden when the viewer is closed",True
31d71808e7f663af9eccd18da10009102a1702d7,2019-08-01 22:21:02,Brendan Dahl,"[api-minor] Update telemetry to use 'categorical' histograms.

Firefox telemetry supports using string labels now. Convert our integers
that we used for categories to just use strings.

The upstream work will happen in:
https://bugzilla.mozilla.org/show_bug.cgi?id=1566882",False
a3150166ec80165a85763adabef3a62dbdee5258,2019-08-01 20:10:46,Jonas Jenwald,"Ensure that `ReadableStream`s are cancelled with actual Errors

There's a number of spots in the current code, and tests, where `cancel` methods are not called with appropriate arguments (leading to Promises not being rejected with Errors as intended).
In some cases the cancel `reason` is implicitly set to `undefined`, and in others the cancel `reason` is just a plain String. To address this inconsistency, the patch changes things such that cancelling is done with `AbortException`s everywhere instead.",False
cb1394c13dba94b2491359d0c885e4a89905e267,2019-08-01 20:00:33,Jonas Jenwald,"Ensure that the loading indicator, in the pageNumber input, is hidden when the viewer is closed

Currently the indicator may remain visible even after the document has been closed, which seems weird given that no page is either visible nor rendering :-)",False
d909b86b28958045e59869d6d1d0a95f43547ed3,2019-08-01 03:03:34,Tim van der Meij,"Merge pull request #11020 from Snuffleupagus/issue-11016

Add a work-around, in `glyphlist.js`, for bad PDF generators which use a non-standard `/f_f` string in the `Encoding` dictionary when referring to the ff ligature (issue 11016)",True
c5d837d2fe55e02a8152378c7a0662c30aaa7e37,2019-08-01 02:54:08,Tim van der Meij,"Merge pull request #11019 from wangsongyan/master

Decode URL encoded filenames from content disposition headers",True
c61205d9801ef4a7687324ebf49a8bc09919ee96,2019-07-31 07:03:56,wangsongyan,decode filename when match an urlencode filename from contentDispositionFilename,False
9ad50521b1c58dc21b0226a8668222c34b22d91a,2019-07-30 20:36:58,Jonas Jenwald,"Add a work-around, in `glyphlist.js`, for bad PDF generators which use a non-standard `/f_f` string in the `Encoding` dictionary when referring to the ff ligature (issue 11016)

This patch will not incur any (measurable) overhead, since the glyphlist is already quite long and one more entry won't really matter, which is important given that this sort of PDF corruption ought to be very rare.

Furthermore, this patch purposely does *not* add a bunch of similarly modified ligature names on pure speculation. Any similar additions, for other ligatures, should only be made if there's real-world examples of PDF files where that's actually necessary.",False
323b2eabcfc24e883e1a435828d94864bb46349f,2019-07-30 02:02:02,Tim van der Meij,"Merge pull request #11012 from Snuffleupagus/EvaluatorPreprocessor-read-fewer-function-calls

Reduce the number of function calls in `EvaluatorPreprocessor.read`",True
38ccb43436b7c15d14b826bf403ccdb313c2f12b,2019-07-29 12:13:36,Jonas Jenwald,"Reduce the number of function calls in `EvaluatorPreprocessor.read`

For very large and complex PDF files this will help performance slightly, since `EvaluatorPreprocessor.read` is called a lot during parsing in the worker.

This patch was tested using the PDF file from issue 2618, i.e. http://bugzilla-attachments.gnome.org/attachment.cgi?id=226471, using the following manifest file:
```
[
    {  ""id"": ""issue2618"",
       ""file"": ""../web/pdfs/issue2618.pdf"",
       ""md5"": """",
       ""rounds"": 200,
       ""type"": ""eq""
    }
]
```

This gave the following results when comparing this patch against the `master` branch:
```
-- Grouped By browser, stat --
browser | stat         | Count | Baseline(ms) | Current(ms) | +/- |    %  | Result(P<.05)
------- | ------------ | ----- | ------------ | ----------- | --- | ----- | -------------
Firefox | Overall      |   200 |         3402 |        3358 | -43 | -1.28 |        faster
Firefox | Page Request |   200 |            1 |           1 |   0 | 26.71 |
Firefox | Rendering    |   200 |         3401 |        3357 | -44 | -1.28 |        faster
```",False
9114004d5b47f8b4ec201aef7957d8401f5721b7,2019-07-29 00:06:21,Tim van der Meij,[api-minor] Implement quadpoints for annotations in the core layer,False
9b7208988639c4f1841e1b8abeaf6072b17f2f43,2019-07-24 01:58:36,Tim van der Meij,"Merge pull request #11003 from Snuffleupagus/webViewerWheel-supportedKeys

Ensure that setting the `zoomDisabledTimeout` isn't skipped, regardless of the supported zoom keys, when handling mouse wheel events (PR 7097 follow-up)",True
e066db47dc79768a10fa4fc05e98e78ff7d90bf2,2019-07-24 01:52:31,Tim van der Meij,"Merge pull request #10996 from Snuffleupagus/app-conditional-findbar

Avoid creating a `PDFFindBar` instance, in the Firefox built-in viewer, when not actually necessary",True
1eed5b7235e6393f26c5c11d2fe4d16117fb083d,2019-07-23 21:12:12,Jonas Jenwald,"Ensure that setting the `zoomDisabledTimeout` isn't skipped, regardless of the supported zoom keys, when handling mouse wheel events (PR 7097 follow-up)

*Possible follow-up:* It probably wouldn't hurt to try and shorten the `supportedMouseWheelZoomModifierKeys` name a bit, but I'm not attempting that here since it'd also require updating `PdfStreamConverter.jsm` in mozilla-central in order to be consistent.",False
46b61ff12e42acbfc149e51f4619ad1845c503ca,2019-07-23 11:21:14,Jonas Jenwald,"Avoid creating a `PDFFindBar` instance, in the Firefox built-in viewer, when not actually necessary

This is similar to how `PDFPresentationMode` isn't used when the Fullscreen API isn't supported.",False
1f287ec486309bb38b35f322b50eb3fd78ffd45d,2019-07-23 02:02:53,Tim van der Meij,"Merge pull request #11001 from Snuffleupagus/Parser-shift-rm-isCmd

Inline the `isCmd` check in the `Parser.shift` method",True
ff90aa4323c2017e74a3e480ae396744f23e9356,2019-07-22 15:37:36,Jonas Jenwald,"Inline the `isCmd` check in the `Parser.shift` method

For very large and complex PDF files this will help performance slightly, since `Parser.shift` is called *a lot* during parsing.

This patch was tested using the PDF file from issue 2618, i.e. http://bugzilla-attachments.gnome.org/attachment.cgi?id=226471 (with well over *four million* `Parser.shift` calls for just the one page), using the following manifest file:
```
[
    {  ""id"": ""issue2618"",
       ""file"": ""../web/pdfs/issue2618.pdf"",
       ""md5"": """",
       ""rounds"": 100,
       ""type"": ""eq""
    }
]
```

This gave the following results when comparing this patch against the `master` branch:
```
-- Grouped By browser, stat --
browser | stat         | Count | Baseline(ms) | Current(ms) | +/- |    %  | Result(P<.05)
------- | ------------ | ----- | ------------ | ----------- | --- | ----- | -------------
Firefox | Overall      |   100 |         3386 |        3322 | -65 | -1.92 |        faster
Firefox | Page Request |   100 |            1 |           1 |   0 | -8.08 |
Firefox | Rendering    |   100 |         3385 |        3321 | -65 | -1.92 |        faster
```",False
71d9f5f860a7ba3e7971c202fad78f8efe4f5b89,2019-07-21 16:12:26,Tim van der Meij,"Merge pull request #10995 from Snuffleupagus/app-rm-one-setFileSize

Remove an unnecessary `PDFDocumentProperties.setFileSize` call, relevant for the Firefox built-in viewer, and use the ""normal"" code-path in `PDFViewerApplication.open` instead",True
53a854bb0a77cb74a1a0ed03b1fce4af6495adf8,2019-07-21 15:08:17,Jonas Jenwald,"Remove an unnecessary `PDFDocumentProperties.setFileSize` call, relevant for the Firefox built-in viewer, and use the ""normal"" code-path in `PDFViewerApplication.open` instead

Since calling `getDocument` with a `PDFDataRangeTransport` argument will always unconditionally override a manually provided `length` argument, see https://github.com/mozilla/pdf.js/blob/a1a667809f286b761644bf34a4fb21dd524da8c8/src/display/api.js#L390-L394, this patch should thus be safe.",False
a1a667809f286b761644bf34a4fb21dd524da8c8,2019-07-20 17:27:52,Tim van der Meij,"Merge pull request #10993 from Snuffleupagus/AppOption-docBaseUrl

Add the `docBaseUrl` API parameter to `AppOptions` in the viewer",True
ba2c042a750192646923d0025d74cf275487b49c,2019-07-20 17:09:34,Jonas Jenwald,"Add the `docBaseUrl` API parameter to `AppOptions` in the viewer

This unfortunately required a bit of special handling, to correctly deal with the various extension builds.",False
0cc0789af3c75d1e7c31315b288ed584283ca923,2019-07-20 02:21:21,Tim van der Meij,"Merge pull request #10986 from Snuffleupagus/inline-ensureByte-ensureRange

Attempt to significantly reduce the number of `ChunkedStream.{ensureByte, ensureRange}` calls by inlining the `this.progressiveDataLength` checks at the call-sites",True
acef5bfd16dd70e58e7d268149416b27717c359a,2019-07-20 02:12:07,Tim van der Meij,"Merge pull request #10979 from Snuffleupagus/firefox-zoomreset

[Firefox] Re-factor the 'zoomreset' message handling in the viewer (PR 10652 follow-up)",True
b964df53dac298d01441b99ae3fc58c0bfe4d5d1,2019-07-20 02:05:41,Tim van der Meij,"Merge pull request #10990 from Snuffleupagus/onBeforeDraw-onAfterDraw

Refactor the `onBeforeDraw`/`onAfterDraw` functionality used in `BaseViewer` and `PDFPageView`",True
98c4c646cb4c52afc3849421aaecfe8b5f3a5eb2,2019-07-20 01:55:13,Tim van der Meij,"Merge pull request #10987 from mozilla/dependabot/npm_and_yarn/js-yaml-3.13.1

Bump js-yaml from 3.12.0 to 3.13.1",True
366eebeb0f9f9a1c5c69c6ef8cecbea2bdf344f3,2019-07-19 16:27:14,Jonas Jenwald,"Refactor the `onBeforeDraw`/`onAfterDraw` functionality used in `BaseViewer` and `PDFPageView`

This functionality is very old, and pre-dates e.g. the introduction of the `EventBus` by a number of years. Rather than attaching two callback functions to every single `PDFPageView` instance, it's thus now possible to utilize the `EventBus` such that you only need a grand total of two listeners to achieve the same result.

For the `onAfterDraw` callback the replacement is particularly simple, given that a 'pagerendered' event is already being dispatched in the appropriate spot. An added benefit here is the ability to remove the event listener, since we only ever care about *one* (arbitrary) page being rendered for the `BaseViewer.onePageRendered` promise.

For the `onBeforeDraw` callback, a new 'pagerender' event was thus added to replace the callback.",False
808f7db5862068c81bdf4a924ee44d14eebe3fd3,2019-07-19 05:34:03,dependabot[bot],"Bump js-yaml from 3.12.0 to 3.13.1

Bumps [js-yaml](https://github.com/nodeca/js-yaml) from 3.12.0 to 3.13.1.
- [Release notes](https://github.com/nodeca/js-yaml/releases)
- [Changelog](https://github.com/nodeca/js-yaml/blob/master/CHANGELOG.md)
- [Commits](https://github.com/nodeca/js-yaml/compare/3.12.0...3.13.1)

Signed-off-by: dependabot[bot] <support@github.com>",False
b5254f274588839d92b28df3f9d89344351b6d8c,2019-07-18 21:00:22,Jonas Jenwald,"Attempt to significantly reduce the number of `ChunkedStream.{ensureByte, ensureRange}` calls by inlining the `this.progressiveDataLength` checks at the call-sites

The number of in particular `ChunkedStream.ensureByte` calls is often absolutely *huge* (on the order of million calls) when loading and rendering even moderately complicated PDF files, which isn't entirely surprising considering that the `getByte`/`getBytes`/`peekByte`/`peekBytes` methods are used for essentially all data reading/parsing.

The idea implemented in this patch is to inline an inverted `progressiveDataLength` check at all of the `ensureByte`/`ensureRange` call-sites, which in practice will often result in *several* orders of magnitude fewer function calls.
Obviously this patch will only help if the browser supports streaming, which all reasonably modern browsers now do (including the Firefox built-in PDF viewer), and assuming that the user didn't set the `disableStream` option (e.g. for using `disableAutoFetch`). However, I think we should be able to improve performance for the default out-of-the-box use case, without worrying about e.g. older browsers (where this patch will thus incur *one* additional check before calling `ensureByte`/`ensureRange`).

This patch was inspired by the *first* commit in PR 5005, which was subsequently backed out in PR 5145 for causing regressions. Since the general idea of avoiding unnecessary function calls was really nice, I figured that re-attempting this in one way or another wouldn't be a bad idea.
Given that streaming is now supported, which it wasn't back then, using `progressiveDataLength` seemed like an easier approach in general since it also allowed supporting both `ensureByte` and `ensureRange`.

This sort of patch obviously needs data to back it up, hence I've benchmarked the changes using the following manifest file (with the default `tracemonkey` file):
```
[
    {  ""id"": ""tracemonkey-eq"",
       ""file"": ""pdfs/tracemonkey.pdf"",
       ""md5"": ""9a192d8b1a7dc652a19835f6f08098bd"",
       ""rounds"": 250,
       ""type"": ""eq""
    }
]
```

I get the following complete results when comparing this patch against the `master` branch:
```
-- Grouped By browser, stat --
browser | stat         | Count | Baseline(ms) | Current(ms) | +/- |    %  | Result(P<.05)
------- | ------------ | ----- | ------------ | ----------- | --- | ----- | -------------
Firefox | Overall      |  3500 |          140 |         134 |  -6 | -4.46 |        faster
Firefox | Page Request |  3500 |            2 |           2 |   0 | -0.10 |
Firefox | Rendering    |  3500 |          138 |         131 |  -6 | -4.54 |        faster
```

Here it's pretty clear that the patch does have a positive net effect, even for a PDF file of fairly moderate size and complexity. However, in this case it's probably interesting to also look at the results per page:
```
-- Grouped By page, stat --
page | stat         | Count | Baseline(ms) | Current(ms) | +/- |     %  | Result(P<.05)
---- | ------------ | ----- | ------------ | ----------- | --- | ------ | -------------
0    | Overall      |   250 |           74 |          75 |   1 |   0.69 |
0    | Page Request |   250 |            1 |           1 |   0 |  33.20 |
0    | Rendering    |   250 |           73 |          74 |   0 |   0.25 |
1    | Overall      |   250 |          123 |         121 |  -2 |  -1.87 |        faster
1    | Page Request |   250 |            3 |           2 |   0 | -11.73 |
1    | Rendering    |   250 |          121 |         119 |  -2 |  -1.67 |
2    | Overall      |   250 |           64 |          63 |  -1 |  -1.91 |
2    | Page Request |   250 |            1 |           1 |   0 |   8.81 |
2    | Rendering    |   250 |           63 |          62 |  -1 |  -2.13 |        faster
3    | Overall      |   250 |           97 |          97 |   0 |  -0.06 |
3    | Page Request |   250 |            1 |           1 |   0 |  25.37 |
3    | Rendering    |   250 |           96 |          95 |   0 |  -0.34 |
4    | Overall      |   250 |           97 |          97 |   0 |  -0.38 |
4    | Page Request |   250 |            1 |           1 |   0 |  -5.97 |
4    | Rendering    |   250 |           96 |          96 |   0 |  -0.27 |
5    | Overall      |   250 |           99 |          97 |  -3 |  -2.92 |
5    | Page Request |   250 |            2 |           1 |   0 | -17.20 |
5    | Rendering    |   250 |           98 |          95 |  -3 |  -2.68 |
6    | Overall      |   250 |           99 |          99 |   0 |  -0.14 |
6    | Page Request |   250 |            2 |           2 |   0 | -16.49 |
6    | Rendering    |   250 |           97 |          98 |   0 |   0.16 |
7    | Overall      |   250 |           96 |          95 |  -1 |  -0.55 |
7    | Page Request |   250 |            1 |           2 |   1 |  66.67 |        slower
7    | Rendering    |   250 |           95 |          94 |  -1 |  -1.19 |
8    | Overall      |   250 |           92 |          92 |  -1 |  -0.69 |
8    | Page Request |   250 |            1 |           1 |   0 | -17.60 |
8    | Rendering    |   250 |           91 |          91 |   0 |  -0.52 |
9    | Overall      |   250 |          112 |         112 |   0 |   0.29 |
9    | Page Request |   250 |            2 |           1 |   0 |  -7.92 |
9    | Rendering    |   250 |          110 |         111 |   0 |   0.37 |
10   | Overall      |   250 |          589 |         522 | -67 | -11.38 |        faster
10   | Page Request |   250 |           14 |          13 |   0 |  -1.26 |
10   | Rendering    |   250 |          575 |         508 | -67 | -11.62 |        faster
11   | Overall      |   250 |           66 |          66 |  -1 |  -0.86 |
11   | Page Request |   250 |            1 |           1 |   0 | -16.48 |
11   | Rendering    |   250 |           65 |          65 |   0 |  -0.62 |
12   | Overall      |   250 |          303 |         291 | -12 |  -4.07 |        faster
12   | Page Request |   250 |            2 |           2 |   0 |  12.93 |
12   | Rendering    |   250 |          301 |         289 | -13 |  -4.19 |        faster
13   | Overall      |   250 |           48 |          47 |   0 |  -0.45 |
13   | Page Request |   250 |            1 |           1 |   0 |   1.59 |
13   | Rendering    |   250 |           47 |          46 |   0 |  -0.52 |
```

Here it's clear that this patch *significantly* improves the rendering performance of the slowest pages, while not causing any big regressions elsewhere. As expected, this patch thus helps larger and/or more complex pages the most (which is also where even small improvements will be most beneficial).
There's obviously the question if this is *slightly* regressing simpler pages, but given just how short the times are in most cases it's not inconceivable that the page results above are simply caused be e.g. limited `Date.now()` and/or limited numerical precision.",False
d1af8bd196a4f5a90afc45de557e8d54f169776f,2019-07-18 17:58:49,Jonas Jenwald,Slightly more simplified dispatching of the 'findbarclose' events in `firefoxcom.js`,False
8e5aa484fb09c2495bbdccf8c9e27b3dfe3296a5,2019-07-18 17:57:43,Jonas Jenwald,"[Firefox] Re-factor the 'zoomreset' message handling in the viewer (PR 10652 follow-up)

Given that this special-case only matters for the Firefox PDF viewer, it's probably better to just move it into `firefoxcom.js` instead to reduce unnecessary confusion.",False
6e96a158f4898cf4250e95d9cf12137e146b52c6,2019-07-18 03:04:31,Tim van der Meij,"Merge pull request #10820 from vlastimilmaca/annot-irt-rt-states

Annotations - Added parsing of IRT, RT, State and StateModel",True
fe49f0f766c27dfa102d41a7a424aeac0ada4397,2019-07-17 03:03:07,vlastimilmaca,"Annotations - Implement parsing of IRT, RT, State and StateModel",False
bf60fe88d0f94213c10d0064dc42add8c87b63ff,2019-07-16 01:59:37,Tim van der Meij,"Merge pull request #10974 from Snuffleupagus/refactor-get-fingerprint

Simplify the `PDFDocument.fingerprint` method slightly",True
bea15b6ce558e0a3823a547f882b1983c7b89f77,2019-07-15 16:56:08,Jonas Jenwald,"Simplify the `PDFDocument.fingerprint` method slightly

The way that this method handles documents without an `ID` entry in the Trailer dictionary feels overly complicated to me. Hence this patch adds `getByteRange` methods to the various Stream implementations[1], and utilize that rather than manually calling `ensureRange` when computing a fallback `fingerprint`.

---
[1] Note that `PDFDocument` is only ever initialized with either a `Stream` or a `ChunkedStream`, hence why the `DecodeStream.getByteRange` method isn't implemented.",False
c7de6dbe4113de8e71827cddd7b5b11a1cd0fef6,2019-07-15 14:49:17,Jonas Jenwald,"Update the `fingerprint` API unit-tests to explicitly check for the expected result

The current tests won't catch inadvertent changes to the logic used to obtain/compute the document `fingerprint`.",False
13ebfec9037b7fc37c44c718b87ca8d524a1986b,2019-07-14 18:17:57,Tim van der Meij,"Merge pull request #10969 from Snuffleupagus/api-test-stopAtErrors

Add an API unit-test for the `stopAtErrors` option (PRs 8240 and 8922 follow-up)",True
766d076dcb09dc34e466f50e652501853413031a,2019-07-14 18:15:15,Tim van der Meij,"Merge pull request #10970 from Snuffleupagus/MessageHandler-simplify-finalize

Simplify, and inline, the `finalize` function in the `MessageHandler` class",True
b548bafef74293cb033b6975f9236bc3db449a02,2019-07-13 21:24:32,Jonas Jenwald,"Simplify, and inline, the `finalize` function in the `MessageHandler` class

The `finalize` helper function has only a *single* call-site, and furthermore it's just a one-liner too. Furthermore it's only ever called with a `Promise` as its argument, meaning that it's unnecessarily convoluted as well (i.e. the `Promise.resolve()` part shouldn't be necessary).
Hence this code can be both simplified *and* inlined at its only call-site instead.",False
c7fb7116d683f0e2b07003169364f14c7edc2268,2019-07-13 19:36:05,Jonas Jenwald,"Add an API unit-test for the `stopAtErrors` option (PRs 8240 and 8922 follow-up)

Also fixes an inconsistency in the 'PageError' handler, for `getOperatorList`, in the API.",False
b01cc55cfd1f3947cdbc9fcf5ffc89a856052904,2019-07-13 18:00:02,Tim van der Meij,"Merge pull request #10968 from Snuffleupagus/MessageHandler-rm-useless-wrapReason

Remove useless `wrapReason` calls in the `MessageHandler` class",True
17116917f74cb1317b70a023eaa9b652cdba2a5d,2019-07-13 16:38:29,Jonas Jenwald,"Remove useless `wrapReason` calls in the `MessageHandler` class

Currently `wrapReason` is manually called at *every* `resolveOrReject` call-site, despite it being completely unnecessary unless there's an actual error being handled. This is obviously inefficient, and it's easy enough to avoid by having `resolveOrReject` handle this only when actually needed.",False
421bf628492e137b1bf1a48705c37811b45cfd30,2019-07-13 02:54:10,Tim van der Meij,"Merge pull request #10966 from brendandahl/pagerendered-time

Add timestamp to the page rendered event.",True
60b8b7a8d2d2a9ea9348dbfe04ee19b9e6955e21,2019-07-13 02:38:23,Brendan Dahl,"Add timestamp to the page rendered event.

This is needed to track rendering time in Firefox's talos performance
framework. See https://bugzilla.mozilla.org/show_bug.cgi?id=1565680",False
e3496041b53982782a3d115a00feb4efe8e63495,2019-07-13 02:35:37,Tim van der Meij,"Merge pull request #10950 from monchouchou/master

Fixed testing webserver to handle paths correctly on Windows",True
ed3954fc7ae40204cb367068cdcdb2415faf5a41,2019-07-13 02:22:07,Tim van der Meij,"Merge pull request #10851 from brendandahl/shading-bbox

Apply bounding box before using shading patterns.",True
87f36e3520099bfd146ec1845f149d15c56fd537,2019-07-13 02:20:32,Tim van der Meij,"Merge pull request #10850 from brendandahl/scale-line-width

Scale stroking line width when using a tiling pattern.",True
28326165ff68061bfdfecd6515d9657f3b9ad22d,2019-07-12 03:25:00,Tim van der Meij,"Merge pull request #10958 from Snuffleupagus/api-rm-receivingOperatorList

Remove the `intentState.receivingOperatorList` boolean since it's redundant",True
7e85f3fa776fa8e384e827c9e29f6eebddcf86c4,2019-07-12 03:21:33,Tim van der Meij,"Merge pull request #10964 from mozilla/dependabot/npm_and_yarn/lodash-4.17.14

Bump lodash from 4.17.10 to 4.17.14",True
f8fd38744fb73176a0f80fc2475810aa6178e173,2019-07-12 02:44:28,Tim van der Meij,"Merge pull request #10962 from Snuffleupagus/TextLayer-uncaught-promise-msg

Prevent ""Uncaught promise"" messages in the console when cancelling `TextLayer` tasks (PR 10601 follow-up)",True
6e594a89da7796cec32228c7aaf77eec7639ac06,2019-07-12 02:42:40,Tim van der Meij,"Merge pull request #10959 from Snuffleupagus/rm-PrintService-body-attribute

Remove the `data-pdfjsprinting` attribute on the `<body>` when destroying `FirefoxPrintService`/`PDFPrintService` instances (issue 10948)",True
478f05650ca9fd11aaec04b83a20c651b7d0028f,2019-07-12 02:39:23,Tim van der Meij,"Merge pull request #10963 from Snuffleupagus/app-zoomIn-zoomOut-presentationMode

Ensure that `PDFViewerApplication.{zoomIn, zoomOut}` won't run when PesentationMode is active (PR 10652 follow-up)",True
99de61038a3cad202bc3aab944acaf5aee2f1352,2019-07-11 19:14:41,dependabot[bot],"Bump lodash from 4.17.10 to 4.17.14

Bumps [lodash](https://github.com/lodash/lodash) from 4.17.10 to 4.17.14.
- [Release notes](https://github.com/lodash/lodash/releases)
- [Commits](https://github.com/lodash/lodash/compare/4.17.10...4.17.14)

Signed-off-by: dependabot[bot] <support@github.com>",False
19f6facc1e22b5b4666b17b111ca481d8d882348,2019-07-11 19:11:44,Jonas Jenwald,"Ensure that `PDFViewerApplication.{zoomIn, zoomOut}` won't run when PresentationMode is active (PR 10652 follow-up)

Similar to the `zoomReset` method we need to ensure that this code won't run for zoom events originating within the browser UI itself, since checks in e.g. the `keydown` event handler won't help in that case.",False
9a4d14bf36afd4d69a8f649e7f98441b26ef0548,2019-07-11 15:18:33,Jonas Jenwald,"Prevent ""Uncaught promise"" messages in the console when cancelling `TextLayer` tasks (PR 10601 follow-up)

Since `finally` won't stop error propagation, this causes unnecessary messages to be printed in the console whenever a `TextLayer` task is cancelled.",False
8444aeec837f6407505da56f784ec7c78704bd7c,2019-07-11 02:51:07,Brendan Dahl,"Merge pull request #10960 from timvandermeij/bump

Bump versions in `pdfjs.config`",True
734074c547ef2086ef08e7a160f84ce7a0f08a11,2019-07-11 01:55:24,Tim van der Meij,Bump versions in `pdfjs.config`,False
cd48f05597bbb116d553ca1f1150b22dd77caf31,2019-07-10 20:19:31,Jonas Jenwald,"Remove the `data-pdfjsprinting` attribute on the `<body>` when destroying `FirefoxPrintService`/`PDFPrintService` instances (issue 10948)

Also, cleans up variable definitions slightly in the `FirefoxPrintService.layout` method.",False
ef48a9a7134352afb52be23c42961765a966ba32,2019-07-10 17:53:59,Jonas Jenwald,"Update the `PageError` handler, in the API, to always mark the `operatorList` as done and finalize any pending renderTasks

Note that, in the old code, there was a code-path which could prevent this from happening thus affecting future cleanup.
Furthermore, ensure that we'll always attempt to cleanup when handling the 'PageError' message, similar to the code in e.g. the `PDFPageProxy._renderPageChunk` method.",False
c6fcdf474b7b4e0f7d130e092061782a6b90e018,2019-07-10 17:53:10,Jonas Jenwald,"Remove the `intentState.receivingOperatorList` boolean since it's redundant

The `receivingOperatorList` property is currently tracked *twice* in the rendering code, both directly and inversely through the `intentState.operatorList.lastChunk` boolean. This type of double bookkeeping is never a good idea, since it's just too easy for the properties to accidentally fall out of sync.

In this case there's even a `cleanup`-related bug caused by this, which means that `PDFPageProxy._tryCleanup` will never be able to discard any data if there's an error on the worker-thread (as handled through the 'PageError' message).

Hence the simplest solution seems, at least to me, to update `PDFPageProxy._tryCleanup` to replace the `intentState.receivingOperatorList` check with a `!intentState.operatorList.lastChunk` check and completely remove the former property.",False
6fab0a0dac9e9339d287be0eb86103f64c885718,2019-07-09 02:35:48,Brendan Dahl,"Apply bounding box before using shading patterns.

Fixes #8092",False
446efab70774ac564f8dd3e519c9b2c7a6dbbb2c,2019-07-09 02:17:54,Brendan Dahl,Scale stroking line width when using a tiling pattern.,False
d7afb74a6e1980da5041f376e7a7c7caef5f42ea,2019-07-09 02:09:22,Tim van der Meij,"Merge pull request #10949 from Snuffleupagus/delay-findController-init

Delay initialization of searching, in the viewer, until the first page has rendered",True
f861d5c0d4c5b6ba44c9775a8aa17d4bf0c91e36,2019-07-07 02:42:50,alephneo,Fixed test/webserver to handle paths correctly on Windows,False
d3c0f2861bfa5bc04ac217f18e4b80edd4f2025b,2019-07-06 21:03:28,Jonas Jenwald,"Delay initialization of searching, in the viewer, until the first page has rendered

When searching occurs for the first time in a document, the `textContent` of all pages will be fetched from the API. If there's a pending search operation when the document loads that will thus lead to a lot of `getTextContent` calls very early on, which may unnecessarily delay rendering of the first page. Generally, in the viewer, a number of non-essential API calls[1] will be deferred until the first page has been rendered, and there's no good reason as far as I can tell to handle searching differently.

---
[1] Such as e.g. `getOutline` and `getAttachments`.",False
d66d2738697ac7807c7696b3f717cb8e8498469a,2019-07-06 17:22:22,Tim van der Meij,"Merge pull request #10947 from Snuffleupagus/document-find-peekBytes

Make the `find` helper function, in `src/core/document.js`, more efficient by using `peekBytes` rather reading the stream one byte at a time",True
bdc31f8b50d83f72eb24f6047fe29a1a21e4ab6d,2019-07-06 15:14:17,Jonas Jenwald,"Make the `find` helper function, in `src/core/document.js`, more efficient by using `peekBytes` rather reading the stream one byte at a time

*Please note:* A a similar change was attempted in PR 5005, but it was subsequently backed out in PR 5069.

Unfortunately I don't think anyone ever tried to debug *exactly* why it didn't work, since it ought to have worked, and having re-tested this now I'm not able to reproduce the problem any more. However, given just how inefficient the current code is, with thousands of strictly unnecessary function calls for each `find` invocation, I'd really like to try fixing this again.",False
a98ce9cb1adb48bf2b0b2b6722fa8b0e24c14912,2019-07-06 01:15:01,Tim van der Meij,"Merge pull request #10937 from timvandermeij/node-header-size-limit

Restore the header size limit of 80 KB",True
5517c94d66f22cc98df6dd1dab90ced15d49f3b8,2019-06-30 18:11:26,Tim van der Meij,"Merge pull request #10938 from Snuffleupagus/fewer-XRef-isCmd

Reduce the number of `isCmd` calls slightly in the `XRef` class",True
41745a599698908cfd118328d188a46ed1f37c8e,2019-06-29 19:58:45,Jonas Jenwald,"Reduce the number of `isCmd` calls slightly in the `XRef` class

This reduces the total number of function calls, when reading the XRef table respectively when fetching uncompressed XRef entries.
Note in particular the `XRef.readXRefTable` method, where there're *two* back-to-back `isCmd` checks rather than just one.",False
95285cb590fc25780d83359f4cb31172917ed9e6,2019-06-29 16:53:43,Tim van der Meij,"Restore the header size limit of 80 KB

Fixes #10849.",False
28009622850a5d1fb878ccb69a246c8c8243040c,2019-06-29 16:12:47,Tim van der Meij,"Merge pull request #10936 from timvandermeij/updates

Update translations and packages",True
57c6cf7835e413c231f6938ee81f09f5f954dc5f,2019-06-29 16:05:45,Tim van der Meij,Update packages,False
087e9754783cd0b362ffde86b31e4d4fca01a9e7,2019-06-29 16:03:23,Tim van der Meij,Update translations,False
7fc329d6e3ba077e3908c916c7eafe268af1b3df,2019-06-28 16:15:02,Tim van der Meij,"Merge pull request #10902 from ahuglajbclajep/tiling-pattern-support

Implement tiling patterns for the SVG back-end",True
f1867de4929a022b3e554aa26aceb90802d41800,2019-06-28 00:02:24,Tim van der Meij,"Merge pull request #10925 from Snuffleupagus/eslint_no-unsanitized

Enable the `eslint-plugin-no-unsanitized` ESLint plugin to disallow unsafe usage of e.g. `innerHTML`",True
77940dbd866bc36d025f20c1e54b692d8f03ebed,2019-06-25 12:55:25,ahuglajbclajep,Implement tiling patterns for the SVG back-end,False
2cc0bfd1b17a9f111b7c05253108563276fb31b8,2019-06-24 02:23:37,Tim van der Meij,"Merge pull request #10926 from Snuffleupagus/parser-signature

Change the signature of the `Parser` constructor to take a parameter object",True
f710eb56e42314509a284ba462105efe176dbb5d,2019-06-23 19:31:45,Jonas Jenwald,"Change the signature of the `Parser` constructor to take a parameter object

A lot of the `new Parser()` call-sites look quite unwieldy/ugly as-is, with a bunch of somewhat randomly ordered arguments, which we can avoid by changing the constructor to accept an object instead. As an added bonus, this provides better documentation without having to add inline argument comments in the code.",False
5bb5e7741d0103b2b14a10cb8129ffe8156e5aae,2019-06-23 17:20:30,Jonas Jenwald,"Enable the `eslint-plugin-no-unsanitized` ESLint plugin to disallow unsafe usage of e.g. `innerHTML`

See https://github.com/mozilla/eslint-plugin-no-unsanitized

Since we've generally never allowed e.g. `innerHTML`, which is enforced during review, there's only one linting failure with this patch. (Which is white-listed, according to the existing comment and the fact that it's test-only code.)",False
1c9a69db82773771216bc051f4f624ee1032e102,2019-06-16 02:04:05,Tim van der Meij,"Merge pull request #10903 from Snuffleupagus/worker-streams

Move `PDFWorkerStream` and related code to its own file",True
0471a9961f42ee63fcf1ee355072830ba7c00d2f,2019-06-16 01:22:35,Tim van der Meij,"Merge pull request #10905 from Snuffleupagus/pin-eslint-plugin-mozilla

Pin the version of `eslint-plugin-mozilla` to prevent failures on Travis (issue 10901)",True
562e4ea14cfdf42dd4bc6ab838d9c552e5815303,2019-06-15 17:32:28,Jonas Jenwald,"Pin the version of `eslint-plugin-mozilla` to prevent failures on Travis (issue 10901)

It appears that the changes in `eslint-plugin-mozilla` version `1.3.0`, see https://bugzilla.mozilla.org/show_bug.cgi?id=1556013, causes dependency issues on Travis.",False
021e5ffb88e95b3a7656415d2d3c5ed863f2c0a9,2019-06-15 16:35:25,Jonas Jenwald,"Move `PDFWorkerStream` and related code to its own file

Since all other `IPDFStream` implementations live in their own files, it seems reasonable for these to do so as well.

Furthermore, converts all of the relevant code to ES6 classes and updates the interface definitions to mark a couple of methods `async`.",False
7348275094d206c424c6a49bd75846b79a8d21a7,2019-06-12 03:12:03,Tim van der Meij,"Merge pull request #10898 from Snuffleupagus/firefox-print-resolution

Allow experimenting with the `printResolution` AppOption when printing with the built-in Firefox version",True
64b520404ec336a54229d519136c2b1dfe2c599e,2019-06-12 03:10:29,Tim van der Meij,"Merge pull request #10897 from Snuffleupagus/rm-isPageVisible-check

Remove a superfluous `linkService.isPageVisible` check from `PDFFindController` (PR 10217 follow-up)",True
d6cc393cd927f035bde2451548b2881188706900,2019-06-11 00:34:47,Jonas Jenwald,"Remove a superfluous `linkService.isPageVisible` check from `PDFFindController` (PR 10217 follow-up)

Unless the `PDFLinkService` instance contains all of the expected methods, a lot of things will break in various places in the default viewer. Hence there's not much value in having this check, and outright falling seems more appropriate.

Finally, this also makes the return value explicit in this case, since that's consistent with the rest of the `PDFFindController._shouldDirtyMatch` method.",False
5d3973ef596d2a83416b49305c6f2cd4fb0e4514,2019-06-10 21:15:28,Jonas Jenwald,"Allow experimenting with the `printResolution` AppOption when printing with the built-in Firefox version

As have already been stated multiple times, simply increasing the printing resolution may have undesirable effects on both memory usage *and* general performance. Hence why PR 10854 did *not* add a preference, and only exposed AppOption by default in `GENERIC` builds for now.

However, considering how differently printing works in the built-in Firefox version (with `mozPrintCallback`) compared to the general default viewer, any testing done in the latter case might not be completely relevant to the first (and most important) case of the Firefox PDF Viewer.

Note that considering the implementation of `AppOptions.get`, this patch will be safe and should allow experimenting with `printResolution` in all builds of the default viewer[1]. By not, however, having `printResolution` appear in AppOptions for either the `MOZCENTRAL` or `CHROMIUM` build targets, there should be no indication of official support for now.
Furthermore, it shouldn't be a preference at this point in time (or even at all), since that makes it too easy for users to change it permanently[2] and possible ""break"" printing.

---

[1] By running `PDFViewerApplicationOptions.get('printResolution', /* value here */);` in the console after the viewer loads.

[2] I've seen Firefox bugs, filed in Bugzilla, where users modified e.g. preferences manually in `about:config` and then some time later (maybe months) wondered why something was suddenly broken. In those cases, trying to work out that a preference change was the culprit can take time/effort.",False
06b253d6092e14a118f9d5b23fa0652498c68a96,2019-06-09 15:05:49,Tim van der Meij,"Merge pull request #10890 from Snuffleupagus/outline-items-hidden

Add support for outline items, in the default viewer, which default to collapsed when the outline is built",True
bb540e427e13ca153e18628ddb8a93ba2a7ab143,2019-06-09 15:02:23,Tim van der Meij,"Merge pull request #10879 from Snuffleupagus/print-cleanupAfterRender

[api-minor] Attempt to reduce memory usage during printing, by always running `cleanup` once rendering has finished",True
26bc630e194d9faba544d2974a3ea6d7427ba3ec,2019-06-07 15:56:23,Jonas Jenwald,"Add support for outline items, in the default viewer, which default to collapsed when the outline is built

The PDF specification supports this feature, which is commonly used in large/long documents (such as the spec itself), and it seems reasonably straightforward to implement; see https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#G11.2095911",False
625af8d2adac62fbc5223e5e8fee97406bdd442c,2019-06-03 03:59:17,Jonas Jenwald,"[api-minor] Attempt to reduce memory usage during printing, by always running `cleanup` once rendering has finished

Given that `cleanupAfterRender` is already set for large images, when handling 'obj' messages, this patch *should* thus be safe in general (since otherwise there ought be existing bugs related to cleanup and printing).",False
63014eb897ba0a1fce210ad89cf8ce5ba98c081a,2019-06-02 16:12:15,Tim van der Meij,"Merge pull request #10877 from Snuffleupagus/bug-1552113

Ignore Annotations with too large border `width`s, to prevent the `annotationLayer` from rendering it over the surrounding document (bug 1552113)",True
876c96223549f9678b1bb35c178db41091211514,2019-06-01 19:21:22,Jonas Jenwald,"Ignore Annotations with too large border `width`s, to prevent the `annotationLayer` from rendering it over the surrounding document (bug 1552113)

The border `width` will instead fallback to the default value of `1`, rather than ignoring it altoghether, to also ensure that e.g. `LinkAnnotation`s become clickable as intended.

Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1552113",False
209e42043af86f54bae02c37d320350bf4f96a0c,2019-05-31 16:26:53,Tim van der Meij,"Merge pull request #10873 from Snuffleupagus/worker-terminate-clearPrimitiveCaches

Ensure that the `Cmd`/`Name`/`Ref` caches are cleared when terminating the worker (PR 10863 follow-up)",True
3b58863d4c53e449418545170a83ea4cddb8b4ba,2019-05-31 16:25:41,Tim van der Meij,"Merge pull request #10872 from Snuffleupagus/api-clear-arrays

Re-use, rather than re-creating, some `Array`s when resetting them in `src/display/api.js`",True
a3742a9f8345c6c76b4b4a708a9bcd884ad0f6b6,2019-05-31 00:27:28,Jonas Jenwald,"Ensure that the `Cmd`/`Name`/`Ref` caches are cleared when terminating the worker (PR 10863 follow-up)

Usually when the worker is terminated it will also be completely destroyed/removed, which means that any global caches (such as the ones in `src/core/primitive.js`) should be automatically cleared in the process.

However, for certain ways of loading the `pdf.worker.js` file, e.g. passing in a re-usable worker to `getDocument`, using the `workerPort` functionality, or even disabling workers completely  (even though this is never a good idea), the worker file may be kept in memory and these caches will not be cleared as expected.",False
8857a81c8d4f87e9bccc8d6edc98da264d1a790e,2019-05-30 20:03:05,Jonas Jenwald,"Re-use, rather than re-creating, some `Array`s when resetting them in `src/display/api.js`

Calling `someArray = []` will create a new Array, which seems completely unnecessary when it's sufficient to just call `someArray.length = 0` to achieve the same effect.

Even though I cannot imagine these particular cases having any noticeable performance impact, similar changes were made in `core/` code years ago since it's apparently more efficient memory wise.",False
d0892e46e2b0d16ecd7f720f36f36202ae1c12cd,2019-05-30 17:13:05,Tim van der Meij,"Merge pull request #10867 from janpe2/svg-clip-undefined

Don't clip if path is undefined in SVG back-end",True
5adb32371e2dbfca51c53d64aeee2ee25673b30c,2019-05-30 03:16:52,Tim van der Meij,"Merge pull request #10869 from Rob--W/issue-10645-preserve-http-referer-again

Restore referrer preserving functionality in Chrome 72+",True
32c1a1d3299064c9fcdab63f5d5bb2c1a6d974c6,2019-05-29 14:58:38,Rob Wu,"[CRX] Preserve referrer in Chrome 72+

Fixes #10645",False
343b1381a2e43b8f6c13a5c6e530479e00ec7476,2019-05-28 21:07:15,Jani Pehkonen,Don't clip if path is undefined in SVG back-end,False
f652cf8e5ea127393ee83e6cb30c51ecd6ce91c3,2019-05-26 18:45:00,Tim van der Meij,"Merge pull request #10863 from Snuffleupagus/clearPrimitiveCaches

Ensure that the `Cmd`/`Name`/`Ref` caches are cleared when running other `cleanup` code",True
5e045bcdbabc79c1577dd97bb99448af4bc8b903,2019-05-26 17:59:59,Jonas Jenwald,"Ensure that the `Cmd`/`Name`/`Ref` caches are cleared when running other `cleanup` code

The purpose of these caches is to reduce peak memory usage, by only ever having *a single* instance of a particular object.
However, as-is these caches are never cleared and they will thus remain until the worker is destroyed. This could very well have a negative effect on total memory usage, particularly for large/long documents, hence it seems to make sense to clear out these caches together with various other ones.",False
9ab1d9f5965f7da58b4e8d0ba9ca6a5a2d49a669,2019-05-26 17:24:21,Tim van der Meij,"Merge pull request #10862 from Snuffleupagus/Ref-get

Add caching to reduce the number of `Ref` objects",True
2fe9f3ff8f4270dcbc9e61c7bdd7cec1414ab686,2019-05-26 15:53:37,Jonas Jenwald,"Add caching to reduce the number of `Ref` objects

This is similar to the existing caching used to reduced the number of `Cmd` and `Name` objects.
With the `tracemonkey.pdf` file, this patch changes the number of `Ref` objects as follows (in the default viewer):

|          | Loading the first page | Loading *all* the pages |
|----------|------------------------|-------------------------|
| `master` | 332                    | 3265                    |
| `patch`  | 163                    | 996                     |",False
d95145953c21e98dbebe548e804cef0192ab22d9,2019-05-25 20:15:26,Tim van der Meij,"Merge pull request #10859 from timvandermeij/updates

Update translations and packages",True
18aef39b33e6d6ed32e476037bf2411751bb06e3,2019-05-25 20:06:42,Tim van der Meij,"Update packages

This includes a major upgrade of `terser`.",False
1f3723f54ca955bf6b65c204140181c954b1672e,2019-05-25 19:51:09,Tim van der Meij,Update translations,False
dcf53932706c1329deda1f1b1333ed56e65e807a,2019-05-25 19:42:21,Tim van der Meij,"Merge pull request #10833 from timvandermeij/annotation-fixes

[api-minor] Implement contents and creation date for the correct annotation types",True
bc1eb49a77c684e72839a99daf86e4dc3f53ab7d,2019-05-25 19:01:06,Tim van der Meij,"Implement creation date only for markup annotations

The specification states that `CreationDate` is only available for
markup annotations instead of for all annotation types.

Moreover, popup annotations are not markup annotations according to the
specification, so the creation date inheritance from the parent
annotation is also removed there (note that only the modification date
is used in e.g., the viewer).",False
c8c3e60b4dab208f5c3871bddf37eee7ae3b3aaa,2019-05-25 18:26:17,Tim van der Meij,"Merge pull request #10854 from iquadrat-ag/print_resolution

make print resolution configurable via AppOptions",True
b85209f1fd4047607467dcc52373b7c368c11c35,2019-05-24 17:31:26,Stefan Klein,make print resolution configurable via AppOptions,False
cf07918ccb22851e65b87ffdca0794c4003a69c5,2019-05-18 19:22:17,Tim van der Meij,"Implement contents for every annotation type

The specification states that `Contents` can be available for every
annotation types instead of only for markup annotations.",False
1421b2f2056ae6dac564469374ff43342a3fb891,2019-05-17 01:34:29,Tim van der Meij,"Merge pull request #10827 from Snuffleupagus/network-streams-class

Convert the (remaining) network streams to ES6 classes",True
0187dcfa154beb8107830550ba046259e6beefd4,2019-05-17 00:58:31,Tim van der Meij,"Merge pull request #10826 from Snuffleupagus/rm-AnnotationFactory-ref-param

Remove unused `ref` property from the `parameters` object used when creating annotations in `AnnotationFactory._create`",True
f9769af365ae6f99078418a9c0f0583c020aa0dc,2019-05-16 13:38:51,Jonas Jenwald,Convert `network.js` to use ES6 classes,False
cc661a4d388912d68b04bad75071beef1fff9cc3,2019-05-16 12:45:43,Jonas Jenwald,Update `fetch_stream.js` to use `const` in more places,False
737705264b170b12bfd161f2cabb0e1dea217111,2019-05-16 12:45:39,Jonas Jenwald,Convert `transport_stream.js` to use ES6 classes,False
0784c98172ee5747a54728624fc82d4600068602,2019-05-16 12:03:38,Jonas Jenwald,"Remove unused `ref` property from the `parameters` object used when creating annotations in `AnnotationFactory._create`

The only use-cases for this property was removed in PRs 7570 and 7775, and it's been completely unused ever since the latter one.",False
c8c937c2579812798fddc13af9d8c1df1e7ce30b,2019-05-15 03:34:39,Tim van der Meij,"Merge pull request #10794 from janpe2/cidtogidmap-zero

Fix glyph at index zero in CIDFontType2 that has a CIDToGIDMap stream",True
fef86cc3e327f0554136482fee901b52909fa37a,2019-05-12 18:00:30,Tim van der Meij,"Merge pull request #10805 from Snuffleupagus/consistent-return

Enable the `consistent-return` ESLint rule",True
173fbef05b3c88cc5a6e3448ca6e19c5b8b86713,2019-05-11 17:57:21,Jonas Jenwald,"Enable the `consistent-return` ESLint rule

This rule is already enabled in mozilla-central, and helps ensure more consistent functions/methods, see https://searchfox.org/mozilla-central/rev/b9da45f63cb567244933c77b2c7e827a057d3f9b/tools/lint/eslint/eslint-plugin-mozilla/lib/configs/recommended.js#119-120

Please see https://eslint.org/docs/rules/consistent-return for additional information.",False
ca2fee3d516e1cb33fbc9cd3b63dce19859c70cd,2019-05-09 03:16:15,Tim van der Meij,"Merge pull request #10795 from Snuffleupagus/issue-10790

Update the `canvas` npm package to fix Travis CI builds (issue 10790)",True
57ad3a5acb07f3623b1204e0ea642994ea944ffa,2019-05-08 17:31:10,Jonas Jenwald,"Fuzzy match in the `should parse PostScript numbers` unit-test, to work-around rounding bugs in Chromium browsers",False
a8dd00876ae6991db0a148b017697e711ede7e03,2019-05-08 13:25:26,Jonas Jenwald,Update the `canvas` npm package to fix Travis CI builds (issue 10790),False
05c527f035f72501440ae6007dbcfd32a68ada3c,2019-05-07 21:14:37,Jani Pehkonen,Fix glyph 0 in CIDFontType2 that has a CIDToGIDMap stream,False
83f6de3cf8bcb39e05847321f45b44446bd9a858,2019-05-07 04:02:52,Tim van der Meij,"Merge pull request #10771 from timvandermeij/annotation-dates

[api-minor] Implement creation/modification date for annotations",True
be1d6626a7d3f97a8fcd79712622982deb32c6f9,2019-05-05 18:21:03,Tim van der Meij,"Implement creation/modification date for annotations

This includes the information in the core and display layers. The
date parsing logic from the document properties is rewritten according
to the specification and now includes unit tests.

Moreover, missing unit tests for the color of a popup annotation have
been added.

Finally the styling of the popup is changed slightly to make the text a
bit smaller (it's currently quite large in comparison to other viewers)
and to make the drop shadow a bit more subtle. The former is done to be
able to easily include the modification date in the popup similar to how
other viewers do this.",False
6cfb1e1a63cfdbb2190e583d5d8803553771685b,2019-05-04 18:32:10,Tim van der Meij,"Merge pull request #10789 from Snuffleupagus/handleColorN-error

Change `PartialEvaluator.handleColorN` to throw when no valid pattern is found",True
007fab6ab5cb5b0b37537779ad243593c9347d0f,2019-05-04 16:23:18,Jonas Jenwald,"Change `PartialEvaluator.handleColorN` to throw when no valid pattern is found

Currently `handleColorN` will fallback to add a completely unparsed/unvalidated operator when no valid pattern was found. This is unfortunate, since it could very easily lead to a couple of different errors:
 - `DataCloneError`s when attempting to send the data to the main-thread, e.g. when `args` is `Dict`/`Stream`.
 - Errors in `getShadingPatternFromIR` on the main-thread, unless `args` just happens to have the expected format.
 - Errors when actually attempting to render the pattern on the main-thread, since the `args` will most likely not have the expected format.

Hence it probably makes sense to error in `PartialEvaluator.handleColorN`, and having invalid patterns fail gracefully via the existing `ignoreErrors` code-paths instead.",False
155304a0c1c9b23f6e3980011c5c779c840fed7a,2019-05-03 01:59:24,Tim van der Meij,"Merge pull request #10756 from Snuffleupagus/issue-10542

Attempt to handle corrupt PDF documents that contains path operators inside of text object (issue 10542)",True
347cb38e891641244ac644778a771717bbe37240,2019-05-03 01:25:42,Tim van der Meij,"Merge pull request #10784 from Snuffleupagus/OperatorList-intent

Ensure that the `OperatorList` constructor actually initializes a `NullOptimizer` when intended (PR 9089 follow-up)",True
96942d4f7fcad54dfc93f10e045694a4326cafc3,2019-05-02 21:07:05,Jonas Jenwald,"Ensure that the `OperatorList` constructor actually initializes a `NullOptimizer` when intended (PR 9089 follow-up)

It appears that this has been broken ever since PR 9089, which also introduced this code, since the `QueueOptimizer`/`NullOptimizer` choice was made based on the still undefined `this.intent` property.

Furthermore, fixing this also uncovered the fact that the `NullOptimizer.reset` method was missing.",False
5335285cda1a92ca4f966bad3c1b61a4a580c4d1,2019-05-01 03:05:33,Jonas Jenwald,"Attempt to handle corrupt PDF documents that contains path operators inside of text object (issue 10542)

First of all, while this simple approach appears to work OK in practice I'm not sure if it's the best way of addressing the problem (assuming that you even want to).
Second of all, while the solution implemented here only requires tracking/checking one new boolean in order for this to work, I'm nonetheless not entirely happy about this since it will add additional overhead (albeit *very* small) to the parsing of path operators in PDF documents just for a handful of *corrupt* ones.",False
f87dc42780d9aaefe3b3c01c1127d88d05ac5763,2019-04-28 16:52:56,Tim van der Meij,"Merge pull request #10765 from Snuffleupagus/wheel-passive

Add `passive: false` to the `wheel` event listener, to work-around broken default behaviour in Chrome 73 and above (issue 10761)",True
468bd829f2b07d4666392d2f88deef4373b7c2ce,2019-04-24 21:07:25,Jonas Jenwald,"Add `passive: false` to the `wheel` event listener, to work-around broken default behaviour in Chrome 73 and above (issue 10761)

Let's try this, since it doesn't appear to break scrolling/zooming in IE11.",False
762c58e0fcfdc8f3fd23ce22a15ee044d8d372ec,2019-04-20 22:09:32,Tim van der Meij,"Merge pull request #10738 from Snuffleupagus/ViewerPreferences-api

[api-minor] Add support for ViewerPreferences in the API (issue 10736)",True
7804bf834922be75acf160f71a67535f85f50bde,2019-04-20 21:42:56,Tim van der Meij,"Merge pull request #10754 from Snuffleupagus/idFactory-getDocId

Add a `getDocId` method to the `idFactory`, in `Page` instances, to avoid passing around `PDFManager` instances unnecessarily (PR 7941 follow-up)",True
34952b732e33ce8310cb17fae798b238d44344e7,2019-04-20 16:41:17,Jonas Jenwald,"Add a `getDocId` method to the `idFactory`, in `Page` instances, to avoid passing around `PDFManager` instances unnecessarily (PR 7941 follow-up)

This way we can avoid manually building a ""document id"" in multiple places in `evaluator.js`, and it also let's us avoid passing in an otherwise unnecessary `PDFManager` instance when creating a `PartialEvaluator`.",False
55d9b35d37798331d7b7cac611db5bfba30aea78,2019-04-19 02:37:26,Tim van der Meij,"Merge pull request #10727 from Snuffleupagus/type3-image-resources

Support (rare) Type3 fonts which contains image resources (issue 10717)",True
18b1d636a01961585f92c4f6569ba5adb1d67717,2019-04-18 03:07:37,Mehdi Vasigh,Add links to PDF.js homepage and API reference in README.md,False
48f100201e760c1b259d4fae5a489b2e4652c14a,2019-04-17 03:30:06,Tim van der Meij,"Merge pull request #10742 from Snuffleupagus/firefox-transport-disableStream-progress

[Firefox] Avoid displaying the indeterminate loadingBar when `disableStream=true` is set (PR 10714 follow-up)",True
5e9b606e7b812152d7eee3a2d400ab5b6f0f856f,2019-04-16 19:05:42,Jonas Jenwald,"[Firefox] Avoid displaying the indeterminate loadingBar when `disableStream=true` is set (PR 10714 follow-up)

While PR 10714 did address the `disableRange=true` case, it also managed to ""break"" the `disableStream=true` case instead since the indeterminate loadingBar is now displayed when it shouldn't; sorry about that!
The solution is simple enough though, don't attempt to fallback to `_fullRequestReader.onProgress` when handling ""incomplete"" loading information.",False
311bac3ebba86b2a8f456882e1dc682c10fc72be,2019-04-14 17:50:52,Jonas Jenwald,"[api-minor] Add support for ViewerPreferences in the API (issue 10736)

Please see the specification, https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#M11.9.12864.1Heading.71.Viewer.Preferences

Furthermore, note that this patch *only* adds API support and unit-tests but does not attempt to integrate e.g. the `ViewerPreferences -> Direction` property into the viewer (which would be necessary to address issue 10736).
The reason for this is that it's not entirely clear to me exactly if/how that could be implemented; e.g. would it be as simple as setting the `dir` attribute on the `viewerContainer` DOM element, or will it be more complicated?
There's also the question of how the `ViewerPreferences -> Direction` value interacts with the `PageMode`, and this will generally require a fair bit of manual testing. Since the direction of the *entire* viewer depends on the browser locale, there's also a somewhat open question regarding what default value to use for different locales.
Finally, if the viewer supports `ViewerPreferences -> Direction` then I'm assuming that it will be necessary to allow users to override the default value, which will require (most likely) new `SecondaryToolbar` buttons and icons for those etc.

Hence this patch only lays the necessary foundation for eventually addressing issue 10736, but defers the actual implementation until later. (Time permitting, I'll try to look into the viewer part later.)",False
8bbae79832299ba730dd914e5aaf670a8e96d9ee,2019-04-13 23:17:46,Tim van der Meij,"Merge pull request #10735 from timvandermeij/freetext-annotation

Implement free text annotations",True
ae2a4dc3dd4be06368929ee23f7415376c6da16a,2019-04-13 22:15:22,Tim van der Meij,Implement free text annotations,False
62dc431af66edea9c01e2caad3d53b0fd3af3ba3,2019-04-13 21:58:15,Tim van der Meij,"Merge pull request #10733 from timvandermeij/updates

Update translations and packages",True
be604bd195b18320bc8b73c0e3e2e47b75a444b5,2019-04-13 21:57:50,Jonas Jenwald,"Support (rare) Type3 fonts which contains image resources (issue 10717)

The Type3 font type is not commonly used in PDF documents, as can be seen from telemetry data such as: https://telemetry.mozilla.org/new-pipeline/dist.html#!cumulative=0&end_date=2019-04-09&include_spill=0&keys=__none__!__none__!__none__&max_channel_version=nightly%252F68&measure=PDF_VIEWER_FONT_TYPES&min_channel_version=nightly%252F57&processType=*&product=Firefox&sanitize=1&sort_by_value=0&sort_keys=submissions&start_date=2019-03-18&table=0&trim=1&use_submission_date=0 (see also https://github.com/mozilla/pdf.js/wiki/Enumeration-Assignments-for-the-Telemetry-Histograms#pdf_viewer_font_types).

Type3 fonts containing image resources are *very* rare in practice, usually they only contain path rendering operators, but as the issue shows they unfortunately do exist.
Currently these Type3-related image resources are not handled in any special way, and given that fonts are document rather than page specific rendering breaks since the image resources are thus not available to the *entire* document.
Fortunately fixing this isn't too difficult, but it does require adding a couple of Type3-specific code-paths to the `PartialEvaluator`. In order to keep the implementation simple, particularily on the main-thread, these Type3 image resources are completely decoded on the worker-thread to avoid adding too many special cases. This should not cause any issues, only marginally less efficient code, but given how rare this kind of Type3 font is adding premature optimizations didn't seem at all warranted at this point.",False
e113516a035a54f01777628eab6fae8e3e29de44,2019-04-13 20:55:41,Tim van der Meij,Update packages,False
b0de15e8553ad0c3ae6613c6b13aabfd94ec7927,2019-04-13 20:53:33,Tim van der Meij,Update translations,False
17de90b88a24c28185053ed3aeada62e4a1036ff,2019-04-13 20:45:01,Tim van der Meij,"Merge pull request #10694 from Snuffleupagus/main-thread-progressiveDataLength

Avoid dispatching range requests to fetch PDF data that's already loaded with streaming (PR 10675 follow-up)",True
2d0c38d6267ac286316ca1eba7f6d16333f27fea,2019-04-13 20:42:20,Tim van der Meij,"Merge pull request #10696 from Snuffleupagus/makeSubStream-ensureByte

Update `ChunkedStream.makeSubStream` to actually check if (some) data exists when the `length` parameter is undefined",True
a7273c8efeea8ea0e97fa11cbfbe2c28de1ad0f6,2019-04-13 03:56:13,Jonas Jenwald,"Avoid dispatching range requests to fetch PDF data that's already loaded with streaming (PR 10675 follow-up)

*Please note:* This patch purposely ignores `src/display/network.js`, since its support for progressive reading depends on the non-standard `moz-chunked-arraybuffer` responseType which is currently in the process of being removed.",False
8dc2d21931a1ba73866d6df0a8b96df239bfd58f,2019-04-13 03:45:28,Tim van der Meij,"Merge pull request #10728 from vlastimilmaca/annot-markup-class

Annotations - _preparePopup method replaced with MarkupAnnotation",True
d96267c30ccb4a1a29be5f1d32c5760f76cfa2fa,2019-04-12 14:54:21,Vlastimil Máca,"Annotations - _preparePopup method replaced with MarkupAnnotation base class. This is just refactoring, so it shouldn't break anything. It should move annotation API closer to PDF spec and enable future expansion.",False
74561f58b55fc5570c1d273d1eb53ed0f1725464,2019-04-11 03:33:21,Tim van der Meij,"Merge pull request #10723 from timvandermeij/caret-annotation

Implement caret annotations",True
1340c59038d152473b083eb164ed2ed9baa1a458,2019-04-11 03:05:49,Tim van der Meij,"Merge pull request #10725 from Snuffleupagus/CONTRIBUTING-l10n

Attempt to clarify the `l10n` section of `CONTRIBUTING.md`",True
8d781b28d71525dc963c12fe650a3dec5d83154e,2019-04-10 15:03:25,Jonas Jenwald,"Attempt to clarify the `l10n` section of `CONTRIBUTING.md`

The existing wording is perhaps not as clear as it could be, with regards to how the translations are actually managed.",False
4055d0a3023dd75fea758593b8e1c60e3422877c,2019-04-10 03:09:56,Tim van der Meij,"Implement caret annotations

The file `test/pdfs/annotation-caret-ink.pdf` is already available in
the repository as a reference test for this since I supplied it for
another patch that implemented ink annotations.",False
725a6959761883105d1b3c097aed30c841d41f83,2019-04-07 17:56:17,Tim van der Meij,"Merge pull request #10715 from mukulmishra18/fetch-stream-spec

Add test for fetch_stream",True
02e46d22d2dc916574f46236a9a3caa80afa342e,2019-04-07 16:44:03,Mukul Mishra,Add fetch stream spec,False
ce62373db31df124160abce9a6a2692aae037c6d,2019-04-06 20:45:14,Tim van der Meij,"Merge pull request #10674 from timvandermeij/svg-backend-es6

Convert `src/display/svg.js` to ES6 syntax and implement `setRenderingIntent` and `setFlatness` for the SVG backend",True
5a03b1c0d79f2b3f16a431f9474a6b6c8c2d8ad1,2019-04-06 20:27:31,Tim van der Meij,"Optimize `convertOpList` in `svg.js` by computing the operator ID mapping only once

There is no need to recompute this for every operator list we encounter.",False
2b18e5a355e1a5aaefd7224881aab17b19260633,2019-04-06 20:27:30,Tim van der Meij,"Implement `setRenderingIntent` and `setFlatness` for the SVG backend

This mirrors the canvas implementation where we ignore these operators.
This avoids console spam regarding unimplemented operators we're not
interested in.

For the Tracemonkey paper, we're now down to one warning about tiling
patterns which is in fact a valid one.",False
47d3620d5a2a90738f4fd6deebceed3d8df71bc2,2019-04-06 20:27:30,Tim van der Meij,"Convert `src/display/svg.js` to ES6 syntax

In particular, this should reduce intermediate string creation by using
template strings and reduce variable lookup times by removing unneeded
variables and caching `this.current` in more places.",False
2a9d195a4350d75e01fafb2c19194b7d02d0a0a5,2019-04-06 20:10:40,Tim van der Meij,"Merge pull request #10714 from Snuffleupagus/firefox-transport-stream-progress

[Firefox] Ensure that loading progress is reported, and the loadingBar updated, when `disableRange=true` is set",True
f0a28b3c0d7b72f16cf31d1592b7dbbdc5c23578,2019-04-06 16:23:33,Jonas Jenwald,"[Firefox] Ensure that loading progress is reported, and the loadingBar updated, when `disableRange=true` is set

With PR 10675 having fixed the completely broken `disableRange=true` setting in the Firefox version of PDF.js, I couldn't help but noticing that loading progress is never reported properly in that case.
Currently loading progress is only reported for the `rangeProgress` chrome-event, which obviously isn't dispatched with `disableRange=true` set. However, the `progressiveRead` chrome-event includes loading progress as well, but this information isn't being used in any way.
Furthermore, the `PDFDataRangeTransport.onDataProgress` method wasn't able to handle ""complete"" loading information, and neither was `PDFDataTransportStream._onProgress` since that method would only ever attempt to report it through a RangeReader (which won't exist when `disableRange=true` is set).",False
b161050df42bf3130370a5cb848588e3533edd2b,2019-04-06 02:37:32,Tim van der Meij,"Merge pull request #10709 from Snuffleupagus/pageLayout

[api-minor] Add basic support for PageLayout in the API and the viewer",True
8c8738ea470ab82330ccf2f377df3b978c0eecb0,2019-04-06 02:22:28,Tim van der Meij,"Merge pull request #10678 from Snuffleupagus/rm-moz-chunked-arraybuffer

Remove `moz-chunked-arraybuffer` support, and related code, from `src/display/network.js`",True
7a999d1d670ea691c92330aab3201c0568279106,2019-04-05 15:02:01,Jonas Jenwald,"[api-minor] Add basic support for PageLayout in the API and the viewer

Please see the specification, https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#G6.2393749, and refer to the inline comments for additional details.",False
57abddc9cae0c45477382cf2ccfb134737292725,2019-04-05 02:45:02,Tim van der Meij,"Merge pull request #10713 from Snuffleupagus/rm-JSDoc-annotation

Remove `src/core/annotation.js` from the `gulp jsdoc` build target",True
072c5864fb67e40df689e9a17d7fe0f04859abb8,2019-04-05 02:37:45,Tim van der Meij,"Merge pull request #10675 from Snuffleupagus/PDFDataTransportStream-disableRange

[Firefox regression] Fix `disableRange=true` bug in `PDFDataTransportStream`",True
f666395c24d409b6a45d76da266e9646e70cf527,2019-04-04 21:33:08,Jonas Jenwald,"Remove `src/core/annotation.js` from the `gulp jsdoc` build target

Note how at https://mozilla.github.io/pdf.js/api/ it's being described as API docs, however `src/core/annotation.js` is not part of the public API.
Furthermore, given that the code residing in the `src/core/` folder is run in a worker-thread, it's not even accessible on the main-thread (since `postMessage` is being used to transfer the data).
Hence the different API methods simply returns a ""proxy"" to the underlying data, but not actually the same objects and data structures as in the worker-thread itself; thus it doesn't make a whole lot of sense to expose this in API docs as far as I'm concerned.

Finally, the patch fixes a small JSDoc related typo in `src/display/api.js` when referring to the `TextStyle` typedef.",False
5498b191083101a69501de351580d8835e5aecac,2019-04-02 03:27:58,Tim van der Meij,"Merge pull request #10706 from Snuffleupagus/domstubs-hasChildNodes

Add missing `hasChildNodes` polyfill to `domstubs.js` (PR 10022 follow-up)",True
9c3024fe7eb7cd985eddd2d9ec833ae2c1619ada,2019-04-02 02:53:50,Jonas Jenwald,Add missing `hasChildNodes` polyfill to `domstubs.js` (PR 10022 follow-up),False
b40e6723be53f4fcf19083ae031aa0e0aa1f2df9,2019-04-02 00:18:51,Jonas Jenwald,"Remove `moz-chunked-arraybuffer` support, and related code, from `src/display/network.js`

The `moz-chunked-arraybuffer` responseType is a non-standard property, which has been subsumed by the Fetch API, and it's in the process of being removed from Firefox; please see https://bugzilla.mozilla.org/show_bug.cgi?id=1120171 and https://bugzilla.mozilla.org/show_bug.cgi?id=1411865

*Please note:* Rather than waiting for both `Fetch` *and* `ReadableStream` to be available in e.g. a Firefox ESR version (which is probably going to be 68 at the earliest), let's just decide that PDF.js release `2.1.266` will be the last one with `moz-chunked-arraybuffer` support and land this patch (since nothing should outright break without it anyway).",False
47f208df360c750c40f06d4573377fd6e90b6e6d,2019-03-30 23:39:36,Tim van der Meij,"Merge pull request #10698 from timvandermeij/updates

Update translations/packages and include the code of conduct for `pdfjs-dist` too",True
a020434b266e2f5b5d697fe7691894a29c49879d,2019-03-30 23:30:57,Tim van der Meij,Include the code of conduct for `pdfjs-dist` too,False
7cfa05078dbe8c0c09570410eaef08518e6a4956,2019-03-30 23:29:52,Tim van der Meij,Update packages,False
4653dc196b50be6464e8bd071a1341296e293d85,2019-03-30 23:26:17,Tim van der Meij,Update translations,False
c6ddbd55e2f30842499c200cffa309f7c78fa290,2019-03-30 00:30:28,Jonas Jenwald,"Add a `progressiveDataLength` fast-path to `ChunkedStream.ensureByte`

This is *similar* to the existing check using in `ChunkedStream.ensureRange`.",False
49e8a270c443f9b9f3c2d2afc73b19f1e89c599f,2019-03-29 21:50:31,Jonas Jenwald,"Update `ChunkedStream.makeSubStream` to actually check if (some) data exists when the `length` parameter is undefined

Note how `XRef.fetchUncompressed`, which is used *a lot* for most PDF documents, is calling the `makeSubStream` method without providing a `length` argument.
In practice this results in the `makeSubStream` method, on the `ChunkedStream` instance, calling the `ensureRange` method with `NaN` as the end position,  thus resulting in no data being requested despite it possibly being necessary.

This may be quite bad, since in this particular case it will lead to a new `ChunkedStream` being created *and* also a new `Parser`/`Lexer` instance. Given that it's quite possible that even the very first `Parser.getObj` call could throw `MissingDataException`, this could thus lead to wasted time/resources (since re-parsing is necessary once the data finally arrives).

You obviously need to be very careful to not have `ChunkedStream.makeSubStream` accidentally requesting the *entire* file, hence its `this.end` property is of no use here, but it should be possible to at least check that the `start` of the data is present before any potentially expensive parsing occurs.",False
b4c3b9459216c57aeb50f237d4f5857d92a08dcb,2019-03-29 04:31:38,Tim van der Meij,"Merge pull request #6606 from Rob--W/pattern-scaling

Improve performance and correctness of Tiling Patterns",True
89294aaa3fcc4cda32088ff1d839d404e1756e39,2019-03-29 03:59:50,Tim van der Meij,"Merge pull request #10692 from Mozilla-GitHub-Standards/master

Add Mozilla Code of Conduct",True
800de61422791dd6c263b2c2f56ea7c4506fe6da,2019-03-28 09:30:01,Mozilla-GitHub-Standards,"Add Mozilla Code of Conduct file

Fixes #10691.

_(Message COC002)_",False
f9c58115fca3d5f3e0494c08adec99c8b1c43f19,2019-03-28 04:37:08,Tim van der Meij,"Merge pull request #10683 from janpe2/type0-noncid-cmap

Use CMap in Type0 fonts when CFF is not a CID font",True
a63de0e2d41cce3d3cb13c377b43309a5ea78876,2019-03-28 04:36:39,Tim van der Meij,"Merge pull request #10685 from Snuffleupagus/preEvaluateFont-better-hashing

Take the `FirstChar`/`LastChar` properties into account when computing the hash in `PartialEvaluator.preEvaluateFont` (issue 10665)",True
5985d4069aa08a32729f6e01e8641d577cad06e8,2019-03-27 22:20:46,Rob Wu,TilingPattern: Add comment to explain the implementation,False
d3dc8f16b5ded12298a4d72b4684489811d642a0,2019-03-27 22:20:35,Rob Wu,"TilingPattern: Reverse transform after painting

This transform resulted in an incorrectly positioned object when the
bounding box's upper-left corner did not start at (0,0), because
the translation was not reverted. This patch adds the missing transform.

The test file (tiling-pattern-box.pdf) is based on the PDF from #2825.
All but the first cube (including the PDF data) have been removed.
To trigger the bug that is fixed by this commit, I changed the BBox of
the first pattern from ""[ 0 0 596 842]"" to ""[90 0 596 842]"". Without
this patch, the dashed vertical line that intersects the corners at A
and E would disappear.",False
a72a8e921f10da5dfdc72bb6907f3a3acd648825,2019-03-27 22:14:04,Rob Wu,"Avoid extreme sizing / scaling in tiling pattern

The new test file (tiling-pattern-large-steps.pdf) was manually created,
to have the following characteristics:
- Large xstep and ystep (90000)
- Page width is 4000 (which is larger than MAX_PATTERN_SIZE)
- Visually, the page consists of a red rectangle with a black border,
  surrounded by a 50 unit white padding.
- Before patch: blurry; After patch: sharp

Fixes #6496
Fixes #5698
Fixes #1434
Fixes #2825",False
9077abc2639e59430cb0089d5e79c1934a34bc0f,2019-03-27 20:57:10,Jonas Jenwald,"Take the `FirstChar`/`LastChar` properties into account when computing the hash in `PartialEvaluator.preEvaluateFont` (issue 10665)

Without this some fonts may incorrectly end up with matching `hash`es, thus breaking rendering since we'll not actually try to load/parse some of the fonts.",False
a2a824ed01dc1bd817d753d7df9a84503d10204f,2019-03-27 05:24:39,Jonas Jenwald,"Don't accidentally use an empty `hash` value when comparing `preEvaluatedFonts` in `PartialEvaluator.loadFont`

Note that `PartialEvaluator.preEvaluateFont` will return an empty string when no hash was computed. This will complete short-circuit the `fontAlias` comparison in `PartialEvaluator.loadFont`, since fonts which are totally different will then match if their `hash`es are empty.",False
cf1acd3eafdaf9ff20cde271a44af89599c9b60a,2019-03-27 03:41:09,Tim van der Meij,"Merge pull request #10681 from CodeDaraW/fix-electron

fix: electron enviroment detection",True
49c6233fbccee57ec7cd0082964aadeb8570d9a4,2019-03-26 23:08:44,Jani Pehkonen,Use CMap in Type0 fonts when CFF is not a CID font,False
60d4685c10164ade301f95c9103441737aa18e32,2019-03-26 22:05:23,Rob Wu,"Refactor TilingPattern

- Deduplicate size/scale calculation, by introducing `getSizeAndScale`.
- Eliminate unnecessary calculations / variables.",False
bb384dd5edd88a8093fb281d5ee0bdc41617199e,2019-03-26 21:04:13,Jonas Jenwald,"[Firefox regression] Fix `disableRange=true` bug in `PDFDataTransportStream`

Currently if trying to set `disableRange=true` in the built-in PDF Viewer in Firefox, either through `about:config` or via the URL hash, the PDF document will never load. It appears that this has been broken for a couple of years, without anyone noticing.

Obviously it's not a good idea to set `disableRange=true`, however it seems that this bug affects the PDF Viewer in Firefox even with default settings:
 - In the case where `initialData` already contains the *entire* file, we're forced to dispatch a range request to re-fetch already available data just so that file loading may complete.
 - (In the case where the data arrives, via streaming, before being specifically requested through `requestDataRange`, we're also forced to re-fetch data unnecessarily.) *This part was removed, to reduce the scope/risk of the patch somewhat.*

In the cases outlined above, we're having to re-fetch already available data thus potentially delaying loading/rendering of PDF files in Firefox (and wasting resources in the process).",False
1472c10bab3aa71a6efa9c70c6971cfb03dba006,2019-03-26 18:22:49,wuhao.daraw,fix: electron enviroment detection,False
9b5a937f78418ad6b114ca66d062cf2ae416d05f,2019-03-23 03:24:41,Tim van der Meij,"Merge pull request #10668 from Snuffleupagus/rm-read_with_streaming-test

Remove the Firefox-specific 'read with streaming' unit-test",True
234c1d2b2a9dcbc26fa93287c38cceb14e560f25,2019-03-22 17:13:18,Jonas Jenwald,"Remove the Firefox-specific 'read with streaming' unit-test

Support for the non-standard `moz-chunked-arraybuffer` response type is in the process of being removed from Firefox; see e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=1411865

For the time being, you probably want to keep support for this in the general PDF.js library given that feature detection is used. However, removing the unit-test immediately seems reasonable, since it will otherwise start failing once the platform support for `moz-chunked-arraybuffer` is gone.

Fixes 8851; please note that if unit-tests for the code in `fetch_stream.js` are wanted, which I'm assuming they are, those should live in their own file rather than being lumped into `network_spec.js` anyway.",False
bce9ff7347266e18326fff52c201faba04a96bd7,2019-03-22 03:27:41,Tim van der Meij,"Merge pull request #10652 from Snuffleupagus/browser-find-events

Prepare the `MOZCENTRAL` viewer for receiving zoom events from the browser UI (bug 786674, bug 1177385)",True
2e044bf646890665767c049c69a4f22bb5c2cc65,2019-03-21 17:12:04,Jonas Jenwald,"Prepare the `MOZCENTRAL` viewer for receiving zoom events from the browser UI (bug 786674, bug 1177385)

This lays the necessary foundation for handling zoom events originating within the browser itself, rather than in the viewer. Please note that this will also require a follow-up patch to `mozilla-central`, such that the viewer is actually notified when zooming occurs.",False
844aecf9e3bcec7c8e4fb3f35ebadb562eec8013,2019-03-21 04:24:13,Tim van der Meij,"Merge pull request #10657 from ThomasdenH/patch-2

Update test case description",True
b24a14738ab5b32f0e274e3a871fc201eded380f,2019-03-20 17:22:32,Thomas den Hollander,Update test case description,False
33bfbef6ba73014d60b5c071a6f8c4b8852ff8eb,2019-03-20 03:47:34,Tim van der Meij,"Merge pull request #10635 from timvandermeij/lexer-parser

Convert `src/core/parser.js` to ES6 syntax and write more unit tests for the lexer and the parser",True
4a4b197b9d2ce1a20690837df64db8fd183c70ac,2019-03-17 18:06:23,Tim van der Meij,"Write more unit tests for the lexer and the parser

Moreover, group the lexer unit tests per method. This matches what we
do for other classes and makes it more easily visible which methods
we don't or insufficiently unit test.

The parser itself is not unit tested yet, so this patch provides a start
for doing so. The `inlineStreamSkipEI` method is used in other end
marker detection methods, so it's important that its functionality is
correct for proper parsing.",False
2ee299a62b698fc1d5e6a2568526cbac6de4d938,2019-03-17 17:57:46,Tim van der Meij,"Convert `test/unit/parser_spec.js` to ES6 syntax

Moreover, disable `var` usage for this file.",False
7d3cb1957127b7fc7220bee02990f85de4a58f4f,2019-03-17 17:57:45,Tim van der Meij,"Convert the `Linearization` class in `src/core/parser.js` to ES6 syntax

Moreover, disable `var` usage for this file.",False
ee3cfb79863f2ddac69c029ef495cac57f36a937,2019-03-17 17:43:45,Tim van der Meij,"Merge pull request #10646 from terurou/svg-fill

Implement linear-gradient, radial-gradient and dummy-pattern in SVGGraphics.",True
9c70a3831c13f2025f17024618b5e31ddfddcece,2019-03-17 07:27:16,terurou,Fix to use radicalGradient.,False
7c9f1cc518fb19ecf8af0706d4e20bee93caeba2,2019-03-16 23:59:23,Tim van der Meij,"Merge pull request #10644 from Snuffleupagus/revokeObjectURL

Ensure that `blob:` URLs will be revoked when pages are cleaned-up/destroyed (JPEG memory usage)",True
9f6de3bfbb8894863c145516aad9ab0057a25101,2019-03-16 23:50:33,Tim van der Meij,"Merge pull request #10647 from Snuffleupagus/ImageMask-cached

Actually transfer eligible ImageMask data, rather than always copying it",True
c970a4b6ae56e389afaae5ffec8b9802273111a6,2019-03-16 19:51:56,terurou,Fix copy-paste mistake.,False
56eeeea1dca9b9a4ee4a43e74614e91e0a518695,2019-03-16 17:36:51,Jonas Jenwald,"Re-factor the `getTransfers` helper function into a ""private"" getter method on the `OperatorList`

This function is currently called with the `OperatorList` instance as its argument, hence I cannot think of any good reason for not just moving it into the `OperatorList` properly. (This will also help with other planned changes regarding the `ImageCache` functionality.)",False
7273795eb63962912ad45b84b8e05a1074f90335,2019-03-16 17:36:32,Jonas Jenwald,"Actually transfer eligible ImageMask data, rather than always copying it

By transfering `ArrayBuffer`s you can avoid having two copies of the same data, i.e. one copy on each of the worker/main-thread, for data that's used only *once* on the worker-thread.

Note how the code in [`PDFImage.createMask`](https://github.com/mozilla/pdf.js/blob/80135378cadd98b55a835446f0857e4bc30524e0/src/core/image.js#L284-L285) goes to great lengths to actually enable tranfering of the image data. However in [`PartialEvaluator.buildPaintImageXObject`](https://github.com/mozilla/pdf.js/blob/80135378cadd98b55a835446f0857e4bc30524e0/src/core/evaluator.js#L336) the `cached` property is always set to `true`, which disqualifies the image data from being transfered; see [`getTransfers`](https://github.com/mozilla/pdf.js/blob/80135378cadd98b55a835446f0857e4bc30524e0/src/core/operator_list.js#L552-L554).

For most ImageMask data this patch won't matter, since images found in the `/Resources -> /XObject` dictionary will always be indexed by name. However for *inline* images which contains ImageMask data, where only ""small"" images are cached (in both `parser.js` and `evaluator.js`), the current code will result in some unnecessary memory usage.",False
fc0f844539accfbbed1a13ad009e0529fa4680e6,2019-03-16 10:26:29,terurou,"Implement linear-gradient, radial-gradient and dummy-pattern in SVGGraphics.",False
88d57500302175c83db191d182f5e04e3682c7b9,2019-03-15 19:55:48,Jonas Jenwald,"Remove the `src` attribute from `Image` objects used with natively supported JPEG images, when pages are cleaned-up/destroyed

This will further help reduce the amount of image data that's currently being held alive, by explicitly removing the `src` attribute.

Please note that this is mostly relevant for browsers which do not support `URL.createObjectURL`, or where `disableCreateObjectURL` was manually set by the user, since `blob:` URLs will be revoked (see the previous patch).
However, using `about:memory` (in Firefox) it does seem that this may also be generally helpful, given that calling `URL.revokeObjectURL` won't invalidate the image data itself (as far as I can tell).",False
983b25f86347c9614706683f65437c494b010f8a,2019-03-15 15:10:58,Jonas Jenwald,"Ensure that `blob:` URLs will be revoked when pages are cleaned-up/destroyed

Natively supported JPEG images are sent as-is, using a `blob:` or possibly a `data` URL, to the main-thread for loading/decoding.
However there's currently no attempt at releasing these resources, which are held alive by `blob:` URLs, which seems unfortunately given that images can be arbitrarily large.

As mentioned in https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL the lifetime of these URLs are tied to the document, hence they are not being removed when a page is cleaned-up/destroyed (e.g. when being removed from the `PDFPageViewBuffer` in the viewer).
This is easy to test with the help of `about:memory` (in Firefox), which clearly shows the number of `blob:` URLs becomming arbitrarily large *without* this patch. With this patch however the `blob:` URLs are immediately release upon clean-up as expected, and the memory consumption should thus be considerably reduced for long documents with (simple) JPEG images.",False
80135378cadd98b55a835446f0857e4bc30524e0,2019-03-14 04:16:41,Tim van der Meij,"Merge pull request #10636 from Snuffleupagus/PDFDocumentProxy-destroy

Small clean-up of the `PDFDocumentProxy.destroy` method and related code",True
0abd0bc5ff96973f7930f5e0b4a2ca3a8f824711,2019-03-13 04:35:41,Tim van der Meij,"Merge pull request #10628 from Snuffleupagus/bug-1513120

Try to improve text-selection for Type3 fonts that utilize a non-default /FontMatrix (bug 1513120)",True
24fc4f83ca293a836cf410587849572a3109a762,2019-03-12 17:55:29,Jonas Jenwald,"Small clean-up of the `PDFDocumentProxy.destroy` method and related code

Note how `PDFDocumentProxy.destroy` is a nothing more than an alias for `PDFDocumentLoadingTask.destroy`. While removing the latter method would be a breaking API change, there's still room for at least some clean-up here.

The main changes in this patch are:
 - Stop providing a `PDFDocumentLoadingTask` instance *separately* when creating a `PDFDocumentProxy`, since the loadingTask is already available through the `WorkerTransport` instance.
 - Stop tracking the `PDFDocumentProxy` instance on the `WorkerTransport`, since that property is completely unused.
 - Simplify the 'Multiple `getDocument` instances' unit-tests by only destroying *once*, rather than twice, for each document.",False
88f9e633dde47fda1daf22a94e93357a67bc0095,2019-03-12 15:02:08,Jonas Jenwald,"Try to improve text-selection for Type3 fonts that utilize a non-default /FontMatrix (bug 1513120)

For Type3 fonts text-selection is often not that great, and there's a couple of heuristics used to try and improve things. This patch simple extends those heuristics a bit, and fixes a pre-existing ""naive"" array comparison, but this all feels a bit brittle to say the least.

The existing Type3 test-coverage isn't that great in general, and in particular Type3 `text` tests are few and far between, hence why this patch adds *two* different new `text` tests.",False
8d4d7dbf58e79476fee127225f5908e8ef0fccd9,2019-03-10 23:34:36,Tim van der Meij,Convert the `Lexer` class in `src/core/parser.js` to ES6 syntax,False
7d0ecee771e50a7125725a61729c63ac69f8d275,2019-03-10 23:34:35,Tim van der Meij,Convert the `Parser` class in `src/core/parser.js` to ES6 syntax,False
d587abbceb97008ed744261c219c90d3ce981f2b,2019-03-10 01:37:12,Tim van der Meij,"Merge pull request #10633 from Snuffleupagus/murmurhash-class

Convert `MurmurHash3_64` to an ES6 class",True
f17ca49a57c3417b5c146d69ded941697555bcfe,2019-03-10 01:17:50,Tim van der Meij,"Merge pull request #10634 from Snuffleupagus/NativeImageDecoder

Move `NativeImageDecoder` into a separate file, and convert it to a `class`",True
6b1ac44aeaab8eabe2c2aef8ccf2d4955ab0be2d,2019-03-09 21:33:06,Jonas Jenwald,"Convert `MurmurHash3_64` to an ES6 class

Notable changes:
 - Remove the `return this;` from the `MurmurHash3_64.update` method, since it's completely unused and doesn't make a lot of sense.
 - Remove the loop(s) from the `MurmurHash3_64.hexdigest` method, since creating a temporary array and then looping over it is wasteful given how simple this can be written with modern JavaScript.",False
266550205528b79df5279c46264b0264c8926533,2019-03-09 20:29:04,Jonas Jenwald,"Move `NativeImageDecoder` into a separate file, and convert it to a `class`

Given the size of the `src/core/evaluator.js` file, it cannot hurt to move some of its (image related) helper functionality into a separate file.",False
e41c4aece4eeba1f1ab94985eee1b94ac4aaffd4,2019-03-09 03:46:10,Tim van der Meij,"Merge pull request #10621 from janpe2/svg-Tm-stroke

Don't scale SVG stroke width by text matrix",True
8b149b818ee1aa6fba8bb932d4b2e00ca24eed76,2019-03-09 03:36:01,Tim van der Meij,"Merge pull request #10615 from Snuffleupagus/corrupt-inline-ASCII85Decode

Handle corrupt ASCII85Decode inline images with whitespace ""inside"" of the EOD marker (issue 10614)",True
e1b01a601c7ff4c858d36f1b9277a287badacc1e,2019-03-07 04:16:53,Tim van der Meij,"Merge pull request #10605 from timvandermeij/display-utils

Convert `let` to `const` if possible in, and improve unit test coverage for, `src/display/display_utils.js`",True
b244622f7e9744e06a8680ad885fe55b4c284c9e,2019-03-07 04:11:54,Tim van der Meij,"Improve unit test coverage for `src/display/display_utils.js`

The `DOMCanvasFactory` class is now fully covered. Moreover, missing
cases for the `getFilenameFromUrl` function have been included.

Finally, `var` usage has been removed.",False
87a70f335984b1664723895bdc5bdc6e6af83715,2019-03-07 04:11:54,Tim van der Meij,"Convert `let` to `const` if possible in `src/display/display_utils.js`

Finally, `var` usage is removed.",False
07ef11f1a07408b1c0699e8fa8c0ca8384532823,2019-03-07 04:07:01,Tim van der Meij,"Merge pull request #10610 from Snuffleupagus/prefs-type-validation

Add type validation to the `default_preferences` generation (PR 10548 follow-up)",True
e9661edda74963dbbba411529fe48f8e8cd01c5c,2019-03-06 05:10:58,Tim van der Meij,"Merge pull request #10608 from Snuffleupagus/worker-less-Date-usage

Reduce usage of `Date.now()` in `src/core/worker.js`",True
d9e30b3452a6383d24a05562c33f8a13818fc1d0,2019-03-06 02:24:25,Jani Pehkonen,Don't scale SVG stroke width by text matrix,False
3ce8fe79270e9a58ec17eb9e837f2cfdbc048322,2019-03-05 04:11:36,Jonas Jenwald,"Handle corrupt ASCII85Decode inline images with whitespace ""inside"" of the EOD marker (issue 10614)

There's a number of things wrong with the PDF document, since its inline images are first all *a lot* larger than the 4 KB limit (as mandated by the specification, see https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#G7.1852045).

Furthermore the actual ASCII85Decode data is interspersed with *a lot* of needless whitespace, in particular also ""inside"" of the EOD (end-of-data) marker which thus completely breaks the detection.
Note that according to the specification, see https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#G6.1940130, this patch should be safe since it explicitly mentions that *all* whitespace should be ignored.",False
f7cc33165494b45579c9d8536d3b7c1b1bcfc64c,2019-03-03 17:21:57,Jonas Jenwald,"Add type validation to the `default_preferences` generation (PR 10548 follow-up)

The generated `default_preferences.json` file is necessary when initializing the Firefox preferences, which only supports certain types, hence this patch adds additional validation to help prevent run-time errors in Firefox.

Given that these changes add a code-path to `AppOptions.getAll` which could throw, the `OptionKind.PREFERENCE` branch is also modified to require *exact* matching to prevent (future) errors in the viewer.

Finally the conditionally defined `defaultOptions` will no longer (potentially) be considered during the `gulp default_preferences` task, to make it more difficult for them to be accidentally included.",False
7caf769a666387304ee24e738a20b10325ff7e65,2019-03-03 00:53:56,Jonas Jenwald,"Move the `deprecated` helper function to the `src/display/display_utils.js` file

Given that the function is (purposely) independent of the verbosity level and that its message is worded to only apply on the main-thread, there's no reason to duplicate this across the built `pdf.js`/`pdf.worker.js` files.",False
4170c414faf3014636114b7cf4454809c2e6baf2,2019-03-03 00:53:52,Jonas Jenwald,"Reduce usage of `Date.now()` in `src/core/worker.js`

Currently for every single parsed/rendered page there's no less than *four* `Date.now()` calls being made on the worker-side. This seems totally unnecessary, since the result of these calls are, by default, not used for anything *unless* the verbosity level is set to `INFO`.",False
c43396c2b7310e2ae3849be6504b36dc60fc1d5f,2019-03-02 19:13:53,Tim van der Meij,"Merge pull request #10590 from janpe2/svg-missing-moveto

Fix missing moveTos in SVG paths",True
c4d2cddbd3a60c029b917b570cd5228b133ba10f,2019-03-02 19:01:33,Tim van der Meij,"Merge pull request #10606 from timvandermeij/updates

Update translations and packages",True
b607ef4b65c62d98e8a6f6d2d61277562ee34316,2019-03-02 18:53:47,Tim van der Meij,Update packages,False
ff8e7114f4bdedcf0a3ed5a1aff8fd126db584bf,2019-03-02 18:49:27,Tim van der Meij,Update translations,False
4f13eb00d0c7f0508c5c88500fe42308ce724a56,2019-03-02 17:33:16,Tim van der Meij,"Merge pull request #10604 from brendandahl/fix-type1-charset

Put the string name of the glyph in the charset array.",True
7d6ab081eb1c0f7b7079883c5d62ea6ca5d96f5d,2019-03-02 07:33:51,Brendan Dahl,"Put the string name of the glyph in the charset array.

Also, only warn once per font when missing a glyph name.",False
7208f0ff675c656bc4987427571f2e83be476d49,2019-03-02 00:17:03,Tim van der Meij,"Merge pull request #10601 from Snuffleupagus/TextLayer-canvas-cleanup

Zero the width/height of the temporary canvas used during `TextLayer` rendering",True
d7d1f238268e91d55dc062f088c635c4e957968f,2019-03-01 08:35:37,Jonas Jenwald,"Zero the width/height of the temporary canvas used during `TextLayer` rendering

The default size of these canvases seem to be `300 x 150` (two orders of magnitude larger than the ones in PR 10597), which probably is sufficient enough to matter since there's one such canvas for each textLayer that's rendered in the viewer.

Also fixes the incorrect rejection reason, i.e. one using a string rather than an `Error`, in the `TextLayerRenderTask.cancel` method.",False
34022d2fd19caa98a56bc60c4e8ebde9eb7ea196,2019-03-01 06:52:29,Brendan Dahl,"Merge pull request #10591 from brendandahl/fix-charset

Add unique glyph names for CFF fonts.",True
9559d57636a03bb0904ac44bb064caff3601d5b6,2019-03-01 04:11:22,Tim van der Meij,"Merge pull request #10595 from Snuffleupagus/JpegDecode-zero-tmpCanvas

Zero the width/height of the temporary canvas used during `JpegDecode` (issue 10594)",True
39fa26ea33be94193cc83e99b9a9811e3d819288,2019-03-01 04:07:24,Tim van der Meij,"Merge pull request #10597 from Snuffleupagus/isFontSubpixelAAEnabled-canvas-cleanup

Ensure that the temporary canvas created in `CanvasGraphics.isFontSubpixelAAEnabled` will be cleared",True
85537fac4d1e46b8e58837c82034a19eb5a316e8,2019-03-01 04:02:29,Tim van der Meij,"Merge pull request #10599 from Snuffleupagus/upgrade-webpack

Update Webpack to the latest stable version (4.29.6)",True
af5597b7e53271027b7cd5e4f0ef688984ac737a,2019-03-01 03:55:45,Tim van der Meij,"Merge pull request #10573 from Snuffleupagus/type3-avoid-truncation

Avoid truncating/breaking some Type3 glyphs in `compileType3Glyph` (bug 1245391, issue 10568)",True
5750a7e55760f8e74e715561d202bbb6e3aff065,2019-02-28 18:57:43,Jonas Jenwald,Update Webpack to the latest stable version (4.29.6),False
0f24bb73a6c6b5b618d6c4ae1939ed4c547a5f25,2019-02-28 18:56:14,Jonas Jenwald,"Revert ""Try to *temporarily* hack around the `__non_webpack_require__` bug (issue 10177)""

This reverts commit 6f67e39a0a1f8541f2f4af1ea03bdeaf32561f44, since the regressing bug was fixed upstream.",False
b61b4d3229774145aee71208e10246162b35c7f3,2019-02-28 18:48:38,Jonas Jenwald,"Ensure that the temporary canvas created in `CanvasGraphics.isFontSubpixelAAEnabled` will be cleared

While this particular canvas may be small, there can still be an arbitrarily large number of them (one per page rendered), which can/will eventually add up memory wise. This can be easily avoided by using the `cachedCanvases` abstraction instead, which will ensure that the `isFontSubpixelAAEnabled` canvas is removed together with other temporary canvases in `CanvasGraphics.endDrawing`.",False
4687cc85acc3a374e70343a6732b7d97efa61de4,2019-02-28 16:53:34,Jonas Jenwald,Zero the width/height of the temporary canvas used during `JpegDecode` (issue 10594),False
8a596ef5d5347f9342cfbde1b1174d38359cbd1c,2019-02-28 04:30:29,Brendan Dahl,"Add unique glyph names for CFF fonts.

Printing on MacOS was broken with the previous approach of just mapping
all the glyphs to notdef.",False
21d70b19c23c688a10d870e49dc9b58fff691610,2019-02-28 04:15:20,Tim van der Meij,"Merge pull request #10585 from Snuffleupagus/cmap-fetch

Load built-in CMap files using the Fetch API when possible",True
f664e074c99b0a4a81932d13b2ab5bb3761e5da5,2019-02-27 17:34:20,Jonas Jenwald,"Avoid using the Fetch API, in `GENERIC` builds, for unsupported protocols (issue 10587)",False
cbc07f985b6819609eeb401c4f1f3e9e63409d4a,2019-02-27 17:34:19,Jonas Jenwald,Load built-in CMap files using the Fetch API when possible,False
df7756d2a4a03831d836977ed47fa9e02f5a19c1,2019-02-27 04:17:49,Tim van der Meij,"Merge pull request #10589 from Snuffleupagus/custom_spec-node

Run the `custom_spec` unit-tests in Node.js/Travis (PR 10537 follow-up)",True
c5cf3ab80845d22e81203bd1f39bb0edc4aba666,2019-02-27 03:10:55,Jonas Jenwald,Run the `custom_spec` unit-tests in Node.js/Travis (PR 10537 follow-up),False
52e8e9b059e682dfecfa762957d3ffcccacbeddb,2019-02-26 23:30:35,Jani Pehkonen,Fix missing moveTos in SVG paths,False
652059056c8353298e8ca2dfd2fd658c3881031a,2019-02-26 04:28:47,Tim van der Meij,"Merge pull request #10582 from Snuffleupagus/web-finally

Use `Promise.prototype.finally` in the `PDFRenderingQueue.renderView` method",True
954bebb3c3864acddeb8f3d8bbe991d57d5fcd64,2019-02-25 16:50:51,Jonas Jenwald,"Use `Promise.prototype.finally` in the `PDFRenderingQueue.renderView` method

Since [`finally`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally) is now supported through `src/shared/compatibility.js`, the temporary variable is no longer necessary.

Also, this patch fixes the inconsistent return type of `PDFRenderingQueue.getHighestPriority` when no pages/thumbnails are visible.",False
de56518799b869d1cb4d313c7628a8aa956966f8,2019-02-25 00:13:40,Tim van der Meij,"Merge pull request #10577 from Snuffleupagus/util-split

Move worker-thread only functions from `src/shared/util.js` and into a new `src/core/core_utils.js` file",True
77a7e04d689985eda2837a620a23098f97f745ac,2019-02-24 23:36:25,Tim van der Meij,"Merge pull request #10578 from Snuffleupagus/non_webpack_require

Try to *temporarily* hack around the `__non_webpack_require__` bug, and update Webpack to the latest stable version (issue 10177)",True
220b56717ed4f9cd4546eea8fa6f7fb47266df3c,2019-02-24 20:23:43,Tim van der Meij,"Merge pull request #10579 from Snuffleupagus/PDFSidebar-signature

Re-factor the `PDFSidebar` constructor to simplify its call-site (PR 10123 follow-up)",True
1753f91c6b3f614fa8c7f7dc7f2c88bc275cbe44,2019-02-24 17:45:24,Jonas Jenwald,Re-factor the `PDFSidebar` constructor to simplify its call-site (PR 10123 follow-up),False
3a09a2f7a5b017119dc87589978229d31620e8a0,2019-02-24 05:05:42,Jonas Jenwald,Update the year in the `license_header` files,False
db5dc141587e9a015b3c04c0cc47481a881754cf,2019-02-24 05:05:39,Jonas Jenwald,"Move worker-thread only functions from `src/shared/util.js` and into a new `src/core/core_utils.js` file

The `src/shared/util.js` file is being bundled into both the `pdf.js` and `pdf.worker.js` files, meaning that its code is by definition duplicated.
Some main-thread only utility functions have already been moved to a separate `src/display/display_utils.js` file, and this patch simply extends that concept to utility functions which are used *only* on the worker-thread.

Note in particular the `getInheritableProperty` function, which expects a `Dict` as input and thus *cannot* possibly ever be used on the main-thread.",False
c67ad325546efe3750a9d6d8aae71c7f753ac8ad,2019-02-24 02:04:12,Jonas Jenwald,Update Webpack to the latest stable version (4.29.5),False
6f67e39a0a1f8541f2f4af1ea03bdeaf32561f44,2019-02-24 02:04:08,Jonas Jenwald,"Try to *temporarily* hack around the `__non_webpack_require__` bug (issue 10177)

In order to, quickly, unblock future Webpack updates this patch implements a *temporary* work-around for the regression; please refer to issue 10177 for additional details.
Please note that this patch doesn't require *any* changes to the source code, but only (small) build-time changes to `gulpfile.js` and as such will be easy to revert.",False
a1f75179967e9416089c812e6c75978430a0e141,2019-02-23 21:00:16,Jonas Jenwald,"Rename the `src/display/dom_utils.js` file to `src/display/display_utils.js`

This file (currently) contains not only DOM-specific helper functions/classes, but is used generally for various helper code relevant for main-thread functionality.",False
fb774a65b0bd8328501bf31ea950bd533c4bff52,2019-02-22 03:59:43,Jonas Jenwald,"Avoid truncating/breaking some Type3 glyphs in `compileType3Glyph` (bug 1245391, issue 10568)

*Hopefully this patch makes sense, since I cannot claim to fully understand this function.*

With the changes made in PR 3354 *some* Type3 glyph outlines are no longer rendering correctly, since the final paths were being accidentally ignored.
The fact that Type3 fonts are not very common in PDF documents, and that most Type3 glyphs are unaffected by this regression, probably explains why this has gone unnoticed since 2013.",False
ece6a31a442d8d2489817579dfc57ed371135d3a,2019-02-17 22:08:49,Tim van der Meij,"Merge pull request #10560 from timvandermeij/updates

Update translations and packages",True
a4fd6aa94725f3c3f9ac3acdcad2b5c4c926cfd8,2019-02-17 21:56:35,Tim van der Meij,Update packages,False
01ac6cd8c6d743b60edd0081922280ee82df8b9b,2019-02-17 21:10:22,Tim van der Meij,Update translations,False
ff74a66672c2980aa3dc2dd1b6f1407026b831de,2019-02-17 20:36:55,Tim van der Meij,"Merge pull request #10558 from Snuffleupagus/PDFDataRangeTransport-tests

Re-factor the `PDFDataRangeTransport` unit-tests and enable them in Node.js/Travis",True
a0354494bd990dd3046493a74d0e984e00a1b914,2019-02-17 19:15:17,Jonas Jenwald,"Re-factor the `PDFDataRangeTransport` unit-tests and enable them in Node.js/Travis

There doesn't appear to be any particular reason for only running these unit-tests in browsers, since the `PDFDataRangeTransport` functionality itself should be back-end agnostic.",False
507e0a49074842ec610bfb8d8d72aab6c4d44c12,2019-02-17 19:11:14,Jonas Jenwald,"Add a new `DOMFileReaderFactory` helper to the unit-tests, and re-factor `NodeFileReaderFactory` to be asynchronous

This allows simplification of the 'creates pdf doc from URL and aborts loading after worker initialized' API unit-test.

Note that the `DOMFileReaderFactory` uses the Fetch API, for simplicity, since it should be available in all browsers where we're running tests.",False
43491c19eeb99c30977beac217e5a176835e8a5c,2019-02-17 00:32:59,Tim van der Meij,"Merge pull request #10548 from Snuffleupagus/generate-default_preferences

Generate the `default_preferences.json` file from `AppOptions`",True
b6f58191ca9c35bec4d3646840c7bd37b529ee95,2019-02-17 00:11:59,Tim van der Meij,"Merge pull request #10554 from Snuffleupagus/rendering-cancelled

Simplify the `updatetextlayermatches` event handling in `TextLayerBuilder`",True
50afff9918cc55c78bbe74c324fe53a38ea75898,2019-02-16 23:56:44,Tim van der Meij,"Merge pull request #10556 from Snuffleupagus/documentInfo-collection

[api-minor] Expose the existence of a `Collection` dictionary via the  `getMetadata` API method (issue 10555)",True
ac7522d34b138674afc84754dc1297288cc88496,2019-02-16 23:39:42,Tim van der Meij,"Merge pull request #10557 from timvandermeij/config

Bump versions in `pdfjs.config`",True
77de6ee1f6fecacadd47ee987f49125bb330ac15,2019-02-16 23:37:23,Tim van der Meij,Bump versions in `pdfjs.config`,False
599dcf5a44c52404cf54a5670283017b95bc3b4b,2019-02-16 15:41:07,Jonas Jenwald,"Fix `{PDFPageView, PDFThumbnailView}.cancelRendering` to avoid visual artifacts when called directly

Currently these methods are only used from the respective `reset` methods, and from `{BaseViewer, PDFThumbnailViewer}._cancelRendering` which only runs when the active document is closed.

This patch changes `{PDFPageView, PDFThumbnailView}.cancelRendering` to *only* cancel any pending rendering operations, and doesn't attempt to reset e.g. the `renderingState`, since that causes visual glitches (duplicated canvases in the viewer) when called directly.
Furthermore, unless you ""know"" what you're doing, the `{PDFPageView, PDFThumbnailView}.reset` methods are what *should* normally be used instead.",False
1ded729130ead6b11009f9995e2ff1087508150d,2019-02-16 15:41:04,Jonas Jenwald,"Simplify the `updatetextlayermatches` event handling in `TextLayerBuilder`

This implements the nice suggestion from https://github.com/mozilla/pdf.js/pull/10099#discussion_r219698000, which I at the time didn't think would work.
I'll probably have to plead temporary insanity here, since it *should* have been totally obvious to me how this could be implemented. By simply not registering the event until the `textLayer` is actually rendered, removing the event on `cancel` works just fine.

This patch also removes the `pagecancelled` event, given that it's no longer used anywhere in the code-base and that its implemention was flawed since it wasn't guaranteed to be called in *every* situation where rendering was actually cancelled.",False
60f6d49ff7b150c93d234f0add1412ed2b2fba7a,2019-02-15 20:10:31,Jonas Jenwald,"[api-minor] Expose the existence of a `Collection` dictionary via the `getMetadata` API method (issue 10555)

Given the complexity of this functionality, and the fact that it doesn't seem widely used, I highly doubt that it'd ever make sense to support Collections; see also https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#M11.9.39646.2Heading.824.Collections",False
0f0650f426ac12d931109d3c0fd4b249ddb732c0,2019-02-15 01:10:34,Jonas Jenwald,"Generate the `default_preferences.json` file from `AppOptions`

Currently any editing of the preferences require updates in *three* separate files, which isn't a great developer experience to say the least.

This has annoyed me sufficiently to write this patch, which moves the definition of all preferences into `AppOptions` and adds a new `gulp` task to generate the `default_preferences.json` file for the builds where it's needed.",False
81f5835cd7024827e0671ccd66525df98fb15703,2019-02-13 01:38:01,Brendan Dahl,"Merge pull request #10539 from Snuffleupagus/fallback-disableFontFace-v2

[api-minor] Fallback to the built-in font renderer when font loading fails",True
a045a00af34b764edda5991d2bcd18541ed60536,2019-02-12 04:44:01,Tim van der Meij,"Merge pull request #10540 from Snuffleupagus/viewOnLoad-pref-schema-type

[Chrome extension] Add missing ""type"" entry for the `viewOnLoad` preference in the `preferences_schema.json` file (PR 10502 follow-up)",True
1d90c760974c03f98f44feeece70315cf91be78b,2019-02-12 04:42:29,Tim van der Meij,"Merge pull request #10537 from timvandermeij/unittest

Improve unit test coverage",True
9fa7ae13977049e8d2bf346b68bc9a2ee1f02423,2019-02-12 04:37:38,Tim van der Meij,"Merge pull request #10545 from timvandermeij/undo-bump

Undo the `pdfjs.config` version bumps",True
67f3e48832029659f5c903f64cd5466b553d3fc7,2019-02-12 04:35:51,Tim van der Meij,"Undo the `pdfjs.config` version bumps

The release needs to be made again for the version number to be correct.",False
2b4709d1a84d88c520c309fad6408150ee2d6870,2019-02-11 15:26:43,Jonas Jenwald,"[Chrome extension] Add missing ""type"" entry for the `viewOnLoad` preference in the `preferences_schema.json` file (PR 10502 follow-up)

Fixes 10538",False
b6d090cc147b21a569baeec0b8bedb11e97b4602,2019-02-11 14:57:08,Jonas Jenwald,"Fallback to the built-in font renderer when font loading fails

After PR 9340 all glyphs are now re-mapped to a Private Use Area (PUA) which means that if a font fails to load, for whatever reason[1], all glyphs in the font will now render as Unicode glyph outlines.
This obviously doesn't look good, to say the least, and might be seen as a ""regression"" since previously many glyphs were left in their original positions which provided a slightly better fallback[2].

Hence this patch, which implements a *general* fallback to the PDF.js built-in font renderer for fonts that fail to load (i.e. are rejected by the sanitizer). One caveat here is that this only works for the Font Loading API, since it's easy to handle errors in that case[3].

The solution implemented in this patch does *not* in any way delay the loading of valid fonts, which was the problem with my previous attempt at a solution, and will only require a bit of extra work/waiting for those fonts that actually fail to load.

*Please note:* This patch doesn't fix any of the underlying PDF.js font conversion bugs that's responsible for creating corrupt font files, however it does *improve* rendering in a number of cases; refer to this possibly incomplete list:

[Bug 1524888](https://bugzilla.mozilla.org/show_bug.cgi?id=1524888)
Issue 10175
Issue 10232

---
[1] Usually because the PDF.js font conversion code wasn't able to parse the font file correctly.

[2] Glyphs fell back to some default font, which while not accurate was more useful than the current state.

[3] Furthermore I'm not sure how to implement this generally, assuming that's even possible, and don't really have time/interest to look into it either.",False
13230a1123c3c540527cef46c3727bd0d63f6294,2019-02-11 01:39:57,Jonas Jenwald,"Remove the ability to pass in more than one font to `BaseFontLoader.bind`

 - The only existing call-site, of this method, is never passing more than *one* font at a time anyway.
 - As far as I can remember, this functionality has never actually been used (caveat: I didn't check the git history).
 - This allows simplification of the method, especially by making use of the fact that it's now asynchronous.
 - It should be just as easy to call `BaseFontLoader.bind` from within a loop, rather than having the loop in the method itself.",False
af3fcca88d172fa43ef22d4840537587d85459ea,2019-02-11 01:39:57,Jonas Jenwald,"Convert `BaseFontLoader.bind` to be async, and only utilize `BaseFontLoader._queueLoadingCallback` when actually necessary

Currently all fonts are using the `_queueLoadingCallback` method to determine when they have been loaded[1]. However in most cases this is just adding unnecessary overhead, especially with `BaseFontLoader.bind` now being asynchronous, given how fonts are loaded:
 - For fonts loaded using the Font Loading API, it's already possible to easily tell when a font has been loaded simply by checking the `loaded` promise on the FontFace object itself.
 - For browsers, e.g. Firefox, which support synchronous font loading it's already assumed that fonts are immediately available.

Hence the `_queueLoadingCallback` method is moved into the `GenericFontLoader`, such that it's only utilized for fonts which are loaded using CSS.

---
[1] In the ""fonts loaded using CSS"" case, this is already a hack anyway as outlined in the comments.",False
7c91e94b1977697eac31675f6bdbed91d16e879a,2019-02-11 00:07:34,Tim van der Meij,Implement the `NodeCanvasFactory` class to execute more unit tests in Node.js,False
b6eddc40b5ddf15a4e1d6fedd8c2be08522a58e8,2019-02-10 23:28:52,Tim van der Meij,Write unit tests for the `string32` and `toRomanNumerals` utility functions,False
dfe7d9bc26548cb8ad6ff09eb66efa85ce248bb9,2019-02-10 20:52:45,Tim van der Meij,"Merge pull request #10530 from a4lg/fix-copytext-outofucs2

Fix copying on supplementary plane characters",True
6757b6e2d002c2739aad51e734b547f0c4e806c2,2019-02-10 19:44:59,Tim van der Meij,"Merge pull request #10534 from Snuffleupagus/dist-link

Try to hack-around the broken `pdfjs-dist` links, such that they will point to the main library releases (issue 10391)",True
96ba6afd476cfc4fa4431dc0c5f8b3c26e3ba035,2019-02-10 14:44:53,Tsukasa OI,"Fix copying on supplementary plane characters

pdf.js had a problem when copying characters on supplementary planes
(0xPPXXXX where PP is nonzero).  This is because certain methods of
PartialEvaluator use classic String.fromCharCode instead of ES6's
String.fromCodePoint.

Despite the fact that readToUnicode method *tried* to parse out-of-UCS2
code points by parsing UTF-16BE, it was inadequate because
String.fromCharCode only supports UCS-2 range of Unicode.",False
62d7332d4915ccd99e0bf5f35bf1211b5ebfc7ab,2019-02-09 21:55:20,Jonas Jenwald,"Try to hack-around the broken `pdfjs-dist` links, such that they will point to the main library releases (issue 10391)",False
eb7fc2625fb42d606e7c59bd8f02c8f07661d043,2019-02-09 19:56:10,Tim van der Meij,"Merge pull request #10533 from timvandermeij/bump

Bump the version number in `pdfjs.config`",True
554d50563f1edc8bfe1adfd564720309afac5ea7,2019-02-09 19:53:51,Tim van der Meij,Bump the version number in `pdfjs.config`,False
14c012b6506ebed671da613bf588998bb11f7edf,2019-02-09 19:36:47,Tim van der Meij,"Merge pull request #10532 from timvandermeij/bump

Bump base version and version prefix in `pdfjs.config`",True
6a40f2fc62c5b23370b8b395c70109b7581d9078,2019-02-09 19:29:48,Tim van der Meij,Bump base version and version prefix in `pdfjs.config`,False
2b6e6364efcb5e592db39bd8d218e75b77ec2b79,2019-02-09 03:10:16,Tim van der Meij,"Merge pull request #10527 from Snuffleupagus/classList-add-remove

Add a polyfill for `classList.{add, remove}` with more than one parameter",True
3bcf9187ec586f5e7227a05bd6e44c129e6ec083,2019-02-08 18:05:01,Jonas Jenwald,"Add a polyfill for `classList.{add, remove}` with more than one parameter

Unsurprisingly IE11 doesn't support this, so a polyfill is needed since otherwise the sidebar can no longer be opened.

Also, simplifies the existing `classList.toggle` polyfill.",False
7d24fc34f9fb4045d49025512e5bb6989709eb13,2019-02-07 04:23:43,Tim van der Meij,"Merge pull request #10525 from Snuffleupagus/more-classList-toggle

Convert more code to use `classList.toggle` with the `force` parameter",True
19795597a2a9e982fa4a263fb739e81d46db3c93,2019-02-06 21:48:45,Jonas Jenwald,"Convert more code to use `classList.toggle` with the `force` parameter

There's a bunch of code, in the viewer, which for historical reasons use `switch` statements to add and remove CSS classes.
This code can be simplified, and unnecessary duplication avoided, by using `classList.toggle` instead.",False
c0d6e46e392b327996eb0964b7932cb5bdde1727,2019-02-05 04:24:14,Tim van der Meij,"Merge pull request #10502 from Snuffleupagus/adjust-onLoad-prefs

Modify a number of the viewer preferences, whose current default value is `0`, such that they behave as expected with the view history",True
9f9d87c3ceae59e61b0095a6cb739908138c0799,2019-02-03 20:12:30,Tim van der Meij,"Merge pull request #10517 from Snuffleupagus/rm-currentScript-polyfill

[api-minor] Remove the `document.currentScript` polyfill",True
614e502227214e92debe8c43776cf8cccd9f700f,2019-02-03 18:39:24,Jonas Jenwald,"[api-minor] Remove the `document.currentScript` polyfill

This polyfill is currently used in only *one* file, i.e. `src/display/api.js`, and only when trying to build a *fallback* `workerSrc` path.

Given that the global `workerSrc` should *always* be set[1] when using the PDF.js library[2], and that the fallback `workerSrc` should only be regarded as a best-effort solution anyway, there isn't a particularily strong reason to keep the compatibility code in my opinion.

---
[1] Other supported options include setting the global `workerPort`, or passing in a `PDFWorker` instance as part of the `getDocument` call.

[2] Which is clearly mentioned in the JSDocs in `src/display/worker_options.js`.",False
80495e61b7a13f5151dc3dcecdd370e9354925eb,2019-02-02 20:11:25,Tim van der Meij,"Merge pull request #10515 from Snuffleupagus/createPromiseCapability-settled

Add a `settled` property, tracking the fulfilled/rejected stated of the Promise, to `createPromiseCapability`",True
22468817e1095d260ab10c40b27f3282231cafed,2019-02-02 19:48:56,Jonas Jenwald,"Add a `settled` property, tracking the fulfilled/rejected stated of the Promise, to `createPromiseCapability`

This allows cleaning-up code which is currently manually tracking the state of the Promise of a `createPromiseCapability` instance.",False
ef634b51e13a2c7b58df102bba55bef84d67c615,2019-02-02 14:51:18,Jonas Jenwald,"Re-factor how the ""compatibility"" values are specified in `AppOptions`

The intention with this change is to, more clearly, highlight when the default values may possibly be overridden by ""compatibility"" values.",False
9d8342002cb0a00afc4b71f62d702f99234a492c,2019-02-02 14:51:18,Jonas Jenwald,"Move the `PDFHistory` initialization into a helper method in `PDFViewerApplication`

This avoids having the initialization code ""spread out"", and will become even simpler once the `TODO` is addressed (which I'm planning on fixing as soon as possible).",False
4d4c98d1eb8bbc737f2160dd9190a7c634554089,2019-02-02 14:51:18,Jonas Jenwald,"Attempt to migrate the old `showPreviousViewOnLoad`/`disablePageMode` preferences to the new `viewOnLoad` preference

This patch ignores the recently added `disableOpenActionDestination` preference, since the latest PDF.js version found on the ""Chrome Web Store"" doesn't include it.",False
6806248030fdc24b985a610e6dc4123b50c73a7a,2019-02-02 14:51:18,Jonas Jenwald,"Modify a number of the viewer preferences, whose current default value is `0`, such that they behave as expected with the view history

The intention with preferences such as `sidebarViewOnLoad`/`scrollModeOnLoad`/`spreadModeOnLoad` were always that they should be able to *unconditionally* override their view history counterparts.
Due to the way that these preferences were initially implemented[1], trying to e.g. force the sidebar to remain hidden on load cannot be guaranteed[2]. The reason for this is the use of ""enumeration values"" containing zero, which in hindsight was an unfortunate choice on my part.
At this point it's also not as simple as just re-numbering the affected structures, since that would wreak havoc on existing (modified) preferences. The only reasonable solution that I was able to come up with was to change the *default* values of the preferences themselves, but not their actual values or the meaning thereof.

As part of the refactoring, the `disablePageMode` preference was combined with the *adjusted* `sidebarViewOnLoad` one, to hopefully reduce confusion by not tracking related state separately.

Additionally, the `showPreviousViewOnLoad` and `disableOpenActionDestination` preferences were combined into a *new* `viewOnLoad` enumeration preference, to further avoid tracking related state separately.",False
dd4620530d89381746ea974e5eb1c39f7f966542,2019-02-02 14:51:16,Jonas Jenwald,"Change `PDFSidebar.switchView` to act as a wrapper for a ""private"" `PDFSidebar._switchView` method

The new ""private"" method will return a boolean, indicating if the `sidebarviewchanged` event was dispatched, thus allowing some simplification of the `PDFSidebar.setInitialView` method.",False
291e62b41e083d92d0bf97c611c93b04dd0f2d94,2019-01-30 03:16:36,Tim van der Meij,"Merge pull request #10508 from Snuffleupagus/issue-8276

Do the final text scaling correctly in `flushTextContentItem` (issue 8276)",True
2b0b6178f7d40e7dc9e65df138f6624601df41f4,2019-01-29 19:54:08,Jonas Jenwald,"Clean-up after the `gets operatorList with JPEG image (issue 4888)` unit-test

This unit-test wasn't destroying the `loadingTask` when complete, as it should have done.",False
6f94a05a29c5296574ca4355198df9ef93088480,2019-01-29 19:54:04,Jonas Jenwald,"Do the final text scaling correctly in `flushTextContentItem` (issue 8276)

It's necessary to take into account whether or not the text is vertical, to avoid either the textContent `width` or `height` becoming incorrect.",False
55b12f5fd91fc87a8b860a7cc9000e9fe02b754e,2019-01-29 03:07:14,Tim van der Meij,"Merge pull request #10504 from Snuffleupagus/eslint-no-useless-catch

Enable the `no-useless-catch` ESLint rule",True
86472e998168966a0911eed986a34c99c64cd28d,2019-01-28 15:30:09,Jonas Jenwald,"Enable the `no-useless-catch` ESLint rule

See https://eslint.org/docs/rules/no-useless-catch",False
1f3e7700d251d32c5e3f982a6ead3b7ffb178e3e,2019-01-27 19:42:59,Tim van der Meij,"Merge pull request #10499 from Snuffleupagus/renderTask-error-cleanup

Attempt to clean-up/restore pending rendering operations when errors occurs while a `RenderTask` runs (PR 10202 follow-up)",True
d03d990e2e8ceda72a918dfeb51c5035d92d0cf1,2019-01-27 19:36:13,Tim van der Meij,"Merge pull request #10501 from Snuffleupagus/getVisibleElements-avoid-unnecessary-backtrack

In `getVisibleElements`, check `firstVisibleElementInd` rather than `numViews` before backtracking (PR 10443 follow-up)",True
b50a5126606afc8d8d24dc572c964a03a6fa579c,2019-01-27 19:27:11,Jonas Jenwald,"In `getVisibleElements`, check `firstVisibleElementInd` rather than `numViews` before backtracking (PR 10443 follow-up)

When `firstVisibleElementInd === 0`, regardless of the number of views, there's no reason to attempt to backtrack at all since it's never possible to find an element before the *first* one anyway.",False
5081063b9e8d39e858d6954eef653686bd4673a9,2019-01-26 20:32:51,Jonas Jenwald,"Attempt to clean-up/restore pending rendering operations when errors occurs while a `RenderTask` runs (PR 10202 follow-up)

This piggybacks of the existing `cancel` functionality, to ensure that any pending operations are closed *and* that any temporary canvases are actually being removed.

Also simplifies `finishPaintTask` in `PDFPageView.draw` slightly, by converting it to an async function.",False
40863eb2756f81b5f2a9491c9dfb142579ee387d,2019-01-26 03:39:09,Tim van der Meij,"Merge pull request #10489 from Snuffleupagus/single-page-scrollIntoView

Move more code/methods into `BaseViewer`, and simplify the `PDFSinglePageViewer._scrollIntoView` method slightly",True
1eee1c5d2e0d964e560589ac7a94a8fd8cc9f088,2019-01-26 03:13:28,Tim van der Meij,"Merge pull request #10494 from Snuffleupagus/ColorSpace-isDefaultDecode

Reduce unnecessary duplication of the `isDefaultDecode` methods on `ColorSpace` instances",True
29f36d7a1ba37675c0b2b9dd05718a2a9ebae999,2019-01-25 13:23:08,Jonas Jenwald,"Reduce unnecessary duplication of the `isDefaultDecode` methods on `ColorSpace` instances

The recent PR 10482 made me realize that I missed an opportunity for simplification when doing the class conversion of this code in PR 10007.",False
e2701d5422a43ca1810e7ce6b3aa42758f50d781,2019-01-25 04:16:55,Tim van der Meij,"Merge pull request #10482 from janpe2/indexed-decode

Implement Decode entry in Indexed images",True
0d3c8d86a2ca0c2516ed5f0b9051e8e827245362,2019-01-25 04:16:26,Tim van der Meij,"Merge pull request #10492 from Snuffleupagus/issue-10491

Ensure that `XRef.indexObjects` can handle object numbers with zero-padding (issue 10491)",True
41fbc71ef949159d8a207675bc459c0e845b0123,2019-01-25 03:07:18,Jonas Jenwald,"Ensure that `XRef.indexObjects` can handle object numbers with zero-padding (issue 10491)

All objects in the PDF document follow this pattern:
```
0000000001 0 obj
<<
% Some content here...
>>
endobj
0000000002 0 obj
<<
% More content here...
endobj

```",False
48e4adf7709caa085926c8830b768b71ac62ca1c,2019-01-24 16:31:07,Jonas Jenwald,"Try to simplify the `PDFSinglePageViewer._scrollIntoView` method slightly, by unconditionally ensuring that rendering always occurs",False
06cda4c2e7a1b0fce1ca3f9bbffa0481a7de1cde,2019-01-24 15:01:06,Jonas Jenwald,"Move additional code/methods into `BaseViewer` and have the extending classes override/extend methods as necessary

This attempts to provide more ""default"" methods in the base class, in order to reduce unnecessary duplication and to improve self-documentation of the `BaseViewer` class slightly.
The following changes are made (in no particular order):
 - Have `BaseViewer` implement the `_scrollIntoView` method, and *extend* it as necessary in `PDFViewer`/`PDFSinglePageViewer`.
 - Simply inline the `BaseViewer._resizeBuffer` method, in `BaseViewer.update`, since there's only one call-site at this point.
 - Provide a default implementation of `_isScrollModeHorizontal` in `BaseViewer`, and have `PDFSinglePageViewer` override it.
 - Provide a default implementation of `_getVisiblePages`, and have `PDFViewer` extend it and `PDFSinglePageViewer` override it.",False
9128335c4ddf91daabe1b2d4512b9bb207edc652,2019-01-24 03:00:42,Tim van der Meij,"Merge pull request #10484 from Snuffleupagus/rm-mozcentral-streams

Stop bundling the `ReadableStream` polyfill in MOZCENTRAL builds (PR 10470 follow-up)",True
f3da413ea562c96a8dfa985338e0ae280bdf4a92,2019-01-24 02:50:14,Tim van der Meij,"Merge pull request #10483 from Snuffleupagus/mobile-viewer-PDFHistory-init

Update the `mobile-viewer` example to use the new `PDFHistory.initialize` format (PR 10423 follow-up)",True
249b199ff17902a42615ab0905252a720d90551d,2019-01-24 01:03:20,Jonas Jenwald,"Stop bundling the `ReadableStream` polyfill in MOZCENTRAL builds (PR 10470 follow-up)

Based on the discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1521413, this patch simply removes the `ReadableStream` polyfill completely from MOZCENTRAL builds.

With this patch, the size of the `gulp mozcentral` build target is thus further reduced (building on PR 10470):

|       | `build/mozcentral`
|-------|-------------------
|master |   3 339 666
|patch  |   3 209 572",False
f06b2e4e9fccace5711d51a45b8de033fadec190,2019-01-23 19:57:19,Jonas Jenwald,Update the `mobile-viewer` example to use the new `PDFHistory.initialize` format (PR 10423 follow-up),False
26121177ab80029e21715b09ca41176f58bbfd6b,2019-01-23 02:21:04,Jani Pehkonen,Implement Decode entry in Indexed images,False
d614cabfa099841b89646932a907102759fdaea6,2019-01-22 23:32:58,Brendan Dahl,"Merge pull request #10480 from Snuffleupagus/debugger-FontInspector

[Regression] Fix the `FontInspector` in the PDFBug debugging tools",True
6a4dae927c15864d824c4cb305cf887c7f77bc02,2019-01-22 17:52:36,Jonas Jenwald,"[Regression] Fix the `FontInspector` in the PDFBug debugging tools

The `FontInspector` was completely broken by PR 10197, and trying to select a particular font (using the checkboxes) or clicking on a piece of text currently does nothing.",False
f26129de26489ce7c1ea1c6401fadc4bd3ecc919,2019-01-20 21:10:25,Tim van der Meij,"Merge pull request #10474 from timvandermeij/updates

Update translations and packages",True
810dbeb4e51893eac5d4c8790e46aa70e746f740,2019-01-20 21:04:24,Tim van der Meij,Update packages,False
a84541b2716edf55c4bf807244f7056b51964a16,2019-01-20 21:02:35,Tim van der Meij,Update translations,False
78eb73004fbaab2acf64b0e2a51d1309b66c19ab,2019-01-20 19:11:39,Tim van der Meij,"Merge pull request #10473 from Snuffleupagus/array-from

Add an `Array.from` polyfill, using core-js, and remove some compatibility hacks from the `src/display/content_disposition.js` file",True
01d624f6a01bae9a0e91c54cb84d736f2a468ec5,2019-01-20 13:19:20,Jonas Jenwald,"Add an `Array.from` polyfill, using core-js, and remove some compatibility hacks from the `src/display/content_disposition.js` file",False
66acc7397f1cb407984c9b800dddf7d23a582bc3,2019-01-20 01:52:18,Tim van der Meij,"Merge pull request #10470 from Snuffleupagus/mozcentral-streams

Try to, completely, avoid loading the `ReadableStream` polyfill in MOZCENTRAL builds",True
a908702fad8701a435a552f26f8605629133f6ac,2019-01-20 01:15:00,Tim van der Meij,"Merge pull request #10471 from timvandermeij/metadata-unit-test

Implement a unit test for metadata parsing to ensure that it's not vulnerable to the billion laughs attack",True
c4fe4087d32d07ac039a1aa817e715c60fb1bbb0,2019-01-20 00:24:08,Tim van der Meij,Implement a unit test for metadata parsing to ensure that it's not vulnerable to the billion laughs attack,False
269168d05353e53fde81640e3198c8c303071cd6,2019-01-19 19:53:37,Tim van der Meij,"Merge pull request #10467 from Snuffleupagus/less-indexOf

Convert some usage of `indexOf` to `startsWith`/`includes` where applicable",True
480110625ab1e9b256a4e677b6a69d046f4154ac,2019-01-19 13:35:01,Jonas Jenwald,"Try to, completely, avoid loading the `ReadableStream` polyfill in MOZCENTRAL builds

With https://bugzilla.mozilla.org/show_bug.cgi?id=1505122 landing in Firefox 65, the native `ReadableStream` implementation is now enabled by default in Firefox.

Obviously it would be nice to simply stop bundling the polyfill in MOZCENTRAL builds altogether, however given that it's still possible to disable[1] `ReadableStream` this is probably not a good idea just yet.
Nonetheless, now that native support is available, it seems unnecessary (and wasteful) to keep bundling the polyfill twice[2] in MOZCENTRAL builds. Hence this patch, which contains a suggest approach for packing the polyfill in a *separate* file which is then *only* loaded if/when needed.

With this patch, the size of the `gulp mozcentral` build target is thus reduced accordingly:

|       | `build/mozcentral`
|-------|-------------------
|master |   3 461 089
|patch  |   3 340 268

Besides the PDF.js files taking up less space in Firefox this way, the additional benefit is that there's (by default) less code that needs to be loaded and parsed when the PDF Viewer is used which also cannot hurt.

---
[1] In `about:config`, by toggling the `javascript.options.streams` preference.

[2] Once in the `build/pdf.js` file, and once in the `build/pdf.worker.js` file.",False
1bb5ca058848f3c46f15bb560fab3c63d1459a81,2019-01-19 04:34:31,Tim van der Meij,"Merge pull request #10466 from Snuffleupagus/BaseViewer-update

Move/refactor the code in the `BaseViewer.update` method to reduce duplication in the extending classes",True
24a688d6c6155b218a7f8358511c1953ceb8e5de,2019-01-18 22:27:41,Jonas Jenwald,"Convert some usage of `indexOf` to `startsWith`/`includes` where applicable

In many cases in the code you don't actually care about the index itself, but rather just want to know if something exists in a String/Array or if a String starts in a particular way. With modern JavaScript functionality, it's thus possible to remove a number of existing `indexOf` cases.",False
343f488daabaff872612a6cf01fb2411ae26bd83,2019-01-18 19:36:21,Jonas Jenwald,"Move/refactor the code in the `BaseViewer.update` method to reduce duplication in the extending classes

Since most of the important rendering code is already (almost) identical between `PDFViewer.update` and `PDFSinglePageViewer.update`, it's possible to further reduce duplication by moving the code into `BaseViewer.update` instead.",False
cdbc33ba06bc69d615392def4944a131609a095c,2019-01-17 03:33:39,Tim van der Meij,"Merge pull request #10457 from Snuffleupagus/metadata-tests

When parsing Metadata, attempt to remove ""junk"" before the first tag (PR 10398 follow-up)",True
697b3d2f49f9b874bb2c6e628ccbe88406b4aa78,2019-01-17 03:21:50,Tim van der Meij,"Merge pull request #10461 from Snuffleupagus/pr-10423

Avoid setting incorrect document URLs, in IE 11, when the browser history is updated (PR 10423 follow-up)",True
f711df583ad160cd9bfbf248b370a4348c1dc533,2019-01-17 03:14:20,Tim van der Meij,"Merge pull request #10462 from Snuffleupagus/pr-10152

Tweak the `DOMTokenList.toggle` polyfill (issue 10460)",True
68ad3e8e9d9477ffbef03c0af7c43d68e61cfbdd,2019-01-17 00:45:44,Jonas Jenwald,Tweak the `DOMTokenList.toggle` polyfill (issue 10460),False
ffe798137fd7273f0de879ea40bf9ddef22c104a,2019-01-16 23:56:44,Jonas Jenwald,"Avoid setting incorrect document URLs, in IE 11, when the browser history is updated (PR 10423 follow-up)

Apparently in IE 11 when `history.{pushState, replaceState}` is called, there's actually a difference between not providing the *third* argument vs providing it set implicitly to `undefined`. It appears that in IE 11 it's actually being stringified, rather than ignored, which seems completely wrong (obviously other browsers aren't affected, so no surprises there).

This is yet another reason why I think the feature itself was a really bad idea, since it now requires extra/duplicated code just to prevent weird/incorrect URL behaviour in crappy browsers.",False
9f45f8dfdaed3f399f594050354db982f900759b,2019-01-16 17:14:27,Jonas Jenwald,"When parsing Metadata, attempt to remove ""junk"" before the first tag (PR 10398 follow-up)

This will allow the Metadata to be successfully extracted from the PDF file in issue 10395.
Furthermore, this patch also fixes a bug in `Metadata.get` which causes the method to return `null` rather than an empty string or zero (since either ought to be allowed).",False
5d902244093970d9e4f0896f6cac7f83351484ee,2019-01-16 16:00:36,Jonas Jenwald,Add a unit-test for issue 10395 (PR 10398 follow-up),False
5cb00b79676bd84554ff3368d4f14d8470916039,2019-01-13 20:11:48,Tim van der Meij,"Merge pull request #10443 from Snuffleupagus/getVisibleElements-fixes

Prevent `TypeError: views[index] is undefined` being throw in `getVisibleElements` when the viewer, or all pages, are hidden",True
5efc902fb888a2df59b61fe39f77b90b101efd95,2019-01-13 19:39:17,Tim van der Meij,"Merge pull request #10447 from timvandermeij/bad-request

Handle malformed URIs as bad requests in the development webserver",True
6279fc601a3fd1db969a98feb23c1cb661f68bea,2019-01-13 19:27:20,Tim van der Meij,"Handle malformed URIs as bad requests in the development webserver

Fixes #10445 (found by Dhiraj Mishra).",False
b2235ec9c46c1e7b5a47dd4d5034fcc856ab6fd3,2019-01-13 16:04:38,Jonas Jenwald,"Add a unit-test to check that the `sortByVisibility` parameter, in `getVisibleElements`, works correctly",False
9743708a24365a1d488060ace3a49390806a035b,2019-01-13 16:04:24,Jonas Jenwald,"Prevent `TypeError: views[index] is undefined` being throw in `getVisibleElements` when the viewer, or all pages, are hidden

Previously a couple of different attempts at fixing this problem has been rejected, given how *crucial* this code is for the correct function of the viewer, since no one has thus far provided any evidence that the problem actually affects the default viewer[1] nor an example using the viewer components directly (without another library on top).
The fact that none of the prior patches contained even a *simple* unit-test probably contributed to the unwillingness of a reviewer to sign off on the suggested changes.

However, it turns out that it's possible to create a reduced test-case, using the default viewer, that demonstrates the error[2]. Since this utilizes a hidden `<iframe>`, please note that this error will thus affect Firefox as well.
Note that while errors are thrown when the hidden `<iframe>` loads, the default viewer doesn't break completely since rendering does start working once the `<iframe>` becomes visible (although the errors do break the initial Toolbar state).

Before making any changes here, I carefully read through not just the immediately relevant code but also the rendering code in the viewer (given it's dependence on `getVisibleElements`). After concluding that the changes should be safe in general, the default viewer was tested without any issues found. (The above being much easier with significant prior experience of working with the viewer code.)
Finally the patch also adds new unit-tests, one of which explicitly triggers the relevant code-path and will thus fail with the current `master` branch.

This patch also makes `PDFViewerApplication` slightly more robust against errors during document opening, to ensure that viewer/document initialization always completes as expected.
Please keep in mind that even though this patch prevents an error in `getVisibleElements`, it's still not possible to set the initial position/zoom level/sidebar view etc. when the viewer is hidden since rendering and scrolling is completely dependent[3] on being able to actually access the DOM elements.

---
[1] And hence the PDF Viewer that's built-in to Firefox.

[2] Copy the HTML code below and save it as `iframe.html`, and place the file in the `web/` folder. Then start the server, with `gulp server`, and navigate to http://localhost:8888/web/iframe.html

```html
<!DOCTYPE html>
<html>
  <head>
    <title>Iframe test</title>

    <script>
      window.onload = function() {
        const button = document.getElementById('button1');
        const frame = document.getElementById('frame1');

        button.addEventListener('click', function(evt) {
          frame.hidden = !frame.hidden;
        });
      };
    </script>
  </head>

  <body>
    <button id=""button1"">Toggle iframe</button>
    <br>
    <iframe id=""frame1"" width=""800"" height=""600"" src=""http://localhost:8888/web/viewer.html"" hidden=""true""></iframe>
  </body>
</html>
```

[3] This is an old, pre-exisiting, issue that's not relevant to this patch as such (and it's already being tracked elsewhere).",False
ae59be181b3b72ab464386c5b50d0e93e4bf8136,2019-01-13 16:04:11,Jonas Jenwald,"Clean-up variable definitions in `getVisibleElements`

With modern JavaScript supporting block-scoped variables, it's no longer necessary to have large numbers of top-level variable definitions (especially when all variables are, implicitly, set to `undefined`).

Besides moving variable definintions, a number of them are also converted to `const` to help ensure that they cannot be *accidentally* modified in the code.
Finally, the `views.length` calculation is now cached *once* rather than being re-computed multiple times.",False
35415b935c9f389635411a2e510645e3213f4d63,2019-01-13 02:58:38,Tim van der Meij,"Merge pull request #10444 from timvandermeij/rm-log

Remove left-over console log from the find controller unit tests",True
ed918bad21f916893c0c9789d144c020e2c6323e,2019-01-13 02:57:40,Tim van der Meij,Remove left-over console log from the find controller unit tests,False
a37ea16013819a84882eb4dafd1fdb2bb87ef362,2019-01-13 02:50:53,Tim van der Meij,"Merge pull request #10425 from timvandermeij/find-controller-unit-tests

Write more unit tests for the find controller",True
b1cef896f46319a9670fd0c528c8233e91dd97d8,2019-01-13 02:47:46,Tim van der Meij,"Write more unit tests for the find controller

Fixes #7356.",False
b531fc4106b64f792ebfde49178096a1b982d3a1,2019-01-13 01:01:23,Jonas Jenwald,"Avoid truncating inline images, where the data and the ""EI"" marker is glued together (issue 10388) (#10436)

Thanks to the *excellent* debugging done by @janpe2, this was easy to fix!",False
eb7cd884edd8f3f7999387ef626e1bdea3ad67b9,2019-01-13 00:32:09,Tim van der Meij,"Merge pull request #10441 from Snuffleupagus/indexObjects-more-nested-obj

Handle more cases of corrupt PDF files with missing 'endobj' operators, where the ""obj"" string is immediately followed by the dictionary (PR 9288 follow-up)",True
d4a3858ed5c5f4a31a7089a33c00116eecd5b8bd,2019-01-10 22:25:28,Jonas Jenwald,"Handle more cases of corrupt PDF files with missing 'endobj' operators, where the ""obj"" string is immediately followed by the dictionary (PR 9288 follow-up)",False
e4d2a1604efdb4a49f29b4a593baea23e4470c36,2019-01-07 00:48:12,Tim van der Meij,"Merge pull request #10423 from Snuffleupagus/historyUpdateUrl

Add support for updating the document hash, off by default, when the browser history is updated (issue 5753)",True
358cd0c0965dcd86fdcb3a1291009ad8839fbf68,2019-01-07 00:40:55,Jonas Jenwald,"Add a few more `String` polyfills (startsWith, endsWith, padStart, padEnd)",False
4773bf6fcbf6ae32c64f7adb9e203fbe5cf71469,2019-01-07 00:39:02,Jonas Jenwald,"Add support for updating the document hash, off by default, when the browser history is updated (issue 5753)

This is *really* the best that we can do here, since other proposed solutions would interfere with (and break) the painstakingly implemented browsing history that's present in the default viewer.

I'm still not convinced that this is a good idea in general, but this patch implements it in a way where it is possible to toggle[1] for users that wish to have this feature. In particular, there's a couple of reasons why I'm not finding this feature necessary/great:
 - It's already possible to easily obtain the current hash, by simply clicking on the `viewBookmark` button at any time.
 - Hash changes requires a bit of special handling[2], i.e. extra code, to prevent issues when the browser history is traversed (see `PDFHistory._popState`). Currently this is only necessary when the user has manually changed the hash, with this patch it will always be the case (assuming the feature is active).
 - It's not always possible to change the URL when updating the browser history. For example: In the Firefox built-in viewer, the URL cannot be modified for local files (i.e. those using the `file://` protocol).
This leads to inconsistent behaviour, and may in some cases even result in errors being thrown and the history thus not updating, if the browser prevents changes to the URL during `pushState`/`replaceState` calls.

---
[1] Using the `historyUpdateUrl` viewer preference.

[2] This depends, to a great extent, on browsers always firing `popstate` events *before* `hashchange` events, which may or may not actually be guaranteed.",False
af31b980b0db7b110965cdb468ee608769835d1e,2019-01-06 23:38:03,Tim van der Meij,"Merge pull request #10424 from Snuffleupagus/issue-6847

Accept non-matching document fingerprints, in `PDFHistory`, when the viewer is reloaded (issue 6847)",True
d46715210ae3172b6a7ff5dc7ad61c395b949729,2019-01-06 21:32:39,Jonas Jenwald,"Accept non-matching document fingerprints, in `PDFHistory`, when the viewer is reloaded (issue 6847)

This should hopefully be sufficient to address issue 6847, and given the limited impact of the code changes I'm not completely sure if this would need to be controlled by a preference!?

Initially my intention was to try and provide some (slightly more detailed) implementation suggestions in the issue, but having looked briefly at doing that it would essentially have amounted to actually writing the code anyway. (Especially considering that the recent questions seemed to more-or-less ignore the information already provided in the first post.)

Finally, note that since `performance.navigation.type` is marked as deprecated, a slightly different approach was choosen instead.",False
968a15318084a2c6863c48ebe06e80ca28029b22,2019-01-06 19:36:57,Tim van der Meij,"Merge pull request #10422 from timvandermeij/es6

Convert more files in `src/core` to ES6 syntax",True
f162fed6b9b017e82df28d4b66492d0c59e02fa8,2019-01-06 19:34:01,Tim van der Meij,"Convert `src/core/charsets.js` and `src/core/standard_fonts.js` to ES6 syntax

Moreover, include the ""no var"" ESLint comment to
`src/core/annotation.js` and `src/core/ps_parser.js` since they are
already converted.",False
3b637e71d4e7bdf92e163c79f56b6f67182a8240,2019-01-06 19:34:01,Tim van der Meij,Convert `src/core/arithmetic_decoder.js` to ES6 syntax,False
c967eab8b1dad181c8ca86aa1e4773384f14959c,2019-01-05 20:06:39,Tim van der Meij,"Merge pull request #10421 from timvandermeij/fix

Switch to HTTPS for the license link on the website",True
be3defdd94ae53114da4da318e9f4580e5e11eb8,2019-01-05 20:05:17,Tim van der Meij,"Switch to HTTPS for the license link on the website

Moreover, fix a small oversight in how the file tree is rendered.",False
7307c60407a7459d2b186e7d6fecabb0f235eec5,2019-01-05 19:57:06,Tim van der Meij,"Merge pull request #10420 from timvandermeij/misc

Update translations/packages and improve documentation",True
61dcc41a3ca4a836c390cc3c3595841318b7b98b,2019-01-05 19:50:50,Tim van der Meij,"Clarify that `gulp dist-install` should be used for the AcroForms example

Fixes #10333.",False
f32dcbc0891affe4bf38a268214b00b97999387c,2019-01-05 19:50:50,Tim van der Meij,"Improve the file layout overview on the website

Mention only the relevant files/folders and update the overview to match
the current file trees.

Fixes #10384.",False
ca04a397bb6aa31af3482c9c10e09149e3c9b27b,2019-01-05 18:57:47,Tim van der Meij,Update packages,False
825aceb6481fd209e224ee1969bb35ef8ddf5f1d,2019-01-05 18:54:44,Tim van der Meij,Update translations,False
b81984f0cb8f4e1e1ac6878d74d7788c7a012ad1,2019-01-05 18:05:16,Tim van der Meij,"Merge pull request #10417 from brendandahl/metric-length

Fix reading number of HTMX metrics.",True
a0eb5cf9d5e92dc0c1e47918c0dc84fa334fc5ee,2019-01-05 17:26:43,Tim van der Meij,"Merge pull request #10412 from Snuffleupagus/issue-10410

Prevent errors, in `SimpleXMLParser.onEndElement`, when the stack has already been completely parsed (issue 10410)",True
e8f4b47d590aae7cbdaa203d08d20069d1b9d42a,2019-01-05 15:45:34,Jonas Jenwald,"Prevent errors, in `SimpleXMLParser.onEndElement`, when the stack has already been completely parsed (issue 10410)

The error was triggered for a particular set of metadata, where an end tag was encountered without the corresponding begin tag being present in the data.
(The patch also fixes a minor oversight, from a recent PR, in the `SimpleDOMNode.nextSibling` method.)",False
32eace043bdf55ea3ad2d2b5d8cb8cb125a3c2c7,2019-01-05 04:43:13,Brendan Dahl,"Fix reading number of HTMX metrics.

The length of the HHEA table can be incorrect, so it is better to
read the number of metrics offset from beginning of table instead.",False
b39ec7af96355e65c06de0c7ed03d9eab6397562,2019-01-05 04:15:26,Tim van der Meij,"Merge pull request #10408 from Snuffleupagus/issue-10407

Prevent errors, because of incorrect scope, in the `XMLParserBase._resolveEntities` method (issue 10407)",True
3f9e9f0d8890bca046a11736d13b5da20e5466b3,2019-01-05 04:12:08,Tim van der Meij,"Merge pull request #10411 from Snuffleupagus/issue-10385-2

Adjust how `AnnotationBorderStyle.setWidth` handles the input being a `Name` (issue 10385)",True
66fccd860bd18ba75fb8b9e55add79f48173acf4,2019-01-04 15:08:10,Jonas Jenwald,"Adjust how `AnnotationBorderStyle.setWidth` handles the input being a `Name` (issue 10385)

In order to be consistent with the behaviour in Adobe Reader, the width will now always be set to zero when the input is a `Name`.",False
6cd9ff48f36da3114b721c57d12394adc671bb61,2019-01-04 14:43:32,Jonas Jenwald,"Prevent errors, because of incorrect scope, in the `XMLParserBase._resolveEntities` method (issue 10407)",False
5a2bd9fc63a4fcb66461c0fb7f2210e42e241364,2019-01-04 04:02:56,Tim van der Meij,"Merge pull request #10399 from MohammedEssehemy/master

migrate to canvas 2.x api",True
2d00bb098bbeb4657b1b535f13ac983e326f5ee4,2019-01-04 03:16:51,Tim van der Meij,"Merge pull request #10404 from Snuffleupagus/issue-10401

Remove the `for ... of` loop from the `PDFDocument.fingerprint` getter (issue 10401)",True
e2686db49b43b181ba62612385677c14ac83bf3c,2019-01-04 00:00:43,Brendan Dahl,"Merge pull request #10277 from janpe2/cff-stems

Repair CFF fonts if stem hints are in wrong order",True
8c278530dd04a2e1020d242627de426bbe81ceb3,2019-01-03 15:47:45,Jonas Jenwald,"Remove the `for ... of` loop from the `PDFDocument.fingerprint` getter (issue 10401)

It appears that the `Symbol` polyfill doesn't work well in conjunction with `TypedArray`s, and that part of PR 10393 is thus reverted.",False
f0e9df745c35d78546db10ffb5c5bab0a68cd5d9,2019-01-02 04:40:07,Mohammed Essehemy,migrate to canvas 2.x api,False
1b84b2ed603a18974c701381f67ddca4b392f569,2019-01-01 20:52:11,Tim van der Meij,"Merge pull request #10398 from Snuffleupagus/issue-10395

Prevent errors in various methods in `SimpleDOMNode` when the `childNodes` property is not defined (issue 10395)",True
d371d233829b47675dc4132b4c2dffbe68e4d381,2018-12-31 17:37:15,Jonas Jenwald,"Prevent errors in various methods in `SimpleDOMNode` when the `childNodes` property is not defined (issue 10395)

Given that the issue, as filed, is incomplete since no PDF file was provided for debugging, this patch is really the best that we can do here. *Please note:* This patch will *not* enable the Metadata to be successfully parsed, but it should at least prevent the errors.",False
d8f201ea2a6f7d937e53077e1b6164da8175412a,2018-12-31 17:28:28,Tim van der Meij,"Merge pull request #10397 from Snuffleupagus/issue-10385

Ensure that `AnnotationBorderStyle.setWidth` is able to handle the input being a `Name`, to correctly deal with corrupt PDF documents (issue 10385)",True
2cdeb93b5f588083afdf14dc16457a68cbba8742,2018-12-31 17:20:00,Tim van der Meij,"Merge pull request #10396 from timvandermeij/optimizations

Optimizations to avoid intermediate string creation",True
76a9580aeb5219df5a5d23557cdeba580ccb2618,2018-12-31 16:51:28,Jonas Jenwald,"Ensure that `AnnotationBorderStyle.setWidth` is able to handle the input being a `Name`, to correctly deal with corrupt PDF documents (issue 10385)",False
15b3806937343fb742cdea34eafcab8336e8043d,2018-12-31 16:45:15,Jonas Jenwald,Actually validate the input in `AnnotationBorderStyle.setStyle`,False
5b57e69da256a9bdd2337d37188b8ba7cda7e24f,2018-12-30 19:28:32,Tim van der Meij,"Optimize `CanvasGraphics.setFont` to avoid intermediate string creation

This method creates quite a few intermediate strings on each call and
it's called often, even for smaller documents like the Tracemonkey
document. Scrolling from top to bottom in that document resulted in
14126 strings being created in this method. With this commit applied,
this is reduced to 2018 strings.",False
95f90755658de62f63eb2db00a32c1810fce1ada,2018-12-30 19:09:08,Tim van der Meij,"Optimize `TextLayerRenderTask._layoutText` to avoid intermediate string creation

This method creates quite a few intermediate strings on each call and
it's called often, even for smaller documents like the Tracemonkey
document. Scrolling from top to bottom in that document resulted in
12936 strings being created in this method. With this commit applied,
this is reduced to 3610 strings.",False
7c080584b669315dc43409638fb3cbe0d4adc9c2,2018-12-30 18:53:38,Tim van der Meij,"Merge pull request #10393 from timvandermeij/document

Convert `src/core/document.js` to ES6 syntax",True
d5e5d18430d644517b80f43f579fa9b23833fb9d,2018-12-30 18:24:43,Tim van der Meij,Convert the `PDFDocument` class in `src/core/document.js` to ES6 syntax,False
612fc9fcc20198b7c3139d44a3d06b2253ef4eea,2018-12-30 18:24:43,Tim van der Meij,Convert the `Page` class in `src/core/document.js` to ES6 syntax,False
85363f456684c401e5981db6954abbbdc164a3bd,2018-12-30 17:00:09,Tim van der Meij,"Merge pull request #10394 from timvandermeij/primitives-optimization

Optimize the `Ref` class in `src/core/primitives.js`",True
aad27ff9a096253ffb20c9b844b811b92bd85032,2018-12-29 22:18:41,Tim van der Meij,"Optimize the `Ref` class in `src/core/primitives.js`

The `toString` method always creates two string objects (for the 'R'
character and for the `num` concatenation) and in the worst case
creates three string objects (one more for the `gen` concatenation).
For the Tracemonkey paper alone, this resulted in 12000 string
objects when scrolling from the top to the bottom of the document.
Since this is a hot function, it's worth minimizing the number of string
objects, especially for large documents, to reduce peak memory usage.

This commit refactors the `toString` method to always create only one
string object.",False
e53877f3727c3212f60b657fcb459bbe082227db,2018-12-29 19:43:19,Tim van der Meij,"Merge pull request #10392 from Snuffleupagus/checkFirstPage

Check that the first page can be successfully loaded, to try and ascertain the validity of the XRef table (issue 7496, issue 10326)",True
60bcce184ee74dc56d682a4c75ccdea69cd0670e,2018-12-29 17:17:25,Jonas Jenwald,"Check that the first page can be successfully loaded, to try and ascertain the validity of the XRef table (issue 7496, issue 10326)

For PDF documents with sufficiently broken XRef tables, it's usually quite obvious when you need to fallback to indexing the entire file. However, for certain kinds of corrupted PDF documents the XRef table will, for all intents and purposes, appear to be valid. It's not until you actually try to fetch various objects that things will start to break, which is the case in the referenced issues[1].

Since there's generally a real effort being in made PDF.js to load even corrupt PDF documents, this patch contains a suggested approach to attempt to do a bit more validation of the XRef table during the initial document loading phase.

Here the choice is made to attempt to load the *first* page, as a basic sanity check of the validity of the XRef table. Please note that attempting to load a more-or-less arbitrarily chosen object without any context of what it's supposed to be isn't a very useful, which is why this particular choice was made.
Obviously, just because the first page can be loaded successfully that doesn't guarantee that the *entire* XRef table is valid, however if even the first page fails to load you can be reasonably sure that the document is *not* valid[2].

Even though this patch won't cause any significant increase in the amount of parsing required during initial loading of the document[3], it will require loading of more data upfront which thus delays the initial `getDocument` call.
Whether or not this is a problem depends very much on what you actually measure, please consider the following examples:

```javascript
console.time('first');
getDocument(...).promise.then((pdfDocument) => {
  console.timeEnd('first');
});

console.time('second');
getDocument(...).promise.then((pdfDocument) => {
  pdfDocument.getPage(1).then((pdfPage) => { // Note: the API uses `pageNumber >= 1`, the Worker uses `pageIndex >= 0`.
    console.timeEnd('second');
  });
});
```

The first case is pretty much guaranteed to show a small regression, however the second case won't be affected at all since the Worker caches the result of `getPage` calls. Again, please remember that the second case is what matters for the standard PDF.js use-case which is why I'm hoping that this patch is deemed acceptable.

---
[1] In issue 7496, the problem is that the document is edited without the XRef table being correctly updated.
In issue 10326, the generator was sorting the XRef table according to the offsets rather than the objects.

[2] The idea of checking the first page in particular came from the ""standard"" use-case for the PDF.js library, i.e. the default viewer, where a failure to load the first page basically means that nothing will work; note how `{BaseViewer, PDFThumbnailViewer}.setDocument` depends completely on being able to fetch the *first* page.

[3] The only extra parsing is caused by, potentially, having to traverse *part* of the `Pages` tree to find the first page.",False
d3868e1bd11cab9bb4251eace748de16a9ae3009,2018-12-25 19:58:00,Tim van der Meij,"Merge pull request #10376 from timvandermeij/chunked-stream

Convert `src/core/chunked_stream.js` to ES6 syntax",True
360c3d38136553a0e65458bb21ba12ceda8c568c,2018-12-24 17:44:42,Tim van der Meij,Remove the unused `url` argument for the `ChunkedStreamManager` class,False
47344197f4224e4d1036365afbe53f82ac6c0fdd,2018-12-24 17:44:42,Tim van der Meij,Convert `src/core/chunked_stream.js` to ES6 syntax,False
2e05827b87646e621593fb26f4327f335d0a0d7a,2018-12-24 17:43:10,Tim van der Meij,"Merge pull request #10378 from Snuffleupagus/issue-10377

Update remaining examples, and docs, to utilize current API functionality (issue 10377)",True
9962ab66ab9db393e987d5ce14ffa34a5612a8f1,2018-12-24 17:03:39,Jonas Jenwald,"Update remaining examples, and docs, to utilize current API functionality (issue 10377)

This contains a couple of changes that I missed elsewhere, sorry about that!",False
103f4616accbd29755e6d150f0a7c2e7a6bc6546,2018-12-24 01:19:50,Tim van der Meij,"Merge pull request #10334 from Snuffleupagus/OpenAction-dest

[api-minor] Add support for OpenAction destinations (issue 10332)",True
74461b0aa41440d84ae3797e57c803f16490e3d9,2018-12-22 21:12:23,Tim van der Meij,"Merge pull request #10375 from timvandermeij/updates

Update translations and packages",True
18bac1b4fc38b7edfc91e2b9afcd20d68f456df3,2018-12-22 21:05:34,Tim van der Meij,Update packages,False
11bf77aca4c1eaf7c84d5b30e36738be6af24cb8,2018-12-22 20:24:42,Tim van der Meij,Update translations,False
98b4aff291f68adfec7209f830892f865f8ebbef,2018-12-22 19:26:16,Tim van der Meij,"Merge pull request #10369 from Snuffleupagus/getViewport-signature

[api-minor] Change the `getViewport` method, on `PDFPageProxy`, to take a parameter object rather than a bunch of (randomly) ordered parameters",True
f0719ed565368fe87649efe564229a60c5c8c0d4,2018-12-21 16:25:20,Jonas Jenwald,"[api-minor] Change the `getViewport` method, on `PDFPageProxy`, to take a parameter object rather than a bunch of (randomly) ordered parameters

If, as PR 10368 suggests, more parameters should be added to `getViewport` I think that it would be a mistake to not change the signature *first* to avoid needlessly unwieldy call-sites.

To not break any existing code and third-party use-cases, this is obviously implemented with a deprecation warning *and* with a working fallback[1] for the old method signature.

---
[1] This is limited to `GENERIC` builds, which should be sufficient.",False
a7e70a50f5e59a8673731d66825a77210542c486,2018-12-19 16:15:17,Jonas Jenwald,"Add OpenAction destination support, off by default, to the viewer

Given that it's really not clear to me if this is actually desired functionality in the default viewer, and considering that it doesn't fit in *great* with the way that `PDFHistory` is initialized, this feature is currently off by default[1].

---
[1] It's controlled with the `disableOpenActionDestination` Preference/AppOption.",False
b05f053287d04ef66c197074f6de6856d8b92071,2018-12-19 16:15:16,Jonas Jenwald,"[api-minor] Add support for OpenAction destinations (issue 10332)

Note that the OpenAction dictionary may contain other information besides just a destination array, e.g. instructions for auto-printing[1].
Given first of all that an arbitrary `Dict` cannot be sent from the Worker (since cloning would fail), and second of all that the data obviously needs to be validated, this patch purposely only adds support for fetching a destination from the OpenAction entry[2].

---
[1] This information is, currently in PDF.js, being included through the `getJavaScript` API method.

[2] This significantly reduces the complexity of the implementation, which seems fine for now. If there's ever need for other kinds of OpenAction to be fetched, additional API methods could/should be implemented as necessary (could e.g. follow the `getOpenActionWhatever` naming scheme).",False
ba2edeae18739e767f10087df521f6355f917c45,2018-12-19 03:56:02,Jonas Jenwald,"[api-minor] Add support, in `getMetadata`, for custom information dictionary entries (issue 5970, issue 10344) (#10346)

The custom entries, provided that they exist *and* that their types are safe to include, are exposed through a new `Custom` infoDict entry to clearly separate them from the standard ones.

Fixes 5970.
Fixes 10344.",False
811c8803b3d87dc35113152c580531b87b8cbb0a,2018-12-19 03:18:26,Thiago da Silva,Fix small visual quirk in thumbnail viewer,False
417c234c1cdfd6d9208539ed9e0356f34fb34d03,2018-12-17 21:30:51,Tim van der Meij,"Merge pull request #10266 from timvandermeij/gulp-4

Upgrade to Gulp 4",True
fa85f8629825cc16550db491b1a95194df1f26c8,2018-12-17 20:50:13,Tim van der Meij,"Upgrade to Gulp 4

This required the following changes in the Gulpfile:

- Defining a series of tasks is no longer done with arrays, but with the
  `gulp.series` function. The `web` target is refactored to use a
  smaller number of tasks to prevent tasks from running multiple times.
- Getting all tasks must now be done through the task registry.
- Tasks that don't return anything must call `done` upon completion.

Moreover, this upgrade allows us to use the latest Node.js on Travis CI
again.",False
bc465695d5391c3e3734e70bec5bd08900b4a327,2018-12-17 01:08:13,Tim van der Meij,"Merge pull request #10358 from tsilvap/toggle-sidebar-keybinding

Add keyboard shortcut to toggle sidebar (F4, same as Adobe Reader).",True
2abea7d7c29591aa1ea9e448ec3429958602fac0,2018-12-16 20:30:15,Thiago da Silva,Add keyboard shortcut to toggle sidebar,False
e716038b12919f2a6ad236dbfe1d8ea296b3b11e,2018-12-15 19:41:40,Tim van der Meij,"Merge pull request #10356 from brendandahl/icon-dpi

Use high DPI icons on semi-high DPI screens.",True
826893e6f4ff6f2c7f8cbd15919b906049f10c1a,2018-12-15 05:57:38,Brendan Dahl,"Use high DPI icons on semi-high DPI screens.

The icons looks really fuzzy on a machine with a device pixel ratio of
1.5. Using the 2x icons looks much better.",False
74934db910c170d51ac644cbfdf15abbbbc5e215,2018-12-14 03:35:04,Tim van der Meij,"Merge pull request #10354 from Snuffleupagus/TESTING-no-sourceMaps

Disable source-map generation when running tests",True
b60ea67a11380c64836aeec240eaad1a040a877b,2018-12-13 22:11:27,Jonas Jenwald,"Disable source-map generation when running tests

This should save, a little bit of, time/resources on the bots since source-maps aren't used for anything during testing.",False
fc607e35deef44e382228ab59e28fa0606492cb1,2018-12-13 03:31:53,Tim van der Meij,"Merge pull request #10350 from Snuffleupagus/sig-fieldValue-null

Ignore the `fieldValue` for Signature annotations, since they're currently unsupported (issue 10374)",True
c13a426eed0d3141b53f1a29b35270c0b3fac2e2,2018-12-13 03:20:11,Tim van der Meij,"Merge pull request #10351 from Snuffleupagus/tab-switch-no-wheel-zoom

Attempt to ignore mouse wheel zooming during tab switches (bug 1503412)",True
437fb8a8a77465ffa997a0f7d5de2898c1f1aca2,2018-12-12 22:31:43,Jonas Jenwald,"Ignore the `fieldValue` for Signature annotations, since they're currently unsupported (issue 10374)

Given that Signature (Widget) annotations are currently not supported, since they cannot be validated, simply ignoring the `fieldValue` seems OK for now considering that attempting to blindly include unparsed/unvalidated data isn't very useful.

Fixes 10347.",False
5d594885de8b4f840c465e5c38ead6389944d329,2018-12-12 18:16:47,Jonas Jenwald,"Attempt to ignore mouse wheel zooming during tab switches (bug 1503412)

This patch re-factors, and extends, the already existing `zoomDisabledTimeout` used during mouse wheel zooming.
Unfortunately I haven't got the required hardware to actually test this patch, but there's a decent chance that it will fix, or at least reduce, the problems reported in https://bugzilla.mozilla.org/show_bug.cgi?id=1503412.",False
cad0e612622a1384093006677f8e5b9b725fc2d0,2018-12-12 04:14:54,Tim van der Meij,"Merge pull request #10337 from wojtekmaj/turn-on-eslint-in-examples

Turn on ESLint in examples",True
d9bf3d320f52d5986fa01d367d6d956ea79d8642,2018-12-12 04:05:43,Tim van der Meij,"Merge pull request #10295 from wojtekmaj/eslint-plugin-mozilla-update

Update eslint-plugin-mozilla to ^1.0.1",True
9e3f7ac7faa44df0337fbace42efcda447c495ed,2018-12-11 19:53:26,Wojciech Maj,Manually fix remaining ESLint errors,False
ef1f25564923f0cbe150420d7f651c2843673825,2018-12-11 19:53:26,Wojciech Maj,ESLint --fix,False
80d7ff49126b40e82370c5378e1636949db76d5d,2018-12-11 19:53:26,Wojciech Maj,"Turn on ESLint in examples directory, apply examples-specific exceptions",False
e70a22a854448c6c862096917dd77f94ab89a0a4,2018-12-11 16:44:06,Wojciech Maj,Update eslint-plugin-mozilla to ^1.0.1,False
2f4c7e01f5871f77e4e03f78525c330de43dbe76,2018-12-11 03:48:30,Tim van der Meij,"Merge pull request #10304 from april/master

Add protection against directory traversal attacks",True
64cb8c6b982956da9cc41d0d61bbc4f98ab28ac1,2018-12-11 00:29:04,April King,Add protection against directory traversal attacks,False
45c01974657dcb7bc993b2f485a2541415bf63a0,2018-12-08 04:04:27,Tim van der Meij,"Merge pull request #10330 from janpe2/svg-line-width-zero

Handle line width of zero in SVG",True
5b8c51c1bfcc30b178638d3428227098d42e0053,2018-12-08 03:48:00,Tim van der Meij,"Merge pull request #10340 from Snuffleupagus/history-tryPushCurrentPosition-viewer-modes

Tweak the `PDFHistory._tryPushCurrentPosition` method to work better with the different Scroll/Spread viewer modes",True
89e479dd6c3aec4b2311a4f8a8e5bd124775bddb,2018-12-07 19:36:58,Jonas Jenwald,"Tweak the `PDFHistory._tryPushCurrentPosition` method to work better with the different Scroll/Spread viewer modes

Given that a larger number of pages may now be visible at once, and importantly that their layout may be non-vertical, one of the conditions should be tweaked to not accidentally miss cases where a page is still visible.

Please note: This patch is based on code-inspection, and the only ill effect occurring without it would be a couple of (near) duplicate history entries in some *rare* edge-cases.",False
ddabeb06452494b60fc366016bbdaa3df6eb655c,2018-12-04 19:35:32,Jani Pehkonen,Handle line width of zero in SVG,False
9a1e51af24e737a1ef2fcbf21c08011f317c3b73,2018-12-02 19:26:06,Tim van der Meij,"Merge pull request #10323 from Snuffleupagus/unittestcli

Test the code as-is, in Node.js/Travis, rather than its Babel translated version",True
08584efdfe85a8e6aec3772e23ac09d6ef69d431,2018-12-02 14:45:27,Jonas Jenwald,"Test the code as-is, in Node.js/Travis, rather than its Babel translated version

This patch does three things:

 - Updates the `gulp unittestcli` command, using `gulp lint` as a guide, such that it can be run locally on Windows without any modifications.

 - Updates the `gulp lib` command to support disabling of Babel through the `SKIP_BABEL` environment variable. Note that all other build targets support this mode, and there's no good reason for `lib` to be any different here.

 - Updates the `npm test` command, used in Node.js/Travis, to test the code as-is test. Since modern Node.js versions seem to have no problems with ES6 compatible code in general, we should just test the source code as-is instead (similar to the tests running on the regular bots).",False
4ff3435517365c5e34ebc89081b08249939d9e3f,2018-12-01 19:14:57,Tim van der Meij,"Merge pull request #10322 from felipeaugustox/patch-1

Remove unuseful variable",True
1a75647a27c42a1f40a65fc30b306f3072ccce6f,2018-12-01 09:14:18,Felipe augusto,"Remove unuseful variable

Variable is declared, but never used.",False
c91f437eaaff79b660805e020f4fa9d4a2a7fe65,2018-12-01 03:10:10,Tim van der Meij,"Merge pull request #10318 from Snuffleupagus/disablePreferences

In `GENERIC` builds, dispatch a ""webviewerloaded"" event (from the `webViewerLoad` function) before initializing the viewer",True
0dc995c7e0c3368929e01ae8555b3f04795a8e0a,2018-11-30 14:34:30,Jonas Jenwald,"In `GENERIC` builds, dispatch a ""webviewerloaded"" event (from the `webViewerLoad` function) before initializing the viewer

With the removal of the global `PDFJS` object, in PDF.js version `2.0`, the viewer options are no longer as easily accessible as they previously were (and issues have been filed about this).
In particular, since the viewer files aren't necessarily loaded *immediately*, this means that `PDFViewerApplication`/`PDFViewerApplicationOptions` aren't necessarily available directly. By dispatching an event once all viewer files are loaded but *before* the viewer initialization has run, setting `AppOptions` during load (in custom implementations of the default viewer) should hopefully become a little bit easier[1].

---
[1] In hindsight, this should probably have been implemented when the global `PDFJS` object was removed...",False
d9743e462dd27d3f01674449e5ccec0eab2afd59,2018-11-29 16:16:40,Jonas Jenwald,"Replace the `OVERRIDES` list in `PDFViewerApplication._readPreferences` with a `disablePreferences`, in `GENERIC` builds, `AppOption instead

Rather than having a (somewhat) randomly choosen list of Preferences which `AppOptions` are allowed to override, it makes much more sense to simply add an AppOption to allow custom implementations to ignore Preferences altogether (it's also inline with the AppOption that allows the `ViewHistory` to be bypassed on load).",False
1cb7cc9bf406818ca44b02aa8e6b36074ddae77a,2018-11-25 02:24:00,Tim van der Meij,"Merge pull request #10300 from timvandermeij/updates-followup

Include forgotten changes after Wintersmith update",True
e15a9797e3c8954525164cc0a6a4cd6c959cc27d,2018-11-25 02:09:54,Tim van der Meij,"Include forgotten changes after Wintersmith update

This should have been part of the previous commit that updated the
Wintersmith dependency. Markdown support is no longer included in Pug
itself and should be done by a transformer instead.",False
327cf38a942e62cb83df62b9b01336c663bbae45,2018-11-25 01:43:59,Tim van der Meij,"Merge pull request #10299 from timvandermeij/updates

Update packages and translations",True
2f2d5776e7d1b74f82c9fbd6b26b9d7436aa8a74,2018-11-25 01:33:40,Tim van der Meij,Update translations,False
498eaadcfb6cba94781c7efce0b2a1249b6dad27,2018-11-25 01:30:22,Tim van der Meij,Update packages,False
87e3fb8413391ca906798f715ee0b36218d2d092,2018-11-25 01:21:12,Tim van der Meij,"Merge pull request #10275 from Snuffleupagus/trees-get-binary-search

Fix `NameOrNumberTree.get` to actually perform a binary search to find the requested key",True
d0fec7c6fb0b53d18b5219870c5cc9950731f7b3,2018-11-24 04:22:33,Jonas Jenwald,"Fix `NameOrNumberTree.get` to actually perform a binary search to find the requested key

The intent of the code, based on existing comments, is to perform a binary search. However, because of what appears to be a typo in the code responsible for computing the current search index, this code is always checking *every* entry (albeit only at the ""final"" node) starting from the last one.",False
b9b8cef04b19d13497ed3c5b41566a1736fc5e26,2018-11-24 04:06:58,Tim van der Meij,"Merge pull request #10293 from wojtekmaj/babel-7

Upgrade to Babel 7",True
33fa33ec75538ec516dbf1d10a413afbde4cabe5,2018-11-24 03:44:47,Tim van der Meij,"Merge pull request #10292 from wojtekmaj/replace-uglify-es-with-terser

Replace uglify-es with Terser",True
34e79189d2c3dd33ad8100e6f2de1247ba5f8428,2018-11-24 03:42:42,Tim van der Meij,"Merge pull request #10294 from wojtekmaj/eslint-plugin-import

Add ESLint plugin import to be warned against invalid paths",True
b46ec5195f9d96d371050a679052ee58dfb59763,2018-11-23 19:02:17,Wojciech Maj,"Update Babel to 7.x

Update configuration to work with Babel 7
Explicitly require globals - eslint-plugin-mozilla needs it, but doesn't require it on its own.
Fix Regexp to match Babel 7's inlined _interopRequireDefault",False
9921f92a369c6d6b253cba03a1fdc991d86e9897,2018-11-23 18:20:28,Wojciech Maj,Enable eslint-plugin-import to prevent unresolved paths,False
616135962a818e2987eb8d11f431453fd8450cdd,2018-11-23 18:19:58,Wojciech Maj,Fix badly formatted .eslintrc,False
01727e0fcc10ff8f6c65fcdfa1ab322f57faf2f8,2018-11-23 16:48:36,Wojciech Maj,Replace UglifyJS with Terser,False
7b4f3035d2373ff97c74bcdc8a8e387709649ec6,2018-11-22 03:27:44,Tim van der Meij,"Merge pull request #10274 from Snuffleupagus/out-of-order-trees

Fallback to an exhaustive search, in corrupt PDF files, for NameTrees/NumberTrees that are not correctly ordered (issue 10272)",True
fdad0a0b0b7a4c870428372f6c21970c20f3e3a9,2018-11-20 22:20:47,Jonas Jenwald,"Fallback to an exhaustive search, in corrupt PDF files, for NameTrees/NumberTrees that are not correctly ordered (issue 10272)

According to the specification, see https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#G6.2384179, the keys of NameTree/NumberTree should be ordered.
For corrupt PDF files, which violate this assumption, we thus need to fallback to an exhaustive search in order to e.g. find all destinations.

*Please note:* Given that this only implements a fallback for the ""final"" node of the Tree, there's obviously a risk that the patch isn't sufficient for dealing with all kinds of out-of-order corruption. However, this kind of problem should be rare in practice, and without a real-world test-case it's difficult to implement a completely general solution (and there's obviously a question if you'd even want to).",False
9e990f6f3e9f3afd78d1206c25b0057a2e509566,2018-11-20 22:20:37,Jani Pehkonen,Repair CFF fonts if stem hints are in wrong order,False
6ebdbb244f3b9acbe42766654b411584d85f7626,2018-11-19 00:11:41,Tim van der Meij,"Merge pull request #10246 from Snuffleupagus/api-classes

Convert the remaining code in `src/display/api.js` to use ES6 classes",True
ac6b94c9ddd2d0215eb17692a6cf052ccc2534ac,2018-11-18 23:38:27,Jonas Jenwald,"Replace the remaining occurences, in `src/display/api.js`, of `var` with `let`/`const`",False
061f7bd2f30e35d8d5f2face4a3e31aa520e77e2,2018-11-18 23:38:27,Jonas Jenwald,"Convert `PDFWorker`, in `src/display/api.js`, to an ES6 class

Also changes all occurrences of `var` to `let`/`const` in this code.",False
02e77a39ec68247c619a6f67d9b8432ad40a50bc,2018-11-18 23:38:27,Jonas Jenwald,"Convert `InternalRenderTask`, in `src/display/api.js`, to an ES6 class

This changes all occurrences of `var` to `let`/`const` in this code, and updates the signature of the constructor to use object destructuring for better readability (and self documentation).
Also, `useRequestAnimationFrame` is changed to a parameter and the `typeof window` check is now done *once* rather than at every `_scheduleNext` call.",False
5a0d64a6de2581526b46dd001e19ad68abba5d1b,2018-11-18 23:38:25,Jonas Jenwald,"Convert `PDFPageProxy`, in `src/display/api.js`, to an ES6 class

This changes all occurrences of `var` to `let`/`const` in this code, and updates the signatures of a couple of methods to use object destructuring.
Finally, when creating `InternalRenderTask` instances *only* the necessary parameter are now provided, since passing through the `RenderParameters` as-is seems completely unnecessary.",False
2c003a82d57b5ad778fbf221a86f1d1408c02952,2018-11-18 23:38:00,Jonas Jenwald,"Convert `RenderTask`, in `src/display/api.js`, to an ES6 class

Also deprecates the `then` method, in favour of the `promise` getter.",False
ef8e5fd77c809b6589716a5f1d5f68e24862c3e6,2018-11-18 23:37:57,Jonas Jenwald,"Convert `PDFDocumentLoadingTask`, in `src/display/api.js`, to an ES6 class

Also deprecates the `then` method, in favour of the `promise` getter.",False
5f15dc202309386b9d2f528318fb4defde2180d9,2018-11-18 20:24:08,PalmerAL,"Use `span` instead of `div` in the text layer

This improves copy/pasting text content since it reduces the amount of unnecessary newlines.",False
4e3d6944516ba507e121aab04d0a0b88fea3d0c5,2018-11-18 04:15:44,Tim van der Meij,"Merge pull request #10264 from timvandermeij/updates

Update translations and packages",True
016c2761dafeb7e131db7253bb3e356fb63ecf7d,2018-11-18 04:01:22,Tim van der Meij,"Resolve deprecation warnings for Jasmine

Jasmine recommends to use the `configure` method on the environment
during boot. This commit makes the code correspond to how it's done in
Jasmine's default boot file. The options dropdown in the HTML reporter
now works again after these changes, because this broke in the upgrade
to Jasmine 3, and the unit tests are executed in a random order by
default, which is important to make sure the unit tests are
self-contained and don't depend on the result of another unit test.",False
fd3b780a74469cd28dacd9a6db42859e1b7161cb,2018-11-18 02:07:52,Tim van der Meij,Update packages,False
5df4d29b0fdde51985dc779ea93407a1d44cb111,2018-11-18 02:07:51,Tim van der Meij,Update translations,False
3770073955066c7100b8e455fb6f3e01c199dbe8,2018-11-18 00:55:32,Tim van der Meij,"Merge pull request #10256 from Snuffleupagus/invalid-pageNumber-errors

Attempt to tweak the error messages, in `BaseViewer`, for invalid pageNumbers/pageLabels (bug 1505824)",True
9a47a86565d1177d3c5ebb8dd135019f183987f3,2018-11-17 21:53:09,Jonas Jenwald,"Attempt to tweak the error messages, in `BaseViewer`, for invalid pageNumbers/pageLabels (bug 1505824)

Rather than closing [bug 1505824](https://bugzilla.mozilla.org/show_bug.cgi?id=1505824) as WONTFIX (which is my preferred solution), given how *minor* this ""problem"" is, it's still possible to adjust the error messages a bit.

The main point here, which is relevant even if the changes in `BaseViewer` are ultimately rejected during review, is that we'll no longer attempt to call `BaseViewer.currentPageLabel` with an empty string from `webViewerPageNumberChanged` in `app.js`.

The other changes are:
 - Stop printing an error in `BaseViewer._setCurrentPageNumber`, and have it return a boolean indicating if the page is within bounds.
 - Have the `BaseViewer.{currentPageNumber, currentPageLabel}` setters print their own errors for invalid pages.
 - Have the `BaseViewer.currentPageLabel` setter no longer depend, indirectly, on the `BaseViewer.currentPageNumber` setter.
 - Improve a couple of other error messages.",False
e3e7ccc3e266c6c59355ccdfba15bae46bfc9fd7,2018-11-17 03:34:00,Tim van der Meij,"Merge pull request #10255 from Snuffleupagus/renderMatches-less-scrollMatchIntoView

Avoid unnecessary `PDFFindController.scrollMatchIntoView` calls in `TextLayerBuilder._renderMatches` when `highlightAll` is set (PR 10201 follow-up)",True
9a677ce51ae2ccef454c7a1682f8cabbe1b879bd,2018-11-14 20:12:15,Jonas Jenwald,"Avoid unnecessary `PDFFindController.scrollMatchIntoView` calls in `TextLayerBuilder._renderMatches` when `highlightAll` is set (PR 10201 follow-up)

When `highlightAll` is *not* set, there's only going to be a single match per page and unconditionally calling `PDFFindController.scrollMatchIntoView` doesn't really matter.
However, when `highlightAll` is set the current code may result in a large number of unnecessary `PDFFindController.scrollMatchIntoView` calls. Since `TextLayerBuilder._renderMatches` already checks if a particular match is the selected one, for highlighting purposes, it's simple enough to also skip scrolling completely for non-selected matches.",False
960213cb6963f9bf46d6224805de2dc73fef0af4,2018-11-13 04:01:09,Tim van der Meij,"Merge pull request #10244 from dardinier/fix-webpack-example

Fix webpack example",True
20113453156fff307b0a163bcf831384b89565de,2018-11-12 15:45:17,Alexis Dardinier,"Update versions in webpack example

Fix package.json after review",False
4724ebbcf1bbd511ed11a2fbf0eff0056569f654,2018-11-11 01:07:47,Tim van der Meij,"Merge pull request #10231 from Snuffleupagus/find-no-scroll-highlightAll

Stop scrolling the document when ""Highlight All"" is toggled in the findbar (issue 5561)",True
5b1b5730a16424da821e4734b07e9ae67ce3da5c,2018-11-11 00:59:02,Tim van der Meij,"Merge pull request #10220 from Snuffleupagus/find-less-scrolling

Only scroll search results into view as a result of an actual find operation, and not when the user scrolls/zooms/rotates the document (bug 1237076, issue 6746)",True
5706961452bf6c8cb32511d74c44af151be63fe3,2018-11-11 00:40:22,Tim van der Meij,"Merge pull request #10223 from Snuffleupagus/find-reset-on-query-change

When the search query changes, regardless of the search command, always re-calculate matches (bug 1030622)",True
b9c03cd66762e3b8b3a3c98ec09689a7b36310f3,2018-11-10 03:32:17,Tim van der Meij,"Merge pull request #10245 from Snuffleupagus/scrollPageIntoView

Update `BaseViewer.scrollPageIntoView` to always validate the `pageNumber` parameter",True
06609b5337646b06e9b29bbbae7fb98a9b37667b,2018-11-09 16:02:19,Jonas Jenwald,"Prevent errors if `PDFFindController.executeCommand` is ever called without a `state` object

Most of the code in `PDFFindController` assumes that a valid `state` always exits, hence it cannot hurt to add a simple check to avoid errors being thrown.",False
8afb5502181dd160e85ef8c3459283793fbfb655,2018-11-09 16:02:19,Jonas Jenwald,"When the search query changes, regardless of the search command, always re-calculate matches (bug 1030622)

Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1030622",False
de6b0fd12d1bd5e53bd2006e0532de5412bb31aa,2018-11-09 16:01:59,Jonas Jenwald,"Stop scrolling the document when ""Highlight All"" is toggled in the findbar (issue 5561)

This is consistent with the general, e.g. HTML, search functionality of the Firefox browser.",False
fd87f1352139f941f115568c4e4980180253d57a,2018-11-09 16:00:45,Jonas Jenwald,"Only scroll search results into view as a result of an actual find operation, and not when the user scrolls/zooms/rotates the document (bug 1237076, issue 6746)

Currently searching, and particularily highlighting of search results, may interfere with subsequent user-interactions such as scrolling/zooming/rotating which can result in a somewhat jarring UX where the document suddenly ""jumps"" to a previous position.
This is especially annoying in cases where the highlighted search result isn't even visible when a user initiated scrolling/zooming/rotating happens, and there exists a couple of bugs/issues about this behaviour.

It seems reasonable, as far as I'm concerned, to treat searching as one operation and any subsequent non-search user interactions with the viewer as separate and thus not scroll the current search result into view *unless* the user is actually doing another search.
This also seems consistent with general searching in e.g. Firefox and Adobe Reader:
 - Compare with ""regular"" searching of e.g. HTML files in Firefox, where the user scrolling and/or zooming the document will not force a currently highlighted search result to become re-scrolled into view.
 - Compare also with Adobe Reader, where the user scrolling, zooming, and/or rotating the document will not force the currently highlighted search result to become re-scrolled into view.

The question is then why search highlighting was implemented this way in PDF.js to begin with. It might be that this wasn't really intended behaviour, but more a consequence of the asynchronous nature of the API. Considering that most operations, such as fetching the page, rendering it and extracting its text-content are all asynchronous; searching and highlighting of matches thus becomes asynchronous too.
However, it should be possible to track when search results have been scrolled into view and highlighted, and thus prevent these wierd ""jumps"" when the user interacts with the document.

*Please note:* Unfortunately this required moving the scrolling of matches back into `PDFFindController`, since I simply couldn't see any other (reasonable) way of implementing the functionality without tracking the `_shouldScroll` property in only *one* spot.
However, given that the new `PDFFindController.scrollMatchIntoView` method follows a similar pattern as `BaseViewer.scrollPageIntoView` and `PDFThumbnailViewer.scrollThumbnailIntoView`, this is hopefully deemed OK.",False
e16e072cb3caea1f5d5045e8a59198644120cd34,2018-11-09 14:46:40,Jonas Jenwald,"Directly call `_setCurrentPageNumber` when updating the Scroll/Spread modes in `BaseViewer`

Given that the `_updateScrollMode`/`_updateSpreadMode` methods are ""private"", there's no particular reason to not just directly call `_setCurrentPageNumber`.",False
2e38b7d00b780dcab1a15012f3f7614997de8e42,2018-11-09 14:28:37,Jonas Jenwald,"Update `BaseViewer.scrollPageIntoView` to always validate the `pageNumber` parameter

Note that when e.g. presentation mode is active, we fail[1] to ensure that the `pageNumber` parameter is actually an integer before calling `_setCurrentPageNumber` (that method expects the argument be an integer).
Also changes the method signature, of `scrollPageIntoView`, to use object destructuring instead.

---
[1] Most likely, this is actually *my* oversight :-)",False
2194aef03e155c3ee0f2f1491132b5b4e6dd6cfd,2018-11-09 03:58:46,Tim van der Meij,"Merge pull request #10238 from Snuffleupagus/interfaces

Move the `interface` definitions out of `src/core/worker.js` and into their own file",True
0dfedacc6ddfaaf486c498713846669a48af0b11,2018-11-09 03:52:48,Tim van der Meij,"Merge pull request #10233 from Snuffleupagus/PDFObjects-class

[api-minor] Convert `PDFObjects`, in `src/display/api.js`, to an ES6 class",True
6bb7492faeedc4a4b26acb18700ef03c6edd261f,2018-11-08 17:51:46,Jonas Jenwald,"Simply export the various `interface` definitions, rather than disabling ESLint, in `web/interfaces.js`",False
4829f567c18d1566792fad09b7dc54367fd5da66,2018-11-08 17:51:37,Jonas Jenwald,"Move the `interface` definitions out of `src/core/worker.js` and into their own file

These interfaces are already used in different files, in both the `src/core/` and `src/display/` folders, and having them reside in their own file seems a lot clearer and is also similar to the existing viewer interfaces.

As part of moving the `interface` definitions, they're also converted to ES6 classes.",False
60da2d882bf432f474b033ccd489cd647fe125d2,2018-11-08 14:43:39,Jonas Jenwald,"[api-minor] Refactor/simplify the `PDFObject` class

First of all, note how there's currently *two* methods for checking if a certain object exists, which seems completely unwarranted.
Furthermore, the rarely used `getData` method was removed and its only callsite changed to use a combination of `PDFObjects.{has, get}` instead.
Finally, the methods were rearranged slightly, to bring the most important ones (for an API user) to the top of the class.",False
d32321d84f32d1610b92ad8b5f785a20f62bec10,2018-11-08 14:41:40,Jonas Jenwald,"Convert `PDFObjects`, in `src/display/api.js`, to an ES6 class

Also changes all occurrences of `var` to `const`, and marks internal properties/methods as ""private"".",False
3e342554d10de82702858a3cabb62657ce6d0d92,2018-11-08 04:21:01,Tim van der Meij,"Merge pull request #10228 from morille/patch-2

Don't detect nw.js as node.js",True
744a693554a1d225190fce74eb626dfdfb19d6eb,2018-11-08 03:45:01,Tim van der Meij,"Merge pull request #10219 from Snuffleupagus/ps-parser-class

Convert `src/core/ps_parser.js` to use ES6 classes",True
13b0ca6b2afc1bae46f6757425e54e97b087ba9f,2018-11-07 15:44:22,Romain Petit,"Don't detect nw.js as node.js

nw.js is chrome plus nodejs.
It will succeed everywhere chrome succeeds, but fail in many cases where nodejs succeeds (see issue 9071).
So it's safer to consider it as a browser context rather than a nodejs context.

Make travis happy again

CS

Readability + Explanation

The relevant portion of the NW.js documentation:
http://docs.nwjs.io/en/latest/For%20Users/Advanced/JavaScript%20Contexts%20in%20NW.js/#access-nodejs-and-nwjs-api-in-browser-context

Added full link to relevant doc.",False
a963d139dc192a1bc7e3081cd68301880f0b07ee,2018-11-03 22:13:06,Jonas Jenwald,"Convert `src/core/ps_parser.js` to use ES6 classes

Besides being a fairly small and self-contained file, this code also shows a possible way of defining static constants on classes.",False
45758dd2d5f6417053e88f98d89da18c4178df7b,2018-11-03 20:35:41,Tim van der Meij,"Merge pull request #10217 from Snuffleupagus/findagain-position-reset

For repeated 'findagain' operations, attempt to reset the search position if the user has e.g. scrolled in the document (issue 4141)",True
d805d799ffad7d27f9938143b67a75020a7d40b3,2018-11-03 16:33:11,Jonas Jenwald,"For repeated 'findagain' operations, attempt to reset the search position if the user has e.g. scrolled in the document (issue 4141)

Currently we'll only attempt to start from the current page when a new search is done, however for 'findagain' operations we'll always continue from the last match position.
This could easily lead to confusing behaviour if the user has scrolled to a completely different part of the document. In an attempt to improve this somewhat, for repeated 'findagain' operations, we'll instead reset the position to the current page when it's *absolutely* certain that the user has scrolled.

Note that this required adding a new `BaseViewer` method, and exposing that through `PDFLinkService`, in order to check if a given page is visible.
In an attempt to avoid issues, in custom implementations of `PDFFindController`, the code checks for the existence of the `PDFLinkService.isPageVisible` method *before* using it.",False
d7941b4ce741619bcd917dc3c9a762701f355fbc,2018-11-03 16:22:48,Jonas Jenwald,"Add a helper method, in `PDFFindController`, to determine if matches need to be re-calculated when a new search operation occurs",False
af99d1dc08a535dbecaed8bb465a89ad907d8e26,2018-11-03 16:18:40,Jonas Jenwald,"Attempt to improve readability of `PDFFindController.executeCommand` by (slightly) refactoring the code responsible for calling `PDFFindController._nextMatch`

Unfortunately the `PDFFindController.executeCommand` method has now become a bit more complicated than one would like, but hopefully this small change will improve the structure somewhat (especially for subsequent patches).",False
ec76aa531e7ebd2ab6f0a5caf867475b7047d62e,2018-11-03 03:41:47,Tim van der Meij,"Merge pull request #10202 from Snuffleupagus/issue-10200

Attempt to clean-up/restore pending rendering operations on `RenderTask.cancel` (issue 10200)",True
f6bc93402ef35675ce61a278e3abe6b93d7fd393,2018-11-02 03:57:26,Tim van der Meij,"Merge pull request #10096 from Snuffleupagus/rm-attachDOMEventsToEventBus

Remove the `attachDOMEventsToEventBus` functionality, since `EventBus` instances are able to re-dispatch events to the DOM (PR 10019, bug 1492849 follow-up)",True
4b9d0a67d2115a4b1ccc7f0364cf90b920b6e885,2018-11-01 04:02:39,Jonas Jenwald,"Inline the 'scalechanging' event dispatching in `BaseViewer._setScaleUpdatePages`

With only *one* event now being dispatched when the scale changes, in combination with there only being two call-sites, it doesn't seem necessary to keep the helper method for dispatching the 'scalechanging' event.",False
e2e9657ed06c15c2452f2686ad3fb68a3e4aba09,2018-11-01 04:02:39,Jonas Jenwald,"Remove the `attachDOMEventsToEventBus` functionality, since `EventBus` instances are able to re-dispatch events to the DOM (PR 10019, bug 1492849 follow-up)

This also removes the old 'pagechange'/'scalechange'/'documentload' events.",False
7053b5a146cb2881ae4174c6aff81e469803fe28,2018-11-01 03:29:20,Tim van der Meij,"Merge pull request #10203 from Snuffleupagus/canvasInRendering-WeakSet

Change `canvasInRendering` to a `WeakSet` instead of a `WeakMap`",True
bb5f261c585e4b7ba597716a7f3010e594c79787,2018-11-01 02:59:40,Tim van der Meij,"Merge pull request #10201 from Snuffleupagus/find-less-updatePage

Reduce the number of redundant `updatetextlayermatches` events dispatched when calculating matches in `PDFFindController`",True
f23dba1c10134b7a83998ac537df62042c237e4c,2018-10-31 22:45:23,Jonas Jenwald,"Change `canvasInRendering` to a `WeakSet` instead of a `WeakMap`

Note how nowhere in the code `canvasInRendering.get()` is ever called, and that this structure is really only used to store references to `<canvas>` DOM elements.
The reason for this being a `WeakMap` is probably because at the time we weren't using `core-js` polyfills yet, and since there already existed a manually implemented `WeakMap` polyfill it was probably simpler to use that.",False
f77b4633399925508c48a225a6fd8c321b523ae2,2018-10-31 20:52:17,Jonas Jenwald,"Attempt to clean-up/restore pending rendering operations on `RenderTask.cancel` (issue 10200)

Please note that, given the lack of a runnable example, I'm not totally sure if this first of all is enough to *completely* address the issue as filed and second of all if we actually want this new behaviour.",False
014b7a31476230aed5d0af4cb3b318903c0df184,2018-10-31 20:35:12,Jonas Jenwald,"Reduce the number of redundant `updatetextlayermatches` events dispatched when calculating matches in `PDFFindController`

Currently `PDFFindController._calculateMatch` is (indirectly) dispatching an `updatetextlayermatches` event for every *single* page of the document. For short documents, such as the `tracemonkey` file, this probably doesn't matter too much, but for documents with a couple of thousand pages it seems unfortunate.

It shouldn't be necessary, in general, to dispatch `updatetextlayermatches` events here, since that's already being taken care of in `PDFFindController._updateMatch` which is always called when a match has been found.
However, when `highlightAll` is set we still need to ensure that pages which finished rendered *before* searching begun are updated correctly.",False
42b7bb47511ca30e55a41c653c6bdc9d841bfb4b,2018-10-30 03:49:32,Tim van der Meij,"Merge pull request #10190 from Snuffleupagus/_getCurrentVisiblePage

Add a helper method for `_getVisiblePages`, in `BaseViewer`, for the case where only a single page is displayed in the viewer",True
74b5d0b022f1b75a575b7d1241dc2bdd9dc0a006,2018-10-30 03:42:37,Tim van der Meij,"Merge pull request #10196 from Snuffleupagus/findbarclose-findagain-highlightAll

[Regression] Ensure that ""Highlight All"" is propagated to all pages for 'findagain' events where the findbar was previously closed (PR 10100 follow-up)",True
96abb4bbe7bfde35c92f268d5a3072282f8898f5,2018-10-30 00:20:29,Jonas Jenwald,"[Regression] Ensure that ""Highlight All"" is propagated to all pages for 'findagain' events where the findbar was previously closed (PR 10100 follow-up)

**STR:**
1. Open the default viewer, with the `tracemonkey` file.
2. Open the findbar, and search for ""trace"".
3. Enable the ""Highlight All"" option.
4. Close the findbar.
5. Re-open the findbar, and click on the ""findNext"" button.
6. Scroll down to the *second* page of the document.

**ER:**
Since ""Highlight All"" is active, all matches on the *second* page should be highlighted.

**AR:**
No matches are highlighted on the *second* page.",False
2a79bcbe453dfa077412474c118c2febd22ddac0,2018-10-28 19:29:31,Jonas Jenwald,"Add a helper method for `_getVisiblePages`, in `BaseViewer`, for the case where only a single page is displayed in the viewer

This is relevant for e.g. `PDFSinglePageViewer`, and `PDFViewer` with Presentation Mode active.
By moving this code to a helper method in `BaseViewer`, it's thus possible to reduce the amount of duplicate code that currently needed in `PDFViewer` and `PDFSinglePageViewer`.",False
991a574c60921f14d9553931ad2b0b94d8bed231,2018-10-28 18:31:03,Tim van der Meij,"Merge pull request #10184 from Snuffleupagus/findbarclose-abort

Ensure that matches are not scrolled into after the findbar has been closed (PR 10100 follow-up)",True
04ce2afd4a5532e15f0b32816ec55fb96152c2bd,2018-10-28 18:15:01,Tim van der Meij,"Merge pull request #10182 from Snuffleupagus/TextLayerBuilder-rm-findController-checks

Small clean-up of the search related methods in `TextLayerBuilder`",True
a77ac5fa23c37969c78b5b658d455b5404ba4c3e,2018-10-28 18:01:15,Tim van der Meij,"Merge pull request #10185 from Snuffleupagus/find-less-normalization

Reduce the number of redundant text normalization operations in `PDFFindController`",True
ed4ac1bc67d109938bcf6e55981cabed315e2981,2018-10-28 17:48:48,Tim van der Meij,"Merge pull request #10162 from janpe2/svg-normalize-bbox

Normalize BBox of form XObjects in SVG back-end",True
c76c9878befd1702fe5db053d9d7e67460dd46db,2018-10-28 00:31:13,Tim van der Meij,"Merge pull request #10188 from timvandermeij/download-button

Hide the beta version button on the website if there is only a stable version",True
2b5bc6bcec955e89cc7849c7eaf8b565b2ce9413,2018-10-28 00:27:01,Tim van der Meij,Hide the beta version button on the website if there is only a stable version,False
31bff2d9509bdf3d64abbcc4311e6053b8ec4d03,2018-10-27 20:32:11,Tim van der Meij,"Merge pull request #10187 from timvandermeij/bump

Bump versions in `pdfjs.config`",True
7c6c56214fc0d5148bd02ccc9915e42fe74ed526,2018-10-27 20:25:23,Tim van der Meij,Bump versions in `pdfjs.config`,False
5dc12f9a6de58ae0db4c24fb3dc8723ae12131e5,2018-10-27 15:14:24,Jonas Jenwald,"Only normalize the search query once, in `PDFFindController, for every page being searched

For a short document, such as e.g. the `tracemonkey` file, this repeated normalization won't matter much, but for documents with a couple of thousand pages it seems completely unnecessary (and wasteful) to keep repeating the normalization whenever for every single page.",False
84ae4f9a5ee4c737397a819cdbb56339d1a72fdb,2018-10-26 23:53:32,Jonas Jenwald,"Only normalize the text-content once, in `PDFFindController`, and not on every new search operation

Currently the text-content is normalized every time that a new search operation is started, which seems completely useless considering that the ""raw"" text-content is never used for anything.
For a short document, such as e.g. the `tracemonkey` file, this repeated normalization won't matter much, but for documents with a couple of thousand pages it seems completely unnecessary (and wasteful) to keep repeating the normalization whenever e.g. a new search operation starts.",False
12d8b52c499da7f7c2eb003c3213eb6ce77b906b,2018-10-26 21:52:32,Jonas Jenwald,"Move the `normalize` helper function out of `PDFFindController`

In the event that multiple instances of `PDFFindController` ever exists simultaneously, they will all be able to share just one `normalize` function in this way. Furthermore, the regular expression is now created lazily rather than at class construction time.",False
64d75c32bf9a568757a63f192215467c913c366c,2018-10-26 16:13:12,Jonas Jenwald,"Ensure that matches are not scrolled into after the findbar has been closed (PR 10100 follow-up)

Despite all highlighted matches being removed in response to the 'findbarclose' event, there's a risk that a match could still be scrolled into view *after* the findbar has been closed[1].
Hence we need to ensure that long running searches, particularily those happening in large and/or slow loading documents[2], are ignored as well.

---
[1] The match is hidden, as expected, but the document could still scroll unexpectedly.
[2] Large documents loaded with `disableAutoFetch = true` and `disableStream = true` set are particularily susceptible to this issue.",False
27b21f2558a73125b73cd49fc3b85e705c78f6cd,2018-10-26 15:20:44,Jonas Jenwald,"Add a `_updateAllPages` helper method to `PDFFindController` in order to reduce the amount of event dispatching

Given that dispatching the 'updatetextlayermatches' event with `pageIndex = -1` set is now used to target the textLayers of *all* pages, there's no need to send individual events to every single page during `_nextMatch`. Since there can be an arbitrary number of pages in a document, this small/simple optimization seems too easy to ignore.",False
d73a71fb905062111a8bf1f019935552b0508a95,2018-10-26 01:08:25,Jonas Jenwald,"Small clean-up of the search related methods in `TextLayerBuilder`

This patch does four things:
 - Change the search related methods in `TextLayerBuilder` to be ""private"", since there're only called from within the class itself now.
 - Use `const` for local variables not intended to change in the search related methods in `TextLayerBuilder`.
 - Finally, removes most `this.findController` checks since they are redundant. Note how both `this._convertMatches` and `this._renderMatches` are *only* ever called, from `this._updateMatches`, when `this.findController` is actually defined. Hence there's really no need to repeat those checks all over the place, especially with all the relevant methods now being marked as ""private"".
 - Always initialize the `this._pageMatchesLength` property with an empty array, to simplify the code in `TextLayerBuilder`.",False
dc98bf76eb3f610bb86af441a5c71792bb58c825,2018-10-25 03:15:22,Tim van der Meij,"Merge pull request #10179 from ThomasdenH/patch-1

Change splice to pop in annotation tests",True
b157d8b4786e9435483368ae45cef2626d3ae9d0,2018-10-24 16:38:08,Thomas den Hollander,"Change splice to pop in annotation tests

This line in the annotation tests subtracts an array from a number. This is because `splice(-1, 1)` returns a one-element array, while `pop()` returns only the element itself.",False
f31f4bea4f603b2f38c1d371a18310d08825e183,2018-10-24 03:53:45,Tim van der Meij,"Merge pull request #10176 from timvandermeij/updates

Update translations and packages",True
0abddde2c750a35d5b2655f23e6cbfe9097283b6,2018-10-24 03:39:39,Tim van der Meij,"Update packages

Webpack is pinned because versions higher than this cause the viewer not
to work (see https://github.com/mozilla/pdf.js/pull/10170#issuecomment-431697032).

Node.js is pinned for Travis CI because version 11 requires that we
update to Gulp 4.",False
c74c357157b5e10979ed637271ab3ec5348e8c79,2018-10-24 03:02:42,Tim van der Meij,Update translations,False
9cd5f94f03e792d1f7d84873a6929a3f1c2f91f3,2018-10-22 16:47:05,Jani Pehkonen,Normalize the BBox of form XObjects on the /core side,False
aa728aaf9454ca5f8d9236c8ce7337d4dc55ea57,2018-10-21 19:19:24,Tim van der Meij,"Merge pull request #10168 from Snuffleupagus/PDFDataRangeTransport-class

Convert `PDFDataRangeTransport` to an ES6 class",True
5bb7f4b615a8ab1d7d43aaca94a2749498bc792d,2018-10-20 20:45:27,Jonas Jenwald,Convert `PDFDataRangeTransport` to an ES6 class,False
d21892933d593d3b70ae99073f73003054b24757,2018-10-20 18:52:05,Tim van der Meij,"Merge pull request #10161 from Snuffleupagus/DataLoaded-onProgress

Ensure that `onProgress` is always called when the entire PDF file has been loaded, regardless of how it was fetched (issue 10160)",True
e63e2ef85efb2cd585af9766572bb8f0dc99c928,2018-10-20 18:44:56,Tim van der Meij,"Merge pull request #10167 from Snuffleupagus/pdfjsLib-more-exports

Export `CMapCompressionType` and `PermissionFlag` on the `pdfjsLib` object (issue 10148, PR 10033 follow-up)",True
54f9883c51aaf4bd1bc162937df8def569e36d58,2018-10-20 15:08:00,Jonas Jenwald,"Export `CMapCompressionType` and `PermissionFlag` on the `pdfjsLib` object (issue 10148, PR 10033 follow-up)

`CMapCompressionType` makes a lot of sense to export, for anyone attempting to implement a custom `CMapReaderFactory`; fixes 10148.

`PermissionFlag` likewise needs to be exported, since otherwise the result of the `getPermissions` API method becomes difficult to interpret; follow-up to 10033.",False
a0bc5c2df048e03f1cdba40c5bce236f8ded0d6b,2018-10-20 02:38:23,Tim van der Meij,"Merge pull request #10166 from timvandermeij/bump

Bump version numbers for stable and beta releases",True
af33399ac9a0f75124cacb1ba19ef79b9a13ff73,2018-10-20 02:33:19,Tim van der Meij,Bump version numbers for stable and beta releases,False
327f2eb588e66fb7fb63e75eafa28c24c9c0bb9a,2018-10-16 17:21:12,Jonas Jenwald,"Ensure that `onProgress` is always called when the entire PDF file has been loaded, regardless of how it was fetched (issue 10160)

*Please note:* I'm totally fine with this patch being rejected, and the issue closed as WONTFIX; however these changes should address the issue if that's desired.

From a conceptual point of view, reporting loading progress doesn't really make a lot of sense for PDF files opened by passing raw binary data directly to `getDocument` (since obviously *all* data was loaded).
This is compared to PDF files loaded via e.g. `XMLHttpRequest` or the Fetch API, where the entire PDF file isn't available from the start and knowing the loading progress makes total sense.

However I can certainly see why the current API could be considered inconsistent, which isn't great, since a registered `onProgress` callback will never be called for certain `getDocument` calls.
The simplest solution to this inconsistency thus seem to be to ensure that `onProgress` is always called when handling the `DataLoaded` message, since that will *always* be dispatched[1] from the worker-thread.

---
[1] Note that this isn't guaranteed to happen, since setting `disableAutoFetch = true` often prevents the *entire* file from ever loading. However, this isn't relevant for the issue at hand, and is a well-known consequence of using `disableAutoFetch = true`; note how the default viewer even has a specialized code-path for hiding the loadingBar.",False
ecbdc508f7d872d2a734932ce12cb96153b004aa,2018-10-14 18:21:37,Tim van der Meij,"Merge pull request #10155 from kevin51jiang/build-button

Add Build Status Button",True
c4ac6ad431172f93a9627a112db8dd71aa4b8719,2018-10-14 03:56:48,Kevin Jiang,"Add Build Status Button

Add build Status button so that it's easy to see if pdf.js passed tests or not.",False
e41c50c3c5bfd23f0e2f9d00b9b9af9cb7418224,2018-10-13 02:58:53,Tim van der Meij,"Merge pull request #10152 from Snuffleupagus/classList-toggle

Add support for `classList.toggle` with the, optional, ""force"" parameter",True
ea4db64f417dde6a2d4ec576d5bbbe2160684a04,2018-10-12 19:11:11,Jonas Jenwald,"Convert some occurrences, in the `/web` folder, of `classList.{add, remove}` to `classList.toggle` with the ""force"" parameter",False
4cde844ffe6e2e129fab778a24ad5273dabcb59c,2018-10-12 19:11:09,Jonas Jenwald,"Add a `DOMTokenList.toggle` polyfill for the second, optional, ""force"" parameter

This is based on the polyfill available at https://developer.mozilla.org/en-US/docs/Web/API/Element/classList#Polyfill",False
06c6503ba0ff3cc4c7a21ee9601ab17e67b74c51,2018-10-12 02:07:34,Tim van der Meij,"Merge pull request #10150 from Snuffleupagus/linkService-pagesCount

Add missing `pagesCount` getter to `IPDFLinkService` and `SimpleLinkService`",True
df8d9f45f97febd92584b950e84aee632598c1b8,2018-10-11 13:59:15,Jonas Jenwald,Add missing `pagesCount` getter to `IPDFLinkService` and `SimpleLinkService`,False
9e9426c354abcd79f99fe6b56037e118bac218f1,2018-10-11 03:35:01,Tim van der Meij,"Merge pull request #10143 from Snuffleupagus/getMainThreadWorkerMessageHandler-catch-errors

Ensure that `getMainThreadWorkerMessageHandler` won't accidentally break `getDocument` (PR 10139 follow-up)",True
6f30cbb478839df1a58d154684ad280923dcef8e,2018-10-10 03:48:38,Tim van der Meij,"Merge pull request #10140 from Snuffleupagus/rm-pdfjsFilePath

Combine the `pdfjsFilePath` and fallback `workerSrc` handling in `src/display/api.js`",True
0e2c6047e49eed38f7c3a0a0b02f7754abacec27,2018-10-09 19:14:31,Jonas Jenwald,"Ensure that `getMainThreadWorkerMessageHandler` won't accidentally break `getDocument` (PR 10139 follow-up)

*This should have been part of PR 10139.*

In the event that a user has attempted to manually load the worker file on the main-thread, but somehow failed to do that correctly, there's a possibility that `getMainThreadWorkerMessageHandler` could throw. Considering how/where that helper function is being called, an error could still prevent `PDFDocumentLoadingTask` from completing (regardless if it's being resolved/rejected).",False
21c8dd4842b7cc4e36a9c9c7c39c8eb77e51f1c8,2018-10-09 17:17:48,Jonas Jenwald,"Combine the `pdfjsFilePath` and fallback `workerSrc` handling in `src/display/api.js`

With the way that the `getWorkerSrc()` helper function is implemented now, there's no longer a particularly strong reason for keeping the global `pdfjsFilePath` variable around.
With this patch the fallback `workerSrc` will thus, assuming is wasn't already set, be set to the ""pdfjsFilePath"" which simplifies the `getWorkerSrc()` function and reduces the amount of global state.

Finally, the global `workerSrc` variable was renamed to prevent shadowing.",False
f45e46d7adba9052a6ecd364e3630af858a74a90,2018-10-09 03:35:57,Tim van der Meij,"Merge pull request #10133 from kevinleedrum/fix-content-length

Set returnValues.suggestedLength to Content-Length if integer",True
4cf10ac79d73a52f7d04fbf42ef3eb6a90f6fba9,2018-10-07 22:56:29,Kevin Lee Drum,set returnValues.suggestedLength to Content-Length if integer,False
b2e7d0c89b76e228e49c7cee759873322a442f62,2018-10-07 19:24:50,Tim van der Meij,"Merge pull request #10139 from Snuffleupagus/issue-10135

Ensure that the `PDFDocumentLoadingTask` is rejected when ""setting up fake worker"" failed (issue 10135)",True
755c6edc5e8ce21abed278f4484ebaa717359755,2018-10-06 16:48:51,Jonas Jenwald,"Ensure that the `PDFDocumentLoadingTask` is rejected when ""setting up fake worker"" failed (issue 10135)

This should, hopefully, cover all the possible ways[1] in which ""fake workers"" are loaded. Given the different code-paths, adding unit-tests might not be that simple.
Note that in order to make this work, the various `fakeWorkerFilesLoader` functions were converted to return `Promises`.

---
[1] Unfortunately there's lots of them, for various build targets and configurations.",False
d4469da22bbdce7bce0a3a590c43fe420979549c,2018-10-06 02:11:59,Tim van der Meij,"Merge pull request #10138 from Snuffleupagus/toolbar-pageScaleValue

Ensure that `Toolbar.setPageScale` always sets the `pageScaleValue` property to a valid value",True
3c6d0a8c44c6b3e3b4cadbaaa0ec28705073a4eb,2018-10-06 02:08:38,Tim van der Meij,"Merge pull request #10136 from Snuffleupagus/toolbar-signature

Remove the unused `mainContainer` parameter from the `Toolbar` constructor",True
a4d4364f5dac062b76770bacc4e415aa5c45d527,2018-10-05 15:43:48,Jonas Jenwald,"Ensure that `Toolbar.setPageScale` always sets the `pageScaleValue` property to a valid value

Rather than having every invocation of `Toolbar._updateUIState` compute a valid `pageScaleValue`, it seems easier to simply ensure that it happens when the value is actually updated.",False
5d421964e5078476ae94eafb540759b49ff299b4,2018-10-05 13:47:37,Jonas Jenwald,"Remove the unused `mainContainer` parameter from the `Toolbar` constructor

Looking at the history of this code, this parameter has never been used.
I'm guessing that most likely the code in `web/toolbar.js` began life as a copy of `web/secondary_toolbar.js`, which would probably explain why that parameter exists.",False
ff2df9c5b64a700e06694ff3375cd54c10ccedf4,2018-10-05 03:09:41,Tim van der Meij,"Merge pull request #10117 from leblanc-simon/ink-annotation-support

Add support of Ink annotation",True
5da53ee98f7d5f3410df12c74f2edcc3944a40d9,2018-10-05 02:42:50,Tim van der Meij,"Merge pull request #10128 from Snuffleupagus/find-controller-enable

Make `PDFFindController` less confusing to use, by allowing searching to start when `setDocument` is called",True
2ed3591b2240466e194a5bec494800d511460e9d,2018-10-04 13:58:50,Jonas Jenwald,"Make `PDFFindController` less confusing to use, by allowing searching to start when `setDocument` is called

*This patch is based on something that I noticed while working on PR 10126.*

The recent re-factoring of `PDFFindController` brought many improvements, among those the fact that access to `BaseViewer` is no longer required. However, with these changes there's one thing which now strikes me as not particularly user-friendly[1]: The fact that in order for searching to actually work, `PDFFindController.setDocument` must be called *and* a 'pagesinit' event must be dispatched (from somewhere).

For all other viewer components, calling the `setDocument` method[2] is enough in order for the component to actually be usable.
The `PDFFindController` thus stands out quite a bit, and it also becomes difficult to work with in any sort of custom implementation. For example: Imagine someone trying to use `PDFFindController` separately from the viewer[3], which *should* now be relatively simple given the re-factoring, and thus having to (somehow) figure out that they'll also need to manually dispatch a 'pagesinit' event for searching to work.

Note that the above even affects the unit-tests, where an out-of-place 'pagesinit' event is being used.
To attempt to address these problems, I'm thus suggesting that *only* `setDocument` should be used to indicate that searching may start. For the default viewer and/or the viewer components, `BaseViewer.setDocument` will now call `PDFFindController.setDocument` when the document is ready, thus requiring no outside configuration anymore[4]. For custom implementation, and the unit-tests, it's now as simple as just calling `PDFFindController.setDocument` to allow searching to start.

---
[1] I should have caught this during review of PR 10099, but unfortunately it's sometimes not until you actually work with the code in question that things like these become clear.

[2] Assuming, obviously, that the viewer component in question actually implements such a method :-)

[3] There's even a very recent issue, filed by someone trying to do just that.

[4] Short of providing a `PDFFindController` instance when creating a `BaseViewer` instance, of course.",False
8411a7da28169f41541be9d30723bda1412ee8c8,2018-10-04 03:39:26,Tim van der Meij,"Merge pull request #10126 from Snuffleupagus/find-fixes

[Regression] Restore the ability to start searching before a document has loaded, and ignore searches for previously opened documents (PR 10099 follow-up)",True
6be4921eaf5b1c5a51fa8f6aead8824ca9e632f9,2018-10-03 14:17:14,Jonas Jenwald,"Make the clearing of find highlights, when closing the findbar, asynchronous

Since searching itself is an asynchronous operation, removal of highlights needs to be asynchronous too since otherwise there's a risk that the events happen in the wrong order and find highlights thus remain visible.

Also, this patch will now ensure that only 'findbarclose' events for the *current* document is handled since other ones doesn't really matter. Note in particular that when no document is loaded text-layers are, obviously, not present and subsequently it's unnecessary to attempt to hide non-existent find highlights.",False
236871c68b1330be9a62ae1534f7a53d9efe2f0e,2018-10-03 14:17:07,Jonas Jenwald,"[Regression] Restore the ability to start searching before a document has loaded, and ignore searches for previously opened documents (PR 10099 follow-up)

For many years it's been possible to enter a search term into the findbar(s) before the document has finised loading, such that searching starts immediately once it has loaded.
PR 10099 accidentally broke that, which I unfortunately missed during reviewing.

Since searching is asynchronous you cannot directly check in `executeCommand` if the document is loaded/current, but need to wait until searching is actually enabled first.

Furthermore this patch also ensures that the `_findTimeout` is always correctly cleared given that it adds further asynchronous behaviour to searching, since you obviously only want to deal with searches relevant to the current document.",False
b5806735d8b2b4ebbdd83248b07f9ed89ecdc2af,2018-10-03 03:58:49,Simon Leblanc,Add support of Ink annotation,False
1cfb723dd495ac094d2c211602ce5326f9995a50,2018-10-03 03:00:26,Tim van der Meij,"Merge pull request #10123 from Snuffleupagus/viewer-component-signatures

Attempt to simplify the `PDFFindBar` and `PDFSidebar` constructors",True
138324502ce66bdd8a28b32b9b1fa1705894f3ca,2018-10-03 02:55:22,Tim van der Meij,"Merge pull request #10119 from Snuffleupagus/rm-onFileAttachmentAnnotation

Attempt to simplify the `fileattachmentannotation` event dispatching",True
8eda8c27f8d14c456958721aa7eac72e1e7c0d6d,2018-10-02 16:44:11,Jonas Jenwald,"Attempt to simplify the signature of the `PDFSidebar` constructor, by moving the `eventBus` parameter from the `options` object and removing the `PDFOutlineViewer` dependency

This is similar to the format used by a number of other viewer components, and should simplify the `PDFSidebar` initialization slightly.
Furthermore, by using the `eventBus` it's no longer necessary for `PDFSidebar` to have a direct dependency on `PDFOutlineViewer`.

There's still room for improvement here, but this patch is at least a start (since it's not clear to me how best to handle the viewers).",False
3f3ddaf541020b4d5cae27796b98d2a9cf8feb4a,2018-10-02 16:27:07,Jonas Jenwald,"Attempt to simplify the signature of the `PDFFindBar` constructor, by moving the `eventBus` parameter from the `options` object

This is similar to the format used by a number of other viewer components, and should simplify the `PDFFindBar` initialization slightly.",False
25446dbd8d0fa0afdd4789965c16335602d825bf,2018-10-02 02:14:47,Brendan Dahl,"Merge pull request #9982 from Snuffleupagus/mozcentral-FontLoadingAPI

Use the Font Loading API in `MOZCENTRAL` builds, and `GENERIC` builds for Firefox version 63 and above (issue 9945, bug 1088663)",True
d60ce998f1d37e431e6afd2a269ef9142f82fa84,2018-10-01 18:39:08,Jonas Jenwald,"Attempt to simplify the `fileattachmentannotation` event dispatching

This attempts to reduced the level of indirection, and the amount of code, when dispatching `fileattachmentannotation` events, by removing the `PDFLinkService.onFileAttachmentAnnotation` method and just accessing `PDFLinkService.eventBus` directly in the `FileAttachmentAnnotationElement` constructor.
Given that other properties, such as `externalLinkTarget`/`externalLinkRel`, are already being accessed directly this pattern seems fine here as well.",False
ec10cae5b653b5c11530eaabd79fe39b4bb2e91f,2018-09-30 22:06:13,Tim van der Meij,"Merge pull request #10099 from timvandermeij/find-controller

[api-major] Rework the find controller for unit testing",True
1b402996cfa23d33177827684e1744bd97706522,2018-09-30 22:02:34,Tim van der Meij,"Implement a basic unit test for the find controller

This commit shows that we can now unit test the find controller and
that executing regular queries works. Note that this is only a first
step and not a complete suite of unit tests for all possible options
of the find controller.

While writing this unit test, I found two smaller issues that I
addressed directly. The first one is that in the previous find
controller refactoring I forgot to rename some occurrences of a now
private member variable. Fortunately this did not cause any bugs since
we did have a public getter and the fetched value may be changed by
reference, but it's nevertheless good to fix. The second issue is that
some entries in the `test/unit/clitests.json` file were not correct,
resulting in these tests not being executed on e.g., Travis CI.",False
f79fb8886433b484265735ca31b3489b23d8397f,2018-09-30 20:29:58,Tim van der Meij,"Remove the find controller setter in `web/base_viewer.js`

With `PDFFindController` instances no longer (directly) depending on
`BaseViewer` instances, we can pass a single `findController` when
initializing a viewer, similar to other components.",False
38ff79186a3330666ff712f10d25e8f45cb876a0,2018-09-30 20:29:57,Tim van der Meij,"Replace callbacks for updating the UI with dispatching events on the event bus

This makes it more similar to how other components update the viewer UI
and avoids the need to have extra member variables and checks.",False
e0c811f2ede8183b482b94023a7b895d04494892,2018-09-30 20:29:46,Tim van der Meij,"Use the link service for getting and setting page information

This removes the dependency on a `PDFViewer` instance from the find
controller, which makes it more similar to other components and makes it
easier to unit test with a mock link service.

Finally, we remove the search capabilities from the SVG example since it
doesn't work there because there is no separate text layer.",False
e293c12afcf3a9a55669b6bf095d657e7780ba16,2018-09-30 20:27:40,Tim van der Meij,"Implement the `setDocument` method for the find controller

Now it follows the same pattern as e.g., the document properties
component, which allows us to have one instance of the find controller
and set a new document to search upon switching documents.

Moreover, this allows us to get rid of the dependency on `pdfViewer` in
order to fetch the text content for a page. This is working towards
getting rid of the `pdfViewer` dependency upon initializing the
component entirely in future commits.

Finally, we make the `reset` method private since it's not supposed to
be used from the outside anymore now that `setDocument` takes care of
this, similar to other components.",False
b14c1fbc28e432bdb5c3387e2105360174121274,2018-09-30 20:27:18,Tim van der Meij,"Use the `updatetextlayermatches` event for highlighting matches on a page

This makes use of the event bus instead of requiring the PDF viewer
instance to get the page view for a page and calling `updateMatches` on
it.",False
7aca53b1a4f79dadcb551b5fb5eabb4eda886a1e,2018-09-30 20:25:30,Tim van der Meij,"Remove the find bar's dependency on the find controller

Pull request #10100 removed the last usage of the find controller from
the find bar, so we can drop the dependency now.",False
ba172c7d0312d22ac24038404ed74efd8856366c,2018-09-30 19:24:50,Tim van der Meij,"Merge pull request #10116 from timvandermeij/updates

Update packages and translations",True
a17aa16ba0de88ccbd4c3589da49e1e650006d5f,2018-09-30 19:20:12,Tim van der Meij,Update translations,False
b187480b3f9828863f7c823c3373a48f4ac46e14,2018-09-30 19:15:10,Tim van der Meij,Update packages,False
d0620ec894eabf9a4927cab4c0dde1042a818a38,2018-09-30 19:05:00,Tim van der Meij,"Merge pull request #10100 from Snuffleupagus/findbarclose

Clear all find highlights when the findbar is closed (issue 7468)",True
8d4c79c99cd29ae381238e29b0cefe746c0ccaf8,2018-09-30 16:59:08,Tim van der Meij,"Merge pull request #10114 from Snuffleupagus/setDocument-optional-url

Update `{PDFLinkService, PDFDocumentProperties}.setDocument` to make the ""url"" parameter optional",True
1c814e208eb00eb9511e8b29dbe9f09ac5c4cc1b,2018-09-30 15:58:59,Jonas Jenwald,Prevent `getPDFFileNameFromURL` from breaking if the `url` parameter is not a string,False
6da78bcc3f9332306ccaf5a4762ecc66541e9301,2018-09-30 15:58:56,Jonas Jenwald,"Update `{PDFLinkService, PDFDocumentProperties}.setDocument` to make the ""url"" parameter optional

This way the resetting of `PDFLinkService`/`PDFDocumentProperties` instances, as is done in `PDFViewerApplication.close`, only requires passing in *one* `null` argument instead of two.",False
d6f4d2ff33a81a1cb952aa9eadcfa654996f1519,2018-09-29 19:35:00,Jonas Jenwald,"Add a `Symbol` polyfill, using core-js, to allow using `for...of` loops

https://github.com/zloirock/core-js#ecmascript-symbol",False
435ec6a0d5b5d725eadc47191648eff3c3897c20,2018-09-29 19:35:00,Jonas Jenwald,"Use the Font Loading API in `MOZCENTRAL` builds, and `GENERIC` builds for Firefox version 63 and above (issue 9945)",False
05b021bcce546bc8cad7e72000c236b14ccce5ec,2018-09-29 19:35:00,Jonas Jenwald,"Refactor the `FontLoader` into proper, build-specific, ES6 classes

Also changes `var` to `let`/`const` in code already touched in the patch, and makes use of template strings in a few spots.",False
45d665197665013e6203469d574dedcb8353625d,2018-09-29 19:27:04,Jonas Jenwald,"Refactor unused `Date.now()` calls in `FontLoader.queueLoadingCallback`

The `started` timestamp is completely usused, and the `end` timestamp is currently[1] being used essentially like a boolean value.
Hence this code can be simplified to use an actual boolean value instead, which avoids potentially hundreds (or even thousands) of unnecessary `Date.now()` calls.

---
[1] Looking briefly at the history of this code, I cannot tell if the timestamps themselves were ever used for anything (except for tracking ""boolean"" state).",False
ad3e937816144cf7cfdac6221620d8a98241db9d,2018-09-29 19:27:04,Jonas Jenwald,"Replace the `Font.loading` property with, the already existing, `Font.missingFile` property

The `Font.loading` property is only ever used *once* in the code, whereas `Font.missingFile` is more widely used. Furthermore the name `loading` feels, at least to me, slight less clear than `missingFile`. Finally, note that these two properties are the inverse of each other.",False
caf90ff6eeb902ebb93848aea8c248928157ec24,2018-09-29 19:27:04,Jonas Jenwald,"Convert `FontFaceObject` to an ES6 class

Also changes `var` to `let`/`const` in code already touched in the patch, and makes use of template strings in a few spots.",False
b40fb3814a05e7a9c489d995d46b3239e5936d29,2018-09-29 19:20:41,Tim van der Meij,"Merge pull request #10111 from Snuffleupagus/rm-substr

Replace `String.prototype.substr()` occurrences with `String.prototype.substring()`",True
842e9206c059d36b9592e1e1b214985da6b57170,2018-09-28 15:11:07,Jonas Jenwald,"Replace `String.prototype.substr()` occurrences with `String.prototype.substring()`

As outlined in https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr, which refers to the ECMA-262 specification, using the `substr` function is advised against.

Hence this PR, which replaces all remaining `substr` occurrences with `substring` instead. Please refer to https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr#Syntax respectively https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring#Syntax for the differences between the two functions.

Note that in most cases in the code-base there's only one argument passed to `substr`, and those require no other changes except replacing ""substr"" with ""substring"". For the other cases, the `substr(start, length)` calls are changed to `substring(start, start + length)` instead.",False
f29b4d1116642ae12a5e8c3418df462b1e4e0bd5,2018-09-26 13:50:45,Jonas Jenwald,"Clear all find highlights when the findbar is closed (issue 7468)

Please note that this will require a `mozilla-central` follow-up patch, in order for this to work in the built-in Firefox PDF viewer as well.",False
1eaa3b8a0862505ad00381b7726fc56e5dbf702a,2018-09-24 02:04:39,Jonas Jenwald,"Dispatch a 'pagecancelled' event, in `PDFPageView.cancelRendering`, when rendering is cancelled

Also, the patch updates `TextLayerBuilder` to use the new 'pagecancelled' event for (future) event removal purposes.",False
54d6c2436c17b6d0efc6fb8e36f36358eba1a9e6,2018-09-21 19:10:26,Tim van der Meij,"Merge pull request #10095 from timvandermeij/updates

Update packages and translations",True
3c9e25b8399933a69c41a63a535c18a0092430b0,2018-09-21 18:56:10,Tim van der Meij,Update translations,False
2c710eda3ea888b54ae3fef22c90b2fd07acd4a8,2018-09-21 18:46:30,Tim van der Meij,Update packages,False
ad6ab88fdf45fe07ae22053fab071be0a271e35a,2018-09-21 18:13:55,Tim van der Meij,"Merge pull request #10090 from Snuffleupagus/pr-10019-followup

Ensure that all event properties are included, even if no (internal) listeners are registered, when re-dispatching events to the DOM (PR 10019 follow-up)",True
39776168a263b79837058c8a1a08b192bae84788,2018-09-21 18:01:35,Jonas Jenwald,Add `EventBus` unit-tests to ensure that the (optional) argument handling works correctly,False
f317a2cb40813a5dde2942266b55559be53b868d,2018-09-21 02:42:01,Jonas Jenwald,"Ensure that the DOM event listeners are removed at the end of the relevant `EventBus` unit-tests, to prevent the tests from interfering with each other",False
250e55b0d98d0855ede51ca6245cecd559b299ed,2018-09-21 02:13:44,Jonas Jenwald,"Ensure that all event properties are included, even if no (internal) listeners are registered, when re-dispatching events to the DOM (PR 10019 follow-up)",False
0e41eb1620d68490b8de1c6b20d99d24c0711a09,2018-09-16 18:55:30,Tim van der Meij,"Merge pull request #10078 from timvandermeij/l10n-fix

Improve plural support for the matches counter",True
f711dbc0113130dbf2e580e60dc9c047d48606ce,2018-09-16 17:53:06,Tim van der Meij,Improve plural support for the matches counter,False
a85ee3616e3de6f1b3d8d3b46b79006d24512299,2018-09-16 17:40:47,Tim van der Meij,"Merge pull request #10071 from Snuffleupagus/matchesCount-FirefoxCom-forward

Enable forwarding, in `FirefoxCom`, of the matchesCount to the browser findbar (bug 1062025)",True
06b9455263753747c3a23316639b2d3d49e641a9,2018-09-16 03:15:38,Jonas Jenwald,"Hard-code the `MOZCENTRAL` build to use the `[other]` plural forms of the matcheCount strings, to prevent errors for PDF files embedded in iframe/object tags

The built-in PDF Viewer (in Firefox) cannot use the browser findbar when PDF files are embedded in e.g. iframe/object tags, and the PDF.js findbar (i.e. `PDFFindBar`) will thus be used instead in those cases.
This is slightly problematic, since the `MOZCENTRAL` version of the viewer uses a special, slimmed down, version of the `l10n.js` file that doesn't (currently) support plural forms. To prevent the matchesCounter from breaking completely in this edge-case, temporarily hard-code the plural form to use the default `[other]` version of the locale strings.",False
be7fdf148c54e1522f8e713f5db78397a0d4d74c,2018-09-16 03:15:38,Jonas Jenwald,"Further ensure that `PDFFindController._requestMatchesCount` won't return broken data (PR 10052 follow-up)

This prevents the findbar from intermittently displaying `0 of {number} matches`, which *could* theoretically happen for large and/or slow loading documents.",False
fafd8819bcac381afdd6e6d60fc9e37ccf5a70cc,2018-09-16 03:15:38,Jonas Jenwald,"Enable forwarding, in `FirefoxCom`, of the matchesCount to the browser findbar (bug 1062025)

This depends on https://bugzilla.mozilla.org/show_bug.cgi?id=1062025 landing in `mozilla-central` first, since https://searchfox.org/mozilla-central/rev/37663bb87004167184de6f2afa6b05875eb0528e/browser/extensions/pdfjs/content/PdfStreamConverter.jsm#719,740 would otherwise throw for the unknown event name.",False
ed32f6a0827dd594941706dbef2a4d76acb934c5,2018-09-16 00:08:08,Tim van der Meij,"Merge pull request #10066 from timvandermeij/find-controller

Refactor the find controller",True
d0b5aa0869ca8ee7f959a035128c5965549e4f6d,2018-09-14 02:12:13,Tim van der Meij,"Merge pull request #10070 from Snuffleupagus/matchesCount-plural

Attempt to support plural forms in the matches counter of the findbar (issue 10067)",True
ae7dcae27e565cbabf1b72028b1251e2135c6325,2018-09-14 01:40:38,Brendan Dahl,Fix abbreviation.,False
67e1e39f99fc78e4c423a4d3684275f70389c6a8,2018-09-14 01:36:01,Tim van der Meij,"Move scrolling the selected match into view from the find controller to the text layer builder

The find controller should only coordinate finding a string in the
document and should not be responsible for presenting the matches to the
user. The text layer builder already contains the logic to render the
matches in the viewer, so it should also take care of scrolling the
selected match into view.",False
ede414554e8b880be105a17d755bdec71281fa9e,2018-09-14 01:36:00,Tim van der Meij,"Change `let` to `const` where possible in the find controller

Doing so clearly indicates which variables are read-only and may not be
mutated, which helps readability and prevents subtle issues.",False
38c9f5fc24d4b2985fa01d4409db1796155d288d,2018-09-14 01:35:41,Tim van der Meij,"Mark all private members as such in the find controller

Moreover, use getters for all members that are only being read.",False
6c4157acd9861dfa466c87f13b35ac871fcfa13a,2018-09-13 17:20:51,Jonas Jenwald,"Attempt to support plural forms in the matches counter of the findbar (issue 10067)

Based on a quick look at https://github.com/fabi1cazenave/webL10n/#pluralization, it seems that supporting plural forms shouldn't be as difficult as I first thought it might be.",False
6adeabbb66b8acf63dbd4e52f56a8cedfcfe21a4,2018-09-13 02:29:56,Brendan Dahl,Add Glyph & Cog's XPDF copyright/license information.,False
29683d40a5ea1874e64703de999d72a15594dcd4,2018-09-12 18:26:42,Tim van der Meij,"Merge pull request #10063 from Snuffleupagus/JPEG-isSourcePDF-assert

Slightly improve the `isSourcePDF` parameter handling in `JpegImage` (PR 10031 follow-up)",True
51811724986a4cf8b8cab1dc44ab756af626bc08,2018-09-12 15:00:59,Jonas Jenwald,"Slightly improve the `isSourcePDF` parameter handling in `JpegImage` (PR 10031 follow-up)

Currently there's only a single spot in the code-base where `JpegImage.getData` is called, however it nonetheless seem like a good idea to ensure during tests that the `isSourcePDF` parameter is correctly set. (Especially considering that the PDF use-cases will break without it.)

Additionally, in `JpegImage._getLinearizedBlockData`, the code can be made a tiny bit more efficient by checking the value of `isSourcePDF` *first* to avoid useless checks (for the default PDF use-cases).",False
a859f0eafd01072fd79109cdffcffa05fdaf3d5e,2018-09-12 00:49:55,Tim van der Meij,"Remove unnecessary `startedTextExtraction` member variable from the find controller

The find controller already has quite a lot of state to maintain. We can
avoid keeping track of this member variable because when the find
controller is reset, so is the extract text promises array. Therefore,
we can just check if that array contains items or not to determine if
text extraction already started.

Moreover, there is no need to reset the `pageContents` array since the
`reset` method already takes care of that.",False
21d959bb82c838d8662a493f40768ae1ebd0caa2,2018-09-12 00:49:41,Tim van der Meij,"Remove unused member variable `hadMatch` from the find controller

It's only being assigned, but not read anymore.",False
9c764da8af99a2e896e151108d74a5660f5e9332,2018-09-11 20:01:02,Tim van der Meij,"Merge pull request #10061 from timvandermeij/unit-testing

Implement unit tests for the `isSameOrigin` and `createValidAbsoluteUrl` utility functions and use the `const` keyword for constants in `src/shared/util.js`",True
bf13c8a50bee52ac74cb65daa0f787a18ddbdc08,2018-09-11 19:47:45,Tim van der Meij,"Use the `const` keyword for constants in `src/shared/util.js`

Moreover, move general constants to the top of the file, i.e., those
that are not closely tied to a function in the file.",False
99de25d6ccd2392eeeba6ed7d794d47107c0ffd4,2018-09-11 19:47:45,Tim van der Meij,"Implement unit tests for the `isSameOrigin` and `createValidAbsoluteUrl` utility functions

Moreover, mark the `isValidProtocol` function as private since it's only
used in the utilities file and is not (meant to be) exported.",False
a789368b7ab1da0f85f519bba87fd0758c6884aa,2018-09-11 19:10:41,Tim van der Meij,"Merge pull request #10060 from Snuffleupagus/matchesCount-invalid

Ensure that `PDFFindController._requestMatchesCount` won't return broken data when searching starts (PR 10052 follow-up)",True
0a4c3266501cf7b2340130d6567e48ed70df3fef,2018-09-11 18:08:02,Jonas Jenwald,"Ensure that `PDFFindController._requestMatchesCount` won't return broken data when searching starts (PR 10052 follow-up)

This is an unfortunate oversight on my part, which I stumbled upon when (locally) testing the `mozilla-central` follow-up patch necessary to enable the matches counter in the built-in PDF viewer.",False
bf368f3a322c2140d1e68393c3ad08fb4078fadd,2018-09-11 03:57:55,Tim van der Meij,"Merge pull request #10056 from Snuffleupagus/matchesCount-viewer-close

[Regression] Ensure that `PDFFindBar.updateResultsCount` doesn't throw when the viewer is closed, by providing proper default values",True
11c8e33ed1337558bd34d0055a38554f905695d4,2018-09-10 19:32:44,Jonas Jenwald,"[Regression] Ensure that `PDFFindBar.updateResultsCount` doesn't throw when the viewer is closed, by providing proper default values

The error can be reproduced by opening any file in the viewer, and then running `PDFViewerApplication.close()` in the console.",False
bc5111d15209e55ab39891a0e6d9d4ef56b3513a,2018-09-10 16:31:24,Tim van der Meij,"Merge pull request #10028 from Snuffleupagus/entireWord

Add initial support for ""Whole words"" searching in the viewer",True
b4edcce29608ffb6704f6549ff122aba054287a8,2018-09-10 15:29:30,Jonas Jenwald,"Remove unused `findStatusIcon` property from `PDFFindBar` instances

The property is intended to contain a reference to a DOM element, which not only is nowhere to be found *now* but appears to never have existed in the first place.",False
6d804d657f941df0a73f5a8b5758f00f71f6d740,2018-09-10 15:29:29,Jonas Jenwald,"Add initial support for ""Whole words"" searching in the viewer

As outlined in https://bugzilla.mozilla.org/show_bug.cgi?id=1282759 the internal Firefox name for the feature is `entireWord`, hence that name is used here as well for consistency (with ""Whole words"" being limited to the UI).

Given existing limitations of the PDF.js search functionality, e.g. the existing problems of searching across ""new lines"", there's some edge-cases where ""Whole words"" searching will ignore (valid) results.
However, considering that this is a pre-existing issue related to the way that the find controller joins text-content together, that shouldn't have to block this new feature in my opionion.

*Please note:* In order to enable this feature in the `MOZCENTRAL` version, a small follow-up patch for [PdfjsChromeUtils.jsm](https://hg.mozilla.org/mozilla-central/file/tip/browser/extensions/pdfjs/content/PdfjsChromeUtils.jsm) will be required once this has landed in `mozilla-central`.",False
53c37d3b455db6870c786f103e37ca4b7967d393,2018-09-09 23:59:41,Tim van der Meij,"Merge pull request #10055 from timvandermeij/translation

Translate the new find match count strings to Dutch",True
04dfbb91fb250a04c53be163ab1956c10e11f5dd,2018-09-09 23:53:07,Tim van der Meij,Translate the new find match count strings to Dutch,False
38baaea8f49a4e83e01962a860e4d3c3af8885a5,2018-09-09 23:26:03,Tim van der Meij,"Merge pull request #10052 from Snuffleupagus/matchesCount

Display the index of the currently active search result in the matches counter of the findbar (issue 6993, bug 1062025)",True
3cf4866c99717bf86cb7f0d8ee07d6d220e924d0,2018-09-09 21:34:45,Tim van der Meij,"Merge pull request #10054 from timvandermeij/updates

Update translations/packages and use HTTPS for links in `README.md`",True
6d85c7e41ae2978664e4840c75d59f3a2d58cafa,2018-09-09 21:27:12,Tim van der Meij,Use HTTPS for links in `README.md`,False
4471353b97cf894421cc342f3ad754137b618dd6,2018-09-09 21:24:24,Tim van der Meij,Update packages,False
97aaf06fde59bbe06368d10692e59ef3bb888d72,2018-09-09 21:18:43,Tim van der Meij,Update translations,False
9a115b41dede03b76cc4cd73319d77857a466a43,2018-09-09 21:06:04,Tim van der Meij,"Merge pull request #10034 from timvandermeij/canvas-workaround

Remove `getSinglePixelWidth` workaround",True
c751757470b70a7fa858bdbc47ab6a92db7b5286,2018-09-09 19:39:54,Tim van der Meij,"Merge pull request #10053 from Snuffleupagus/spaced-comment

Simplify the ""spaced-comment"" ESLint rule",True
6481fc0de56687372bd98c067103567f86779f35,2018-09-09 15:28:32,Jonas Jenwald,"Simplify the ""spaced-comment"" ESLint rule

With the Firefox addon removed from the GitHub repository, there's no longer any JavaScript code utilizing the old preprocessor.",False
c9a25648821efcbe60a7d506124e3c7f7a4dfea9,2018-09-09 01:20:22,Jonas Jenwald,"Display the index of the currently active search result in the matches counter of the findbar (issue 6993, bug 1062025)

For the `PDFFindBar` implementation, similar to the native Firefox findbar, the matches count displayed is now limited to a (hopefully) reasonable value.

*Please note:* In order to enable this feature in the `MOZCENTRAL` version, a follow-up patch will be required once this has landed in `mozilla-central`.",False
510f1c84d26c9b4ab6541d7a006af7c8452ba0c0,2018-09-09 01:10:20,Tim van der Meij,"Merge pull request #9995 from Snuffleupagus/async-web

Refactor code in the `web/` folder to use `async`/`await`",True
66422eb83e2520fc3f99baae172471b45eaa68d0,2018-09-08 21:21:04,Tim van der Meij,"Merge pull request #9340 from brendandahl/private-use

Map all glyphs to the private use area and duplicate the first glyph.",True
1fe35b9ca1524e5726a0f31b334160379972acb2,2018-09-08 03:18:48,Tim van der Meij,"Merge pull request #10049 from morille/patch-1

Fix font-string variable name typo",True
8671081001ad63973ba87aaae8f9694196bdba3f,2018-09-07 13:25:45,Romain Petit,"Fix font-string variable name typo

The font-string rebuild condition is always satisfied because the concerned variables are never set.",False
d6927376708ff7b3157d0c840d15dcda339129c8,2018-09-06 04:12:10,Tim van der Meij,"Merge pull request #10041 from Snuffleupagus/revert-9986-issue-9984

Revert ""Attempt to combine separate beginText/endText sequences in `getTextContent` (issue 9984)""",True
b76cf665ecbe5195557df3f7441b1d6db94fb0c9,2018-09-06 02:34:54,Brendan Dahl,"Map all glyphs to the private use area and duplicate the first glyph.

There have been lots of problems with trying to map glyphs to their unicode
values. It's more reliable to just use the private use areas so the browser's
font renderer doesn't mess with the glyphs.

Using the private use area for all glyphs did highlight other issues that this
patch also had to fix:

  * small private use area - Previously, only the BMP private use area was used
    which can't map many glyphs. Now, the (much bigger) PUP 16 area can also be
    used.

  * glyph zero not shown - Browsers will not use the glyph from a font if it is
    glyph id = 0. This issue was less prevalent when we mapped to unicode values
    since the fallback font would be used. However, when using the private use
    area, the glyph would not be drawn at all. This is illustrated in one of the
    current test cases (issue #8234) where there's an ""ä"" glyph at position
    zero. The PDF looked like it rendered correctly, but it was actually not
    using the glyph from the font. To properly show the first glyph it is always
    duplicated and appended to the glyphs and the maps are adjusted.

  * supplementary characters - The private use area PUP 16 is 4 bytes, so
    String.fromCodePoint must be used where we previously used
    String.fromCharCode. This is actually an issue that should have been fixed
    regardless of this patch.

  * charset - Freetype fails to load fonts when the charset size doesn't match
    number of glyphs in the font. We now write out a fake charset with the
    correct length. This also brought up the issue that glyphs with seac/endchar
    should only ever write a standard charset, but we now write a custom one.
    To get around this the seac analysis is permanently enabled so those glyphs
    are instead always drawn as two glyphs.",False
e5a6d892b45474f14f22c159b9c653ac532845db,2018-09-05 21:31:33,Jonas Jenwald,"Revert ""Attempt to combine separate beginText/endText sequences in `getTextContent` (issue 9984)""",False
1bdfdd07b822827856bff4cea9f779010c510b7f,2018-09-03 13:22:36,Jonas Jenwald,Utilize `async`/`await` in `PDFViewerApplication.load` to reduce the number of Promises and temporary variables necessary when setting the initial document location,False
3eba7ea2673828865081d0f188477351803235f5,2018-09-03 13:22:36,Jonas Jenwald,"Refactor a number of methods in `PDFViewerApplication` to be `async` rather than manually returning `Promise`s

*Ignoring whitespace changes is probably necessary, in order for the diff to be readable.*",False
a60963f88224235ff6e8847a019dfd93da203738,2018-09-03 13:22:36,Jonas Jenwald,Refactor the `ViewHistory` to utilize `async` methods rather than manually returning `Promise`s,False
233b3274bf7973aa06a674dddef585f4313f3742,2018-09-03 13:22:36,Jonas Jenwald,Refactor the `Preferences` classes to utilize `async` methods rather than manually returning `Promise`s,False
64e70fc16ffb102524215d02b5b3ebabddbacc09,2018-09-03 13:22:36,Jonas Jenwald,Refactor the `OverlayManager`  to utilize `async` methods rather than manually returning `Promise`s,False
b0fa02e8456b6a27d6d3b242c4301a4e70937b17,2018-09-03 13:22:36,Jonas Jenwald,"Refactor the `IL10n` implementations to utilize `async` methods rather than manually returning `Promise`s

This changes the methods signatures of `GenericL10n`, `MozL10n`, and `NullL10n`.",False
af89ec271d3b3cc65ef12562eeb3a00cd6677fcf,2018-09-03 01:08:29,Tim van der Meij,"Merge pull request #10033 from timvandermeij/permissions-api

[api-minor] Implement a permissions API",True
e812c6e7ac400d2c589eb5acf966417cd7e2dde5,2018-09-03 00:53:09,Tim van der Meij,Use shorter code for failing a test in `test/unit/api_spec.js`,False
959ed3705b7a89ae3e618ed326ce95162eb0bd7b,2018-09-03 00:53:09,Tim van der Meij,Implement a permissions API,False
4874e9ace0b6ac4939c1198bb2fd591e55b6d45d,2018-09-03 00:36:57,Tim van der Meij,"Convert the `WorkerTransport` class, in `src/display/api.js`, to ES6 syntax",False
9c37599fd39fbb1fba94966dee86324dc0294983,2018-09-03 00:36:57,Tim van der Meij,"Convert the `PDFDocumentProxy` class, in `src/display/api.js`, to ES6 syntax

Moreover, indicate that a member are private and improve the comments to
be more consistent.",False
1a3e842dc47b9fe3d7b89988618e588ab7b81f54,2018-09-03 00:06:06,Tim van der Meij,"Remove `getSinglePixelWidth` workaround

It's no longer necessary since https://bugzilla.mozilla.org/show_bug.cgi?id=1305963 is fixed quite some time ago.

While we're here, mark the `cachedGetSinglePixelWidth` member as being
private and use ES6 syntax in the `getSinglePixelWidth` method.",False
d409c4206898718700d1875faa36ce35b36f5029,2018-09-02 18:45:26,Tim van der Meij,"Merge pull request #10031 from Snuffleupagus/JPEG-CMYK-invert

Add a new parameter to `JpegImage.getData` to indicate the source of the image data (issue 9513)",True
a096e0c6471a6a6916831ba95bcdf722b2647378,2018-09-02 18:22:21,Tim van der Meij,"Merge pull request #10032 from timvandermeij/test-link

Replace broken link for `pr8808.pdf.link`",True
b62f14f3f56a7123f15b64ad334a503d4e2c1eae,2018-09-02 18:18:26,Tim van der Meij,"Replace broken link for `pr8808.pdf.link`

The current link had an invalid certificate and was a redirect to this
new link anyway. The MD5 hash is equal.",False
663922f93fceca6ed59d7d52ef108c883073bf89,2018-09-02 17:45:22,Jonas Jenwald,"Add a new parameter to `JpegImage.getData` to indicate the source of the image data (issue 9513)

The purpose of this patch is to provide a better default behaviour when `JpegImage` is used to parse standalone JPEG images with CMYK colour spaces.
Since the issue that the patch concerns is somewhat of a special-case, the implementation utilizes the already existing decode support in an attempt to minimize the impact w.r.t. code size.

*Please note:* It's always possible for the user of `JpegImage` to control image inversion, and thus override the new behaviour, by simply passing a custom `decodeTransform` array upon initialization.",False
47bf12cbac1005f6e4940b5c51a93f0acb7d74a9,2018-09-02 16:36:28,Jonas Jenwald,"Change `JpegImage._isColorConversionNeeded` into a getter, rather than a regular function

Given how `_isColorConversionNeeded` is used, and that it always returns a boolean value, having it be a getter seems more appropriate.",False
c94df0fef341a5ef4288b290af72f2ff43c51046,2018-09-02 00:51:29,Tim van der Meij,"Merge pull request #9986 from Snuffleupagus/issue-9984

Attempt to combine separate beginText/endText sequences in `getTextContent` (issue 9984)",True
f2f2e05bb8cdf90038c4a224db1bbd7f870f8a12,2018-09-01 22:41:23,Tim van der Meij,"Merge pull request #10019 from Snuffleupagus/eventBusDispatchToDOM

Add general support for re-dispatching events, on `EventBus` instances, to the DOM",True
66bd088948092f2199a325c76e05c5de223ad8ce,2018-09-01 22:14:08,Tim van der Meij,"Merge pull request #10010 from Snuffleupagus/issue-10004

Attempt to find truncated endstream commands, in the fallback code-path, in `Parser.makeStream` (issue 10004)",True
0b1f41c5b3885a0b916a3fa29ecf7f5fb835a55a,2018-08-30 20:58:12,Jonas Jenwald,"Add general support for re-dispatching events, on `EventBus` instances, to the DOM

This patch is the first step to be able to eventually get rid of the `attachDOMEventsToEventBus` function, by allowing `EventBus` instances to simply re-dispatch most[1] events to the DOM.
Note that the re-dispatching is purposely implemented to occur *after* all registered `EventBus` listeners have been serviced, to prevent the ordering issues that necessitated the duplicated page/scale-change events.

The DOM events are currently necessary for the `mozilla-central` tests, see https://hg.mozilla.org/mozilla-central/file/tip/browser/extensions/pdfjs/test, and perhaps also for custom deployments of the PDF.js default viewer.

Once this have landed, and been successfully uplifted to `mozilla-central`, I intent to submit a patch to update the test-code to utilize the new preference. This will thus, eventually, make it possible to remove the `attachDOMEventsToEventBus` functionality.

*Please note:* I've successfully ran all `mozilla-central` tests locally, with these patches applied.

---
[1] The exception being events that originated on the `window` or `document`, since those are already globally available anyway.",False
7bc4bfcc8b7f52b14107f0a551becdf01643c5c2,2018-08-30 14:09:32,Jonas Jenwald,"Add 'documentinit'/'documentloaded' events to `PDFViewerApplication.load`

The new events follow the same naming pattern as the 'pagesinit'/'pagesloaded' events dispatched on `BaseViewer` instances, and the intention is to allow the eventual removal of 'documentload'.",False
486c84321556d9652015fe5477fd8e017fddecb1,2018-08-30 14:09:32,Jonas Jenwald,"Add `source` parameters to all remaining `EventBus.dispatch` calls that are currently missing those

This is necessary for subsequent patches, and will help avoid unnecessary event re-dispatching in cases where the event source is `window`.",False
283f2dfcc3af2e1286e5a875891584212d72ed85,2018-08-30 03:21:07,Tim van der Meij,"Merge pull request #10022 from janpe2/svg-Tr

Implement text rendering modes in SVG backend",True
27ebb41b8ff2538e8c6bdf8a17dbae610041e73c,2018-08-30 02:10:56,Tim van der Meij,"Merge pull request #10020 from Snuffleupagus/addon-prefs-no-eslint

Ensure that the built `PdfJsDefaultPreferences.jsm` file won't be affected/touched during tree-wide ESLint rule changes in `mozilla-central` (PR 9571 follow-up)",True
49cd8da7ff81ade978796e0f6104f37efab8e6b7,2018-08-30 02:01:17,Tim van der Meij,"Merge pull request #10015 from cheryly279/add-chunkname

Adding chunkname to async loaded code",True
d8aaa2f97857e5419394189dd36fec5deeb5c2d9,2018-08-29 03:16:56,Jonas Jenwald,"Update to the current year, i.e. 2018, in the bundle license headers",False
694afcd60b688a6780204eabfee91ea9567fbce5,2018-08-29 03:16:54,Jonas Jenwald,"Ensure that the built `PdfJsDefaultPreferences.jsm` file won't be affected/touched during tree-wide ESLint rule changes in `mozilla-central` (PR 9571 follow-up)

Also updates the edit warning, such that the wording is more consistent.",False
c426ea376cd65774fd1c45b78f4e3d846dd41868,2018-08-29 03:12:07,Jani Pehkonen,Implement text rendering modes in SVG backend,False
29c0ea159ddcb81884e78152e6e4a768402fc58c,2018-08-28 02:47:32,cheryly279,"Adding chunkname to async loaded code

Better name",False
95e5bad4c4ab6c99f14b2da2822375de2a7550bf,2018-08-26 15:21:11,Jonas Jenwald,"Attempt to find truncated endstream commands, in the fallback code-path, in `Parser.makeStream` (issue 10004)

Apparently there's some PDF generators, in this case the culprit is ""Nooog Pdf Library / Nooog PStoPDF v1.5"", that manage to mess up PDF creation enough that endstream[1] commands actually become truncated.

*Please note:* The solution implemented here isn't perfect, since it won't be able to cope with PDF files that contains a *mixture* of correct and truncated endstream commands.
However, considering that this particular mode of corruption *fortunately* doesn't seem very common[2], a slightly less complex solution ought to suffice for now.

Fixes 10004.

---
[1] Scanning through the PDF data to find endstream commands becomes necessary, in order to determine the stream length in cases where the `Length` entry of the (stream) dictionary is missing/incorrect.

[2] I cannot recall having seen any (previous) issues/bugs with ""Missing endstream"" errors.",False
c81cbe113c513e2e81b9eaea7761a67163320e4a,2018-08-26 15:21:09,Jonas Jenwald,"Extract the ""scanning for endstream command"" part of `Parser.makeStream` into a helper method

With this code now living in a separate method, it can be simplified slightly (e.g. by using early returns).",False
436d2efa8a89edef3a05f70592e3a70fd0c7d11e,2018-08-25 22:15:40,Tim van der Meij,"Merge pull request #10007 from Snuffleupagus/ColorSpace-class

Convert the code in `src/core/colorspace.js to use ES6 classes",True
7b7cd6dc95243acb2d57d691d2c01c286033a41b,2018-08-25 20:41:07,Tim van der Meij,"Merge pull request #9990 from timvandermeij/catalog

Convert the `Catalog` class, in `src/core/obj.js`, to ES6 syntax",True
4a0d15aa0e4d611428a69caf5e546e1994260217,2018-08-25 20:10:59,Tim van der Meij,Slightly simplify the catalog code,False
aec236f6d899d62294ac26f764d5916b3f0c3d43,2018-08-25 20:08:22,Tim van der Meij,"Convert the `Catalog` class, in `src/core/obj.js`, to ES6 syntax",False
6a4fc4552262f2e4ea6060e2a6394c3b3287c3b0,2018-08-25 19:59:42,Tim van der Meij,"Merge pull request #10008 from timvandermeij/updates

Update translations/packages and fix duplicated function name in the Esprima fixtures",True
c454868be1127c882e7be76302d49f3aee85a697,2018-08-25 19:53:20,Tim van der Meij,"Fix duplicated function name in the Esprima fixtures

This makes `gulp externaltest` work again. It looks like this wasn't
validated before, but is now after recent package updates.",False
fb8695d4812d4f3eebe77877abcf57f9a348182e,2018-08-25 19:52:24,Tim van der Meij,Update packages,False
b6d89ffa9c1f28b2c1f584c4fa8c309b551f2272,2018-08-25 19:51:27,Tim van der Meij,Update translations,False
a18290759227c894f8f97f58c8da8ce942f5a38f,2018-08-25 06:50:21,Jonas Jenwald,Replace all occurences of `var` with `let`/`const` in `src/core/colorspace.js`,False
ce9a38c536901b3f57665df05cf3f65430384144,2018-08-25 06:50:19,Jonas Jenwald,"Convert the code in `src/core/colorspace.js to use ES6 classes

Reduces the amount of boilerplate code when defining the the sub-classes.

Please note that a couple of the closures were kept, since it's not (yet) possible to include helper functions inside of `class`es.",False
32d02c511c7a4f2974490cd700e5f8f7d552ad27,2018-08-25 02:57:57,Tim van der Meij,"Merge pull request #10000 from Snuffleupagus/rm-ColorSpace-defaultColor

Remove the unused `defaultColor` property on `ColorSpace` instances",True
45b7b861b8417d640387c66948b5dd9ac3c3a536,2018-08-23 14:46:52,Jonas Jenwald,"Remove the unused `defaultColor` property on `ColorSpace` instances

This property is not only completely unused now, it never actually appears to have been used. Even though the memory savings, from not initializing these extra typed arrays, won't be significant in the grand scheme of things it still seems completely unnecessary to keep allocating this data.

As far as I can tell, the main reason for the existence of `defaultColor` seem to be for documentation purposes. Hence the code is changed into comments instead, to keep the information around (but without the unnecessary allocations).",False
20cd1b354b6cad6c040a507d962175d684721d5f,2018-08-21 05:58:24,Brendan Dahl,"Merge pull request #9977 from Snuffleupagus/async-src

Add support for `async`/`await` using Babel",True
19e9a2bf347e495f62e0f2e194ebc4abfa100dd9,2018-08-21 03:15:22,Tim van der Meij,"Merge pull request #9991 from Snuffleupagus/rm-deprecated-scroll-spread

Remove the deprecated ways, in `BaseViewer`, of setting the Scroll/Spread modes (PR 9858 follow-up)",True
d7f6f4f0514c9975d03c194bb16bdbdfdd3b2d7e,2018-08-20 19:31:31,Jonas Jenwald,Remove left-over `this.enhanceTextSelection` property from the `BaseViewer` constructor (PR 9479 follow-up),False
0b32dfea8648bc84a6380186fe271c50b51e8f35,2018-08-20 17:48:16,Jonas Jenwald,"Use ES6 features, rather than a temporary variable, when swapping padding values in `BaseViewer._setScale`",False
eef70c1eae7acdc6f620c847d89f3c53e7b96d73,2018-08-20 17:41:47,Jonas Jenwald,"Remove the deprecated ways, in `BaseViewer`, of setting the Scroll/Spread modes (PR 9858 follow-up)

Considering that a number of `[api-minor]` changes have landed since PR 9858, removing this code ought to be OK now (the less time these methods remain exposed, the better); implements https://github.com/mozilla/pdf.js/pull/9858#issuecomment-401730065.",False
099ed0885239f070f7c7e1d703b57cc64c3f634d,2018-08-19 20:24:11,Jonas Jenwald,"Add support for `async`/`await` using Babel

For proof-of-concept, this patch converts a couple of `Promise` returning methods to use `async` instead.
Please note that the `generic` build, based on this patch, has been successfully testing in IE11 (i.e. the viewer loads and nothing is obviously broken).

Being able to use modern JavaScript features like `async`/`await` is a huge plus, but there's one (obvious) side-effect: The size of the built files will increase slightly (unless `SKIP_BABEL == true`). That's unavoidable, but seems like a small price to pay in the grand scheme of things.

Finally, note that the `chromium` build target was changed to no longer skip Babel translation, since the Chrome extension still supports version `49` of the browser (where native `async` support isn't available).",False
4ea663aa8a23f7e77108223b1698b3380b5211d7,2018-08-19 20:13:36,Tim van der Meij,"Merge pull request #9987 from Snuffleupagus/rm-createBlob

[api-minor] Remove the obsolete `createBlob` helper function",True
46ae238cf1b2acf328b29d3354c6e6fdf1a473d4,2018-08-19 20:03:19,Tim van der Meij,"Merge pull request #9989 from timvandermeij/updates

Update translations and packages",True
d43c8bafca26c1712bae8cc141e26b22b7032cd6,2018-08-19 19:47:23,Tim van der Meij,Update packages,False
8cae41d25de5cc907c3e5e0a1103f7b24a881066,2018-08-19 19:44:30,Tim van der Meij,Update translations,False
88e87ce240676d4be4ab52f6d9ed567a1827d5fa,2018-08-19 19:34:56,Tim van der Meij,"Merge pull request #9988 from Snuffleupagus/rm-mainXRefEntriesOffset

Remove the unused `PDFDocument.mainXRefEntriesOffset` method",True
75923ea515fc917892f6899611a3e12bee3157a8,2018-08-19 17:38:39,Jonas Jenwald,"Remove the unused `PDFDocument.mainXRefEntriesOffset` method

Not only is this method completely unused *now*, looking through the history of the code it never appears to have been used for anything either.
Years ago `mainXRefEntriesOffset` was included when creating `XRef` instances, however it wasn't actually used for anything (the parameter was never checked, nor assigned to a property on `XRef`).

If this method ever becomes useful (again) it's easy enough to restore it thanks to version control, but including dead code in the builds just seems wasteful.",False
50a47be190f7a8674652b0b52e19c5b5efec4515,2018-08-19 17:07:19,Jonas Jenwald,"[api-minor] Remove the obsolete `createBlob` helper function

At this point in time, all supported browsers have native support for `Blob`; please see https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob#Browser_compatibility.
Furthermore, note how the helper function was throwing an error if `Blob` isn't available anyway.",False
497b765ede0f843dc14837ec697f9d616e31ebc2,2018-08-18 17:15:32,Jonas Jenwald,"Attempt to combine separate beginText/endText sequences in `getTextContent` (issue 9984)

Please note that while this *improves* issue 9984 slightly (and likely others too), it's not a complete solution.
The remaining issues are related to the, more general, problems with the existing heuristics related to attempting to combine separate text items.",False
160ca551633cd7901ee68ae6ef748ec7d6ec0aed,2018-08-17 02:55:31,Tim van der Meij,"Merge pull request #9980 from Snuffleupagus/paintInline-Uint8ClampedArray

Ensure that `Uint8ClampedArray` is used for image data transfered by `getTransfers` (PR 9802 follow-up)",True
bc89edb8f04e2e7f55909777ab103cbeb23cd0f6,2018-08-16 13:59:44,Jonas Jenwald,"Ensure that `Uint8ClampedArray` is used for image data transfered by `getTransfers` (PR 9802 follow-up)

One of the `QueueOptimizer` cases wasn't updated to use `Uint8ClampedArray`s, which leads to inconsistent image data on the API side (but no actual rendering bugs, as far as I can tell).
To prevent future errors, a non-production/test-only `assert` was added to ensure that the relevant image data only uses `Uint8ClampedArray`s.",False
1268aea2b62f6cdedc63c639c332fa2d3bc5af7a,2018-08-12 19:21:58,Tim van der Meij,"Merge pull request #9975 from Snuffleupagus/getDestination-refactor

Re-factor `destinations`/`getDestination` to reduce unnecessary duplication, and reject non-string inputs",True
af19ed6ee9b1d875fb2df08f92582f12861a5429,2018-08-12 00:09:50,Tim van der Meij,"Merge pull request #9822 from timvandermeij/annotations

[api-minor] Refactor the annotation code to be asynchronous",True
bbc769cf81a0fe6fa536c2eae8d46dc4fbafea94,2018-08-11 22:30:29,Tim van der Meij,Convert `test/unit/annotation_spec.js` to ES6 syntax,False
3741becb9b876f009952f4c9b2e09efdbeed0cf8,2018-08-11 22:30:29,dmitryskey,"[api-minor] Refactor the annotation code to be asynchronous

This commit is the first step towards implementing parsing for the
appearance streams of annotations.

Co-authored-by: Jonas Jenwald <jonas.jenwald@gmail.com>
Co-authored-by: Tim van der Meij <timvandermeij@gmail.com>",False
1179584fd63a41747269bf32e93ae418f632bf22,2018-08-11 19:36:35,Jonas Jenwald,"Reject `getDestination`, in the API, for non-string inputs

Note how e.g. the `getPage` method does basic validation of the input.",False
b74c813353f53cc43aca6d1ee039f157c5a1d523,2018-08-11 19:34:58,Jonas Jenwald,"Re-factor `destinations`/`getDestination`, in the `Catalog`, to reduce unnecessary duplication

Currently, these two methods contain the same boilerplate code for getting the /Dests data.",False
309b6f820e5250e6290f1fb986c7c92f7a1431cd,2018-08-08 20:40:08,Brendan Dahl,"Merge pull request #9968 from Snuffleupagus/getFontFileType-MMType1

Tweak the MMType1 font detection in `getFontFileType` to improve font telemetry (PR 9961 follow-up)",True
06d1ff5af4b640ddff28c6fe4701f900e70b83ab,2018-08-08 15:48:37,Jonas Jenwald,"Tweak the MMType1 font detection in `getFontFileType` to improve font telemetry (PR 9961 follow-up)

Please note that this patch does *not* affect rendering in any way, however it's relevant for font telemetry[1].

According to the specification, see https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#G8.1904956, Type1C is a valid subtype for *both* Type1 and MMType1 fonts.

---
[1] Refer to the font telemetry results in https://telemetry.mozilla.org/new-pipeline/dist.html#!cumulative=0&end_date=2018-06-25&keys=__none__!__none__!__none__&max_channel_version=nightly%252F62&measure=PDF_VIEWER_FONT_TYPES&min_channel_version=nightly%252F59&processType=*&product=Firefox&sanitize=1&sort_keys=submissions&start_date=2018-05-07&table=0&trim=1&use_submission_date=0

See also https://github.com/mozilla/pdf.js/wiki/Enumeration-Assignments-for-the-Telemetry-Histograms#pdf_viewer_font_types for help with interpreting the data.",False
13b98746d90937c4aedf9c736dd36d1311121983,2018-08-07 03:12:24,Tim van der Meij,"Merge pull request #9964 from Snuffleupagus/node-MissingPDFException

Attempt to throw `MissingPDFException` when applicable in `node_stream.js` (issue 9791)",True
f78efd883eb768090d69d712e195dc44b4388fdd,2018-08-06 13:30:03,Jonas Jenwald,Attempt to throw `MissingPDFException` when applicable in `node_stream.js` (issue 9791),False
c8ee63319d0b0f1c04d7bfc23b846e5322ee34f7,2018-08-06 01:05:22,Tim van der Meij,"Merge pull request #9965 from timvandermeij/updates

Update translations and packages",True
f6eaa99cb2b99ef7f9240be929df352720b136c4,2018-08-06 00:51:46,Tim van der Meij,"Reword test reporter message

The font tests use Jasmine too, so while they are technically unit
tests, it's a bit confusing to see `Started unit tests` when the font
tests are run on the bots.",False
0a2ec871b6aedcf8ea4393b00816996dc56f51d4,2018-08-06 00:50:37,Tim van der Meij,Update packages,False
fa40c068afeea5b1c7a83a6fba626f7925a5686a,2018-08-06 00:45:58,Tim van der Meij,Update translations,False
4111871ac574d0f8213375f69b758b72433e9031,2018-08-05 23:28:48,Tim van der Meij,"Merge pull request #9958 from brendandahl/always-fallback

Always fallback to system font on font failure.",True
eec7e185d9fdc482f3daa86765faa5b6918c5337,2018-08-05 21:00:10,Tim van der Meij,"Merge pull request #9961 from Snuffleupagus/getFontFileType

Parse the font file to determine the correct type/subtype, rather than relying on the (often incorrect) data in the font dictionary",True
27e8a2f6fe91860cb7be443974198ad78f16d603,2018-08-05 20:23:37,Tim van der Meij,"Merge pull request #9959 from brendandahl/test-util

Utility script to add a reference test.",True
b65d0450f52b43ca07537353d765cd906a03b612,2018-08-05 20:14:12,Tim van der Meij,"Merge pull request #9960 from brendandahl/strict-verify

Fail when MD5 of test files fails on bots.",True
3177f6aa55b71d93e73a214ed10312018c971895,2018-08-05 14:43:16,Jonas Jenwald,"Parse the font file to determine the correct type/subtype, rather than relying on the (often incorrect) data in the font dictionary

The current font type/subtype detection code is quite inconsistent/unwieldy. In some cases it will simply assume that the font dictionary is correct, in others it will somewhat ""arbitrarily"" check the actual font file (more of these cases have been added over the years to fix specific bugs).

As is evident from e.g. issue 9949, the font type/subtype detection code is continuing to cause issues. In an attempt to get rid of these hacks once and for all, this patch instead re-factors the type/subtype detection to *always* parse the font file.

Please note that, as far as I can tell, we still appear to need to rely on the composite font detection based on the font dictionary. However, even if the composite/non-composite detection would get it wrong, that shouldn't really matter too much given that there's basically only two different code-paths (for ""TrueType-like"" vs ""Type1-like"" fonts).",False
9bbca0457994b913808dfb639f19eab8a2f2542a,2018-08-05 14:43:14,Jonas Jenwald,"Add a (basic) `isCFFFile` helper function to detect CFF font files

Compared to most other font formats, the CFF doesn't have a constant header which makes is slightly more difficult to detect such font files.

Please refer to the Compact Font Format specification: https://www.adobe.com/content/dam/acom/en/devnet/font/pdfs/5176.CFF.pdf#G3.32094",False
f4db38aadfd3a4f13cb72736de28acfaa15d648b,2018-08-05 14:03:56,Jonas Jenwald,"Update the TrueType font file detection to also recognize the Mac specific header 'true'

Please refer to the TrueType specification: https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6.html#ScalerTypeNote",False
482ea2af32fceef8ec5810ad300cedfd42128ae5,2018-08-04 06:18:47,Brendan Dahl,Fail when MD5 of test files fails on bots.,False
8b3ed473c19bcb8e71f1b16882b45d61117e8788,2018-08-04 05:54:24,Brendan Dahl,Utility script to add a reference test.,False
5f67a6a237766caab4035c9d866ef7913f4a7204,2018-08-04 05:19:22,Brendan Dahl,"Always fallback to system font on font failure.

The font in the PDF is marked as a CIDFontType0, but the font file is
actually a true type font. To fully address this issue we should really
peek into the font file and try to determine what it is. However, this
is the first case of this issue, so I think this solution is acceptable for
now.",False
444976bcd550a868074c9c6ee3a7160ca693f727,2018-08-04 03:49:02,Tim van der Meij,"Merge pull request #9956 from brendandahl/allow-zero-progress

Allow loaded progress of 0 in unit tests.",True
f19ee127a31e794c558168025fc1cf027f1312e9,2018-08-04 03:13:23,Tim van der Meij,"Merge pull request #9874 from boundlesshq/master

[api-minor] Include export value for checkboxes",True
ee9a5c1269463131f1d1b75527dd6f1abdd5e886,2018-08-04 02:51:14,Tim van der Meij,"Merge pull request #9954 from Snuffleupagus/rm-PDFImage-Filter-warn

Stop warning for non-Name /Filter entries in the `PDFImage` constructor (PR 9897 follow-up)",True
d762567bcf765f2931322d90c99360cdb3c86751,2018-08-03 23:01:46,Brendan Dahl,Allow loaded progress of 0 in unit tests.,False
a504befc7642d6d03659a221375a174832c5d8d3,2018-08-03 13:53:08,Jonas Jenwald,"Stop warning for non-Name /Filter entries in the `PDFImage` constructor (PR 9897 follow-up)

Fixes a stupid oversight on my part, since /Filter may (obviously) contain an Array, which resulted in unnecessary console warning spam in perfectly valid PDF files.
Note that it still makes sense to check that /Filter is actually a Name, before attempting to access its `name` property, but the warning should definitely be removed.",False
8a4be246455f80b2fc123f5cdcb9518d65b30a1b,2018-08-03 03:02:07,Tim van der Meij,"Merge pull request #9948 from Snuffleupagus/url-polyfill-unit-tests

Add (basic) unit-tests for the non-global `URL` constructor (PR 9868 follow-up)",True
e5e96e434fd634bb5e2799fea7d908d933bcbba3,2018-08-02 23:54:34,Brendan Dahl,"Merge pull request #9946 from brianholle/CalRGB_Conversion_Fix

Removed Extraneous Matrix Check in CalRGB Conversion",True
2a665ebad4979c2caf09969fa6999d99ef903101,2018-08-02 22:46:42,Brian,Removed Extraneous Matrix Check in CalRGB Conversion,False
f8388710e6b14321392948cbcb0bddddf6fd0440,2018-08-02 14:02:06,Jonas Jenwald,"Add (basic) unit-tests for the non-global `URL` constructor (PR 9868 follow-up)

This should really have been included in PR 9868, since it will help ensure that the `URL` constructor is correctly imported/exported by `src/shared/util.js`.",False
716acf63d489bad06c9453f81f155546e4d77912,2018-08-02 03:41:18,Tim van der Meij,"Merge pull request #9938 from Snuffleupagus/issue-9915

Ensure that Type0, i.e. composite, OpenType fonts with `CFF ` tables are *not* treated as CFF fonts if their glyph mapping is non-default (issue 9915)",True
20fddef5ba6c6795139704d171ed21e6c797d5fa,2018-08-02 03:33:23,Rob Wu,"Merge pull request #9897 from Snuffleupagus/issue-9650

Prefer the Width/Height of the image data, rather than the image dictionary, for JPEG 2000 images (issue 9650)",True
3ce420131f174548e648cd49bc9d59b90afbf22e,2018-08-01 20:12:26,Jonas Jenwald,"Prefer the Width/Height of the image data, rather than the image dictionary, for JPEG 2000 images (issue 9650)

According to the PDF specification, see https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#page=45
> When using the JPXDecode filter with image XObjects, the following changes to and constraints on some entries in the image dictionary shall apply (see 8.9.5, ""Image Dictionaries"" for details on these entries):
>
>  - Width and Height shall match the corresponding width and height values in the JPEG2000 data.
>
>  - . . .

Hence it seems reasonable to use the Width/Height of the image data *itself*, rather than the image dictionary when there's a mismatch. Given that JPEG 2000 images are already being parsed, in order to obtain basic parameters, the actual Width/Height is readily available in the `PDFImage` constructor.",False
17f65908aee7a2e581b2cfd5d7766454e9b9fc1d,2018-08-01 20:11:15,Jonas Jenwald,"Add more validation of the /Filter entry, in image dictionaries, to the `PDFImage` constructor

Given that the code is currently assuming that the /Filter entry is a `Name`, it cannot hurt to actually ensure that's the case.

Also fixes an error message, for JPEG 2000 images with unsupported ColorSpaces, since `this.numComps` hasn't been initialized when it's accessed during the `throw new Error()` invocation.",False
690bcc8c8a2fc5ed789ec06320226d1539e1bc96,2018-07-30 02:36:15,Jonas Jenwald,"Add a reduced, `eq`, test-case for issue 9915",False
17eac2d48a9597f96d4e3d36d4d075e465c5b298,2018-07-30 02:36:15,Jonas Jenwald,"Ensure that Type0, i.e. composite, OpenType fonts with `CFF ` tables are *not* treated as CFF fonts if their glyph mapping is non-default (issue 9915)

This particular code-path has been the source of *numerous* regressions to date, so hopefully this patch won't cause any more of those.

Fixes 9915.",False
cfdb597e4a2274c9882a2192a4dcf9601fbb4f7b,2018-07-30 02:36:15,Jonas Jenwald,"Ensure that the `CIDSystemInfo` strings, in Type0 fonts, are correctly decoded

This isn't directly related to the subsequent patch, but just something that I happened to notice while poking around in the font code.",False
35214245762bfaecd13b4dbfc521927cb6ef2508,2018-07-29 23:53:22,Tim van der Meij,"Merge pull request #9920 from Snuffleupagus/getMetadata-linearization

[api-minor] Add an `IsLinearized` property to the `PDFDocument.documentInfo` getter, to allow accessing the linearization status through the API (via `PDFDocumentProxy.getMetadata`)",True
f45450bd78e74cfbcf808974f4d5feff497fa3c6,2018-07-29 23:03:46,Tim van der Meij,"Merge pull request #9931 from Snuffleupagus/refactor-getPage

Refactor `getPage` (in the worker), and attempt to use the `Linearization` dictionary to lookup the first Page",True
a2c317f12b556472769f9f48809d4e4756ba1b1b,2018-07-29 20:22:34,Tim van der Meij,"Merge pull request #9925 from Snuffleupagus/StreamsSequenceStream-maybeLength

Attempt to estimate the minimum required `buffer` length when initializing `StreamsSequenceStream` instances",True
d19e13ee2e938052c2c3a776eb94a930813a5125,2018-07-29 19:46:48,Tim van der Meij,"Merge pull request #9936 from Snuffleupagus/BasePreferences-validate

Validate the Preferences when fetching them from storage",True
39846a6de3ed857465f18b3038eca3e3c0f18e2b,2018-07-29 19:37:45,Tim van der Meij,"Merge pull request #9935 from Snuffleupagus/builtInCMapCache-cleanup-regression

[Regression] Convert `Catalog.builtInCMapCache` into a `Map`, instead of an Object, to ensure that it's correctly reset (PR 8064 follow-up)",True
ec3728b54018d3e74086c67d10c2b3d53bc8c699,2018-07-29 01:53:36,Jonas Jenwald,"Use the `Linearization` dictionary, if it exists, when fetching the first Page

Since PDF.js already supports range requests and streaming, not to mention chunked rendering, attempting to use the `Linearization` dictionary in `PDFDocument.getPage` probably isn't going to improve performance in any noticeable way.
Nonetheless, when `Linearization` data is available, it will allow looking up the first Page *directly* without having to descend into the `Pages` tree to find the correct object.",False
fbb25ff4e20b74dd72e2473ec4bfa39d2b3d2e4f,2018-07-29 01:53:36,Jonas Jenwald,"Move `getPage`, on the worker side, from `Catalog` and into `PDFDocument` instead

Addresses an existing TODO, and avoids having to pass in a `pageFactory` when creating `Catalog` instances.",False
81b471c781f565959455ebcce4c55a159c35b8ba,2018-07-29 01:50:43,Jonas Jenwald,"[Regression] Convert `Catalog.builtInCMapCache` into a `Map`, instead of an Object, to ensure that it's correctly reset (PR 8064 follow-up)

With the `builtInCMapCache` being a simple Object, it unfortunately means that the `Catalog.cleanup` method isn't resetting it as intended.
By just replacing the `builtInCMapCache` with an empty Object, existing references to it will not actually be updated. The result is that e.g. `Page` instances still keeps references to, what should have been removed, CMap data.

To fix these problems, the `builtInCMapCache` is converted into a `Map` instead (since it can be easily reset).",False
08b05b9fdaa36f605e9f13b4583ed1d5d0d6afb9,2018-07-28 18:02:24,Jonas Jenwald,"Validate the Preferences when fetching them from storage

When updating Preferences using the `set` method, the input is carefully validated. However, no validation is (currently) done when a `BasePreferences` instance is created, which probably isn't that great. Hence this patch that simply ignores, to not unnecessarily break loading of the viewer itself, any invalid Preferences.",False
780cbadcd7998fd88dce26db7f64d65f013c67ae,2018-07-28 17:20:16,Jonas Jenwald,"Stop re-loading the Preferences in `PDFViewerApplication.open`, and remove the `BasePreferences.reload` method

Given that the various Preferences are currently, and have been for quite some time, only used when initializing `PDFViewerApplication` re-loading them when a new PDF file is opened in the viewer is essentially a no-op.

Furthermore, with the only usage of `BasePreferences.reload` now gone, the value of that method seems questionable at best. In the event that the functionality is actually needed again, similar to the `ViewHistory`, it'd probably make more sense to simply replace `PDFViewerApplication.preferences` with a new `BasePreferences` instance instead (using e.g. `DefaultExternalServices.createPreferences`).",False
c31ddf7edc52e05646324b4bd2c768b92de3b6bc,2018-07-28 13:00:41,bion,[api-minor] Include export value for checkboxes,False
d6f378fbafed2079310ed46a8efc519aa77a271a,2018-07-28 03:39:24,Tim van der Meij,"Merge pull request #9933 from perlun/patch-1

README.md: suggest usage of https instead of git protocol",True
82f1d3c82a820a8911478e43a663114153c97540,2018-07-28 01:56:59,Per Lundberg,"README.md: suggest usage of https instead of git protocol

The `git` protocol is unencrypted which means other parties could potentially eavesdrop your traffic. `https` or `ssh` is often encouraged because of this. (For example, the Ruby package manager `bundler` prints a warning when `git` sources are being used.)",False
522040d130441a41e985fc86d9202e17eed91d4f,2018-07-26 21:00:46,Jonas Jenwald,"Expose the Linearization status in the document properties dialog

This uses the same terminology, i.e. ""Fast Web View"", as is used by Adobe software.",False
928b89382e6b2350e740c481e7d6f44e8405e43c,2018-07-26 19:24:19,Jonas Jenwald,"[api-minor] Add an `IsLinearized` property to the `PDFDocument.documentInfo` getter, to allow accessing the linearization status through the API (via `PDFDocumentProxy.getMetadata`)

There was a (somewhat) recent question on IRC about accessing the linearization status of a PDF document, and this patch contains a simple way to expose that through already existing API methods.
Please note that during setup/parsing in `PDFDocument` the linearization data is already being fetched and parsed, provided of course that it exists. Hence this patch will *not* cause any additional data to be loaded.",False
8a4466139bdc592cbabf0b9a4963eb4b11295bb8,2018-07-26 19:24:01,Jonas Jenwald,"Simplify the `DocumentInfoValidators` definition

With this file now being a proper (ES6) module, it's no longer (technically) necessary for this structure to be lazily initialized. Considering its size, and simplicity, I therefore cannot see the harm in letting `DocumentInfoValidators` just be simple Object instead.

While I'm not aware of any bugs caused by the current code, it cannot hurt to add an `isDict` check in `PDFDocument.documentInfo` (since the current code assumes that `infoDict` being defined implies it also being a Dictionary).

Finally, the patch also converts a couple of `var` to `let`/`const`.",False
2d51bce941c631c4aaf531711f3ff9c465c96e78,2018-07-26 19:24:01,Jonas Jenwald,"Remove unnecessary `stream.length` check from `PDFDocument.linearization`

Note first of all that `PDFDocument` will be initialized with either a `Stream` or a `ChunkedStream`, and that both of these have `length` getters. Secondly, the `PDFDocument` constructor will assert that the `stream` has a non-zero (and positive) length. Hence there's no point in checking `stream.length` in the `linearization` getter.",False
51b0e60f9b344bf43b833295103505c58845ea19,2018-07-26 19:05:52,Yury Delendik,"Merge pull request #9924 from ErikNijland/master

fix(browser): zlib is not available in browser",True
32bfa55d981909f764720120dcbb5a2426ad9873,2018-07-26 17:12:59,Jonas Jenwald,"Attempt to estimate the minimum required `buffer` length when initializing `StreamsSequenceStream` instances

For most other `DecodeStream` based streams, we'll attempt to estimate the minimum `buffer` length based on the raw stream data. The purpose of this is to avoid having to unnecessarily re-size the `buffer`, thus reducing the number of *intermediate* allocations necessary when decoding the stream data.
However, currently no such optimization is attempted for `StreamsSequenceStream`, and given that they can often be quite large that seems unfortunate. To improve this, at least somewhat, this patch utilizes the raw sizes of the `StreamsSequenceStream` sub-streams to estimate the minimum required `buffer` length.

Most likely this patch won't have a huge effect on memory consumption, however for pathological cases it should help reduce peak memory usage slightly.
One example is the PDF file in issue 2813, where currently the `StreamsSequenceStream` instances would grow their `buffer`s as `2 MiB -> 4 MiB -> 8 MiB -> 16 MiB -> 32 MiB`. With this patch, the same stream `buffers`s grow as `8 MiB -> 16 MiB -> 32 MiB`, thus avoiding a total of `12 MiB` of *intermediate* allocations (since there's two `StreamsSequenceStream` used, for rendering/text-extraction).",False
26c734e4930a6ffc747545ffd01bffdf07d471f8,2018-07-26 15:31:10,Erik Nijland,fix(browser): zlib is not available in browser,False
3f4c2d673376efd14f59e1fec66524a6edffd009,2018-07-26 02:10:40,Tim van der Meij,"Merge pull request #9917 from Snuffleupagus/Preference-getAll

Add a `BasePreferences.getAll` method and use it to fetch all Preferences at once in `PDFViewerApplication._readPreferences`; ensure that the `externalLinkTarget` option is correctly set when the viewer is embedded",True
34957ec8eb5da23590bf15bef41aac066cfadba2,2018-07-25 14:13:36,Jonas Jenwald,"Add a `BasePreferences.getAll` method and use it to fetch all Preferences at once in `PDFViewerApplication._readPreferences`

Given that *all* Preferences are already fetched in `PDFViewerApplication._readPreferences`, the amount of boilerplate/duplication can be considerably reduced with the addition of a `BasePreferences.getAll` method.",False
c3433aea482fe1e5b52a05bd2c148193ac85a824,2018-07-25 14:13:36,Jonas Jenwald,"Remove a (now) unnecessary `externalLinkTarget` check in `PDFViewerApplication._readPreferences`

The only reason that this check ever existed in the first place, is that originally there was a global `PDFJS.openExternalLinkInNewWindow` option which was then subsumed by the (more generic) `PDFJS.externalLinkTarget` option. (The `externalLinkTarget` has since been moved into a `PDFLinkService` option, as part of PDF.js version `2.0`.)

Hence, during the period where both `PDFJS.openExternalLinkInNewWindow` and `PDFJS.externalLinkTarget` existed side-by-side, there was a need to allow the former one to override the latter one (for backward compatibility purposes). However, that's no longer the case, and this extra `externalLinkTarget` check can now be removed.",False
c6a0ae08f1f8a53bb25ed31dee37af791b460ce3,2018-07-25 14:13:36,Jonas Jenwald,"Ensure that the `externalLinkTarget` option is correctly set when the viewer is embedded (PR 9479 follow-up)

*This was a stupid error on my part; sorry about breaking this!*

With the current code, the value of the `externalLinkTarget` option is now (potentially) updated *after* the viewer components have been initialized. For the ""viewer in iframe/object tag"" case, the result is that the value of the `externalLinkTarget` option isn't adjusted as intended any more.",False
5b17fe81dca6132e1cc6b48c72c0b4a71aa29a40,2018-07-25 03:09:12,Tim van der Meij,"Merge pull request #9913 from Snuffleupagus/no-restricted-globals

Provide custom messages for the `no-restricted-globals` ESLint rule, and refactor the `.eslintrc` files (PR 9868 follow-up)",True
36b683ca55f62544cba2082243ff77bbd030b727,2018-07-23 17:40:13,Jonas Jenwald,"Provide custom messages for the `no-restricted-globals` ESLint rule, and refactor the `.eslintrc` files (PR 9868 follow-up)

Without providing useful (custom) error messages for the `no-restricted-globals` rule, see https://eslint.org/docs/rules/no-restricted-globals, it's quite likely that the rule will be incorrectly disabled rather than the required globals being imported as intended.

To reduced duplication of the `no-restricted-globals` rule in multiple `.eslintrc` files, it's instead moved to the top-level `.eslintrc` file and disabled as needed on a folder/file basis outside of `/src` and `/web`.",False
1aaeaf3338ae0d5cd6d1b379bf6ddcfb4cad4ad6,2018-07-22 18:25:35,Tim van der Meij,"Merge pull request #9904 from RonLek/master

Modified Examples to work without systemjs",True
2ce489c16f0f642df1874c0da46aff5a4221de0a,2018-07-22 18:12:30,Tim van der Meij,"Merge pull request #9900 from Snuffleupagus/issue-8884

Prevent Metadata/XML parsing from breaking `PDFDocumentProxy.getMetadata` when no XML root document is found (issue 8884)",True
8afc4ce258ca6ccbd96a6e316e5c56f2017f40e8,2018-07-21 16:56:06,RonLek,Modified Examples to work without systemjs,False
8ec99b200c5c149480b0834f98e70f3f5dab3dce,2018-07-18 15:07:40,Jonas Jenwald,"Prevent Metadata/XML parsing from breaking `PDFDocumentProxy.getMetadata` when no XML root document is found (issue 8884)

With the new XML parser, see PR 9573, the referenced PDF file now causes `getMetadata` to fail when incomplete XML tags are encountered. This provides a simple, and hopefully generally useful, work-around that may also help prevent future bugs.

(Without being able to reproduce nor even understand the other (non XML) errors mentioned in issue 8884, I'd say that this patch is enough to close that one as fixed.)",False
7e139776692789fee4b2cedb443715665c5adebe,2018-07-17 02:25:53,Tim van der Meij,"Merge pull request #9898 from Snuffleupagus/rm-createPromiseCapability-waitOnEventOrTimeout

Change `waitOnEventOrTimeout`, in web/ui_utils.js, to return a regular `Promise` and remove the `createPromiseCapability` import",True
647fa74793211737680c4c5d111b92efaafac42f,2018-07-16 17:18:33,Jonas Jenwald,"Change `waitOnEventOrTimeout`, in web/ui_utils.js, to return a regular `Promise` and remove the `createPromiseCapability` import

*Another small piece of clean-up of code I've previously written; follow-up to PR 8775.*

Importing `createPromiseCapability`, and then using it in just *one* spot, seems unnecessary since the `waitOnEventOrTimeout` function may just as well return a regular `Promise` directly.",False
61db85ab64989b3b361bc833878f4251eaf51bec,2018-07-15 20:53:52,Tim van der Meij,"Merge pull request #9886 from Snuffleupagus/bug-1473809

Prevent errors in `sanitizeTTProgram`, during parsing of CALL functions, when encountering invalid functions stack deltas (bug 1473809)",True
b56081c5f89c0602151df149a622876bac8c21d4,2018-07-15 03:28:38,Tim van der Meij,"Merge pull request #9887 from Snuffleupagus/rm-Util-inherit

Convert more code in the `/src` folder to use ES6 classes, such that `Util.inherit` can be removed",True
1f245c247f7bd67afd0c9c30263cd085fa4c67de,2018-07-15 03:17:12,Tim van der Meij,"Merge pull request #9881 from Snuffleupagus/rm-instanceof-Array

Replace the remaining occurences of `instanceof Array` with `Array.isArray()`",True
8e76d26e5b3bb62bebbebddf675e133c7c9f9444,2018-07-10 14:15:25,Jonas Jenwald,"Move the `toRoman` helper function out of the `Util` scope

Compared to all the other (static) methods in `Util`, the `toRoman` one looks slightly out of place. Even more so considering that `Util` is being exposed through `pdfjsLib`, where access to a Roman numerals conversion method doesn't make much sense.",False
c1c49badff7d689c364470fc7a525a9caab1533c,2018-07-10 13:59:47,Jonas Jenwald,"Remove the, now unused, `Util.inherit` helper function",False
2b25deb84c8a75a74d3d1409a98f95e7b5028b08,2018-07-10 13:15:55,Jonas Jenwald,"Prevent errors in `sanitizeTTProgram`, during parsing of CALL functions, when encountering invalid functions stack deltas (bug 1473809)

*I was feeling bored; so this is a very quick, and somewhat naive, attempt at fixing the bug.*

The breaking error, i.e. `Error during font loading: invalid array length`, was thrown when attempting to re-size the `stack` to a *negative* length when parsing the CALL functions.

Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1473809.",False
bf6d45f85a7783da6af969e14b8f117fc1272625,2018-07-10 00:42:01,Jonas Jenwald,"Convert `CMap` and `IdentityCMap` to ES6 classes

Also changes `var` to `let`/`const` in code already touched in the patch.",False
b773b356af2d26cb5bc5a0f021110be81f065974,2018-07-10 00:42:01,Jonas Jenwald,"Convert `NameOrNumberTree`, `NameTree`, and `NumberTree` to ES6 classes

Also changes `var` to `let`/`const` in code already touched in the patch.",False
ba1af467092b801b032e9fb5507959c61d6e7b74,2018-07-10 00:42:01,Jonas Jenwald,"Convert `CompiledFont`, `TrueTypeCompiled`, and `Type2Compiled` to ES6 classes

Also changes `var` to `let`/`const` in code already touched in the patch.",False
775763a0914e93ae0075004aaf62314c7091e99c,2018-07-10 00:42:01,Jonas Jenwald,"Ensure that `CompiledFont.compileGlyph` always returns an Array (PR 6141 follow-up)

PR 6141 changed `CompiledFont.compileGlyph` to, in the general case, return an Array. However, that PR apparenly forgot to update the no-glyph, empty-glyph, and endchar-glyph code-path and a String was still being (incorrectly) returned.

Given the way that `FontFaceObject.getPathGenerator` (on the API side) is implemented, this shouldn't have caused any bugs despite the Worker possible returning unexpected data.",False
646d81cd09eb3c1880ec26c9305a855d02550bd2,2018-07-10 00:40:36,Tim van der Meij,"Merge pull request #9837 from timvandermeij/unreachable

Replace `NotImplementedException` with `unreachable`",True
61186698c38234dbf138addde5a718b4b0b533d8,2018-07-09 16:47:41,Jonas Jenwald,"Replace the remaining occurences of `instanceof Array` with `Array.isArray()`

*Follow-up to PRs 8864 and 8813.*

As explained in https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray, `instanceof Array` can have inconsistent behavior. To ensure that only `Array.isArray` is used, an ESLint plugin/rule is added to enforce this.",False
200e3d6bd88344f30406762e6779ec07a8ed8c06,2018-07-09 16:22:55,Jonas Jenwald,Update the various ESLint packages to their latest versions,False
907c7f190bda191baa7cc56fabb9e6e3a7aeaf6f,2018-07-08 20:13:46,Tim van der Meij,Convert `src/code/pdf_manager.js` to ES6 classes/syntax,False
31012570ea90e47a947067f3a0dbe4e8f3232198,2018-07-08 19:59:53,Tim van der Meij,"Merge pull request #9868 from Snuffleupagus/url-polyfill

Stop exposing the `URL` polyfill in the global scope",True
7e1f7276854f22bb82f6d3bd699971bf2026b5d3,2018-07-08 19:29:02,Tim van der Meij,"Merge pull request #9877 from Snuffleupagus/scroll-spread-hide

Hide the Scroll/Spread mode buttons if the viewer is a `PDFSinglePageViewer` instance (PR 9858 follow-up)",True
9c06338258a0ce62f2eb238ee765c61a1c02f261,2018-07-08 19:17:23,Tim van der Meij,"Merge pull request #9880 from timvandermeij/jp-JP-mac

Remove the `jp-JP-mac` locale",True
8a6b7373a076ceb613290c465c79ea6931430cdb,2018-07-08 19:10:38,Tim van der Meij,"Remove the `jp-JP-mac` locale

It gives warnings when running `gulp locale`, in a previous patch it was
explicitly asked to remove it and there is quite a bit of discussion
about the validity of the locale at
https://bugzilla.mozilla.org/show_bug.cgi?id=418485. In short, let's
remove it to prevent these issues.",False
9c613a356321934aa85c2a5a0a438b1c3ef3b5fe,2018-07-08 19:07:32,Tim van der Meij,"Merge pull request #9879 from timvandermeij/readme

Correct the instructions in the README file for `examples/mobile-viewer`",True
1024615ecbda002b722dd8b8e4ef433e1eb9eaed,2018-07-08 19:02:06,Tim van der Meij,Correct the instructions in the README file for `examples/mobile-viewer`,False
d8c2bcc93a5e8934ca647652cecc03ca2b064b48,2018-07-08 15:41:03,Jonas Jenwald,"Temporarily disable the Spread mode buttons when horizontal scrolling is enabled

Given that the non-default Spread modes (currently) doesn't affect the page layout when horizontal scrolling is enabled, having the Spread buttons appear active when clicking them appears to do *nothing* is probably confusing rather than helpful to users.",False
36d6255866f1fd647b5d265e3d170129797bf30b,2018-07-08 15:38:48,Jonas Jenwald,"Hide the Scroll/Spread mode buttons when the viewer is a `PDFSinglePageViewer` instance

If the current viewer is a `PDFSinglePageViewer` instance the Scroll/Spread modes are no-ops, hence displaying buttons that do *nothing* when clicked will probably do very little besides confuse users.",False
46e1d5daa4eb53e68e05ae10de512ca38f9e7c6c,2018-07-08 14:25:56,Jonas Jenwald,"Simplify resetting of the `SecondaryToolbar` Scroll/Spread mode buttons, and add a missing comment in `PDFCursorTools`

The names 'resetscrollmode'/'resetspreadmode' were probably *not* great choices, given that the only thing being reset are toolbar buttons and not the actual Scroll/Spread modes. Furthermore, there's really no need for two separate events here.

The patch also adds a comment that ought to have been included in PR 9040, to prevent future refactoring/removing of what may appear to be an unnecessary `Promise.resolve` call.",False
b39a2ba57a11ed08f66fbf3844d6e51d488f3a83,2018-07-05 02:02:12,Tim van der Meij,"Merge pull request #9866 from Snuffleupagus/gulp-server-private-browsing

Prevent the development viewer, started with `gulp server`, from breaking completely in Private Browsing mode",True
a9ce4e8417c379e4a1b580982502b73c9248f6a1,2018-07-04 12:46:28,Jonas Jenwald,"Stop exposing the `URL` polyfill in the global scope

This moves/exposes the `URL` polyfill similarily to the existing `ReadableStream` polyfill, rather than exposing it globally, to avoid interfering with any ""outside"" code.
Both the `URL` and `ReadableStream` polyfills are now exposed on the `pdfjsLib` object, such that they are accessible to the viewer components.
Furthermore, the `no-restricted-globals` ESLint rule is also enabled to prevent accidental usage of the native `URL`/`ReadableStream` implementations directly in the `src/` and `web/` folders; see also https://eslint.org/docs/rules/no-restricted-globals

Addresses the remaining TODO in https://github.com/mozilla/pdf.js/projects/6",False
8f0cc07116a12c27c57eab48b6fe87ca9390cd70,2018-07-03 16:56:01,Jonas Jenwald,"Prevent the development viewer, started with `gulp server`, from breaking completely in Private Browsing mode

Since attempting to access `IndexedDB` in Private Browsing mode in Firefox will throw an error, see https://bugzilla.mozilla.org/show_bug.cgi?id=781982, the development viewer fails to load.",False
42922c9ae5bc76fdf1c8c123c4762b7441f8b89f,2018-07-03 03:00:37,Tim van der Meij,"Merge pull request #9861 from Snuffleupagus/PDFFindController-firstPagePromise

Refactor `PDFFindController` to use the 'pagesinit' event, dispatched on the `eventBus`, to resolve the `_firstPagePromise`",True
39a1fce59b7d5105797354054a2bbeb45290b576,2018-07-01 19:55:51,Jonas Jenwald,"Refactor `PDFFindController` to use the 'pagesinit' event, dispatched on the `eventBus`, to resolve the `_firstPagePromise`

Rather than having to manually call a method on `PDFFindController` instances from `BaseViewer.setDocument`, thus essentially having to resolve the private `_firstPagePromise` from the ""outside"", this can be done easily with the 'pagesinit' event dispatched on the `eventBus` instead.
Please note this particular `PDFFindController` code pre-dates the `eventBus` by almost three years, which should explain why the code looks the way it does.",False
872c6e4af0fee635ed922327da4d5970909db6a3,2018-07-01 01:43:42,Tim van der Meij,"Merge pull request #9858 from Snuffleupagus/scrollMode-refactor

Additional Scroll/Spread mode clean-up (PR 9832 follow-up)",True
4fbad9ab680976f055ea799722c0bc6b278027a1,2018-07-01 01:24:19,Tim van der Meij,"Merge pull request #9860 from timvandermeij/readme

Update the localization README to indicate that the translations are imported from the Nightly channel",True
fa7eb95eedb697c4807742cc9e598eb00f9880df,2018-07-01 01:17:44,Tim van der Meij,Update the localization README to indicate that the translations are imported from the Nightly channel,False
ce430bdfb50390824a78df3c9f45441914f5fdd2,2018-07-01 01:08:57,Tim van der Meij,"Merge pull request #9859 from timvandermeij/updates

Update translations and packages",True
ac401c65a02a2f3ed261926b4d5eed0ffa9a2ac1,2018-07-01 00:11:17,Tim van der Meij,Update packages,False
5baec1eeb49261008a45d5d019732031e659c37b,2018-07-01 00:06:17,Tim van der Meij,Update translations,False
ff26d419dda98ccc8449c0269573d287c94dbeee,2018-06-30 18:24:33,Jonas Jenwald,"Ensure that Scroll/Spread mode buttons are correctly reset, when the document is closed

Since the Scroll/Spread modes are now document specific, as all other properties such as page/scale/rotation, ensure that the toolbar is always correctly reset.",False
bb193dc501c1cf0b9c1d177e164e3cc9942d54ee,2018-06-30 16:06:57,Jonas Jenwald,"For consistency with other viewer state, remove and deprecate setting Scroll/Spread modes in the `BaseViewer` constructor

Since other viewer state, such as the current page/scale/rotation[1], are not available as `BaseViewer` constructor options, this makes the Scroll/Spread modes stand out quite a bit. Hence it probably makes sense to remove/deprecate this, to avoid inconsistent and possibly confusing state in this code.

---

[1] These properties are *purposely* not available in the constructor, since attempting to set them before a document is loaded has number of issues; please refer to https://github.com/mozilla/pdf.js/pull/8539#issuecomment-309706629 for additional details.",False
8b85ae4181ac7d46f7a741cb2d749c95e68b939b,2018-06-30 16:06:56,Jonas Jenwald,"Re-factor updating of Scroll/Spread modes, and place all the code in `BaseViewer` with overrides (as necessary) in the extending classes

This structure probably makes somewhat more sense, given that `PDFSinglePageViewer` is somewhat of a special case.",False
a7ac27e385baeeae70b7db62efc6cf5474622ac8,2018-06-30 16:06:54,Jonas Jenwald,"Replace `setScrollMode`/`setSpreadMode` methods with getters/setters

Since all the other viewer methods use the getter/setter pattern, e.g. for setting page/scale/rotation, the way that the Scroll/Spread modes are set thus stands out. For consistency, this really ought to use the same pattern as the rest of the `BaseViewer`. (To avoid breaking third-party implementations, the old methods are kept around as aliases.)",False
9515f579c6ff0b9147c852ebb6fd4a6761d907cc,2018-06-30 15:49:02,Jonas Jenwald,"Change the `scrollMode`/`spreadMode` to ""private"" properties on `BaseViewer` instances",False
a9a93bd92398e2082bd018631f2ed0289f9cd98d,2018-06-30 15:49:02,Jonas Jenwald,"Allow the `scrollModeOnLoad`/`spreadModeOnLoad` Preferences to override ViewHistory settings

Note how the other ""...OnLoad"" preferences will allow a *non-default* value to always override a history entry. To improve overall consistency for the viewer options, and to reduce possibly confusing behaviour, this patch changes the `scrollModeOnLoad`/`spreadModeOnLoad` preferences to behave as all the other ones.",False
baf9c98bc720707e707d96dcac66a3e1b6f434cf,2018-06-30 15:49:02,Jonas Jenwald,"Add `scrollModeOnLoad`/`spreadModeOnLoad` default values to `AppOptions`

For some reason, these weren't added to `AppOptions` despite actually being set and read from `web/app.js`. Not adding them creates inconsistencies, since all other options *are* present in `web/app_options.js`.",False
e522b2d87e8eb3d4eb8a391a098a0f6f157e8c12,2018-06-30 15:49:02,Jonas Jenwald,"Remove the unused `PDFViewerApplication.documentFingerprint` property

This property isn't accessed anywhere in the `web/app.js` file, and is also not being reset in `PDFViewerApplication.close`. Hence it seems that it can simply be removed, especially since the fingerprint is already synchronously available through `PDFViewerApplication.pdfDocument.fingerprint` (provided that a document is loaded).",False
99f8f2c2750e301ed97abb8c24a6f8c7f96e0417,2018-06-30 02:55:43,Tim van der Meij,"Merge pull request #9853 from Snuffleupagus/re-render-after-cancel

Fix re-rendering, using the same canvas, when rendering was previously cancelled (PR 8519 follow-up)",True
abda2b289e1ee81084d69edca4ee62d646094911,2018-06-30 02:42:03,Tim van der Meij,"Merge pull request #9852 from RonLek/master

Proper Error Handling for Build Numbers of Downloaded Sources (Non-Git repositories).",True
efb8f54fa145af7d16697f01b857dab8486705dd,2018-06-29 21:52:10,RonLek,Error Handling for Downloaded Files,False
6fa2c779b5785776433a32b967c5ef42dd01ead7,2018-06-29 02:45:25,Tim van der Meij,"Merge pull request #9838 from Snuffleupagus/invalid-path-OPS

Error, rather than warn, once a number of invalid path operators are encountered in `EvaluatorPreprocessor.read` (bug 1443140)",True
bf0aca86d72d2b7a6b8d24333a11fdaf187b7ac8,2018-06-29 02:26:37,Jonas Jenwald,"Fix re-rendering, using the same canvas, when rendering was previously cancelled (PR 8519 follow-up)

Currently if `RenderTask.cancel` is called *immediately* after rendering was started, then by the time that `InternalRenderTask.initializeGraphics` is called rendering will already have been cancelled.
However, we're still inserting the canvas into the `canvasInRendering` map, thus breaking any future attempts at re-rendering using the same canvas. Considering that `InternalRenderTask.cancel` always removes the canvas from the map, I cannot imagine that we'd ever want to re-add it *after* rendering was cancelled (it was likely just a simple oversight in PR 8519).

Fixes 9456.",False
5e40f041533b183b8384cc4656aea004e09e0eb4,2018-06-28 02:30:27,Tim van der Meij,"Merge pull request #9849 from Snuffleupagus/rm-cloneObj

Replace the `cloneObj` helper function, in the viewer, with native `Object.assign` (PR 9795 follow-up)",True
3c622ef048fd9de28ea9deab1459adc6113fcea0,2018-06-28 00:09:39,Jonas Jenwald,"Replace the `cloneObj` helper function, in the viewer, with native `Object.assign` (PR 9795 follow-up)",False
40d577d7ddfd91c56f133f7ec9912e7f41dd94a5,2018-06-27 03:01:45,Tim van der Meij,"Merge pull request #9841 from Snuffleupagus/initial-position-misc-cleanup

Various (small) cleanup related to setting the initial document position on load",True
14b69a4c1c5fed0639631932a4b099c4eb692353,2018-06-27 02:57:32,Tim van der Meij,"Merge pull request #9729 from Snuffleupagus/gulp-image_decoders

Add a `gulp image_decoders` command to package the image decoders (i.e. jpg.js, jpx.js, jbig2.js) separately, and publish them in pdfjs-dist",True
95a4fa25b9048c05e87f5906289e4b6920b233e3,2018-06-26 17:49:59,Jonas Jenwald,"Don't wait arbitrary long for all pages to be resolved before attempting to re-apply the initial position on load (PR 6318 follow-up)

With the current code, the location in the viewer could change *well* after the user has started to interact with the viewer (for very large and/or slow loading documents). Attempt to reduce the likelyhood of that happening, by adding an upper bound to the time spent waiting before attempting to re-apply the initial position.",False
3691f9cc78f16e122479b503d7b8bcca1eff554f,2018-06-26 17:43:44,Jonas Jenwald,Simplify the handling of the `defaultZoomValue` preference in `PDFViewerApplication.load`,False
5bbbbf152e91b7bc57f420421bc77529f24f4e03,2018-06-26 17:42:21,Jonas Jenwald,"Stop storing/using the 'exists' property of `ViewHistory` database entries

Rather than using a ""special"" property to check if a `ViewHistory` database entry existed on load, it seems that you could just as well check for the existence of one of the actually needed properties instead (here 'page' is used).

This way we can avoid storing what, more of less, amounts to useless state, which will help reduce the size of the `ViewHistory` database. Given that we don't directly, nor need to, validate the `ViewHistory` data but rely on other parts of the code-base to do so, the existance of an 'exists' property doesn't in and of itself really add much utility.

Finally, to simplify the implementation the 'exists' property won't be actively removed from the `ViewHistory` data. Instead we'll simply stop adding 'exists' when writing `ViewHistory` data, and rely on the existing pruning of old entries to eventually remove any remnants of 'exists' from storage.",False
253aae15fcac61910ae02f4af6215026b5ec3d67,2018-06-26 17:37:52,Jonas Jenwald,"Ensure that all entries above the current `cacheSize` is removed when initializing a `ViewHistory` instance

Note how, in the current code, only *one* old history entry would ever be removed. That would mean that if e.g. the `cacheSize` is reduced, it would potentially require loading of multiple files before the database would be correctly pruned.

Furthermore, in the case where the database was empty on load there's no need to attempt to shrink it, since trying to reduce the size of an *empty* array won't do much :-)",False
66ffdc4c5b63a135f201508264761fce17c08059,2018-06-26 02:38:58,Tim van der Meij,"Merge pull request #9839 from Snuffleupagus/page-stats-tests

Add unit-tests for `PDFPageProxy.stats` (PR 9245 follow-up)",True
74e99990444a992c93bc6ea50fe87b0d30a0eda0,2018-06-25 17:50:49,Jonas Jenwald,"Add unit-tests for `PDFPageProxy.stats` (PR 9245 follow-up)

This wasn't included in PR 9245, since all the API options were still global at that time.

Writing the unit-tests also uncovered an issue with `getOperatorList` not starting the ""Page Request"" timer.",False
7f21e387874185c83af1a301e269946237b8e918,2018-06-24 19:35:08,Jonas Jenwald,"Error, rather than warn, once a number of invalid path operators are encountered in `EvaluatorPreprocessor.read` (bug 1443140)

Incomplete path operators, in particular, can result in fairly chaotic rendering artifacts, as can be observed on page four of the referenced PDF file.

The initial (naive) solution that was attempted, was to simply throw a `FormatError` as soon as any invalid (i.e. too short) operator was found and rely on the existing `ignoreErrors` code-paths. However, doing so would have caused regressions in some files; see the existing `issue2391-1` test-case, which was promoted to an `eq` test to help prevent future bugs.
Hence this patch, which adds special handling for invalid path operators since those may cause quite bad rendering artifacts.

You could, in all fairness, argue that the patch is a handwavy solution and I wouldn't object. However, given that this only concerns *corrupt* PDF files, the way that PDF viewers (PDF.js included) try to gracefully deal with those could probably be described as a best-effort solution anyway.

This patch also adjusts the existing `warn`/`info` messages to print the command name according to the PDF specification, rather than an internal PDF.js enumeration value. The former should be much more useful for debugging purposes.

Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1443140.",False
2907827d31999489f88f0eff524448da652cf18b,2018-06-24 00:50:53,Tim van der Meij,Replace `NotImplementedException` with `unreachable`,False
e8b5088370565a338f7970a2a4b0bbbbed79b11b,2018-06-24 00:39:55,Tim van der Meij,"Merge pull request #9832 from Snuffleupagus/scrollMode-fixes

Fix a number of regressions/inefficiencies introduced by adding Scroll/Spread modes to the viewer (PR 9208 follow-up)",True
a6830fd41417f9bc5b19690211cab6a6051236f0,2018-06-23 20:16:31,Tim van der Meij,"Merge pull request #9835 from Snuffleupagus/api-loadingParams-cleanup

Clean-up the `PDFDocumentProxy.loadingParams` method in the API, and the `locale` viewer option",True
c8384061cf85b71f9cc6331a34e92777afcac4e5,2018-06-23 17:03:40,Jonas Jenwald,Ensure that the `locale` viewer option is never defined in the (various) extension builds (PR 9493 follow-up),False
275834ae669321ed409a034254ec1866373f855c,2018-06-23 17:03:22,Jonas Jenwald,"Clean-up, and add JSDocs to, the `PDFDocumentProxy.loadingParams` method (PR 9830 follow-up)",False
bfbe2b411c3aa0925fa6b0c35a1eee3614c9ddf6,2018-06-23 15:17:53,Jonas Jenwald,"Simplify the `_setScale` call when changing Scroll modes

Since the current page will be explicitly scrolled into view *directly* afterwards anyway (compare with e.g. the `pagesRotation` code), trying to maintain the current position when re-applying the zoom level during changing of Scroll modes is redundant.",False
d3cb5e7117fbd112b90fb79e92dba630fdb79f29,2018-06-23 14:00:22,Jonas Jenwald,Don't attempt to modify the DOM and/or trigger rendering when changing Scroll/Spread modes without a PDF document being loaded,False
05f682cd4be78b7985dd630a708f17ea752a76dd,2018-06-23 13:46:04,Jonas Jenwald,"[Regression] Ensure that pre-rendering of the next/previous page works correctly in Presentation Mode, when horizontal scrolling was enabled

Note how in `BaseViewer.forceRendering` the Scroll mode is used to determine how pre-rendering will work. Currently this is broken in Presentation Mode, if horizontal scrolling was enabled prior to entering fullscreen.

Furthermore, there's a few additional cases where the `this.scrollMode === ScrollMode.HORIZONTAL` check is pointless either in Presentation Mode or when a `PDFSinglePageViewer` instance is used.",False
6a086fa0b9431c7f997a8edd666d9616d6d22c8c,2018-06-23 13:46:04,Jonas Jenwald,"Refactor `setScrollMode`/`setSpreadMode`, in the viewer classes, such that they are no-ops in `PDFSinglePageViewer` instances

Since the Scroll/Spread modes doesn't make (any) sense in `PDFSinglePageViewer` instances, the general structure of these methods can be improved to reflect that.",False
8bd12442985b084dde154dbf7b0f60448c9b26e3,2018-06-23 13:46:04,Jonas Jenwald,"Move `_updateScrollModeClasses` from `BaseViewer` to `PDFViewer`

Given that this method is a no-op in `PDFSinglePageViewer`, similar to `_regroupSpreads`, let's improve the general code structure by simply moving the method.",False
da52dff04b90e48a2e17d3ebc891bf677c3ed1ec,2018-06-23 13:46:04,Jonas Jenwald,"Add validation of the argument in the `BaseViewer.{setScrollMode, setSpreadMode}` methods

Since all the other ""public"" methods validate the arguments, these (new) ones really ought to do the same.",False
9b0ed6f821219ee07ca8684b7a99b6dd3b4d03c3,2018-06-23 13:46:04,Jonas Jenwald,"Remove all pages from the DOM at once, rather than using a loop, in `PDFViewer._regroupSpreads`

There's no good reason to iterate through an arbitrary number of DOM elements this way, since a document could contain thousands of pages, when everything can be easily removed at once; compare with e.g. `BaseViewer._resetView` and `PDFThumbnailViewer._resetView`.

Furthermore given that it's a `PDFViewer` instance, the `this.viewer` property can be accessed directly. Besides, `_setDocumentViewerElement` only exists as a helper method for `setDocument` in the base class and none of this code applies for `PDFSinglePageViewer` instances either.",False
36111a1f40ae800556ab4196f4e7f299939d9e22,2018-06-23 13:46:04,Jonas Jenwald,"[Regression] Remove instances of `Element.classList.toggle()` with *two* parameters, since browser support is limited

The Secondary Toolbar buttons for, not to mention the actual toggling of, Scroll/Spread modes are currently completely broken in older browsers (such as IE11).

As a follow-up, it'd probably be a good idea to try and find a *feature complete* `classList` polyfill that could be used instead, but this patch at least addresses the immediate regression.

Please refer to the compatibility information in https://developer.mozilla.org/en-US/docs/Web/API/Element/classList#Browser_compatibility",False
34594a5b02394a531c1512ff10b44148225abe67,2018-06-23 05:51:06,Tim van der Meij,"Merge pull request #9830 from EugeneSqr/9824

Removed safari compatibility check (issue #9824)",True
98ea39f9d05f2b74cd982e7f028d643b768dc85a,2018-06-22 02:05:00,Tim van der Meij,"Merge pull request #9827 from Snuffleupagus/misc-corrupt-pdf-fixes

Fix various corrupt PDF files (issue 9252, issue 9418)",True
331ac8ae74d714542887819c7833eb68a83514e8,2018-06-21 15:27:56,eugenesqr,removed safari compatibility check,False
a278c5a8dced5afe82e47ac160ba59b1f7266171,2018-06-20 23:20:40,Brendan Dahl,"Merge pull request #9795 from timvandermeij/object-assign

Replace `Util.extendObj` by `Object.assign`",True
56e3648b656bed1bf4ff52aa3cd70e8a8e53b56f,2018-06-20 17:11:22,Jonas Jenwald,"Add basic validation of the 'trailer' dictionary candidates in `XRef.indexObjects` (issue 9418)

This patch avoids choosing a (possible) 'trailer' dictionary that `XRef.parse` and/or the `Catalog` constructor/methods will reject anyway.
Since `XRef.indexObjects` is already parsing the entire PDF file, the extra dictionary look-ups added here shouldn't matter much. Besides, this is a fallback code-path that only applies to corrupt PDF files anyway.",False
346810e02af17e2991255543e8ec1e99530237e9,2018-06-20 17:11:22,Jonas Jenwald,"Add basic validation of the 'Root' dictionary in `XRef.parse` and try to recover when possible

Note that the `Catalog` constructor, and some of its methods, are already enforcing that the 'Root' dictionary is valid/well-formed. However, by doing additional validation already in `XRef.parse` there's a slightly larger chance that corrupt PDF files could be successfully parsed/rendered.",False
e84813e7cc84c26a921ab9b188d5a7c287c4d65e,2018-06-20 17:11:22,Jonas Jenwald,Prevent hard errors if fetching the `Encrypt` dictionary fails in `XRef.parse`,False
30ad62a86ad990bcf31b2762b3f4e0d18d58cf96,2018-06-20 17:11:22,Jonas Jenwald,Use the correct `startPos` when repeating the search for 'endobj' operators in `XRef.indexObjects` (PR 9288 follow-up),False
6bbcafcd26beb19f44131e944457a3c23f510342,2018-06-20 17:11:21,Jonas Jenwald,"Let `Lexer.getNumber` treat a single decimal point as zero (issue 9252)

This is consistent with the behaviour in Adobe Reader.",False
df4799a12ab990b64e421a3e0b179ed3fcfd82bc,2018-06-20 17:11:15,Jonas Jenwald,"Ensure that line-breaks are *only* skipped after operators in `Lexer.getNumber` (PR 8359 follow-up)

With the current code line-breaks are accepted not just after an operator, but after a decimal point as well. When looking at this again, the latter case seems prone to cause false positives and might also interfere with subsequent patches.

Hence this is code is adjusted to actually do what the original commit message says, and nothing more.",False
3b07147d98e376a774316288647d421b80b589c1,2018-06-17 23:57:16,Tim van der Meij,"Merge pull request #9821 from Snuffleupagus/onOpenWithURL-originalUrl

Set the correct document title when opening a new file in the `GENERIC` default viewer",True
3e4a159a45196a244d05aaa2c8505c278a3b8bb4,2018-06-17 17:25:53,Jonas Jenwald,Set the correct document title when opening a new file in the `GENERIC` default viewer,False
84920f39b2a213383224484b17620972ec58fa90,2018-06-17 17:02:30,Jonas Jenwald,"Change the casing of the `originalURL` parameter, to `originalUrl`, in the `onOpenWithURL` method

The `onOpenWithURL` method, in `PDFViewerApplication.initPassiveLoading`, accepts a `originalURL` parameter which is then passed on to `PDFViewerApplication.open` as is. However, the latter method expects the name of the parameter to be `originalUrl` (note the casing), meaning that `getDocument` will fail in this case.

For consistency, and to avoid confusion, the renaming is done in `web/chromecom.js` as well.",False
5984c24415c5cd793221799ef356e411c06100c2,2018-06-16 21:26:54,Jonas Jenwald,"Add a basic `JpegImage` example using the standalone image decoders

The image was ""borrowed"" from one of the examples found at https://github.com/notmasteryet/jpgjs/tree/master/images",False
303537bcb162159dec3a87d78240bdc219b52afe,2018-06-16 21:26:54,Jonas Jenwald,"Add a `gulp image_decoders` command to allow packaging/distributing the image decoders (i.e. jpg.js, jpx.js, jbig2.js) separately from the main PDF.js library

Please note that the standalone `pdf.image_decoders.js` file will be including the complete `src/shared/util.js` file, despite only using parts of it.[1] This was done *purposely*, to not negatively impact the readability/maintainability of the core PDF.js code.

Furthermore, to ensure that the compatibility is the same in the regular PDF.js library *and* in the the standalone image decoders, `src/shared/compatibility.js` was included as well.

To (hopefully) prevent future complaints about the size of the built `pdf.image_decoders.js` file, a few existing async-related polyfills are being skipped (since all of the image decoders are completely synchronous).
Obviously this required adding a couple of pre-processor statements, but given that these are all limited to ""compatibility"" code, I think this might be OK!?

---
[1] However, please note that previous commits moved `PageViewport` and `MessageHandler` out of `src/shared/util.js` which reduced its size.",False
bfc88ead66b0983fb3e79527c5af14a96989b3ae,2018-06-16 21:26:54,Jonas Jenwald,"Expose a `Jbig2Image.parse` method, by re-instating the `parseJbig2` function

The purpose of this patch is to hopefully provide *slightly* better user ergonomics, if/when the PDF.js image decoders are used standalone.

This implementation is (basically) reverting the changes in PR 9386, in conjunction with code from the `parse` method found at https://github.com/notmasteryet/jpgjs/blob/master/src/pdfjs.js",False
682672db8ea93cac9c37f4919220930788ba2da7,2018-06-16 21:26:54,Jonas Jenwald,"Change the signature of the `JpegImage` constructor, to allow passing in various options directly",False
620da6f4df6eb883ff89580b643ef0516035e0d0,2018-06-16 21:25:10,Tim van der Meij,"Merge pull request #9802 from Snuffleupagus/ColorSpace-PDFImage-Uint8ClampedArray

Update `ColorSpace` and `PDFImage` to use `Uint8ClampedArray`s and remove manual clamping/rounding",True
280f20bf3cfd2ae2d0a4c77d0510e313100a3a38,2018-06-16 20:07:52,Tim van der Meij,"Merge pull request #9809 from Snuffleupagus/getPathGenerator-ignoreErrors

Allow `FontFaceObject.getPathGenerator` to ignore non-embedded fonts during rendering",True
5dacc8155ce8f6154d7ad9bde5c0e4d6ea13491d,2018-06-16 03:49:41,Tim van der Meij,"Merge pull request #9819 from Snuffleupagus/viewerContainer-offset-small-window

Fix regression affecting the horizontal `viewerContainer` offset for small window widths (PR 9816 follow-up)",True
78921222016f1745a6b16b8e602f6c41a7b0f99b,2018-06-16 03:18:19,Brendan Dahl,"Merge pull request #9595 from Rob--W/crx-ftp-file

Disable ftp support in Chrome 59+, add file chooser at file",True
5198b6d0dc0ce683c1b098fa3570b2cd5a0baa62,2018-06-15 23:57:02,Jonas Jenwald,"Fix regression affecting the horizontal `viewerContainer` offset for small window widths (PR 9816 follow-up)

*The danger of fixing one bug is that it can, sometimes too easily, cause another one in the process; sorry for not catching this when testing PR 9816 locally.*

When the *entire* viewer becomes narrow enough, as controlled by the `@media all and (max-width: 840px)` media query, the sidebar should (semi-transparently) overlay the `viewerContainer` instead of moving it horizontally. Unfortunately the changes made in PR 9816 caused the relevant CSS rules to be skipped, because of how the inheritance model works in CSS.

I'm well aware that `!important` is usually advised against, since it ""breaks"" the CSS inheritance model. However in this case it seemed reasonable to use it, to not only fix the bug at hand but to also prevent similar bugs from occurring in the future.",False
790e21242a37b147242506b003cb04e0a065d626,2018-06-15 02:52:57,Tim van der Meij,"Merge pull request #9816 from Snuffleupagus/presentationMode-page-offset-regression

Fix regression causing the pages to be offset horizontally in Presentation Mode (PR 8993 follow-up)",True
73843865b88806f7c4a12b7bf319fd87e7df761a,2018-06-15 02:47:57,Tim van der Meij,"Merge pull request #9815 from Snuffleupagus/rm-disableFullscreen-IE-embedded

Remove the `disableFullscreen` hack for embedded IE 11 (issue 9585)",True
39fc1c72fc2081813a1d261817815e415c9f2424,2018-06-14 20:02:19,Jonas Jenwald,"Fix regression causing the pages to be offset horizontally in Presentation Mode (PR 8993 follow-up)

This is a regression from PR 8993; it causes the pages to be offset horizontally in Presentation Mode, if and only if the sidebar is currently open when the user triggers Presentation Mode.

Please note that while this doesn't seem to affect Firefox, both Chrome and IE are however affected.
Interestingly enough, despite the Chrome extension being affected as well, I cannot find any issue filed about this. (Either Presentation Mode isn't used much at all, or users don't open the sidebar before entering Presentation Mode.)",False
349b7d5e9c6ba6c9aa2007ff8e0f61f6af4ec7b0,2018-06-14 15:55:28,Jonas Jenwald,"Remove the `disableFullscreen` hack for embedded IE 11 (issue 9585)

It appears that Microsoft silently fixed the problem that required disabling of fullscreen mode, in e.g. `iframe`s, in IE 11; please see issue 4711 and PR 5525 for historical context.

Unfortunately my Google-fu isn't strong enough to find any *official* information regarding the fixing of the browser bug in IE. However testing of the default viewer in IE 11, with this patch applied, it now appears that Presentation Mode is working correctly even in an `iframe` in IE 11.
Further anecdotal evidence that the bug is in fact fixed, is for example that jQuery previously contained a work-around for the IE bug. However, that's removed over two years ago now; see https://github.com/jquery/jquery/commit/ff1a0822f72d2b39fac691dfcceab6ede5623b90 and the issues referenced there.

Given that the default viewer isn't intended to be used as-is anyway (in custom deployments), it didn't seem necessary to keep the `disableFullscreen` option around since it was *only* ever added for compatibility purposes.

Fixes 9585.",False
b590519ea28de84ad7c9d119a85a2cabf842da4d,2018-06-14 02:33:51,Tim van der Meij,"Merge pull request #9801 from yungRoz/replace-deprecated-buffer-constructor

Replace deprecated `new Buffer(string, 'base64')` constructor with `Buffer.from(string, 'base64')",True
09580067138d302bd2010ab4413fe5ee1d254270,2018-06-13 14:32:10,Jonas Jenwald,Send `UnsupportedFeature` notification when errors are ignored in `FontFaceObject.getPathGenerator`,False
bf0db0fb728cb6aca338a3cd83b2ab12511a04c8,2018-06-13 14:32:06,Jonas Jenwald,"Pass the `ignoreErrors` API option to the `FontFaceObject` constructor, and utilize it in `getPathGenerator` to ignore missing glyphs

Obviously it's still not possible to render non-embedded fonts as paths, but in this way the rest of the page will at least be allowed to continue rendering.

*Please note:* Including the 14 standard fonts in PDF.js probably wouldn't be *that* difficult to implement. (I'm not a lawyer, but the fonts from PDFium could probably be used given their BSD license.)
However, the main blocker ought to be the total size of the necessary font data, since I cannot imagine people being OK with shipping ~5 MB of (additional) font data with Firefox. (Based on the reactions when the CMap files were added, and those are only ~1 MB in size.)",False
fe288bb872aca1cc1df688426a2b4a73bc3910e3,2018-06-13 14:32:02,Jonas Jenwald,"Refactor the `FontFaceObject.getPathGenerator` method

 - Reduce the overall indentation level, by making use of early returns.

 - Replace `var` with `let`.",False
778981ec893baea12ac3182122817cfc1ce405a5,2018-06-13 14:31:58,Jonas Jenwald,"Catch, and propagate, errors in the `requestAnimationFrame` branch of `InternalRenderTask._scheduleNext`

To support these changes, `InternalRenderTask._next` now returns a Promise.",False
d4ff541b78cea1859705460085a0cad0f1ddcec9,2018-06-12 14:31:32,Jonas Jenwald,"Enforce the use, in non-production/test-only mode, of `Uint8ClampedArray` in all relevant methods in `ColorSpace` and `PDFImage`

Since `ColorSpace` now depends on the native clamping of `Uint8ClampedArray`, this patch adds non-production/test-only `assert`s to enforce that the expected TypedArray is used for the output.

These `assert`s are purposely *not* included in PRODUCTION builds since that would break rendering completely, as opposed to ""only"" displaying some weird colours, when a `Uint8Array` was used. Furthermore, these are mostly added to help catch explicit developer errors when working with the `ColorSpace` and `PDFImage` code.",False
4b69bb7fe97bcfbf70347d6e568a5f223f344fbd,2018-06-12 14:31:32,Jonas Jenwald,"Add a TESTING build option, to enable using non-production/test-only code-paths

Since the tests (currently) run with the `pdf.worker.js` file built, i.e. with `PRODUCTION = true` set, there's no simple way to add e.g. `assert` calls for both non-production *and* test-only builds without also affecting PRODUCTION builds.",False
f01e54eae16525e3e06b4449958458ad7697ca9a,2018-06-12 14:31:32,Jonas Jenwald,"Improve the warning messages printed by `PartialEvaluator.{getOperatorList, getTextContent} when errors are being ignored

Currently the actual errors aren't printed, which can make debugging harder than necessary.",False
731f2e6dfcab15ea9bb293ac817736805d2d2a83,2018-06-12 14:31:32,Jonas Jenwald,"Remove manual clamping/rounding from `ColorSpace` and `PDFImage`, by having their methods use `Uint8ClampedArray`s

The built-in image decoders are already using `Uint8ClampedArray` when returning data, and this patch simply extends that to the rest of the image/colorspace code.

As far as I can tell, the only reason for using manual clamping/rounding in the first place was because TypedArrays used to be polyfilled (using regular arrays). And trying to polyfill the native clamping/rounding would probably have been had too much overhead, but given that TypedArray support is required in PDF.js version `2.0` that's no longer a concern.

*Please note:* Because of different rounding behaviour, basically `Math.round` in `Uint8ClampedArray` respectively `Math.floor` in the old code, there will be very slight movement in quite a few existing test-cases. However, the changes should be imperceivable to the naked eye, given that the absolute difference is *at most* `1` for each RGB component when comparing `master` and this patch (see also the updated expectation values in the unit-tests).",False
55199aa28179e2f920ee0d3da0ebdc76b6f5b560,2018-06-12 14:31:32,Jonas Jenwald,"Remove the unused `bpc` parameter from, and update the signature of, the `resizeRgbImage` function in `src/core/colorspace.js`",False
d1637056b3ea54705bfacdcfd055c5f0bce30d93,2018-06-12 14:31:32,Jonas Jenwald,Use shorthand method signatures in `src/core/colorspace.js`,False
32367c596803cff992401f1a69d7ae7b7772a19f,2018-06-12 14:31:32,Jonas Jenwald,"Make the `getBytes`/`peekBytes` methods of `Stream`/`DecodeStream`/`ChunkedStream` able to return `Uint8ClampedArray`s

The built-in image decoders are already returning data as `Uint8ClampedArray`, and subsequently the JPEG/JBIG2/JPX streams are as well. However, for general streams we obviously don't want to force the use of `Uint8ClampedArray` unless an ""Image"" is actually being decoded.
Hence this patch, which adds a parameter that allows the caller of the `getBytes`/`peekBytes` methods to force a `Uint8ClampedArray` (rather than a `Uint8Array`) to be returned.",False
09359efca07443babd410bd0e7fef64f54e92726,2018-06-12 09:11:56,youngroz,Replace deprecated  constructor with,False
2030d1718f4fb07656ac8ada99dbf7f6f2e4f320,2018-06-12 03:44:42,Tim van der Meij,"Merge pull request #9796 from Snuffleupagus/disable-webViewerFileInputChange-PresentationMode

Disable (drag-and-drop) file opening if Presentation Mode is active (PR 9794 follow-up)",True
3ac638fad3160a528574068be3476f31a23ca47f,2018-06-12 03:10:30,Brendan Dahl,"Merge pull request #9689 from RafaPolit/master

Fixed critical unhandled promise that prevented error catching using API",True
ba623c77d2d14703e7cdd61be9e2cb26fedb5579,2018-06-11 14:21:43,Jonas Jenwald,Disable (drag-and-drop) file opening if Presentation Mode is active (PR 9794 follow-up),False
af8e88d00ba983e77a8cae0c9d27c72fae8215c7,2018-06-10 23:41:03,Tim van der Meij,Replace `Util.extendObj` by `Object.assign`,False
0e0fa489dd7aaa59fcae159501f5485aafac6a5c,2018-06-10 19:44:17,Tim van der Meij,"Merge pull request #9793 from timvandermeij/refactoring

Remove `Util.appendToArray` and `Util.prependToArray`",True
98cabb388a838b151c2d999e3266d10b900af5d1,2018-06-10 19:34:54,Tim van der Meij,"Merge pull request #9794 from timvandermeij/drag-and-drop

Implement drag-and-drop support in the viewer for local files",True
8e9550611696cf33172a864c934b6f58996356a6,2018-06-10 19:12:55,Dimitris Kountanis,Implement drag-and-drop support in the viewer for local files,False
903bad1906540e7202343483197f45bcd3a10458,2018-06-10 18:54:09,Tim van der Meij,"Remove `Util.appendToArray` and `Util.prependToArray`

The former may be replaced by regular JavaScript array concatenation and
the latter is unused. This avoids unnecessary function calls/imports.",False
db874b6680b1863f484771881156f15265168353,2018-06-09 18:44:42,Tim van der Meij,"Merge pull request #9660 from brendandahl/headless

Support running the tests headlessly.",True
3b63d57d1598ed2c03611ad6860c3add631be53e,2018-06-09 18:10:02,Tim van der Meij,"Merge pull request #9792 from timvandermeij/translations

Import translations",True
32a44a054fe2ae3a667045ef44aa8a9fcf2655a7,2018-06-09 18:02:45,Tim van der Meij,Import translations,False
86422e67cc0c7a0fa1fd88a797ed42d240180696,2018-06-09 17:45:02,Tim van der Meij,"Merge pull request #9781 from Snuffleupagus/api-misc-cleanup

Miscellaneous API clean-up",True
07d610615c2832b9dc3ca1f5cdd976dc64510ea7,2018-06-07 17:22:40,Jonas Jenwald,"Move, and modernize, `Util.loadScript` from `src/shared/util.js` to `src/display/dom_utils.js`

Not only is the `Util.loadScript` helper function unused on the Worker side, even trying to use it there would throw an Error (since `document` isn't defined/available in Workers).
Hence this helper function is moved, and its code modernized slightly by having it return a Promise rather than needing a callback function.

Finally, to reduced code duplication, the ""new"" loadScript function is exported and used in the viewer.",False
547f119be628f58e12237addd528ea5239b80e6c,2018-06-06 12:35:45,Jonas Jenwald,"Simplify the error handling slightly in the `src/display/node_stream.js` file

The various classes have `this._errored` and `this._reason` properties, where the first one is a boolean indicating if an error was encountered and the second one contains the actual `Error` (or `null` initially).

In practice this means that errors are basically tracked *twice*, rather than just once. This kind of double-bookkeeping is generally a bad idea, since it's quite easy for the properties to (accidentally) get into an inconsistent state whenever the relevant code is modified.

Rather than using a separate boolean, we can just as well check the ""error"" property directly (since `null` is falsy).

---

Somewhat unrelated to this patch, but `src/display/node_stream.js` is currently *not* handling errors in a consistent or even correct way; compared with `src/display/network.js` and `src/display/fetch_stream.js`.
Obviously using the `createResponseStatusError` utility function, from `src/display/network_utils.js`, might not make much sense in a Node.js environment. However at the *very* least it seems that `MissingPDFException`, or `UnknownErrorException` when one cannot tell that the PDF file is ""missing"", should be manually thrown.

As is, the API (i.e. `getDocument`) is not returning the *expected* errors when loading fails in Node.js environments (as evident from the `pending` API unit-test).",False
2fdaa3d54c7bcadbdfc9cec0f9c8282af40d5c04,2018-06-06 12:22:43,Jonas Jenwald,"Update the `postMessageTransfers` comment in `createDocumentHandler` in the `src/core/worker.js` file

Since the old comment mentions a now unsupported browser, let's update it such that someone won't accidentally conclude that the code in question can be removed.",False
871bf5c68b1d6ad0365baac4e1056cb14faf635c,2018-06-06 12:22:43,Jonas Jenwald,"Remove the, now obsolete, handling of the `CMapReaderFactory` parameter in `getDocument`

This special handling was added in PR 8567, but was made redundant in PR 8721 which stopped sending everything but the kitchen sink to the Worker side.",False
c8e2163bbca459b5050e3c772e21a5bbbdec6cf8,2018-06-06 12:22:43,Jonas Jenwald,Remove incorrect/unnecessary validation of the `verbosity` parameter in the `PDFWorker` constructor (PR 9480 follow-up),False
b263b702e8f9230484e835d88c206feda2ecb743,2018-06-06 12:22:42,Jonas Jenwald,"Rename `PDFPageProxy.pageInfo` to `PDFPageProxy._pageInfo` to indicate that the property should be considered ""private""

Since `PDFPageProxy` already provide getters for all the data returned by `GetPage` (in the Worker), there isn't any compelling reason for accessing the `pageInfo` directly on `PDFPageProxy`.

The patch also changes the `GetPage` handler, in `src/core/worker.js`, to use modern JavaScript features.",False
4f4b50e01eb95f470bf58ed67be7196b0fedf720,2018-06-06 12:22:42,Jonas Jenwald,"Rename `PDFDocumentProxy.pdfInfo` to `PDFDocumentProxy._pdfInfo` to indicate that the property should be considered ""private""

Since `PDFDocumentProxy` already provide getters for all the data returned by `GetDoc` (in the Worker), there isn't any compelling reason for accessing the `pdfInfo` directly on `PDFDocumentProxy`.",False
e89afa589929e31575de83f21f2d4810cdc94291,2018-06-06 12:22:42,Jonas Jenwald,"Stop sending the `PDFManagerReady` message from the Worker, since it's unused in the API

After PR 8617 the `PDFManagerReady` message handler function, in `src/display/api.js`, is now a no-op. Hence it seems completely unnecessary to keep sending this message from `src/core/worker.js`.",False
eef53347fef37838f6ed451c8b85a357dd32a263,2018-06-06 12:22:42,Jonas Jenwald,"Ensure that the correct data is sent, with the `test` message, from the worker if typed arrays aren't properly supported

With native typed array support now being mandatory in PDF.js, since version 2.0, this probably isn't a huge problem even though the current code seems wrong (it was changed in PR 6571).

Note how in the `!(data instanceof Uint8Array)` case we're currently attempting to send `handler.send('test', 'main', false);` to the main-thread, which doesn't really make any sense since the signature of the method reads `send(actionName, data, transfers) {`.
Hence the data that's *actually* being sent here is `'main'`, with `false` as the transferList, which just seems weird. On the main-thread, this means that we're in this case checking `data && data.supportTypedArray`, where `data` contains the string `'main'` rather than being falsy. Since a string doesn't have a `supportTypedArray` property, that check still fails as expected but it doesn't seem great nonetheless.",False
dc6e1b4176700e8796225afba524bebecab7dfa3,2018-06-06 12:22:41,Jonas Jenwald,"Use `Uint8ClampedArray` for the image data returned by `JpegDecode`, in src/display/api.js

Since all the built-in PDF.js image decoders now return their data as `Uint8ClampedArray`, for consistency `JpegDecode` on the main-thread should be doing the same thing; follow-up to PR 8778.",False
47a9d38280fc54d156c77ad89e7ac1b2b4bcc4ec,2018-06-06 12:22:41,Jonas Jenwald,"Add more validation in `PDFWorker.fromPort`

The signature of the `PDFWorker.fromPort` method, in addition to the `PDFWorker` constructor, was changed in PR 9480.
Hence it's probably a good idea to add a bit more validation to `PDFWorker.fromPort`, to ensure that it won't fail silently for an API consumer that updates to version 2.0 of the PDF.js library.",False
3c5c8d2a0b0ea88f8c4d67d202c48a0bd59b5ff8,2018-06-06 12:22:33,Jonas Jenwald,"Remove the typed array check when calling `LoopbackPort` in `PDFWorker._setupFakeWorker`

With version 2.0, native support for typed arrays is now a requirement for using the PDF.js library; see PR 9094 where the old polyfills were removed.
Hence the `isTypedArraysPresent` check, when setting up fake workers, no longer serves any purpose here and can thus be removed.",False
127590b1c339473bf4c7b915a2f14c9ab517f846,2018-06-05 23:59:58,Brendan Dahl,Support running the tests headlessly.,False
76337fdc49a4251d9d6798755693400053f17d8c,2018-06-05 02:58:41,Tim van der Meij,"Merge pull request #9777 from Snuffleupagus/PageViewport-MessageHandler-cleanup

Various `PageViewport` and `MessageHandler` cleanup",True
d171a3f2dc8ed856c3b240efb746aa6fe59124a0,2018-06-05 02:28:02,Tim van der Meij,"Merge pull request #9779 from timvandermeij/gulpfile

Remove dead code in the `gh-pages-prepare` task in the Gulpfile",True
3e5ec410456e0e9919ead8423ab79ce23940cc61,2018-06-05 02:24:28,Tim van der Meij,Remove dead code in the `gh-pages-prepare` task in the Gulpfile,False
3c51f2fc1a7acf47ed45657a23eea88a8e71479a,2018-06-05 01:51:50,Brendan Dahl,"Merge pull request #9741 from timvandermeij/webpack

Build improvements",True
89caaf407120fea9f7eebe8b995d5dce179943c2,2018-06-04 16:23:08,Jonas Jenwald,"Use `LoopbackPort` in the ""message_handler"" unit-tests

There's no good reason, as far as I can tell, to duplicate the functionality of the `LoopbackPort` in the unit-tests. The only difference between the implementations is that `LoopbackPort` mimics the (native) structured cloning, however that shouldn't matter here since the tests are only sending ""simple"" data (strings respectively arrays with numbers).

Furthermore the patch also changes `LoopbackPort` to default to using ""structured cloning"" and deferred invocation of the listeners, since native typed array support is now a requirement for using the PDF.js library.",False
44d8afd46b451101d79cad2e06810ddaa5a717e0,2018-06-04 16:23:08,Jonas Jenwald,"Move `MessageHandler` into a separate `src/shared/message_handler.js` file

The `MessageHandler` itself, and its assorted helper functions, are currently the single largest[1] piece of code in the `src/shared/util.js` file. By moving this code into its own file, `src/shared/util.js` thus becomes smaller and more manageable.",False
69f2a77543421b2a2476d6c840c0d72b3f60be59,2018-06-04 16:23:07,Jonas Jenwald,"Update the signature of the `PageViewport` constructor, and improve the JSDoc comments for the class

This changes the constructor to take a parameter object, rather than a string of parameters.",False
51673dbc5a752520571f0ce6094608f49293f4d0,2018-06-04 16:23:07,Jonas Jenwald,"Convert the `PageViewport` to a proper ES6 class

Also converts all `var` to `let` for good measure.",False
5917b21702b5006d48fd637ee87d50223a34ce02,2018-06-04 16:23:07,Jonas Jenwald,"Remove completely unused `fontScale` property from `PageViewport`

The `fontScale` property was added in PR 1531, see commit https://github.com/mozilla/pdf.js/commit/b312719d7e0cf1a45dda0b4ad871a45162ed6f5b in particular, apparently for the sole purpose of supporting the ""acroforms"" example.

However, the `fontScale` property was never used anywhere else in the code-base, and after the modernization of the ""acroforms"" example in PR 8030 it's been completely unused.

Finally, note that there's also a (more suitably named) `scale` property on `PageViewport` instances, which contains the exact same information as the property being removed here.",False
08c8f8733db4cd6629e6b7173292f38f6ef8bea8,2018-06-04 16:23:07,Jonas Jenwald,"Move `PageViewport` from `src/shared/util.js` to `src/display/dom_utils.js`

Since the `PageViewport` is not used in the worker, duplicating this code on both the main and worker sides seems completely unnecessary.",False
f486051d7716a771d1771c5586af3f470aebc656,2018-06-04 16:23:07,Jonas Jenwald,"Explicitly list the ignored files in the `src/shared/` folder, for the `gulp lib` build target

To avoid having to manually update the ""shared files"" list in `gulpfile.js`, whenever any changes are made to the file structure in the `src/shared/` folder, let's simply list the files we do *not* want instead.
Given that the excluded files have been consistent ever since the `lib` build target was added, this patch should help avoid unnecessary churn in `gulpfile.js` in the future.",False
5053d02ba446e3c491bfd0e62633f7db46fb385c,2018-06-04 01:57:47,Tim van der Meij,"Merge pull request #9774 from timvandermeij/unlink

Use `fs.unlinkSync` instead of `fs.unlink` when removing files in the font tests",True
90750d624ba56252a5170800017f8659affb1b30,2018-06-04 01:47:05,Tim van der Meij,Use `fs.unlinkSync` instead of `fs.unlink` when removing files in the font tests,False
8ce24744f2920b6f087144a1d69fcf8af0fd062f,2018-06-03 23:20:42,Tim van der Meij,"Merge pull request #9769 from Snuffleupagus/node-unittest-rm-console-errors

Reduce the amount of errors logged, primarily in Node.js/Travis, when running the unit-tests",True
3859c637802ff38e03791f51e8b7263c0594eb01,2018-06-03 23:08:35,Tim van der Meij,"Merge pull request #9773 from Rob--W/content-disposition-textdecode-utf8

Fix multibyte decoding in content_disposition.js",True
0e4e79169ba9bc428a0aba323ab3b84576c58a5c,2018-06-03 19:47:28,Rob Wu,"Fall back to ISO-8859-1 in content_disposition.js

Updates content_disposition.js to include
https://github.com/Rob--W/open-in-browser/commit/9b789d9b3bb8e7992635627341a88dcf19f2dc42",False
e992480baa0b91132431793b4a62dc20ae9c2eb2,2018-06-03 18:58:22,Rob Wu,"Fix multibyte decoding in content_disposition.js

I made some mistakes when trying to make the content_disposition.js
compatible with non-modern browsers (IE/Edge).
Notably, text decoding was usually skipped because of the inverted
logical check at the top of `textdecode`.

I verified that this new version works as expected, as follows:

1. Visit https://github.com/Rob--W/open-in-browser/tree/55c71eb44e0ad71a3bb443457666fd48421612ac/test/
   and get  test-content-disposition.js
   also get test-content-disposition.node.js if using Node.js,
     or get test-content-disposition.html if you use a browser.
2. Modify `test-content-disposition.node.js` (or the HTML file) and
   change `../extension/content-disposition.js` to `PDFJS-content_disposition.js`
3. Copy the `getFilenameFromContentDispositionHeader` function from
   `content_disposition.js` (i.e. the file without the trailing exports)
   and save it as `PDFJS-content_disposition.js`.
4. Run the tests (`node test-content-disposition.node.js` or by opening
   `test-content-disposition.html` in a browser).
5. Confirm that there are no failures: ""Finished all tests (0 failures)""

The code has a best-efforts fallback for Microsoft Edge, which lacks the
TextDecoder API. The fallback only supports the common UTF-8 encoding.
To simulate this in a test, modify `PDFJS-content_disposition.js` and
deliberately throw an error before `new TextDecoder`. There will be two
failures because we don't want to include too much code to support text
decoding for non-UTF-8 encodings in Edge

```
test-content-disposition.js:265 Assertion failed: Input: attachment; filename*=ISO-8859-1''%c3%a4
Expected: ""Ã¤""
Actual  : ""ä""
test-content-disposition.js:268 Assertion failed: Input: attachment; filename*=ISO-8859-1''%e2%82%ac
Expected: ""â‚¬""
Actual  : ""€""
```",False
11b4613e203d48c896fc66a24f228ca4e40549f5,2018-06-03 03:58:40,Jonas Jenwald,"Reduce the amount of console ""spam"", by ignoring `info`/`warn` calls, when running the unit-tests in Node.js/Travis

Compared to running the unit-tests in ""regular"" browsers, where any console output won't get mixed up with test output, in Node.js/Travis the test output looks quite noisy.
By ignoring `info`/`warn` calls, when running unit-tests in Node.js/Travis, the test output is a lot smaller not to mention that any *actual* failures are more easily spotted.",False
ef081a053182bb323d3c769e8f6ed11b35c4357c,2018-06-03 03:58:40,Jonas Jenwald,"Ensure that the `WorkerTransport._passwordCapability` is always rejected, even when errors are thrown in `PDFDocumentLoadingTask.onPassword` callback

Please note that while the current code works, both in the viewer and the unit-tests, it can leave the `WorkerTransport._passwordCapability` Promise in a pending state.
In the `PasswordRequest` handler, in src/display/api.js, we're returning the Promise from a `capability` object (rather than just a ""plain"" Promise). While an error thrown anywhere within this handler was fortunately enough to propagate it to the Worker side, it won't cause the Promise (in `WorkerTransport._passwordCapability`) to actually be rejected.
Finally note that while we're now catching errors in the `PasswordRequest` handler, those errors are still propagated to the Worker side via the (now) rejected Promise and the existing `return this._passwordCapability.promise;` line.

This prevents warnings about uncaught Promises, with messages such as ""Error: Worker was destroyed during onPassword callback"", when running the unit-tests both in browsers *and* in Node.js/Travis.",False
0ecc22cb04b54e57bbe0e498791f9a604c8c2e57,2018-06-03 03:58:37,Jonas Jenwald,"Attempt to provide better default values for the `disableFontFace`/`nativeImageDecoderSupport` API options in Node.js

This should provide a better out-of-the-box experience when using PDF.js in a Node.js environment, since it's missing native support for both `@font-face` and `Image`.
Please note that this change *only* affects the default values, hence it's still possible for an API consumer to override those values when calling `getDocument`.

Also, prevents ""ReferenceError: document is not defined"" errors, when running the unit-tests in Node.js/Travis.",False
dcc7f33ee7ee0790ee34e2106a8d04254bc66c8c,2018-06-03 03:53:07,Jonas Jenwald,"Prevent ""ReferenceError: window is not defined"" errors, from `web/ui_utils.js`, when running the unit-tests in Node.js/Travis",False
a71886ffe01568d82714ee3fa09e43af4f78a047,2018-06-02 23:59:47,Tim van der Meij,Include `package-lock.json` for reproducible builds,False
a816ee5c25bfd2875c3e1b05f5bf2b74b917c968,2018-06-02 23:58:36,Tim van der Meij,Upgrade to Webpack 4,False
e3f635ce01e40f5e0e9eee793035e3246ea4a1af,2018-06-02 23:58:36,Tim van der Meij,Update packages,False
2921cc0eba053896860e62a4bd1ffb5d29be51e5,2018-06-02 23:33:20,Tim van der Meij,"Merge pull request #9771 from timvandermeij/extension

Remove the `gulp extension` build target",True
32de419a88ec6e22fffec5999bd126472740e447,2018-06-02 23:26:09,Tim van der Meij,Remove the `gulp extension` build target,False
36af85db9292ac605e01e1ca08de0c0f78846801,2018-06-02 23:20:09,Tim van der Meij,"Merge pull request #9740 from pedrotp/replace-get-getArray

Use Dict.getArray, instead of Dict.get, when getting the 'Size' in constructSampled in src/core/function.js",True
a190d21dd730b88a2fe9b00eac8727212e1be248,2018-06-02 20:46:05,pedrotp,"Use Dict.getArray, instead of Dict.get, when getting the 'Size' in constructSampled in src/core/function.js (PR 7295 follow-up)",False
e39541ac18d6307c4441aca7b4b345425eeb5c42,2018-06-01 03:40:43,Tim van der Meij,"Merge pull request #9730 from Snuffleupagus/jpeg-EOI-decodeScan

Ignore the rest of the image when encountering an EOI (End of Image) marker while parsing Scan data (issue 9679)",True
83ff7d9de9ffebdf37cb97bf9364bcb134727e0b,2018-05-31 02:10:11,Jonas Jenwald,Simplify the DNL (Define Number of Lines) marker warning in `JpegImage.parse`,False
620f65488b777074f16b828ee50b1b448f9d6c1c,2018-05-31 02:10:11,Jonas Jenwald,Ignore the rest of the image when encountering an EOI (End of Image) marker while parsing Scan data (issue 9679),False
c2cbeaa34d81bbb7cced856e2888867df587a1fa,2018-05-31 01:51:26,Tim van der Meij,"Merge pull request #9759 from brendandahl/win-exclude-path

Fix webpack exclude path on windows.",True
548b4ca20876d206c29eb614ff9d53e899d42be7,2018-05-30 06:13:02,Brendan Dahl,Fix webpack exclude path on windows.,False
7cd6c0fbf2385a7b8852a55da3ee09242a3c6ad5,2018-05-29 03:22:47,Tim van der Meij,"Merge pull request #9758 from timvandermeij/unlink

Use `fs.unlinkSync` instead of `fs.unlink` when removing `eq.log`",True
4f8dae683e680bbe9bc2d54d6590fba49ba37aff,2018-05-29 03:18:20,Tim van der Meij,"Use `fs.unlinkSync` instead of `fs.unlink` when removing `eq.log`

This is necessary because Node.js crashes when `fs.unlink` is called
without a callback function.",False
c5d5d29b03fcc4caa853d5e9f239734b452e28d8,2018-05-29 03:04:57,Tim van der Meij,"Merge pull request #9756 from Snuffleupagus/Type1Parser-rm-makeSubStream

Remove usage of `makeSubStream` from `Type1Parser.extractFontProgram` in src/core/type1_parser.js (issue 9735)",True
c8b4e6ec9dacdee1c823b8f1fad5eb3a2036b79f,2018-05-29 02:35:50,Tim van der Meij,"Merge pull request #9757 from timvandermeij/backout

Backout of pull request #9345",True
057994d78128c9c851c89f79d274107cbebd99ed,2018-05-29 02:24:09,Tim van der Meij,Backout of pull request #9345,False
f68f60099e9a497ec2e8ef967b8aa7a17bcfb2bd,2018-05-28 18:02:20,Jonas Jenwald,"Remove usage of `makeSubStream` from `Type1Parser.extractFontProgram` in src/core/type1_parser.js (issue 9735)

This avoids the initialization of, potentially thousands of, unnecessary `Stream` objects, by getting the required number of bytes directly instead.
Given the special behaviour, when `length === 0`, of the `getBytes`/`skip` methods, it's also necessary to handle that particular case to prevent errors when encountering empty CharStrings.",False
70cad2f053de7cdc8fbb6c0c17e6589d842cba75,2018-05-27 19:56:47,Tim van der Meij,"Merge pull request #9754 from timvandermeij/tests

Fix broken links to Bugzilla PDF attachments and convert all PDF links from HTTP to HTTPS",True
2f3b05fd5a2dec6e8687a3ac5834cc1e68da6955,2018-05-27 19:32:04,Tim van der Meij,Convert all PDF links from HTTP to HTTPS,False
4958b593693e63a64de55e89b4a587b1ebcd22c3,2018-05-27 19:10:33,Tim van der Meij,Fix broken links to Bugzilla PDF attachments,False
28360a0142f3610bfc30fc01db50303ad6202f0c,2018-05-22 18:41:49,Rob Wu,"Merge pull request #9701 from mukulmishra18/fetch-abort

Add abort functionality in fetch stream",True
949c3e9417ded8588df2d99024c8697987b6265e,2018-05-22 12:46:59,Mukul Mishra,Add abort functionality in fetch stream,False
b7a3a5e7e438926f606853eb8b107a3e3353dc98,2018-05-20 20:51:04,Tim van der Meij,"Merge pull request #9742 from AbhimanyuVashisht/remove-new-buffer

Replace deprecated new Buffer(string) constructor with Buffer.from(string)",True
58612f869a57fa33092864ebec18b8ed44726315,2018-05-20 20:42:50,Abhimanyu Vashisht,Replace deprecated new Buffer(string) constructor with Buffer.from(string),False
4948129dc4052b7f09a9c6f4f1dbee58108b5ac1,2018-05-20 20:27:21,Tim van der Meij,"Merge pull request #9743 from timvandermeij/translations

Import translations",True
321681d86733c88cb15bf9055209437ffc566829,2018-05-20 20:23:20,Tim van der Meij,Import translations,False
7ba50448fdef660d22b799b5814af36ad63407c4,2018-05-15 15:11:47,Rob Wu,"Merge pull request #9208 from rhendric/scrolling-modes

Add scrolling and spread modes to web viewer",True
d7c051e8070b036efbda0a955aec692e2135d97d,2018-05-15 08:40:33,Ryan Hendrickson,"Add preferences for default scroll/spread modes

This commit adds `scrollModeOnLoad` and `spreadModeOnLoad` preferences
that control the default viewer state when opening a new document for
the first time.

This commit also contains a minor refactoring of some of the option UI
rendering code in extensions/chromium/options/options.js, as I couldn't
bear creating two more functions nearly identical to the four that
already existed.",False
c24bc2975731fa69bf642bfb6f98408a366e39b6,2018-05-15 08:40:33,Ryan Hendrickson,Remember last used scroll and spread modes,False
eaf14e5d47a0ef7fcf5186d5babf1c73b48ec662,2018-05-15 08:40:32,Ryan Hendrickson,"Modify key events for horizontal scrolling

Specifically, when there is no vertical scrollbar, let up, down, page
up, and page down all trigger moving to the next or previous page.",False
3d83c646c6b9ff8046a8a1485e170e088ed6fbaf,2018-05-15 08:40:32,Ryan Hendrickson,"Add spread modes to web viewer

This builds on the scrolling mode work to add three buttons for joining
page spreads together: one for the default view, with no page spreads,
and two for spreads starting on odd-numbered or even-numbered pages.",False
91cbc185da8896ea95da3fa2481beff68e5ea48d,2018-05-15 08:40:32,Ryan Hendrickson,"Add scrolling modes to web viewer

In addition to the default scrolling mode (vertical), this commit adds
horizontal and wrapped scrolling, implemented primarily with CSS.",False
65c8549759de630ae3c1cf687035a973f45e7afc,2018-05-15 08:40:32,Ryan Hendrickson,"Fix bug in scrollIntoView

Prior to this commit, if the vertical scroll bar is absent and the horizontal
scroll bar is present, a link to a particular point on the page which should
induce a horizontal scroll did not do so, because the absence of a vertical
scroll bar meant that the viewer was not recognized as the nearest scrolling
ancestor. This commit adds a check for horizontal scroll bars when searching
for the scrolling ancestor.",False
91a8027acd2df0686351b4ebf9844d8193871f63,2018-05-13 15:14:06,Tim van der Meij,"Merge pull request #9719 from theel0ja/patch-1

Add description metatag to docs",True
94fa71977be940b1dd2c2d5188cd10b2562b7100,2018-05-13 14:22:31,Elias Ojala,Add description to docs.,False
d63b17dbe30ecf3afff8d1eb90c7ce071abac9f6,2018-04-24 23:40:00,RafaPolit,Fixed critical unhandled promise that prevented error catching using API,False
c5c06bf5c42707355de325ae5a9e24757e8f86dc,2018-04-22 19:29:25,Tim van der Meij,"Merge pull request #9673 from janpe2/svg-clip

SVG clip intersections and operators",True
fe2cf2f73feb6e00d3e54b6c7a9f0784ce58c1f9,2018-04-17 21:50:29,Jani Pehkonen,SVG clip intersections and operators,False
2dc4af525d1612c98afcd1e6bee57d4788f78f97,2018-04-13 02:52:43,Brendan Dahl,"Merge pull request #9659 from yurydelendik/rm-createFromIR

Remove createFromIR from PDFFunctionFactory",True
7d7bc80eee7ef4486547bec7b3ecba7be7aabc69,2018-04-11 23:19:07,Brendan Dahl,"Merge pull request #9501 from janpe2/text-clip-cff-cid

Use FDSelect and FDArray when converting CFF CID font to paths",True
20085aaa5ee0fa00cc5b8ab0cc8ed0be64f5c4d2,2018-04-11 05:19:31,Yury Delendik,Remove createFromIR from PDFFunctionFactory; forgive invalid Dict values.,False
8ea505545a56dcd551c344d962d3fa74c349bf70,2018-04-10 19:14:42,Jani Pehkonen,Use FDSelect and FDArray when converting CFF CID font to paths,False
2275485ceca6f2fc87dc0f9d50216fdc751f146f,2018-04-08 19:23:51,Tim van der Meij,"Merge pull request #9640 from timvandermeij/updates

Update packages and translations",True
e0b63cc7afbf7034508bc9665f8656975bc004bc,2018-04-08 19:19:17,Tim van der Meij,Update packages and translations,False
1a634f9c6ac722ce92be9135e12142e778dc45e8,2018-04-08 18:41:41,Tim van der Meij,"Merge pull request #9629 from wojtekmaj/add-autoprefixer

Implement autoprefixer",True
69e9fe2494e9a68902934fbf92259bb8a85839a5,2018-04-08 17:24:16,Tim van der Meij,"Provide a prefixed `appearance` CSS rule for reference testing in Chrome

In `rasterizeAnnotationLayer` we load the source CSS files directly, so
these are not processed by Autoprefixer. Since the prefixed rules have
now been removed from the source CSS files, we must manually provide one
prefixed rule that Chrome needs in the overrides CSS file for checkbox
and radio button rendering to work in the reference tests.",False
acd1fa4c4f83617feb969c2b8a79dca1e286257c,2018-04-05 02:32:26,Wojciech Maj,Configure Autoprefixer,False
ed67c1d6aa61bd494fa2d9658a61ac7aecf401db,2018-04-04 03:56:01,Wojciech Maj,Introduce autoprefixer to gulp process,False
dbb0e88bc10e9b8e319e74b6dccd33e0e6c6495c,2018-04-04 03:55:12,Wojciech Maj,Clean up browser-specific CSS,False
a7a034d803094b5d421a0d429c84906aea94edf2,2018-04-04 02:15:38,Brendan Dahl,"Merge pull request #9566 from brendandahl/remove-ff-ext

Remove the Firefox extension building code.",True
e8cf7fd5121e42aa26f5f670d5fc83b7e3fe121b,2018-04-03 23:25:29,Brendan Dahl,"Merge pull request #9624 from wojtekmaj/no-warning-on-dependency-operator

Prevent warning on unimplemented operator thrown for OPS.dependency",True
d21eecefc19907540c686c3635390150b53893ee,2018-04-03 23:24:29,Brendan Dahl,"Merge pull request #9620 from wojtekmaj/fix-typos

Fix typos",True
acc0a0fe9509fc0f9ef0df989f25c7bda64724df,2018-04-02 17:59:34,Wojciech Maj,Prevent warning on unimplemented operator thrown for OPS.dependency,False
ea2850e9a7ac42ce8d2761160645776452cd2a41,2018-04-02 02:50:41,Wojciech Maj,Fix typos,False
2f63ca0705aac113c6b9936dec02d9482add677c,2018-04-01 16:49:03,Tim van der Meij,"Merge pull request #9619 from timvandermeij/systemjs

Pin `systemjs` to avoid breakage",True
6896d300374e66153e5742ac81d689cf69445dd9,2018-04-01 16:37:26,Tim van der Meij,"Pin `systemjs` to avoid breakage

SystemJS version 0.21.0 works, but version 0.21.1 breaks with various
`Unable to load transpiler to transpile` errors. Pin the version to
0.21.0 for now to avoid this issue.",False
57e8676180752c375e0d364234565d6240a9a3ec,2018-04-01 16:27:14,Tim van der Meij,"Merge pull request #9618 from timvandermeij/node-example

Improve the instructions and code for the `pdf2png` example",True
64b1315bb5e45062e125cf217ddc74c6d193707c,2018-04-01 16:22:57,Tim van der Meij,"Improve the instructions and code for the `pdf2png` example

We need to pass `disableFontFace` and `nativeImageDecoderSupport`
because Node.js has no native support for `@font-face` and `Image`.
Doing so makes it possible to render e.g., the Tracemonkey paper, which
failed before. I made this PDF file the default because it's also the
default in other examples/demos and because it showcases the
possibilities better than the very simple hello world PDF file.

Building the library with `gulp dist-install` is easier and is already
recommended in the other examples.",False
8887a09e8f153815133c7c4435da6ceb9e85f159,2018-04-01 15:56:39,Tim van der Meij,"Merge pull request #9588 from swftvsn/patch-1

Improve node.js support",True
8512596508e31a72eb3d22e3a1c669e5d9ee4a7d,2018-03-31 18:33:21,Tim van der Meij,"Merge pull request #9611 from Snuffleupagus/getMainThreadWorkerMessageHandler-non-PRODUCTION

Clean-up `getMainThreadWorkerMessageHandler` for non-PRODUCTION mode",True
121e43685f95634de1e26c6871591ff50371ab22,2018-03-31 04:57:50,Brendan Dahl,"Remove the Firefox extension building code.

Firefox no longer supports this legacy extension and it is a pain to
sync changes from here and mozilla central.",False
8b09f7c34e1ca186a21952881bee45d3cff27ed0,2018-03-29 14:33:47,Jonas Jenwald,"Clean-up `getMainThreadWorkerMessageHandler` for non-PRODUCTION mode

*This is a final piece of clean-up of code that I recently wrote, after which I'm done :-)*

When the `getMainThreadWorkerMessageHandler` function was added, in PR 9385, it did so by basically introducing a `web/app.js` dependency in `src/display/api.js` through the `window.pdfjsNonProductionPdfWorker` property[1]. Even though this is limited to non-`PRODUCTION` mode, i.e. `gulp server`, it still seems unfortunate to have that sort of viewer dependency in the API code itself.

With the new, much nicer and shorter, names introduced in PR 9565 we can remove this non-`PRODUCTION` hack and just use `window.pdfjsWorker` in both the viewer and the API regardless of the build mode.

---

[1] It didn't seem correct to piggy-back on the `window.pdfjsDistBuildPdfWorker` property in non-`PRODUCTION` mode.",False
a8e9f6cc290e4f12ceb01f36c783477d1fc75bfe,2018-03-26 01:22:11,Tim van der Meij,"Merge pull request #9593 from Snuffleupagus/pageSize-orientation

Improve the pageSize entry in the document properties dialog, by also displaying page names and orientation",True
b004308f884c8698e7793b3df19a80f60f088824,2018-03-25 22:23:45,Jonas Jenwald,"Attempt to improve the detection of (metric) page names, by fuzzy matching the dimensions

The following is an example of a PDF file (the specification to be exact) where the page size (compare the size displayed in Adobe Reader), and the page name, isn't correctly displayed without the patch: https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf",False
d86b816c2b9d4146b2aea80dc86461ad55e3555c,2018-03-25 22:20:17,Jonas Jenwald,"Display the names, for a couple of standard page sizes, in the document properties dialog

Please note that this patch *purposely* doesn't add every standard (or semi-standard) page name in existence, but rather only a few common ones. This is done to lessen the burden on localizers, since it's quite possible that all of the page names could need translation (depending on locale).

It's easy to add more standard page sizes in the future, but we should take care to *only* add those that are very commonly used in actual PDF files.",False
fc0038d609a1bff225f8f4f01525a7d1f781624d,2018-03-25 22:20:17,Jonas Jenwald,"Add orientation description to the pageSize information, displayed in the properties dialog

Since the l10n strings were added in a previous commit, modifying them here shouldn't be a problem since they haven't landed in mozilla-central yet.",False
f3b74c5028a9ee24fa5fbe3db2595390af959347,2018-03-25 22:19:46,Jonas Jenwald,"Display the pageSize, in the document properties dialog, with locale dependent units

This uses a whitelist, based on the locale, to determine where non-metric units should be used.
Note that the behaviour implemented here seem consistent with desktop PDF viewers (e.g. Adobe Reader), where the pageSizes are *always* displayed with locale dependent units rather than pageSize dependent ones (since the latter would probably be quite confusing).",False
513412c92ed5219846df8fc50511360aa74f8cb0,2018-03-25 22:19:46,Jonas Jenwald,Add a new `getLanguage` method to the various `IL10n` implementations,False
ab74b320543da2529b3beba9cb241d139b8aacce,2018-03-25 22:19:46,Jonas Jenwald,"Adjust the displayed pageSize, in the document properties dialog, depending on the current *viewer* rotation (PR 9586 follow-up)

Please note that the behaviour implemented here mirrors the one used in Adobe Reader.",False
b7b5d93231d13f04c24035d445c30bffe3131bb3,2018-03-25 22:18:53,Jonas Jenwald,"Reduce the duplication for the `document_properties_page_size_*` strings, by defining the units separately",False
77d025dc14f0a3eabb1ade8c9a46af9a8776ddfa,2018-03-25 22:18:53,Jonas Jenwald,"Move the `isPortraitOrientation` helper function from `web/base_viewer.js` to `web/ui_utils.js`

A couple of basic unit-tests are added, and a manual `isLandscape` check (in `web/base_viewer.js`) is also converted to use the helper function instead.",False
5c1a16ba6ecc0bb8d5011af2ef77500975e7fdcf,2018-03-25 21:33:32,Tim van der Meij,"Merge pull request #9586 from Snuffleupagus/pageSize-api-rotate

Ensure that `PDFPageProxy.pageSizeInches` handles non-default /Rotate entries correctly",True
6cc0efe1cc31a3b0d502e60ff20a6ed7c578a7e6,2018-03-25 21:22:26,Tim van der Meij,"Merge pull request #9576 from timvandermeij/versions

Update packages",True
95de23e6e3c8303eb4a5115572e5c27a72d49c6d,2018-03-25 20:29:50,Tim van der Meij,"Update packages

Jasmine had a major version bump and required a few minor changes in our
booting code. Most notably, using `pending` in a `describe` block is no
longer supported, so we can only return early there. On the positive
side, the unit tests now run in a random order by default, which
eliminates any dependencies between unit tests.

Note that upgrading to Webpack 4 is out of scope for this patch since
the bots cannot work well with the newly generated bundles (both
browsers on both bots do not react within 120 seconds). Webpack 4 is not
faster for us than Webpack 3, so for now there is no need to upgrade.",False
d54793682705276cfa07ee262454f4d9107a3be6,2018-03-25 20:18:29,Jonas Jenwald,"Ensure that `PDFPageProxy.pageSizeInches` handles non-default /Rotate entries correctly

Without this patch, the pageSize will be incorrectly reported for some PDF files.

---

Move pageSizeInches to ui_utils",False
115fbc47fed6f9894776c2bb1be9778fe7f9c918,2018-03-25 00:10:49,Tim van der Meij,"Merge pull request #9594 from Snuffleupagus/pageLabel-validation

Add stricter validation in `Catalog.readPageLabels`",True
24f766b14d84b6776c1b3b6952b097bd8f865a5d,2018-03-22 05:30:00,Brendan Dahl,"Merge pull request #9573 from yurydelendik/xml_parser

New XML parser",True
29c370af276893989d401921ef98ee5f65f276c0,2018-03-21 22:51:46,Rob Wu,"[CRX] Add file chooser as fallback (fixes #9411)

Test case to exercise the different encodings:
1. Create a file ""some file#@%M<br>%25 .pdf""
2. Build the extension with `gulp chromium` and load it in Chrome.
3. Go to `chrome://extensions/` and ensure that the
   ""Allow access to file URLs"" is disabled.
4. Try to open the file from step 1 in Chrome (maybe reload once).
5. PDF.js should be showing a file chooser button.
6. Click on that button and select a different file.

   Test: Check that a confirmation dialog pops up that warns about
   a different file name. Cancel the dialog.

7. Click on the button again and select the original file.

   Test: Check that the file opens as expected.",False
df516c0a52f6f0ca41a38df065320b0e3a466960,2018-03-21 20:14:31,Rob Wu,"[CRX] Stop intercepting ftp in Chrome 59+

The extension cannot easily fetch data from ftp:-resources any more
in Chrome 59+. So don't intercept such URLs.",False
374d074f6e136240f7e7ad4ad1846541dee4229f,2018-03-21 19:06:05,Jonas Jenwald,"Add stricter validation in `Catalog.readPageLabels`

The current PageLabel dictionary validation code won't catch some (unlikely) forms of corruption. For example: a `Type`/`S` entry being `null`/`0`/empty string, a `P`/`St` entry being `null`/`0`.

Please note: I'm not aware of any bugs caused by the old code, but I've had this patch sitting locally for some time and figured it couldn't hurt to submit it.",False
c20426efef220e5ec594e11af13a5a004246901b,2018-03-21 17:13:53,swftvsn,"Improve node.js support

This change fixes ""Unhandled rejection ReferenceError: HTMLElement is not defined"" issue that is discussed in more detail in #8489.",False
b67f117b56966496e877441a6a0d2a11c9b557a0,2018-03-21 05:12:19,Brendan Dahl,"Merge pull request #9590 from brendandahl/new-line

Add new line to default preferences.",True
0aa31a493b7d39118321ed319938ad47e312f102,2018-03-21 05:06:37,Brendan Dahl,Add new line to default preferences.,False
c0b22da02a3c1d691f0ae11069809272f9477cd6,2018-03-21 03:50:02,Tim van der Meij,"Merge pull request #9584 from Rob--W/docs-examples-2.0

Update examples/ documentation for 2.0",True
63c7aee11211f071af382892f1664fe90f56b9e4,2018-03-21 02:19:04,Brendan Dahl,"Merge pull request #9565 from brendandahl/new-name

Rename the globals to shorter names.",True
655c8d34d042966f080bcd7b8e6b9faca9bc5664,2018-03-20 07:21:41,Yury Delendik,New XML parser,False
3bfc797bc718a367f4b79d7bccb789f9f45bb406,2018-03-20 04:21:42,Tim van der Meij,"Merge pull request #9587 from Snuffleupagus/cursorToolOnLoad

Move the `cursorToolOnLoad` preference handling into `AppOptions` (PR 9493 follow-up)",True
3131c9b54ca0e073299ec3c077c8023770238d95,2018-03-20 04:02:19,Jonas Jenwald,"Remove the deprecated `mozL10n` and `localized` properties from `web/ui_utils.js`

With PDF.js version `2.0`, these can now be removed.",False
c2f1523f0622cb6cf362367c4cb5090ae2e9a308,2018-03-20 03:54:56,Jonas Jenwald,"Move the `cursorToolOnLoad` preference handling into `AppOptions` (PR 9493 follow-up)

Since no other viewer component is currently reading preferences itself, this patch thus unifies the behaviour across the viewer.",False
6db9c3cb4991fb5809894f0e2c76cb94125f7562,2018-03-20 03:36:47,Brendan Dahl,"Merge pull request #9571 from Snuffleupagus/addon-prefs

[Firefox addon] Refactor bundling of the `default_preferences.json` file",True
362da3bc050dabf3e9e4bb6cfaad51e94a04373c,2018-03-19 21:14:54,Rob Wu,"Use pdfjsLib instead of PDFJS in examples

pdfjsLib is used in PDF.js 2.x,
PDFJS was the old namespace from 1.x.",False
b0fe0f41db656352dba57d9e1b2e56ea8395bdc1,2018-03-19 21:14:32,Rob Wu,[docs] Link to other examples from examples page,False
0d391daccc2f4e4b9c91268e719bd10fe63a49ae,2018-03-18 19:31:21,Tim van der Meij,"Merge pull request #9577 from Snuffleupagus/pagesize-info-fixes

[api-minor] Fix various issues related to pageSize, and display the size for the active page in the document properties dialog",True
4136d41a4ccc01a4ed201e4616c1b192cfa6baaa,2018-03-18 19:19:30,Tim van der Meij,"Merge pull request #9574 from timvandermeij/l10n

Update translations",True
51ddcd6380673ea02b81250d4e4f9b3d7b227ef9,2018-03-18 13:40:21,Jonas Jenwald,Display the pageSize of the *currently* active page in the document properties dialog,False
adeaefedae3aec791ff8bf79c74fb546e7adb229,2018-03-18 13:40:21,Jonas Jenwald,"Don't unnecessarily update the fileSize, in the document properties dialog, when it's already been correctly set",False
1730447ca19cd16e3ef4d4696f6761a0e918618e,2018-03-18 13:40:21,Jonas Jenwald,"Tweak the pageSize l10n strings for the document properties dialog

The units are currently repeated after each dimension, which seems unnecessary and is also not done in other PDF viewers (such as e.g. Adobe Reader).

Furthermore, the name of the l10n arguments can be simplified slightly, since the name of the strings themselves should be enough information.

Finally, the `width`/`height` should be formatted according to the current locale, as is already done for other strings in the document properties dialog.",False
e0ae1575827f2d86f9fe6186f82b74ec34a197cc,2018-03-18 13:40:19,Jonas Jenwald,"[api-minor] Fix various issues related to the pageSize information

The `getPageSizeInches` method was implemented on `PDFDocumentProxy`, which seems conceptually wrong since the size property isn't global to the document but rather specific to each page. Hence the method is moved into `PDFPageProxy`, as `get pageSizeInches` instead to address this.

Despite the fact that new API functionality was implemented, no unit-tests were added. To prevent issues later on, we should *always* ensure that new functionality has at least some test-coverage; something that this patch also takes care of.

The new `PDFDocumentProperties._parsePageSize` method seemed unnecessary convoluted. Furthermore, in the ""no data provided""-case it even returned incorrect data (an array, rather than the expected object).
Finally, the fallback strings didn't actually agree with the `en-US` locale. This inconsistency doesn't look too great, and it's thus addressed here as well.",False
2247af7e95954f78af85531be32d2ca9262f9977,2018-03-17 21:01:04,Tim van der Meij,"Update translations

This required changing the import script in two ways:

- we should use the `default` branch and not the `tip` tag since the
  latter may refer to another branch than `default` (this is the case for
  the `vi` locale, which caused in the files to be overwritten with
  incorrect contents since `tip` referred to the
  `THUNDERBIRD600b1_2018031614_RELBRANCH` branch);
- we should check if the response code is indeed 200 because recently a
  script removed all empty localization files upstream (refer to
  https://bugzilla.mozilla.org/show_bug.cgi?id=1443175).",False
db6e316efd1739fbe854ca39f771eb64dd8096f6,2018-03-17 19:59:32,Tim van der Meij,"Merge pull request #9549 from Snuffleupagus/issue-9540

Attempt to handle corrupt PDF documents that inline Page dictionaries in a Kids array (issue 9540)",True
01bff1a81de85399853bffa17c88e5e8a39ead2e,2018-03-16 23:38:56,Brendan Dahl,"Rename the globals to shorter names.

pdfjsDistBuildPdf=pdfjsLib
pdfjsDistWebPdfViewer=pdfjsViewer
pdfjsDistBuildPdfWorker=pdfjsWorker",False
76250b923f1ac921b8c106a3a0e9763674ef9fe5,2018-03-16 21:16:57,Jonas Jenwald,[Firefox addon] Refactor bundling of the `default_preferences.json` file,False
d431ae069d1d431f33fceb0847cf39f103019c34,2018-03-12 18:43:23,Jonas Jenwald,"Attempt to handle corrupt PDF documents that inline Page dictionaries in a Kids array (issue 9540)

According to the specification, see https://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#G6.1942297, the contents of a Kids array should be indirect objects.",False
6662985a20b769d7e78e7cf4486eb6b7130f0cf0,2018-03-10 04:45:47,Tim van der Meij,"Merge pull request #9541 from Rob--W/crx-fetch-chrome61plus

[CRX] Disable fetch in Chrome 60-",True
58cda43b294027399f1de486783a2858b0838da4,2018-03-09 03:27:19,Tim van der Meij,"Merge pull request #9542 from Rob--W/crx-url-9493-fixup

[CRX] Fix error that broke the Chrome extension",True
39e0b4b5895a69b014677c215ef1fbcfa6388577,2018-03-09 03:19:02,Rob Wu,"[CRX] Fix error that broke the Chrome extension

PR #9493 moved from `appConfig.defaultUrl` to `AppOptions.get('defaultUrl')`.
However, it forgot to replace `appConfig.defaultUrl` in chromecom.js,
and as a result the extension is not able to open any PDF file.

This patch fixes that issue.",False
fded22c6188d6203b43015f61268b6a098675816,2018-03-09 03:10:27,Tim van der Meij,"Merge pull request #9509 from timvandermeij/document

Implement a single `getInheritableProperty` utility function",True
e0fb18a339fac7f065f9d9165c634d3a895d3ac5,2018-03-08 23:27:38,Yury Delendik,"Merge pull request #9508 from pal03377/file-info-page-size

Add paper size to document information/properties",True
db428004f4203d0c677864baf12e94d94711fb07,2018-03-08 22:57:30,Rob Wu,"[CRX] Disable fetch in Chrome 60-

Chrome 60 and earlier does not include credentials (cookies) in requests
made with fetch, regardless of extension permissions. This was fixed in
61.0.3138.0 by
https://chromium.googlesource.com/chromium/src/+/2e231cf052ca5e68e22baf0008ac9e5e29121707

This patch disables the fetch backend in all affected Chrome versions.
The browser detection is done by checking for a change that coincides
with the release of Chrome 61.

Test case:
1. Copy the `isChromeWithFetchCredentials` function from the patch.
2. Run it in the JS console of Chrome and verify the return value.

Verified results:
- 49.0.2623.75 - false (earliest supported version by us)
- 60.0.3112.90 - false (last major version affected by bug)
- 61.0.3163.100 - true (first major version without bug)
- 65.0.3325.146 - true (current stable)

Test case 2:
1. Build the extension (`gulp chromium`) and load it in Chrome.
2. Open the developer tools, and open any PDF file.
3. In the ""Network tab"" of the developer tools, look at ""request type"".
   In Chrome 60-: Should be ""xhr""
   In Chrome 61+: Should be ""fetch""",False
8558c5b1d9968f1f004def791bec3fae31330185,2018-03-08 22:53:47,palsch,Add page size to the document properties dialog,False
f308d73d40f71fc05b2c1076e03053c2c21d3f74,2018-03-03 23:49:39,Tim van der Meij,"Implement a single `getInheritableProperty` utility function

This function combines the logic of two separate methods into one.
The loop limit is also a good thing to have for the calls in
`src/core/annotation.js`.

Moreover, since this is important functionality, a set of unit tests and
documentation is added.",False
4e5eb59a330acca43bb76a24742b046f898a49f3,2018-03-03 19:27:42,Tim van der Meij,"Remove the `getPageProp` method in `src/core/document.js`

It's only used in two places in the class and those callsites can
directly get the information from the dictionary, which is more readable
and avoids an additional method call.",False
c33bf800cc87941cc681c3c54279ab1b9745650d,2018-03-03 19:18:54,Tim van der Meij,"Merge pull request #9493 from Snuffleupagus/refactor-api-options

[api-major] Move the remaining options from, and completely remove, the global `PDFJS` object",True
b8606abbc1448ffd26ad553b253e2fb72d7f2cb7,2018-03-01 22:43:27,Jonas Jenwald,[api-major] Completely remove the global `PDFJS` object,False
4b4fcecf7027704fff5c242c39365fdbf57956ab,2018-03-01 22:41:17,Jonas Jenwald,"Ensure that we only pass in the necessary parameters when initializing `PDFDataTransportStream`/`PDFNetworkStream` in `src/display/api.js`

With options being moved from the global `PDFJS` object and into `getDocument`, a side-effect is that we're now passing in a fair number of useless parameters to the various transport/network streams.
Even though this doesn't *currently* cause any problems, it nonetheless seem like a good idea to explicitly provide the parameters that are actually necessary.",False
212553840f8b761461e11214239bf57fb1173c1d,2018-03-01 22:41:17,Jonas Jenwald,"Move the `pdfBug` option from the global `PDFJS` object and into `getDocument` instead

Also removes the now unused `getDefaultSetting` helper function.",False
1d03ad006021cf9c039b22eb28249de0d60bb88a,2018-03-01 22:41:17,Jonas Jenwald,Move the `disableCreateObjectURL` option from the global `PDFJS` object and into `getDocument` instead,False
05c05bdef5ec5125ba6d5810140e2d50715e1958,2018-03-01 22:41:16,Jonas Jenwald,Move the `disableStream` option from the global `PDFJS` object and into `getDocument` instead,False
b69abf11115ffa67798d4cd6805465367f5bd1fa,2018-03-01 22:41:16,Jonas Jenwald,Move the `disableRange` option from the global `PDFJS` object and into `getDocument` instead,False
69d719103487339303e5883bff55aaffb9ce7da0,2018-03-01 22:41:16,Jonas Jenwald,"Move the `disableAutoFetch` option from the global `PDFJS` object and into `getDocument` instead

One additional complication with removing this option from the global `PDFJS` object, is that the viewer currently needs to check `disableAutoFetch` in a couple of places. To address this I'm thus proposing adding a getter in `PDFDocumentProxy`, to allow checking the *actually* used values for a particular `getDocument` invocation.",False
c7c583583bcd403da978508b90e9121801309cba,2018-03-01 22:41:16,Jonas Jenwald,Move the `disableFontFace` option from the global `PDFJS` object and into `getDocument` instead,False
f3900c4e57accc3f326dab98153d15c8f844929f,2018-03-01 22:41:16,Jonas Jenwald,Move the `isEvalSupported` option from the global `PDFJS` object and into `getDocument` instead,False
3c2fbdffe6e1d68d751cc0e0c125712094c8f5f8,2018-03-01 22:41:16,Jonas Jenwald,Move the `cMapUrl` and `cMapPacked` options from the global `PDFJS` object and into `getDocument` instead,False
b674409397d722a3e1f916d68ee99d51983a1969,2018-03-01 22:41:16,Jonas Jenwald,Move the `maxImageSize` option from the global `PDFJS` object and into `getDocument` instead,False
b0956a5d91946ee75729dbd8cedad3b86d9cfbc9,2018-03-01 22:41:16,Jonas Jenwald,"Refactor how the default viewer handles the worker options, by making use of `AppOptions` instead of the global `PDFJS` object",False
57165afb08009179e6835bd971576b4d73f7186a,2018-03-01 22:41:16,Jonas Jenwald,"Move the `defaultUrl` parameter from the `appConfig` and into `AppOptions` instead

The `appConfig` contains (mostly) references to various DOM elements, used when initializing the viewer components.
Hence `defaultUrl` seem like a slightly better fit for the new `AppOptions` abstraction, not to mention that it should thus be easier to set/modify it for custom deployments of the default viewer.",False
81c550903fc7f31d33a45ad741207b194a6d00c2,2018-03-01 22:41:16,Jonas Jenwald,Move various viewer components options from `PDFJS`/`PDFViewerApplication.viewerPrefs` and into `AppOptions` instead,False
09da99b8a0fb908cde084c3359320cdea2ad6869,2018-03-01 22:41:16,Jonas Jenwald,"Introduce a `AppOptions` abstraction in preparation for a complete refactoring of the way that viewer options are handled

The way that various options are handled in the default viewer is currently a bit of a mess (to say the least). Some viewer options reside in the global `PDFJS` object, while others reside in `Preferences`. To make matters worse, some options even exist in both of the two.

Since the goal, with PDF.js version `2.0`, is to reduce our usage of the global `PDFJS` object, we'll instead want pass in the options when initializing the viewer components and when calling API methods (such as `getDocument`).
However given the current state of things in the default viewer, this wouldn't be exactly easy to implement. Hence this patch, which attempts to consolidate the way that viewer (and later API) options are handled by introducing a `AppOptions` singleton that provides *one* centralized way of interacting with the various options in the default viewer.",False
5894bfa44936b5056767b8867a29c925004180a8,2018-03-01 22:41:16,Jonas Jenwald,"Move API specific compatibility options from `src/shared/compatibility.js` and into a separate file

Unfortunately, as far as I can tell, we still need the ability to adjust certain API options depending on the browser environment in PDF.js version `2.0`. However, we should be able to separate this from the general compatibility code in the `src/shared/compatibility.js` file.",False
401f3a9d97fd33c10983716dae119d66d6a4c8d0,2018-03-01 22:35:14,Rob Wu,"Merge pull request #9520 from Snuffleupagus/fix-includes-polyfills

Attempt to fix the `Array.prototype.includes` and `String.prototype.includes` polyfills (issue 9514, 9516)",True
cd12a177a90da922e267f178744911a1e6d87d46,2018-03-01 22:08:14,Jonas Jenwald,"Attempt to fix the `Array.prototype.includes` and `String.prototype.includes` polyfills (issue 9514, 9516)

I don't understand why the previous way importing the polyfills didn't work, and I don't have time to try and figure it out, however this patch seems to fix things.

Fixes 9514.
Fixes 9516.",False
f893bcd41b0b5c3eb96f89f5efe2e2fdce180c1c,2018-03-01 21:09:44,Rob Wu,"Merge pull request #9494 from pardeepshokeen/windows-drive-letter

Windows drive letter",True
80bf6150d61b048ca0cde17a5036553570eaea45,2018-03-01 03:01:02,Tim van der Meij,"Merge pull request #9519 from Snuffleupagus/bug-888600

Upstream the changes from: Bug 888600 - Move ContentFrameMessageManager to WebIDL. Part 6: Mark some IDL interfaces as non-scriptable. r=bz.",True
ae7821484ccfecd73fcf647816738e85633f1e3a,2018-02-28 17:00:13,Jonas Jenwald,Update l10n files,False
8b2c46dce718cf03f46c74d7bc996b01ebd3e59b,2018-02-28 15:30:55,Jonas Jenwald,"Upstream the changes from: Bug 888600 - Move ContentFrameMessageManager to WebIDL. Part 6: Mark some IDL interfaces as non-scriptable. r=bz.

Please see:
https://bugzilla.mozilla.org/show_bug.cgi?id=888600
https://hg.mozilla.org/mozilla-central/rev/83c87140dc3d",False
97faedba0cd74d9f5899c2ffa33bb20103ffa8f8,2018-02-27 02:39:15,Brendan Dahl,"Merge pull request #9511 from Snuffleupagus/more-upstreaming

Upstream changes from bug 792808 and 1440284",True
5497bdc46dfe6c796403b9d84f8a6a9fa4f6bb88,2018-02-26 22:16:49,Jonas Jenwald,Update the ESLint packages,False
a30c184f1f0470d195b39009ce8968f4d5f968f7,2018-02-26 22:14:48,Jonas Jenwald,"Upstream the changes from: Bug 1440284 - change this.EXPORTED_SYMBOLS back to var EXPORTED_SYMBOLS in JS modules, r=mccr8.

Please see:
https://bugzilla.mozilla.org/show_bug.cgi?id=1440284
https://hg.mozilla.org/mozilla-central/rev/b599a95ce057

For consistency, the patch also updates the `PdfJsTelemetry-stub.jsm` file.",False
68077f61f1327de795e09c0742d59dffb1fb2618,2018-02-26 22:04:04,Jonas Jenwald,"Upstream the changes from: Bug 792808 - Change PdfStreamConverter.jsm to import and instantiate XHRs from global properties rather than using Cc.createInstance(Ci.nsIXMLHttpRequest); r=mossop

Please see:
https://bugzilla.mozilla.org/show_bug.cgi?id=792808
https://hg.mozilla.org/mozilla-central/rev/56f9de9da69a

Fixes 9499.",False
7ebbdd25799b74bf7a965750bf218ec7065e5152,2018-02-25 01:25:32,pardeepshokeen,helper function to parse url,False
5f98f9b8f10d68df6cbd331b5e135e167c71829b,2018-02-24 03:05:58,Tim van der Meij,"Merge pull request #9505 from Rob--W/hosted-viewer-blob-url

Don't block origin-less blob:-URLs in hosted viewer",True
a6aca3cabe581319d93c862cb0b85f71580cacfd,2018-02-23 17:18:52,Rob Wu,Don't block origin-less blob:-URLs in hosted viewer,False
a8a7d815e7218934af0d16bafd0d5aceb8718597,2018-02-22 19:11:37,Rob Wu,"Merge pull request #9490 from Rob--W/crx-migrate-pref-to-textLayerMode

Fix regressions in preferences in Chrome",True
9d55a1edc7f6fd2bc44e8f5d5f7408e695fba035,2018-02-22 19:10:30,Rob Wu,"Ignore managed prefs documented as ""Deprecated.""

Deprecated keys are removed from web/default_preferences.json,
but still maintained in managed_preferences.json.",False
94a49fa0483c928219a5669b1627ec2f1189021f,2018-02-22 19:09:58,Rob Wu,"[CRX] Make textLayerMode pref visible and add migration logic

In a1cfa5f4d7c8fcf55e9f3b51a23885dca8782915, the textLayerMode
preference was introduced, to replace the disableTextLayer and
enhanceTextSelection preferences.

As a result, the text selection preference was no longer visible
in Chrome (because preferences are only rendered by default for
boolean preferences, not for enumerations).

This commit adds the necessary bits to
extensions/chromium/options/options.{html,js}
so that the textLayerMode preference can be changed again.

Also, migration logic has been added to move over preferences
from the old to the new names:
- In web/chromecom.js, the logic is added to translate
  preferences that were set by an administrator (it is read-only,
  so this layer is unavoidable).
- In extensions/chromium/options/migration.js, similar logic is
  added, except in this case the preference storage is writable,
  so this migration logic happens only once.

The ""enhanced text selection"" mode is still experimental, so it
has been marked as experimental to signal that there may be bugs.
The list of tasks that block promotion to stable is at #7584.",False
99060e2485cacb8513e7bc50d88b70101069b1c9,2018-02-18 20:26:44,Tim van der Meij,"Merge pull request #9480 from Snuffleupagus/refactor-worker-options

[api-major] Move the worker related options from the global `PDFJS` object",True
fc83ce1aae895d7f23356f761fce031f9810839c,2018-02-18 16:26:27,Rob Wu,"[CRX] Restore migration logic for managed enableHandToolOnLoad pref

This partially reverts df0836b9b8bdfe7c8924a7409455abf7ba54b647.
The entry in preferences_schema.json is restored because that is
required to make managed preferences visible to the extension code.

The default key is still removed from default_preferences.json,
because this change only concerns the Chrome extension, not the
other parts of PDF.js. To account for the missing key, the
deprecated key was added back in chromecom.js

The key needs to be restored in preferences_schema.json too,
because that's the only way to make managed preferences visible.

I'm using `Object.assign`, which was introduced in Chrome 45,
so the preference module will break in Chrome 45 and earlier.
This is fine, because we do not support Chrome before 49.",False
a97901efb6ad4b1a5f315666e1ddb468a79f8f32,2018-02-16 17:52:35,Jonas Jenwald,"Move the `verbosity` option from the global `PDFJS` object and into `getDocument`/`PDFWorker` instead

Given the purpose of this option, it doesn't seem necessary to make it available through `GlobalWorkerOptions`.",False
fdd237617066438d78ee3bb7efb063526f05802b,2018-02-16 17:52:35,Jonas Jenwald,"Move the `postMessageTransfers` option from the global `PDFJS` object and into `getDocument`/`PDFWorker` instead

Given the purpose of this option, it doesn't seem necessary to make it available through `GlobalWorkerOptions`.",False
83d52518daba4c6d73ba6dd13c1769f3ea08d80e,2018-02-16 17:52:35,Jonas Jenwald,"[api-major] Refactor `PDFWorker` to be initialized with a parameter object, rather than a bunch of regular parameters",False
c3c1fc511db59f6a7de1409e6e552a337faf947e,2018-02-16 17:52:35,Jonas Jenwald,Move the `workerSrc` option from the global `PDFJS` object and into `GlobalWorkerOptions` instead,False
45adf33187864a4152932f810f80278574297ba3,2018-02-16 17:52:35,Jonas Jenwald,Move the `workerPort` from the global `PDFJS` object and into `GlobalWorkerOptions` instead,False
003bd4044b6a4a3dc586e97bed9fde055686f67c,2018-02-16 17:52:35,Jonas Jenwald,"Introduce a `GlobalWorkerOptions` object for (basic) Worker configuration

Compared to most other options currently/previously residing on the global `PDFJS` object, some of the Worker specific ones (e.g. `workerPort`/`workerSrc`) probably cannot be moved into options provided directly when initializing e.g. `PDFWorker`.
The reason is that in some cases, e.g. the Webpack examples, we try to provide Worker auto-configuration and I cannot see a good solution for that use-case if we completely remove the globally available Worker configuration.

However inline with previous patches for PDF.js version `2.0`, it does seem like a worthwhile goal to move away from storing options directly on the global `PDFJS` object, since that is a pattern we should avoid going forward. Especially since one of the (eventual) goals is to attempt to *completely* remove the global `PDFJS` object, and rely solely on exporting/importing the needed functionality.

By introducing the `GlobalWorkerOptions` we thus have larger flexibility in the future, if/when the global `PDFJS` object will be removed.",False
a89071bdefb90733fc2e671fcca61f6d03964e04,2018-02-16 17:44:21,Rob Wu,"Merge pull request #9470 from Snuffleupagus/issue-4888

Ensure that `JpegImage.getData` returns the correct data length when `forceRGBoutput == true` (issue 4888)",True
4f5fb782378e321f50c8047f3109310359c904c0,2018-02-15 06:35:40,Brendan Dahl,"Merge pull request #9401 from brendandahl/svg-fail

Make the test framework more resilient to errors.",True
53d19b619df13ee4be94a8b06a05231920bb6582,2018-02-15 06:32:19,Brendan Dahl,Make the test framework more resilient to errors.,False
538dda1096b36d76d75af9eb63a3675fedbe2d19,2018-02-15 03:17:33,Tim van der Meij,"Merge pull request #9479 from Snuffleupagus/refactor-viewer-options

[api-major] Refactor viewer components initialization to reduce their dependency on the global `PDFJS` object",True
2e780d4e2b6974613f001ba4cfd2c35739c56b03,2018-02-14 04:35:36,Tim van der Meij,"Merge pull request #9420 from Snuffleupagus/makeInlineImage-dict

Take the dictionary, and not just the image data, into account when caching inline images (issue 9398)",True
df0836b9b8bdfe7c8924a7409455abf7ba54b647,2018-02-14 04:30:15,Tim van der Meij,"Merge pull request #9475 from Snuffleupagus/rm-handToolPref

Remove the actual `enableHandToolOnLoad` preference (PR 9040 follow-up)",True
11ab3b5c000eb13e7ea5632ac36b1109ff7280b7,2018-02-14 01:14:21,Jonas Jenwald,"Ensure that `JpegImage.getData` returns the correct data length when `forceRGBoutput == true` (issue 4888)

With PDF.js version `2.0` we'll only support browsers with built-in `TypedArray` functionality, hence there doesn't seem to be any good reason not to implement this now.

Fixes 4888.",False
e95c11a7f06f4f3880b02b3a45d2e87551f8a3e7,2018-02-13 21:26:57,Jonas Jenwald,"Remove the undocumented `PDFJS.enableStats` option

In order to simplify things, the undocumented `enableStats` option was removed and `pdfBug` is now instead used to enabled general debugging *and* page request/rendering stats.
Considering that in the default viewer the `stats` was only used when debugging was also enabled, this simplification (code wise) definitely seem worthwhile to me.",False
6bc3e1fb930a8d2239be4785cf800b021d40e30b,2018-02-13 21:26:57,Jonas Jenwald,"Remove `version`/`build` from the global `PDFJS` object

There's no need to expose these properties multiple times, since they're already exported by `src/display/api.js`.",False
74ffd1d86596b5a67c4934333fcc127bea610a36,2018-02-13 21:26:56,Jonas Jenwald,"Pass in the `PDFJS.locale` option to `ExternalServices.createL10n`

This allows us to remove an otherwise unnecessary `PDFJS` dependency from the `web/genericcom.js` file.",False
77efed6626af11bd77ee7ef535c6e84ed060bca1,2018-02-13 21:26:56,Jonas Jenwald,"Replace the `PDFJS.disableWebGL` option with a `enableWebGL` option passed, via `BaseViewer`/`PDFPageView`, to `PDFPageProxy.render`

Please note that the, pre-existing, viewer preference is already named `enableWebGL`; fixes 4919.",False
a1cfa5f4d7c8fcf55e9f3b51a23885dca8782915,2018-02-13 21:26:54,Jonas Jenwald,"Replace the `disableTextLayer` and `enhanceTextSelection` options/preferences with a single `textLayerMode` option/preference

Rather than having two different (but connected) options for the textLayer, I think that it makes sense to try and unify this. For example: currently if `disableTextLayer === true`, then the value of `enhanceTextSelection` is simply ignored.

Since PDF.js version `2.0` already won't be backwards compatible in lots of ways, I don't think that we need to worry about migrating existing preferences here.",False
3a6f6d23d6190483ba7c8b4ca298e2bd209c6809,2018-02-13 18:58:40,Jonas Jenwald,"Move the `externalLinkTarget` and `externalLinkRel` options to `PDFLinkService` options

This removes the `PDFJS.externalLinkTarget`/`PDFJS.externalLinkRel` dependency from the viewer components, but please note that as a *temporary* solution the default viewer still uses it.",False
c45c3943649c3c10dab1c610a2b26cb6f69e92e6,2018-02-13 18:58:38,Jonas Jenwald,"Move the `imageResourcesPath` option to a `BaseViewer`/`PDFPageView`/`AnnotationLayerBuilder` option

This removes the `PDFJS.imageResourcesPath` dependency from the viewer components and the test-suite, but please note that as a *temporary* solution the default viewer still uses it.",False
fdf99c6af524a7b2fee675dc0cf80e04c7bb6cc5,2018-02-13 18:12:03,Jonas Jenwald,"Move the `maxCanvasPixels` option to a `BaseViewer`/`PDFPageView` option

This removes the `PDFJS.maxCanvasPixels` dependency from the viewer components, but please note that as a *temporary* solution the default viewer still uses it.",False
f4280368f7087a488f3f81d44de576633a874f77,2018-02-13 18:12:03,Jonas Jenwald,"Move the `useOnlyCssZoom` option to a `BaseViewer`/`PDFPageView` option

This removes the `PDFJS.useOnlyCssZoom` dependency from the viewer components, but please note that as a *temporary* solution the default viewer still uses it.",False
9e0a31f6624578e1bc5fc41fb0ed667f2624c3d6,2018-02-13 18:11:59,Jonas Jenwald,"Move viewer specific compatibility options from `src/shared/compatibility.js` and into a separate file

Unfortunately, as far as I can tell, we still need the ability to adjust certain viewer options depending on the browser environment in PDF.js version `2.0`. However, we should be able to separate this from the general compatibility code in the `src/shared/compatibility.js` file.",False
90ab9bafffdf82fdcc62aef5d300e3428a6bd8c1,2018-02-13 14:06:53,Jonas Jenwald,"Remove the actual `enableHandToolOnLoad` preference (PR 9040 follow-up)

This should have been removed as part of PR 9040, but was simply overlooked.",False
ea3d8450d218dd53619c72c934547fe57f22530f,2018-02-13 02:46:48,Tim van der Meij,"Merge pull request #9473 from Snuffleupagus/DownloadManager-a-click

Remove the non-`a.click()` case from the `DownloadManager`",True
f05e5c54601a261e21d6cae77b1f3090b8d30a0c,2018-02-12 21:13:47,Jonas Jenwald,"Take the dictionary, and not just the image data, into account when caching inline images (issue 9398)

The reason for the bug is that we're only computing a checksum of the image data itself, but completely ignore the inline dictionary. The latter is important, since in practice it's not uncommon for inline images to be identical but use e.g. different ColourSpaces.

There's obviously a couple of different ways that we could compute a hash/checksum of the dictionary.
Initially I tried using `MurmurHash3_64` to compute a hash of the keys/values in the dictionary. Unfortunately this approach turned out to be *way* too slow in practice, especially for PDF files with a huge number of inline images; in particular issue 2618 would regresses quite badly with this solution.

The solution that is instead implemented in this patch, is to compute a checksum of the dictionary contents. While this is a much simpler, not to mention a lot more efficient, solution there's one drawback associated with it:
If the contents of inline image dictionaries are ordered differently, they will not be considered equal with this approach which could thus lead to failures to cache repeated inline images. In practice this doesn't seem to be a problem in any of the PDF files I've tested, and generally I'd rather err on the side of *not* caching given that too aggressive caching can easily lead to rendering bugs.

One small, but somewhat annoying, complication is that by the time `Parser.makeInlineImage` is called, we no longer know the *exact* stream position where the inline image dictionary starts. Having access to that information is crucial here, and the easiest solution I could come up with is to track this in the current `Lexer` instance.[1]

With the patch, we're thus able to fix the referenced issues without incurring large regressions in problematic cases such as issue 2618.

Fixes 9398; also improves/fixes the `issue8823` reference test.

---

[1] Obviously I'd have preferred if this patch could be limited to `Parser.makeInlineImage`, without the need for this ""hack"", but I'm not sure what that'd look like here.",False
46fb55ceed7081f821d52011de91568152d060a9,2018-02-12 17:20:04,Jonas Jenwald,"Remove the non-`a.click()` case from the `DownloadManager`

With PDF.js version `2.0`, all the browsers we intend to support implements `a.click()`; see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click#Browser_compatibility.",False
be2674a0e8d4bf239e08eb33a42d1f4d15fde7ee,2018-02-12 17:17:38,Jonas Jenwald,"Merge pull request #9472 from timvandermeij/find-controller-methods

Improve the interface for `PDFFindController`",True
909dfa254ba824163b95818cdd644f0187604873,2018-02-12 01:01:59,Tim van der Meij,Move public methods above private methods in `web/pdf_find_controller.js`,False
b1203bce9790ce7fc6960eff14d8f5d785a97d9e,2018-02-12 00:58:34,Tim van der Meij,Prefix private methods with an underscore in `web/pdf_find_controller.js`,False
b3557483cb19f62c697c2dcf2be41dfd079519f9,2018-02-11 20:51:34,Tim van der Meij,"Merge pull request #9465 from Snuffleupagus/streams-unify-disableRange-contentLength

Attempt to unify the `disableRange`/`contentLength` handling in the various network streams",True
368a91b57705aa69a02e4992896560c4603b729d,2018-02-11 20:38:18,Tim van der Meij,"Merge pull request #9468 from Snuffleupagus/eslint-mozilla-plugin

Enable the `mozilla/avoid-removeChild` and `mozilla/use-includes-instead-of-indexOf` ESLint rules globally",True
1cf116ab88bfa155d54486c78c1a1209851e767c,2018-02-11 03:54:50,Jonas Jenwald,"Enable the `mozilla/use-includes-instead-of-indexOf` ESLint rule globally

This rule is available from https://www.npmjs.com/package/eslint-plugin-mozilla, and is enforced in mozilla-central. Note that we have the necessary `Array`/`String` polyfills and that most cases have already been fixed, see PRs 9032 and 9434.",False
2eb29409bc46460b4354fa09b39fccff608939bb,2018-02-11 03:54:50,Jonas Jenwald,"Enable the `mozilla/avoid-removeChild` ESLint rule globally

This rule is available from https://www.npmjs.com/package/eslint-plugin-mozilla, and is enforced in mozilla-central. Note that we have a polyfill for `ChildNode.remove()` and that most cases have already been fixed, see PRs 8056 and 8138.",False
9767b8a9f1ae7cf5250da648deb62b5f1c4d7292,2018-02-11 00:40:11,Tim van der Meij,"Merge pull request #9453 from Snuffleupagus/upstream-bug-1432992

Upstream the changes from: Bug 1432992 - Remove definitions of Ci, Cr, Cc, and Cu",True
f1413a9096c10029689cfadfadc22971e95a9f53,2018-02-10 02:47:25,Tim van der Meij,"Merge pull request #9466 from Snuffleupagus/refactor-PDFThumbnailViewer-scrollThumbnailIntoView

Refactor `PDFThumbnailViewer.scrollThumbnailIntoView` to avoid unnecessary DOM look-ups",True
7bb066494f3f15c396941c3532b83da6d3465c6b,2018-02-10 02:06:08,Tim van der Meij,"Merge pull request #9427 from Snuffleupagus/native-JPEG-decoding-fallback

Fallback to the built-in JPEG decoder when browser decoding fails, and attempt to handle JPEG images with DNL (Define Number of Lines) markers (issue 8614)",True
82416d4b1937d46f3983fece9b0f44358677668a,2018-02-09 19:13:11,Jonas Jenwald,"Refactor `PDFThumbnailViewer.scrollThumbnailIntoView` to avoid unnecessary DOM look-ups

The code responsible for highlighting/scrolling thumbnails is quite old, and parts of it hasn't really changed much over time.
In particular, the `scrollThumbnailIntoView` method is currently using `document.querySelector` in order to find both the new/current thumbnail element. This seems totally unnessary, since we can easily keep track of the current thumbnail (similar to the ""regular"" viewer) and thus avoid unnecessary DOM look-ups.

Furthermore, note how the `PDFThumbnailView` constructor is currently highlighting the *first* thumbnail. This is yet another leftover from older viewer code, which we can now remove and instead take care of in `PDFThumbnailViewer.setDocument`.
Given that `PDFThumbnailView` does not, nor should it, have any concept of which thumbnail is currently selected, this change also improves the general structure of this code a tiny bit.",False
ad06979cca677be6d68fdbb7a4765a65b1abaeb7,2018-02-09 18:20:48,Jonas Jenwald,"Attempt to unify the `disableRange`/`contentLength` handling in the various network streams

First of all, note how in both `fetch_stream.js` and `node_stream.js` we always overwrite the `this._contentLength` property even when the response headers doesn't actually contain any (valid) length information. This could thus result in the `length` parameter, as passed to the network stream, being completely ignored despite having no better information available.
Secondly, in `node_stream.js` the `this._isRangeSupported` property wasn't always updated correctly based on the response headers.",False
59028bac4292dd2db60c83431e7b94cc9aee9254,2018-02-09 17:19:02,Jonas Jenwald,"Upstream the changes from: Bug 1432992 - Remove definitions of Ci, Cr, Cc, and Cu

Please see:
 - https://bugzilla.mozilla.org/show_bug.cgi?id=1432992
 - https://hg.mozilla.org/integration/autoland/rev/b38d59f71915",False
25293628ffc5b0ab803d6368700d8e10d1e4a343,2018-02-08 18:27:43,Jonas Jenwald,"Merge pull request #9459 from tonyjin/respect-worker-src

Respect workerSrc if set",True
15c932c9e4f138177c249522ceba8697958c8be7,2018-02-08 13:39:32,Jonas Jenwald,"Merge pull request #9460 from Snuffleupagus/issue-9458

Use the correct stream position when reading `maxSizeOfInstructions` from the `maxp` table (issue 9458)",True
a18c65ae9fd247fe04329b8af291db552c1e0c53,2018-02-08 02:27:43,Jonas Jenwald,"Use the correct stream position when reading `maxSizeOfInstructions` from the `maxp` table (issue 9458)

Please refer to the `maxp` table specification, found at https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6maxp.html.

Fixes 9458.",False
3c33f32dfff94ad9f5a3caeb858d60486cbdd3bf,2018-02-08 01:01:18,Tony Jin,"Respect workerSrc if set

Respect user-defined workerSrc over internal overrides.",False
43f1f96b101c1fa8a7b839659a2e505275a82e42,2018-02-07 06:28:44,Brendan Dahl,"Merge pull request #9447 from Rob--W/crx-fetch-expose-headers

Expose some headers to fetch requests from the PDF.js Chrome extension",True
352389c0c6500cac49c29f8b573379429f718315,2018-02-06 19:36:02,Rob Wu,[CRX] Expose some headers to fetch requests,False
bf4166e6c99f73b940337940ab20d0735bed6664,2018-02-06 01:35:32,Jonas Jenwald,"Attempt to handle DNL (Define Number of Lines) markers when parsing JPEG images (issue 8614)

Please refer to the specification, found at https://www.w3.org/Graphics/JPEG/itu-t81.pdf#page=49

Given how the JPEG decoder is currently implemented, we need to know the value of the scanLines parameter (among others) *before* parsing of the SOS (Start of Scan) data begins.
Hence the best solution I could come up with here, is to re-parse the image in the *hopefully* rare case of JPEG images that include a DNL (Define Number of Lines) marker.

Fixes 8614.",False
80441346a3fe91b52a08331ff278da6a43cf0971,2018-02-06 01:35:31,Jonas Jenwald,"Fallback to the built-in JPEG decoder if 'JpegStream', in `src/display/api.js`, fails to load the image

This works by making `PartialEvaluator.buildPaintImageXObject` wait for the success/failure of `loadJpegStream` on the API side *before* parsing continues.

Please note that in practice, it should be quite rare for the browser to fail loading/decoding of a JPEG image. In the general case, it should thus not be completely surprising if even `src/core/jpg.js` will fail to decode the image.",False
76afe1018bb4fc7e08fc9bf16ad1084756bfc1c4,2018-02-05 21:31:35,Jonas Jenwald,"Fallback to built-in image decoding if the `NativeImageDecoder` fails

In particular this means that if 'JpegDecode', in `src/display/api.js`, fails we'll fallback to the built-in JPEG decoder.",False
2570717e77845fb04bd0ad4da459fc7de6f39ca4,2018-02-05 21:31:35,Jonas Jenwald,"Inline the code in `loadJpegStream` at the only call-site in `src/display/api.js`.js`

Since `loadJpegStream` is only used at a *single* spot in the code-base, and given that it's very heavily tailored to the calling code (since it relies on the data structure of `PDFObjects`), this patch simply inlines the code in `src/display/api.js` instead.",False
7f73fc9ace05ca1c64dda71b23e9a00465c7535e,2018-02-05 21:31:35,Jonas Jenwald,"Re-factor `PartialEvaluator.buildPaintImageXObject` to make it asynchronous

This is necessary for upcoming changes, which will add fallback code-paths to allow graceful handling of native image decoding failures.",False
ec85d5c6252f3eb9064db450a48b05a05853f9c4,2018-02-05 21:31:35,Jonas Jenwald,"Change the signature of `PartialEvaluator.buildPaintImageXObject` to take a parameter object

This method currently requires a fair number of parameters, which creates quite	unwieldy call-sites. When invoking `buildPaintImageXObject`, you have to remember not only which arguments to supply, but also the correct order, to prevent run-time errors.",False
6b7e2cbcd1fbfd68c17f92178ce47df7f6665c31,2018-02-05 20:19:00,Jonas Jenwald,"Merge pull request #9439 from Rob--W/print-event-comment

Update comment regarding beforeprint event support",True
a967f31950b63c5b3e43874188ff32218da32d19,2018-02-05 19:21:20,Rob Wu,"Update comment regarding beforeprint event support

""beforeprint"" / ""afterprint"" are standard features these days,
and Chrome added support for it in Chrome 63:
https://www.chromestatus.com/feature/5700595042222080",False
77135a2bc4cc93c7b82c89773cf84eb5f2a1aeae,2018-02-05 18:26:34,Jonas Jenwald,"[Firefox addon] Adjust the `minVersion` numbers in `install.rdf` and `update.rdf`

After the latest update of the minimum supported Firefox version, the development addon is no longer being signed. Hence this patch attempts to address that, by pinning the `minVersion` to a specific version number instead.

*Please note:* The version numbers were taken from https://addons.mozilla.org/en-US/firefox/pages/appversions/, so it ought to have worked.",False
0de49ed1e29e3d204e31ad24b623379ff98ac923,2018-02-05 16:53:54,Jonas Jenwald,Update l10n files,False
4e40a341a1efbcdfd481a0ef68e3a8a7fc1f01dd,2018-02-05 00:08:46,Tim van der Meij,"Merge pull request #9436 from timvandermeij/examples

Use `setPDFNetworkStreamFactory` in the `helloworld` and `svgviewer` examples",True
1f9878ea71de0ef4bfbc5ef7bc964d602ad256af,2018-02-05 00:02:47,Tim van der Meij,"Use `setPDFNetworkStreamFactory` in the `helloworld` and `svgviewer` examples

This patch fixes a regression from #9363, causing the examples not to
load anymore.",False
24f96e0f713c13ba1b0678bcc228ec2b77f81341,2018-02-04 23:45:31,Tim van der Meij,"Merge pull request #9435 from Rob--W/content-disposition-quoted-string-semi-space

Support spaces and semicolons in filename (Content-Disposition)",True
911659cd703a8762387eb4d67c848092763d39f7,2018-02-04 22:28:10,Rob Wu,Add tests for file names with spaces and semicolons,False
db9f71fe6bad91d6b8426abe63bb9054059560e1,2018-02-04 20:54:39,Tim van der Meij,"Merge pull request #9433 from Snuffleupagus/addon-minimum-nightly

[Firefox addon] Change the minimum supported version to Firefox Nightly, and remove no longer needed fallback code",True
2f19d9d9068a98b8502038e56b84bf3a2fd067d8,2018-02-04 20:49:40,Rob Wu,"Support spaces and semicolons in filename

Imports the following changes:
https://github.com/Rob--W/open-in-browser/commit/5b1afa7c29339627a7ed230473ab715d1364a740
https://github.com/Rob--W/open-in-browser/commit/7e2e35a38b8b4e981b11da7b2f01df0149049e92",False
7fbeeebbffe68787117aade4b3c00c4728aac81c,2018-02-04 20:42:03,Tim van der Meij,"Merge pull request #9434 from Snuffleupagus/upstream-bug-1339461

Upstream the changes from: Bug 1339461 - Convert foo.indexOf(...) == -1 to foo.includes() and implement an eslint rule to enforce this",True
712090eff8fec2003e4804367c42bf308d7b725e,2018-02-04 19:29:27,Jonas Jenwald,"Upstream the changes from: Bug 1339461 - Convert foo.indexOf(...) == -1 to foo.includes() and implement an eslint rule to enforce this

Yet another case where PDF.js code was modified in `mozilla-central` without the changes happening in the GitHub repo first; *sigh*.
If we don't upstream at least the changes in `extensions/firefox/`, any future update of PDF.js in `mozilla-central` will be blocked.

Please see:
 - https://bugzilla.mozilla.org/show_bug.cgi?id=1339461
 - https://hg.mozilla.org/mozilla-central/rev/d5a5ad1dbbf2",False
9ac9ef8ef17c3bfb5c9ba005e80ea6757add38e7,2018-02-04 19:01:59,Jonas Jenwald,"Polyfill `String.prototype.includes` using core-js

See https://github.com/zloirock/core-js#ecmascript-6-string.",False
986c8b56ca14b76a916af8f3436c495c0961808f,2018-02-04 18:37:18,Jonas Jenwald,"Update the `eslint-plugin-mozilla` package to the latest version

With the updated compatibility for the addon, we can thus remove a few no longer needed exceptions from `extensions/firefox/.eslintrc`.",False
4db49b6613401a336f68098656e56e1fca442895,2018-02-04 18:37:18,Jonas Jenwald,"Upstream the changes from: Bug 1431533 - Add ChromeUtils helpers for lazy module import

Please see:
 - https://bugzilla.mozilla.org/show_bug.cgi?id=1431533
 - https://hg.mozilla.org/mozilla-central/rev/e6a7b5e11ba8
 - https://groups.google.com/forum/#!topic/mozilla.dev.platform/xQaTdsrbd-g",False
08b2e25ac1188ca863e587ca98f1f402e5451611,2018-02-04 18:37:18,Jonas Jenwald,[Firefox addon] Remove no longer needed fallback code for older versions of Firefox,False
d1ffd610936f6bf45b7f69586bf80aae514106b0,2018-02-04 18:37:17,Jonas Jenwald,"[Firefox addon] Change the minimum supported version to (the current) Firefox Nightly release

At this point in time, trying to keep the development addon compatible with prior Firefox versions is already quite difficult and will become even harder very soon.

Please keep in mind that since Firefox 57, only WebExtensions are allowed/possible to install. The only exceptions are Firefox Nightly, with the `xpinstall.signatures.required` preference[1] set to `false`, and the (as of this writing) current ESR release.[2]

With the current compatibility situation, we thus need to effectively support both Nightly *and* ESR in the addon, while trying to keep up with current/upcoming changes in `mozilla-central`. With old addons no longer being officially supported, the amount of old code being removed/refactored is now increasing quite quickly.

*Please note:* The changes proposed here was to a large extent prompted by bugs such as:
 - https://bugzilla.mozilla.org/show_bug.cgi?id=1431533 (already landed)
 - https://bugzilla.mozilla.org/show_bug.cgi?id=767640 (already landed)
 - https://bugzilla.mozilla.org/show_bug.cgi?id=1432992 (still open)

Upstreaming all of those changes for the `MOZCENTRAL` version of PDF.js, while also keeping the Firefox addon running in older versions of the browser, would quickly become non-trivial.
Since we're using the ruleset from `eslint-plugin-mozilla` for the addon files, which is enforced in `mozilla-central`, we must ensure that the neccessary changes are upstreamed to the PDF.js repo such that the `mozilla-central` version of PDF.js can still be updated without failures.

Trying to feature detect, for the `FIREFOX` build target, some of the changes in the referenced bugs would probably become both quite messy and (not to mention) difficult. E.g. with the upcoming and automatically defined `Cc, Ci, Cu, Cr` variables, any sort of feature detection might be tricky since those need to be defined in the global scope of the files in question.

Finally, given the amount of effort that we'd now need to spend to even attempt to keep the Firefox addon compatible, I just don't think it's worth the effort any more. Especially since the number of people that have, thus far, been doing this work is *very* low and those resources would be better spend elsewhere.
Unfortunately, this probably means that the development addon will no longer be compatible with release versions of Seamonkey. However the README has already mentioned, for quite some time, that support isn't guaranteed.

*In closing:* For all of the reasons mentioned above, I thus propose that we reduce the maintenance burden of the Firefox addon by only supporting the current Firefox Nightly.

---

[1] While the preference exists, and can be toggled, its value is ignored in non-Nightly versions of Firefox.

[2] There's unbranded builds of e.g. the release/beta versions of Firefox, where old and non-WebExtensions addons can be installed. However those builds can probably be assumed to be officially unsupported, and thus not recommended for users.",False
d42541d26b185acb38351698b87553d9350f9fbe,2018-02-04 14:03:37,Jonas Jenwald,"Merge pull request #9412 from timvandermeij/crypto

Implement the `AESBaseCipher` class and let the `AES128Cipher` and `AES256Cipher` classes extend it",True
73436c0d1222534f607750e9b6c4c2097b0fb666,2018-02-04 00:46:33,Tim van der Meij,Implement the `AESBaseCipher` class and let the `AES128Cipher` and `AES256Cipher` classes extend it,False
9a959e4df7e55122b2146140556960aad4ef0cb6,2018-02-04 00:46:29,Tim van der Meij,"Update the `AES128Cipher` and `AES256Cipher` implementations to be more similar

This commit is the first step for extracting a base class for the
`AES128Cipher` and the `AES256Cipher` classes. The objective here is to
make code changes (not altering the logic) to make the implementations
as similar as possible as found by creating a diff of both classes.

In particular, we extract the key size and cycles of repetitions
constants since they are different for AES-128 and AES-256. Moreover, we
rename functions to be similar.

In the `AES256Cipher` class, there was an additional assignment to
`this` in the decryption function. However, this was unnecessary because
the assignment would also be done when the loop was exited.",False
695a909a938695d95f7400eda2fae76409014b30,2018-02-03 23:16:38,Tim van der Meij,"Merge pull request #9426 from Snuffleupagus/issue-9425

Attempt to find the next valid marker when encountering invalid image data in `JpegImage.parse` (issue 9425)",True
f4a95de6942dd03ade7c25751d2fa8fcca5a2426,2018-02-03 20:31:19,Jonas Jenwald,"Attempt to find the next valid marker when encountering invalid image data in `JpegImage.parse` (issue 9425)

In the JPEG images in the referenced PDF file, the DHT (Define Huffman Tables) segments contain more data than expected based on the length parameter.

Fixes 9425.",False
29d77dedad84dafdfed04c8ca7d07b680c6cfce3,2018-02-02 13:51:58,Jonas Jenwald,"Merge pull request #9385 from Snuffleupagus/rm-SINGLE_FILE

[api-major] Remove the `SINGLE_FILE` build target and the `PDFJS.disableWorker` option",True
9c6a8801b1bf8f1a0c3ffb47bdd42eaf42a810e7,2018-02-02 03:20:29,Tim van der Meij,"Merge pull request #9424 from Snuffleupagus/package-update

Update all npm packages to the latest versions",True
8488eeadc4aa03e50e32f7e0be4c88b1e3499ef1,2018-01-31 20:21:03,Jonas Jenwald,Update all npm packages to the latest versions,False
39c5e1ed1a7e7c24d0df6f373e8d72ce8d4c5156,2018-01-31 17:22:10,Jonas Jenwald,Remove the (unnecessary) `WorkerMessageHandler` variable from the `setupFakeWorkerGlobal()` function in the `src/display/api.js` file,False
56a8c934dde6cce806b1d74fa80c181eb30bbb96,2018-01-31 17:22:10,Jonas Jenwald,"[api-major] Remove the `PDFJS.disableWorker` option

Despite this patch removing the `disableWorker` option itself, please note that we'll still fallback to loading the worker file(s) on the main-thread when running in environments without proper Web Worker support.

Furthermore it's still possible, even with this patch, to force the use of fake workers by manually loading the necessary file using a `<script>` tag on the main-thread.[1]
That way, the functionality of the now removed `SINGLE_FILE` build target and the resulting `build/pdf.combined.js` file can still be achieved simply by adding e.g. `<script src=""build/pdf.worker.js""></script>` to the HTML (obviously with the path adjusted as needed).

Finally note that the `disableWorker` option is a performance footgun, and unfortunately many existing third-party examples actually use it without providing any sort of warning/justification.

---

[1] This approach is used in the default viewer, since certain kind of debugging may be easier if the code is running directly on the main-thread.",False
a5aaf627540c5c4cae618503573419717e97db9a,2018-01-31 17:22:07,Jonas Jenwald,"[api-minor] Add a (static) `PDFWorker.getWorkerSrc` method that returns the current `workerSrc`

This method returns the currently used `workerSrc`, which thus allows obtaining the fallback `workerSrc` value (e.g. when the option wasn't set by the user).",False
c56f3f04dd253cc29a24c654e3caa58ae387a140,2018-01-29 19:14:44,Jonas Jenwald,"[api-major] Remove the `SINGLE_FILE` build target

Please note that this build target, and the resulting `build/pdf.combined.js` file, is equivalent to setting the `PDFJS.disableWorker` option to `true` which is a performance footgun.",False
55e3f97aa97ad648ef955203524bbdb5593671d1,2018-01-28 22:54:59,Tim van der Meij,"Merge pull request #9415 from Snuffleupagus/clitests-PDFNodeStream

Utilize `PDFNodeStream` to run more API unit-tests on Node.js/Travis",True
42c71cd99f8de4b81313652b0ef19b3fdc902914,2018-01-28 21:44:08,Jonas Jenwald,Utilize `PDFNodeStream` to run more API unit-tests on Node.js/Travis,False
fd242ad2c2191f5de32f6b158e15db8e012f9467,2018-01-26 21:02:18,Rob Wu,"Merge pull request #9410 from Rob--W/cleanup-chrome-compat

Cleanup code to drop support for Chrome < 49 in the Chrome extension",True
ff5ecc3f4c0e2e91649bb5614c6374b4e9c39c0b,2018-01-26 20:24:35,Rob Wu,"Remove work-around for old filesystem:-bug

https://crbug.com/362061 was fixed in Chrome 36, and the lowest
supported Chrome version in the extension is Chrome 49, so the
work-around for a filesystem:-bug in chromecom can be removed.",False
7268f4ec1b8b5ffc0259ae576dacb7b0dd450cec,2018-01-26 20:24:35,Rob Wu,[CRX] Add comment about ftp compatibility,False
838573abd45af8571a42192b17f824ee14088598,2018-01-26 20:24:35,Rob Wu,"[CRX] Clean up file/ftp handler

Merge ftp and file handler now their implementations are identical.
Remove redundant comment (the referenced Chrome bug has been fixed
a long time ago - https://crbug.com/302548 ).",False
85378fc98283c08617d30f763141d395c46d9e89,2018-01-26 20:24:35,Rob Wu,"[CRX] Remove feature-detect.js

All detected features were introduced in Chrome 35.
We don't support Chrome 34 and earlier, so drop the legacy code.",False
28c87ce9c61fecbdbfe56edb982a6a5cd9a0ed64,2018-01-26 19:06:31,Jonas Jenwald,"Merge pull request #9409 from Rob--W/compat-chrome-49

Fix Chrome 49 compatibility via polyfills",True
e904b8a67c1bb94a8286dd69292dbace33027d5c,2018-01-26 17:53:51,Rob Wu,"Drop third parameter to replaceState/pushState

This was introduced in #3582 to work around https://crbug.com/274024 .
The bug in Chrome has been fixed a long time ago (at least 33), so let's
simplify the code.",False
5d1c541702bd608d476d62bd4de051bb9b8d6171,2018-01-26 17:01:41,Rob Wu,"Enable some polyfills for compat with Chrome 49

Successfully tested with Chrome 49.",False
44025a3ec12d5d9969a7c2ba1079ba1d196339e0,2018-01-26 17:01:41,Rob Wu,"Explicitly state intended support in compatibility.js

Add comments with supported browser versions where missing.

Method:
- Use MDN compat tables if available.
- Otherwise test in Chrome (31+) otherwise.
  (the Chrome Web Store does not update older versions of
   Chrome, so probably nobody is interested in even older
   versions, even though there is an existing comment for
   Chrome<29 at `document.currentScript`).",False
628e70fbb5dea3b9066aa5c34cca70aaafef8db2,2018-01-26 14:45:41,Jonas Jenwald,"Merge pull request #9405 from Snuffleupagus/pr-9245-followup

Re-factor resetting of `StatTimer` instances to fix completely broken benchmarking (PR 9245 follow-up)",True
d33c763dd526c56f92acc95f95a2b5b7870d7d4d,2018-01-26 00:16:03,Jonas Jenwald,"Re-factor resetting of `StatTimer` instances to fix completely broken benchmarking (PR 9245 follow-up)

It turns out that PR 9245 unfortunately broke benchmarking completely, sorry about that!

The bug is that we were attempting to reset the current instance of `StatTimer`, instead of creating a new one as was previously done. By resetting the current instance, the `StatTimer` data fetched in `test/driver.js` is now wiped out since it points to the *same* underlying object.
This re-use of a `StatTimer` instance was asked for during review, and unfortunately I didn't test this thoroughly enough before submitting the final version of the PR.[1]

---

[1] Note that while I did test the benchmarking scripts with that PR *before* initially submitting it, I did however forget to do that after addressing the review comments which might explain why this problem went unnoticed.",False
b6c57d90887c1a936e2638e83cf88576aea8ca36,2018-01-23 23:56:42,Jonas Jenwald,"Merge pull request #8991 from janpe2/jbig2-huffman

Implement Huffman coding in JBIG2",True
5593c970e078b9d5f76ad698a0a619ec803a1bf9,2018-01-23 20:34:07,Jani Pehkonen,Implement Huffman coding in JBIG2,False
f0216484bcb09d50730101d74a227bd0dcd44a87,2018-01-21 19:38:14,Jonas Jenwald,"Merge pull request #9383 from Rob--W/better-content-disposition-parser

Better content disposition parser",True
974664651188def21c3a9aae9b01798ba00e51f8,2018-01-21 19:21:59,Tim van der Meij,"Merge pull request #9386 from shikhar-scs/remove-parsejbig2-function

removed parseJbig2 function",True
a4e907169efaadec79b75ad92101e0f35312b0b4,2018-01-21 18:01:12,Rob Wu,"Improve correctness of Content-Disposition parser

Re-uses logic from https://github.com/Rob--W/open-in-browser/blob/9f5fcae11cf6d99c503a15894f22efdfcd2075b7/extension/content-disposition.js
which is already covered by tests: https://github.com/Rob--W/open-in-browser/commit/6f3bbb8bbfc1e3e943200fffdb68d35075e82ddd",False
fe5102a27fac7235e14334664cfc7e6dcaa04a92,2018-01-21 16:15:09,Jonas Jenwald,"Merge pull request #9363 from Rob--W/fetch-http/s-only

Limit PDFFetchStream to http(s) in the Chrome extension",True
43e003cf5c4d7e2a2cb0b667411ed413ad8c5618,2018-01-20 19:49:06,Shikhar Agnihotri,removed parseJbig2 function,False
fad2a3f427db76033873200b77ecb137420a7119,2018-01-20 14:41:22,Jonas Jenwald,"Merge pull request #9384 from timvandermeij/remove-moznomarginboxes

Remove `moznomarginboxes`",True
81aa95b560a27e04982f72696a662b4cec1e9e78,2018-01-20 02:35:50,Tim van der Meij,Remove `moznomarginboxes`,False
0ffe9b9289cc5cddc0e6c4414518285c5ab31bcf,2018-01-19 21:58:47,Rob Wu,"Remove useless test from network_utils_spec.js

Remove ""returns null when content disposition is form-data"".
The name of the test is already misleading: It suggests that
the return value is null if the Content-Disposition starts with
""form-data"". This is not the case, anything with the ""filename""
parameter is accepted.

So, to correct this, one would have to rephrase the test description to
""returns null when content disposition has no filename"".
But this is already tested by the test called
""gets the filename from the response header"".

So, remove the test.",False
75dc2bbd359990ebb1c1484f204acf66c3cb8221,2018-01-19 03:58:50,Tim van der Meij,"Merge pull request #9379 from Snuffleupagus/contentDispositionFilename

[api-minor] Extract the Content-Disposition filename",True
69a8336cf16078d31c6ed0f9a36e9d659b0a3ade,2018-01-18 22:09:22,Jonas Jenwald,"Address the final round of review comments for Content-Disposition filename extraction

This patch updates the `IPDFStreamReader` interface and ensures that the interface/implementation of `network.js`, `fetch_stream.js`, `node_stream.js`, and `transport_stream.js` all match properly.
The unit-tests are also adjusted, to more closely replicate the actual behaviour of the various actual `IPDFStreamReader` implementations.
Finally, this patch adjusts the use of the Content-Disposition filename when setting the title in the viewer, and adds `PDFDocumentProperties` support as well.",False
eb1f6f4c24f00a308d065e4e4f3e4df50755196c,2018-01-18 22:08:44,Juan Salvador Perez Garcia,"Content disposition filename

File name is extracted from headers.",False
96c573ad387696c6efd24d080a44d592b50da703,2018-01-18 22:06:21,Jonas Jenwald,"Merge pull request #9345 from himanish-star/hide-download-button

Download button is now hidden for PDFs which are loaded from 'file://'",True
06b3bb8214ee364c351dbd3e4e668e2ccb8cbad0,2018-01-18 16:13:25,Soumya Himanish Mohapatra,Download button is now hidden for PDFs which are opened from 'file://',False
f774abc8d335712fb14ebc6dc262eb389363607b,2018-01-17 17:15:23,Jonas Jenwald,"Merge pull request #9368 from acchou/9362

end() is the official way to release a Writable stream",True
22a9274193918ade8834dbea1673376111b19539,2018-01-17 16:07:44,Jonas Jenwald,Update l10n files,False
2bc3d0ff917ec929f9374c95327c91350a558acd,2018-01-17 16:02:48,Jonas Jenwald,"Merge pull request #9360 from mmcev106/master

Fixed a javascript error in the mobile viewer example that prevented …",True
c8344016fa7c535d8709139bd44d5f1a499ee289,2018-01-17 03:06:54,Mark McEver,Fixed a javascript error in the mobile viewer example that prevented an alert from being displayed,False
b867c3299bc6314b276f2f14f90847063df93bde,2018-01-17 01:31:33,Andy Chou,end() is the official way to release a Writable stream,False
1ad33c4514d1bc090859bd44ffb0084fac2b1736,2018-01-16 02:35:48,Tim van der Meij,"Merge pull request #9364 from shikhar-scs/change-decodeURI-to-decodeURIcomponent

changed decodeURI to decodeURIComponent: Fixes #8987",True
32080f10816e7671d85330ef827722f9e3c8b1c6,2018-01-15 19:31:25,shikhar-scs,changed decodeURI to decodeURIComponent,False
237bc2ef9df204069c4996e14433e0a35123444a,2018-01-14 20:11:56,Tim van der Meij,"Merge pull request #9323 from juncaixinchi/master

Get correct path in node_stream on windows platform( issue #9020)",True
1c8cacd6b941d3076d85c4a8b3315dd775c7bc8b,2018-01-14 05:04:46,Rob Wu,"Limit PDFFetchStream to http(s) in the Chrome extension

The `fetch` API is only supported for http(s), even in Chrome extensions.
Because of this limitation, we should use the XMLHttpRequest API when the
requested URL is not a http(s) URL.

Fixes #9361",False
a7cb560f170ed6ace1fb758129972eb0daed3eb4,2018-01-13 20:22:31,Tim van der Meij,"Merge pull request #9343 from Snuffleupagus/btoa/atob-Node-polyfills

Restore the `btoa`/`atob` polyfills for Node.js",True
8e278d9a458d8d65a963025bceb8381238f545cc,2018-01-13 18:43:24,juncaixinchi,Get correct path in node_stream on windows platform,False
0e1b5589e7a54f979e5e572024b71222c9444ebc,2018-01-13 06:01:05,Jonas Jenwald,"Restore the `btoa`/`atob` polyfills for Node.js

These were removed in PR 9170, since they were unused in the browsers that we'll support in PDF.js version `2.0`.
However looking at the output of Travis, where a subset of the unit-tests are run using Node.js, there's warnings about `btoa` being undefined. This doesn't appear to cause any errors, which probably explains why we didn't notice this before (despite PR 9201).",False
ba0a3aebd05fe85f5eef42260b1346d5856b6ba1,2018-01-13 02:37:15,Tim van der Meij,"Merge pull request #9356 from Snuffleupagus/PDFHistory-maxUid-pageHide-fixes

Two small `PDFHistory` fixes, concerning the `this._maxUid` property and the 'pagehide' event",True
d77fc8882ae38805b39b09d0abf05dc8c4bc2671,2018-01-13 02:31:22,Brendan Dahl,"Merge pull request #9352 from Snuffleupagus/issue-9285

Attempt to actually resolve ColourSpace names in accordance with the specification (issue 9285)",True
e20eacd484d0a887648803d7d15b22ecf0efeee3,2018-01-11 17:04:19,Jonas Jenwald,"Allow overwriting temporary, in addition to empty, history entries on 'pagehide'

When navigating away from the viewer, there's no good reason for disallowing replacement of a *temporary* history entry (in addition to empty ones).

Given that the current position is temporarily added to the browser history using a (short) timeout, the history entry will most likely already be correct when the 'pagehide' event fires. However, if the user is quick enough that might not always be the case, in which case the adjusted logic may help.",False
448a7a27cbbab63d72d2eecedb681d29b09e50b4,2018-01-11 16:39:01,Jonas Jenwald,"Ensure that the `PDFHistory._maxUid` property is correctly updated when initializing/navigating the history

This is a follow-up to commit e7721243399773fbc549ecb9ce83822df08dacde, in PR 8994, to cover a couple of cases missed there.",False
d0c8992e8aec2e4807a0e6db427432cda3d0c13d,2018-01-11 00:50:43,Jonas Jenwald,"Attempt to actually resolve ColourSpace names in accordance with the specification (issue 9285)

Please refer to the PDF specification, in particular http://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#G7.3801570

> A colour space shall be specified in one of two ways:
>  - Within a content stream, the CS or cs operator establishes the current colour space parameter in the graphics state. The operand shall always be name object, which either identifies one of the colour spaces that need no additional parameters (DeviceGray, DeviceRGB, DeviceCMYK, or some cases of Pattern) or shall be used as a key in the ColorSpace subdictionary of the current resource dictionary (see 7.8.3, ""Resource Dictionaries""). In the latter case, the value of the dictionary entry in turn shall be a colour space array or name. A colour space array shall never be inline within a content stream.
>
> - Outside a content stream, certain objects, such as image XObjects, shall specify a colour space as an explicit parameter, often associated with the key ColorSpace. In this case, the colour space array or name shall always be defined directly as a PDF object, not by an entry in the ColorSpace resource subdictionary. This convention also applies when colour spaces are defined in terms of other colour spaces.",False
5a52ee0a795ca41f27ede587dc494cd304dc81e1,2018-01-10 01:39:11,Jonas Jenwald,"Merge pull request #9350 from janpe2/svg-closeEOFillStroke

Implement `closeEOFillStroke` in SVG backend",True
3925aab0100989ebc9970286fb99b544c0610bd2,2018-01-10 00:52:52,Brendan Dahl,"Merge pull request #9282 from Snuffleupagus/TrueType-Collection

Add support for TrueType Collection fonts (issue 9262)",True
d1e1dbfc143997a8266a454bd9f8a2878d3d71c8,2018-01-09 23:12:12,Jani Pehkonen,Implement `closeEOFillStroke` in SVG backend,False
915e3f4c5f5d1e00ff7dce712a5751f091a7712f,2018-01-09 22:57:26,Jonas Jenwald,"Merge pull request #9099 from tiriana/allow-dontFlip-in-PDFPageProxy-getViewport

Allows 'dontFlip' as third arg in PDFPageProxy.getViewport",True
3dfc540d0404f564c8181807de3a2de77058a0bb,2018-01-09 17:38:24,Radomir Wojtera,Allows 'dontFlip' as third argument in PDFPageProxy.getViewport,False
d6c028b946856df7819488982ab365748b63de66,2018-01-09 03:01:08,Jonas Jenwald,"Add support for TrueType Collection fonts (issue 9262)

The specification can be found at https://www.microsoft.com/typography/otspec/otff.htm, under the ""Font Collections"" heading.

Fixes 9262.",False
a3b2456c7a33811010961ee111c58554dbc74ffc,2018-01-06 03:25:06,Tim van der Meij,"Merge pull request #9339 from bansalnitish/enter-key

Added enter key functionality for presentation mode",True
d60cba5065202f01a5b82bee42096677466cb408,2018-01-05 03:27:14,Nitish Bansal,Added enter key functionality for presentation mode,False
6b2ed504b7b11cfc1060bf9860db78d628c9a3ed,2018-01-04 04:04:34,Tim van der Meij,"Merge pull request #9336 from Snuffleupagus/jpx-SIZ

Correctly extract component data from ""Image and tile size"" (SIZ) markers in JPEG 2000 images",True
f475a0576cea974e89ed17dd899dcead9519e715,2018-01-04 04:00:50,Tim van der Meij,"Merge pull request #9335 from Snuffleupagus/eslint-no-multiple-empty-lines

Update the ESLint dependencies, and also tweak the `no-multiple-empty-lines` rules",True
873556865bfb32d5e6aebf8dbb25ed581ab839d7,2018-01-03 20:56:28,Jonas Jenwald,"Correctly extract component data from ""Image and tile size"" (SIZ) markers in JPEG 2000 images

This is something that I noticed while attempting to debug https://bugzilla.mozilla.org/show_bug.cgi?id=1374945.
Just looking at the code, the `YRsiz` parameter seemed immediately wrong and the fact that every component used the *same* data also looked strange.
Comparing with the specification, see https://www.itu.int/rec/dologin_pub.asp?lang=e&id=T-REC-T.800-200208-S!!PDF-E&type=items#page=37, confirmed that this is indeed incorrect.

Note that I haven't got any example of a PDF file that is fixed by this patch, but that might be more luck than anything else. Manually checking a couple of files with included JPEG 2000 images, the `Csiz`/`XRsiz`/`YRsiz` parameters were `1` which could explain why this hasn't been an issue before.

Obviously we shouldn't generally make changes to `core` code without adding tests, but in this case I'm simply not sure how to obtain/create one. However, since the existing code doesn't make sense this patch could hopefully be deemed acceptable anyway.",False
2db75a2a3a6d71f9ecc14a9e13671f3dc0e55df9,2018-01-03 18:02:57,Jonas Jenwald,"Update the ESLint dependencies, and also tweak the `no-multiple-empty-lines` rules

Since multiple empty lines is virtually unused in the code-base, and the few cases that do exist look like ""typos"", let's enforce greater consistency here; please see https://eslint.org/docs/rules/no-multiple-empty-lines.",False
25c7a8c215fe5eccc6a14ab209a8bbea226e9520,2018-01-03 02:48:35,Tim van der Meij,"Merge pull request #9331 from himanish-star/replace-num-pageNum

local num used instead of global pageNum (#9328)",True
a9fd1e7392df605ecac416a999a69a618e7044f4,2018-01-02 20:22:18,Soumya Himanish Mohapatra,num(local) used instead of pageNum(global) in prevnext.html for enhancement of logic,False
5bf4fb979e32feb6b9c9fab7bba917f9dfdf6514,2018-01-01 14:49:59,Jonas Jenwald,Update l10n files,False
ae65c66133d4427a972314a9c728651c787c798f,2017-12-31 19:54:21,Jonas Jenwald,"Merge pull request #9330 from timvandermeij/custom-style

Remove the `CustomStyle` class",True
d36c46b2c9b0dc526804aacea97609f2fdd49dad,2017-12-31 18:52:11,Tim van der Meij,"Remove the `CustomStyle` class

It is only used in a few places to handle prefixing style properties if
necessary. However, we used it only for `transform`, `transformOrigin`
and `borderRadius`, which according to Can I Use are supported natively
(unprefixed) in the browsers that PDF.js 2.0 supports. Therefore, we can
remove this class, which should help performance too since this avoids
extra function calls in parts of the code that are called often.",False
3f88bfcda6bc792358fed8ddd3eed07e974ca064,2017-12-31 17:12:59,Jonas Jenwald,"Merge pull request #9329 from timvandermeij/gulp-util

Stop using the deprecated `gulp-util` module",True
d688b8ea314408ab233346f5daa4b1bd1d7e2160,2017-12-31 00:43:52,Tim van der Meij,"Stop using the deprecated `gulp-util` module

The `gulp-util` module is now deprecated and authors are asked to stop
using it (refer to https://medium.com/gulpjs/gulp-util-ca3b1f9f9ac5 for
more information).

PDF.js does not rely on it that much, fortunately, so it's relatively
easy for us to remove the dependency. This patch does that by making the
following changes:

- Require `gulp-zip` version 4.1.0 or higher since they already removed
  their `gulp-util` dependency in that version.
- Replace `gulp-util.log` with the `fancylog` module as recommended in
  the article above.
- Replace `gulp-util.File` with the `Vinyl` module as recommended in the
  article above.

The only change I had to make for Vinyl is removing the `base` and `cwd`
lines since they may not be empty strings anymore. This way we fall back
to the defaults Vinyl provides, which for us doesn't matter since we
move the file afterwards anyway. Moreover, I used `vfs` for `vinyl-fs`
in the `Gulpfile` to avoid confusion with `vinyl` (which is also how the
documentation names the variable).

This is all we can do on our side; the other modules that still use
`gulp-util` must be updated upstream.",False
4cc0f8c7213058d53c707504a75ad1a83c4fa75c,2017-12-30 23:56:07,Tim van der Meij,"Merge pull request #9325 from Snuffleupagus/decodeACSuccessive-less-blur

Adjust `decodeACSuccessive` in src/core/jpg.js to improve the rendering quality of (progressive) JPEG images",True
c5700211d6dfff0ea36e13de8d96eaf100add062,2017-12-30 19:54:09,Jonas Jenwald,"Adjust `decodeACSuccessive` in src/core/jpg.js to improve the rendering quality of (progressive) JPEG images

I've been looking into the remaining point in 8637 about blurry images, to see if we could perhaps improve the rendering quality slightly there. After quite a bit of debugging, it seems that the issue is limited to certain progressive JPEG images.

As mentioned previously, I've got no detailed knowledge of the JPEG format, but this patch does seem to improve things quite a bit for the images in question.
Squinting at https://searchfox.org/mozilla-central/rev/6c33dde6ca02b389c52e8db3d22494df8b916f33/media/libjpeg/jdphuff.c#492-639, it seems reasonable that we should take the sign of the data into account. Furthermore, looking at the specification in https://www.w3.org/Graphics/JPEG/itu-t81.pdf#page=118, the ""F.2.4.3 Decoding the binary decision sequence for non-zero DC differences and AC coefficients"" section even contains a description of this (even though I cannot claim to really understand the details).",False
d6eed132e56e9c457de41dbd60761681747de340,2017-12-30 19:52:30,Jonas Jenwald,Correct the indentation in the `switch` statement in `decodeACSuccessive` in src/core/jpg.js,False
18d82d9c548749ae50db807aab8fb5ce4a7fd8e8,2017-12-30 18:30:25,Tim van der Meij,"Merge pull request #9287 from himanish-star/PDFjs-compatible-Librejs

PDFjs now compatible with Librejs",True
ad0dc7e89a92c89b4db2cd9d1bd736c76439c1e4,2017-12-30 03:01:35,Tim van der Meij,"Merge pull request #9327 from Snuffleupagus/JpegStream-DeviceGray-length

Avoid truncating JPEG images with DeviceGray ColourSpaces when using the `src/core/jpg.js` built-in decoder",True
8c4b7d0439bd74e8e70384a40f8db22227e41a57,2017-12-29 23:14:07,Jonas Jenwald,"Avoid truncating JPEG images with DeviceGray ColourSpaces when using the `src/core/jpg.js` built-in decoder

The bug that this patch fixes is limited to the built-in JPEG decoder, and was unearthed by PR 9260. The underlying issue has existed since PR 6984, where the contents of this patch ought to have been included (if it weren't for the fact that we had no *easy* way to test `src/core/jpg.js` back then).

*Please note:* The slight movement in the reference test is a result of using the `src/core/jpg.js` decoder, rather than the native browser one.",False
25bbff46927cb91cb72f62cbd681a20535d914f6,2017-12-29 03:47:30,Tim van der Meij,"Merge pull request #9320 from Snuffleupagus/pr-9095-followup

Avoid rendering errors by passing in the `webGLContext` when creating a new `CanvasGraphics` in `getColorN_Pattern` (PR 9095 follow-up)",True
5c2cd369d264ac0f7ebe9dba9bd251fb166b9411,2017-12-28 04:38:12,Tim van der Meij,"Merge pull request #9321 from Snuffleupagus/rm-IE-linkAnnotation-hack

Remove the `background` compatibility hacks for `linkAnnotation` in old versions of IE",True
ec21bd9626b09a7d82d785b9851b54be1ca7cab9,2017-12-28 02:32:38,Jonas Jenwald,"Merge pull request #9314 from timvandermeij/encodings

Implement unit tests for the encodings and fix missing items",True
03b0c76b7f01a6f2f9c6cc50710ac6f5982a89dd,2017-12-27 18:46:28,Jonas Jenwald,"Remove the `background` compatibility hacks for `linkAnnotation` in old versions of IE

With PDF.js version `2.0` we'll no longer support IE 9 and 10, hence these hacks can now be removed.",False
06605abbc2a5120399dc650bf9b962e5b2a11fe9,2017-12-27 18:20:53,Jonas Jenwald,"Avoid rendering errors by passing in the `webGLContext` when creating a new `CanvasGraphics` in `getColorN_Pattern` (PR 9095 follow-up)

This was an oversight in PR 9095, which unfortunately breaks rendering in some PDF files (e.g. the one from issue 6737).

It thus appears that we don't have any test-coverage for this code-path, and given the relative complexity of the PDF files affected by this bug I wasn't able to easily create a reduced test-case.
*Please note:* The linked test-case included in this patch is currently *not* rendered correctly (that'd be the PR 6606), but it at least gives us some test-coverage here.",False
fe30d4d468237864eb5a0609658a8372bfaa3ca0,2017-12-25 00:36:38,Tim van der Meij,"Merge pull request #9313 from Snuffleupagus/issue-9291

Add a fallback for non-embedded LucidaSans-Demi fonts (issue 9291)",True
c7af2db2ece01b8b372ef36a9bcee7c8022037c0,2017-12-24 22:44:40,Tim van der Meij,"Implement unit tests for the encodings and fix missing items

Initially I just implemented the unit tests, but quickly found that they
were failing my expectation of having a size of 256 items. Some of them
did contain 256 items and some did not. I looked up various resources
and figured that they indeed all need to have 256 items. One of the good
resources is https://github.com/davidben/poppler/blob/master/poppler/FontEncodingTables.cc

Aside from some missing `notdef` (empty string) entries at the end of
the arrays, which I assume causes issues since it may cause
out-of-bounds array access which in JavaScript gives `undefined`, there
was a `notdef` entry missing in the `MacExpertEncoding`, causing the
entries after that to be shifted. This fix for this is similar to the
one in #8589.

The unit tests verify that, for known encoding names, the return value
is not only an array, but that it is also of the right length and
contains only strings.",False
d4cd44fd168680b83b2a29bde288db885fd57ebc,2017-12-24 22:06:58,Jonas Jenwald,"Add a fallback for non-embedded LucidaSans-Demi fonts (issue 9291)

The PDF file in the issue uses a number of *embedded* versions of Lucida fonts, but for some reason does *not* embed the LucidaSans-Demi font. According to https://en.wikipedia.org/wiki/Lucida#Usages that one should be bold, so we can at least improve rendering here (even though it won't look perfect).

Fixes 9291.",False
1d4651b2e4ad349887e91dcfd2c9a83e295ee7c4,2017-12-24 00:06:24,Tim van der Meij,"Merge pull request #9311 from timvandermeij/unit-test-network-utils

Implement unit tests for the network utility code",True
957e2d420d298e421ec42cfbeb89bdca7dcdefd1,2017-12-23 23:54:11,Tim van der Meij,"Implement unit tests for the network utility code

This should provide 100% coverage for the file.",False
404cba878ce153097bf902f71c48ce3f069a99ff,2017-12-23 02:08:52,Tim van der Meij,"Merge pull request #9303 from Snuffleupagus/rm-pdfInfo-encrypted

[api-major] Remove the unused `encrypted` property from the `pdfInfo` object sent from the worker via the `GetDoc` message",True
e58f2f513a07ded9ebb9f77d34231d3f202cc843,2017-12-21 17:40:23,Jonas Jenwald,"[api-major] Remove the unused `encrypted` property from the `pdfInfo` object sent from the worker via the `GetDoc` message

I recall being confused as to the purpose of the `encrypted` property all the way back when working on PR 4750.

Looking at the history, this property was added in PR 1698 when password support was added to the API/viewer. However, its only purpose seem to have been to facilitate the addition of a `isEncrypted` function in the API. That function never, as far as I can tell, saw any use and was unceremoniously removed in PR 4144.

Since we want to avoid sending all non-essential data early during initial document loading (e.g. PR 4750), it seems correct to get rid of the `encrypted` property. Especially since it hasn't even been exposed in the API for over three years, with no complaints that I'm aware of.

Finally note that the `encrypt` property on the `XRef` instance isn't tied to the code that's being removed here. Given that we're calling `PDFDocument.parse` during `createDocumentHandler` in the worker which, via `PDFDocument.setup`, calls `XRef.parse` where the `Encrypt` data (if it exists) is always parsed.",False
e081a708c36cb2aacff7889048863723fcf23671,2017-12-21 02:45:47,Tim van der Meij,"Merge pull request #9294 from Snuffleupagus/rm-more-polyfills

Remove even more polyfills for old, and now unsupported, browsers",True
9ff3c6f99dc1c2debcd99158e09f7a1c3cab7065,2017-12-19 19:35:19,Jonas Jenwald,"Remove the `document.readyState` polyfill

This is only relevant for browsers that we don't intend to support with PDF.js version `2.0`.",False
6af45052c598d8026360408a5cd1488cf4f77682,2017-12-19 19:35:15,Jonas Jenwald,"Remove the `input.type` polyfill

This is only relevant for browsers that we don't intend to support with PDF.js version `2.0`.",False
cf88b7b2123beec63dbc1907eaa79c66f84c4477,2017-12-19 19:35:14,Jonas Jenwald,"Remove the `ImageData.set` polyfill

This is only relevant for browsers that we don't intend to support with PDF.js version `2.0`.",False
363e517acf2dd2f195300418de2adc66306e30a1,2017-12-19 19:20:18,Jonas Jenwald,"Remove the `HTMLElement.dataset` polyfill

This is only relevant for browsers that we don't intend to support with PDF.js version `2.0`.",False
4880200cd40e4194bcff8d47864fefcf6e62256b,2017-12-19 19:18:43,Jonas Jenwald,"Remove the `XMLHttpRequest.response` polyfill

This is only relevant for browsers that we don't intend to support with PDF.js version `2.0`.",False
8266cc18e7076f961c2c66e592c992705b2a9b6b,2017-12-19 19:16:04,Jonas Jenwald,"Remove the `webkitURL` polyfill

This is only relevant for browsers that we don't intend to support with PDF.js version `2.0`.",False
95ad956f6808e49fdedaabd00e35142acfdeb410,2017-12-19 15:13:50,Soumya Himanish Mohapatra,PDFjs now compatible with Librejs,False
8ae3fd49f9fa548f8ea10746fa89948bc74d47cf,2017-12-19 03:35:38,Tim van der Meij,"Merge pull request #9288 from Snuffleupagus/issue-9105-2

Handle PDF files with missing 'endobj' operators, by searching for the ""obj"" string rather than ""endobj"" in `XRef.indexObjects` (issue 9105)",True
1dc54ddb400bc9f72c6e7b39bfd222646a8251f6,2017-12-18 17:47:45,Jonas Jenwald,"Handle PDF files with missing 'endobj' operators, by searching for the ""obj"" string rather than ""endobj"" in `XRef.indexObjects` (issue 9105)

This patch refactors the searching for 'endobj', to try and find the next occurance of ""obj"" and then check if it was in fact an 'endobj' and continue searching otherwise.
This approach is used to avoid having to first find 'endobj', and then re-check the entire contents of the object and having to run (potentially expensive) regular expressions on arbitrary long strings.

Fixes 9105.",False
6bbe91079b1f20e9daa88f2d103d57ffb2bb341f,2017-12-16 02:41:32,Tim van der Meij,"Merge pull request #9272 from nveenjain/fix/8846

Replaced occurence of `throw new Error` with `unreachable`",True
6515b91118f5f76343f84a9b4511f8090e8ce509,2017-12-16 01:29:42,Jonas Jenwald,"Merge pull request #9276 from mozilla/loca-fix

Fix loca table when offsets aren't in ascending order.",True
9b51cea72482a8ffcc9b17cff79b8edeff6a3cf0,2017-12-15 22:50:28,Brendan Dahl,Fix loca table when offsets aren't in ascending order.,False
1135674647a215e8c19de8f439277f3275db592b,2017-12-14 12:58:50,Naveen Jain,Replaced occurence of `throw new Error` with `unreachable` where applicable,False
546cd2b67cade0ca5b083aff8346f4d50a40cd73,2017-12-14 03:19:41,Tim van der Meij,"Merge pull request #9271 from Snuffleupagus/bug-1424938

Handle broken, Ghostscript generated, Metadata that contains HTML character names (bug 1424938)",True
ad5ed370597fcbdcc8efc925a6e7c9dd6729f2a3,2017-12-13 19:02:47,Jonas Jenwald,"Handle broken, Ghostscript generated, Metadata that contains HTML character names (bug 1424938)

Please note that while this could be considered a regression in user-facing behaviour, I'm not convinced that it's really a regression as such since prior to PR 8912 the Metadata would fail to parse (with an XML error) and thus be ignored when setting the viewer title.
With the refactored Metadata parsing we're now able to parse this, which uncovered issues with a subset of broken Ghostscript Metadata that uses HTML character names.

Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1424938",False
b327633ad606ba54bded787c4e004d0aa1484b7c,2017-12-12 23:33:01,Jonas Jenwald,"Merge pull request #9267 from himanish-star/visibility-of-placeholder-text

Improve visibility of the findInput placeholder in Chrome",True
b28962df1e02c33d82d597decf28276e4b6b5348,2017-12-12 15:34:51,Soumya Himanish Mohapatra,Improve visibility of the findInput placeholder in Chrome,False
6ac9e1c5ed0d5f067872b8482724c171c79566b2,2017-12-10 21:27:10,Tim van der Meij,"Merge pull request #9249 from MichaelDeBoey/worker-loader-requires-webpack

'worker-loader' requires 'webpack' as peerDependency",True
095c63cc259ab54af5c53a8062eb2406d6290f3e,2017-12-10 21:20:50,Tim van der Meij,"Merge pull request #9260 from Snuffleupagus/rm-JpegStream.getBytes

Attempt to remove the special `JpegStream.getBytes` method and utilize the regular `DecodeStream` one instead",True
af14620b75093ad876c3518becf0019561ec8416,2017-12-10 21:13:53,Tim van der Meij,"Merge pull request #9256 from timvandermeij/log2

Use native `Math` functions in the custom `log2` function",True
c35bbd11b01f1965f3c5976fe3e0e2fff79d20f8,2017-12-10 21:05:17,Tim van der Meij,"Use native `Math` functions in the custom `log2` function

It is quite confusing that the custom function is called `log2` while it
actually returns the ceiling value and handles zero and negative values
differently than the native function.

To resolve this, we add a comment that explains these differences and
make the function use the native `Math` functions internally instead of
using our own custom logic. To verify that the function does what we
expect, we add unit tests.

All browsers except for IE support `Math.log2` for quite a long time
already (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log2).
For IE, we use the core-js polyfill.

According to the microbenchmark at https://jsperf.com/log2-pdfjs/1,
using the native functions should also be faster, in my testing almost
six times as fast.",False
84de1e9a920aa98b8d831e35d5d535cf6176af75,2017-12-10 18:01:08,Jonas Jenwald,"Attempt to remove the special `JpegStream.getBytes` method and utilize the regular `DecodeStream` one instead

Note that no other image stream implements a special `getBytes` method, which makes `JpegStream` look somewhat odd.

I'm actually not sure what purpose this methods serves, since I successfully ran all tests locally with it commented out. Furhermore, I also ran tests with an added `if (length && length !== this.bufferLength) { throw new Error('length mismatch'); }` check, and didn't get a single test failure in that case either.

Looking at the history, it seems that this code originated back in PR 4528, but as far as I can tell there's no mention in either commit messages nor PR comments of why it was necessary to add a ""special"" `getBytes` function for the `JpegStream`.
My assumption is that there's a good reason why this method was added, e.g. to address a *specific* regression in one of the reference tests. However, I did check out commit https://github.com/mozilla/pdf.js/commit/58f697f977f4a60974d91b09b2da67133227837c locally and ran tests with this method commented out, and there didn't seem to be any image-related failures in that case either!?

Hence I'm suggesting that we attempt to simplify this code slightly be removing this special `getBytes` method. However, please note that there's perhaps a *small* risk of regressions in an edge-case where we currently have insufficient test-coverage.",False
371ca514020fbe8ab5cb0e8770069a0905e921ec,2017-12-09 01:36:49,Jonas Jenwald,"Merge pull request #9207 from Standard8/use-mozilla-recommended

Switch to using mozilla/recommended configuration for extensions/firefox.",True
63c6157bdf8f51d747fd2c3e6e24b76106f1416e,2017-12-09 00:28:48,Mark Banner,Switch to using mozilla/recommended configuration for extensions/firefox.,False
af1d80d45e5e36191d244052c62577c5eb2383b7,2017-12-08 23:45:43,Brendan Dahl,"Merge pull request #9230 from Snuffleupagus/issue-9195

Add basic support for non-embedded Calibri fonts (issue 9195)",True
a5e3261b48ba3a3ef1e73bb6d0f81f8270e58652,2017-12-08 17:01:22,Jonas Jenwald,"Merge pull request #9062 from mozilla/no_high

Move char codes from high surrogate pair range into private use.",True
e3324d45bc24d416762e878822475b26bd144c48,2017-12-08 03:40:12,Michaël De Boey,'worker-loader' requires 'webpack' as peerDependency,False
694c4171d5c4b181ef102d51958b6b9d7e8153a8,2017-12-08 02:29:32,Tim van der Meij,"Merge pull request #9245 from Snuffleupagus/issue-5215

[api-major] Only create a `StatTimer` for pages when `enableStats == true` (issue 5215)",True
306999c32539cba43c9a4080ad41484432028463,2017-12-08 00:05:50,Brendan Dahl,"Move char codes from high surrogate pair range into private use.

Fixes #2884",False
518da6c6a9df7e388e6bc4523f21f4d2044b8459,2017-12-07 22:15:22,Brendan Dahl,"Merge pull request #9244 from Snuffleupagus/firefox-DEFAULT_PREFERENCES-eslint-disable-semi

[Firefox addon] Temporarily disable the ESLint `semi` rule, around the `DEFAULT_PREFERENCES` declaration, to prevent mozilla-central test errors",True
7c5ba9aad532960a7636ec0ba646e6877aeeefaa,2017-12-07 03:42:25,Jonas Jenwald,"[api-major] Only create a `StatTimer` for pages when `enableStats == true` (issue 5215)

Unless the debugging tools (i.e. `PDFBug`) are enabled, or the `browsertest` is running, the `PDFPageProxy.stats` aren't actually used for anything.
Rather than initializing unnecessary `StatTimer` instances, we can simply re-use *one* dummy class (with static methods) for every page. Note that by using a dummy `StatTimer` in this way, rather than letting `PDFPageProxy.stats` be undefined, we don't need to guard *every* single stats collection callsite.

Since it wouldn't make much sense to attempt to use `PDFPageProxy.stats` when stat collection is disabled, it was instead changed to a ""private"" property (i.e. `PDFPageProxy._stats`) and a getter was added for accessing `PDFPageProxy.stats`. This getter will now return `null` when stat collection is disabled, making that case easy to handle.

For benchmarking purposes, the test-suite used to re-create the `StatTimer` after loading/rendering each page. However, modifying properties on various API code from the outside in this way seems very error-prone, and is an anti-pattern that we really should avoid at all cost. Hence the `PDFPageProxy.cleanup` method was modified to accept an optional parameter, which will take care of resetting `this.stats` when necessary, and `test/driver.js` was updated accordingly.

Finally, a tiny bit more validation was added on the viewer side, to ensure that all the code we're attempting to access is defined when handling `PDFPageProxy` stats.",False
50b72dec6e3f0a959927f6ac1fcf69b7c76c7caf,2017-12-06 18:29:03,Jonas Jenwald,Convert `StatTimer` to an ES6 class,False
6b1eda3e1238e7a49e34edb37678764096890f40,2017-12-06 18:21:04,Jonas Jenwald,"Move `StatTimer` from `src/shared/util.js` to `src/display/dom_utils.js`

Since the `StatTimer` is not used in the worker, duplicating this code on both the main and worker sides seem completely unnecessary.",False
b15de69c524407b120b01c5a13c55245d556d89d,2017-12-06 01:22:39,Jonas Jenwald,"[Firefox addon] Temporarily disable the ESLint `semi` rule, around the `DEFAULT_PREFERENCES` declaration, to prevent mozilla-central test errors

While this doesn't actually fix the underlying issue, it should prevent the ESLint errors and thus make future PDF.js updates easier.
Compared to updating (and testing) the preprocessor, this seems like a reasonable workaround given its simplicity.",False
f299473697dab586946bbbe4e1aa288aaffc0ec6,2017-12-05 03:18:24,Tim van der Meij,"Merge pull request #9229 from timvandermeij/unit-tests-util

Implement unit tests for utility functions that perform type/value checks",True
a29c2d99445eb618c225edb2b6f4f32127339418,2017-12-05 03:06:45,Tim van der Meij,Implement unit tests for utility functions that perform type/value checks,False
08de65517758ef313d9cd1fd6d5224d00674c0f9,2017-12-03 21:53:33,Jonas Jenwald,"Add basic support for non-embedded Calibri fonts (issue 9195)

There's a number of issues with the fonts in the referenced PDF file. First of all, they contain broken `ToUnicode` data (`NUL` bytes all over the place). However even if you skip those, the `ToUnicode` data appears to contain nothing but a `IdentityH` CMap which won't help provide a proper glyph mapping.

The real issue actually turns out to be that the PDF file uses the ""Calibri"" font[1], but doesn't include any font files. Since that one isn't a standard font, and uses a fairly different CID to GID map compared to the standard fonts, we're not able to render the file even remotely correct.
To work around this, I'm thus proposing that we include a (incomplete) glyph map for Calibri, and fallback to the standard Helvetica font. Obviously this isn't going to look perfect, but it's really the best that we can hope to achieve given that the PDF file is missing the necessary font data.

Finally, please note that none of the PDF readers I've tried (Adobe Reader, PDFium in Chrome) were able to extract the text (which isn't very surprising, given the broken `ToUnicode` data).

Fixes 9195.

---

[1] According to Wikipedia, see https://en.wikipedia.org/wiki/Calibri, Calibri is (primarily) a Windows font.",False
de0bac727ebb172d5a87a6eb619006b0eec8f3dc,2017-12-03 17:31:17,Tim van der Meij,"Merge pull request #9228 from timvandermeij/unit-tests

Implement unit tests for the utility functions `bytesToString` and `stringToBytes`",True
70a28ab34f05238805fd5c1005047d9bbce159e6,2017-12-03 17:22:16,Tim van der Meij,Implement unit tests for the utility functions `bytesToString` and `stringToBytes`,False
98457d9e928f2199a5ff7e3496453e662b7ed85b,2017-12-03 00:12:59,Tim van der Meij,"Merge pull request #9227 from Snuffleupagus/sidebar-resize-left-button

Only resize the sidebar with the left mouse button",True
ac4496bcec1cf998ea279cb06a7bc52be4101f06,2017-12-02 23:35:17,Jonas Jenwald,Only resize the sidebar with the left mouse button,False
4894518cde9e54911974882148d39552782d6ce8,2017-12-01 02:28:46,Tim van der Meij,"Merge pull request #9214 from SehyunPark/patch-13

Add SehyunPark to AUTHORS",True
7d5ab905d9a48e9d0b3b4713aff9a7b45280c7c6,2017-12-01 02:24:16,Tim van der Meij,"Merge pull request #9218 from SehyunPark/patch-14

Add comma(,) in index.md",True
bfa227a5024a1cff86723052c7bac2c078957c73,2017-11-30 23:49:09,Brendan Dahl,"Merge pull request #9215 from Snuffleupagus/lower-MIN_SCALE

Lower the `MIN_SCALE` threshold to `0.10` (i.e. 10%) in the viewer, for better compatibility with documents containing very large pages",True
fffd5cb875eb6ae987b00c2c51bc7f8721ecf9c7,2017-11-30 18:05:00,Jonas Jenwald,Update l10n files,False
f3c50fe2f96477c4d429f6ec79463fa59c1452fb,2017-11-30 14:57:32,Jonas Jenwald,"Merge pull request #9192 from Snuffleupagus/issue-8229

Build a fallback `ToUnicode` map for simple fonts (issue 8229)",True
ac3e26b1a6ddfbb4508e359f6924d7b2f1ea721d,2017-11-30 06:20:00,SehyunRyanPark,"Update index.md

adding the appropriate comma(,) in order to make the sentence more understandable to the readers.",False
ba73bbc7b4d1fe0d43f7c543f63201cc6c75c72d,2017-11-29 19:06:57,Jonas Jenwald,"Lower the `MIN_SCALE` threshold to `0.10` (i.e. 10%) in the viewer, for better compatibility with documents containing very large pages

For sufficiently large page sizes, always limiting the minimum zoom level to 25% seem a bit too high. One example is pages, e.g. the first one, in:

Hence I think that it makes sense to lower `MIN_SCALE` slightly, since other PDF viewers (e.g. Adobe Reader) isn't limiting the minimum zoom level as aggressively. Obviously this will allow a greater number of pages to be visible at the same time in the viewer, but given that they will be small that shouldn't be an issue.

Note also that e.g. the `page-fit`/`page-width` zoom levels already allow `< MIN_SCALE` values, so I don't see why we shouldn't allow users the same functionality directly.",False
7b1c59ca55fec7a8ee0c5751009f6356741df3c1,2017-11-29 18:54:08,SehyunRyanPark,"Add SehyunPark to AUTHORS

Add SehyunPark to AUTHORS",False
fbf456f51eab9df4da1d35208906398793b87dd8,2017-11-29 06:59:16,Brendan Dahl,"Merge pull request #9201 from ydfzgyj/btoa

Add `btoa` back to domstubs.js",True
e32024387001e11fb38aee23ca3b5aac87441398,2017-11-29 03:16:43,Tim van der Meij,"Merge pull request #9206 from janpe2/svg-inv-images

Fix inverted 1-bit images in SVG backend",True
e78fe842c779e12943fb06b0e763c78ceafe1424,2017-11-29 01:08:58,Jonas Jenwald,"Merge pull request #9090 from janpe2/pattern-text

Fix pattern-filled text (embedded fonts only)",True
58b214eab360dbf1599fc9290d895a0dcdde36e7,2017-11-29 00:54:27,Jani Pehkonen,Fix inverted 1-bit images in SVG backend,False
06d083b04bfea8e94cb7c804e16e31a0754d204d,2017-11-28 23:10:22,Jani Pehkonen,Fix pattern-filled text,False
27a619246ffdc57090c2fcabb30991f0de52b939,2017-11-28 14:04:53,巴里切罗,Add `btoa` back to domstubs.js,False
3e34eb31d940f5e8add0af5ee9b262c9f3ad1462,2017-11-28 03:01:07,Tim van der Meij,"Merge pull request #9191 from timvandermeij/pushbuttons

Button widget annotations: implement support for pushbuttons",True
61e19bee43b5a0bfbeeef9e02aebda80413e5457,2017-11-26 19:15:15,Jonas Jenwald,"Build a fallback `ToUnicode` map for simple fonts (issue 8229)

In some fonts, the included `ToUnicode` data is incomplete causing text-selection to not work properly. For simple fonts that contain encoding data, we can manually build a `ToUnicode` map to attempt to improve things.

Please note that since we're currently using the `ToUnicode` data during glyph mapping, in an attempt to avoid rendering regressions, I purposely didn't want to amend to original `ToUnicode` data for this text-selection edge-case.
Instead, I opted for the current solution, which will (hopefully) give slightly better text-extraction results in PDF file with incomplete `ToUnicode` data.

According to the PDF specification, see [section 9.10.2](http://www.adobe.com/content/dam/acom/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#G8.1873172):

> A conforming reader can use these methods, in the priority given, to map a character code to a Unicode value.
> ...

Reading that paragraph literally, it doesn't seem too unreasonable to use *different* methods for different charcodes.

Fixes 8229.",False
0fe80df2a75a70162ab3bae56eb9fd943f4726ab,2017-11-26 18:39:48,Tim van der Meij,Button widget annotations: implement support for pushbuttons,False
ffbfc3c2a76dca7998cb123cbf7929925ff7049e,2017-11-26 18:00:29,Jonas Jenwald,Refactor the building of `ToUnicode` maps for simple fonts a helper method,False
b32d659dff415fc8d0fcbcbeda249468e376684e,2017-11-26 17:35:09,Tim van der Meij,"Merge pull request #9190 from Snuffleupagus/rm-app-pageRotation

Remove the `pageRotation` getter in `PDFViewerApplication`",True
c1f385eda9bdf4e60fc16d22ca5c09e018992be6,2017-11-26 15:09:24,Jonas Jenwald,"Remove the `pageRotation` getter in `PDFViewerApplication`

This was added, during the refactoring in PR 8556, to avoid outright breaking third-party users of the default viewer.
With PDF.js version `2.0`, where we're making API changes that aren't backwards compatible, we ought to be able to remove this piece of viewer code as well.",False
ada47fe3737867088e756429f9753d47aa2955b8,2017-11-25 18:35:04,Tim van der Meij,"Merge pull request #9189 from Snuffleupagus/WorkerTransport.getPage-signature

Remove the unused `capability` parameter from the `WorkerTransport.getPage` method",True
ab1f76cc37ec6f3132883cb99b7b184873ca7a1e,2017-11-25 16:19:33,Jonas Jenwald,"Remove the unused `capability` parameter from the `WorkerTransport.getPage` method

That parameter, originally named `promise`, has been unused for over five years; ever since commit https://github.com/mozilla/pdf.js/commit/f0687c4d50f4f674620b5cada5120421d2ba60c8 in PR 1531.",False
343f331b8b1c5f65065dc62f33991fcc59914abe,2017-11-25 03:55:06,Jonas Jenwald,"Merge pull request #9095 from Snuffleupagus/WebGLFactory

Split the existing `WebGLUtils` in two classes, a private `WebGLUtils` and a public `WebGLContext`, and utilize the latter in the API to allow various code to access the methods of `WebGLUtils`",True
59b5e1430170bdde7504d9f29ab7ffc78266778f,2017-11-25 02:24:47,Jonas Jenwald,"Split the existing `WebGLUtils` in two classes, a private `WebGLUtils` and a public `WebGLContext`, and utilize the latter in the API to allow various code to access the methods of `WebGLUtils`

This patch is one (small) step on the way to reduce the general dependency on a global `PDFJS` object, for PDF.js version `2.0`.",False
503bc95a2bc8b0a58640f05eb04f0c20aa73e335,2017-11-24 22:54:38,Jonas Jenwald,"Merge pull request #9187 from Standard8/use-services

Update eslint-plugin-mozilla, and enable mozilla/use-services rule.",True
3065197cc466a49e6ff78ee711be85852c01505f,2017-11-24 22:28:36,Mark Banner,"Update eslint-plugin-mozilla, and enable mozilla/use-services rule.",False
c236790fb49bcddc8bb42b0983bc4765810d502b,2017-11-24 02:28:33,Tim van der Meij,"Merge pull request #9182 from Snuffleupagus/viewer-ignore-other-file-errors

Don't display error messages, in the default viewer, for PDF files other than the current one",True
c7ebea40b9f073ef7a14011afacbe22b70c6854e,2017-11-23 18:30:02,Jonas Jenwald,"Don't display error messages, in the default viewer, for PDF files other than the current one

We've never attempted to limit the errors displayed in the default viewer to the current PDF file, but that's not really been a problem before. However after PR 7926, it's now possible to get password related error messages for *previously* opened PDF files in the default viewer.

**STR:**
 1. Open a password protected PDF file, e.g. `issue6010_1.pdf` from the test-suite.
 2. Cancel the password prompt.
 3. Open any new PDF file in the viewer.

**AR:**
The error UI is displayed, with a `No password given` message.

**ER:**
No error displayed, since it's only relevent for a now closed PDF file.

This is obviously a minor issue, caused by us now rejecting the still pending `pdfLoadingTask` during the `PDFViewerApplication.close` call, but I don't think that it (generally) makes sense to show errors if they're not relevant to the *currently* displayed PDF file.",False
58760edba9d488850ac2b92608cb5544c61a5c34,2017-11-23 02:53:43,Tim van der Meij,"Merge pull request #9170 from Snuffleupagus/rm-polyfills

Remove more polyfills for old browsers",True
3ed2290c5b9c72b80f9a7335f41351cd949d9712,2017-11-22 17:49:08,Jonas Jenwald,"Merge pull request #9179 from mgol/mailmap

Add mgol's name to AUTHORS, add .mailmap",True
a9135f5c35138db811e59cd2a736892440f61292,2017-11-22 15:16:11,Michał Gołębiowski-Owczarek,"Add mgol's name to AUTHORS, add .mailmap

In this way mgol's past contribution is mapped correctly.",False
cc47ef56ec434d6352279d58eddbcab0dec12b9f,2017-11-21 15:32:14,Jonas Jenwald,"Remove the `onclick` polyfill for old versions of Opera

This was only relevant for no obsolete versions Opera, that use the Presto engine. According to https://en.wikipedia.org/wiki/History_of_the_Opera_web_browser#Opera_2013, the last version affected was released in 2013.",False
d18b2a8e733995d9274285c7bc0c2b59f625607e,2017-11-21 15:31:52,Jonas Jenwald,"Remove the `classList` polyfill

This is only relevant for browsers that we don't intend to support with PDF.js version `2.0`.",False
4b15e8566b5c454f26ee4b2da57c3d726e6c019c,2017-11-21 15:30:55,Jonas Jenwald,"Remove the `Function.prototype.bind` polyfill

This is only relevant for browsers that we don't intend to support with PDF.js version `2.0`.",False
d8cb74d3e3804f045e7f39265fe4209cf4937d9a,2017-11-21 15:30:55,Jonas Jenwald,"Remove the `btoa`/`atob` polyfills

This is only relevant for browsers that we don't intend to support with PDF.js version `2.0`.",False
150ac0788f4f065336b74e419d769551b8a44bf3,2017-11-21 15:30:55,Jonas Jenwald,Remove IE9 specific `XMLHttpRequest` polyfills that utilize `VBArray`,False
935c5c587ffa109b8c868533eb62ecd7009e9805,2017-11-21 15:30:55,Jonas Jenwald,"Remove the `Object.defineProperty` polyfill

This is only relevant for browsers that we don't intend to support with PDF.js version `2.0`.",False
6f52fafdc0d5476db049e41140a6c82ca84eaaaa,2017-11-21 01:44:17,Tim van der Meij,"Merge pull request #9162 from SehyunPark/patch-8

Update index.md",True
b8e7a0b2f458ca42614fad5c6494a72893400442,2017-11-20 20:37:24,Jonas Jenwald,Update l10n files,False
0882288cdffe7140d42444572e04a4dd76ce3fa6,2017-11-20 18:17:19,SehyunRyanPark,"Update index.md

adding commas each in two sentences in order to make readers fully understand when reading index.md and to organize the context properly based on grammatical rules.",False
dad83bfb5bb3ffba94b292e1cf65969eacc4659f,2017-11-19 02:05:08,Tim van der Meij,"Merge pull request #9158 from timvandermeij/annotations-utf16be

Sanitize the display value for choice widget annotations",True
25b07812b9d8f21769f747cf5b72ec9c755c65ec,2017-11-19 01:07:27,Tim van der Meij,Sanitize the display value for choice widget annotations,False
9e8cf448b0f7351ec28ab4227aadf5c079923a71,2017-11-18 20:19:19,Tim van der Meij,"Merge pull request #9140 from Snuffleupagus/rm-console-polyfill

Remove the `console` polyfills",True
617cb86a433016fd5e2b9c76059103527aac9a00,2017-11-18 20:12:16,Tim van der Meij,"Merge pull request #9157 from SehyunPark/patch-6

Update index.md",True
edaf4b3173607cf19664ab764e5be0742b51c5a4,2017-11-18 20:11:15,Tim van der Meij,"Merge pull request #9037 from Snuffleupagus/refactor-streams-params

Re-factor how parameters are passed to the network streams",True
1093cc6d774110af20e28e250edcfa223da5f9a8,2017-11-18 19:45:03,SehyunRyanPark,"Update index.md

fixing grammatical error (demonstrate -> demonstrates)",False
f5fb87f021e79eb8966b00b349cf3c8d142cea46,2017-11-18 18:57:23,Tim van der Meij,"Merge pull request #9156 from SehyunPark/patch-5

Update README.md",True
095c8a988e8b2f5038f504554d24bcd06e46fa34,2017-11-18 17:59:20,SehyunRyanPark,"Update README.md

Clarifying what IRC stands for in order to make people understand clearly who want to use relay chat in irc.mozilla.org",False
ae07adf143a7680480fdb34df63910466448f79b,2017-11-18 03:56:36,Tim van der Meij,"Merge pull request #9073 from Snuffleupagus/image-streams-fixes

Fix the interface of `JpegStream`/`JpxStream`/`Jbig2Stream` to agree with the other `DecodeStream`s",True
c61d197398692abe7080aeedba2f19ec77240204,2017-11-17 05:01:14,Jonas Jenwald,"Merge pull request #9122 from wojtekmaj/change/remove-compatibility-from-examples

Remove mentions of compatibility.js from examples",True
9e0559264ce8a782b5a82c6e479e6c3903cdb2cc,2017-11-17 04:51:30,Wojciech Maj,Remove mentions of compatibility.js from examples,False
374709a40aaf62a3fe0c5129ec469457cdfebeaf,2017-11-17 03:19:15,Tim van der Meij,"Merge pull request #9126 from Snuffleupagus/viewer-move-hash-parameter-parsing

Extract parsing of debugging hash parameters into its own method in `PDFViewerApplication`",True
1d67d9dccd7dd13f47913ba288e821aacd73bfe5,2017-11-17 03:13:24,Tim van der Meij,"Merge pull request #9131 from janpe2/svg-empty-paths

Filling and stroking empty paths in SVG backend",True
42099c564fcad29b49bb846bf0399db3b7d71c9f,2017-11-16 14:04:51,Jonas Jenwald,"Remove the `console` polyfills

All browsers that we intend to support with PDF.js version 2.0 already supports `console` natively.",False
e162df59bb93bba654849018ac02ae0b5ae4f442,2017-11-15 22:18:34,Yury Delendik,"Merge pull request #9138 from Snuffleupagus/rm-requestAnimationFrame-polyfill

Remove the `requestAnimationFrame` polyfill",True
d5174cd826bdf2f1a11aed8123ebeabe97ae7626,2017-11-15 20:38:48,Jonas Jenwald,"Remove the `requestAnimationFrame` polyfill

According to https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame#Browser_compatibility and https://caniuse.com/#feat=requestanimationframe, the browsers we intend to support with PDF.js version 2.0 should all have native `requestAnimationFrame` support.

Note that the reason for indiscriminately polyfilling `requestAnimationFrame` in iOS, see PR 4961, was apparently because of a bug in iOS 6.
However, according to [Wikipedia](https://en.wikipedia.org/wiki/IOS_version_history#iOS_8): ""Support for iOS 8 ended in 2017."", hence the lowest version currently supported is iOS 9.",False
25d6bc9de9454a3aa076bc7055694d75a26bffe9,2017-11-15 14:38:57,Jonas Jenwald,"Extract parsing of debugging hash parameters into its own method in `PDFViewerApplication`

In order to move viewer related options from the global `PDFJS` object and into the initialization of the relevant components, we'll need to parse the hash parameters *before* calling `PDFViewerApplication._initializeViewerComponents`.",False
f9a0515452408eee2fd4c6c0c7e3310c95d4c951,2017-11-15 14:34:44,Jonas Jenwald,"Merge pull request #9125 from Snuffleupagus/rm-viewer-PDFJS-options

Remove compatibility code for unsupported browsers for a couple of `PDFJS` options",True
4e8f7070da236c6a3a8572ff141d6a4ce231bb94,2017-11-14 22:05:39,Jani Pehkonen,Filling and stroking empty paths in SVG backend,False
745cb73c65e315e44bf299a09f8d272d46a3b3f3,2017-11-14 19:58:50,Jonas Jenwald,"Remove `PDFJS.disableRange`/`PDFJS.disableStream` code for now unsupported browsers in `src/shared/compatibility.js`

We're currently disabling range requests and streaming for a number of configurations. A couple of those will no longer be supported (with PDF.js version 2.0), hence we ought to be able to clean up the compatibility code slightly.",False
eb3a1f24a3546ffa0642239263bd31775c131c8e,2017-11-14 19:58:50,Jonas Jenwald,"Remove the `PDFJS.disableHistory` code from `src/shared/compatibility.js`

This compatibility code is only relevant for browsers that will no longer be supported (with PDF.js version 2.0), hence we ought to be able to remove it.",False
2f936f88f493c546d9ae3afd8da1e2c7912a4680,2017-11-14 19:58:50,Jonas Jenwald,"Remove the `ignoreCurrentPositionOnZoom` viewer option

The only reason for adding this parameter in the first place, all the way back in PR 4074, was that the ""maintain document position on zooming"" feature was landed and backed out a couple of times before it finally stuck.
Hence it seemed, at the time, like a good idea to have a simple way to disable that behaviour. However, that was almost four years ago, and it's just not likely that we'd want/need to ever disable it now.

Furthermore I really cannot imagine why anyone would actually *want* to reset the position whenever zooming occurs, since it results in a quite annoying UX.

*So, to summarize:* Based on the above, I think that we should try to remove this parameter now. On the off chance that anyone complains, re-adding it shouldn't be difficult.",False
85e006720e51e84cda60efe616c6ff0a75739e3e,2017-11-14 19:50:45,Jonas Jenwald,"Merge pull request #9118 from wassupben/master

Added missing network stream for svgviewer example",True
9686f6652c98a5353cf8615a972e409804ed2557,2017-11-14 04:05:40,Tim van der Meij,"Merge pull request #9089 from yurydelendik/rm-chunks

Extracts OperatorList class and prepares for streaming",True
ead83b7a72e0011a8a55fa85c3824a67430264b6,2017-11-14 01:13:30,Ben Holmes,Added missing network stream for svgviewer example,False
36b83c14f9558b4b189fc60d16325fe367aadf00,2017-11-12 16:11:44,Tim van der Meij,"Merge pull request #9124 from Snuffleupagus/scrollThumbnailIntoView-multi-cols

Fix incorrect behaviour in `PDFThumbnailViewer.scrollThumbnailIntoView` for multiple columns of thumbnails",True
614ab4ef2c53088b1c3e51d7331bc8cc045db52e,2017-11-12 03:27:59,Jonas Jenwald,"Fix incorrect behaviour in `PDFThumbnailViewer.scrollThumbnailIntoView` for multiple columns of thumbnails

If the sidebar is resized such that the thumbnails are displayed in multiple columns, then scrolling the currently active thumbnail into view doesn't work correctly in some cases.
The reason is that the code in `PDFThumbnailViewer.scrollThumbnailIntoView` implicitly assumes that the thumbnails will be present in just *one* column. Since that may no longer be the case, it's not sufficient to simply check if the thumbnail is visible. Instead we must explicitly check that *all*, i.e. 100 percent, of the thumbnail is already visible, and otherwise scroll it into view.",False
23699cef1cb53769213e57d34699989ff7435370,2017-11-11 15:53:29,Jonas Jenwald,"Re-factor how parameters are passed to the network streams

*This patch is the result of me starting to look into moving parameters from `PDFJS` into `getDocument` and other API methods.*

When familiarizing myself with the code, the signatures of the various network streams seemed to be unnecessarily cumbersome since `disableRange` is currently handled separately from other parameters.
I'm assuming that the explanation for this is probably ""for historical reasons"", as is often the case. Hence I'd like to clean this up *before* we start the larger, and more invasive, `PDFJS` parameter re-factoring.",False
de5297b9ea28c5a508304c7270bc708effd42892,2017-11-11 15:52:16,Jonas Jenwald,"Fix the interface of `JpegStream`/`JpxStream`/`Jbig2Stream` to agree with the other `DecodeStream`s

The interface of all of the ""image"" streams look kind of weird, and I'm actually a bit surprised that there hasn't been any errors because of it.
For example: None of them actually implement `readBlock` methods, and it seems more luck that anything else that we're not calling `getBytes()` (without providing a length) for those streams, since that would trigger a code-path in `getBytes` that assumes `readBlock` to exist.

To address this long-standing issue, the `ensureBuffer` methods are thus renamed to `readBlock`. Furthermore, the new `ensureBuffer` methods are now no-ops.
Finally, this patch also replaces `var` with `let` in a number of places.",False
36593d6bbc563a0892f94888d2b244f711ef3cef,2017-11-11 15:52:16,Jonas Jenwald,Move `JpegStream` and `JpxStream` to their own files,False
5fa56f6a9df2f9961f3075277147aef9bc204b50,2017-11-10 06:16:48,Yury Delendik,For backwards compatibility: use addOp amount instead of queue size.,False
877c2d7743a69c64dedc40f58c7d71e24dbd9dfe,2017-11-10 06:16:48,Yury Delendik,Changing QueueOptimizer to be more iterative.,False
0052dc2b0dfec6d7784e215376ae231f72dda420,2017-11-10 00:55:30,Brendan Dahl,"Merge pull request #9110 from brendandahl/chunk-collector

Accumulate streamed PDF data into array of buffers.",True
61dd7d1c3a37029912310cfc7afe006303c85e7e,2017-11-09 10:02:29,Brendan Dahl,Accumulate streamed PDF data into array of buffers.,False
012d075604103805b5404dcc94ef0d14cd8d97e2,2017-11-07 02:50:43,Tim van der Meij,"Merge pull request #9106 from Snuffleupagus/eslint_no-var

Enable the `no-var` ESLint rule in the `/web` folder",True
04b93cf57e36f46a2cbb13c839a9b32fa76ff4e5,2017-11-07 02:44:41,Tim van der Meij,"Merge pull request #9026 from Snuffleupagus/sidebar-resize

Implement sidebar resizing for modern browsers, by utilizing CSS variables (issue 2072)",True
085e7a7a74964c8ab15b559467ce7847b4cadd1e,2017-11-06 20:28:24,Jonas Jenwald,"Implement sidebar resizing for modern browsers, by utilizing CSS variables (issue 2072)

By making use of modern CSS features, in this case [CSS variables](https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables), implementing sidebar resizing is actually quite simple. Not only will the amount of added code be fairly small, but it should also be easy to maintain since there's no need for complicated JavaScript hacks in order to update the CSS. Another benefit is that the JavaScript code doesn't need to make detailed assumptions about the exact structure of the HTML/CSS code.

Obviously this will not work in older browsers, such as IE, that lack support for CSS variables. In those cases sidebar resizing is simply disabled (via feature detection), and the resizing DOM element hidden, and the behaviour is thus *identical* to the current (fixed-width) sidebar.
However, considering the simplicity of the implementation, I really don't see why limiting this feature to ""modern"" browsers is a problem.

Finally, note that a few edge-cases meant that the patch is a bit larger than what the basic functionality would dictate. Among those is first of all proper RTL support, and secondly (automatic) resizing of the sidebar when the width of the *entire* viewer changes. Another, pre-existing, issue fixed here is the incomplete interface of `NullL10n`.

*Please note:* This patch has been successfully tested in both LTR and RTL viewer locales, in recent versions of Firefox and Chrome.

Fixes 2072.",False
d70263ced8486bd3085a6bb30862adb9fe9b2a47,2017-11-05 21:23:47,Jonas Jenwald,"Enable the `no-var` ESLint rule in the `/web` folder

https://eslint.org/docs/rules/no-var

Please note that two files were excluded:
 1. `web/debugger.js`, since there's code in other files that currently depend on the global availability of code in `web/debugger.js`. Furthermore, since that file isn't used in production, doing a ES6 conversion probably isn't a priority.

 2. `web/grab_to_pan.js`, since that file could be considered to be ""external"" code. We have made smaller changes to that file over the years, however doing a full ES6 `class` conversion might be a step too far!?",False
ad0c1fb2c06c769c47aff002b92782c5af22c354,2017-11-05 21:23:47,Jonas Jenwald,"Use ES6 notation, and replace `var` with `let`, in `web/pdf_viewer.component.js` and `web/pdfjs.js`",False
2b70e68ebaee923683cd739020ebb45f8a921d3c,2017-11-05 19:39:03,Tim van der Meij,"Merge pull request #9104 from Snuffleupagus/es6-chromecom

ES6-ify the code in `web/chromecom.js`",True
730928a4024d4544d58bb39eef0c0ea173f098c7,2017-11-05 17:56:06,Jonas Jenwald,"ES6-ify the code in `web/chromecom.js`

These changes consists mainly of replacing `var` with `let`.",False
f87c16bcc425adbbf984bb234e20baed19a03f2b,2017-11-04 21:23:11,Tim van der Meij,"Merge pull request #8993 from Snuffleupagus/sidebar-constant-position

Layout the sidebar in the same vertical position regardless of the viewer width (issue 4052, bug 850591)",True
99b62fe3d45571792b977302d046aa6cc75f4655,2017-11-04 17:33:19,Jonas Jenwald,"Merge pull request #9098 from xiemaisi/fix-lgtm-alerts

Fix issues found by lgtm",True
3ae37d1b06ac615eb24e927e66d57dcc1f81f64a,2017-11-03 17:06:48,Max Schaefer,Remove a few useless assignments.,False
bc8f673522a6eca4dd7be02a344a20b07f2db65f,2017-11-03 15:44:32,Max Schaefer,Remove spurious arguments to `NullStream` constructor.,False
3ab1a9922aeda655f22b18fd43e66113610a3751,2017-11-03 15:44:32,Max Schaefer,Rearrange a few declarations so that they precede their uses.,False
6521d2fd941f26a1b7ae9b97f71842e49f5ff241,2017-11-03 02:45:44,Tim van der Meij,"Merge pull request #9094 from Snuffleupagus/rm-TypedArray-polyfills

[api-major] Remove the TypedArray polyfills",True
97f1152d1e0bcef834857ee63255ce3944fed6c4,2017-11-02 03:18:34,Tim van der Meij,"Merge pull request #9093 from Snuffleupagus/rm-web-compatibility

[api-major] Stop bundling, and also remove, the `web/compatibility.js` file in pdfjs-dist",True
2dbd3f260373bac29b44aecff12ed4dd0d6ba90b,2017-11-01 15:01:28,Jonas Jenwald,[api-major] Remove the TypedArray polyfills,False
f0c98a7ab096fc4a7b1c66bad09c5d3d75be6459,2017-11-01 03:02:43,Jonas Jenwald,"[api-major] Stop bundling, and also remove, the `web/compatibility.js` file in pdfjs-dist

As suggested in PR 8102.",False
b46443f0c1ab2e8e304a715c75ae43c00b12a5c7,2017-11-01 02:54:20,Brendan Dahl,"Merge pull request #9077 from yurydelendik/v2

Version 2.0 merge",True
7d0fce73171ec1f8c2f537bdd628b529cb876645,2017-11-01 01:49:17,Tim van der Meij,"Merge pull request #9088 from Snuffleupagus/issue-9084

For non-embedded fonts, map softhyphen (0x00AD) to regular hyphen (0x002D) (issue 9084)",True
83e8398ff266223a79eb30cb6d380b50258c0110,2017-10-31 17:56:04,Jonas Jenwald,"For non-embedded fonts, map softhyphen (0x00AD) to regular hyphen (0x002D) (issue 9084)

In the PDF file, the `ToUnicode` data first maps the hyphen correctly, and then *overwrites* it to point to the softhyphen instead. That one cannot be rendered in browsers, and an empty space thus appear instead.

Fixes 9084.",False
92fcfce68534b9f23564ae72a9d50f33739af8c0,2017-10-31 01:14:01,Jonas Jenwald,"Merge pull request #9082 from brendandahl/issue7562

Overwrite glyphs contour count if it's less than -1.",True
85f544f55ac0043f3a2468a6c8da553e1ecd6a65,2017-10-30 23:59:58,Yury Delendik,Moves OperatorList and QueueOptimizer into separate file.,False
17037b5e512da1f9fecb7b6587e7e25ea6aeb622,2017-10-30 21:46:51,Brendan Dahl,"Overwrite glyphs contour count if it's less than -1.

The test pdf has a contour count of -70, but OTS doesn't
like values less than -1.

Fixes issue #7562.",False
7fbc9dbdc337e5f5c8dd1dc8fa15ef3a81958426,2017-10-30 18:48:25,Yury Delendik,Version 2.0,False
4e66c69d302053bf30fbb0013806a08fd48c7d73,2017-10-30 16:16:54,Jonas Jenwald,Update l10n files,False
1294247d1b579976bda75ed25f90420cefaa2ad7,2017-10-29 17:49:55,Tim van der Meij,"Merge pull request #9078 from Snuffleupagus/eslint-lines-between-class-members

Update ESLint and enable the `lines-between-class-members` rule",True
8f9d5488743bf78a092c5cad5b50515c79f67778,2017-10-29 16:11:13,Jonas Jenwald,"Update ESLint and enable the `lines-between-class-members` rule

This rule will help aid readability in `class`es, please see https://eslint.org/docs/rules/lines-between-class-members.",False
b4e25fb2e8d865ad40490ec57ff8f8b28872b8b1,2017-10-28 00:31:45,Yury Delendik,Merge remote-tracking branch 'mozilla/version-2.0' into v2,True
985c700bd564cc0449b3932b3f4d51801104360e,2017-10-27 22:56:51,Yury Delendik,"Merge pull request #9076 from yurydelendik/v1.10.88

Release 1.10.88",True
da0c9360fa113808ef18244339e85401c8d0709f,2017-10-27 21:02:55,Yury Delendik,Release 1.10.88,False
c62a19388a9e4598fb38e69b3d826a3f898e5087,2017-10-27 02:50:53,Tim van der Meij,"Merge pull request #9072 from Snuffleupagus/more-stringToBytes

Use `stringToBytes` in more places",True
5e627810e4153d5a940e704b3b72bf59dc37ccf9,2017-10-26 14:31:13,Jonas Jenwald,"Use `stringToBytes` in more places

Rather than having (basically) verbatim copies of `stringToBytes` in a few places, we can simply use the helper function directly instead.",False
ad74f6e7410420dc6ae27edc863a2ef906d77b57,2017-10-24 21:44:01,Jonas Jenwald,"Merge pull request #9046 from Snuffleupagus/ccitt-jbig2-stream-refactor

Extract the actual decoding in `CCITTFaxStream` into a new `CCITTFaxDecoder` ""class"", which the new `CCITTFaxStream` depends on",True
e94a0fd4e788831cd5dc3117a916b8ae29da81cd,2017-10-24 19:33:08,Jonas Jenwald,"Extract the actual decoding in `CCITTFaxStream` into a new `CCITTFaxDecoder` ""class"", which the new `CCITTFaxStream` depends on",False
bb35095083e3b930b9a42a2c970fb8b1fe4ce042,2017-10-24 15:30:40,Jonas Jenwald,"Move `CCITTFaxStream` and `Jbig2Stream`, from `src/core/stream.js`, to separate files",False
d71a576b302c6eeaa66b2affc055c796b4bd9399,2017-10-24 15:18:03,Jonas Jenwald,"Merge pull request #9045 from brendandahl/sani-name

Sanitize name index in compile phase of CFF.",True
6b12612a52d83b98bc0e004da7bc5104bbbad13c,2017-10-24 05:43:49,Brendan Dahl,"Sanitize name index in compile phase of CFF.

Fixes #8960",False
af0a8a64c02a94c90d515bb6bbbe816b674efacb,2017-10-24 02:04:00,Yury Delendik,Release 1.9 as stable.,False
725a2eb1e79ffccffc6c4b778f699cea23e1c394,2017-10-24 01:59:54,Yury Delendik,"Merge pull request #8986 from yurydelendik/version-1.10

Version 1.10",True
bab420e7ecbf3f7b4e73c54c929d3b0e3ecb357e,2017-10-24 00:10:14,Yury Delendik,"Merge pull request #9061 from yurydelendik/eccn

Adds ECCN response statement",True
a7f052282152232b2e87e5cd4dc4a0d1db438a0c,2017-10-24 00:01:36,Yury Delendik,Adds ECCN response statement,False
3ac4baff368c4e5799c250a7de7e9239b5944e8e,2017-10-23 13:24:39,Jonas Jenwald,Update l10n files,False
f6bebabbcb55a667979c6ef74e7994dc9adc6d47,2017-10-23 00:30:34,Tim van der Meij,"Merge pull request #9057 from Snuffleupagus/es6-print-code

Use `let`/`const` instead of `var` in the printing code",True
ef4a13534dde2b10d115c56b1add59ec636734d6,2017-10-23 00:28:41,Tim van der Meij,"Merge pull request #9058 from Snuffleupagus/web-more-let

Replace a few occurences of `var` with `let` in already ES6 converted web/ files",True
b0f524e65c490374cd4003948cab2f3f6c463147,2017-10-22 19:53:38,Jonas Jenwald,Replace a few occurences of `var` with `let` in already ES6 converted web/ files,False
d14cb5eb27497db32eaa518df9d129ff09f67483,2017-10-22 19:43:14,Jonas Jenwald,Use `let`/`const` instead of `var` in the printing code,False
a0ec980e63e7880547d886b758e2fa9b86889385,2017-10-21 19:45:11,Tim van der Meij,"Merge pull request #9055 from Snuffleupagus/core-js-Number

Replace `Number` polyfills with the ones from core-js",True
32aff7889a176e423bb229efba73a2e80fa72165,2017-10-21 19:44:16,Tim van der Meij,"Merge pull request #9054 from Snuffleupagus/core-js-Promise

Replace our `Promise` polyfill with the one from core-js",True
a1d61a75020f01dd8dd8cdc745bff2b4286ce151,2017-10-21 17:54:44,Tim van der Meij,"Merge pull request #9052 from Snuffleupagus/issue-template-extension

Attempt to clarify the meaning of ""extension"" in the ISSUE_TEMPLATE",True
dbbb763eaf8631095cff308275e2fd9275d00b14,2017-10-21 16:28:53,Jonas Jenwald,"Replace `Number` polyfills with the ones from core-js

Since we're already using core-js elsewhere in `compatibility.js`, we can reduce the amount of code we need to maintain ourselves.

https://github.com/zloirock/core-js#ecmascript-6-number",False
8684aa0ee54b5c0e3828713555bc46e677128915,2017-10-21 16:21:14,Jonas Jenwald,"Replace our `Promise` polyfill with the one from core-js

Since we're already using core-js elsewhere in `compatibility.js`, we can reduce the amount of code we need to maintain ourselves.

https://github.com/zloirock/core-js#ecmascript-6-promise",False
40466a85e013885ff170ddfb171f483287e210be,2017-10-21 15:02:03,Jonas Jenwald,"Attempt to clarify the meaning of ""extension"" in the ISSUE_TEMPLATE

Based on a number of opened issues, it seems that the ""Is an extension"" field might be causing some confusion as to its meaning. Without providing too much detail, I'm still thinking that we could attempt to clarify that it's referring to either of the *browser* extensions.",False
10fd590c09158ddcab9add69ddf75321aca9653e,2017-10-21 01:00:47,Tim van der Meij,"Merge pull request #9032 from Snuffleupagus/nativeImageDecoderSupport-2.0

Simplify the check, and remove the warning, for the `nativeImageDecoderSupport` API parameter",True
56c14e27e648d87375e89c9c4ee895c93630f3fe,2017-10-19 14:39:39,Jonas Jenwald,"Merge pull request #9044 from brendandahl/plain-text-charstring

Use charstring as plain text when lengthIV is -1.",True
fcc9943d040f8ff357f56e836a288f6dfe7bfdba,2017-10-19 02:49:59,Brendan Dahl,"Use charstring as plain text when lengthIV is -1.

Fixes #7769",False
17cc94db4e45522cdf11f9bfcf55155bb8da0e93,2017-10-18 01:28:45,Tim van der Meij,"Merge pull request #9034 from Snuffleupagus/javascript-null

[api-major] Change `getJavaScript` to return `null`, rather than an empty Array, when no JavaScript exists",True
e56bec5d6d7172bf0aca859cc5674f2793d1d7cc,2017-10-18 01:27:02,Tim van der Meij,"Merge pull request #9040 from Snuffleupagus/rm-handToolPref-migration

Remove the `enableHandToolOnLoad` preference migration code in `web/pdf_cursor_tools.js`",True
47448c27c39e892efa3c91484baa65cc0ee09cb1,2017-10-17 22:04:33,Jonas Jenwald,Remove the `enableHandToolOnLoad` preference migration code in `web/pdf_cursor_tools.js`,False
05911433864239ad1f6538d8412c32995a525e39,2017-10-17 02:52:00,Tim van der Meij,"Merge pull request #9033 from timvandermeij/pdfjs-next

[api-major] Remove the `PDFJS_NEXT` option",True
7d7edd9cc6d23831a97bba07c4bf625f6dce8324,2017-10-17 02:46:51,Tim van der Meij,"[api-major] Remove the `PDFJS_NEXT` option

Nothing uses this option anymore, so setting it is a no-op now. We can
safely remove it.

Use `SKIP_BABEL` (instead of `PDFJS_NEXT`) now if you want to skip Babel
translation for a build.",False
4c384e151eac11a328a234f4a3fc3d015e4871e1,2017-10-16 13:01:16,Jonas Jenwald,Update l10n files,False
b5794bb26b76a0cc3c87b10979e5477514999095,2017-10-16 12:41:39,Jonas Jenwald,"Simplify the check, and remove the warning, for the `nativeImageDecoderSupport` API parameter

As discussed in PR 8982.",False
bcb29063c1c2d01f105a4381ee2b7fe8e4d79a43,2017-10-16 12:41:39,Jonas Jenwald,"Polyfill `Object.values` and `Array.prototype.includes` using core-js

See https://github.com/zloirock/core-js#stage-4-proposals.",False
1cd1582cb9685e75fe8ea23366db65b3f2123a7e,2017-10-16 01:47:14,Jonas Jenwald,"[api-major] Change `getJavaScript` to return `null`, rather than an empty Array, when no JavaScript exists

Other API methods already return `null`, rather than empty Arrays/Objects, hence it makes sense to change `getJavaScript` to be consistent.",False
4fdb0f57d7a4f4a028a75710f8f09091b4d53924,2017-10-15 21:59:39,Tim van der Meij,"Merge pull request #9028 from Snuffleupagus/rm-all-deprecated

[api-major] Remove all remaining `deprecated` functions/methods",True
5dd1c9a98b627c59a4e0897dbfc31d1a7dfa1d5c,2017-10-15 20:41:26,Tim van der Meij,"Merge pull request #9031 from Snuffleupagus/rm-viewer-2.0-fallback-code

Remove all warning/fallback code for obsolete method signatures in `web/` files",True
816ffa29aa8fd4237e569d9d8b8a23c41a3c9d42,2017-10-15 20:27:30,Jonas Jenwald,Remove all warning/fallback code for obsolete method signatures in `web/` files,False
815bc53a167506731e1b5ee1ba858664a7226c92,2017-10-15 18:42:20,Tim van der Meij,"Merge pull request #9029 from Snuffleupagus/eslint--report-unused-disable-directives

Enable the `--report-unused-disable-directives` ESLint command line option",True
e955168cabb252fe20741b6edbecae39add47abe,2017-10-15 18:40:43,Tim van der Meij,"Merge pull request #9027 from Snuffleupagus/core-js-WeakMap

Replace our `WeakMap` polyfill with the one from core-js",True
04b46831c174e543dcbcfec83608ef97075342e5,2017-10-15 17:15:12,Jonas Jenwald,"Enable the `--report-unused-disable-directives` ESLint command line option

This option was added in [version `4.8.0` of ESLint](https://github.com/eslint/eslint/releases/tag/v4.8.0), which is already listed as the minimum version in our `package.json` file; please refer to https://eslint.org/docs/user-guide/command-line-interface#--report-unused-disable-directives for additional details.

Despite the caveat listed in the link above, I still think that using this option makes sense since it will help ensure that no longer necessary disable statements are removed.",False
0f90d5130c9b4c847d5efecac9a727c151156883,2017-10-15 16:57:10,Jonas Jenwald,[api-major] Remove all remaining `deprecated` functions/methods,False
2f321316013bdc6d45d07ff5477b53cbc3c5de05,2017-10-15 13:52:06,Jonas Jenwald,"Replace our `WeakMap` polyfill with the one from core-js

Since we're already using core-js elsewhere in `compatibility.js`, we can reduce the amount of code we need to maintain ourselves.

https://github.com/zloirock/core-js#weakmap",False
5ad945f462d3b8a6e6db534b6b5a75cd2b3400b6,2017-10-13 22:34:51,Brendan Dahl,Learning to spell.,False
7a0db8960d330793233a187efd8ee0a224cc0445,2017-10-11 21:47:28,Jonas Jenwald,"Layout the sidebar in the same vertical position regardless of the viewer width (issue 4052, bug 850591)

If we want to (eventually) make it possible to resize the sidebar, then having its width indirectly affect the toolbar is going to wreck havoc on the media queries used to show/hide buttons in the main toolbar (since many of them depend on the toolbar state, and thus its width).
Updating all of the media queries dynamically with JavaScript seems like a non-starter, given that it'd cause *very* messy code. It thus seem to me that we'd need to fix the position of the sidebar, to have any hope of (in the short term) addressing issue 2072.

Hence, I'm suggesting that the we always layout the sidebar in a consistent vertical position, and only animate the `viewerContainer` rather than the entire `mainContainer`.

Fixes 4052.
Fixes bug 850591.",False
853db85b7648397148c4b6ef77852578ee1aa8a1,2017-10-11 02:19:07,Tim van der Meij,"Merge pull request #9013 from Snuffleupagus/PDFHistory-nameddest

Fix a `PDFHistory` regression with document hashes of the `nameddest=...` form",True
33b1d1b20a24883691801bb4932d29e6d76e1c70,2017-10-10 01:28:54,Jonas Jenwald,"Fix a `PDFHistory` regression with document hashes of the `nameddest=...` form

Unfortunately I've just found out that this isn't working entirely correct; my apologies for accidentally breaking this in PR 8775.

Compare e.g. this link: http://mirrors.ctan.org/info/lshort/english/lshort.pdf#page.157, with this one: http://mirrors.ctan.org/info/lshort/english/lshort.pdf#nameddest=page.157.

Notice how in the *second* case, the history stops working correctly.

*The various edge-case regressions in the new `PDFHistory` code is reminding my why I put off the rewrite for so long :-(*",False
c80237729c840b2e1abe4da8d2ffc62a0f43ddd9,2017-10-08 18:34:59,Tim van der Meij,"Merge pull request #9009 from Snuffleupagus/issue-5767

Only warn about unsupported JavaScript, in the viewer, when non-empty actions exist (issue 5767)",True
b5a044b931f567d0e7441d28381d4a72ba9e049d,2017-10-08 17:59:12,Jonas Jenwald,"Only warn about unsupported JavaScript, in the viewer, when non-empty actions exist (issue 5767)

Some PDF files contain JavaScript actions that consist of nothing more that one, or possibly several, empty string(s). At least to me, printing a warning/showing the fallback seems completely unnecessary in that case.

Furthermore, this patch also makes use of an early `return`, so that we no longer will attempt to check for printing instructions when no JavaScript is present in the PDF file.

*Note:* It would perhaps make sense to change the API/core code, such that we ignore empty entries there instead. However, that would probably be considered a breaking changing with respect to backwards compatibility, hence this simple viewer only solution.

Fixes 5767.",False
ab4d5be19294e3dc2972efd07d1c1373cc8e7e85,2017-10-08 02:42:54,Jonas Jenwald,"Merge pull request #9008 from diegocr/patch-1

Mispelled isEvalSupported property at FontFaceObject() creation.",True
11b1daa72d334b57271004ed68643179fe506c74,2017-10-07 23:35:21,Diego Casorran,Mispelled isEvalSupported property at FontFaceObject() creation.,False
509d3728f1b18620c6718697303968f39c10ad59,2017-10-07 19:16:26,Tim van der Meij,"Merge pull request #8922 from Snuffleupagus/paintXObject-errors

Allow `getOperatorList`/`getTextContent` to skip errors when parsing broken XObjects (issue 8702, issue 8704)",True
bbec2ed1f1fd7dbbbc8e35e498172037334e5d55,2017-10-07 18:19:42,Tim van der Meij,"Merge pull request #9001 from Snuffleupagus/AnnotationLayerBuilder-cancel

Prevent the `annotationLayer` from, in some cases, becoming duplicated on the first page when the document loads",True
ee5862bd81998177f82c95f7c3ac324c05d08eb2,2017-10-07 15:04:53,Jonas Jenwald,"Prevent the `annotationLayer` from, in some cases, becoming duplicated on the first page when the document loads

I don't know if this is a regression, but I noticed earlier today that depending on the initial scale *and* sidebar state, the `annotationLayer` of the first rendered page may end up duplicated; please see screen-shot below.

[screen-shot]

I can reproduce this reliable with e.g. https://arxiv.org/pdf/1112.0542v1.pdf#zoom=page-width&pagemode=bookmarks.
When the document loads, rendering of the first page begins immediately. When the sidebar is then opened, that forces re-rendering which thus aborts rendering of the first page.
Note that calling `PDFPageView.draw()` will always, provided an `AnnotationLayerFactory` instance exists, call `AnnotationLayerBuilder.render()`. Hence the events described above will result in *two* such calls, where the actual annotation rendering/updating happens asynchronously.

For reasons that I don't (at all) understand, when multiple `pdfPage.getAnnotations()` promises are handled back-to-back (in `AnnotationLayerBuilder.render()`), the `this.div` property seems to not update in time for the subsequent calls.
This thus, at least in Firefox, result in double rendering of all annotations on the first page.

Obviously it'd be good to find out why it breaks, since it *really* shouldn't, but this patch at least provides a (hopefully) acceptable work-around by ignoring `getAnnotations()` calls for `AnnotationLayerBuilder` instances that we're destroying (in `PDFPageView.reset()`).",False
ec46967360d6557c5543260732afb9f85367908a,2017-10-06 22:56:24,Brendan Dahl,"Merge pull request #9002 from mozilla/revert-8971-close-handler

Revert ""Closes all promises/streams when handler is destroyed.""",True
fab59e0f917fce12c4e92fbb2129a72037cdb290,2017-10-06 22:25:28,Yury Delendik,"Revert ""Closes all promises/streams when handler is destroyed.""",False
460c4e38cc2cf62d692ccac7f8642c0fe6318b5d,2017-10-06 02:34:46,Tim van der Meij,"Merge pull request #8994 from Snuffleupagus/PDFHistory-forward

Fix a regression that (effectively) makes `PDFHistory.forward` a no-op",True
b9662e97d2c599ec61e9845ca493650187b75012,2017-10-06 02:21:57,Tim van der Meij,"Merge pull request #8992 from Snuffleupagus/RenderingCancelledException-API-2

[api-major] When rendering is cancelled, always reject with `RenderingCancelledException`",True
e3873b29fd4104a5ad3845d9e72a8e1e4fda0365,2017-10-06 00:01:29,Jonas Jenwald,"Merge pull request #8990 from pixelexel/fix-#8951

Added component example for single page viewer",True
bc396efb5429b20953faea7a172f16920d1c4e85,2017-10-05 23:59:56,Brendan Dahl,Reccomend attaching pdfs instead of links.,False
484ec3d09cd6137914dd594cff5ead189d481b19,2017-10-05 23:46:02,pixel,"Added component example for single page viewer

Checking for PDFJS.PDFSinglePageViewer instead

Added component example for single page viewer",False
e7721243399773fbc549ecb9ce83822df08dacde,2017-10-05 17:26:40,Jonas Jenwald,"Fix a regression that (effectively) makes `PDFHistory.forward` a no-op

*It appears that this accidentally broken in PR 8775.*

Note that `PDFHistory.forward` is only used with certain named actions, and these aren't that commonly used, which ought to explain why this error managed to sneak in.

Steps to reproduce the issue (and verify the fix):
 1. Navigate to e.g. http://mirrors.ctan.org/info/lshort/english/lshort.pdf
 2. Click on a couple of links, or outline items, such that the history is populated with a few entries.
 3. In the console, execute `PDFViewerApplication.pdfHistory.back()` one or more times, thus navigating back to a previous viewer position.
 4. In the console, execute `PDFViewerApplication.pdfHistory.forward() one or more times.

At the last step above, no (forward) navigation happens with the current `master`; now compare with this patch.",False
04d4faefc4b0b50a7210346c2f397bb8d7bfd73d,2017-10-05 17:08:25,Jonas Jenwald,"Remove the `this._currentUid` property from `PDFHistory`, since it's no longer needed

Commit https://github.com/mozilla/pdf.js/pull/8885/commits/938dffb06b8dcd54ea5c7c2ad531d145b5fdaa5e, in PR 8885, removed the only actual usage of `this._currentUid` and it can thus be removed.",False
43134d5b33ec5cde8b0d63a461882876dfd4fc42,2017-10-04 21:43:46,Jonas Jenwald,"Only handle `RenderingCancelledException` in the viewer code, when rendering is cancelled",False
3d79bd5e8764d59209adc46400933f886827162f,2017-10-04 21:39:28,Jonas Jenwald,"[api-major] When rendering is cancelled, always reject with `RenderingCancelledException`",False
e279d37181c952bfc86c4c74e6c834a3bf1184a8,2017-10-04 02:21:02,Tim van der Meij,"Merge pull request #8980 from LukasDrgon/patch-1

Add CDN links",True
f28a4b01977c573c380cf544098518105c6b4c23,2017-10-04 02:15:28,Tim van der Meij,"Merge pull request #8982 from timvandermeij/remove-deprecated

[api-major] Remove deprecated code",True
ee9b5a12da5470ffb8c1f79c39748c4aab75998b,2017-10-03 02:35:32,Tim van der Meij,"Remove the deprecated parameters for `getDocument` of the API

This is deprecated since October 2015 with a visible message, so we can
safely remove this now.",False
0817375d2fe36bc7d7ff003dc9f008af3daa3e90,2017-10-03 02:31:57,Tim van der Meij,"Remove the deprecated `disableNativeImageDecoder` parameter of the API

This is deprecated since May 2017 with a visible message, so we can
safely remove this now.",False
b651cfb4406d443e72d2e27d48d4bc33a8570cd0,2017-10-03 02:24:22,Tim van der Meij,"Remove the deprecated `UnsupportedManager` class of the API

This is deprecated since November 2015 with a visible message, so we
can safely remove this now.",False
918bd98a2f805e90fa44ba48b3a4de18dc81b881,2017-10-03 02:24:15,Tim van der Meij,"Remove the deprecated `destroy` method of the API

This is deprecated since October 2015 with a visible message, so we can
safely remove this now.",False
9b353ef407b694c10c755501a9693b8173a4e8e0,2017-10-03 02:24:01,Tim van der Meij,"Remove the deprecated parameter handling in the `render` method of the API

This is deprecated since January 2015 with a visible message, so we can
safely remove this now.",False
c2f1ff48d574a00f7f7d60e2edb0fa3020370cd8,2017-10-03 01:44:06,Lukas Drgon,"Add CDN link

Add CDN link

Add Popular CDNs

Add popular CDNs (site)

Moving section",False
ef02d3d8dac8b583ef182baa989df0c77b523783,2017-10-03 01:27:21,Tim van der Meij,"Merge pull request #8983 from Snuffleupagus/rm-unused

Remove unused helper code",True
75a13eeb385a001ebb45bb4223a42e9fbba2dbcf,2017-10-02 18:28:57,Yury Delendik,Version 1.10,False
5b67c7594cce0ff48e73420f2a1d08b12e3da0ba,2017-10-01 19:28:03,Jonas Jenwald,"Remove the unused `Util.sign` function from `src/shared/util.js`

This has been completely unused since commit https://github.com/mozilla/pdf.js/commit/10bb6c9ec052663f73e8ab168272bc98e4e902d4, in PR 2505, more than four and a half years ago.",False
65352c730fed32e5e263b68f0d083a7d71a7503f,2017-10-01 19:19:55,Jonas Jenwald,"Remove the unused `isWorker` property from `src/display/global.js`

This has been completely unused since commit https://github.com/mozilla/pdf.js/commit/1d12aed5cac6a0caccb0550e0aad4ef9f6bb263d, in PR 7126, almost one and a half years ago.",False
50b1a91c0273a8b419a1525827dc43e9e3f92ba0,2017-10-01 18:15:23,Tim van der Meij,"Merge pull request #8981 from timvandermeij/translations

Update translations",True
9a1f8b864ec7cc92e822e9aa75d77e59090df584,2017-10-01 18:12:00,Tim van der Meij,Update translations,False
9742e582754d2457df471d96c12e41a5e4b910bc,2017-10-01 18:06:15,Tim van der Meij,"Merge pull request #8977 from timvandermeij/updates

Update all packages to the most recent version",True
f9ce904fb767424f2e3eda36ab30c1028c11faf4,2017-10-01 02:17:23,Jonas Jenwald,"Merge pull request #8979 from timvandermeij/downloads

Transform Web Archive URLs to avoid downloading an HTML page instead of the PDF file",True
f73c9b75d9a540a913c0c42b5b11c009bf7418f4,2017-09-30 23:20:31,Tim van der Meij,"Transform Web Archive URLs to avoid downloading an HTML page instead of the PDF file

Moreover, adjust one linked test case that did not conform to the
standard Web Archive URL format and adjust one linked test case because
the link was dead.",False
0733b54e107ef92c0b5856343f0b6c411669efa8,2017-09-30 19:56:24,Tim van der Meij,"Update all packages to the most recent version

To support this, the following changes have to be made as well:

- Ignore `package-lock.json` since NPM creates it, but we should not
  have it in the repository.
- Switch from `babel-preset-es2015` to `babel-preset-env` to resolve
  the deprecation warning in the test logs. The latter is more recent
  and flexible, but should be the same functionality-wise.
- `transform` now needs to have the `utf-8` encoding option provided.
  If not given, it will call the callback with a `Buffer` object,
  which results in an unhandled promise rejection since what is
  returned from the callback is a string, not a `Buffer`.",False
d03e127434acfab5f35b3e34d651a19b84de8954,2017-09-30 02:58:53,Brendan Dahl,"Merge pull request #8971 from yurydelendik/close-handler

Closes all promises/streams when handler is destroyed.",True
3717757b39cca12948d8c005bff9703525d28b8f,2017-09-30 01:40:57,Tim van der Meij,"Merge pull request #8976 from Snuffleupagus/webpack-simpler-node-polyfills-disable

Simplify the disabling of Node polyfills, in `gulpfile.js`, since we're now using Webpack 3.x",True
1a3c6f7d9ac43bb1e4737724c6bc80584319ff55,2017-09-30 01:15:14,Jonas Jenwald,"Simplify the disabling of Node polyfills, in `gulpfile.js`, since we're now using Webpack 3.x

Webpack was updated a while back, but we apparently forgot to update `gulpfile.js` as well.",False
b1472cddbb07692089371dd041ad8b31717f6826,2017-09-29 20:44:21,Jonas Jenwald,"Allow `getOperatorList`/`getTextContent` to skip errors when parsing broken XObjects (issue 8702, issue 8704)

This patch makes use of the existing `ignoreErrors` property in `src/core/evaluator.js`, see PRs 8240 and 8441, thus allowing us to attempt to recovery as much as possible of a page even when it contains broken XObjects.

Fixes 8702.
Fixes 8704.",False
b3f84112643c31d0260460c19f1c67cf3acdbc07,2017-09-29 19:46:57,Jonas Jenwald,"Merge pull request #8968 from Snuffleupagus/PDFFunctionFactory-2

Split the existing `PDFFunction` in two classes, a private `PDFFunction` and a public `PDFFunctionFactory``, and utilize the latter in `PDFDocument` to allow various code to access the methods of `PDFFunction`",True
b8ec518a1e12b91cb56c620b4539debe6c9542c9,2017-09-29 19:00:53,Jonas Jenwald,"Split the existing `PDFFunction` in two classes, a private `PDFFunction` and a public `PDFFunctionFactory``, and utilize the latter in `PDFDocument` to allow various code to access the methods of `PDFFunction`

*Follow-up to PR 8909.*

This requires us to pass around `pdfFunctionFactory` to quite a lot of existing code, however I don't see another way of handling this while still guaranteeing that we can access `PDFFunction` as freely as in the old code.

Please note that the patch passes all tests locally (unit, font, reference), and I *very* much hope that we have sufficient test-coverage for the code in question to catch any typos/mistakes in the re-factoring.",False
5c961c76bbfee552da4b1e578427e1a7c68d2001,2017-09-29 19:00:40,Jonas Jenwald,"Remove the unused `inline` parameter from various methods/functions in `PDFImage`, and change a couple of methods to use Objects rather than plain parameters

The `inline` parameter is passed to a number of methods/functions in `PDFImage`, despite not actually being used. Its value is never checked, nor is it ever assigned to the current `PDFImage` instance (i.e. no `this.inline = inline` exists).
Looking briefly at the history of this code, I was also unable to find a point in time where `inline` was being used.

As far as I'm concerned, `inline` does nothing more than add clutter to already very unwieldy method/function signatures, hence why I'm proposing that we just remove it.
To further simplify call-sites using `PDFImage`/`NativeImageDecoder`, a number of methods/functions are changed to take Objects rather than a bunch of (somewhat) randomly ordered parameters.",False
f206ee56bf52f860f4a341e0becdf382379a5a6a,2017-09-29 18:20:57,Yury Delendik,"Merge pull request #8962 from Snuffleupagus/CMapReaderFactory-baseUrl-check

Check that `this.baseUrl` is defined before attempting to fetch any data in `DOMCMapReaderFactory`/`NodeCMapReaderFactory`",True
71b0e4e8182b1e4b75c7dac8510ec755b4d819df,2017-09-29 03:15:04,Yury Delendik,Closes all promises/streams when handler is destroyed.,False
a159c4f357ca00fd53bedaa54fe5e150e4dfb2c2,2017-09-28 16:04:57,Jonas Jenwald,Check that `this.baseUrl` is defined before attempting to fetch any data in `DOMCMapReaderFactory`/`NodeCMapReaderFactory`,False
25806d17f470b85a33c434e1c08fed6947dbba12,2017-09-27 22:21:57,Jonas Jenwald,"Merge pull request #8959 from Snuffleupagus/api-worker-version-check

Ensure that the same exact version of PDF.js is used in both the API and the Worker",True
7d3efe43a2e3b78fb7d99e5e8c5586b3ff643b04,2017-09-27 19:11:57,Jonas Jenwald,"Ensure that the same exact version of PDF.js is used in both the API and the Worker

I don't have a good example at hand right know, but I recall seeing custom deployments of PDF.js that bundle a *specific* version of the `build/pdf.js` file and then set `PDFJS.workerSrc` to point to https://mozilla.github.io/pdf.js/build/pdf.worker.js.
That practice seems really bad since, besides (obviously) causing unnecessary server load, it will very quickly result in a version mismatch between the `pdf.js` and `pdf.worker.js` files in those PDF.js deployments.
Such a version mismatch could easily lead to either breaking errors, or even worse slightly inconsistent behaviour for an API call (if the API -> Worker interface changes, which does happen from time to time).

To avoid the problems described above, I'm thus proposing that we enforce that the versions of the `pdf.js` and `pdf.worker.js` files must always match.",False
b8371870941c03142d1f475149c45a95716008e1,2017-09-26 17:46:56,Jonas Jenwald,"Merge pull request #8955 from brendandahl/issue7507

Overwrite maxSizeOfInstructions in maxp with computed value.",True
18e2321845dc9362c60d0c70fc4abe2a128465d1,2017-09-26 06:23:26,Brendan Dahl,"Overwrite maxSizeOfInstructions in maxp with computed value.

In issue #7507 the value is less than the actuall max size
of the glyph instructions causing OTS to fail the font.",False
a1f5c26f54ac4f3d37b1d89403629fb7050af28c,2017-09-25 13:09:21,Jonas Jenwald,Update l10n files,False
f3987bba237c814b9ed314b904263bc36f83eb5b,2017-09-24 23:11:37,Tim van der Meij,"Merge pull request #8724 from Snuffleupagus/PDFSinglePageViewer

Implement a `PDFSinglePageViewer` class (issue 8188)",True
10727572a23e8794d0e2d24c5b6df42e783538e0,2017-09-24 18:46:14,Jonas Jenwald,"Merge pull request #8950 from timvandermeij/polygon-polyline-annotations

Implement support for polyline and polygon annotations",True
c69a7a83da33cb04794a0b866b61259186041b15,2017-09-23 20:41:45,Tim van der Meij,"Merge pull request #8932 from janpe2/jbig2-sym-offset

JBIG2 symbol offsets",True
ed8c0ebfa75bf39d9e8b350b7c0168c9e84d19f9,2017-09-23 20:31:19,Tim van der Meij,Implement reference tests for polyline and polygon annotations,False
8ccad276b2178ff6d657ac35eef6586aee9faaf3,2017-09-23 20:22:47,Tim van der Meij,Implement support for polygon annotations,False
99b17a494d9ca91abd5cefa1b03e0f7b49185dc2,2017-09-23 20:07:23,Tim van der Meij,Implement support for polyline annotations,False
23daafd7289a779d2e8ffc25315f769d285dfb12,2017-09-23 19:58:04,Jonas Jenwald,"Implement a `PDFSinglePageViewer` class (issue 8188)

The new `PDFSinglePageViewer` class extends the previously created abstract `BaseViewer` class.

There's *a lot* of existing functionality in `PDFViewer` that depends on all the pages being loaded and synchronously available, once the `setDocument` method has been called.
Given that initializing `PDFPageView` instances requires passing a DOM element to which the page is attached, the simplest solution I could come up with is to append all pages to a (hidden) document fragment and just swap them (one at a time) into the viewer when page switching occurs.",False
5fa9cca8dd1d213b6dd0be9ee6ea911deb80b98a,2017-09-23 19:58:04,Jonas Jenwald,"Refactor `PDFViewer` to extend an abstract `BaseViewer` class

This patch introduces an abstract `BaseViewer` class, that the existing `PDFViewer` then extends. *Please note:* This lays the necessary foundation for the next patch.",False
d7198d3e178214e91e9c19ab8f8f095d1d4ffcbc,2017-09-23 19:58:04,Jonas Jenwald,"Rename `web/pdf_viewer.js` to `web/base_viewer.js`

Please note that the only reason for this change is to try and improve reviewability of later patches, by keeping the diffs more manageable.",False
40b89e9ba47e87782822e56e124e27e4949df745,2017-09-23 19:39:17,Tim van der Meij,"Merge pull request #8949 from Snuffleupagus/ColorSpace-rm-instanceof-AlternateCS

Remove the `instanceof AlternateCS` check in `ColorSpace.parse` since it's dead code",True
2aac9941714832ac8f86dfe42f28eba110e1a0c8,2017-09-23 18:14:58,Tim van der Meij,"Merge pull request #8928 from mukulmishra18/decode-file-path

Fix #8907: Decode URL to get correct path in node_stream.",True
8a084aff0fa041b4390438bce8fc777026d9769a,2017-09-23 18:06:10,Jonas Jenwald,"Remove the `instanceof AlternateCS` check in `ColorSpace.parse` since it's dead code

Looking at `ColorSpace.parseToIR`, it will do one of the following things when called:
 1. Return a String.
 2. Return an Array.
 3. Throw a `FormatError`.
 4. In one case, return the result of *another* `ColorSpace.parseToIR` call.

However, under no circumstances will it ever return an `AlternateCS` instance.

Since it's often useful to understand why code, which has become unused, existed in the first place, let's grab a hard hat and a shovel and start digging through the history of this code :-)

The current condition was introduced in commit https://github.com/mozilla/pdf.js/commit/c198ec432335956ef564fae1a5e9e9c51bfbe53a, in PR 794, but it was actually already obsolete by that time.
The preceeding `instanceof SeparationCS` condition predates commit https://github.com/mozilla/pdf.js/commit/a7278b7fbc029f2fdf92a5bddeb5465cd0a2d124, in PR 700.
That condition was originally introduced all the way back in commit https://github.com/mozilla/pdf.js/commit/4e3f87b60c231061433f5cd07d38120380f97408, in PR 692. However, it was made obsolete by commit https://github.com/mozilla/pdf.js/commit/9dcefe1efcef436f22beef72ef30176e8da619bd, which is included in the very same PR!

Hence we're left with the conclusion that not only has this code be unused for *almost* six years, it was basically never used at all save for a few refactoring commits that're part of PR 692.",False
d7b37ae7453220e75714e502268c89a826e989a7,2017-09-21 03:15:00,Tim van der Meij,"Merge pull request #8912 from timvandermeij/xml-parser

[api-minor] Replace `DOMParser` with `SimpleXMLParser`",True
abc864fca9547627b1a85c894f2edd24c5a52d11,2017-09-21 02:08:39,Jonas Jenwald,"Merge pull request #8938 from brendandahl/bug1392647

Use font's default width even when 0. (bug 1392647)",True
10ba292b4668bcf12ff2156fd31e9e62b91382e0,2017-09-21 00:08:30,Brendan Dahl,"Use font's default width even when 0.

Bug 1392647 has a PDF where the default width of the font
is 0. It draws some charcodes that don't have glyphs, but
we were wrongly using the 1000 default width for these
charcodes causing some text to be overlapping.",False
228106188245599d48eac1ce118e8469dacf009f,2017-09-20 02:39:07,Tim van der Meij,Enable metadata unit tests for Travis CI and Node.js,False
d4309614f9cca58b90b17eeb08a9ea83737ab1db,2017-09-20 02:39:07,Tim van der Meij,"Replace `DOMParser` with `SimpleXMLParser`

The `DOMParser` is most likely overkill and may be less secure.
Moreover, it is not supported in Node.js environments.

This patch replaces the `DOMParser` with a simple XML parser. This
should be faster and gives us Node.js support for free. The simple XML
parser is a port of the one that existed in the examples folder with a
small regex fix to make the parsing work correctly.

The unit tests are extended for increased test coverage of the metadata
code. The new method `getAll` is provided so the example does not have
to access internal properties of the object anymore.",False
5d1074c110d24878e312d8ed610aa2cf5c0ec9db,2017-09-20 02:13:23,Jani Pehkonen,Fix JBIG2 symbol offsets in text regions,False
fbd6e47aaf042213fc1fa568f6f2fc4069820e0e,2017-09-20 01:53:15,Jonas Jenwald,"Merge pull request #8901 from janpe2/ccitt-eofb-false

CCITTFaxStream problem when EndOfBlock is false",True
bc9afdf3c4d799c9d5ddd21351d74a2c990fcc0d,2017-09-20 01:43:59,Tim van der Meij,Convert `src/display/metadata.js` to ES6 syntax,False
3d99b8d706749e1f6b56bf2c70ac519815965c36,2017-09-20 00:49:40,Jani Pehkonen,CCITTFaxStream problem when EndOfBlock is false,False
e4c09c7cba9cb21db447e1e8d00051e97b40f7d8,2017-09-19 15:10:36,Mukul Mishra,Fix #8907: Decode URL to get correct path in node_stream.,False
9c2e9dae264a7664b494361906269ae04f788b16,2017-09-19 02:31:33,Tim van der Meij,"Merge pull request #8921 from THausherr/patch-2

support tiff predictor for 16bit",True
d75a497a6b55897bfcc1e806a78e25ad55862cbb,2017-09-19 01:54:25,Tilman Hausherr,"support tiff predictor for 16bit

(for issue #6289)
This does the same for 16 bit as the existing 8 bit tiff predictor code, an addition of the last word to this word.

The last two ""& 0xFF"" may or may not be needed, I see this isn't done in the 8 bit code, but I'm not a JS developer.",False
50bd4a5ac0d8c79d0652d2751fb259c3765deb47,2017-09-18 14:29:44,Jonas Jenwald,Update l10n files,False
c84c23c4cb4423054df88cba3c15967c71e40d47,2017-09-17 18:51:53,Tim van der Meij,"Merge pull request #8919 from Snuffleupagus/issue-8915

Ignore 'change' events that didn't originate in the viewer (issue 8915)",True
6c3856c841b90efa77a0554851456613d8a7ddd5,2017-09-17 15:04:21,Jonas Jenwald,"Ignore 'change' events that didn't originate in the viewer (issue 8915)

Rather that registering a 'change' event listener on the `window`, which will thus (unnecessarily) fire in *a number* of other situations such as e.g. when the user changes the pageNumber or the current search term, we could/should just register it directly on the dynamically created `fileInput` DOM element instead.
I can see no really compelling reason why we actually need to listen for `file` changes on the `window` itself, and this way we're also able to keep the `fileInput` related code confined to one part of the code which should aid readability.
Furthermore, in custom deployments, there's less risk that we're going to interfere with ""outside"" code this way.

Finally, preprocessor guards were added to the `webViewerOpenFile` function, since that code doesn't make sense in e.g. the extension builds.",False
f01f0fdaa78bc04dbf154dab5102cc5cdabcd4ac,2017-09-17 13:49:14,Jonas Jenwald,"Merge pull request #8917 from timvandermeij/stamp-annotations

Implement support for stamp annotations",True
400e4aae0e1dde316a15349f77d439ba6ad968bd,2017-09-16 20:07:50,Tim van der Meij,Implement support for stamp annotations,False
3be941d98298a999f2a56f8d0ee6615985afc63a,2017-09-16 19:41:03,Tim van der Meij,"Merge pull request #8909 from Snuffleupagus/PDFFunction-isEvalSupported

Check `isEvalSupported`, and test that `eval` is actually supported, before attempting to use the `PostScriptCompiler` (issue 5573)",True
27773f14d1c775169b5403517ec354a19e887126,2017-09-16 19:13:33,Tim van der Meij,"Merge pull request #8913 from Snuffleupagus/issue-8895

For /Filter entries containing `Name`s, ignore the /DecodeParms entry if it contains an Array (issue 8895)",True
eece66fa3e7062c62209bb491d2b1be45f8c02e9,2017-09-16 02:32:16,Jonas Jenwald,"For /Filter entries containing `Name`s, ignore the /DecodeParms entry if it contains an Array (issue 8895)",False
dc926ffc0f22a588e4e6a6808d69d3c02c958233,2017-09-15 15:32:45,Jonas Jenwald,"Check `isEvalSupported`, and test that `eval` is actually supported, before attempting to use the `PostScriptCompiler` (issue 5573)

Currently `PDFFunction` is implemented (basically) like a class with only `static` methods. Since it's used directly in a number of different `src/core/` files, attempting to pass in `isEvalSupported` would result in code that's *very* messy, not to mention difficult to maintain (since *every* single `PDFFunction` method call would need to include a `isEvalSupported` argument).

Rather than having to wait for a possible re-factoring of `PDFFunction` that would avoid the above problems by design, it probably makes sense to at least set `isEvalSupported` globally for `PDFFunction`.

Please note that there's one caveat with this solution: If `PDFJS.getDocument` is used to open multiple files simultaneously, with *different* `PDFJS.isEvalSupported` values set before each call, then the last one will always win.
However, that seems like enough of an edge-case that we shouldn't have to worry about it. Besides, since we'll also test that `eval` is actually supported, it should be fine.

Fixes 5573.",False
d0d7046129f69f2c933115919a516876b1d50882,2017-09-15 00:59:59,Yury Delendik,"Merge pull request #8910 from mukulmishra18/include-credentials

Fix #8888: Change behaviour of fetch to make it compatible with XHR.",True
ef7038fe343de4bb04801bfd44aed5dc41f768a0,2017-09-14 23:53:06,Mukul Mishra,Fix #8888: Change behaviour of fetch to make it compatible with XHR.,False
31a34335a04b5e4542f4e841dcf6f3338321a4b7,2017-09-14 01:55:38,Tim van der Meij,"Merge pull request #8900 from Snuffleupagus/ref-test-SimpleLinkService

Use the `SimpleLinkService` when running ""annotations"" reference tests",True
25c49de04863e6cd2d2891f36f26bb2222763b0e,2017-09-13 18:17:47,Yury Delendik,"Merge pull request #8904 from timvandermeij/svg-setattribute-stub

Provide a stub for `setAttribute` in order to use the SVG back-end with Node.js",True
cc654fd38da468838b85b80ce88d1a7c855fa432,2017-09-13 02:53:41,Tim van der Meij,"Provide a stub for `setAttribute` in order to use the SVG back-end with
Node.js

This patch fixes a regression from PR #8691 where we switched to using
`setAttribute` instead of `setAttributeNS` if no namespace is provided.",False
1ebbdc253a94c84a73b16d59e14b8ce467829f3f,2017-09-12 18:54:46,Jonas Jenwald,"Use the `SimpleLinkService` when running ""annotations"" reference tests

Rather than (basically) duplicating the `SimpleLinkService` in `test/driver.js`, with potential test failuires if you forget to update the test mock, it seems much nicer to just re-use the viewer component.

Note that `SimpleLinkService` is already bundled into the `build/components/pdf_viewer.js` file. Hence we only need to expose it similar to the other viewer components in that file, and make sure that the `gulp components` command runs as part of the test-setup.",False
f2618eb2e4db3921cc710edd90f795a8379136d3,2017-09-12 17:57:56,Jonas Jenwald,"Merge pull request #8808 from janpe2/issue8741

Fix color of image masks inside uncolored patterns",True
2916ed080dd7cb48cc59e37a34f2134785cb840f,2017-09-12 16:52:59,Jonas Jenwald,"Merge pull request #8893 from timvandermeij/annotations-css-dedup

Combine the common styles and overrides for the annotation layer reference tests",True
ba219965760d8521a7f3794184b653f93c65c5b9,2017-09-11 15:13:12,Jonas Jenwald,Update l10n files,False
23cbe294d578085c295e700963c092816b5bf7e3,2017-09-10 21:48:56,Tim van der Meij,"Combine the common styles and overrides for the annotation layer
reference tests

This patch allows us to use the common styles as used by the viewer as a
baseline for the annotation layer reference tests. They are extended
with a small set of overrides to ensure that all elements are visible
during the test.

The overrides file now only contains the absolutely necessary rules to
make all elements visible and is therefore no longer an almost verbatim
copy of the common styles.",False
3a84d582d34b0b793f5e177333de518f68fc700b,2017-09-10 19:40:58,Tim van der Meij,"Merge pull request #8891 from Snuffleupagus/es6-firefoxcom

ES6-ify the code in `web/firefoxcom.js`",True
46481eb2bf7b7841bd271fdfcdd59f642c12f2f2,2017-09-10 19:36:22,Tim van der Meij,"Merge pull request #8892 from Snuffleupagus/es6-genericcom-genericl10n

Replace `var` with `let` in `web/genericcom` and `web/genericl10n`",True
1d78935f3e4b78ba2b755ec719db57277b007622,2017-09-10 16:39:26,Jonas Jenwald,Replace `var` with `let` in `web/genericcom` and `web/genericl10n`,False
aaff3385ee192980c0fb0efe6a37f0b26d71913a,2017-09-10 16:21:33,Jonas Jenwald,"ES6-ify the code in `web/firefoxcom.js`

These changes consists mainly of replacing `var` with `let`/`const`, and finally converting the `DownloadManager` to a proper class.",False
320779e6edcf7b6528a3fd22e742837293b63398,2017-09-10 02:26:54,Tim van der Meij,"Merge pull request #8691 from timvandermeij/square-circle-annotations

Implement support for square and circle annotations",True
c04f9d6098bab011cc87ff4e21a59d7f837d8b12,2017-09-10 01:06:28,Tim van der Meij,Implement reference tests for square and circle annotations,False
44c116ac496f7452994b23debe372b0368aaa229,2017-09-10 01:06:27,Tim van der Meij,Implement support for circle annotations,False
cace2e9047c10c9e5dd0c9a667c33c122b37e24f,2017-09-10 01:06:27,Tim van der Meij,Implement support for square annotations,False
f7fd1db52f6c429ef87f2fc723224bd9ec0ea237,2017-09-10 01:06:27,Tim van der Meij,"Introduce `DOMSVGFactory`

This patch provides a new unit tested factory for creating SVG
containers and elements. This code is duplicated twice in the
codebase, but with upcoming changes this would need to be duplicated
even more. Moreover, consolidating this code in one factory allows
us to replace it easily for e.g., supporting Node.js. Therefore, move
this to a central place and update/ES6-ify the related code.

Finally, we replace `setAttributeNS` with `setAttribute` because no
namespace is provided.",False
437e9cb056dff58af1f256711ded8020f49c6611,2017-09-09 22:37:43,Tim van der Meij,"Merge pull request #8865 from Snuffleupagus/hide-unsupported-LinkAnnotation

Hide unsupported `LinkAnnotation`s (issue 3897)",True
e6d05be41a3556fbb47118d579f7dcaa630b3600,2017-09-09 20:03:28,Tim van der Meij,"Merge pull request #8868 from Snuffleupagus/save-rotation

Store the rotation in the `ViewHistory`/`PDFHistory` (issue 5927)",True
bd3f16bffdf4cea0b5325e9b154219afc6880f95,2017-09-09 18:54:23,Tim van der Meij,"Merge pull request #8889 from Snuffleupagus/more-Number-isInteger

Replace `value === (value | 0)` checks with `Number.isInteger(value)`",True
30b7a0f093d87d6e024332cb6cbb72f39c5e362b,2017-09-09 17:42:52,Jonas Jenwald,"Replace `value === (value | 0)` checks with `Number.isInteger(value)` in the `web/` folder

Rather than doing what (at first) may seem like a fairly obscure comparison, using `Number.isInteger` will clearly indicate the intent of the code.",False
8686baede54c992133a53f15e933cca878f5ae99,2017-09-09 17:42:52,Jonas Jenwald,"Replace `value === (value | 0)` checks with `Number.isInteger(value)` in the `src/` folder

Rather than doing what (at first) may seem like a fairly obscure comparison, using `Number.isInteger` will clearly indicate the intent of the code.",False
e135c03123870c3ab4919d6ee74a662b504ea579,2017-09-09 14:57:05,Jonas Jenwald,Store the rotation in the `PDFHistory`,False
44d5138d0f418f38797f18ef0c7dff00028a4e57,2017-09-09 14:57:05,Jonas Jenwald,Store the rotation in the `ViewHistory` (issue 5927),False
5565a6f8bf612f29f36f4bc53744628818fbbfed,2017-09-09 14:57:05,Jonas Jenwald,"Slightly refactor the pages rotation handling code in the viewer

This changes both `PDFViewer` and `PDFThumbnailViewer` to return early in the `pagesRotation` setters if the rotation doesn't change.
It also fixes an existing issue, in `PDFViewer`, that would cause errors if the rotation changes *before* the scale has been set to a non-default value.

Finally, in preparation for subsequent patches, it also refactors the rotation code in `web/app.js` to update the thumbnails and trigger rendering with the new `rotationchanging` event.",False
c8b5ba277af0464227724486262d14ea4c5a384c,2017-09-09 02:40:45,Tim van der Meij,"Merge pull request #8885 from Snuffleupagus/PDFHistory-followup

Address a couple of edge-cases in the new `PDFHistory` implementation (PR 8775 follow-up)",True
d1089a285d4f4b3e5e0a9fffbf4588b1d1ccf543,2017-09-09 02:20:17,Tim van der Meij,"Merge pull request #8877 from timvandermeij/button-widget-annotation-style

Provide `checked` styles for button widget annotations",True
938dffb06b8dcd54ea5c7c2ad531d145b5fdaa5e,2017-09-08 00:32:25,Jonas Jenwald,"Reduce the value of `UPDATE_VIEWAREA_TIMEOUT` and simplify the 'popstate' event handler to avoid subtle bugs

When testing the new `PDFHistory` implementation in practice, I felt that the current value of `UPDATE_VIEWAREA_TIMEOUT` is too large to be truly useful.
The purpose of the timeout is to attempt to address (the PDF.js part of) https://bugzilla.mozilla.org/show_bug.cgi?id=1153393, and it's currently fairly easy for the user e.g. close the browser before the timeout had a change to finish.

Obviously, the timeout is a best-effort solution, but with the current value of `UPDATE_VIEWAREA_TIMEOUT` it's not as useful as one would want.
Please note that lowering it shouldn't be a problem, since it still prevents the browser history from updating at *every* 'updateviewarea' event or during (quick) scrolling, which is all that's really needed to not impact the UX negatively.

---

Furthermore, with this lower timeout, we can also simplify the part of the 'popstate' event handler that attempted to update the browser history with the current position before moving back. In most cases, the current position will now already exist in the history, and this *greatly* decreases the complexity of this code path.

The main impetus for this change though, is that I unfortunately found that given the asynchronous nature of updating the browser history, there is some *edge* cases where that code could cause history corruption.
In practice, the user could thus get ""stuck"" at a particular history entry and not be able to move back. I haven't got any reliable STR for this, since it's so difficult to trigger, but it involved navigating around in a document such that a number of destinations are added to the browser history and then changing the rotation before going back/forward in the history.

Rather that attempting to patch this code, and making it even more difficult to understand than it already is or adding more asynchronous behaviour, by far the easiest solution is to remove it and simply rely on the (lowered) `UPDATE_VIEWAREA_TIMEOUT` instead.",False
b7c4d788ed60a0852ac7ab243b9e66fdac891a76,2017-09-07 19:55:01,Jonas Jenwald,"Prevent a temporary position from being added to the history while a destination is scrolled into view

Since e.g. zooming can occur when navigating to a new destionation, ensure that a resulting 'updateviewarea' event doesn't trigger adding of a *temporary* position to the browser history at a bad time.",False
077195d8ce971f935d68190a65ec5278eacfb4d0,2017-09-07 15:07:23,Jonas Jenwald,Ensure that the `PDFHistory._updateViewareaTimeout` is always reset when the history is updated,False
2a77f8b04139565015f1b5b3245dc0c3e50845d0,2017-09-07 03:55:45,Tim van der Meij,"Provide `checked` styles for button widget annotations

Fixes #8875.",False
39a77c76ad6d7a0ce793c31a9833bfb16cb144a3,2017-09-06 16:29:28,Jonas Jenwald,"Assign a dummy value to the `docBaseUrl` API parameter in non-`PRODUCTION` mode

This ensures that relative links are displayed when using the viewer in `gulp server` mode, in an effort to aid development/debugging.",False
7115e136e4bbfa721f27503c91adea589e1c37f7,2017-09-06 16:22:56,Jonas Jenwald,"Hide unsupported `LinkAnnotation`s (issue 3897)

Rather than displaying links that does *nothing* when clicked, it probably makes more sense to simply not render them instead. Especially since it turns out that, at least at this point in time, this is *very* easy to both implement and test.

Fixes 3897.",False
86020396cbf3679ede8058a87eafebf7e0cbbb6a,2017-09-06 16:11:48,Jani Pehkonen,Fix color of image masks inside uncolored patterns,False
9b14f8ea2a512ddf13ca6797048eeda08df380a7,2017-09-05 23:17:44,Yury Delendik,"Merge pull request #8866 from Snuffleupagus/fix-non-HTTP-validateResponseStatus

Correctly validate the response status for non-HTTP fetch requests (PR 8768 follow-up)",True
4edd4fba76fac6c5912082e57b51246062a97bfc,2017-09-05 22:24:47,Jonas Jenwald,"Merge pull request #8874 from zztoy/HelloWorldExampleFix

Fix the helloworld example by setting the PDFNetworkStream class (PR 8712 follow-up)",True
585cd933b7256c5f9ea08a77e052897551c215f8,2017-09-05 22:17:35,FAREAST\wenxh,Fix the helloworld example by setting the PDFNetworkStream class (PR 8712 follow-up),False
41415ba0a2998a84f40e9cd059641ef5ed03a2e7,2017-09-05 20:37:44,Jonas Jenwald,"Correctly validate the response status for non-HTTP fetch requests (PR 8768 follow-up)

It seems that the status check, for non-HTTP loads, causes the default viewer to *refuse* to open local PDF files.

***STR:***
 1. Make sure that fetch support is enabled in the browser. In Firefox Nightly, set `dom.streams.enabled = true` and `javascript.options.streams = true` in `about:config`.
 2. Open https://mozilla.github.io/pdf.js/web/viewer.html.
 3. Click on the ""Open file"" button, and open a new PDF file.

***ER:***
 A new PDF file should open in the viewer.

***AR:***
 The PDF file fails to open, with an error message of the following format:
`Message: Unexpected server response (200) while retrieving PDF ""blob:https://mozilla.github.io/a4fc455f-bc05-45b5-b6aa-2ecff3cb45ce"".`",False
cd25a51abe680292c8bc8987b9f2a10814293efe,2017-09-04 15:03:04,Jonas Jenwald,Update l10n files,False
1c9af00bee5070c43a4cf06ecd9a33307790aac7,2017-09-04 00:08:59,Tim van der Meij,"Merge pull request #8775 from Snuffleupagus/rewrite-PDFHistory-2

Re-write `PDFHistory` from scratch",True
336d26dd13cf2684b02345db4eb51927e616fead,2017-09-02 02:38:44,Tim van der Meij,"Merge pull request #8864 from Snuffleupagus/rm-isArray

Replace the `isArray` helper function with the native `Array.isArray` function",True
cfb4955a92e6882ce9ff925181312ae624d7af1d,2017-09-01 23:57:13,Jonas Jenwald,"Replace the `isArray` helper function with the native `Array.isArray` function

*Follow-up to PR 8813.*",False
22ade754cc97cf354f3fa7b578260117fae4e699,2017-09-01 23:26:48,Jonas Jenwald,"Merge pull request #8862 from Snuffleupagus/rm-isInt

Replace the `isInt` helper function with the native `Number.isInteger` function",True
11408da340ada9c0af32ea22a769d7f4b9eeb6a8,2017-09-01 20:22:50,Jonas Jenwald,"Replace the `isInt` helper function with the native `Number.isInteger` function

*Follow-up to PR 8643.*",False
066fea9c8bb7d9ffef224cfbc282a2e350240495,2017-09-01 03:35:37,Jonas Jenwald,"Merge pull request #8859 from yurydelendik/issue-8858

Revert PDFPageView.pdfPage reset.",True
47c28643d64707471b5270d4cc5e8befed97b42b,2017-09-01 03:19:01,Yury Delendik,Revert PDFPageView.pdfPage reset.,False
d332f62d6014b6855d9d73bd9b791c71fc86436d,2017-09-01 03:03:02,Tim van der Meij,"Merge pull request #8857 from Snuffleupagus/fetchUncompressed-type-checks

Avoid some redundant type checks in `XRef.fetchUncompressed`",True
51be27853f1d9d65333edce32f971cba56d64442,2017-09-01 01:38:10,Tim van der Meij,"Merge pull request #8847 from Snuffleupagus/AnnotationElement-isRenderable-regression

Correct the default value for `isRenderable` in the `AnnotationElement` constructor, to fix breaking errors when rendering unsupported annotations",True
772a5412a4c659078b984bcf58cbbe2c135373db,2017-08-31 20:19:04,Jonas Jenwald,"Avoid some redundant type checks in `XRef.fetchUncompressed`

When looking briefly at using `Number.isInteger`/`Number.isNan` rather than `isInt`/`isNaN`, I noticed that there's a couple of not entirely straightforward cases to consider.

At first I really couldn't understand why `parseInt` is being used like it is in `XRef.fetchUncompressed`, since the `num` and `gen` properties of an object reference should *always* be integers.
However, doing a bit of code archaeology pointed to PR 4348, and it thus seem that this was a very deliberate change. Since I didn't want to inadvertently introduce any regressions, I've kept the `parseInt` calls intact but moved them to occur *only* when actually necessary.[1]

Secondly, I noticed that there's a redundant `isCmd` check for an edge-case of broken operators. Since we're throwing a `FormatError` if `obj3` isn't a command, we don't need to repeat that check.

In practice, this patch could perhaps be considered as a micro-optimization, but considering that `XRef.fetchUncompressed` can be called *many* thousand times when loading larger PDF documents these changes at least cannot hurt.

---
[1] I even ran all tests locally, with an added `assert(Number.isInteger(obj1) && Number.isInteger(obj2));` check, and everything passed with flying colours.
However, since it appears that this was in fact necessary at one point, one possible explanation is that the failing test-case(s) have now been replaced by reduced ones.",False
47789b51c3b02b298f765e534b17e25ee786bd1f,2017-08-31 19:15:22,Yury Delendik,"Merge pull request #8855 from Rob--W/fetch-withCredentials-fix-default

Add test for withCredentials option",True
73273ccbe9baa4ca784c94c65b599978abcf1ee4,2017-08-31 18:00:00,Rob Wu,Add test for withCredentials option,False
0430e99d16c43007e810d04ad6f28e3b4ca259a3,2017-08-31 17:42:06,Rob Wu,"Merge pull request #8848 from Snuffleupagus/fetch-credentials

Correctly set the `credentials` of a fetch request, when the `withCredentials` parameter was passed to `getDocument`",True
84fe442b35cf113868d5b1bc80db5db5c36ce4cd,2017-08-31 12:50:05,Jonas Jenwald,"Correctly set the `credentials` of a fetch request, when the `withCredentials` parameter was passed to `getDocument`

Skimming through https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Sending_a_request_with_credentials_included, it looks to me like the `credentials` option was accidentally inverted.",False
87fc9bafead57ee6c3def028cc211cae9c3d83d3,2017-08-31 12:17:36,Jonas Jenwald,"Correct the default value for `isRenderable` in the `AnnotationElement` constructor, to fix breaking errors when rendering unsupported annotations

*This regressed in PR 8828.*

When attempting to open e.g. http://mirrors.ctan.org/macros/latex/contrib/pdfcomment/doc/example.pdf, the annotation layers are now missing since `Error: Abstract method `AnnotationElement.render` called` is thrown multiple times.",False
a4cc85fc5f5cb144b6ee7a7978dc83e906677233,2017-08-31 03:32:07,Tim van der Meij,"Merge pull request #8828 from timvandermeij/es6-annotations

Improve the annotation code by converting to ES6 syntax and removing duplicate code",True
0ac1fba2f9f6e3f40935dbf1e1747aeb0258a6ab,2017-08-30 23:15:13,Jonas Jenwald,"Prevent `PDFHistory._tryPushCurrentPosition()` from effectively becoming a no-op if the document hash contains an invalid/non-existent destination

By using the (heuristic) `POSITION_UPDATED_THRESHOLD` constant, we can ensure that the current document position will be added to the browser history when a sufficiently ""large"" number of `updateviewarea` events have been dispatched.",False
0d58bb5512c73c40642735cf84997bbb8dd3742b,2017-08-30 23:15:13,Jonas Jenwald,"Temporarily add the current position to the browser history when the viewer is idle

This patch attempts to address an issue in the old `PDFHistory` implementation, where the current position wouldn't be correctly saved when the browser was closed.
In theory this *should* already be working, however as the discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1153393 showed, it seems that both `pagehide` and `beforeunload` arrive to late to successfully update the history during closing.

Hence a timeout is used to *temporarily* add the current position to the browser history when the viewer is idle.
Note that we need to take care not to update the browser history too often, since that would render the viewer more or unusable. Furthermore, if the timeout is *too* long it may end up effectively disable this whole functionality.

The `UPDATE_VIEWAREA_TIMEOUT` constant is thus a heuristic value, which we may need to tweak taking the above into account.",False
133d06e9a492e24c25336bf895a52d3a703d2385,2017-08-30 23:15:13,Jonas Jenwald,"Re-write `PDFHistory` from scratch

This patch completely re-implements `PDFHistory` to get rid of various bugs currently present, and to hopefully make maintenance slightly easier. Most of the interface is similar to the existing one, but it should be somewhat simplified.

The new implementation should be more robust against failure, compared to the old one. Previously, it was too easy to end up in a state which basically caused the browser history to lock-up, preventing the user from navigating back/forward. (In the new implementation, the browser history should not be updated rather than breaking if things go wrong.)

Given that the code has to deal with various edge-cases, it's still not as simple as I would have liked, but it should now be somewhat easier to deal with.
The main source of complication in the code is actually that we allow the user to change the hash of a already loaded document (we'll no longer try to navigate back-and-forth in this case, since the next commit contains a workaround).

In the new code, there's also *a lot* more comments (perhaps too many?) to attempt to explain the logic. This is something that the old implementation was serverly lacking, which is a one of the reasons why it was so difficult to maintain.

One particular thing to note is that the new code uses the `pagehide` event rather than `beforeunload`, since the latter seems to be a bad idea based on https://bugzilla.mozilla.org/show_bug.cgi?id=1336763.",False
388851e37b0492442a95d0dcdfde545bb2bcbf75,2017-08-30 23:15:13,Jonas Jenwald,"Add a `isDestsEqual` helper function, to allow comparing explicit destinations, in `pdf_history.js`",False
0c4985546a9ebc3d5849fd564267899c355ab15e,2017-08-30 23:15:13,Jonas Jenwald,"Add a `waitOnEventOrTimeout` helper function that allows waiting for an event or a timeout, whichever occurs first",False
28ce3b61854f433dd7bf231609795279af63f12b,2017-08-30 23:15:13,Jonas Jenwald,"Rip out the current implementation of `PDFHistory`

The current implementation of `PDFHistory` contains a number of smaller bugs, which are *very* difficult to address without breaking other parts of its code.
Possibly the main issue with the current implementation, is that I wrote it quite some time ago, and at the time my understanding of the various edge-cases the code has to deal with was quite limited.
Currently `PDFHistory` may, despite most of those cases being fixed, in certain edge-cases lock-up the browser history, essentially preventing the user from navigating back/forward.

Hence rather than trying to iterate on `PDFHistory` to make it better, the only viable approach is unfortunately rip it out in its entirety and re-write it from scratch.",False
2656825432cf135b1d8e0a39b4fad0f8eceb2da7,2017-08-30 21:58:42,Yury Delendik,"Merge pull request #8845 from yurydelendik/fix-autofetch

Fixes autofetch and firefox nightly fetch streams",True
bad3203fdad1ee0bee3e30d31912021c6a0b0676,2017-08-30 21:57:48,Yury Delendik,"Merge pull request #8768 from mukulmishra18/fetch_stream

Adds fetch stream logic for networking part of PDF.js",True
cd95b426c730108a529fbf6ab48b3192e22922dd,2017-08-30 21:23:59,Yury Delendik,Disables fetch when ReadableStream is not available.,False
3cff7da0e769ac9789fa6118647d2e70d154f334,2017-08-30 21:23:38,Yury Delendik,Fixes fetch and node behavior when disableAutoFetch adn disableStream is used.,False
3516a59384ad085b8749e9e475e219345e0e5e74,2017-08-29 22:56:48,Mukul Mishra,Adds fetch stream logic for networking part of PDF.js,False
d734b3d1d6afff0d54e9ecebdc3c729568be45a5,2017-08-29 02:21:29,Tim van der Meij,"Merge pull request #8835 from Snuffleupagus/viewer-firefox-error-message

Ensure that `PDFViewerApplication.error` outputs proper messages in FIREFOX/MOZCENTRAL builds",True
b7fcaff07cacf312a909901676d803d38bfe01ce,2017-08-28 18:00:27,Jonas Jenwald,Update l10n files,False
028d7c09508b736f2dec49ef61e7f7f891082424,2017-08-28 17:19:40,Jonas Jenwald,"Ensure that `PDFViewerApplication.error` outputs proper messages in FIREFOX/MOZCENTRAL builds

*It appears that this accidentally broke with PR 8394.*

Currently, the following will be printed in the console:
```
An error occurred while loading the PDF.
[object Promise],[object Promise]
```

With this patch we'll again get proper output, e.g. something with this format:
```
An error occurred while loading the PDF.
PDF.js v? (build: ?)
Message: unknown encryption method
```",False
f54dfc63dcb116c1f97577a786372bf4c2fd0ef3,2017-08-27 22:39:22,Tim van der Meij,"Merge pull request #8831 from Snuffleupagus/uglify-es

Update the `gulp minified` command to use uglify-es",True
7c7ba9a2ad50d9a1a1ab28a2b7ea6f0ba4c945c8,2017-08-27 20:48:23,Tim van der Meij,"Merge pull request #8829 from Snuffleupagus/issue-8823

Attempt to improve the `EI` detection heuristics, for inline images, in streams containing `NUL` bytes (issue 8823)",True
70e80322da5c4a49452947724004b77460f9c400,2017-08-27 19:01:04,Jonas Jenwald,"Update the `gulp minified` command to use uglify-es

By updating to uglify-es, rather than uglify-js, the minifier *itself* now supports ES6 code. This means that it's now possible to minify code built with `PDFJS_NEXT = true` set, i.e. with Babel transpilation disabled, which wasn't the case previously.

Note that uglify-es is based on the API of uglify-js v3, which differs from the one that we previously used.
Of particular importance is the fact that it's no longer possible to provide a path to a file for minification, but one must instead directly provide the source of the file.

For more information, please see https://github.com/mishoo/UglifyJS2/tree/harmony",False
49b8cd5a6afd3c0d63dec7b73e0c406807610392,2017-08-27 16:18:28,Jonas Jenwald,"Attempt to improve the `EI` detection heuristics, for inline images, in streams containing `NUL` bytes (issue 8823)

Since this patch will now treat (some) `NUL` bytes as ""ASCII"", the number of `followingBytes` checked are thus increased to (hopefully) reduce the risk of introducing new false positives.

Fixes 8823.",False
7787987a4bb41e88feadda4dd636599804503f08,2017-08-27 04:37:51,Tim van der Meij,"Update `webpack` and `webpack-stream` to the latest version

Aside from being up-to-date, this may improve build time/size.",False
2512eccbf09f33811325dcbad7efa4f4f68ccc93,2017-08-27 04:32:41,Tim van der Meij,"Implement `getOperatorList` method in the `WidgetAnnotation` class to
avoid duplication in subclasses",False
4f0285739403ebf30ef7be4a05c8a639d7d4edab,2017-08-27 04:32:40,Tim van der Meij,"Let the two annotation factories use static methods

This corresponds to how other factories are implemented.",False
af10f8b5866a7ec6a2ae1d988271b6ff8f70f5a4,2017-08-27 04:32:40,Tim van der Meij,Convert `src/display/annotation_layer.js` to ES6 syntax,False
24d741d045ba5b5296da042c65718a363a400c33,2017-08-27 04:23:45,Tim van der Meij,Convert `src/core/annotation.js` to ES6 syntax,False
7cc72606346d7fa8b8edfbbde59cf0598ac4b98f,2017-08-26 22:32:51,Rob Wu,"Merge pull request #8796 from timvandermeij/svg-text-rise

Implement text rise for the SVG back-end",True
a0eed974a30dd04ad267e0995037444a1e2279b3,2017-08-26 22:10:45,Rob Wu,"Merge pull request #8825 from Snuffleupagus/simpleDest-dictionary

Account for broken outlines/annotations, where the destination dictionary contains an invalid `/Dest` entry",True
42f2d36d1f0b6c7c3be921bfde900f1748183643,2017-08-26 21:08:15,Jonas Jenwald,"Account for broken outlines/annotations, where the destination dictionary contains an invalid `/Dest` entry

According to the specification, see http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#page=377, a `Dest` entry in an outline item should *not* contain a dictionary.
Unsurprisingly there's PDF generators that completely ignore this, treating is an `A` entry instead.

The patch also adds a little bit more validation code in `Catalog.parseDestDictionary`.",False
bd85bda0a60c95afdf0c7d8ba48ea309fa8a7071,2017-08-26 18:56:01,Tim van der Meij,"Merge pull request #8826 from Snuffleupagus/eslint_for-direction

Enable the `for-direction` ESLint rule",True
0e2618fdbcb458b31a653945c069a16c701e878d,2017-08-26 15:01:07,Jonas Jenwald,"Enable the `for-direction` ESLint rule

See https://eslint.org/docs/rules/for-direction; helps avoid typos that would cause infinite `for` loops.

Also, updates `eslint` and `eslint-plugin-mozilla` to the latest available versions.",False
798e46da975ec55e69c1f7ccf069510c48e2cc70,2017-08-26 03:30:45,Tim van der Meij,"Merge pull request #8821 from Snuffleupagus/issue-8798-reduced-test

Replace the test-case for issue 8798 with a reduced one (PR 8800 follow-up)",True
26c4536964e5bf914e0f3ea6a034621f44629c97,2017-08-25 04:15:35,Tim van der Meij,"Merge pull request #8820 from Snuffleupagus/viewer-open-rm-scale

Remove the ability to pass a `scale` parameter in the (optional) `args` object parameter of `PDFViewerApplication.open(file, args)`",True
d368a5baed0d3b96f8930d0664e3efbec98c185a,2017-08-25 04:01:44,Tim van der Meij,"Merge pull request #8817 from mukulmishra18/intermittent-error

Set this.isCancelled in close method of streamSink.",True
5f372cdae398d6c1b1391237fc812ac8348d96b0,2017-08-25 02:20:43,Tim van der Meij,"Merge pull request #8819 from Snuffleupagus/getting_started-rm-compatibility

Remove any mention of `compatibility.js` from the ""Getting Started"" docs (issue 8818)",True
88167b5e3880b3f445c665685df1f2469d5025b7,2017-08-25 01:43:48,Jonas Jenwald,"Merge pull request #8824 from Snuffleupagus/bug-1393476

Prevent an infinite loop in `XRef.readXRef` by keeping track of already parsed tables (bug 1393476)",True
4660cf823826f30f3a5b384ff944ec3204b1571f,2017-08-24 22:48:08,Jonas Jenwald,"Prevent an infinite loop in `XRef.readXRef` by keeping track of already parsed tables (bug 1393476)

With this patch, not only is the infinite loop prevented, but we're also able to actually render the file (which e.g. Adobe Reader isn't able to).

Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1393476.",False
f1819f4d363279092e362d0f1a5d447b9b5d180e,2017-08-24 22:06:00,Yury Delendik,"Merge pull request #8822 from yurydelendik/disable-fs-in-dist

Disable node libs in pdfjs-dist package.json",True
e82811adb4ca4667e7f8f2caa96a457ed22e0243,2017-08-24 22:05:29,Yury Delendik,"Merge pull request #8712 from mukulmishra18/node_stream

Adds node.js logic for networking tasks for PDF.js",True
4e6ae18f1949dd8964ada2c7532acead0847ea58,2017-08-24 21:27:18,Yury Delendik,Disable node libs in pdfjs-dist package.json,False
4891b9c7e02f095ad0c5b3ca2aa2fa96dd35ef5c,2017-08-24 21:13:05,Jonas Jenwald,"Replace the test-case for issue 8798 with a reduced one (PR 8800 follow-up)

*Re: issue 8798 and PR 8800.*

Big thanks to @THausherr for providing the test-case.",False
870a8f6c35790422f17560a54202bc1357604f94,2017-08-24 16:44:00,Jonas Jenwald,"Remove the ability to pass a `scale` parameter in the (optional) `args` object parameter of `PDFViewerApplication.open(file, args)`

Since the very early days of the viewer, it's been possible to pass in a `scale` when opening a PDF file. However, most of the time it was/is actually being ignored, which limits its usefulness considerably.

In older versions of the viewer, if a document hash was present (i.e. `PDFViewerApplication.initialBookmark` being set) or if the document existed in the `ViewHistory`, the `scale` passed to `PDFViewerApplication.open` would thus always be ignored.
In addition to the above, in the current viewer there's even more cases where the `scale` parameter will be ignored: if a (valid) browser history entry exists on document load, or if the `defaultZoomValue` preference is set to a non-default value.
Hence the result is that in most situation, a `scale` passed to `PDFViewerApplication.open` will be completely ignored.

A much better, not to mention supported, way of setting the initial scale is by using the `defaultZoomLevel` preference. In comparision, this also has the advantage of being used in situations where the `scale` would be ignored.

All in all this leads to the current situation where we have code which is essentially dead, since no part of the viewer (by default) relies on it.
To clean up this code, and to avoid having to pass (basically) unused parameters around, I'd thus like to remove the ability to pass a `scale` to `PDFViewerApplication.open`.",False
b048b65e7bdb3567cdafbd270dbdb6627241d4e6,2017-08-24 16:38:55,Jonas Jenwald,"Remove any mention of `compatibility.js` from the ""Getting Started"" docs (issue 8818)

*With PR 8102, `compatibility.js` is now bundled directly into `pdf.js` and `pdf.worker.js`.*

Fixes 8818.",False
efad0c7a404b5c0f2882b0e307bf83ad56d94d67,2017-08-24 13:51:27,Mukul Mishra,Set this.isCancelled in close method of streamSink.,False
d16709f5e4c97a93763e49a81dcfc3773d0a1b98,2017-08-24 12:46:44,Mukul Mishra,Adds tests for node_stream,False
e9ba54940d6fc3bd81b11ffafdb9137114798292,2017-08-24 03:17:51,Tim van der Meij,"Merge pull request #8800 from Snuffleupagus/issue-8798

Try to recover if we reach the end of the stream when searching for the `EI` marker of an inline image (issue 8798)",True
23a4174163cba5709f05b04b371ee67b1d0148ca,2017-08-23 23:06:03,Brendan Dahl,"Merge pull request #8810 from squarewave/master

Cache PdfJs's enabled setting for delayed init",True
6433fc8644b3f1e85e9d970501ae9aa1064e50ca,2017-08-23 21:08:29,Jonas Jenwald,"Merge pull request #8813 from yurydelendik/loopback-isarray

Use Array.isArray in the LoopbackPort.",True
438c0b28f212dbf68e695006b677716d5c18025e,2017-08-23 19:55:25,Yury Delendik,Use Array.isArray in the LoopbackPort.,False
18ede8c65dec28346980ec55eaf23fdc36211d1e,2017-08-23 14:08:41,Mukul Mishra,Adds http support to node_stream logic,False
ed78b23ff269898223c257e6389a3de094eb0a9a,2017-08-23 14:06:43,Mukul Mishra,Adds node.js logic for networking tasks for PDF.js,False
cb10c03d0a83331fa3e8a0ad8c5162fc1a357f56,2017-08-23 13:06:13,Jonas Jenwald,"Merge pull request #8812 from yurydelendik/central-global

Moves global scope out of shared/util.",True
57bc3296f43f078931285efb94786e57f23ecba1,2017-08-23 04:50:52,Yury Delendik,Moves global scope out of shared/util.,False
cfc052a515c62be1df0401d5c6fd4f5388fbb012,2017-08-23 04:04:39,Tim van der Meij,"Implement text rise for the SVG back-end

The property and the setter for text rise were already present, but they
were never used or called. This patch completes the implementation by
calling the setter when the operator is encountered and by using the
text rise value when rendering text.",False
07f64e064de0db18d0b147ad8571f9d48834ad80,2017-08-23 03:54:24,Tim van der Meij,"Merge pull request #8807 from Snuffleupagus/PDFViewer-scrollPageIntoView-rm-fallback-args

Remove handling of fallback arguments from `PDFViewer.scrollPageIntoView`",True
ca936ee0c7ac5baeca76a45dfc5485b3607de290,2017-08-23 03:43:43,Jonas Jenwald,"Merge pull request #8491 from janpe2/jbig2Halftone-2

JBIG2 halftone regions and pattern dictionaries",True
0f9f0f8a9b8fc1f6c39660c0d90ec96e75daa67b,2017-08-23 00:50:58,Doug Thayer,"Cache PdfJs's enabled setting for delayed init

See Bug 1389443 for more information. This allows us to register
PdfJs without waiting for file IO in nsHandlerService to finish.
Once that file IO is finished, we can set everything up properly
and double-check the registration.",False
c523948cc761e538ee8063fdfea93603bab95338,2017-08-22 15:38:34,Jonas Jenwald,"Remove handling of fallback arguments from `PDFViewer.scrollPageIntoView`

The method signature was improved in PR 7440, which has now been present in a number of releases (starting with `v1.6.210`).
Hence we should be able to remove this now, and just print an error message if the old format is used.",False
cb55506b95f67985e17dd1378b952b0ec7feaae9,2017-08-22 13:03:13,Jonas Jenwald,Try to recover if we reach the end of the stream when searching for the `EI` marker of an inline image (issue 8798),False
81172b571f804ebded0a918ce0d846aedc3f78a7,2017-08-22 04:14:57,Tim van der Meij,"Merge pull request #8781 from Rob--W/systemjs-__non_webpack_require__

__non_webpack_require__ -> require in SystemJS",True
7e4c69eccfd5ad841054ca179ae17369ba4b8de6,2017-08-21 02:59:58,Tim van der Meij,"Merge pull request #8557 from Rob--W/svg-oom-streaming

pdf2svg.js: provides ReadableSVGStream class to serialize a SVG as a stream",True
79698027392575c85f66b21c87a8c1ce626c2131,2017-08-19 18:39:17,Tim van der Meij,"Merge pull request #8794 from Snuffleupagus/ViewHistory-rm-migration-code

Remove the migration code for old localStorage data in `ViewHistory`",True
81b4761e6e0fcc6784e6acb2c5447a8fa2ce6ebe,2017-08-19 15:11:04,Jonas Jenwald,"Remove the migration code for old localStorage data in `ViewHistory`

This was added in PR 7793, which has now been present in a number of PDF.js releases (from version `v1.7.225`).
Hence we should be able to remove it now, considering that the migration code was only intended as a best effort solution to avoid wiping out all existing user data at once. Also, keep in mind that `ViewHistory` is already limited with regards to the number of documents it will simultaneous store data for.",False
9b26bec1d7749f54cb16550468c9cd4a71d5f2b8,2017-08-19 12:42:55,Jonas Jenwald,"Merge pull request #8792 from Snuffleupagus/issue-8790

Fix caching of small inline images in `Parser.makeInlineImage` (issue 8790)",True
18902ec4148dd1300361ef16db9e768b80275f0d,2017-08-19 02:47:59,Jonas Jenwald,"Add the `ttest` npm package to the devDependencies in package.json

I've gotten tired of having to manually re-install the `ttest` package on numerous occasions when benchmarking changes, so let's just list it in package.json to simplify things.",False
2112999db7a824027724cd47f19fc80ca08396b4,2017-08-19 02:38:55,Jonas Jenwald,"Fix caching of small inline images in `Parser.makeInlineImage` (issue 8790)

*Follow-up to PR 5445.*

Using the PDF file from issue 2618, i.e. http://bugzilla-attachments.gnome.org/attachment.cgi?id=226471, with the following manifest file:
```json
[
    {  ""id"": ""issue2618"",
       ""file"": ""../web/pdfs/issue2618.pdf"",
       ""md5"": """",
       ""rounds"": 50,
       ""type"": ""eq""
    }
]
```
I get the following results when comparing `master` against this patch:
```
browser | stat         | Count | Baseline(ms) | Current(ms) |  +/- |     %  | Result(P<.05)
------- | ------------ | ----- | ------------ | ----------- | ---- | ------ | -------------
firefox | Overall      |    50 |         4694 |        3974 | -721 | -15.35 |        faster
firefox | Page Request |    50 |            2 |           1 |    0 | -22.83 |
firefox | Rendering    |    50 |         4692 |        3972 | -720 | -15.35 |        faster
```

So, based on these results, it seems like a fairly clear win to fix this broken caching :-)",False
8c8d8fa2390bac75a3afbe9f4f0cbd60bb708282,2017-08-18 03:34:37,Tim van der Meij,"Merge pull request #8788 from Snuffleupagus/pageMode-followup

Attempt to delay disabling of the attachment view until FileAttachment annotations of the *initial* page has been parsed",True
50e10fdafcf2fe4e66b630f16edd0dc599eeee3c,2017-08-18 03:10:57,Tim van der Meij,"Merge pull request #8785 from Rob--W/svg-ignore-missing-glyph

SVG: Don't render missing glyphs",True
9273350c6b7c7bff4b6c748eb84f226240285dda,2017-08-17 18:00:03,Jonas Jenwald,"Attempt to delay disabling of the attachment view until FileAttachment annotations of the *initial* page has been parsed

As discussed in PR 8673, we cannot solve the general issue (since that would require parsing every single page). However, we can mitigate the effect somewhat, by waiting for the FileAttachment annotations of the initially rendered page.",False
96fb0c0370cb31af271f49c72e905535f86019e3,2017-08-17 16:34:24,Jonas Jenwald,"Call the `reset()` methods in the `PDFAttachmentViewer` and `PDFOutlineViewer` constructors

Rather than duplicating initialization code, we can just call `this.reset()` instead (which is also similar to other existing code, e.g. `PDFViewer`). This will also help ensure that the DOM is completely reset, before any outline items or attachments are displayed.",False
f07ce2bbc2b4f8168edd2bb411bfd33d2c74159d,2017-08-17 03:19:55,Rob Wu,"SVG: Don't render missing glyphs

This bug is similar to the canvas bug of #6721.
I found this bug when I tried to run pdf2svg on a SVG file, and the generated
SVG could not be viewed in Chrome due to a SVG/XML parsing error:
""PCDATA invalid Char value 3""

Reduced test case:
- https://github.com/mozilla/pdf.js/files/1229507/pcdatainvalidchar.pdf
- expected: ""hardware performance""
- Actual SVG source: ""hardware\x03performance""
  (where ""\x03"" is a non-printable character, and invalid XML).

In terms of rendering, this bug is similar to #6721, where an unexpected glyph
appeared in the canvas renderer. This was fixed by #7023, which skips over
missing glyphs. This commit follows a similar logic.

The test case from #6721 can be used here too:
- https://github.com/mozilla/pdf.js/files/52205/issue6721_reduced.pdf
  expected: ""Issue   6721""
  actual (before this patch): ""Issue ààà6721""",False
3a017b43176bac56dfb238d7c78d454eb9cc22c1,2017-08-17 02:22:12,Tim van der Meij,"Merge pull request #8783 from Snuffleupagus/image-decoders-Uint8ClampedArray

Use `Uint8ClampedArray` when returning image data in `src/core/jbig2.js` and `src/core/jpg.js`",True
9b5086d6491fa05efe8680acfe430641ddd205fd,2017-08-16 22:46:38,Rob Wu,"pdf2svg.js: Serialize the SVG to a stream

Implement a serialization ""generator"" for `DOMElement` in domutils.js
that yields the serialization of the SVG element. This method is used by
a newly added `ReadableSVGStream` class, which can be used like any
other readable stream in Node.js.

This reduces the memory requirements. Now, it is not needed to require
the serialization to fully fit in memory.

Note: The implementation of the serializer is a state machine in ES5
since the rest of the file is also in ES5. Its functionality is
equivalent to:

```
function* serializeSVGElement(elem) {
  yield '<' + elem.nodeName;
  if (elem.nodeName === 'svg:svg') {
    yield ' xmlns:xlink=""http://www.w3.org/1999/xlink""' +
          ' xmlns:svg=""http://www.w3.org/2000/svg""';
  }
  for (let i in elem.attributes) {
    yield ' ' + i + '=""' + xmlEncode(elem.attributes[i]) + '""';
  }

  yield '>';

  if (elem.nodeName === 'svg:tspan' || elem.nodeName === 'svg:style') {
    yield xmlEncode(elem.textContent);
  } else {
    for (let childNode of elem.childNodes) {
      yield* serializeSVGElement(childNode);
    }
  }
  yield '</' + elem.nodeName + '>';
}
```",False
563b68e74d82fec352783f2b54dac90228b59a72,2017-08-16 16:54:28,Jonas Jenwald,"Remove manual clamping code in `src/core/jpx.js`

Since we're now using `Uint8ClampedArray`, rather than `Uint8Array`, doing manual clamping shouldn't be necessary given that that is now handled natively.

This shouldn't have any measurable performance impact, but just to sanity check that I've done some quick benchmarking with the following manifest file:
```json
[
    {  ""id"": ""S2-eq"",
       ""file"": ""pdfs/S2.pdf"",
       ""md5"": ""d0b6137846df6e0fe058f234a87fb588"",
       ""rounds"": 100,
       ""type"": ""eq""
    }
]
```
which gave the following results against the current `master` (repeated benchmark runs didn't result in any meaningful differences):
```
-- Grouped By browser, stat --
browser | stat         | Count | Baseline(ms) | Current(ms) | +/- |    %  | Result(P<.05)
------- | ------------ | ----- | ------------ | ----------- | --- | ----- | -------------
firefox | Overall      |   100 |          592 |         592 |   1 |  0.12 |
firefox | Page Request |   100 |            3 |           3 |   0 | -9.88 |
firefox | Rendering    |   100 |          588 |         589 |   1 |  0.18 |
```",False
f6636d6b19442ffbc59ee8df8383f046c886c622,2017-08-16 16:54:28,Jonas Jenwald,Use `Uint8ClampedArray` when returning image data in `src/core/jbig2.js` and `src/core/jpg.js`,False
74ad90cb8ff638642a40a4d4b62d31e906392493,2017-08-16 16:54:21,Jonas Jenwald,Update the mask data inversion in `PDFImage.createMask` to be compatible with both `Uint8Array` and `Uint8ClampedArray`,False
d253889d97ff3269b9f07a11731d0ab9a84e1bb9,2017-08-15 15:44:30,Rob Wu,"__non_webpack_require__ -> require in SystemJS

When running browser tests, e.g. via `gulp unittest`, the test files are not
processed by babel, and neither by the ""unittestcli"" gulp target.

This commit copies the babelPluginReplaceNonWebPackRequire plugin from the
unittestcli target to the SystemJS config so that `__non_webpack_require__` is
replaced with `require` for all build targets, and adds a unit test to ensure
that this indeed works as expected.",False
ba5dbc96326518ad716158ef040f61794cc72202,2017-08-15 05:11:32,Yury Delendik,"Merge pull request #8780 from yurydelendik/v1.9.426

Version 1.9.426",True
163ecf9b95d232c80e0cc07f440e8e5ebe84fee0,2017-08-15 05:07:57,Yury Delendik,Version 1.9.426,False
602250031e5c9336f5386bceac1d89ec93dac283,2017-08-15 03:14:41,Tim van der Meij,"Merge pull request #8778 from Snuffleupagus/jpg-Uint8ClampedArray

Use `Uint8ClampedArray`, when returning data, and remove manual clamping in `src/core/jpg.js` (issue 4901)",True
2558a58dbb8f367470afe648647d9480c63048ef,2017-08-15 02:12:21,Yury Delendik,"Merge pull request #8749 from yurydelendik/version-1.9

Version 1.9",True
d6cd5355f06aba709853bd46108cfe7306114144,2017-08-14 19:49:57,Jonas Jenwald,"Use `Uint8ClampedArray`, when returning data, and remove manual clamping in `src/core/jpg.js` (issue 4901)

This patch removes the `clamp0to255` helper function, as well as manual clamping code in `src/core/jpg.js`.
The adjusted constants in `_convertCmykToRgb` were taken from CMYK to RGB conversion code found in `src/core/colorspace.js`.

*Please note:* There will be some very slight movement in a number of existing test-cases, since `Uint8ClampedArray` appears to use `Math.round` (or equivalent) and the old code used (basically) `Math.floor`.",False
be36c60e0f92e0eb3c44021b571cdbb90f197b92,2017-08-14 19:49:55,Jonas Jenwald,"Polyfill `Uint8ClampedArray` using core-js

https://github.com/zloirock/core-js",False
e49dfe4ed7700a8742457adf49a3d4635df5d13c,2017-08-14 19:27:18,Jonas Jenwald,"Don't load `compatibility.js` in the viewer while in non-`PRODUCTION` mode

At this point, the default viewer is already not usable in older browsers in `gulp server` mode, since we only run the code through Babel as part of the build step.
Hence there shouldn't be much point in manually loading `compatibility.js` in `viewer.html` the way that we've been doing, especially considering that it's already being loaded by `src/shared/util.js`.",False
723bc25bc35df354f08558a3b74f916bff40f0c4,2017-08-14 13:49:07,Jonas Jenwald,Update l10n files,False
21cc2c020026341586024fb6a9d41602bddc3ed5,2017-08-10 01:56:25,Tim van der Meij,"Merge pull request #8764 from Snuffleupagus/es6-DownloadManager-class

Convert `DownloadManager` to an ES6 class",True
903f372e3df46af3a24a7c5618a9f17b1b641670,2017-08-09 01:32:28,Tim van der Meij,"Merge pull request #8762 from Snuffleupagus/evaluator-coded-isType3Font

Replace the `coded` property with `isType3Font` when building the font `properties` object in `PartialEvaluator.translateFont`",True
11ea21265de7ade13eb01114b985c4007c8f744b,2017-08-08 23:18:33,Jonas Jenwald,"Merge pull request #8761 from tobytailor/master

Fallback to plain object for globalScope.",True
da44d10af19894584b556bf7e80f21a09fcf94dd,2017-08-08 21:47:48,Tobias Schneider,Fallback to plain object for globalScope.,False
9a581ee9edeed2d090a8c061a0cc85dad4e74572,2017-08-08 18:08:29,Jani Pehkonen,Implement JBIG2 halftone regions and pattern dictionaries,False
093afd1212af5db30381c06889c044fb9cc10f64,2017-08-08 17:33:02,Jonas Jenwald,"Replace the `coded` property with `isType3Font` when building the font `properties` object in `PartialEvaluator.translateFont`

This appears to simply have been forgotten in the re-factoring in PR 4815, where the `coded` property was renamed to the *much* more descriptive `isType3Font` property.",False
a1d88d8e2e8d65dd79f174603ac186744aaa8d86,2017-08-08 02:04:07,Tim van der Meij,"Merge pull request #8756 from Snuffleupagus/evaluator-paintXObject-rm-code-property

Remove leftover `args[0].code` checks from the `OPS.paintXObject` cases in evaluator.js",True
4729e96fb7916356e15655277cc8fe6f8664407f,2017-08-07 14:18:37,Jonas Jenwald,"Remove leftover `args[0].code` checks from the `OPS.paintXObject` cases in evaluator.js

From looking at blame, it seems that these checks became obsolete with PR 692 (which landed close to six years ago). Note how, after that PR, there's no longer anything being assigned to the `code` property of an Object.",False
5cb83897572a868aa047563cf891e5a9d1f232fa,2017-08-07 13:40:49,Jonas Jenwald,Update l10n files,False
cbc411a2c7a0f2c195157beebd7ef1c8b737ffdf,2017-08-06 17:45:18,Jonas Jenwald,Convert `DownloadManager` to an ES6 class,False
f83bd721fc0fbc382f0059903e1f16a410401732,2017-08-05 19:02:50,Tim van der Meij,"Merge pull request #8752 from Snuffleupagus/es6-dom_events

ES6-ify the code in `web/dom_events.js`",True
1419b7ffe7fb34aa48002fd388d7a3848c668709,2017-08-05 03:46:50,Brendan Dahl,"Merge pull request #8746 from yurydelendik/page-errors

More robust getPage() error handling.",True
d0e93721ae300bbac0f0f08461a59bef8a069430,2017-08-05 03:33:33,Yury Delendik,More robust getPage() error handling.,False
da372d5a571437c3f3220d01f3f4cde6f7d06bcd,2017-08-05 02:43:49,Yury Delendik,Version 1.9,False
ace9de6f7d99b253a17e8273dac7a3f0f06d8175,2017-08-04 17:41:12,Jonas Jenwald,"Merge pull request #8747 from brendandahl/first-cmap

Fix two cmap related issues.",True
bbf5b4d706befb84ccc31fe1e40ee5cf663f09a4,2017-08-04 16:30:31,Jonas Jenwald,"Merge pull request #8745 from yurydelendik/cancel-stream

Properly cancel streams and guard at getTextContent.",True
0bef50d56d008e99e04878ba56e04809188d6298,2017-08-04 10:49:36,Brendan Dahl,"Fix two cmap related issues.

In issue #8707, there's a char code mapped to a non-
existing glyph which shouldn't be drawn. However, we
saw it was missing and tried to then use the post table and
end up mapping it incorrectly.

This illuminated a problem with issue #5704 and bug
893730 where glyphs disappeared after above fix.  This was
from the cmap returning the wrong glyph id. Which in turn was
caused because the font had multiple of the same type of cmap
table and we were choosing the last one. Now, we instead
default to the first one. I'm unsure if we should instead be
merging the multiple cmaps, but using only the first one works.",False
a1dfbec532838829dc926ce15a73eff868cb0d47,2017-08-04 03:06:46,Yury Delendik,Properly cancel streams and guard at getTextContent.,False
5b5781b45d234666241bf3354c0d390315c31d1a,2017-08-04 02:19:40,Yury Delendik,"Merge pull request #8738 from ChenMachluf/remove_workerPort_after_PDFWorker_destroy

Delete workerPort to PDFWorker cache after PDFWorker destroy",True
0c95bc7d839f778528e4b5c9480ba1a642f74313,2017-08-03 19:46:43,Yury Delendik,"Merge pull request #8744 from yurydelendik/stream-edge

Checks Edge support for streams.",True
6beb925f0baabc5abba0397d372932055b8fb459,2017-08-03 19:18:51,Yury Delendik,Checks Edge support for streams.,False
e20d4a9c2119b6b0dd1d11d2d5e21b94375546d8,2017-08-03 17:55:34,Jonas Jenwald,"Merge pull request #8681 from brendandahl/glyph-ids

Fix several issues with glyph id mappings (issue 8668, bug 1383504)",True
9b1b160d4f6f293488bed497678836908525f1a3,2017-08-03 02:18:42,Chen Machluf,remove PDFWorker from cache after detsroy,False
5b7f712ca78815837dbd428da16437da262131a5,2017-08-02 23:23:14,Brendan Dahl,"Merge pull request #8627 from yurydelendik/issue-8591

Fallback on font widths if CFF data is broken",True
f62d0a10a52cb972556e500976cc110278a1e624,2017-07-30 23:46:14,Jonas Jenwald,"Merge pull request #8721 from mukulmishra18/data-send-via-GetDocRequest

Reduces the amount of data send via GetDocRequest.",True
4597926148a02f8c082504009f739cb9049de866,2017-07-30 16:04:44,Tim van der Meij,"Merge pull request #8722 from Snuffleupagus/fix-helloworld-example

Fix the helloworld example by importing the `network.js` file (PR 8617 follow-up)",True
1f6de75585f4a7809fd31f9aaa236daaef4a3626,2017-07-30 02:17:46,Jonas Jenwald,"Fix the helloworld example by importing the `network.js` file (PR 8617 follow-up)

Fixes https://stackoverflow.com/q/45393309/5317012",False
00e026ebcd8143866aaa979f62612bca50088838,2017-07-30 00:00:03,Mukul Mishra,Reduces the amount of data send via GetDocRequest.,False
2702021a840f945358c405972c8dcb855ae700be,2017-07-29 19:09:43,Tim van der Meij,"Merge pull request #8718 from Snuffleupagus/loadingBar-downloadComplete-check

Ensure that the loadingBar isn't displayed again when the entire file has already been fetched",True
ec916566d7c4a8332abb466efb5f1b697df40bfe,2017-07-29 19:06:46,Tim van der Meij,"Merge pull request #8717 from timvandermeij/mocks

Move the `XRefMock` in the unit tests to a central location",True
ab820438ae223a405cd4cfacfbb778033c26f3e0,2017-07-29 18:46:19,Tim van der Meij,"Move the `XRefMock` in the unit tests to a central location

This patch helps to avoid code duplication for this mock since more unit
tests are depending on it.",False
b2b175200581c242f6d24b85b2274ab3473e62dd,2017-07-29 16:47:22,Jonas Jenwald,ES6-ify the code in `web/dom_events.js`,False
fce31c3f8360da726206602d0823aeedf39245ab,2017-07-29 15:06:45,Jonas Jenwald,"Ensure that the loadingBar isn't displayed again when the entire file has already been fetched

This could only (potentially) happen when `disableAutoFetch` is used.",False
783d42ec2b92bb6cb953d8ee6f7764ba7ad74306,2017-07-29 03:44:03,Tim van der Meij,"Merge pull request #8611 from apoorv-mishra/colorspace-tests

Add unit-tests for colorspace.js",True
27b49a34ee3980c6144415ec2ee89c6e5326e4a7,2017-07-29 02:01:10,Tim van der Meij,"Merge pull request #8715 from yurydelendik/streams-polyfill

Use streams-lib as polyfill",True
01b47d9012b15c857f423dcbf2f7238f341c1985,2017-07-28 22:24:33,Yury Delendik,Use streams-lib as polyfill,False
a129de7bd1ea948545f556780aec943bcc5857c9,2017-07-28 14:24:56,Apoorv Mishra,"Add unit-tests for colorspace.js

Added unit-tests for DeviceGray, DeviceRGB and DeviceCMYK

Added unit-tests for CalGray

Added unit-tests for CalRGB

Removed redundant code

Added unit-tests for LabCS

Added unit-tests for IndexedCS

Update comment

Change lookup to Uint8Array as mentioned in pdf specs(these tests will pass after PR #8666 is merged).

Added unit-tests for AlternateCS

Resolved code-style issues

Fixed code-style issues

Addressed issues pointed out in https://github.com/mozilla/pdf.js/pull/8611#pullrequestreview-52865469",False
343b4dc2b61c88f9b549f212b5d91a8b7acd4209,2017-07-28 02:45:06,Yury Delendik,"Merge pull request #8617 from mukulmishra18/network-streaming

Adds Streams API support for networking task of PDF.js project.",True
109106794d226a2dd8c764681b411ffeb34efc38,2017-07-28 02:32:30,Mukul Mishra,"Adds Streams API support for networking task of PDF.js project.

network.js file moved to main thread and `PDFNetworkStream` implemented
at worker thread, that is used to ask for data whenever worker needs.",False
ac33358e1fd34fbb30a9f73bba7a729ebf97f2dc,2017-07-27 01:30:55,Brendan Dahl,"Fix several issues with glyph id mappings.

The initial issue with #8255 was I added a missing glyphs
check to adjustMapping, but this caused us to skip re-mapping
a glyph if the fontCharCode was a missingGlyph which in turn
caused us to overwrite a valid glyph id with an invalid one. While
fixing this, I also added a warning if the private use area is full since
this also accidentally happened when I made a different mistake.

This brought to light a number of issues where we map
missing glyphs to notdef, but often the notdef is actually defined
and then ends up being drawn. Now the glyphs don't get
mapped in toFontChar and so they are not drawn by the canvas.

Fixing the above brought up another issue though in bug1050040.pdf.
In this PDF, the font fails to load by the browser and before we were still
drawing the glyphs because it looked like the font had them, but with the fixes
above the glyphs showed up as missing so we didn't attempt draw them. To
fix this, I now throw an error when the loca table is in really bad shape and
we fall back to trying to use a system font. We now also use this fall back if
there are any format errors during converting fonts.",False
37ac8f8623be6d67f81714e5380370fccbf7e2e8,2017-07-26 02:05:52,Tim van der Meij,"Merge pull request #8698 from Snuffleupagus/issue-8697

Add a fallback for non-embedded SegoeUISymbol font (issue 8697)",True
44a5cec25eea693ffde45044779327514e349061,2017-07-26 01:43:20,Tim van der Meij,"Merge pull request #8666 from apoorv-mishra/fix-colorspace

Fix TypeError that occurs in colorspace.js on accidentally passing an 'Array' instead of 'TypedArray'",True
c830021b078a92448d4f7dc8281bfcec1e2873be,2017-07-25 22:59:51,Yury Delendik,Fixes CFF data glyph widths,False
23ec6b16ca1cdf179aa072a7f62ce225a9ebaab3,2017-07-25 16:15:11,Jonas Jenwald,"Add a fallback for non-embedded SegoeUISymbol font (issue 8697)

The PDF file uses a non-embedded SegoeUISymbol font, which is *not* a standard font (and is mainly used by Microsoft, see https://en.wikipedia.org/wiki/Segoe).

Fixes 8697.",False
bd8c12119a34256c29f9896af9812d64d02636e3,2017-07-25 03:10:30,Yury Delendik,"Merge pull request #8696 from mukulmishra18/sink-ready-rejection

Adds ready capability rejection logic for stream sink.",True
d1727b2566540bda53b8bd03ba931ed8decc6903,2017-07-25 02:58:28,Tim van der Meij,"Merge pull request #8692 from Snuffleupagus/issue-7696-ref-test

Add a reduced test-case for issue 7696",True
568b0b6a4272db16ab8cf4980b529a20e4d3296e,2017-07-25 02:07:38,Mukul Mishra,Adds ready capability rejection logic for stream sink.,False
794b099385694b575c77324ed2303276c573679c,2017-07-24 13:25:16,Jonas Jenwald,"Add a reduced test-case for issue 7696

Issue 7696 was one of the issues fixed by PR 8580. The other ones were all cases of missing glyphs, however in this particular one glyphs did render but every single one was incorrect.
Hence it probably cannot hurt to have a small, reduced, reference test for that PDF file as well.",False
38d566f1e5223cfd766922bfe8eb4e8f9e20a62b,2017-07-24 13:07:07,Jonas Jenwald,Update l10n files,False
53cd2f9d0a3da8a09b93efc0223c8e4c5ad3542b,2017-07-23 23:00:46,Tim van der Meij,"Merge pull request #8689 from tiagmoraismorgado/patch-1

Update README.md",True
60fc8c932a9a33a5020216f963fec04f1e1a3856,2017-07-23 22:27:19,Tiago Morais Morgado,Update README.md,False
af71ea7a7dcb8cbb3d710a73584a0de8d65e5a96,2017-07-23 16:47:07,Tim van der Meij,"Merge pull request #8673 from Snuffleupagus/api-pageMode

[api-minor] Add support for PageMode in the API and viewer (issue 8657)",True
e7cddcce283c5e76bc042747b5588a6d250c25e1,2017-07-22 23:12:24,Tim van der Meij,"Merge pull request #8684 from Snuffleupagus/rm-assert

Remove most `assert()` calls (issue 8506)",True
7ded895d0ca0d2b389b6e198eb69a4e82169f3d4,2017-07-22 20:55:09,Tim van der Meij,"Merge pull request #8638 from Snuffleupagus/issue-4926-built-in-jpg

In `src/core/jpg.js`, ensure that the Adobe JPEG marker always takes precedence, even when the color transform code is zero",True
814fa1dee36d6ee00ac1e7e582e2c5035b37f2f1,2017-07-21 22:21:02,Jonas Jenwald,"Remove most `assert()` calls (issue 8506)

This replaces `assert` calls with `throw new FormatError()`/`throw new Error()`.
In a few places, throwing an `Error` (which is what `assert` meant) isn't correct since the enclosing function is supposed to return a `Promise`, hence some cases were changed to `Promise.reject(...)` and similarily for `createPromiseCapability` instances.",False
09f04eccda084f7c063689a0adce74866151c5cd,2017-07-21 02:38:50,Tim van der Meij,"Merge pull request #8678 from Snuffleupagus/fix-Catalog-numPages-shadow

Fix a typo, in the `Catalog.numPages` getter, than prevents shadowing from working correctly",True
d14956d4b8bf148f730fc9ee96becbde7a22d1a2,2017-07-21 01:15:05,Apoorv Mishra,"Fix TypeError that occurs in colorspace.js on accidentally passing an 'Array' instead of 'TypedArray'

Fix TypeError that occurs in colorspace.js on accidentally passing an 'Array' instead of 'TypedArray'

Changed getRgbItem(...) to getRgbBuffer(...) since this.lookup has values in range[0, 255] whereas getRgbItem(...) expects those to be in range [0, 1]

Revert changes for IE9 compatibility",False
15f0963f51b0ec97d524cac7a017ccd8da956c48,2017-07-20 16:05:09,Jonas Jenwald,"Fix a typo, in the `Catalog.numPages` getter, than prevents shadowing from working correctly

Looking at the blame, it seems that this typo was present even before PR 700 (almost six years ago).
The result of using `'num'`, rather than the *correct* `'numPages'` string, is that the `Catalog.numPages` getter isn't actually being shadowed.",False
20d6286cceb936dfcb334ac1c963cf93c0da3637,2017-07-19 20:28:25,Jonas Jenwald,"Add support for, the API property, PageMode in the viewer (issue 8657)

Note that the PageMode, as specified in the API, will only be honoured when either: the user hasn't set the `sidebarViewOnLoad` preference to a non-default value, or a non-default `sidebarView` entry doesn't exist in the view history, or the ""pagemode"" hash parameter is included in the URL.

Since this is new functionality, the patch also includes a preference (`disablePageMode`), to make it easy to opt-out of this functionality if the user/implementor so wishes.",False
f7c4ed4bc326be11b8fc74b2fd4f5bb473902a60,2017-07-19 20:10:47,Jonas Jenwald,Refactor reading from the `ViewHistory` in `PDFViewerApplication.load`,False
16c5d41c5b45bee7d8e5733e7ea0157470dcaa6d,2017-07-19 20:10:03,Jonas Jenwald,"[api-minor] Add support for PageMode in the API (issue 8657)

Please refer to https://wwwimages2.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf#page=82.",False
4a74cc418ccb0b14dbbb50e0b964f32a41d16647,2017-07-17 02:10:37,Tim van der Meij,"Merge pull request #8653 from Rob--W/crx-migrate-pref-enableHandToolOnLoad-to-cursorToolOnLoad

Add UI for the cursorToolOnLoad pref in the Chrome extension + migration logic",True
5187f0fcbb1b9311a96af2dac1e20fe237c5b89c,2017-07-16 19:27:22,Jonas Jenwald,"Merge pull request #8636 from Snuffleupagus/es6-PDFViewer-class

Convert `PDFViewer` to an ES6 class",True
947b2f59fcc80efd38a1c493cf6ae2bb448eca01,2017-07-16 18:47:06,Tim van der Meij,"Merge pull request #8651 from Rob--W/issue-8620-follow-up-fix-tests

Fix display_svg_spec tests.",True
18566091aa84fa815d5c279010866bb3ffa94d7f,2017-07-16 14:31:52,Rob Wu,"Fix display_svg_spec tests.

- Mark the test as async, and don't swallow exceptions.
- Fix the DOMElement polyfill to behave closer to the actual getAttributeNS
  method, which excludes the namespace prefix.",False
e1536251d5bf6b9937f13242f64318cb2ea040b3,2017-07-16 13:50:35,Jonas Jenwald,Convert `PDFViewer` to an ES6 class,False
49333ddd440ed2fd32f61542e4e9020ea7fcd630,2017-07-16 13:47:38,Jonas Jenwald,"Move the `hasEqualPageSizes` getter from `PDFViewerApplication` and into `PDFViewer` instead

Since the method needs to access properties that are directly available inside of `PDFViewer`, it seems simpler to just have it live there.",False
19549bb7d6191cc6e79cc806b0fbf9c0598db192,2017-07-15 05:20:15,Rob Wu,"[CRX] Integrate cursorToolOnLoad pref + migration logic

Add UI for the cursorToolOnLoad pref in the UI of the Chrome extension.

Add logic to migrate the enableHandToolOnLoad pref to cursorToolOnLoad.
For past values in the mutable extension storage area:
1. If enableHandToolOnLoad=true, save cursorToolOnLoad=1.
2. Remove enableHandToolOnLoad.

For the managed extension storage, which is immutable since it is based
on administrative policies, use the following logic:
1. If enableHandToolOnLoad=true and cursorToolOnLoad=0 (default).
   set cursorToolOnLoad=0 and assume enableHandToolOnLoad=false.
2. As usual, managed preferences can (and will) be overridden by the user.

The first migration logic is in extensions/chromium/options/migration.js
and can be removed after a few months / less than many years.

The second migration logic is in web/chromecom.js, and should be kept
around for a long while (many years).

The need for this migration logic arises from the change by:
https://github.com/mozilla/pdf.js/pull/7635",False
afb1cd7377fb3ad4446e6e66640ef42b4f89854b,2017-07-15 04:52:02,Tim van der Meij,"Merge pull request #8649 from Snuffleupagus/es6-PDFLinkService-class

Convert `PDFLinkService` to an ES6 class",True
8ba80729373629420d17fcf7b25156824b659502,2017-07-14 20:00:25,Jonas Jenwald,Convert `PDFLinkService` to an ES6 class,False
ca3c08f12b1b1e70523d06b54232d26e07244f43,2017-07-14 17:53:38,Yury Delendik,"Merge pull request #8620 from Rob--W/issue-8560-improve-png-compression

Improve compression of PNG images embedded in generated SVG files",True
26be1df5f76bdedab0278017c5ccc26cbdaeaa98,2017-07-14 17:47:42,Tim van der Meij,"Merge pull request #8641 from Snuffleupagus/eslint-version-4-upgrade

Update ESLint (and eslint-plugin-mozilla) to the latest version",True
d95022328c7a0db160e2f447bdaf9c126aca8efd,2017-07-14 17:44:12,Tim van der Meij,"Merge pull request #8618 from Snuffleupagus/webViewerResize-rm-hack

Remove the scale-not-initialized hack from `webViewerResize` (in app.js)",True
3e472f179801dd30a5d6f9e14c8e7549a0673af9,2017-07-14 17:23:36,Tim van der Meij,"Merge pull request #8634 from nish17/master

Update inconsistent names",True
d7367f102e0080e6f41ae7a8cf27e35e71a63836,2017-07-14 17:04:17,Tim van der Meij,"Merge pull request #8609 from Snuffleupagus/findbar-more-adjustWidth

Ensure that `PDFFindBar._adjustWidth` is called in all situations where the width of the findbar might have changed",True
95093a5276d9e627717aa25411284727f312fad5,2017-07-14 02:18:04,Christian Myksvoll,"Check for undefined url (#8640)

* Check for undefined

new URL(file, window.location.href) throws the following error in IE11 + iPad Safari:
Unable to get property 'replace' of undefined or null reference

* Adapting previous change to pdf.js code standards

Added curly braces

* Moved check for undefined above try/catch",False
c673b6fee15c1478d09852915a0c71259313f3f9,2017-07-14 01:50:17,Yury Delendik,"Merge pull request #8646 from yurydelendik/issue-8645

Fixes pdf.js library source detection.",True
52460687ca32f9ba2f327dd8fb71cc25035e6847,2017-07-14 01:27:39,Yury Delendik,Fixes pdf.js library source detection.,False
a63015a9a2dcd0145f9842cd62e35ce53e58bc1f,2017-07-13 21:55:46,Jonas Jenwald,"Merge pull request #8643 from Snuffleupagus/polyfill-Number-isNaN

Add `Number.isNaN` and `Number.isInteger` polyfills in compatibility.js, since the Streams polyfill relies on them",True
f2270252c75bfd0fbfdcb8dba90a0d395c61ae29,2017-07-13 15:32:14,Jonas Jenwald,"Add `Number.isNaN` and `Number.isInteger` polyfills in compatibility.js, since the Streams polyfill relies on them

Without this, the Streams polyfill will fail in Internet Explorer when the code-paths containing these methods are used.",False
6f3565e6389b470e7a8d68bac5cd50f203849d1b,2017-07-12 16:44:25,Jonas Jenwald,Update ESLint (and eslint-plugin-mozilla) to the latest version,False
e2ea9b693c015aac665fbbfd0397e7ede78d4afc,2017-07-11 20:38:30,Jonas Jenwald,"In `src/core/jpg.js`, ensure that the Adobe JPEG marker always takes precedence, even when the color transform code is zero

According to the PDF specification, please see http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#G6.2394361, if an Adobe JPEG marker is present it should always take precedence. This even seem to be consistent with the existing comment that is present in the code.
Hence it seems reasonable to interpret `transformCode === 0` as no color conversion being necessary.

Fixes the rendering of page 1 in `issue-4926` (from the test-suite), when the built-in `src/core/jpg.js` image decoder is used.",False
11e95712d4291d7d800e9216acbe0fe8655ad4c2,2017-07-11 20:08:49,Jonas Jenwald,"Add support for the `nativeImageDecoderSupport` parameter, to force JPEG image decoding using `src/core/jpg.js`, when running the reference tests",False
e004b3cfabfa8e5abc7b3b62075be69b665012ac,2017-07-11 00:57:39,Nimesh Solanki,update inconsistent names,False
01f03fe393adf98d044d859e5338b8f04fe65212,2017-07-10 22:26:57,Rob Wu,"Optimize PNG compression in SVG backend on Node.js

Use the environment's zlib implementation if available to get
reasonably-sized SVG files when an XObject image is converted to PNG.
The generated PNG is not optimal because we do not use a PNG predictor.
Futher, when our SVG backend is run in a browser, the generated PNG
images will still be unnecessarily large (though the use of blob:-URLs
when available should reduce the impact on memory usage). If we want to
optimize PNG images in browsers too, we can either try to use a DEFLATE
library such as pako, or re-use our XObject image painting logic in
src/display/canvas.js. This potential improvement is not implemented by
this commit

Tested with:

- Node.js 8.1.3 (uses zlib)
- Node.js 0.11.12 (uses zlib)
- Node.js 0.10.48 (falls back to inferior existing implementation).
- Chrome 59.0.3071.86
- Firefox 54.0

Tests:

Unit test on Node.js:

```
$ gulp lib
$ JASMINE_CONFIG_PATH=test/unit/clitests.json node ./node_modules/.bin/jasmine --filter=SVG
```

Unit test in browser: Run `gulp server` and open
http://localhost:8888/test/unit/unit_test.html?spec=SVGGraphics

To verify that the patch works as desired,

```
$ node examples/node/pdf2svg.js test/pdfs/xobject-image.pdf
$ du -b svgdump/xobject-image-1.svg
 # ^ Calculates the file size. Confirm that the size is small
 #   (784 instead of 80664 bytes).
```",False
3479a19bf08884c08e353385b433380ad0ff5e49,2017-07-10 22:15:47,Rob Wu,"Remove btoa from domstubs.js

btoa is already defined by src/shared/compatibility.js,
which is unconditionally imported by src/shared/util.js.",False
a488ff4f70b15a784b7aed4e10d9f4e60707e3c3,2017-07-10 22:15:47,Rob Wu,Put every test file on a separate lint in jasmine-boot.js,False
9caaaf3a91529ed77785aa36c708b8f94a865f82,2017-07-10 22:15:47,Rob Wu,"Add setStubs/unsetStubs to domstubs to support testing

Do not directly export to global. Instead, export all stubs in domstubs.js and
add a method setStubs to assign all exported stubs to a namespace. Then replace
the import domstubs with an explicit call to this setStubs method.  Also added
unsetStubs for undoing the changes. This is done to allow unit testing of the
SVG backend without namespace pollution.",False
94f1dde07d1a72232b699fcd38ffbf4efb7d2514,2017-07-10 22:15:47,Rob Wu,"Move DEFLATE logic in convertImgDataToPng

Move the DEFLATE logic in convertImgDataToPng to a separate function.
A later commit will introduce a more efficient deflate algorithm,
and fall back to the existing, naive algorithm if needed.",False
2cef24a2adc0316d362986402ef541486b1326d8,2017-07-10 22:01:45,Yury Delendik,"Merge pull request #8630 from Rob--W/issue-8622-remove-__pdfjsdev_webpack__

Remove __pdfjsdev_webpack__, use webpack options",True
85161fa6dc81c3df921b27a378fbaf82491aa9ee,2017-07-10 15:50:25,Jonas Jenwald,Update l10n files,False
742ed3d1c9c19cab92956d8e6b416c25bcbfb4d5,2017-07-09 20:05:48,Rob Wu,"Remove __pdfjsdev_webpack__, use webpack options

`__pdfjsdev_webpack__` was used to skip evaluating part of an AST,
in order to not mangle some `require` symbols.
This commit removes `__pdfjsdev_webpack__`, and:

- Uses `__non_webpack_require__` when one wants the output to
  contain `require` instead of `__webpack_require__`.
- Adds options to the webpack config to prevent ""polyfills"" for
  some Node.js-specific APIs to be added.
- Use `// eslint-disable-next-line no-undef` instead of `/* globals ... */`
  for variables that are not meant to be used globally.",False
7b4887dd211c44d5ef852ad019921fb41fa3709b,2017-07-07 20:13:30,Yury Delendik,"Merge pull request #8581 from yurydelendik/rm-error

Removes error()",True
d028c262102587a5374fc2a20a976c92d283438c,2017-07-07 20:10:24,Yury Delendik,Removes error(),False
ac9802809c3ab11bbeb70472d5d8cf18b897616a,2017-07-06 19:28:06,Jonas Jenwald,"Merge pull request #8621 from Rob--W/eslint-version-update

Bump minimum eslint version to 3.19.0",True
06887b6b62d95364a0a3ee454351e8a169f7b3f1,2017-07-06 19:10:08,Rob Wu,"Bump minimum eslint version to 3.19.0

The previously referenced eslint version is not compatible with our code base.
For example, rule ""prefer-promise-reject-errors"" requires 3.14.0.",False
c253ee9ab8acb5729aefee3cd1638802ceea28c3,2017-07-06 17:20:02,Jonas Jenwald,"Ensure that the document is rendered on load, no matter what happens, by always calling `PDFViewer.update` *after* the initial position has been set",False
8391aacb89f49b3ce96874d942dce61f9dbd4184,2017-07-06 16:43:22,Jonas Jenwald,"Remove the scale-not-initialized hack from `webViewerResize` (in app.js)

Since we no longer, after PR 8555, allow changing the scale until the document is loaded, that hack is no longer necessary. Furthermore, no part of that event handling function needs to run unless a document is loaded.

The reason that this hack was initially added, is that previously the `ViewHistory` might be updated *before* `PDFViewerApplication.setInitialView` had run (in some cases leading to incorrect inital document scale). Since that is no longer possible, this is now dead code.",False
12f1b747b12468705bc7970f6ee1a224a7f2e0d0,2017-07-06 10:00:13,Jonas Jenwald,"Merge pull request #8555 from Snuffleupagus/viewer-components-pdfDocument-checks

Don't allow setting various properties, such as `currentPageNumber`/`currentScale`/`currentScaleValue`/`pagesRotation`, before `{PDFViewer, PDFThumbnailViewer}.setDocument` has been called",True
1788a6b0cf2f61e338e985ccb5c6cac5459b099c,2017-07-06 01:52:04,Jonas Jenwald,"Merge pull request #8615 from Snuffleupagus/issue-8613

Fix a stupid spelling error in the `ASCII85Decode` name in `Parser.makeInlineImage` (issue 8613)",True
ea71d23f742999c432e26189e9548bff8c8d7294,2017-07-05 23:13:09,Jonas Jenwald,"Fix a stupid spelling error in the `ASCII85Decode` name in `Parser.makeInlineImage` (issue 8613)

This is a trivial follow-up to PR 5383, and it's a bit strange that this has been wrong since late 2014 without anyone noticing (maybe because inline images aren't too common).
So, apparently code works better if you actually spell correctly, who knew ;-)

Fixes 8613.",False
b3bac5100ca9069df90eec1c7ff5fd93b7b3c789,2017-07-05 19:33:57,Yury Delendik,"Merge pull request #8596 from mukulmishra18/proper-read-result

Fixes wrong structure of fullReader.read() result.",True
9c95614bb679fe8cfd0dc5e105fd92824118fb59,2017-07-05 15:04:14,Jonas Jenwald,"Ensure that `PDFFindBar._adjustWidth` is called in all situations where the width of the findbar might have changed

After PR 8394, where the l10n service was converted to be asynchronous, we're no longer calling `_adjustWidth` after updating the `findMsg` label. Hence it's currently possible that the width of the findbar won't be correct. The solution is simple though, just call `_adjustWidth` after the `findMsg` label has been (asynchronously) updated.

Another existing issue, which was an oversight in PR 8132, is that `PDFFindBar.updateResultsCount` may be called directly from `PDFFindController`. In that case, we're not calling `_adjustWidth` at all, which means that the findbar may also not have the correct width.
The simple solution here is to always call `_adjustWidth` at the end of `updateResultsCount` (which is why we no longer need the `_adjustWidth` call at the end of `updateUIState`).",False
cb0009dab43e0f8aaf630fb826159936047a361e,2017-07-05 14:49:29,Jonas Jenwald,"Actually reset the `findResultsCount` label, in addition to hiding it, when no matches are found

Currently we're *only* hiding the label, but not actually resetting it until a new match is found.
Obviously it's being hidden, but it seems that it really ought to be completely reset as well (since e.g. `PDFFindBar.reset` won't technically reset *all* state otherwise).",False
eff257b8204c1816b8bfb660a3c5446bc06581b3,2017-07-04 15:46:07,Jonas Jenwald,"Merge pull request #8580 from brendandahl/missing-glyf

Fix how we detect and handle missing glyph data.",True
05b1ef2d2380d699c9d66dcdd9b1af4dab699b91,2017-07-04 15:29:25,Jonas Jenwald,"Merge pull request #8594 from Snuffleupagus/es6-web-let

Change `var` to `let`, and use object destructuring, in a couple of previously class converted `web/*.js` files",True
9f5c1550ede84bb4e489f5a11cafcf07ea55da1d,2017-07-04 06:28:28,Brendan Dahl,"Merge pull request #8592 from brendandahl/cmap-3-0

Only mask char codes of (3, 0) cmap tables in the range of 0xF000 to 0…",True
efbbd8533fd5dfca8282c9465decba6450e4dd12,2017-07-04 01:43:46,Brendan Dahl,"Only mask char codes of (3, 0) cmap tables in the range of 0xF000 to 0xF0FF.",False
6d4f748fb1663ce6f9abac171d65036c30a613ed,2017-07-04 01:36:06,Brendan Dahl,Fix how we detect and handle missing glyph data.,False
614e8cf2953752fe1c78d01a4e3bb7fa0d3080fc,2017-07-03 14:52:49,Jonas Jenwald,"Change `var` to `let`, and use object destructuring, in a couple of previously class converted `web/*.js` files

Note that these files were among the first to be converted to ES6 classes, so it probably makes sense to do another pass to bring them inline with the most recent ES6 conversions.",False
699f3392e49b678594e379fb3630471d7ac7483d,2017-07-03 14:40:21,Jonas Jenwald,Update l10n files,False
308a83e5ca4d95526daebd56a5c9a1707a8c3a77,2017-07-01 15:52:47,Mukul Mishra,Fixes wrong structure of fullReader.read() result.,False
9e4dcf156b6d31926b8d48112ee6625b674b1ddc,2017-07-01 02:58:59,Tim van der Meij,"Merge pull request #8585 from Snuffleupagus/issue-8584

Check that the `MessageHandler` isn't already terminated in the `onFailure` handler in `src/core/worker.js` (issue 8584)",True
82bd62ecc6cb86a10e1eec9eea782207938fd6a2,2017-06-30 13:49:09,Jonas Jenwald,"Merge pull request #8583 from Snuffleupagus/es6-app

ES6-ify the code in `web/app.js` and `web/viewer.js`",True
de0e7a9a68a015a8e9e85cb7ae1b2a20f35e468b,2017-06-30 13:41:13,Jonas Jenwald,"Check that the `MessageHandler` isn't already terminated in the `onFailure` handler in `src/core/worker.js` (issue 8584)

All other code-paths already checks that the `MessageHandler` isn't terminated, but apparently `onFailure` was missing that check (compare e.g. with the `onSuccess` function).
From what I can tell, this is only an issue if workers are *disabled*, hence why I didn't bother adding a unit-test.

Fixes 8584.",False
d64ac95a91f42f08abef186d274377c40e4e42be,2017-06-30 13:40:01,Jonas Jenwald,"ES6-ify the code in `web/app.js` and `web/viewer.js`

The changes consist mostly of changing `var` to `let`/`const`, and using shorthand method signatures.",False
80c33253ed0f70708753a13e49e361ebdac354f2,2017-06-30 13:38:28,Jonas Jenwald,"Merge pull request #8582 from timvandermeij/es6-text-layer-builder

Convert the text layer builder to ES6 syntax",True
19f56ec5c18aa8c161df9b718faf62d831f67657,2017-06-30 03:11:25,Tim van der Meij,Convert the text layer builder to ES6 syntax,False
87a0031d77a4c4f2eb059e6586d319ab0009d434,2017-06-30 01:35:44,Jonas Jenwald,"Merge pull request #8589 from brendandahl/fix-expert-encoding

Fix missing notdef in expert encoding.",True
a8a8909d2d80e0d03b3892f63f4e324a7bbed1b2,2017-06-30 00:42:39,Brendan Dahl,Fix missing notdef in expert encoding.,False
d6a6f390ae9a39554b73a942860f67badbef1b4b,2017-06-29 01:54:37,Tim van der Meij,"Merge pull request #8578 from Snuffleupagus/es6-ui_utils

ES6-ify the code in `web/ui_utils.js`",True
f6369fc87c7211cc0324f2774edf31441aac4937,2017-06-28 16:05:12,Jonas Jenwald,"ES6-ify the code in `web/ui_utils.js`

These changes consists mainly of replacing `var` with `let`/`const`, adding a couple of default parameters to function signatures, and finally converting `EventBus`/`ProgressBar` to proper classes.",False
f2fcf2a59c3372e033fc2f0ef98afa4e4690a894,2017-06-27 13:46:30,Jonas Jenwald,"Merge pull request #8574 from timvandermeij/svg-stroke-properties

SVG: move setting the stroke properties to the `stroke` method",True
f87f0d68123cf4f0d086b29475095abcaf7576c4,2017-06-27 02:58:43,Tim van der Meij,"Merge pull request #8576 from Snuffleupagus/toolbar-inline-selectScaleOption

Remove the `selectScaleOption` helper function, in `Toolbar._updateUIState`, and simply inline its code instead",True
1db290e8189ca53d964e5e6bd7539d880d0c22db,2017-06-26 18:00:41,Jonas Jenwald,Update l10n files,False
d4b93bec96146d43c956e2e3f7c03a4e73596ebe,2017-06-26 16:36:24,Jonas Jenwald,"Remove the `selectScaleOption` helper function, in `Toolbar._updateUIState`, and simply inline its code instead

After PR 8510, we now always lookup the localized `page_scale_percent` string to prevent any possible ordering issues. Since the scaleSelect dropdown is updated asynchronous, there's really no point in having a helper function any more, hence this code can rather be placed inline in `Toolbar._updateUIState`.",False
f1a87bab10e0807e2fe8935857bb1fe39bffb80b,2017-06-26 01:58:46,Tim van der Meij,"SVG: move setting the stroke properties to the `stroke` method

In general, we may not know the stroke properties when path construction
happens. Since we must know the properties when we apply the stroke, we
should set the properties at that point. Note that we already do that
for the color and opacity, but not yet for the other properties.",False
859e3d4dce2267a2c733f68354224a2f1efa0e2b,2017-06-25 02:12:18,Jonas Jenwald,"Merge pull request #8564 from timvandermeij/svg-opacity

SVG: implement fill and stroke opacity",True
d3a3b1db135791b811a50550bb1f9376505947b1,2017-06-25 01:44:29,Tim van der Meij,"Merge pull request #8571 from Snuffleupagus/readme-es6

Mention in the ""Getting the Code"" section of README.md that an ES6 compatible browser is required when using the default viewer with `gulp server`",True
84d0df2b31ded5ebc3d77c252687b0489fbd9dff,2017-06-24 16:06:20,Jonas Jenwald,"Mention in the ""Getting the Code"" section of README.md that an ES6 compatible browser is required when using the default viewer with `gulp server`

The https://github.com/mozilla/pdf.js/wiki/Contributing article has been updated to explicitly mention that an ES6 browser is now a minimum requirement for development.
Since we recently have seen a couple of issues filed which seemed to indicate that people tried to use PDF.js in browsers without full ES6 support, it's probably a good idea to mention this more prominently in the README as well.",False
f1f9d985192e628d2ea3baad0a6dc8953ec2cb07,2017-06-24 02:06:58,Brendan Dahl,"Merge pull request #8507 from Snuffleupagus/issue-8480

Only special-case OpenType fonts with `CFF` data if it's both a composite (i.e. Type0) font and also has a non-default CID to GID map (issue 8480)",True
e2ca894fec53893fe7afbefda4a115698e37b4eb,2017-06-23 23:22:13,Yury Delendik,"Merge pull request #8488 from mukulmishra18/streams-getTextContent

Streams get text content",True
d1567a947ec09ccb1c575887583ac7cf96b6669e,2017-06-23 23:19:55,Yury Delendik,"Merge pull request #8567 from ghetolay/fix_CMapReaderFactory+worker

Fix error when using custom CMapReaderFactory",True
7f79e123834d8769a19bf291398dca116c128530,2017-06-23 19:29:43,ghetolay,Fix error when using custom CMapReaderFactory and worker,False
f9eafefa0966a3527364fb7e596c01157f119aee,2017-06-23 04:07:27,Tim van der Meij,SVG: implement stroke opacity,False
440914e49b96021314fb67829c32d63e22e3f1b8,2017-06-23 04:07:27,Tim van der Meij,"SVG: implement fill opacity

This makes the `eoFill` method similar to the `eoStroke` method and the
ones in `src/display/canvas.js`.",False
2f2e539bc6529ca54d141d19fd57d94cdbd2e265,2017-06-23 03:21:21,Tim van der Meij,"Merge pull request #8561 from Snuffleupagus/zoomLayer-canvas-hidden

Don't use a hidden canvas when constructing the `zoomLayer` in `PDFPageView.update`",True
c6ee05f7e5df878a2c2d78038e3069e1a7ea3b9d,2017-06-23 03:18:06,Tim van der Meij,"Merge pull request #8542 from Rob--W/svg-clipping

Move svg:clipPath generation from clip to endPath",True
426e26c63baf614056ee1b978e51fd9cfdd095a1,2017-06-22 13:35:41,Jonas Jenwald,"Don't use a hidden canvas when constructing the `zoomLayer` in `PDFPageView.update`

*This is an existing issue that I noticed while testing PR 8552.*

When zooming or rotation occurs, we'll try to use the current canvas as a (CSS transformed) preview until the page has been completely re-drawn.
If you manage to change the scale (or rotation) *very* quickly, it's possible that `PDFPageView.update` can be called *before* a previous `render` operation has progressed far enough to remove the `hidden` property from the canvas.

The result is thus that a page may be *entirely* black during zooming or rotation, which doesn't look very good. This effect can be a bit difficult to spot, but it does manifest even in the default viewer.",False
fc6448d18ce6000ef6711f5485bd982bddc0eb54,2017-06-22 04:38:17,Rob Wu,"Move svg:clipPath generation from clip to endPath

In the PDF from issue 8527, the clip operator (W) shows up before a path
is defined. The current SVG backend however expects a path to exist
before generating a `<svg:clipPath>` element.
In the example, the path was defined after the clip, followed by a
endPath operator (n).
So this commit fixes the bug by moving the path generation logic from
clip to endPath.

Our canvas backend appears to use similar logic:
`CanvasGraphics_endPath` calls `consumePath`, which in turn draws the
clip and resets the `pendingClip` state. The canvas backend calls
`consumePath` from multiple other places, so we probably need to check
whether doing so is also necessary for the SVG backend.

I scanned our corpus of PDF files in test/pdfs, and found that in every
instance (except for one), the ""W"" PDF operator (clip) is immediately
followed by ""n"" (endPath). The new test from this commit (clippath.pdf)
starts with ""W"", followed by a path definition and then ""n"".

    # Commands used to find some of the clipping commands:
    grep -ra '^W$' -C7 | less -S
    grep -ra '^W ' -C7 | less -S
    grep -ra ' W$' -C7 | less -S

test/pdfs/issue6413.pdf is the only file where ""W"" (a tline 55) is not
followed by ""n"". In fact, the ""W"" is the last operation of a series of
XObject painting operations, and removing it does not have any effect
on the rendered PDF (confirmed by looking at the output of PDF.js's
canvas backend, and ImageMagick's convert command).",False
36fb3686ccc5b1cd98e5f20b920bdeb7ed4d359d,2017-06-22 03:33:58,Tim van der Meij,"Merge pull request #8556 from Snuffleupagus/app-remove-pageRotation

Stop tracking the rotation in `PDFViewerApplication` and directly use `PDFViewer.pagesRotation` instead",True
5ff4cd8f0de6abd010f24e2c1b074144afc78400,2017-06-21 20:58:45,Jonas Jenwald,"Merge pull request #8552 from yurydelendik/canvas-hidden

Ensure canvas is really hidden when used with pdfjs-dist.",True
83673a12d7375d9614454c333eab0c2fc5b9a391,2017-06-21 15:15:36,Jonas Jenwald,"Stop tracking the rotation in `PDFViewerApplication` and directly use `PDFViewer.pagesRotation` instead

Part of the rotation handling code, in what's now `web/app.js`, hasn't really changed since before the viewer was split into multiple files/components.

Similar to other properties, such as current page/scale, we should probably avoid tracking state in multiple places. Hence I'm suggesting that we don't store the rotation in `PDFViewerApplication`, and access the value in `PDFViewer` instead.

Since `PDFViewerApplication.pageRotation` has existed for a very long time, a getter was added to avoid outright breaking third-party code that may depend on it.",False
735b58c3d5a76d557654e1022da9ec6a6ba0965a,2017-06-21 15:07:33,Jonas Jenwald,"Don't allow setting various properties, such as `currentPageNumber`/`currentScale`/`currentScaleValue`/`pagesRotation`, before `{PDFViewer, PDFThumbnailViewer}.setDocument` has been called

Currently a number of these properties do not work correctly if set *before* calling `setDocument`; please refer to the discussion starting in https://github.com/mozilla/pdf.js/pull/8539#issuecomment-309706629.

Rather than trying to have *some* of these methods working, but not others, it seems much more consistent to simply always require that `setDocument` has been called.",False
9bed695ebde488b49d39290087f72ba224bd1078,2017-06-21 03:54:48,Yury Delendik,"Merge pull request #8540 from Rob--W/svg-oom

Reduce memory requirements of pdf2svg.js example to avoid OOM",True
18e1f3d29be5adbd703a378796de0099821d7e19,2017-06-21 01:15:07,Yury Delendik,"Ensure canvas is really hidden when used with pdfjs-dist.

Avoids black background flickering in such examples as components/simpleviewer.html",False
054fe1392078078e9d2d71879ed6a73d2202ed50,2017-06-20 13:49:06,Jonas Jenwald,"Merge pull request #8537 from timvandermeij/es6-toolbar

Convert the toolbar to ES6 syntax",True
0cc173580934c3420ab3f1bf5d2dbe67e8e4599c,2017-06-20 01:23:11,Rob Wu,"Reduce concurrent memory footprint of pdf2svg.js

Wait for the completion of writing the generated SVG file before
processing the next page. This is to enable the garbage collector to
garbage-collect the (potentially large) SVG string before trying to
allocate memory again for the next page.

Note that since the PDF-to-SVG conversion is now sequential instead of
parallel, the time to generate all pages increases.

Test case:
node --max_old_space_size=200 examples/node/pdf2svg.js /tmp/FatalProcessOutOfMemory.pdf

Before this patch:
- Node.js crashes due to OOM after processing 20 pages.

After this patch:
- Node.js is able to convert all 203 PDFs to SVG without crashing.",False
849d8cfa2440812e8deff61a93c72727e7d9e0d5,2017-06-20 01:22:39,Rob Wu,"Improve memory-efficiency of DOMElement_toString in domstubs

Test case:
Using the PDF file from https://github.com/mozilla/pdf.js/issues/8534
node --max_old_space_size=200 examples/node/pdf2svg.js /tmp/FatalProcessOutOfMemory.pdf

Before this patch:
Node.js crashes due to OOM after processing 10 pages.

After this patch:
Node.js crashes due to OOM after processing 19 pages.",False
679ffc84f684872dd17aebbb0bc39dc7b6b8aabb,2017-06-19 21:04:33,Yury Delendik,"Merge pull request #8544 from Rob--W/compatiblity-safari-strict-error

compatibility.js: Rename parameters in JURL",True
f912f89e693bb221ae451877360caa1d3e5c25f7,2017-06-19 20:33:41,Rob Wu,compatibility.js: Rename parameters in JURL,False
df4782dab74f7ed6cd688c841be0b5d925852ac3,2017-06-19 20:28:18,Yury Delendik,"Merge pull request #8543 from Rob--W/svg-domstubs-closePath

Add getAttributeNS to domstubs for SVG example",True
4f22ba54bf9779226dfee4c44d5c7bcd056e5662,2017-06-19 17:41:13,Rob Wu,"Add getAttributeNS to domstubs for SVG example

The closePath method in src/display/svg.js relies on this.",False
b0bf69dd8c8a20cb3b377b6be1415f6b7e43a932,2017-06-19 15:07:18,Jonas Jenwald,Update l10n files,False
d4e0aa4031cbdc03d6807e756b5b2c27b5ede6cd,2017-06-19 01:50:13,Tim van der Meij,Convert the toolbar to ES6 syntax,False
db52e4fb73dcb0eb47d88a7a09ec82c3374fe052,2017-06-19 01:47:40,Tim van der Meij,"Merge pull request #8536 from Snuffleupagus/refactor-ObjectLoader

Refactor `ObjectLoader` to use `Dict`s correctly, rather than abusing their internal properties",True
a6311471a7798ab0cacca4ac47840ffa8279eb91,2017-06-19 01:30:39,Tim van der Meij,"Merge pull request #8539 from Snuffleupagus/rm-load-currentScale-call

Remove a redundant `PDFViewer.currentScale` call from `PDFViewerApplication.load`",True
4aab3cef4ac9059e6b61fb821d2dbc7fd0047440,2017-06-18 18:04:29,Jonas Jenwald,"Remove a redundant `PDFViewer.currentScale` call from `PDFViewerApplication.load`

Since this call occurs *before* the `PDFViewer.setDocument` call, it won't actually cause any scale change.
Furthermore, moving it should not be necessary, since the `scale` is already used as the fallback case in `PDFViewerApplication.setInitialView` (provided it's non-zero, which isn't even the case in the default viewer).

Hence this patch should cause no functional changes at all, since it simply removes a piece of unnecessary code.",False
8e9b4b5ff2be605895904db86be938d86a123016,2017-06-18 02:06:42,Tim van der Meij,"Merge pull request #8535 from Snuffleupagus/app-close-pageRotation-downloadComplete

Reset `pageRotation` and `downloadComplete` in `PDFViewerApplication.close`",True
7215e9c52e490ba06ff3529d6cf6a32e86e01b0a,2017-06-18 02:02:16,Tim van der Meij,"Merge pull request #8525 from curiosity26/master

Allow for unbinding of events in web application",True
73234577e14040d4cdc999457ca7e04fcdf0a6e3,2017-06-17 21:02:00,Jonas Jenwald,"Rename `map` to `_map` inside of `Dict`, to make it clearer that it should be regarded as a ""private"" property",False
0c13d0ff4618b3759d84a506390e31b573d7221d,2017-06-17 20:03:27,Mukul Mishra,"Adds Streams API in getTextContent to stream data.

This patch adds Streams API support in getTextContent
so that we can stream data in chunks instead of fetching
whole data from worker thread to main thread. This patch
supports Streams API without changing the core functionality
of getTextContent.

Enqueue textContent directly at getTextContent in partialEvaluator.

Adds desiredSize and ready property in streamSink.",False
e4d032c5c7c6b895ae2b66d69f03005f5b9fcf25,2017-06-17 17:44:19,Jonas Jenwald,"Reset `pageRotation` and `downloadComplete` in `PDFViewerApplication.close`

Currently, these properties are reset in what appears to be somewhat arbitrary locations (within the `load` and `open` methods respectively). The explanation is probably that both of these properties predates the existence of any centralized clean-up code in the viewer.

Hence I think that it makes sense to move the resetting of these properties to the `close` method, since that improves the overview of what's actually cleaned-up/reset when changing documents in the viewer.",False
3a20fd165f1cdefe16e253c13345924d324de38a,2017-06-17 02:29:32,Jonas Jenwald,"Refactor `ObjectLoader` to use `Dict`s correctly, rather than abusing their internal properties

The `ObjectLoader` currently takes an Object as input, despite actually working with `Dict`s internally. This means that at the (two) existing call-sites, we're passing in the ""private"" `Dict.map` property directly.

Doing this seems like an anti-pattern, and we could (and even should) simply provide the actual `Dict` when creating an `ObjectLoader` instance.
Accessing properties stored in the `Dict` is now done using the intended methods instead, in particular `getRaw` which (as the name suggests) doesn't do any de-referencing, thus maintaining the current functionality of the code.

The only functional change in this patch is that `ObjectLoader.load` will now ignore empty nodes, such that `ObjectLoader._walk` only needs to deal with nodes that are known to contain data. (This lets us skip, among other checks, meaningless `addChildren` function calls.)",False
f2fc9ee2815b63a5ef5f38e99465a9a3d0f39b66,2017-06-17 02:29:32,Jonas Jenwald,"Slightly refactor and ES6-ify the code in `ObjectLoader`

This patch changes all `var` to `let`, and caches the array lengths in all loops. Also removes two unnecessary temporary variable assignments.",False
0c93dee0de9c560218bf6eb3332926fd1f507377,2017-06-16 21:51:45,Yury Delendik,"Merge pull request #8515 from yurydelendik/bloborigin

Adds special case for origin of blob to the compatibility URL.",True
209751346c80ee9ccaae9ef9d6d4f751b53ebcc5,2017-06-15 22:39:35,Yury Delendik,"Merge pull request #8531 from Snuffleupagus/rm-updatePosition

Remove `PDFPageView.updatePosition` since it's not actually necessary",True
83263042719f35f1befac803def2d4c1b1b1545f,2017-06-15 19:28:54,curiosity26,"Allow for unbinding of events in web application

Hold bound event listeners for later unbinding

ES6 styling

More ES6 styling and code cleanup

Remove 4 space indents and remove delete statements.",False
70d65500024137c14a6663c4f4dae0cab32820bc,2017-06-15 16:55:37,Jonas Jenwald,"Remove `PDFPageView.updatePosition` since it's not actually necessary

This method is currently called from `PDFViewer._scrollUpdate` on *every* scroll event in the viewer.

However, I cannot see why this code is now necessary (assuming that it once was), since text-selection and searching still works *exactly* the same way with this patch as with the current `master`.

When `PDFPageView.updatePosition` is called, the page can be in either of these states:
 1. The page hasn't been rendered, in which case the `textLayer` property doesn't exist yet.
 2. The page is currently rendering, meaning that the `textLayer` property exists. Given that the `textContent` won't be fetched until the page has been successfully rendered, `TextLayerBuilder.render` will return immediately and effectively be a no-op (since there's nothing to render yet).
 3. The has been been rendered, and the `textLayer` is currently rendering.
 4. The page, and its `textLayer`, has been completely rendered. In this case, `TextLayerBuilder.render` will return immediately and effectively be a no-op.

Here, only the *third* case seem to require any further analysis:
When scrolling occurs while the `textLayer` is rendering, `TextLayerBuilder.render` will via a helper method call `TextLayerRenderTask.cancel` (in src/display/text_layer.js) to stop processing.
However, due to the run-to-completion nature of JavaScript, once `TextLayerRenderTask._render` has been invoked `appendText` will always run.[1]

So even though we cancel rendering of pending `textLayer`s during scrolling, via the repeated `TextLayerBuilder.render` calls from within the `PDFPageView.updatePosition` method, that does *not* prevent us from running the code inside of `TextLayerRenderTask._render` over and over for the *same* page; which all seems *very* inefficient to me.[2]

All this will thus have the effect of delaying the *actual* rendering of a `textLayer` ever so slightly while scrolling in the viewer. However, it does so at the expense of potentially hundreds of unnecessary `appendText` calls.[3]

Hence it seems to me that it's less resource intensive overall to simply let rendering of the `textLayer` complete, once it has started. Obviously, we still abort all rendering of a page, and its `textLayer`, when it's being destroyed (e.g. by being evicted from the page cache).

In case that there's any worry that the patch could affect e.g. highlighting of search results, please note that the existing code in `TextLayerBuilder.render` already calls `updateMatches` when the `TextLayerTask` resolves successfully.

*I'm sorry that this became quite long, but to try and summarize:*
`PDFPageView.updatePosition` doesn't actually do anything in *most* cases. In the one case where it matters, it seems that it's actually doing more harm than good; which is why I'm proposing that we just remove it.

---
[1] Although we may be able to skip the `render` call, provided that it happens *after* a `timeout` (as is the case in the default viewer).
[2] With current work being done to support streaming of `TextContent`, we'd also need to add just as many duplicate API calls to `PDFPageView.updatePosition`.
[3] The number of duplicate `appendText` calls is directly proportional not only to the scroll speed, but also to the number of pages in the document.",False
82f3145a5d8630378f378ef8f4f8596204273a6b,2017-06-13 20:24:10,Yury Delendik,"Merge pull request #8522 from yurydelendik/weakmapfix

Fixes WeakMap polyfill (and improves PDFWorker port check).",True
631e6bebff553ce42c278cb7b670ab160207656a,2017-06-13 20:06:58,Yury Delendik,Fixes WeakMap polyfill (and improves PDFWorker port check).,False
b44848b9185da935592aa1ee2e72cff25fb092ba,2017-06-13 18:49:46,Yury Delendik,Adds special case for origin of blob to the compatibility URL.,False
e5ac64f81fadc96099e9e95c9bc401f69502d501,2017-06-13 17:09:36,Jonas Jenwald,"Merge pull request #8519 from yurydelendik/issue8476

Preventing from using the same canvas for multiple render()",True
24f14d44cb7ebda981bcbb3e1cb83feab801bd24,2017-06-13 03:03:49,Yury Delendik,Preventing from using the same canvas for multiple render(),False
c26e49724400fb2c463f3348c8322daefc9539ed,2017-06-13 02:29:09,Tim van der Meij,"Merge pull request #8401 from yurydelendik/dist-install

Adds gulp dist-install command; using pdfjs-dist package in examples.",True
0ca6132ad276b356a1b4d4a9b37a328e2e76937e,2017-06-12 23:17:35,Jonas Jenwald,"Merge pull request #8517 from yurydelendik/global2.0

Additional check in globalScope detections",True
a18caa730d0ba80bbd18c213ac327479d737d7bb,2017-06-12 20:52:16,Yury Delendik,Adds gulp dist-install command; using pdfjs-dist package in examples.,False
db7a7705427f52597cf494c66c241aa85ec6e21b,2017-06-12 20:44:46,Yury Delendik,Additional check in globalScope detections,False
c2641045e635d40c53024dcc0a946f393ece203b,2017-06-12 14:06:26,Jonas Jenwald,Update l10n files,False
08c6437196512a3f98e0febb9f6d8148f135cd98,2017-06-10 18:33:03,Yury Delendik,"Merge pull request #8510 from Snuffleupagus/zoom-dropdown-glitches

Prevent the Zoom dropdown from intermittently displaying an incorrect custom scale in Firefox (PR 8394 follow-up)",True
1766fe8184eb3b8d77c72eb63bce5cde68a510f8,2017-06-10 18:26:05,Jonas Jenwald,"Merge pull request #8508 from yurydelendik/issue8246

Fixes duplicate creation of PDFWorker for the same port.",True
75edb859ce4e281a21422d55798eee8397438dc8,2017-06-10 17:35:52,Jonas Jenwald,"Refactor the `selectScaleOption` function, in `Toolbar._updateUIState`, to prevent any possible future display glitches

Since the localization service is now asynchronous, depending on the load the browser is under, there's a small risk that the lookup of the 'page_scale_percent' string could be delayed slightly.
If the scale would change a couple of times in *very* quick succession, there's perhaps a *theoretical* possibility that the Zoom dropdown would display an incorrect value.

Consider the following, somewhat contrived, theoretical example of two zoom commands being executed *right* after one another:
```javascript
PDFViewerApplication.pdfViewer.currentScale = 1.23;
PDFViewerApplication.pdfViewer.currentScaleValue = 'page-width';
```

Only the `currentScale` call will currently trigger a l10n lookup in `selectScaleOption`. However, as far as I understand, there's no *guarantee* that the l10n string is resolved *before* `selectScaleOption` is called again as a result of the `currentScaleValue` call.

This thus has the possibility of putting the Zoom dropdown into an inconsistent state, since it's currently updated synchronously for one code-path and asynchronously for another.

To avoid these issues, I'm proposing that we *always* update the Zoom dropdown asynchronously, such that we can guarantee that the ordering is correct.",False
2971f522d43ee7173c4615bafa19f9b680736267,2017-06-10 17:34:53,Jonas Jenwald,"Prevent the Zoom dropdown from intermittently displaying an incorrect custom scale in Firefox (PR 8394 follow-up)

After PR 8394, at least in Firefox, the Zoom dropdown now frequently displays an old custom scale instead of the correct one. To see this behaviour, the following STR works for me:
 1. Open https://mozilla.github.io/pdf.js/web/viewer.html.
 2. Zoom in, by clicking on the corresponding button in the toolbar.
 3. Run `PDFViewerApplication.pdfViewer.currentScaleValue` in the console.
 4. Compare what's displayed in the Zoom dropdown with what's printed in the console. (If no difference can be observed, try repeating steps 2 through 4 a couple of times.)

I really don't understand why this happens, but it seems that waiting until a custom scale has been set *before* selecting it fixes things in Firefox (and works fine in e.g. Chrome as well).
Note that this patch thus makes this particular piece of the code consistent with the state prior to PR 8394.",False
69c804a0f40ea1c5f3bd8a9807567afd2ce558af,2017-06-10 17:32:29,Yury Delendik,Fixes duplicate creation of PDFWorker for the same port.,False
f34d692758a1d6ba4021d28e5d1794730d295083,2017-06-10 16:06:42,Jonas Jenwald,"Merge pull request #8441 from Snuffleupagus/issue-8330

Ensure that `TilingPattern`s have valid (non-zero) /BBox arrays (issue 8330)",True
e589834f136b3b6492700eacb460682de154fc11,2017-06-10 01:11:48,Jonas Jenwald,"Ensure that `TilingPattern`s have valid (non-zero) /BBox arrays (issue 8330)

Fixes 8330.",False
8b4a42e5b8388242d798999ae2dd56f10c834f43,2017-06-10 00:45:39,Jonas Jenwald,"Only special-case OpenType fonts with `CFF` data if it's both a composite (i.e. Type0) font and also has a non-default CID to GID map (issue 8480)

*As mentioned the last time that I touched this particular part of the font code, I'm sincerely hope that this doesn't cause any regressions!*

However, the patch passes all tests added in PRs 5770, 6270, and 7904 (and obviously all other tests as well). Furthermore, I've manually checked all the issues/bugs referenced in those PRs without finding any issues.

Fixes 8480.",False
93420545024b1879b8d92cd9d3741c1727bc090d,2017-06-09 22:32:12,Yury Delendik,"Merge pull request #8430 from mukulmishra18/sendWithStream

Adds sendWithStream method in MessageHandler.",True
999e30723df8825fc4bb982d79a01c28348a3cdf,2017-06-09 21:56:57,Jonas Jenwald,Reduce the duplication slightly when detecting an OpenType font (in the `Font` constructor),False
e6f5b3e37e995b1fe22ebace48511c9949bad4b4,2017-06-08 02:26:47,Tim van der Meij,"Merge pull request #8499 from Snuffleupagus/issue-8498

Prevent console errors when clicking to change page while in Presentation Mode (issue 8498)",True
bbd9968f76c68f6120a6e36825796347b7bb152a,2017-06-07 21:05:27,Mukul Mishra,"Added sendWithStream method in MessageHandler.

Adds functionality to accept Queueing Strategy in
sendWithStream method. Using Queueing Strategy we
can control the data that is enqueued into the sink,
and hence regulated the flow of chunks from worker
to main thread.

Adds capability in pull and cancel methods.
Adds ready and desiredSize property in streamSink.

Adds unit test for ReadableStream and sendWithStream.",False
3f2d5cfcc3fed2832e8e9a52e68eba5b10a8d117,2017-06-07 20:52:50,Jonas Jenwald,"Prevent console errors when clicking to change page while in Presentation Mode (issue 8498)

The click handler used in Presentation Mode didn't check if the first/last page was already reached, which after PR 7529 now causes an unnecessary console error.
Hence we should simply use the already existing `_goToPreviousPage`/`_goToNextPage` methods instead, since they do the necessary bounds checking.

Fixes 8498.",False
edd7d89fe5738f10b6673e616bf3de7a8629bdcb,2017-06-06 00:14:22,Brendan Dahl,"Merge pull request #8467 from mozilla/bug1353029

Bug 1353029 - Pass PdfJs.enabled into child on change.",True
5834ef6ff2700f998ac25d911327d0ec79fa96fd,2017-06-06 00:08:40,Brendan Dahl,Bug 1353029 - Pass PdfJs.enabled into child on change.,False
e696589a09f0ae8dc2a857d56cf7db6c187ff56b,2017-06-05 16:15:42,Jonas Jenwald,Update l10n files,False
fccb0b5cf889885873f5d27168e372ddbe5715fe,2017-06-05 16:11:30,Jonas Jenwald,"Merge pull request #8483 from timvandermeij/es6-find-controller

Convert the find controller to ES6 syntax",True
9a95d91b923a0622ec9ab3a6bcd58021e6922f42,2017-06-05 01:17:12,Tim van der Meij,"Convert the find controller to ES6 syntax

Moreover, rename `FindStates` to `FindState` since enumeration names are
usually not in plural, for readability and consistency with the ones in
`src/shared/util.js`.",False
8654635b0b97b1e1df2d7164c6d39db6da5e6fcd,2017-06-05 01:08:15,Tim van der Meij,"Merge pull request #8482 from timvandermeij/es6-thumbnails

Convert the thumbnail view/viewer to ES6 syntax",True
733a58a31588bb953300bd05bac27325d1766396,2017-06-05 01:02:27,Tim van der Meij,Convert the thumbnail view to ES6 syntax,False
a682d77e71e8d5f0901d190a3d3d674d0df4a55f,2017-06-05 01:00:29,Tim van der Meij,Convert the thumbnail viewer to ES6 syntax,False
63b89c1100c3083a395af75f8ba51d36d506bd6a,2017-06-04 22:13:50,Tim van der Meij,"Merge pull request #8478 from Snuffleupagus/ESLint-object-styles

Fix the remaining cases of inconsistent spacing and trailing commas in objects, and enable the `comma-dangle` and `object-curly-spacing` ESLint rules",True
4a906955c4da85ecc9c11af9babe34abd179c630,2017-06-04 03:05:37,Jonas Jenwald,"Fix the remaining cases of inconsistent spacing and trailing commas in objects, and enable the `comma-dangle` and `object-curly-spacing` ESLint rules

http://eslint.org/docs/rules/comma-dangle
http://eslint.org/docs/rules/object-curly-spacing

*Please note:* This patch was created automatically, using the ESLint `--fix` command line option. In a couple of places this caused lines to become too long, and I've fixed those manually; please refer to the interdiff below for the only hand-edits in this patch.

```diff
diff --git a/gulpfile.js b/gulpfile.js
index d18b9c58..7d47fd8d 100644
--- a/gulpfile.js
+++ b/gulpfile.js
@@ -1247,7 +1247,8 @@ gulp.task('gh-pages-git', ['gh-pages-prepare', 'wintersmith'], function () {
   var reason = process.env['PDFJS_UPDATE_REASON'];

   safeSpawnSync('git', ['init'], { cwd: GH_PAGES_DIR, });
-  safeSpawnSync('git', ['remote', 'add', 'origin', REPO], { cwd: GH_PAGES_DIR, });
+  safeSpawnSync('git', ['remote', 'add', 'origin', REPO],
+                { cwd: GH_PAGES_DIR, });
   safeSpawnSync('git', ['add', '-A'], { cwd: GH_PAGES_DIR, });
   safeSpawnSync('git', [
     'commit', '-am', 'gh-pages site created via gulpfile.js script',
```",False
a3fae906a638eb0e0a8d3627e79623f35a9137c3,2017-06-04 01:52:00,Tim van der Meij,"Merge pull request #8474 from Snuffleupagus/ESLint-object-styles-src-core

Fix inconsistent spacing and trailing commas in objects in `src/core/` files, so we can enable the `comma-dangle` and `object-curly-spacing` ESLint rules later on",True
4c6c61419be34291f6a0abf7fd8f207716c8dd2c,2017-06-04 01:45:17,Tim van der Meij,"Merge pull request #8475 from Snuffleupagus/ESLint-object-styles-src

Fix inconsistent spacing and trailing commas in objects in remaining `src/` files, so we can enable the `comma-dangle` and `object-curly-spacing` ESLint rules later on",True
02971892afff290c540634b79dfc6a909cdae31b,2017-06-04 01:40:05,Tim van der Meij,"Merge pull request #8477 from Snuffleupagus/ESLint-object-styles-test

Fix inconsistent spacing and trailing commas in objects in `test/` files, so we can enable the `comma-dangle` and `object-curly-spacing` ESLint rules later on",True
efbd68efef068c33ef45ead0c4bd3f61cce82a5f,2017-06-02 16:34:04,Jonas Jenwald,"Fix inconsistent spacing and trailing commas in objects in `test/` files, so we can enable the `comma-dangle` and `object-curly-spacing` ESLint rules later on

http://eslint.org/docs/rules/comma-dangle
http://eslint.org/docs/rules/object-curly-spacing

Given that we currently have quite inconsistent object formatting, fixing this in *one* big patch probably wouldn't be feasible (since I cannot imagine anyone wanting to review that); hence I've opted to try and do this piecewise instead.

Please note: This patch was created automatically, using the ESLint `--fix` command line option. In a couple of places this caused lines to become too long, and I've fixed those manually; please refer to the interdiff below for the only hand-edits in this patch.

```diff
diff --git a/test/chromium/test-telemetry.js b/test/chromium/test-telemetry.js
index cc412a31..2e5bdfa1 100755
--- a/test/chromium/test-telemetry.js
+++ b/test/chromium/test-telemetry.js
@@ -324,7 +324,7 @@ var tests = [
     var window = createExtensionGlobal();
     telemetryScript.runInNewContext(window);
     window.chrome.runtime.getManifest = function() {
-     return { version: '1.0.1', };
+      return { version: '1.0.1', };
     };
     window.Date.test_now_value += 12 * 36E5;
     telemetryScript.runInNewContext(window);
diff --git a/test/unit/api_spec.js b/test/unit/api_spec.js
index 1f00747a..f22988e7 100644
--- a/test/unit/api_spec.js
+++ b/test/unit/api_spec.js
@@ -503,8 +503,9 @@ describe('api', function() {
     it('gets destinations, from /Dests dictionary', function(done) {
       var promise = doc.getDestinations();
       promise.then(function(data) {
-        expect(data).toEqual({ chapter1: [{ gen: 0, num: 17, }, { name: 'XYZ', },
-                                          0, 841.89, null], });
+        expect(data).toEqual({
+          chapter1: [{ gen: 0, num: 17, }, { name: 'XYZ', }, 0, 841.89, null],
+        });
         done();
       }).catch(function (reason) {
         done.fail(reason);
diff --git a/test/unit/function_spec.js b/test/unit/function_spec.js
index 66441212..62127eb9 100644
--- a/test/unit/function_spec.js
+++ b/test/unit/function_spec.js
@@ -492,9 +492,11 @@ describe('function', function() {
     it('check compiled mul', function() {
       check([0.25, 0.5, 'mul'], [], [0, 1], [{ input: [], output: [0.125], }]);
       check([0, 'mul'], [0, 1], [0, 1], [{ input: [0.25], output: [0], }]);
-      check([0.5, 'mul'], [0, 1], [0, 1], [{ input: [0.25], output: [0.125], }]);
+      check([0.5, 'mul'], [0, 1], [0, 1],
+            [{ input: [0.25], output: [0.125], }]);
       check([1, 'mul'], [0, 1], [0, 1], [{ input: [0.25], output: [0.25], }]);
-      check([0, 'exch', 'mul'], [0, 1], [0, 1], [{ input: [0.25], output: [0], }]);
+      check([0, 'exch', 'mul'], [0, 1], [0, 1],
+            [{ input: [0.25], output: [0], }]);
       check([0.5, 'exch', 'mul'], [0, 1], [0, 1],
             [{ input: [0.25], output: [0.125], }]);
       check([1, 'exch', 'mul'], [0, 1], [0, 1],
```",False
f20d2cd2aedbc9993c10699982c234106ce74f5b,2017-06-02 16:02:18,Jonas Jenwald,"Fix inconsistent spacing and trailing commas in objects in remaining `src/` files, so we can enable the `comma-dangle` and `object-curly-spacing` ESLint rules later on

http://eslint.org/docs/rules/comma-dangle
http://eslint.org/docs/rules/object-curly-spacing

Given that we currently have quite inconsistent object formatting, fixing this in *one* big patch probably wouldn't be feasible (since I cannot imagine anyone wanting to review that); hence I've opted to try and do this piecewise instead.

Please note: This patch was created automatically, using the ESLint `--fix` command line option. In a couple of places this caused lines to become too long, and I've fixed those manually; please refer to the interdiff below for the only hand-edits in this patch.

```diff
diff --git a/src/display/canvas.js b/src/display/canvas.js
index 5739f6f2..4216b2d2 100644
--- a/src/display/canvas.js
+++ b/src/display/canvas.js
@@ -2071,7 +2071,7 @@ var CanvasGraphics = (function CanvasGraphicsClosure() {
       var map = [];
       for (var i = 0, ii = positions.length; i < ii; i += 2) {
         map.push({ transform: [scaleX, 0, 0, scaleY, positions[i],
-                 positions[i + 1]], x: 0, y: 0, w: width, h: height, });
+                   positions[i + 1]], x: 0, y: 0, w: width, h: height, });
       }
       this.paintInlineImageXObjectGroup(imgData, map);
     },
diff --git a/src/display/svg.js b/src/display/svg.js
index 9eb05dfa..2aa21482 100644
--- a/src/display/svg.js
+++ b/src/display/svg.js
@@ -458,7 +458,11 @@ SVGGraphics = (function SVGGraphicsClosure() {

       for (var x = 0; x < fnArrayLen; x++) {
         var fnId = fnArray[x];
-        opList.push({ 'fnId': fnId, 'fn': REVOPS[fnId], 'args': argsArray[x], });
+        opList.push({
+          'fnId': fnId,
+          'fn': REVOPS[fnId],
+          'args': argsArray[x],
+        });
       }
       return opListToTree(opList);
     },
```",False
a8c87f8019aed3e9fcc5a7c2733ea3b8aa33e59a,2017-06-02 14:50:19,Jonas Jenwald,"Fix inconsistent spacing and trailing commas in objects in `src/core/` files, so we can enable the `comma-dangle` and `object-curly-spacing` ESLint rules later on

*Unfortunately this patch is fairly big, even though it only covers the `src/core` folder, but splitting it even further seemed difficult.*

http://eslint.org/docs/rules/comma-dangle
http://eslint.org/docs/rules/object-curly-spacing

Given that we currently have quite inconsistent object formatting, fixing this in *one* big patch probably wouldn't be feasible (since I cannot imagine anyone wanting to review that); hence I've opted to try and do this piecewise instead.

Please note: This patch was created automatically, using the ESLint --fix command line option. In a couple of places this caused lines to become too long, and I've fixed those manually; please refer to the interdiff below for the only hand-edits in this patch.

```diff
diff --git a/src/core/evaluator.js b/src/core/evaluator.js
index abab9027..dcd3594b 100644
--- a/src/core/evaluator.js
+++ b/src/core/evaluator.js
@@ -2785,7 +2785,8 @@ var EvaluatorPreprocessor = (function EvaluatorPreprocessorClosure() {
     t['Tz'] = { id: OPS.setHScale, numArgs: 1, variableArgs: false, };
     t['TL'] = { id: OPS.setLeading, numArgs: 1, variableArgs: false, };
     t['Tf'] = { id: OPS.setFont, numArgs: 2, variableArgs: false, };
-    t['Tr'] = { id: OPS.setTextRenderingMode, numArgs: 1, variableArgs: false, };
+    t['Tr'] = { id: OPS.setTextRenderingMode, numArgs: 1,
+                variableArgs: false, };
     t['Ts'] = { id: OPS.setTextRise, numArgs: 1, variableArgs: false, };
     t['Td'] = { id: OPS.moveText, numArgs: 2, variableArgs: false, };
     t['TD'] = { id: OPS.setLeadingMoveText, numArgs: 2, variableArgs: false, };
diff --git a/src/core/jbig2.js b/src/core/jbig2.js
index 5a17d482..71671541 100644
--- a/src/core/jbig2.js
+++ b/src/core/jbig2.js
@@ -123,19 +123,22 @@ var Jbig2Image = (function Jbig2ImageClosure() {
      { x: -1, y: -1, }, { x: 0, y: -1, }, { x: 1, y: -1, }, { x: -2, y: 0, },
      { x: -1, y: 0, }],
     [{ x: -3, y: -1, }, { x: -2, y: -1, }, { x: -1, y: -1, }, { x: 0, y: -1, },
-     { x: 1, y: -1, }, { x: -4, y: 0, }, { x: -3, y: 0, }, { x: -2, y: 0, }, { x: -1, y: 0, }]
+     { x: 1, y: -1, }, { x: -4, y: 0, }, { x: -3, y: 0, }, { x: -2, y: 0, },
+     { x: -1, y: 0, }]
   ];

   var RefinementTemplates = [
     {
       coding: [{ x: 0, y: -1, }, { x: 1, y: -1, }, { x: -1, y: 0, }],
-      reference: [{ x: 0, y: -1, }, { x: 1, y: -1, }, { x: -1, y: 0, }, { x: 0, y: 0, },
-                  { x: 1, y: 0, }, { x: -1, y: 1, }, { x: 0, y: 1, }, { x: 1, y: 1, }],
+      reference: [{ x: 0, y: -1, }, { x: 1, y: -1, }, { x: -1, y: 0, },
+                  { x: 0, y: 0, }, { x: 1, y: 0, }, { x: -1, y: 1, },
+                  { x: 0, y: 1, }, { x: 1, y: 1, }],
     },
     {
-      coding: [{ x: -1, y: -1, }, { x: 0, y: -1, }, { x: 1, y: -1, }, { x: -1, y: 0, }],
-      reference: [{ x: 0, y: -1, }, { x: -1, y: 0, }, { x: 0, y: 0, }, { x: 1, y: 0, },
-                  { x: 0, y: 1, }, { x: 1, y: 1, }],
+      coding: [{ x: -1, y: -1, }, { x: 0, y: -1, }, { x: 1, y: -1, },
+               { x: -1, y: 0, }],
+      reference: [{ x: 0, y: -1, }, { x: -1, y: 0, }, { x: 0, y: 0, },
+                  { x: 1, y: 0, }, { x: 0, y: 1, }, { x: 1, y: 1, }],
     }
   ];
```",False
593dec1bb7aec1802abf8268137b0f7adab2ae32,2017-06-02 03:18:10,Tim van der Meij,"Merge pull request #8469 from Snuffleupagus/ESLint-object-styles-web

Fix inconsistent spacing and trailing commas in objects in `web/` files, so we can enable the `comma-dangle` and `object-curly-spacing` ESLint rules later on",True
7b9dfc0195e5501357ffb8832d1229e73ca2cc1c,2017-06-02 03:06:29,Tim van der Meij,"Merge pull request #8470 from Snuffleupagus/ESLint-object-styles-extensions

Fix inconsistent spacing and trailing commas in objects in `extensions/` files, so we can enable the `comma-dangle` and `object-curly-spacing` ESLint rules later on",True
4f48c8198c58da2dbb118affc707db940d995430,2017-06-01 16:55:24,Jonas Jenwald,"Fix inconsistent spacing and trailing commas in objects in `extensions/` files, so we can enable the `comma-dangle` and `object-curly-spacing` ESLint rules later on

http://eslint.org/docs/rules/comma-dangle
http://eslint.org/docs/rules/object-curly-spacing

Given that we currently have quite inconsistent object formatting, fixing this in in one big patch probably wouldn't be feasible (since I cannot imagine anyone wanting to review that); hence I've opted to try and do this piecewise instead.

Please note: This patch was created automatically, using the ESLint `--fix` command line option. In a couple of places this caused lines to become too long, and I've fixed those manually; please refer to the interdiff below for the only hand-edits in this patch.

```diff
diff --git a/extensions/firefox/content/PdfStreamConverter.jsm b/extensions/firefox/content/PdfStreamConverter.jsm
index ea91a71a..0d59dad1 100644
--- a/extensions/firefox/content/PdfStreamConverter.jsm
+++ b/extensions/firefox/content/PdfStreamConverter.jsm
@@ -773,7 +773,8 @@ class RequestListener {
         response = function sendResponse(aResponse) {
           try {
             var listener = doc.createEvent(""CustomEvent"");
-            let detail = Cu.cloneInto({ response: aResponse, }, doc.defaultView);
+            let detail = Cu.cloneInto({ response: aResponse, },
+                                      doc.defaultView);
             listener.initCustomEvent(""pdf.js.response"", true, false, detail);
             return message.dispatchEvent(listener);
           } catch (e) {
```",False
223c4293574b4076d06d4da187b802d910f85524,2017-06-01 16:17:47,Jonas Jenwald,"Fix inconsistent spacing and trailing commas in objects in `web/` files, so we can enable the `comma-dangle` and `object-curly-spacing` ESLint rules later on

http://eslint.org/docs/rules/comma-dangle
http://eslint.org/docs/rules/object-curly-spacing

Given that we currently have quite inconsistent object formatting, fixing this in in *one* big patch probably wouldn't be feasible (since I cannot imagine anyone wanting to review that); hence I've opted to try and do this piecewise instead.

*Please note:* This patch was created automatically, using the ESLint `--fix` command line option. In a couple of places this caused lines to become too long, and I've fixed those manually; please refer to the interdiff below for the only hand-edits in this patch.

```diff
diff --git a/web/pdf_thumbnail_view.js b/web/pdf_thumbnail_view.js
index 002dbf29..1de4e530 100644
--- a/web/pdf_thumbnail_view.js
+++ b/web/pdf_thumbnail_view.js
@@ -420,8 +420,8 @@ var PDFThumbnailView = (function PDFThumbnailViewClosure() {
     setPageLabel: function PDFThumbnailView_setPageLabel(label) {
       this.pageLabel = (typeof label === 'string' ? label : null);

-      this.l10n.get('thumb_page_title', { page: this.pageId, }, 'Page {{page}}').
-          then((msg) => {
+      this.l10n.get('thumb_page_title', { page: this.pageId, },
+                    'Page {{page}}').then((msg) => {
         this.anchor.title = msg;
       });

diff --git a/web/secondary_toolbar.js b/web/secondary_toolbar.js
index 160e0410..6495fc5e 100644
--- a/web/secondary_toolbar.js
+++ b/web/secondary_toolbar.js
@@ -65,7 +65,8 @@ class SecondaryToolbar {
       { element: options.printButton, eventName: 'print', close: true, },
       { element: options.downloadButton, eventName: 'download', close: true, },
       { element: options.viewBookmarkButton, eventName: null, close: true, },
-      { element: options.firstPageButton, eventName: 'firstpage', close: true, },
+      { element: options.firstPageButton, eventName: 'firstpage',
+        close: true, },
       { element: options.lastPageButton, eventName: 'lastpage', close: true, },
       { element: options.pageRotateCwButton, eventName: 'rotatecw',
         close: false, },
@@ -76,7 +77,7 @@ class SecondaryToolbar {
       { element: options.cursorHandToolButton, eventName: 'switchcursortool',
         eventDetails: { tool: CursorTool.HAND, }, close: true, },
       { element: options.documentPropertiesButton,
-        eventName: 'documentproperties', close: true, }
+        eventName: 'documentproperties', close: true, },
     ];
     this.items = {
       firstPage: options.firstPageButton,
```",False
bb7e85c5ea13f00c7d060db40e71b8b68e172a97,2017-06-01 02:43:06,Tim van der Meij,"Merge pull request #8466 from Snuffleupagus/app-DefaultExternalServices-createL10n

Add a stub `createL10n` to `DefaultExternalServices` in app.js",True
1d4e96b0b5bcf36685216910a76e0f5d8f955f01,2017-05-31 22:15:01,Jonas Jenwald,"Add a stub `createL10n` to `DefaultExternalServices` in app.js

It appears that this was simply forgotten in PR 8394.",False
45933545f15056b13eec0f2babfe0cdbf4b6385f,2017-05-31 21:01:22,Jonas Jenwald,"Merge pull request #8394 from yurydelendik/l10n

Wraps mozL10n to async calls; splits firefox and generic l10n libs.",True
5438ce9b9826fabcdc1638223869dfb17925bd0c,2017-05-31 19:52:25,Yury Delendik,Wraps mozL10n to async calls; splits firefox and generic l10n libs.,False
bd288df9099a116a7d281eeab2bb7e2be31e884c,2017-05-31 19:12:48,Yury Delendik,"Merge pull request #8396 from mukulmishra18/streams-lib

Adds streams-lib polyfill and exports ReadableStream from shared/util.",True
09d46e94c6f097a6634de6017627d23c5c779475,2017-05-31 18:29:10,Jonas Jenwald,"Merge pull request #8463 from Snuffleupagus/PDFJS_NEXT-env

Allow specifying the `PDFJS_NEXT` build flag via an environment variable when running the various `gulp` commands",True
7d3a3252b5df89d20748b25b87e4113c08a5d640,2017-05-31 18:20:49,Jonas Jenwald,"Allow specifying the `PDFJS_NEXT` build flag via an environment variable when running the various `gulp` commands

After PR 8459, the run-time of the various `gulp` test commands has regressed quite badly on Windows. For me, `gulp test` now takes approximately *twice* as long when run locally on Windows.
The problem seems to be the Babel transpilation step, which takes well over five minutes to run.[1]

For someone like me, who runs tests a lot locally, this slowdown is really hurting the overall development experience.
To get around this I tested setting `PDFJS_NEXT = true` in `gulpfile.js`, since the transpilation step isn't necessary when testing in a modern browser.

However, having to edit `gulpfile.js` every time that I need to run tests isn't very practical. Hence this patch, which adds an environment variable that allows you to disable the transpilation simply by using e.g. `PDFJS_NEXT=true gulp test`.

I hope that this can be considered an acceptable solution, such that I don't need to maintain this patch locally (or worse, edit `gulpfile.js` locally before testing).

---
[1] This can also be observed on the Windows bot, but it seems fine on Linux.",False
1e6f49b129bcdb72b8f3f74d58605f4f1960b4c9,2017-05-31 17:57:19,Yury Delendik,"Merge pull request #8462 from yurydelendik/rm=umd

Removes last UMDs from the modules.",True
66c88938156708ec958b6c0108b0105357348e44,2017-05-31 17:44:17,Yury Delendik,Removes last UMDs from the modules.,False
96377832e433e90f8f3167b4b847c940ce669147,2017-05-31 04:36:28,Tim van der Meij,"Merge pull request #8458 from Snuffleupagus/thumbnails-TempImageFactory

Refactor the `getTempCanvas` function in `pdf_thumbnail_view.js` to a factory, in preparation for ES6 conversion of the thumbnail related code",True
6b098898d299a16fce8e3046534225c5e132ec76,2017-05-31 04:25:36,Tim van der Meij,"Merge pull request #8455 from timvandermeij/es6-page-view

Convert the page view to ES6 syntax",True
6dfdff2f03d764f1c2d177586ffd5998d1f4edfc,2017-05-31 04:11:39,Tim van der Meij,Convert the page view to ES6 syntax,False
92529e2b1173841832e9b1cbd429f14c45683cc2,2017-05-31 03:48:06,Jonas Jenwald,"Refactor the `getTempCanvas` function in `pdf_thumbnail_view.js` to a factory, in preparation for ES6 conversion of the thumbnail related code

This patch intends to simplify future ES6 refactoring of the thumbnail code, since the current code isn't going to work well together with proper `Class`es.",False
e51718711bd0ebcb9d708c9504fed8e99ebd5453,2017-05-31 02:38:22,Jonas Jenwald,"Merge pull request #8284 from Snuffleupagus/es6-modules-src

Convert the files in the `/src/core` folder to ES6 modules",True
982b6aa65bcd2f17fe58b9006ac7fadbdda6b8b4,2017-05-31 01:36:21,Jonas Jenwald,"Convert the files in the `/src/core` folder to ES6 modules

Please note that the `glyphlist.js` and `unicode.js` files are converted to CommonJS modules instead, since Babel cannot handle files that large and they are thus excluded from transpilation.",False
b66b705ed7125fa008e3f067b2d3fd8ee11170b2,2017-05-31 01:36:21,Yury Delendik,Using pre-built code for testing.,False
263479fd6aa1aff1ef5c21968b1524093e5d6e55,2017-05-29 13:29:26,Jonas Jenwald,Update l10n files,False
63a0328f5f54d22e2cfcbc0d0f6bd7413c1a019d,2017-05-29 00:55:59,Tim van der Meij,"Merge pull request #8450 from timvandermeij/es6-overlay-manager

Convert the overlay manager to ES6 syntax",True
e7a04fc82dc7a65007662a048ea754628e0366fa,2017-05-29 00:48:18,Tim van der Meij,Convert the overlay manager to ES6 syntax,False
ed661e70631571047b753bfef5c12c84d3476533,2017-05-27 02:40:51,Tim van der Meij,"Merge pull request #8452 from FranckFreiburger/patch-1

Update webpack.js to support browsers that do not have the Web Workers API",True
e801ab11c543d84c47d4404710a4e1e09bf315cf,2017-05-27 02:22:52,Tim van der Meij,"Merge pull request #8416 from Snuffleupagus/refactor-PDFLinkService-navigateTo

Refactor and ES6-ify `PDFLinkService.navigateTo`",True
a0b7f84461010b992a2cb17cd2e54c6c5deae9c7,2017-05-27 01:32:07,Franck Freiburger,Update webpack.js to support browsers that do not have the Web Workers API,False
8d55e6a01d40a89330ebf4e9fd38ca9992dad5df,2017-05-25 00:35:04,Jonas Jenwald,"Merge pull request #8442 from Snuffleupagus/issue-8372

Add different code-paths to `{CMap, ToUnicodeMap}.charCodeOf` depending on length, since `Array.prototype.indexOf` can be extremely inefficient for very large arrays (issue 8372)",True
4ce5e520fb3f078fc732358e05c44cf66b62a178,2017-05-24 23:17:04,Jonas Jenwald,"Add different code-paths to `{CMap, ToUnicodeMap}.charCodeOf` depending on length, since `Array.prototype.indexOf` can be extremely inefficient for very large arrays (issue 8372)

Fixes 8372.",False
ac942ac657e34c81b961917015b713b847056716,2017-05-24 03:01:57,Jonas Jenwald,"Merge pull request #8437 from yurydelendik/default-ctx

Resets canvas 2d context to the default state.",True
a67198895f210ed694e2ca3b8f2d4a0f5864d32c,2017-05-24 01:40:30,Yury Delendik,Resets canvas 2d context to the default state.,False
ad797fa74d30ff70041dcc85a7aea9cbbe09e275,2017-05-23 21:41:42,Yury Delendik,"Merge pull request #8436 from Snuffleupagus/issue-8424

Don't map glyphs to the HANGUL FILLER (0x3164) Unicode location (issue 8424)",True
31c24ed6315b2298d19561c8fcd8980b0d96a874,2017-05-23 19:42:45,Jonas Jenwald,"Don't map glyphs to the HANGUL FILLER (0x3164) Unicode location (issue 8424)

*This patch follows a similar pattern as previous ones, by skipping certain problematic Unicode locations.*

According to http://searchfox.org/mozilla-central/rev/6c2dbacbba1d58b8679cee700fd0a54189e0cf1b/gfx/harfbuzz/src/hb-unicode-private.hh#136, it seems that the HANGUL FILLER (0x3164) location is ""special"".

Fixes 8424.",False
f2161345e34ca0c76e98a4fd8d190290865f5add,2017-05-23 02:32:31,Tim van der Meij,"Merge pull request #8433 from Snuffleupagus/README-rm-compatibility

Remove the reference to `compatibility.js` from the README, since it's included by default in `GENERIC` builds",True
5df0cccaa33f0713190f9fd9d63950477c4487ee,2017-05-23 00:08:10,Brendan Dahl,"Merge pull request #8432 from Snuffleupagus/rm-nameddest-fallback

Remove the special handling for `nameddest`s that look like standard pageNumbers",True
cb0391f4577d4cefa4389a88b4239b8b920aedc5,2017-05-22 16:26:27,Jonas Jenwald,"Remove the reference to `compatibility.js` from the README, since it's included by default in `GENERIC` builds

Please note that the FAQ (in the Wiki) was already updated to mention that the standalone `compatibility.js` file isn't necessary anymore.",False
b4c35857ff0b0f61412977b8de513b2ea6688019,2017-05-22 14:06:52,Jonas Jenwald,"Merge pull request #7635 from Snuffleupagus/CursorTools

Unify handling of various cursor tools, e.g. the current Hand Tool and a possible future Zoom Tool, in a new `PDFCursorTools` module",True
836695986c85d36bcc25b0c2315138746b65ea3d,2017-05-22 04:21:03,Tim van der Meij,"Add icons for the new ""Select tool"" button

Also adds the Dutch localizations for the new select/hand tool buttons.",False
36c2791296adc4831a200fde5eed819781fc8174,2017-05-22 04:21:01,Jonas Jenwald,"Unify handling of various cursor tools, e.g. the current Hand Tool and a possible future Zoom Tool, in a new `PDFCursorTools` module

With the current way that the `HandTool` is implemented, if someone would try to also add a Zoom tool (as issue 1260 asks for) that probably wouldn't work very well given that you'd then have two cursor tools which may not play nice together.
Hence this patch, which attempts to refactor things so that it should be simpler to add e.g. a Zoom tool as well (given that that issue is marked as ""good-beginner-bug"", and I'm not sure if that really applies considering the current state of the code).

Note that I personally have no interest in implementing a Zoom tool (similar to Adobe Reader) since I wouldn't use it, but I figured that it can't hurt to make this code a bit more future proof.",False
0ddf52aca54af5da00dc74ffd435503ed980f219,2017-05-20 14:59:29,Jonas Jenwald,"Remove the special handling for `nameddest`s that look like standard pageNumbers

PR 7341 added special handling for `nameddest`s that look like pageNumbers, to prevent issues since we previously *incorrectly* supported specifying a pageNumber directly in the hash; i.e. `#10` versus the correct `#page=10` format.

Since this behaviour wasn't correct, PR 7757 fixed and deprecated the old format, which means that we no longer need to maintain the `nameddest` hack in multiple files.",False
8d2ae20fdd6faa97c05519ccbe3466b16a86925c,2017-05-20 03:20:33,Tim van der Meij,"Merge pull request #8431 from Snuffleupagus/rm-make-references

Replace a couple of leftover `make.js` references with `gulpfile.js` in docs/comments",True
957dc40ddf831e6a4c6e6a12d2df096b3f3f1714,2017-05-20 03:15:54,Jonas Jenwald,"Replace a couple of leftover `make.js` references with `gulpfile.js` in docs/comments

Also updates a `console.log` statement in the `gulp importl10n` command (since I forgot it in a previous patch, and it didn't seem necessary with a separate patch for it).",False
7b365b937243c8ba0f724e3ef125ebf374f482e3,2017-05-20 01:38:04,Yury Delendik,"Merge pull request #8366 from yurydelendik/rm-shelljs

Removes shelljs",True
c9f44f30e55a44bd286ab3fbba7eadd0f240e695,2017-05-20 00:26:34,Mukul Mishra,"Adds streams-lib polyfill and exports ReadableStream from shared/util.

Added test for ReadableStream.

Adds ref-implementation license-header in streams-lib
and change gulp task to copy external/streams/ in build/
external/streams/ and build/dist/external/streams folder.

Adds README.md and LICENSE.md",False
c0a1ff0b325e1c6e434f3747463ef863a6ddeb8c,2017-05-19 18:23:34,Yury Delendik,Removes CRLF checker,False
65a1e836cf30e8f2f03837a3b209285735193d2a,2017-05-19 18:23:05,Yury Delendik,Removes shelljs,False
32bb0e8c0ee9e4538fe9817efd7d6531ad619338,2017-05-19 02:18:35,Yury Delendik,"Merge pull request #8421 from Snuffleupagus/importl10n-nightly

Change the `importl10n` script to use the Nightly channel",True
95660a2ab3b2d37203f2762fdb8e1f0b8014decb,2017-05-18 16:11:01,Jonas Jenwald,Update l10n files,False
044a115d6e158f2f2c1ce79cfa08a828015d292c,2017-05-18 16:05:05,Jonas Jenwald,"Change the `importl10n` script to use the Nightly channel

It seems that PR 8323 unfortunately didn't pick the right channel for pulling translations from, according to the information in:
 - https://groups.google.com/forum/#!topic/mozilla.dev.l10n/vzmbHLPo3rg
 - https://github.com/mozilla-l10n/localizer-documentation/blob/master/misc/aurora_faqs.md

My apologies for the unnecessary churn in this code!",False
658fb03db1e3ccc2f140daa46ef961f877aa0615,2017-05-18 15:52:02,Jonas Jenwald,"Merge pull request #8420 from mozilla/revert-8390-bug-1319111

Revert ""Upstream changes from: Bug 1319111 - Expose result principal URL (""final channel URL"") on LoadInfo, convert current consumers of LOAD_REPLACE""",True
cbba74f474df0b2719494c2f70f56ede7e2a203d,2017-05-18 15:38:05,Jonas Jenwald,"Revert ""Upstream changes from: Bug 1319111 - Expose result principal URL (""final channel URL"") on LoadInfo, convert current consumers of LOAD_REPLACE""",False
5dc8dcdc0fd18df3dd2b19ee6edcda2715d3497f,2017-05-18 03:55:51,Yury Delendik,"Merge pull request #8388 from Snuffleupagus/issue-8380

Cache JPEG images, just as we do for other image formats, in `evaluator.js` (issue 8380)",True
5958dafd8c5d1cb8e2e20d946e58017d6156907a,2017-05-18 03:48:25,Jonas Jenwald,"Merge pull request #8413 from MRMBRAND/set-canvas-background-color

Adds additional parameter so background color of canvas can be set",True
cfc2f36f5c00f17317fe68e1fc74be4566d1767a,2017-05-17 21:36:44,chris.greening,Adds additional parameter so background color of canvas can be set,False
ca3cf6e744cea7d7bacc40fe84b1491a5fc2e1dd,2017-05-17 20:13:54,Jonas Jenwald,"Merge pull request #8417 from Standard8/eslint-cleanup-globals

Use eslint-plugin-mozilla and the webextensions environment to avoid defining globals in each file.",True
2e9ae50a3a9c1f4fa0b9d8166445ebd89d3a450f,2017-05-17 15:00:46,Mark Banner,Use eslint-plugin-mozilla and the webextensions environment to avoid defining globals in each file.,False
972eca56a19957f5a12716caed4504ba238c5545,2017-05-17 13:57:30,Jonas Jenwald,"Refactor and ES6-ify `PDFLinkService.navigateTo`

This patch replaces a `var self = this;` statement with arrow functions, and `var` with `let` in `PDFLinkService.navigateTo`.

Furthermore, when I started looking at this method, it quickly became clear that its code is somewhat of a mess. Since I'm one of the persons that have touched this code over the years, I figured that it'd be a good idea to try and clean it up a bit.",False
e9cbfbccb47135c4bc930267d75935d3db15abc7,2017-05-17 03:02:48,Tim van der Meij,"Merge pull request #8411 from Snuffleupagus/web-page-thumbnail-rm-self

Replace unnecessary `var self = this` statements with arrow functions in `web/pdf_page_view.js` and `web/pdf_thumbnail_view.js`",True
a9e5bc91fb841f5b3773b180f7d7b560596ab447,2017-05-16 17:18:27,Jonas Jenwald,"Replace unnecessary `var self = this` statements with arrow functions in `web/pdf_page_view.js` and `web/pdf_thumbnail_view.js`

Also replaces `var` with `let` in code that's touched in the patch. Please note that this should be completely safe, for two separate reasons, since trying to access let in a scope where it's not defined is first of all a runtime error and second of all an ESLint error (thanks to the `no-undef` rule).",False
08f8b68f12bd6a8e5479777c6f0f61b6feba02c7,2017-05-15 00:44:03,Tim van der Meij,"Merge pull request #8406 from Rob--W/babel-cache-error-handling

Gracefully ignore transaction failure in plugin-babel-cached",True
b3bd2f3b38b404dbf3e7d56cf95a9f863282f0cd,2017-05-14 19:31:32,Rob Wu,Gracefully ignore transaction failure in plugin-babel-cached,False
63597cc55620d5816c59a673c3fa262bb87483c6,2017-05-14 03:26:59,Tim van der Meij,"Merge pull request #8258 from Snuffleupagus/api-unit-tests-travis

Enable running a subset of the API unit-tests on Travis",True
bbe8c3d8ed7d6cee83d52d84f13af71659fd765a,2017-05-12 15:18:27,Jonas Jenwald,"Enable running a subset of the API unit-tests on Travis

Notably, this patch skips all canvas rendering tests in Node.js.",False
028d3421ac26aed43efc10c1bf4464009363c0aa,2017-05-12 02:40:44,Jonas Jenwald,"Merge pull request #8398 from Snuffleupagus/es6-dom-utils-factories

Convert the `DOMCMapReaderFactory` and `DOMCanvasFactory` to ES6 classes",True
c5f73edcd273f1cd33694243740e248bef0472c9,2017-05-11 23:45:22,Jonas Jenwald,"Convert the `DOMCanvasFactory` to an ES6 class

For consistency, also updates the `pdf2png.js` example to use the slightly less verbose `canvasAndContext` parameter name.",False
32baa6af7a00b20172200ed0fd0757d3a0cc40ae,2017-05-11 23:45:19,Jonas Jenwald,"Convert the `DOMCMapReaderFactory` to an ES6 class

Given that we only create *one* instance of this class per `getDocument` call, this shouldn't matter performance wise.",False
15425d5b9b94a09bca3df48d7ee9f6d03d8df941,2017-05-11 22:29:20,Yury Delendik,"Merge pull request #8400 from Snuffleupagus/ref-tests-wait-on-destroy

Wait for previous pdfDocument(s) to be destroyed before running the next reference test",True
372fec61c7fb0c607c59c4ac1190594cd13adf3d,2017-05-11 22:25:21,Yury Delendik,"Merge pull request #8399 from Snuffleupagus/unit-tests-wait-on-destroy

Wait until `PDFDocumentLoadingTask.destroy` is resolved before calling `done` in the API unit-tests",True
b5775af7168896ccb83b42cc6612660d4abeb0dd,2017-05-11 16:26:45,Jonas Jenwald,"Wait for previous pdfDocument(s) to be destroyed before running the next reference test

Refactors `Driver._cleanup` to return a `Promise` which is resolved once all opened documents have been destroyed.
This is then used in `Driver._nextTask` to ensure that we wait for everything to be cleaned up, such that the tests run sequentially.",False
7a040c05d7db778104779c8beb294cbe0864821e,2017-05-11 15:47:54,Jonas Jenwald,"Wait until `PDFDocumentLoadingTask.destroy` is resolved before calling `done` in the API unit-tests

Try to ensure that everything, including workers, are properly destroyed before running the next test-case.",False
52998c5fe1a3d74b47de6474b9b4a99346379e1a,2017-05-10 20:35:37,Jonas Jenwald,"Merge pull request #8397 from Snuffleupagus/extractText-refactor

Simplify `extractText`, and replace unnecessary `var self = this` statements with arrow functions, in `web/pdf_find_controller.js`",True
9efd11c5c9aae0540a752638d6ab413397241031,2017-05-10 17:39:20,Jonas Jenwald,Replace unnecessary `var self = this` statements with arrow functions in `web/pdf_find_controller.js`,False
c75051490338e8bb5154ad73bcdc43c804f47711,2017-05-10 17:39:15,Jonas Jenwald,"Simplify `extractText` in `web/pdf_find_controller.js`

Currently this method first uses a loop to build a temporary array to hold Promises, which are then resolved from a recursive helper function once the textContent is fetched for each page.

To me, this is unncessarily complicated, since we can do everything within one loop by simply chaining the asynchronous calls to retrieve the textContent. (Note that this guarantees that the textContent of the pages is still fetched sequentially.)",False
9bfbf27f946dc4018be8ce3469bfb5faf0df75c1,2017-05-09 21:23:34,Yury Delendik,"Merge pull request #8350 from ydfzgyj/fix-svg-image

Fix svg image render",True
595ee1232dee3525201672b54b2e72cd7dbf33ff,2017-05-09 18:23:27,Yury Delendik,"Merge pull request #8391 from timvandermeij/es6-web

Convert the hand tool, interfaces and secondary toolbar to ES6 syntax",True
3923c4a6faadc2a174e37f37b1853c939811ff4b,2017-05-09 18:18:29,Yury Delendik,"Merge pull request #8393 from Snuffleupagus/web-app-rm-self

Replace unnecessary `var self = this` statements with arrow functions in `web/app.js`",True
240a3926f48f68ab425fb71a1dcf64914d194b9a,2017-05-09 17:16:54,Jonas Jenwald,"Replace unnecessary `var self = this` statements with arrow functions in `web/app.js`

Also replaces `var` with `let` in the functions/methods that are touched in the patch. Please note that this should be completely safe, for two separate reasons, since trying to access `let` in a scope where it's not defined is first of all a runtime error and second of all an ESLint error (thanks to the `no-undef` rule).",False
8d5d97264e1d00788b6dfe2030e79ec8c7f1495e,2017-05-08 09:02:44,巴里切罗,fix(svg) adjust strategy for decoding JPEG images,False
0dbc68a6d69fdd9c47c3ef1cea5e2ff90b7199b8,2017-05-08 01:37:20,Tim van der Meij,"Merge pull request #8390 from Snuffleupagus/bug-1319111

Upstream changes from: Bug 1319111 - Expose result principal URL (""final channel URL"") on LoadInfo, convert current consumers of LOAD_REPLACE",True
8d9596480c0e456ec6dbed03dc6f3b9dab9f7fcd,2017-05-08 01:31:49,Tim van der Meij,Convert the interfaces to ES6 syntax,False
67049602c57fc1ce450097d1d5a6d9590276e3ae,2017-05-08 01:13:50,Tim van der Meij,Convert the secondary toolbar to ES6 syntax,False
20aa8d74e9b6970753a0fd04279afa5f81953f61,2017-05-08 01:08:10,Honza Bambas :mayhemer,"Upstream changes from: Bug 1319111 - Expose result principal URL (""final channel URL"") on LoadInfo, convert current consumers of LOAD_REPLACE

This is a downstream change introduced in [1]. That mozilla bug is adding a new property to channel's loadinfo object (nsILoadInfo) that protocol handlers has to set on channels when originalURI on the result channel is set to a different URI than the channel has been created for.

Existence of the new property on nsILoadInfo depends on landing [1].

[1] https://bugzilla.mozilla.org/show_bug.cgi?id=1319111",False
bc49524ac76a834fd914ccb5c7e91a1d01fcc4bf,2017-05-08 01:00:07,Tim van der Meij,Convert the hand tool to ES6 syntax,False
7015c88ce9e525957c78d8d84c7c1e14a3a61dd1,2017-05-07 23:43:20,Yury Delendik,"Merge pull request #8387 from evadne/issue-8386-webkit-subtle-crypto

amends Babel cache (#8364) implementation to also work on Safari",True
50af2284aaa3352464dac203850fe89753a96a85,2017-05-07 22:30:30,Evadne Wu,"amends Babel cache (#8364) implementation to disable caching on Safari

- the viewer was not loading in development mode on Safari, due to Safari
  having crypto.webkitSubtle instead of crypto.subtle.

- the isCachingPossible check was amended to check for crypro.subtle
  which is currently not in Safari but in Firefox and Chrome. This
  essentially works around the issue by disabling caching for Safari
  in development mode.

- maintainer sentiment: people who develop on Safari can get this speedup
  once Safari drops prefix for SubtleCrypto.

- note: at time of writing Safari Version 10.1 (12603.1.30.0.34) has an
  issue where caching can be enabled for PDF.js but must to be disabled for
  worker, otherwise the two sides do not communicate.

- https://github.com/mozilla/pdf.js/pull/8387#issuecomment-299709961
- https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest",False
b3e4361d7baa539e81c0bf9851879bb59216c4f9,2017-05-07 21:13:23,Tim van der Meij,"Merge pull request #8381 from Snuffleupagus/document-properties-reset

Re-factor `PDFDocumentProperties` such that it's properly reset when a new PDF file is opened (issue 8371)",True
0c2ebda31cf7785121c3c89f00410ce003fc52d2,2017-05-07 16:37:41,Jonas Jenwald,"Cache JPEG images, just as we do for other image formats, in `evaluator.js` (issue 8380)

For some reason, we're putting all kind of images *except* JPEG into the `imageCache` in `evaluator.js`.[1]
This means that in the PDF file in issue 8380, we'll keep sending the *same* two small images[2] to the main-thread and decoding them over and over. This is obviously hugely inefficient!

As can be seen from the discussion in the issue, the performance becomes *extremely* bad if the user has the addon ""Adblock Plus"" installed. However, even in a clean Firefox profile, the performance isn't that great.

This patch not only addresses the performance implications of the ""Adblock Plus"" addon together with that particular PDF file, but it *also* improves the rendering times considerably for *all* users.
Locally, with a clean profile, the rendering times are reduced from `~2000 ms` to `~500 ms` for my setup!

Obviously, the general structure of the PDF file and its operator sequence is still hugely inefficient, however I'd say that the performance with this patch is good enough to consider the issue (as it stands) resolved.[3]

Fixes 8380.

---
[1] Not technically true, since inline images are cached from `parser.js`, but whatever :-)

[2] The two JPEG images have dimensions 1x2, respectively 4x2.

[3] To make this even more efficient, a new state would have to be added to the `QueueOptimizer`. Given that PDF files this stupid fortunately aren't too common, I'm not convinced that it's worth doing.",False
7780fd5b98a5804bf81808445bdbb4491f33a794,2017-05-07 13:46:03,Jonas Jenwald,"Re-factor `PDFDocumentProperties` such that it's properly reset when a new PDF file is opened (issue 8371)

This patch contains the following improvements:
 - Only fetch the various document properties *once* per PDF file opened, and cache the result (in a frozen object).
 - Always update the *entire* dialog at once, to prevent inconsistent UI state (issue 8371).
 - Ensure that the dialog, and all its internal properties, are reset when `PDFViewerApplication.close` is called.
 - Inline, and re-factor, the `getProperties` method in `open`, since that's the only call-site.
 - Always overwrite the fileSize with the value obtained from `pdfDocument.getDownloadInfo`, to ensure that it's correct.
 - ES6-ify the code that's touched in this patch.

Fixes 8371.",False
50d026fbda4858e46b13914360dfa0bc2ddf3ddb,2017-05-06 14:05:49,Jonas Jenwald,"Merge pull request #8385 from tobytailor/master

Fix typo in LoopbackPort export",True
e1a3e46cba4bdc84576206f472b0a9c6ebddb946,2017-05-06 07:40:00,Tobias Schneider,Fix typo,False
deae2d8cb8b019109fef9b17f47bc4102f42f944,2017-05-05 20:02:27,Yury Delendik,"Merge pull request #8368 from yurydelendik/sourcemap

Enables source maps for webpack generated files.",True
996805f953d4a0b1fffe8f4a1c3677a70877ec86,2017-05-05 18:45:21,Yury Delendik,Produces source maps for built files.,False
c3cfcbe72f6177f13596afcd99b25a0be1b1917d,2017-05-05 18:11:25,Yury Delendik,"Merge pull request #8340 from ydfzgyj/fix-svg-spacing

Fix char spacing bug in SVG mode",True
d58040aa29417ed8d9d27abc9835c87047ac3c37,2017-05-05 09:41:20,巴里切罗,fix(svg) char spacing bug,False
206ad8d8b22bfab9c27db8e7d92585cfc62e3e08,2017-05-05 01:05:09,Yury Delendik,"Merge pull request #8378 from Snuffleupagus/es6-modules-src-shared

Convert the files in the `/src/shared` folder to ES6 modules",True
60b14f526e209fc1654adfba520c754f1a796136,2017-05-05 00:37:59,Jonas Jenwald,Convert the files in the `/src/shared` folder to ES6 modules,False
b0a796ced30d5295cffe468bdf6b0d287c0b1e5a,2017-05-04 22:38:05,Yury Delendik,"Merge pull request #8377 from Snuffleupagus/web-rm-bind

Replace unnecessary `bind(this)` statements with arrow functions in `web/` files",True
f27b5013e2a11548ecb49607645683d4ede3b2b3,2017-05-04 20:43:09,Jonas Jenwald,"Replace unnecessary `bind(this)` statements with arrow functions in `web/` files

By using `let`, which is block-scoped, instead of `var` in a couple of places we're able to get rid of additional `bind` calls.",False
c9d3c20e2c03cf28a182cf04e2151c21dd7358e1,2017-05-04 18:54:44,Yury Delendik,Fix esprima tests.,False
3adda80f9768b79b86e0bb2d51af186ce7adb83c,2017-05-04 18:40:30,Yury Delendik,"Merge pull request #8358 from Snuffleupagus/PartialEvaluator-method-signatures

Change the signatures of the `PartialEvaluator` ""constructor"" and its `getOperatorList`/`getTextContent` methods to take parameter objects",True
e81c067de2b39324d3992b189c4d50a19569f2de,2017-05-04 04:30:34,Yury Delendik,"Merge pull request #8370 from Snuffleupagus/src-rm-bind

Replace unnecessary `bind(this)` and `var self = this` statements with arrow functions in remaining `src/` files",True
6c81b8e6dd95ce5713220379e3185c43c9c57c37,2017-05-04 02:42:35,Jonas Jenwald,Replace unnecessary `bind(this)` and `var self = this` statements with arrow functions in remaining `src/` files,False
e42fc546a0b4b9e8b47f0005610bfcf4ec405ee2,2017-05-04 00:14:19,Yury Delendik,"Merge pull request #8369 from mozilla/brendandahl-patch-1

Add no-default-browser-check to chrome runner.",True
b06022895e4120ba9244bc59e1ad176e29cd0fcf,2017-05-03 23:52:08,Brendan Dahl,Add no-default-browser-check to chrome runner.,False
74ba3033e86b30d10fddfdc3660056b99b132687,2017-05-03 20:13:59,Yury Delendik,"Merge pull request #8359 from Snuffleupagus/Lexer-getNumber-ignore-line-breaks

Ignore line-breaks between operator and digit in `Lexer.getNumber`",True
2ac410625b6a5385701092aaa83bb0b10b79e98a,2017-05-03 18:47:31,Yury Delendik,Fixes shell parameters quoting after #8349,False
b4787f0d38bb72b137011c9e6abdff5142c4258c,2017-05-03 16:35:39,Jonas Jenwald,"Merge pull request #8364 from yurydelendik/babel-cache

Adds babel caching for system.js.",True
3e20d30afce416baee5c8edbee765a7390efc6bb,2017-05-03 15:40:20,Jonas Jenwald,"Change the signatures of the `PartialEvaluator` ""constructor"" and its `getOperatorList`/`getTextContent` methods to take parameter objects

Currently these methods accept a large number of parameters, which creates quite unwieldy call-sites. When invoking them, you have to remember not only what arguments to supply, but also the correct order, to avoid runtime errors.
Furthermore, since some of the parameters are optional, you also have to remember to pass e.g. `null` or `undefined` for those ones.
Also, adding new parameters to these methods (which happens occasionally), often becomes unnecessarily tedious (based on personal experience).

Please note that I do *not* think that we need/should convert *every* single method in `evaluator.js` (or elsewhere in `/core` files) to take parameter objects. However, in my opinion, once a method starts relying on approximately five parameter (or even more), passing them in individually becomes quite cumbersome.

With these changes, I obviously needed to update the `evaluator_spec.js` unit-tests. The main change there, except the new method signatures[1], is that it's now re-using *one* `PartialEvalutor` instance, since I couldn't see any compelling reason for creating a new one in every single test.

*Note:* If this patch is accepted, my intention is to (time permitting) see if it makes sense to convert additional methods in `evaluator.js` (and other `/core` files) in a similar fashion, but I figured that it'd be a good idea to limit the initial scope somewhat.

---

[1] A fun fact here, note how the `PartialEvaluator` signature used in `evaluator_spec.js` wasn't even correct in the current `master`.",False
bbb2cc000eecd7dbe43128152bcff769dfccf120,2017-05-03 05:58:03,Yury Delendik,Adds babel caching for system.js.,False
84f174bb2f98666e10791663d89150f71b84ede1,2017-05-03 05:52:20,Yury Delendik,"Merge pull request #8363 from yurydelendik/worker-fromport

Adds initializeFromPort to the WorkerMessageHandler.",True
008aa56ac64a5a6cca2888e1d3fcbaa003dbd220,2017-05-03 02:41:54,Yury Delendik,Adds initializeFromPort to the WorkerMessageHandler.,False
40feca12c12de993bf477065909693b6d65d4c17,2017-05-03 00:29:42,Jonas Jenwald,"Ignore line-breaks between operator and digit in `Lexer.getNumber`

This is consistent with the behaviour in Adobe Reader (and PDFium), and it fixes the display of page 30 in https://bug1354114.bmoattachments.org/attachment.cgi?id=8855457 (taken from https://bugzilla.mozilla.org/show_bug.cgi?id=1354114).

The patch also makes the `error` message for invalid numbers slightly more useful, by including the charCode as well. (Having that information available would have reduced the time spent on debugging the PDF file above.)",False
aea3eccd0ff8601b72396f74ba48f759f72a6886,2017-05-03 00:21:57,Yury Delendik,"Merge pull request #8361 from tobytailor/master

Export LoopbackPort",True
a80c40594193e60a1b2f7a74f901c0b3a9aa93d5,2017-05-03 00:03:19,Tobias Schneider,Rename FakeWorkerPort to LoopbackPort and export it,False
de7002dc6c7a6fc3d3ee1107a8480953b60b9555,2017-05-02 20:41:02,Yury Delendik,"Merge pull request #8357 from Snuffleupagus/core-rm-bind

Replace unnecessary `bind(this)` and `var self = this` statements with arrow functions in remaining `src/core/` files",True
ebaa22478c4301cd4f6fcd105bec1381c5211879,2017-05-02 19:17:43,Jonas Jenwald,Replace unnecessary `bind(this)` and `var self = this` statements with arrow functions in remaining `src/core/` files,False
0c99429291fa8fc68f01b1f3d695d746f812bdac,2017-05-02 04:42:56,Tim van der Meij,"Merge pull request #8349 from timvandermeij/remove-make

Migrate `make.js` to `gulpfile.js`",True
f748407b264f64536694e62bc8b7eccdf98a1e47,2017-05-02 04:30:52,Tim van der Meij,"Remove `make.js` and the target fetching in `gulpfile.js`

Note that we have to use `fs.writeFileSync` since `.to()` is not
available anymore. Moreover, introduce `safeSpawnSync` to make sure that
we check the return codes of the spawned processes properly.",False
145c0cea39c542beee4a3d98be6c1dd90c835afc,2017-05-02 04:17:53,Tim van der Meij,"Remove unused Gulp target for testing

To run the regression tests, developers use `gulp browsertest` and the
bot uses `gulp bottest`. We're not passing the `noreftest` option
anywhere in the code (probably because the `bottest` command takes care
of this already), so we should remove this.",False
19cc9bcdedf80e04873944dfa302500599dcf39e,2017-05-02 04:17:51,Tim van der Meij,Port the `mozcentraldiff` target to Gulp,False
74854fb4cc1da34cde161557ef0ff7e8b4ef3b0a,2017-05-02 04:15:52,Tim van der Meij,"Port the `mozcentralbaseline` target to Gulp

The baseline fix is dead code since three years, so we can safely remove
it.",False
e18a08ffeb3ef18aea9e888529f49a7c179ea108,2017-05-02 03:11:06,Tim van der Meij,"Merge pull request #8355 from Snuffleupagus/evaluator-rm-bind

Replace unnecessary `bind(this)` and `var self = this` statements with arrow functions in `src/core/evaluator.js`",True
95bbc8101c580cf7b6432a59af3f72ea70dca357,2017-05-01 23:59:44,Jonas Jenwald,"Replace unnecessary `bind(this)` and `var self = this` statements with arrow functions in `src/core/evaluator.js`

Note that by using `let` instead of `var` in `PartialEvaluator.setGState` and `TranslatedFont.loadType3Data`, we can get rid of further `bind` usages since `let` is block-scoped.
Also, the fact that `bind` wasn't used in the `Font` case inside of `setGState` is actually a bug which has been present ever since PR 5205, where a closure was replaced by a standard loop.[1]

---
[1] I'm not aware of any bugs caused by this, but that is probably more a happy accident than anything else, since e.g. just removing the `bind` from the `SMask` case without using block-scoped variables causes test failures.",False
60c232bc8cc2a01acc7931400f9dd99ebd8d718b,2017-05-01 00:53:57,Tim van der Meij,"Merge pull request #8353 from Snuffleupagus/eslint_object-shorthand

Enable the `object-shorthand` ESLint rule",True
456b1566cbfcf5ffe669db5bdb9c2c9f387f9b10,2017-05-01 00:40:53,Tim van der Meij,"Merge pull request #8354 from Snuffleupagus/PdfStreamConverter-remove-bind

[Firefox addon] Replace a `bind(this)` statement with an arrow function in `PdfStreamConverter.jsm` (issue 8343)",True
8e976d7110ef95bc887a394d0ece043adf2ff40f,2017-04-30 16:56:34,Jonas Jenwald,"[Firefox addon] Replace a `bind(this)` statement with an arrow function in `PdfStreamConverter.jsm` (issue 8343)

Please note that I used the addon debugger to set a breakpoint in the `unload` function, in order to ensure that `this` still correctly refers to the `FindEventManager` scope.",False
7560f12a1750086bb19ba2e645c3da4c32f077d0,2017-04-30 14:43:34,Jonas Jenwald,"Enable the `object-shorthand` ESLint rule

Please see http://eslint.org/docs/rules/object-shorthand.

Unfortunately, based on commit https://github.com/mozilla/pdf.js/commit/9276d1dcd97b4b0dc45342608a7f1b1a7f1e9c5b, it seems that we still need to maintain compatibility with old Node.js versions, hence certain files/directories that are executed in Node.js are currently exempt from this rule.

Furthermore, since the files specific to the Chromium extension are not run through Babel, the `/extensions/chromium/` directory is also exempt from this rule.",False
00d67371eca336574038c4b18bb649e7e8c31bf7,2017-04-30 14:04:48,Jonas Jenwald,"Merge pull request #8298 from timvandermeij/es6-modules-test

Convert the files in the `/test/unit` folder to ES6 modules",True
35730148a7d8c7bc297a05f1f776fc9f86eada18,2017-04-30 04:04:02,Tim van der Meij,Convert the files in the `/test/unit` folder to ES6 modules,False
06c93d8fbd597d6bf61859498899c8a51f20b674,2017-04-30 03:29:20,Tim van der Meij,"Merge pull request #8342 from Snuffleupagus/eslint_object-shorthand-src-core

Enable the `object-shorthand` ESLint rule in `src/core`",True
5fb779d26fca6eb3072a302c4b89fee278c73977,2017-04-30 03:19:33,Tim van der Meij,"Merge pull request #8351 from Snuffleupagus/eslint_object-shorthand-web

Enable the `object-shorthand` ESLint rule in `web`",True
2a0207ccaf344214941c4fb086f1c5650ff1751a,2017-04-29 23:59:04,Jonas Jenwald,"Enable the `object-shorthand` ESLint rule in `web`

Please see http://eslint.org/docs/rules/object-shorthand.

For the most part, these changes are of the search-and-replace kind, and the previously enabled `no-undef` rule should complement the tests in helping ensure that no stupid errors crept into to the patch.",False
165294a05f66e0a1549ead9446d7931e692b4f3f,2017-04-29 02:43:07,Jonas Jenwald,"Merge pull request #8335 from Snuffleupagus/jbig2-decodeRefinement-subtract-offsets

Subtract the X/Y offsets when decoding refinement regions of JBIG2 images (issue 7145, 7308, 7401, 7850, 8270)",True
8defde508a0437749a254eec856960e37cda34be,2017-04-29 00:11:11,Jonas Jenwald,"Merge pull request #8352 from yurydelendik/rm-builderbuild

Removes builder.build().",True
140dd0f15b27e95405507c6167f0e4883628b59a,2017-04-28 23:17:20,Yury Delendik,Removes builder.build().,False
9276d1dcd97b4b0dc45342608a7f1b1a7f1e9c5b,2017-04-28 19:50:21,Yury Delendik,Allow older versions on node.js to run gulpfile.,False
71bbcfad8ad3c8b5e13a2a1fe804a56df49ec9e2,2017-04-28 05:30:43,Yury Delendik,"Merge pull request #8309 from vologab/feature/allow_query_string_for_pdfjs

Allow use versions for pdf.js script (i.e. - pdf.js?2412313)",True
499c605b328dacb26d472a7d2d53938d72739597,2017-04-28 02:54:41,Tim van der Meij,"Merge pull request #8348 from Snuffleupagus/README.mozilla-commit

Add the commit hash to the `README.mozilla` file (issue 8347)",True
b3582ccbaddcde30b6d8f20d2a9cc2a5419d7906,2017-04-28 02:31:22,Jonas Jenwald,Add the commit hash to the `README.mozilla` file (issue 8347),False
7fd208479659b4ce9599bfcc7234d3928b08f567,2017-04-28 02:12:53,Yury Delendik,"Merge pull request #8346 from Snuffleupagus/issue-8344

Restore the `URL.createObjectURL` check to the `createObjectURL` utility function (issue 8344)",True
ee09336f32356470cbaa1ad439c7ba701713184f,2017-04-28 00:27:15,Jonas Jenwald,"Restore the `URL.createObjectURL` check to the `createObjectURL` utility function (issue 8344)

This is a regression from commit https://github.com/mozilla/pdf.js/commit/3888a993b125e22fdfffd36bf603baf830e6fbe2.

It turns out the even though we have a `URL` polyfill, it's still dependent on the existence of native `URL.{createObjectURL, revokeObjectURL}` functions.
Since no such thing exists in Node.js, our `createObjectURL` utility function breaks there.",False
acdfc2d860481c4cbfca6e03c99046c33af8e76d,2017-04-28 00:21:44,Yury Delendik,"Merge pull request #8345 from timvandermeij/bot-prefs

Bots: disable the default browser test and enable E10s",True
ee86a81a50cb613a4b1ce9835617096001677e75,2017-04-28 00:09:57,Tim van der Meij,"Bots: disable the default browser test and enable E10s

The test runner is automated, so if the default browser test is
performed, the browser hangs waiting for user input it never gets.
Disable the test to fix that.

Moreover, enable E10s now that it is mature. This may help with the
performance of the test runner as well.",False
e3d0cd49139d253ca1ab9d14a610a1add0802b88,2017-04-27 22:37:42,Yury Delendik,Fixes stable version number,False
afc74b0178202bbaa5a9d7527059666245df6641,2017-04-27 20:59:40,Jonas Jenwald,"Enable the `object-shorthand` ESLint rule in `src/shared`

Please see http://eslint.org/docs/rules/object-shorthand.

For the most part, these changes are of the search-and-replace kind, and the previously enabled `no-undef` rule should complement the tests in helping ensure that no stupid errors crept into to the patch.",False
f91d01cad3bc7a32555396c6e8e991d275ba84a3,2017-04-27 20:13:37,Tim van der Meij,"Merge pull request #8332 from Snuffleupagus/eslint_object-shorthand-src-shared-display

Enable the `object-shorthand` ESLint rule in `src/shared` and `src/display`",True
32c0ea590959a53b5ae5a86895318baf935e374d,2017-04-27 20:00:07,Tim van der Meij,"Merge pull request #8324 from timvandermeij/es6-annotation-presentation-rendering

Convert the annotation layer builder, presentation mode and rendering queue to ES6 syntax",True
24d44b2a341266eec932a0975c764fee69aa6103,2017-04-27 19:53:30,Tim van der Meij,Convert the rendering queue to ES6 syntax,False
ccdc7ba3c8b5c4a89703f907e153b43c590888d7,2017-04-27 19:53:29,Tim van der Meij,Convert presentation mode to ES6 syntax,False
3554a93c2b1d2abd4e63540641a67b7c213afe98,2017-04-27 19:53:29,Tim van der Meij,Convert the annotation layer builder to ES6 syntax,False
f4690a3c93ee6dd0e5fa8727aafbaf9e9a690415,2017-04-27 19:03:32,Tim van der Meij,"Merge pull request #8331 from Snuffleupagus/ui-utils-unit-tests-travis

Enable running the `ui_utils` unit-tests on Travis",True
19af5952c0e231fd9db7654a54be0d13aa468685,2017-04-27 18:54:01,Tim van der Meij,"Merge pull request #8339 from Snuffleupagus/es6-ViewHistory

Convert the `ViewHistory` to an ES6 class, and re-factor it to make it properly asynchronous",True
09edfb3dc0b407df7fcfcf136908e3b54b74571e,2017-04-27 15:19:35,Jonas Jenwald,"Re-factor `ViewHistory` to make it properly asynchronous

Rather than having to manually use `initializedPromise`, which really ought to be a private property, to ensure that setting/getting values in the `ViewHistory` works as intended, this re-factoring simply changes all of its methods to be asynchronous.

Furthermore, a `getMultiple` method (mirroring the existing `setMultiple` one) is also added to `ViewHistory`.

Finally, this patch also addresses an existing issue, where certain preferences (e.g. the default zoom level) would be ignored when calling `setInitialView` if reading from the `ViewHistory` fails for some reason.",False
64deb6c7000507fee0bb7ce56b5fa1d4109be0ba,2017-04-26 19:36:15,Jani Pehkonen,"Subtract the X/Y offsets when decoding refinement regions of JBIG2 images (issue 7145, 7308, 7401, 7850, 8270)

Please refer to the JBIG2 standard, see https://www.itu.int/rec/dologin_pub.asp?lang=e&id=T-REC-T.88-200002-I!!PDF-E&type=items.
In particular, section ""6.3.5.3 Fixed templates and adaptive templates"" mentions that the offsets should be *subtracted*; where the offsets are defined according to ""Table 6"" under section ""6.3.2 Input parameters"".

Fixes 7145.
Fixes 7308.
Fixes 7401.
Fixes 7850.
Fixes 8270.",False
16b4132ebfe348462b34e7f740524bde80de54d4,2017-04-26 15:19:06,Jonas Jenwald,Convert the `ViewHistory` to an ES6 class,False
07b55740067738ac25bc2e08207c3dacda32106d,2017-04-25 19:47:18,Jonas Jenwald,"Enable the `object-shorthand` ESLint rule in `src/display`

Please see http://eslint.org/docs/rules/object-shorthand.

For the most part, these changes are of the search-and-replace kind, and the previously enabled `no-undef` rule should complement the tests in helping ensure that no stupid errors crept into to the patch.",False
7bee0c2aa392b145d5cc23ac62d06b30fdf0af14,2017-04-25 19:37:59,Jonas Jenwald,"Enable the `object-shorthand` ESLint rule in `src/shared`

Please see http://eslint.org/docs/rules/object-shorthand.

For the most part, these changes are of the search-and-replace kind, and the previously enabled `no-undef` rule should complement the tests in helping ensure that no stupid errors crept into to the patch.",False
366277d18018742f0d7aed77494e0fe662145c22,2017-04-25 17:45:10,Jonas Jenwald,"Merge pull request #8328 from timvandermeij/remove-mozcentralcheck

Makefile: remove unused `mozcentralcheck` target",True
ae04cf1c374b7afe9f9638a1e09d8aa506544195,2017-04-25 17:07:56,Jonas Jenwald,"Enable running the `ui_utils` unit-tests on Travis

With the exception of just one test-case, all the current `ui_utils` unit-tests can run successfully on Node.js (since most of them doesn't rely on the DOM).

To get this working, I had to first of all add a new `LIB` build flag such that `gulp lib` produces a `web/pdfjs.js` file that is able to load `pdf.js` successfully.
Second of all, since neither `document` nor `navigator` is available in Node.js, `web/ui_utils.js` was adjusted slightly to avoid errors.",False
6d374f15c05bdd782fbea563a50f5f3a3f1af377,2017-04-25 02:30:57,Tim van der Meij,"Makefile: remove unused `mozcentralcheck` target

It is not used by upstream anymore, since they create a diff and
manually review it before submitting it.",False
5fe26bb9da4fca7c9f8424734f99b353ba96ff39,2017-04-24 01:25:36,Tim van der Meij,"Merge pull request #8303 from Snuffleupagus/es6-preferences

Convert the `Preferences` to an ES6 class",True
c5f9193777ad319903d9f5b560a62122f2dc8901,2017-04-24 00:44:58,Jonas Jenwald,Convert the `Preferences` to an ES6 class,False
99d35a1039cf91148742fb31cc1025a2bb767a1d,2017-04-23 20:48:25,Tim van der Meij,"Merge pull request #8306 from timvandermeij/es6-sidebar

Convert the sidebar to ES6 syntax",True
26ad82f5c2dcc866f85fedf0563f65998c8a6391,2017-04-23 20:43:51,Tim van der Meij,Convert the sidebar to ES6 syntax,False
ece24dfe61d0cd6fe7a8b23728336efd4033fda7,2017-04-23 20:27:00,Jonas Jenwald,"Merge pull request #8302 from timvandermeij/es6-attachments-outline

Convert the attachments/outline view to ES6 syntax",True
93520172f6de79dc70939c2b52d626250621357d,2017-04-23 19:36:15,Tim van der Meij,Convert the attachments/outline view to ES6 syntax,False
0e8f020e2e396b09089c78cda8c7715f0bdf4c0f,2017-04-22 23:20:05,Tim van der Meij,"Merge pull request #8323 from Snuffleupagus/importl10n-beta

Change the `importl10n` script to use the Beta channel, since Aurora is being removed",True
9e9676e54e720d325b538e228b09e44a41633a26,2017-04-22 19:59:37,Jonas Jenwald,Update l10n files,False
57cd52303a97313e36a417c92eef1cd379faf0d3,2017-04-22 19:54:52,Jonas Jenwald,"Change the `importl10n` script to use the Beta channel, since Aurora is being removed

Since the Aurora channel is being removed, and is no longer going to be receiving updates (with the possible exception of security bugs), we need to change the target for the `gulp importl10n` command.

For more information, please refer to:
 - https://groups.google.com/forum/#!topic/firefox-dev/q4Eb5nEcfSg
 - https://hacks.mozilla.org/2017/04/simplifying-firefox-release-channels/
 - https://mozilla.github.io/process-releases/draft/development_overview/
 - http://release.mozilla.org/firefox/release/2017/04/17/Dawn-Project-FAQ.html",False
96cb599e938df3e7e27e45afb1241a3b67b80dac,2017-04-21 03:45:10,Tim van der Meij,"Merge pull request #8322 from Snuffleupagus/rm-window-FirefoxCom

[Firefox addon] Remove the `window.FirefoxCom` hack from `web/viewer.js`, since it was made redunant by the `setExternalLocalizerServices` refactoring (PR 7202 follow-up)",True
c44fd3d6e21c708b3cd942fe99d822ca37a452a8,2017-04-20 23:16:29,Jonas Jenwald,"Merge pull request #8321 from Snuffleupagus/issue-8263

Change `getPDFFileNameFromURL` to ignore `data:` URLs for performance reasons (issue 8263)",True
7bd8b97dba61ab80c79836d47ab0cb46d2a6e57e,2017-04-20 21:51:41,Jonas Jenwald,"Change `PDFAttachmentViewer` to only open PDF attachments in the viewer, instead of downloading them, when `PDFJS.disableCreateObjectURL = false`

This prevents issues with the filename detection being skipped, when trying to download the opened PDF attachment, since `getPDFFileNameFromURL` ignores `data:` URLs for performance reasons.",False
84472b30ee072f6c369abc26049b189d42374b05,2017-04-20 21:51:27,Jonas Jenwald,"Change `getPDFFileNameFromURL` to ignore `data:` URLs for performance reasons (issue 8263)

The patch also changes the `defaultFilename` to use the ES6 default parameter notation, and fixes the formatting of the JSDoc comment.

Finally, since `getPDFFileNameFromURL` currently has no unit-tests, a few basic ones are added to avoid regressions.",False
d76f299b6bda37a09a838e3c1cd8d859237da011,2017-04-20 20:53:30,Jonas Jenwald,"[Firefox addon] Remove the `window.FirefoxCom` hack from `web/viewer.js`, since it was made redundant by the `setExternalLocalizerServices` re-factoring (PR 7202 follow-up)

After PR 7202, there are no remaining references to `FirefoxCom` in the `/extensions/firefox/tools/l10n.js` file.",False
3888a993b125e22fdfffd36bf603baf830e6fbe2,2017-04-20 13:46:06,Jonas Jenwald,"Remove the `URL` checks in the `createObjectURL` utility function, since the `URL` polyfill have made them redundant

Also, this changes `createBlob` to throw when `Blob` isn't supported.",False
2928578164fc076ec46d74c6de6e43187fa38105,2017-04-20 02:50:08,Tim van der Meij,"Merge pull request #8313 from Snuffleupagus/bug-1346616

[Firefox addon] Upstream changes from: Bug 1346616 - Migrate callsites that are retrieving requested locale from pref, to use LocaleService::GetRequestedLocales",True
93f345483a9bfb28af55498be2637f0d840b6e1d,2017-04-20 02:48:00,Tim van der Meij,"Merge pull request #8315 from Snuffleupagus/rm-signchromium

Remove the `signchromium` target from `make.js`",True
a77130a0c2e8320e1aabf2b331eae601e0e66efd,2017-04-20 02:43:16,Jonas Jenwald,"Remove the `signchromium` target from `make.js`

According to the IRC discussion starting at http://logs.glob.uno/?c=mozilla%23pdfjs&s=18+Apr+2017&e=18+Apr+2017#c59676, and in particular http://logs.glob.uno/?c=mozilla%23pdfjs&s=18+Apr+2017&e=18+Apr+2017#c59682, this build target is unused and can thus be removed.",False
3b59169ffc442d8afa7ca2141dc45b258dd1ccc5,2017-04-19 03:04:48,Jonas Jenwald,"[Firefox addon] Upstream changes from: Bug 1346616 - Migrate callsites that are retrieving requested locale from pref, to use LocaleService::GetRequestedLocales

With [bug 1346616](https://bugzilla.mozilla.org/show_bug.cgi?id=1346616) and [this commit](https://hg.mozilla.org/mozilla-central/rev/39a903b099a6#l7.2), it's apparently no longer recommended to check the `general.useragent.locale` pref directly, but instead the `Services.locale.getRequestedLocale()` function should be used.

In this case, it's at least really easy to feature detect this properly :-)",False
19321937da8ca71d7687a7a66ca2169dcf0a63db,2017-04-19 01:01:58,Jonas Jenwald,"Merge pull request #8312 from yurydelendik/mv-dist-gulpfile

Moves dist and minifiedpost tragets from make.js.",True
bc20181a1e1063a4f6121902192044da8bb39998,2017-04-19 00:49:21,Yury Delendik,"Merge pull request #8311 from Snuffleupagus/bug-1356569

[Firefox addon] Upstream changes from: Bug 1356569 - Remove optional trailing parameters (issue 8310)",True
1d30cea914ee651c0a4875bb6c4700bf1bd1ccff,2017-04-19 00:30:53,Yury Delendik,Moves dist and minifiedpost tragets from make.js.,False
cf87c9bba29ecae1dd6c7ab87687b0f672ae7122,2017-04-19 00:21:17,Jonas Jenwald,"[Firefox addon] Upstream changes from: Bug 1356569 - Remove optional trailing parameters (issue 8310)

In https://bugzilla.mozilla.org/show_bug.cgi?id=1355216, the *third* parameter of `Services.obs.addObserver` was made optional.
However, omitting it in Firefox versions *without* that patch causes failures that completely prevents the addon from working (it won't even load).

As far as I can tell, there isn't *any* way to detect ahead of time if the third parameter can be safely omitted, hence we're forced to fallback to manually checking the version number :-(

*Note:* Since the `PdfJs.jsm` file is only used in the `MOZCENTRAL` build, we at least don't need to add any compatibility hacks there.",False
319ea0f3507dda560f61cbd182edc93cc07b47a5,2017-04-18 17:37:09,Vladimir Bloshchitsyn,Allow use versions for pdf.js script (i.e. - pdf.js?2412313),False
5ad3611cc4361c2d7f2dbb98e51fdee9fc903012,2017-04-17 18:04:13,Yury Delendik,"Merge pull request #8300 from Snuffleupagus/GENERIC-DownloadManager-creation

Refactor the `DownloadManager` initialization in `GENERIC`/`CHROME` builds again (PR 8203 follow-up)",True
7812b3cfb21690858c8260ac96ad0f702d5607fd,2017-04-17 18:02:04,Yury Delendik,"Merge pull request #8299 from Snuffleupagus/domEvents-getGlobalEventBus-import

Import `getGlobalEventBus` correctly from `web/dom_events.js` in various `/web` files, to un-break e.g. the viewer components (PR 8203 follow-up)",True
594e8c05efae385eb45d5c249df4c80a9a84986d,2017-04-17 17:04:30,Jonas Jenwald,"Refactor the `DownloadManager` initialization in `GENERIC`/`CHROME` builds again (PR 8203 follow-up)

In the first commit in PR 8203, I changed how the `DownloadManager` was included/initialized in `GENERIC`/`CHROME` builds.
The change was prompted by the fact that you cannot have conditional `import`s with ES6 modules, and I wanted to avoid bundling the general `DownloadManager` into the various Firefox specific build targets.

What I completely missed though, is that the new code meant that `download_manager.js` will now be pulling in the *entire* viewer (through `app.js`).
This is a *really* stupid mistake on my part, since it causes the `dist/build/pdf_viewer.js` used with the viewer components to now include basically the entire default viewer.

The simplest solution that I could come up with, is to add a `genericcom.js` file (similar to the `firefoxcom.js`/`chromecom.js` files) which will be responsible for importing/initializing the `DownloadManager`.",False
79e0745a126224da9ddc79294be7cdc0cd09bc17,2017-04-17 04:24:29,Jonas Jenwald,"Import `getGlobalEventBus` correctly from `web/dom_events.js` in various `/web` files, to un-break e.g. the viewer components (PR 8203 follow-up)

In PR 8203, I somehow managed to mess up the import of `getGlobalEventBus` in *all* files where it's present; my sincere apologies for this!",False
bd0e4dc4e30252021cf58f5bbd1b22cec50502b8,2017-04-17 03:16:25,Tim van der Meij,"Merge pull request #8297 from timvandermeij/es6-find-bar

Convert the find bar to ES6 syntax",True
009d91d7350dd91a74ff209419981b8f8c487357,2017-04-17 02:47:47,Jonas Jenwald,"Merge pull request #8296 from timvandermeij/es6-document-properties

Convert the document properties to ES6 syntax",True
6f6fb4dfd04620302dad2a331cde4dd99a75395d,2017-04-17 02:42:11,Tim van der Meij,Convert the find bar to ES6 syntax,False
6d7a0ff8f22a653bf7bfbddc6f5d8ce61a3ae36e,2017-04-16 20:12:57,Tim van der Meij,Convert the document properties to ES6 syntax,False
228df572d28bdd304afe9633562999cee826aba6,2017-04-16 19:54:34,Tim van der Meij,"Merge pull request #8294 from Snuffleupagus/es6-modules-src-display

Convert the files in the `/src/display` folder to ES6 modules",True
3eb51f1272ff563fe5570f44ba837c3677436e51,2017-04-16 19:17:26,Tim van der Meij,"Merge pull request #8295 from Snuffleupagus/web-createPromiseCapability

Use `createPromiseCapability` in `/web` files and avoid unnecessary `PDFPageView.setPdfPage` calls",True
10592a311ae5ce7172fed6805a0c3be6a29dd44c,2017-04-16 19:08:24,Jonas Jenwald,"Merge pull request #8293 from timvandermeij/es6-password-prompt

Convert the password prompt to ES6 syntax",True
dfd338a399aea2f999419f7119f625dd790ffd2e,2017-04-16 18:47:23,Tim van der Meij,"Remove the password prompt input type hack

The browsers have become smarter and made this hack no longer
functional. Since this is now enforced by practically all browsers,
there is nothing more we can do about this. It is up to the user to
serve the viewer over HTTPS or deal with the warning.

Note that this is in no way specific for PDF.js. Any site with password
inputs served over HTTP has this problem right now. This hack was
provided as a convenience for the users, but nothing more than that.",False
e3796f6f416c70cd72a57ebbd4ec8882232df3ef,2017-04-16 18:47:23,Tim van der Meij,Convert the password prompt to ES6 syntax,False
fce2cfddcf2e07e9f1c50c013789c52494c2a4bd,2017-04-16 17:12:45,Jonas Jenwald,"Check if `pageView.pdfPage` exists in `PDFViewer._ensurePdfPageLoaded`, to avoid potentially calling `PDFPageView.setPdfPage` multiple times for the same page

Since calling `PDFPageView.setPdfPage` will in turn call `PDFPageView.reset`, which cancels all rendering and completely resets the page, it's thus possible that we currently cause some unnecessary re-rendering during the initial loading phase of the viewer.

Depending on the order in which data arrives, it's possible (and in practice always seem to happen) that the `pdfPage` property of the *second* page has already been set during `PDFViewer.setDocument`, by the time that the request for the `pdfPage` is resolved in `PDFViewer._ensurePdfPageLoaded`.

Also, note how the `setPdfPage` call in `PDFViewer.setDocument` is already guarded by this kind of check.",False
b0a4f6de8fe1e453a8869e93b403c64be7b2d804,2017-04-16 16:15:24,Jonas Jenwald,"Use `createPromiseCapability` in `/web` files

In various viewer files, there's a number of cases where we basically duplicate the functionality of `createPromiseCapability` manually.
As far as I can tell, a couple of these cases have existed for a very long time, and notable even before the `createPromiseCapability` utility function existed.

Also, since we can write ES6 code now, the patch also replaces a couple of `bind` usages with arrow functions in code that's touched in the patch.",False
52e3de3c0a179adc30a9d9442eb8e2df754254cd,2017-04-16 15:49:10,Jonas Jenwald,"Convert the files in the `/src/display` folder to ES6 modules

Also disables ES2015 transpilation in development mode.",False
c6e8ca863e95e409d2d58037467981fe63ba9555,2017-04-15 23:47:03,Tim van der Meij,"Merge pull request #8291 from Snuffleupagus/pr-8157

Ensure that `PDFThumbnailView.draw` is able to handle `RenderingCancelledException` correctly (PR 8157 follow-up)",True
db6f2f37185ec61b3c8a73cbfec7216399b400fa,2017-04-15 14:42:48,Jonas Jenwald,"Ensure that `PDFThumbnailView.draw` is able to handle `RenderingCancelledException` correctly (PR 8157 follow-up)

In PR 8157, I embarrassingly enough forgot to change `pdf_thumbnail_view.js` to match the changes made to `pdf_page_view.js`.",False
27c3c33eec4e08a90637b7a932699a9f8669dd22,2017-04-15 03:33:29,Tim van der Meij,"Merge pull request #8288 from yurydelendik/mv-make-web

Moves 'web' target to the gulpfile.",True
f8b3b75e424ab977b43fd3b5a78f2b5108485a4c,2017-04-15 03:30:59,Yury Delendik,"Merge pull request #8289 from timvandermeij/firefox-extension-cleanup

Firefox extension: remove unused preference cleanup from `bootstrap.js`",True
89df5ef0331040bcfa0606200e98ce8924982eda,2017-04-15 03:27:53,Yury Delendik,Moves 'web' target to the gulpfile.,False
e7a3ea29aadac387273e4195ddb0c1025ad8d238,2017-04-15 03:19:01,Tim van der Meij,"Firefox extension: remove unused preference cleanup from `bootstrap.js`

The comment for the removal has been added three years ago, so we can
safely remove this now.",False
fd51a7cb8c704c034e80c131c6f70b3e77705499,2017-04-15 01:17:45,Jonas Jenwald,"Merge pull request #8287 from yurydelendik/babel-es2015-preset

Allow to convert (some of) ES6 code to ES5.",True
5855c0a8bead85c93cbaae2108df09bedadb2b41,2017-04-15 01:09:25,Yury Delendik,Allow to convert (some of) ES6 code to ES5.,False
bc1f4dd9c8068a74777e239bf81e4d5b4c178fe6,2017-04-14 22:05:39,Jonas Jenwald,"Merge pull request #8285 from yurydelendik/webcjspath

Change amd to cjs path in ES6 modules",True
f6d4de989883a63469ff28a7851af6b874e35243,2017-04-14 21:09:21,Yury Delendik,"Merge pull request #8283 from yurydelendik/uint32arrayview

Moves Uint32ArrayView and hasCanvasTypedArrays into compatibility.js.",True
5feb2a253fc432a817b71c2f9cd5a7051b64e255,2017-04-14 21:07:26,Yury Delendik,"Merge pull request #8286 from mozilla/package-version

Changing package.json version to 1.0.0",True
3b36a1709a9c0621fb74225853ce16fdbf7196fd,2017-04-14 21:06:42,Yury Delendik,"Changing package.json version to 1.0.0

We are changing how we are structuring the src file -- it makes sense to create a ""major"" release.",False
8e681ce3e29a144cce0c033c284d25444fc01d7a,2017-04-14 21:02:36,Yury Delendik,Change amd to cjs path in ES6 modules,False
30bee9fe0c4f41ca07e11b440d64102f5921e477,2017-04-14 20:34:52,Yury Delendik,Moves Uint32ArrayView and hasCanvasTypedArrays into compatibility.js.,False
74b31ab18f1a368963f7337e2b7313a5f335e618,2017-04-13 21:46:27,Yury Delendik,"Merge pull request #8203 from Snuffleupagus/es6-modules-web

Convert the files in the `/web` folder to ES6 modules",True
c4c44c1bbe5474c5c9085357451d18665b4488cf,2017-04-13 21:28:49,Yury Delendik,"Merge pull request #8240 from Snuffleupagus/api-stopAtErrors

[api-minor] Always allow e.g. rendering to continue even if there are errors, and add a `stopAtErrors` parameter to `getDocument` to opt-out of this behaviour (issue 6342, issue 3795, bug 1130815)",True
46646a9dd19d8e6391127dba843cadabf9dabf45,2017-04-13 21:19:41,Yury Delendik,"Merge pull request #8131 from timvandermeij/remove-umd-validation

ES6 modules: remove UMD header validation",True
b529df4547a4225d905415229491fe8ae6c7ad53,2017-04-13 21:18:20,Yury Delendik,"Merge pull request #8281 from yurydelendik/v1.8.188

v1.8.188",True
b939827b4bb2523cda669c4c71f21bf8f0152035,2017-04-13 21:16:19,Yury Delendik,v1.8.188,False
ad1023ff5571942600d79b1126b84685251957dd,2017-04-13 21:11:36,Yury Delendik,"Merge pull request #8262 from tcorral/master

Fix worker resolution on using minified version",True
32e01cda960e8dd7af3badf9b7d47ae4e3904fe3,2017-04-13 03:48:31,Tim van der Meij,"Merge pull request #8228 from timvandermeij/line-annotations

Implement support for line annotations",True
e15a2ec5234b1324cb82bcb69196528e2ad53d22,2017-04-13 02:35:25,Tim van der Meij,"Annotations: implement support for line annotations

This patch implements support for line annotations. Other viewers only
show the popup annotation when hovering over the line, which may have
any orientation. To make this possible, we render an invisible line (SVG
element) over the line on the canvas that acts as the trigger for the
popup annotation. This invisible line has the same starting coordinates,
ending coordinates and width of the line on the canvas.",False
2274465588551599f1466dc252e4cbbe83b5d021,2017-04-12 17:02:33,Jonas Jenwald,"Merge pull request #8275 from Snuffleupagus/telemetry-stub

Rename PdfJsTelemetry-addon.jsm to PdfJsTelemetry-stub.jsm",True
4e8cd2b7d3e0196d496daa8f0f280514b8eb15d6,2017-04-12 16:41:04,Georg Fritzsche,"Rename PdfJsTelemetry-addon.jsm to PdfJsTelemetry-stub.jsm

And remove unused linting comments.",False
7052316f58a797a7c671fc7aae0f6289e8dbcf6e,2017-04-11 20:44:39,Yury Delendik,"Merge pull request #8273 from Snuffleupagus/issue-8272

Correctly detect if `requestAnimationFrame` is supported in `compatibility.js` (issue 8272)",True
3a302fdb536c7ce1fdc624081dc75d37c6f83824,2017-04-11 20:31:35,Jonas Jenwald,"Correctly detect if `requestAnimationFrame` is supported in `compatibility.js` (issue 8272)

This is a regression from PR 8222.

Fixes 8272.",False
fbe7b2eee7bd4b2091307b834408972b0daaf028,2017-04-11 12:29:22,Jonas Jenwald,"Always ignore Type3 glyphs if their `OperatorList`s contain errors, regardless of the value of the `stopAtErrors` option

Compared to the parsing of e.g. an entire page, it doesn't really make sense to only be able to render a Type3 glyph partially.",False
a39d636eb8901abf474ab515a312a357c60bae35,2017-04-11 12:29:22,Jonas Jenwald,"[api-minor] Always allow e.g. rendering to continue even if there are errors, and add a `stopAtErrors` parameter to `getDocument` to opt-out of this behaviour (issue 6342, issue 3795, bug 1130815)

Other PDF readers, e.g. Adobe Reader and PDFium (in Chrome), will attempt to render as much of a page as possible even if there are errors present.
Currently we just bail as soon the first error is hit, which means that we'll usually not render anything in these cases and just display a blank page instead.

NOTE: This patch changes the default behaviour of the PDF.js API to always attempt to recover as much data as possible, even when encountering errors during e.g. `getOperatorList`/`getTextContent`, which thus improve our handling of corrupt PDF files and allow the default viewer to handle errors slightly more gracefully.
In the event that an API consumer wishes to use the old behaviour, where we stop parsing as soon as an error is encountered, the `stopAtErrors` parameter can be set at `getDocument`.

Fixes, inasmuch it's possible since the PDF files are corrupt, e.g. issue 6342, issue 3795, and [bug 1130815](https://bugzilla.mozilla.org/show_bug.cgi?id=1130815) (and probably others too).",False
10e5f766a2dbb04f17ccf9d3ae0d7a10931c459d,2017-04-11 12:24:42,Jonas Jenwald,"Merge pull request #8266 from brendandahl/issue6652

Normalize blend mode names.",True
4969b2ad972d639cd87922f06cf82123e8941d07,2017-04-11 04:48:08,Brendan Dahl,Normalize blend mode names.,False
010d38a8c0f6fad7f0b5e6955e5371a8121be87c,2017-04-10 17:11:50,TCASAS,"Fix worker resolution on using minified version

- When the minified version is used the resolver of the worker can not find it properly and throws 404 error.
- The problem was that:
  - It was getting the current name of the file.
  - It was replacing **.js** by **.worker.js**
- When it was loading the unminified version it was working fine because:
  - *pdf.js - .js + .worker.js*  = **pdf.worker.js**
- When it was loading the minified version it didtn't work because:
  - *pdf.min.js - .js + .worker.js* = **pdf.min.worker.js**
  - **pdf.min.worker.js** doesn't exist the real file name is **pdf.worker.min.js**",False
30d63b0c502e0b55590bc4bd4fb12c7fa5a7a5d9,2017-04-09 22:31:38,Tim van der Meij,"Annotations: move container border removal to the display layer

The display layer is responsible for creating the HTML elements for the
annotations from the core layer. If we need to ignore border styling for
the containers of certain elements, the display layer should do so and
not the core layer. I noticed this during the implementation of line
annotations, for which we actually need the original border width in the
display layer, even though we ignore it for the container. If we set the
border style to zero in the core layer, this becomes impossible.

To prevent this, this patch moves the container border removal code from
the core layer to the display layer. This makes the core layer output
the unchanged annotation data and lets the display layer remove any
border styling if necessary.",False
b2c3f8f081924d38f38f37713f3c379ac25eaa76,2017-04-09 15:25:48,Jonas Jenwald,"Convert a number of `import * as pdfjsLib from 'pdfjs-web/pdfjs';` cases to only specify the necessary imports

Rather than always importing everything from the `web/pdfjs.js`, similar to all other imports we can just choose what we actually need.",False
3b35c15d42384b6f72b1b39ff3b9d37aa1739684,2017-04-09 15:25:48,Jonas Jenwald,"Convert the files in the `/web` folder to ES6 modules

Note that as discussed on IRC, this makes the viewer slightly slower to load *only* in `gulp server` mode, however the difference seem slight enough that I think it will be fine.",False
313060aff55cd2c228a082d27a7d43911dc9c040,2017-04-09 15:25:48,Jonas Jenwald,"Refactor the `DownloadManager` initialization in `GENERIC`/`CHROME` builds, to avoid issues when converting the code to ES6 modules",False
d6dfc26d4e578ce11ecb28132f166022edb3439f,2017-04-09 01:57:04,Tim van der Meij,"Merge pull request #8257 from Snuffleupagus/eslint_prefer-promise-reject-errors

Enable the `prefer-promise-reject-errors` ESLint rule",True
f41d80bdd3e9d384da45a295cedbe9825700194f,2017-04-08 15:17:22,Jonas Jenwald,"Enable the `prefer-promise-reject-errors` ESLint rule

See http://eslint.org/docs/rules/prefer-promise-reject-errors, note that this is similar to the already used  `no-throw-literal` rule.",False
55a853b6678cf3d05681ffbb521e5228e607b5d2,2017-04-07 23:23:54,Brendan Dahl,"Merge pull request #8244 from Snuffleupagus/issue-8241

Actually skip pages included in the `skipPages` array when running tests, rather than creating empty 1x1 canvases (issue 8241)",True
c5199d0814720a767b5cc4b83053ddc134ff3b13,2017-04-07 16:01:54,Jonas Jenwald,Update l10n files,False
8ff1fbe7f819513e7d0023df961e3d223b35aefa,2017-04-07 00:14:11,Yury Delendik,"Merge pull request #8249 from yurydelendik/v1.8.170

Release 1.8.170",True
a0dee94d60d12c294003babfb82cad052677539e,2017-04-07 00:09:45,Yury Delendik,Release 1.8.170,False
3ca67550ef076b022b8afa7ea482b70d25a5b9e3,2017-04-07 00:08:03,Yury Delendik,"Merge pull request #8248 from yurydelendik/version-1.8

Version 1.8",True
a7f735dbfaf2c2508e24962a60d574683712956e,2017-04-07 00:06:33,Yury Delendik,Version 1.8,False
9d62ff80cab3306ff138b3547733594a79212848,2017-04-06 16:47:52,Jonas Jenwald,"Actually skip pages included in the `skipPages` array when running tests, rather than creating empty 1x1 canvases (issue 8241)

Considering how extremely simple this patch turned out to be, I'm almost worried that I completely misunderstood why the current code looks like it does...",False
a662d268141b9fd99de18cf621fcadf7b0679c66,2017-04-06 13:55:55,Jonas Jenwald,"Merge pull request #8243 from brendandahl/no-skip-glyph0

Don’t skip glyph 0 in cmap.",True
cdc79a4721d0b3c347f8fd3941de7ef4857526e1,2017-04-06 03:47:38,Brendan Dahl,Don’t skip glyph 0 in cmap.,False
c380d2540772be2d996c6c1b932593c57a42da63,2017-04-05 23:59:54,Yury Delendik,"Merge pull request #8239 from georgf/master

Stub out Firefox addon Telemetry wrapper",True
788fe1f810d7a13936e0309198014398fef0a770,2017-04-05 12:47:31,Georg Fritzsche,"Stub out Firefox addon Telemetry wrapper

We are planning to remove the addon histogram APIs from Firefox
Telemetry.
The easy solution here is to just stub out all calls that use them.",False
f9c07fa695c18994009de4b176d9293bcee6a29e,2017-04-04 21:08:22,Yury Delendik,"Merge pull request #8235 from Snuffleupagus/issue-7901

Disable the `NativeImageDecoder` in the `node/pdf2svg.js` example (issue 7901)",True
b665b0319a1b8a2c83dd68ff10e2b8ce58205877,2017-04-04 20:59:04,Yury Delendik,"Merge pull request #8222 from tjgrathwell/ios-fake-cancel-animation-frame

ios: Patch cancelAnimationFrame whenever fakeRequestAnimationFrame is used",True
d76cfc06107be67279117f1773d371a6121d5c26,2017-04-04 20:54:29,Jonas Jenwald,"Disable the `NativeImageDecoder` in the `node/pdf2svg.js` example (issue 7901)

It doesn't really make sense to attempt to utilize the `NativeImageDecoder` in Node, since there's no native image support available, hence building on PR 8035 we can easily disable it in the example.

Fixes 7901.",False
31f88756148475440c94c3cc2ad5da25139b101b,2017-04-04 20:08:47,Yury Delendik,"Merge pull request #8157 from Snuffleupagus/api-RenderTask-cancel-Error

[api-minor] Reject the `RenderTask` with an actual `Error`, instead of just a `string`, when rendering is cancelled",True
a2ddf2f9cae7b779ed28f47c0a0c009e8d2a8e32,2017-04-04 04:07:22,Yury Delendik,"Merge pull request #8218 from amccreight/no-sync

Split pdfjschildbootstrap.js to avoid sync IPC",True
12c167928825497cd30feaeb76fae4caadcf6c0d,2017-04-04 03:57:30,Yury Delendik,"Merge pull request #8232 from amccreight/lazy-net-util

Lazily load NetUtil.jsm in PdfStreamConverter.jsm.",True
071951d787e8b3bd16fa4ef16325bcf14984d606,2017-04-03 23:03:57,Andrew McCreight,"Lazily load NetUtil.jsm in PdfStreamConverter.jsm.

This is one step towards not loading NetUtil.jsm at startup in a clean
profile.",False
bd70a73d43ce71faff424bb692e339f55f335713,2017-04-01 04:01:04,Travis Grathwell,"ios: Patch cancelAnimationFrame whenever fakeRequestAnimationFrame is used

The existing implementation of fakeRequestAnimationFrame
did not return a timer ID, so the frame could not be cancelled
if you wanted to cancel it. But if you do want to cancel it,
it needs to be cancelled through clearTimeout instead of
cancelAnimationFrame, because the timer IDs are different.

Signed-off-by: Jonathan Barnes <jbarnes@pivotal.io>",False
740e1ab450783b15361ac70cda24d2091cb920d7,2017-04-01 01:52:39,Andrew McCreight,"Skip PdfJs.enabled check in bootstrap-enabled.

If we only invoke the bootstrap-enabled script when PdfJs.enabled is
true, then we don't need to check it again in the script.

This avoids a sync IPC call to the parent process.

It also keeps PdfJs.jsm from importing PdfjsContentUtils.jsm in the
child process until it is actually needed, which is one steps towards
not loading it until it is really needed.",False
d804881151fd980c81f4062c55350ac2cf640fe4,2017-04-01 01:52:39,Andrew McCreight,"Split bootstrap script.

pdfjschildbootstrap.js will always be run, but
pdfjschildbootstrap-enabled.js will only be run if PdfJs.enabled is
true. This will let us avoid some work in the child process in the
next patch.

This will need to be landed in the mozilla-central repository at the
same time as a change to nsBrowserGlue.js. See bug 1352218.",False
57d9a64c140283ed1e4c4e2b932c357fd1aeff32,2017-03-31 02:49:08,Tim van der Meij,"Merge pull request #8210 from Snuffleupagus/issue-8209

Refactor removing of the `zoomLayer` into a helper method, and use that in `PDFPageView.reset` to ensure that the entire `zoomLayer` is actually removed (issue 8209)",True
8cee63df5dd414aa99030c9f36373da9d337113d,2017-03-31 02:31:13,Tim van der Meij,"Merge pull request #8205 from Snuffleupagus/built-in-CMap-errors

Improve the error handling when loading of built-in CMap files fail (PR 8064 follow-up)",True
72eeb1ccb3afaab25d3c581456f9080fae75c0ff,2017-03-30 21:58:11,Brendan Dahl,"Merge pull request #8207 from Snuffleupagus/cache-getPageDict

Use a simple `RefSetCache` to significantly improve the performance of `Catalog.getPageDict` for certain long documents (PR 8105 follow-up)",True
437104969de1442992ff4aa0de23bcb2ec0c0065,2017-03-30 02:08:29,Jonas Jenwald,"Improve the error handling when loading of built-in CMap files fail (PR 8064 follow-up)

I happened to notice that the error handling wasn't that great, which I missed previously since there were no unit-tests for failure to load built-in CMap files.
Hence this patch, which improves the error handling *and* adds tests.",False
d98a6319ec5ca39434b73535332574c3f209deef,2017-03-29 20:11:38,Jonas Jenwald,"Refactor removing of the `zoomLayer` into a helper method, and use that in `PDFPageView.reset` to ensure that the entire `zoomLayer` is actually removed (issue 8209)",False
61ee0de29fc3cd6f142be4b554ca6ab30a77bea7,2017-03-29 01:09:55,Jonas Jenwald,"Use a simple `RefSetCache` to significantly improve the performance of `Catalog.getPageDict` for certain long documents (PR 8105 follow-up)

I found that PR 8105 unfortunately causes a *very serious* performance regression in long PDF documents where the `Pages` tree only has one level; my apologies for this!

Obviously we cannot revert that PR, since that would cause more issues than it solves. Hence it seems to me that the only viable solution here, is to add a simple `RefSetCache` to reduce the amount of redundant lookups.
Previously in PR 8105 caching was thought to be unnecessary, but as it turns out I don't think that we really have a choice in the matter any more.",False
07f7c97b2b10bc56ebf2d3bbfa45802ed5257f2d,2017-03-28 01:55:00,Tim van der Meij,"Merge pull request #8202 from Snuffleupagus/eslint-basic-es6-rules

Add a couple of basic ES6 rules to the ESLint config",True
892fd84eb875e4df0d09a94fbaed077722b2e0bd,2017-03-27 23:33:20,Jonas Jenwald,"Add a couple of basic ES6 rules to the ESLint config

See http://eslint.org/docs/rules/#ecmascript-6.

To try and enforce consistent rules and to help avoid some possible errors in ES6 code from the start, this patch adds a few basic ESLint rules.

Note that a two of the rules, `no-shadow` and `object-shorthand`, are currently disabled. While it'd certainly be nice to enable both of them, it's currently impossible since that would result in close to one thousand lint errors.",False
ede4d3c7c50ef720e59106de7fa0b32f20f6f085,2017-03-27 20:50:41,Jonas Jenwald,"Merge pull request #8190 from Snuffleupagus/issue-8182

Try harder to find the next valid JPEG marker when decoding Scan data (issue 8182, issue 8189)",True
62eee8c7826302b105c4699562004e1797cbae36,2017-03-27 19:25:21,Jonas Jenwald,"Try harder to find the next valid JPEG marker when decoding Scan data (issue 8182, issue 8189)

Tentatively fixes 8182 and fixes 8189.",False
cd5acf501e9899f386bb7efc9feded7b2c6e763b,2017-03-27 18:18:43,Yury Delendik,"Merge pull request #8195 from yurydelendik/babel

Enable babel on sources",True
25873e92f0a3121e5430a4b439c8e56bf6d27097,2017-03-27 17:55:09,Yury Delendik,Enable babel translation to enable ES module support.,False
0423bb69e92173f3018adc81fb9b59bee071c987,2017-03-27 00:04:49,Tim van der Meij,"Merge pull request #8198 from timvandermeij/pdf-to-png

Example for converting PDF to PNG using the Node canvas library",True
f885e98d20e60d96bbad3282335b2a3831ff4eca,2017-03-26 23:54:00,Mukul Mishra,Example for converting PDF to PNG using the Node canvas library,False
b6bf1a3eb86be38dbd200555a8963acc2873f8a2,2017-03-26 23:18:23,Tim van der Meij,"Merge pull request #8196 from Snuffleupagus/evaluator-rm-redundant-xref

Remove unnecessary `xref` parameters from various method signatures in `PartialEvaluator`, since `this.xref` is already available in the relevant scope",True
e229c21ce194b05ec12b2bbb51c3a88c90bad632,2017-03-26 17:42:53,Jonas Jenwald,"Remove unnecessary `xref` parameters from various method signatures in `PartialEvaluator`, since `this.xref` is already available in the relevant scope

For reasons I don't pretend to understand, we're passing around `xref` arguments to a bunch of methods despite `this.xref` being available in `PartialEvaluator`.

This patch is a small first small step towards cleaning up the, often unwieldy, signatures of methods in `PartialEvaluator`.",False
e40fd63bd39469b7780d9b96e433f6d016ef0e01,2017-03-26 17:23:13,Jonas Jenwald,"In `src/core/evaluator.js`, convert a couple of `if (!someVariable) { error(...); }` instances to `assert(someVariable);` instead

Rather than, in a number of places, basically duplicating the logic of `assert` we can simply utilize the function directly instead.",False
b7ba44b53081dbf017287433f273f91c8c87a9b9,2017-03-26 03:34:03,Yury Delendik,"Merge pull request #8194 from Snuffleupagus/getTextContent-use-proper-handler

Use a proper `MessageHandler` for `PartialEvaluator.getTextContent` to avoid errors for fonts relying on built-in CMap files (PR 8064 follow-up)",True
5c0c122a7da425f84b675ed665dc14bd9b7d166e,2017-03-25 22:14:48,Jonas Jenwald,"Ensure that the `XMLHttpRequest` is `open`ed before attempting to set the `responseType` in the `DOMCMapReaderFactory`, since IE fails otherwise (issue 8193)

I really cannot understand why this change is necessary, since modern browsers such as Firefox and Chrome work just fine with the old code.
Hence this is patch is yet another ""hack"" that's needed just because IE apparently cannot just work like you'd expect.

For consistency, the Node factory used in the CMap unit-tests is changed as well.

Fixes 8193.",False
3705e5e45986d66c5bb644f22b17de8e341839c9,2017-03-24 22:09:33,Jonas Jenwald,"Use a proper `MessageHandler` for `PartialEvaluator.getTextContent` to avoid errors for fonts relying on built-in CMap files (PR 8064 follow-up)

*My apologies for inadvertently breaking this in PR 8064; apparently we don't have any tests that cover this use-case :(*

Without this patch `getTextContent` will fail if called before `getOperatorList`, since loading of fonts during text-extraction may require fetching of built-in CMap files.

*Please note:* The `text` test added here, which uses an already existing PDF file, fails without this patch.",False
68f2bf3bec877b1ffcfd6c372442cd6d169c38c9,2017-03-24 04:57:38,Yury Delendik,Update worker-loader dependency,False
02370f952a9af8a61ae6292a6ad154f078c0dc25,2017-03-22 22:51:21,Jonas Jenwald,"Merge pull request #8184 from Rob--W/rethrow-missing-data-if-needed

Rethrow MissingDataException when needed",True
49af56f73069d50fb5160cefdb4bf1f38f737cb9,2017-03-22 19:25:59,Rob Wu,"Rethrow MissingDataException when needed

In core/document.js: `PDFDocument.prototype.parse` accesses a dictionary
property, which could throw if the underlying data is not yet available.

In core/obj.js: `get Catalog.prototype.metadata` calls
`stream.getBytes`, which can throw MissingDataException too when the
stream is a ChunkedStream.",False
086021b21e218a62bf5d41c5cf186bd618a427eb,2017-03-22 19:16:08,Rob Wu,"Merge pull request #8183 from Snuffleupagus/documentInfo-MissingDataException

Ensure that `PDFDocument.documentInfo` doesn't fail during document load, when the entire XRef table hasn't been fetched yet (issue 8180)",True
8527d27eae067db80cbd560857a54d47308e102e,2017-03-22 18:44:38,Jonas Jenwald,"Ensure that `PDFDocument.documentInfo` doesn't fail during document load, when the entire XRef table hasn't been fetched yet (issue 8180)

Similar to other `try-catch` statements in `/core` code, we must re-throw `MissingDataException` to prevent issues with missing data during document loading.
Note that I'm not sure if/how we can test this, which is why the patch doesn't include any test(s).

Fixes 8180.",False
e2e13df4a5af1707768f64591f387ba34a920007,2017-03-21 02:47:28,Jonas Jenwald,"Merge pull request #8164 from Snuffleupagus/issue-7828

Don't read past the EOI marker for JPEG images with non-default restart interval (issue 7828)",True
cfc45e556c90bb2b1339dd0714a76bad5fb3f84c,2017-03-21 01:04:22,Jonas Jenwald,"Merge pull request #8170 from Snuffleupagus/issue-8169

Try to recover when encountering JPEG markers with too short marker lengths (issue 8169)",True
d6d0f778aaa92667aa94671cb69b5171823d7a6b,2017-03-20 21:46:33,Jonas Jenwald,"Don't read past the EOI marker for JPEG images with non-default restart interval (issue 7828)

*After browsing through (a version of) the JPEG specification, see https://www.w3.org/Graphics/JPEG/itu-t81.pdf, I hope that this patch makes sense.*

Note that while issue 7828 became a problem after PR 7661, it isn't really a regression from than PR. The explanation is rather that we're now relying on `core/jpg.js` instead of the Native Image decoder in more situations than before, which thus exposed an *existing* issue in our JPEG decoder.
Another factor also seems to be that in many JPEG images, the DRI (Define Restart Interval) marker isn't present, in which case this bug won't manifest either.

According to https://www.w3.org/Graphics/JPEG/itu-t81.pdf#page=89 (at the bottom of the page):
""NOTE – The final restart interval may be smaller than the size specified by the DRI marker segment, as it includes only the number of MCUs remaining in the scan.""
Furthermore, according to https://www.w3.org/Graphics/JPEG/itu-t81.pdf#page=39 (in the middle of the page):
""[...] If restart is enabled and the restart interval is defined to be Ri, each entropy-coded segment except the last one shall contain Ri MCUs. The last one shall contain whatever number of MCUs completes the scan.""

Based on the above, it thus seem to me that we should simply ensure that we're not attempting to continue to parse Scan data once we've found all MCUs (Minimum Coded Unit) of the image.

Fixes 7828.",False
be1a6f294fa01016282a76d2ad8530627e434342,2017-03-20 21:35:51,Jonas Jenwald,"Try to recover when encountering JPEG markers with too short marker lengths (issue 8169)

The issue with the JPEG image in question, is that the COM (Comment) marker has an incorrect length entry.

Fixes 8169.",False
b2ed788ea32dca4263e8e09362f93acc69663c53,2017-03-20 20:08:07,Yury Delendik,"Merge pull request #8172 from Snuffleupagus/bug-1345294

Upstream the changes from bug 1345294 - nsIPrefBranch should have methods to get/set unicode strings",True
ebae24cacc63ab5720c6eba9118dc2792d0764b3,2017-03-20 12:06:36,Jonas Jenwald,"Upstream the changes from bug 1345294 - nsIPrefBranch should have methods to get/set unicode strings

Note that in order to not break compatibility for the Firefox addon, the preprocessor is used.

Re: [bug 1345294](https://bugzilla.mozilla.org/show_bug.cgi?id=1345294) and also [this commit](https://hg.mozilla.org/mozilla-central/rev/5a8192a650e9).",False
3ff872b7968c299f1c4743193056b4eabfe29489,2017-03-20 04:19:47,Tim van der Meij,"Merge pull request #8174 from Snuffleupagus/eslint-yoda-follow-up

Adjust the `yoda` ESLint rule to apply to inequalities as well",True
da326a3137fdadb255962539e1aac03f66d4cb73,2017-03-19 18:16:11,Jonas Jenwald,Update l10n files,False
a7c19d9cbb3e682821ce7430c62089a7cc90e6f0,2017-03-19 17:57:14,Jonas Jenwald,"Adjust the `yoda` ESLint rule to apply to inequalities as well

I happened to notice that some inequalities had the wrong order, and was surprised since I thought that the `yoda` rule should have caught that.
However, reading http://eslint.org/docs/rules/yoda#options a bit more closely than previously, it's quite obvious that the `onlyEquality` option does *exactly* what its name suggests. Hence I think that it makes sense to adjust the options such that only ranges are allowed instead.",False
f0c45f0336aa90bbf8f636586896fb5767a63e71,2017-03-17 03:59:44,Tim van der Meij,"Merge pull request #8168 from Snuffleupagus/issue-8117

Normalize the `BBox` entry in Tiling Pattern dictionaries (issue 8117)",True
098a56270dd595b376964e8652ae20c0076117c7,2017-03-17 02:13:11,Jonas Jenwald,"Normalize the `BBox` entry in Tiling Pattern dictionaries (issue 8117)

According to the PDF specification, see http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#G7.3982967, the `BBox` entry should have the form `[left, bottom, right, top]`.
Since some PDF generators apparently violates the specification, we normalize the `BBox` to ensure that the pattern is (correctly) rendered.

Fixes 8117.",False
e6db75b2ef5aeabf6f7157f2dbd4b226f9649e57,2017-03-13 23:28:26,Jonas Jenwald,"Use the `DOMCanvasFactory` in the API unit-tests

There's still some work necessary if we want to be able to run (even a subset of) the API unit-tests on Travis.
However, this patch could be considered a small first step, since the relevant unit-tests will now rely on a `CanvasFactory` rather than using `document.createElement('canvas')` directly.",False
d37d271afa36a079b11ec245825082f4281910e8,2017-03-13 23:28:21,Jonas Jenwald,"[api-minor] Reject the `RenderTask` with an actual `Error`, instead of just a `string`, when rendering is cancelled

This patch gets rid of the only case in the code-base where we're throwing a plain `string`, rather than an `Error`, which besides better/more consistent error handling also allows us to enable the [`no-throw-literal`](http://eslint.org/docs/rules/no-throw-literal) ESLint rule.",False
6d672c4ba64720ffe8636a9b2975bd1058faa1c5,2017-03-13 23:13:43,Jonas Jenwald,"[api-minor] Add a `pdfjsNext` parameter, and `PDFJS_NEXT` build flag, to allow backwards incompatible API changes",False
2b17188998036df02f6413795714f89a552d31f5,2017-03-13 21:17:37,Yury Delendik,"Merge pull request #8154 from mysterlune/pdfjslib_req_vs_window

Change to conditions that `pdfjsLib`",True
14b91a479ea90aae44745151887405044c64140e,2017-03-12 20:45:09,Tim van der Meij,"Merge pull request #8156 from Snuffleupagus/findbar-missing-titles

Add (and adjust) a couple of findbar `title` attributes, in `viewer.html`, that doesn't agree with the `l10n/en-US/viewer.properties` file",True
fa341169a22aaaee89b2be4417506569ef420794,2017-03-12 14:29:44,Jonas Jenwald,"Add (and adjust) a couple of findbar `title` attributes, in `viewer.html`, that doesn't agree with the `l10n/en-US/viewer.properties` file

The point of this patch is to fix a couple of inconsistencies in `viewer.html`, compared to the locale files, such that the viewer would work correctly even without the `l10n/` files present.
*Note:* Since this isn't changing any of the locale files, we should *not* need to update any of the string names.

Looking through the history of the findbar code, it seems that the `findPrevious`/`findNext` buttons have never had a `title` set (note PR 2168, which was the initial findbar implementation).
Furthermore, the `placeholder` of the `findInput` didn't agree 100% with locale file either, so this is also adjusted.",False
3aeef8402bb36dd3d1d5cddc79d85d4b65aaf832,2017-03-12 08:58:45,River Lune,"Changing the order of logical conditions to prefer 'window' in the case where webpack is not used.

Updating brace style.

Updating to throw new error vs. throwing a string.",False
224613a51179392b372cfd461951ffdb9614ca8b,2017-03-11 14:25:00,Jonas Jenwald,"Merge pull request #8135 from jasonjensen/issue8097

Handle cff fonts with erroneous stackSize (issue 8097)",True
d471e3568db8ef497a3732deb17ee6ec88ba6c2e,2017-03-11 02:57:57,Tim van der Meij,"Merge pull request #8151 from Snuffleupagus/rm-toolbarButton-group-CSS

Remove unnecessary `.toolbarButton.group` CSS class",True
8f96909e97ee890289d0ab94a7002c52603f4b3b,2017-03-10 18:19:24,Jonas Jenwald,"Remove unnecessary `.toolbarButton.group` CSS class

I noticed that we have a `.toolbarButton.group` CSS class, which is currently applied to some buttons in the viewer. Since it attempts to adjust the `margin-right` property, I was initially a bit puzzled as to why there wasn't different rules for LTR/RTL locales.

However, checking the viewer with the DevTools inspector, in both LTR and RTL locales, I quickly found that the rule in question is *always* being overridden by other CSS rules.
It thus seem to me that while this rule was probably useful at some point, it has been dead for years and could now be removed.",False
fc5810c97ad4b2a0c247c8a0e77154c2561077ee,2017-03-10 05:10:13,Tim van der Meij,"Merge pull request #8144 from timvandermeij/issue-8143

Widget annotations: do not crash if `Parent` is not a dictionary during field name construction (issue 8143)",True
936d3c0698d98c21189b48d443c814a827d05aaa,2017-03-10 04:21:52,Tim van der Meij,"Widget annotations: do not crash if `Parent` is not a dictionary
during field name construction (issue 8143)",False
6908f1491d74a22041d146be768bbf57d8716b80,2017-03-10 03:33:20,Tim van der Meij,"Merge pull request #8132 from timvandermeij/findbar-responsiveness

Viewer: enable find functionality for small devices",True
b151666c53d3526cca300b5f03b07abab412ee0b,2017-03-09 04:25:13,Jonas Jenwald,"Viewer: consistently wrap find bar elements for small screen sizes

This patch ensures that the find bar is not extended to the window width
when element wrapping occurs on small screens.",False
87a30a7ee145466038faa3215751d7fe476e1ff7,2017-03-09 04:24:28,Tim van der Meij,"Viewer: enable find functionality for small devices

The find functionality is currently not available for small devices
because the find dialog is not responsive. This patch fixes that.

To achieve this goal, the HTML is changed to always show the find
button. To prevent issues because of the addition of an extra button for
small views, the previous/next page buttons are hidden if the view
becomes small. These buttons are not useful anyway because on small
devices navigation is usually done via scrolling. The find functionality
is much more useful to have in this case. Moreover, we wrap the existing
elements into separate `div`s so that the browser can position the
elements itself when the view becomes smaller and logically connected
elements stay together when this happens.

In the CSS, extra rules for the find bar have been added to ensure that
the dialog's doorhanger is always below the find button. All findbar
`div`s are forced to be 32 pixels high to prevent the find message text
being aligned under the checkboxes. Finally, the find message is only
visible when there is actually text to display. This prevents wrapping
issues because, by default, the label has padding and margin even if
there is no text.",False
c79e5b3f173f001a85b95edae96e0fb3d34cafd3,2017-03-09 04:24:14,Jonas Jenwald,"Viewer: replace find label with placeholder/tooltip

This is common in the rest of the UI and helps us prevent responsiveness
issues for different length strings in different locales.",False
a544a3b4a4c5577bdbef2109082cfcdebf94460c,2017-03-09 02:59:53,Tim van der Meij,"Merge pull request #8138 from Snuffleupagus/bug-1345253

Get rid of `element.removeChild(element.firstChild)` usage (bug 1345253)",True
468ed1b9a1b13d22601a316236fa23c726c82865,2017-03-08 22:11:11,Jonas Jenwald,"Ensure that the `outlineWithDeepNesting` CSS class is removed when resetting `PDFOutlineViewer`, to prevent incorrect alignment if a new document is opened",False
e07cb8638e8a441d06c8d21eba518c25ca504bbf,2017-03-08 21:59:50,Jonas Jenwald,"Get rid of `element.removeChild(element.firstChild)` usage (bug 1345253)

Instead of just upstreaming the changes from [bug 1345253](https://bugzilla.mozilla.org/show_bug.cgi?id=1345253) as-is, it seemed better to simply get rid of the loops altogether and use the same approach as in `PDFViewer`/`PDFThumbnailViewer`.",False
d230784ac3f23fc78e05581ca1802b794b1fa910,2017-03-07 05:58:46,Jason O. Jensen,Handle cff fonts with erroneous stackSize,False
5eb090f288cf56f3ab9bce8bd133faa0637368c7,2017-03-05 02:13:25,Tim van der Meij,"ES6 modules: remove UMD header validation

This patch is another step towards enabling Babel. Since we're moving
towards ES6 modules, we will not be using UMD headers anymore, so we can
remove the validation.",False
754c4bd0ab15c8457420cd9768b652d77581acf3,2017-03-05 01:57:28,Tim van der Meij,"Merge pull request #8130 from Snuffleupagus/gulp-lib-rm-web-compatibility

Don't include `web/compatibility.js` in the output for `gulp lib` (PR 8120 follow-up)",True
af44ef15f7a5935ae5d339b60ce8e920879ae68a,2017-03-04 23:04:28,Jonas Jenwald,"Don't include `web/compatibility.js` in the output for `gulp lib` (PR 8120 follow-up)

First of all, `compatibility.js` is already available in `lib/shared/compatibility.js`. Second of all, as can be seen in https://github.com/mozilla/pdfjs-dist/commit/9142301f3572cd386092cb4f4d69e186142ae23e#diff-9432ebaa58e10ab02874fcb86f689caa, the `lib/web/compatibility.js` file cannot work since the `require` statement isn't compatible with the output of `gulp lib`.",False
4e3e97be8eafede8637eff749282af609661b88f,2017-03-04 20:48:24,Tim van der Meij,"Merge pull request #8129 from Snuffleupagus/getInheritedPageProp-undefined

Return `undefined` instead of `Dict.empty` from `Page.getInheritedPageProp` for non-existent properties to prevent possible future bugs",True
c29056148865a16376c2f9f20d72efe1bfa2ed75,2017-03-04 20:18:36,Yury Delendik,"Merge pull request #8120 from yurydelendik/lib

Publishes processed sources into pdfjs-dist/lib",True
9bed87f5dcaa4a17ea68a512123ae63a96857efc,2017-03-04 17:38:39,Jonas Jenwald,"Return `undefined` instead of `Dict.empty` from `Page.getInheritedPageProp` for non-existent properties to prevent possible future bugs

*This is something that I noticed while working on PR 8126, which is (more) fallout from PR 6065.*

In general, it's actually *not* correct to return `Dict.empty` as the default value for non-existent properties. Please note that a prior PR, see https://github.com/mozilla/pdf.js/pull/5957#issuecomment-103112698, asked for that behaviour but I don't think that's right.

Obviously for properties that are (or should) be `Dict`s it makes sense, however certain properties can be e.g. Strings or Arrays instead. In the latter case, returning `Dict.empty` is just plain wrong, and it's quite fascinating that this hasn't caused any errors in practice. (The existing validation in the various getters has actually saved us here.)

Also, when looking at this code again, it seemed unnecessary to duplicate the `MAX_LOOP_COUNT` check since we could just return immediately instead.",False
1eb96d7ca92e1dbfd96db30749b8dc017278bbfb,2017-03-04 04:31:50,Tim van der Meij,"Merge pull request #8128 from timvandermeij/csp-headers

Network: use the current location to prevent errors when using CSP headers",True
39e8ad24f7177bc59ca3a31235e7de47872ad387,2017-03-04 04:07:58,Yury Delendik,Creates 'lib' for the 'dist' build target.,False
e7cc07cc11fff3906004e1db8842004c1864f71b,2017-03-04 04:03:35,Yury Delendik,Moves checkProblematicCharRanges to font_spec.js,False
a05115d2ec27866ccf16cc4c550f225f054037fd,2017-03-04 03:48:51,Job van der Weiden,"Network: use the current location to prevent errors when using CSP headers

When using content security headers to restrict connections to the same origin,
you may not make connections to `example.com`. This feature detection also
works with a request to the current location.",False
24e5b6ee6cde71cfd0377982c1ef2c7a478e9f9e,2017-03-04 02:31:59,Jonas Jenwald,"Merge pull request #8126 from Snuffleupagus/issue-8125

Ensure that we don't ignore `0` values in `Page.getInheritedPageProp` (issue 8125)",True
4a0ff5dbf76a6fa6f00606f91dc11b813e5454dc,2017-03-03 16:57:40,Jonas Jenwald,"Ensure that we don't ignore `0` values in `Page.getInheritedPageProp` (issue 8125)

It appears that I accidentally broke this in PR 6065, sorry about that!

The issue in this particular PDF file is that there's `/Rotate` entries on different levels of the `/Pages` tree. We're supposed to use the `/Rotate` entry in the `/Page` dict (which is `0`), but because of an incorrect condition we instead ended up with the one from the `/Pages` dict (which is `180`).

Fixes 8125.",False
9163a6fba4dd9f92fbf79e65ed222b7e845a9fb6,2017-03-02 01:54:34,Jonas Jenwald,"Merge pull request #8112 from Snuffleupagus/JS-action-newWindow

Support the `newWindow` flag in white-listed `app.launchURL` JavaScript actions (PR 7794 follow-up)",True
d0d9843a0e62b8abdfcd293f7e6acce0b9ce7f6d,2017-03-01 08:21:18,Yury Delendik,"Merge pull request #8087 from yurydelendik/pdf_viewer_req

Allows to pull pdf.js from pdf_viewer using require().",True
522281c01dd1fd432b3af1d720aedf7fb19ed5ec,2017-03-01 02:33:47,Tim van der Meij,"Merge pull request #8116 from Snuffleupagus/download_manager-preprocessor

Get rid of a couple `eslint-disable` statements in `web/download_manager.js` by instead relying on the preprocessor dead-code removal added in PR 7942",True
b75d53a7fac6859139f8da75f827826bc87ca386,2017-03-01 02:22:00,Tim van der Meij,"Merge pull request #8115 from Snuffleupagus/CONTRIBUTING-rm-mailing-list

[CONTRIBUTING.md] Remove any mention of the mailing list, and the weekly meetings",True
37d596e00d648f91db7a6afda0622533a621fa67,2017-02-28 17:11:43,Jonas Jenwald,Get rid of a couple `eslint-disable` statements in `web/download_manager.js` by instead relying on the preprocessor dead-code removal added in PR 7942,False
b0fbfc85f026694b3df66f6405e0dfc65518f391,2017-02-28 16:42:57,Jonas Jenwald,"[CONTRIBUTING.md] Remove any mention of the mailing list, and the weekly meetings

Given that the mailing list has now been closed, see [bug 1340296](https://bugzilla.mozilla.org/show_bug.cgi?id=1340296), and that there's no weekly meetings any more, we probably shouldn't mention either of those in CONTRIBUTING.md.
Instead, let's just suggest the IRC channel as a means of communication here.",False
25f772a255d3bb18bf06be301b9f88e8a6814314,2017-02-28 04:01:41,Tim van der Meij,"Merge pull request #8050 from yurydelendik/systemjs

Replaces RequireJS to SystemJS.",True
4e201d3787101dd7b2fc52754f4788c2e6af351d,2017-02-28 03:20:57,Tim van der Meij,"Merge pull request #8072 from timvandermeij/annotation-append-operator-list

Annotations: move operator list addition logic to `src/core/document.js`",True
0739f90707657cc5ef77d57f3c088c1c9b10c936,2017-02-28 02:47:49,Tim van der Meij,"Annotations: move operator list addition logic to `src/core/document.js`

Ideally, the `Annotation` class should not have anything to do with the
page's operator list. How annotations are added to the page's operator
list is logic that belongs in `src/core/document.js` instead where the
operator list is constructed.

Moreover, some comments have been added to clarify the intent of the
code.",False
9db4240b8594dede930f814b5eab861bb2b658db,2017-02-28 02:44:25,Tim van der Meij,"Merge pull request #8110 from timvandermeij/interactive-forms-choice-inherit-options

Interactive forms: make choice widget options inheritable (issue 8094)",True
1da7123f378ff9c4a5e1449599c2242ea1ddc7d1,2017-02-28 02:11:02,Tim van der Meij,"Merge pull request #8106 from Snuffleupagus/ObjStm-Dict-objId

Ensure that `Dict`s found in Object Streams are assigned an `objId` in `XRef.fetch`",True
2a7e5b8a54f424d7c8da5a4073ae93a9b722dbc6,2017-02-27 20:28:28,Jonas Jenwald,"Support the `newWindow` flag in white-listed `app.launchURL` JavaScript actions (PR 7794 follow-up)

A simple follow-up to PR 7794, which let's us add support for the `newWindow` parameter; refer to https://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/js_api_reference.pdf#G5.1507380.

The patch also fixes an embarrassing oversight regarding the placement of the case-insensitive flag, and also allows arbitrary white-space at the beginning of JS actions.",False
5b50e0d414623371449e514a50592c02b3e0c18a,2017-02-27 20:02:39,Yury Delendik,Replaces RequireJS to SystemJS.,False
afc3cd2a81c8b0dbeb547f9f692469f2d31195ab,2017-02-26 18:16:58,Jonas Jenwald,Update l10n files,False
8990de8614680d3a881984f1b287798ce6c9bfff,2017-02-26 04:04:26,Tim van der Meij,"Interactive forms: make choice widget options inheritable (issue 8094)

Even though the PDF specification does not state that `Opt` fields are
inheritable, in practice there are PDF generators that let annotations
inherit the options from a parent.",False
14cc6acb906c8b2e706381a829a9b7e45e814a24,2017-02-25 14:50:19,Jonas Jenwald,"Ensure that `Dict`s found in Object Streams are assigned an `objId` in `XRef.fetch`

This fixes something that I noticed while working with the code in `Catalog.getPageDict` when debugging issue 8088.

Note that while I don't have an example where this patch really matters, given that e.g. `PartialEvaluator.hasBlendModes` depends on the `objId` to avoid cyclic references this patch could potentially help for some PDF files.",False
54e86f441bcfb3110781874791b787615e85211d,2017-02-25 07:50:50,Brendan Dahl,"Merge pull request #8109 from brendandahl/makeref

Add gulp task to generate refs.",True
8be4db1c34cfadd9d7da8c35b2d1a0af1cbe61f9,2017-02-25 06:29:01,Brendan Dahl,Add gulp task to generate refs.,False
752510ffa04dac00d308e842136abbf6a1a1f72b,2017-02-25 04:43:33,Tim van der Meij,"Merge pull request #8107 from yurydelendik/init-via-port

Init PDFWorker via MesssagePort.",True
59392fd5442d819879dc7ec0a0a8ce9a2fbd2f71,2017-02-25 03:17:49,Tim van der Meij,"Merge pull request #8102 from yurydelendik/mv-compatibilty

Move compatibility code to the shared/compatibility.js.",True
912c952df7a643771df7157152833b208be48f75,2017-02-25 02:42:04,Tim van der Meij,"Merge pull request #8105 from Snuffleupagus/issue-8088-2

Always check all Kids nodes, in `Catalog.getPageDict`, to avoid getting stuck in an empty node further down in the Pages tree (issue 8088)",True
51767d63fea50094e88006c1a8809e6131ef6ce5,2017-02-25 01:03:18,Yury Delendik,Init PDFWorker via MesssagePort.,False
1ce295541c052b4540937fe7a7528bbc2baaa67f,2017-02-24 16:39:46,Jonas Jenwald,"Always check all Kids nodes, in `Catalog.getPageDict`, to avoid getting stuck in an empty node further down in the Pages tree (issue 8088)

As discussed on IRC, we need to check all nodes at the *bottom* of the tree to ensure that we find the correct `Page` dict.
Furthermore, this patch also gets rid of the caching present in a previous version, since it's not clear if that really helps.

Note that this patch purposely adds an `eq` test, using a reduced test-case, so that we can be sure that the algorithm actually finds the correct `Page` dict for each `pageIndex`.

Fixes 8088.",False
facefb0c7910fe303325d96c35bdb0dbf91d7b6c,2017-02-24 06:48:44,Yury Delendik,Move compatibility code to the shared/compatibility.js.,False
cada411af454af310cbcbcea4fe9b93aa2c12bd7,2017-02-22 05:01:43,Tim van der Meij,"Merge pull request #8091 from timvandermeij/gulp-baseline

Gulp: migrate `baseline` target from `make.js`",True
0f4e6fdb9d30712aee03dd0a003f9bb04b67fde4,2017-02-22 04:20:57,Tim van der Meij,Gulp: migrate `baseline` target from `make.js`,False
72a0916101b1a7f875ec3cc5a50bec13a8b0b70e,2017-02-21 03:50:03,Tim van der Meij,"Merge pull request #8081 from danielj41/ios-chrome--fix-broken-download-button

iOS Chrome: Fix broken download button",True
4fc64ceb76162d01d9ec38a869a7a96f9b13a4f2,2017-02-21 01:00:53,Daniel Johnson,"iOS Chrome: Fix broken download button

The download button in pdf.js doesn't work in iOS Chrome.

  - It appears to be an issue with URLs from URL.createObjectURL.
    The URL is correct, but iOS Chrome won't even load the URL
    when `a.click()` is called in `download_manager.js`. Even
    if you manually visit the URL, you get a blank page.

  - Fix this by detecting iOS Chrome and disabling createObjectURL.

The `download_manager.js` `download` method wasn't checking
`PDFJS.disableCreateObjectURL`, so check it there, too.

  - Move the navigator.msSaveBlob check earlier, so that
    this doesn't change IE10 / IE11 behavior.

  - Remove the !URL check since pdf.js has a URL polyfill
    now.",False
bc288141be1ee4f92786ee64cf27dc85b6c7a229,2017-02-20 20:19:55,Yury Delendik,Allows to pull pdf.js from pdf_viewer using require().,False
cf73f4bc2ddd13f73f4116fb60dc568a0d90dcae,2017-02-19 02:22:29,Tim van der Meij,"Merge pull request #8024 from Rob--W/issue-6643-pdf-attachment-in-pdfjs

Open PDF attachments in the viewer instead of an unconditional download",True
f99e4e46bc2bb54b89b8e6a1d40e33fd0ce4414d,2017-02-19 01:57:15,Tim van der Meij,"Merge pull request #8080 from Snuffleupagus/cmap-unit-test-travis

Enable running the `cmap` unit-tests on Travis by utilizing a `NodeCMapReaderFactory`",True
9082f08e37f93286ea5222987edc0456bb11f22a,2017-02-18 03:45:36,Jonas Jenwald,Enable running the `cmap` unit-tests on Travis by utilizing a `NodeCMapReaderFactory`,False
cfaa621a05cb5360f6834cf96a16c44c1a9aed5b,2017-02-18 03:00:31,Yury Delendik,"Merge pull request #8064 from Snuffleupagus/fetchBuiltInCMap

[api-minor] Refactor fetching of built-in CMaps to utilize a factory on the `display` side instead, to allow users of the API to provide a custom CMap loading factory (e.g. for use with Node.js)",True
425ad30912ff05e50bf633604c65e53de0c8e459,2017-02-17 04:43:46,Brendan Dahl,"Merge pull request #8071 from Snuffleupagus/bug-1337429

Always choose a (3, 1) cmap table for TrueType fonts that have an encoding specified, regardless of the Symbolic font flag (bug 1337429)",True
63c472cec8817de1751a6b1486bda2682f79b082,2017-02-17 03:06:12,Brendan Dahl,"Remove mailing list information.

The mailing list has become a burden to maintain with all the spam it gets. We have IRC and github for discussion.",False
111419a64ab53786085f8a85ef256f5635bb19db,2017-02-16 15:25:39,Jonas Jenwald,Cache built-in binary CMap files in the worker (issue 4794),False
769c1450b7b339fd8a0f87783422c8059f471f09,2017-02-16 15:25:35,Jonas Jenwald,"[api-minor] Refactor fetching of built-in CMaps to utilize a factory on the `display` side instead, to allow users of the API to provide a custom CMap loading factory (e.g. for use with Node.js)

Currently the built-in CMap files are loaded in `src/core/cmap.js` using `XMLHttpRequest` directly. For some environments that might be a problem, hence this patch refactors that to instead use a factory to load built-in CMaps on the main thread and message the data to the worker thread.

This is inspired by other recent work, e.g. the addition of the `CanvasFactory`, and to a large extent on the IRC discussion starting at http://logs.glob.uno/?c=mozilla%23pdfjs&s=12+Oct+2016&e=12+Oct+2016#c53010.",False
8aad33e8a37f4a222b5d90f06c470ab33572a6a6,2017-02-16 03:57:40,Tim van der Meij,"Merge pull request #8065 from timvandermeij/annotation-appearances

Annotations: refactor setting the normal appearance stream",True
26fc79d51d991be6b441f5da704c229a0cae467a,2017-02-16 03:12:17,Tim van der Meij,"Annotations: refactor setting the normal appearance stream

Previously, we had a function called `getDefaultAppearance`. This name,
however, is misleading as the method gets the normal appearance (in the
`N` entry) and not the default appearance (in the `DA` entry). Moreover,
it was not entirely clear how it works just from reading the code. It
primarily lacks comments and explicit error case handling.

This patch improves the situation by fixing the issues mentioned above
and making this function a proper method of the `Annotation` class, just
like e.g., `setColor` and `setBorderStyle`.",False
ce072022c166a5dccbd2e7870733ca1674e631d7,2017-02-15 22:08:08,Jonas Jenwald,"Always choose a (3, 1) cmap table for TrueType fonts that have an encoding specified, regardless of the Symbolic font flag (bug 1337429)

This patch basically reverts one aspect of TrueType (3, 1) cmap parsing to the state prior to PR 4259. After that PR, a number of regressions occurred in this particular code-path, which necessitated a number of follow-ups such as PRs 5703, 5743, and 6425.
The empirical data suggests, at least to me, that we should always prefer a (3, 1) cmap for TrueType fonts when they have an encoding, regardless of the Symbolic font flag.

Obviously this patch passes all unit/font/reference tests locally, and I made sure that all the PRs mentioned above landed with test-cases included.
However, in my opinion, there's still a very real possibility that this patch could potentially cause new regressions.

Given that the PDF file in bug 1337429 has been broken for almost *three* years before anyone noticed, and considering that the code-path in question has been the source of numerous regressions, I do *not* intend to request uplift of this patch to previous Firefox versions (assuming that it's even accepted).

Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1337429.",False
fde609e810b0a93f6ed560bc9ff3f4bbf5e3fc13,2017-02-15 21:45:18,Jonas Jenwald,"Merge pull request #8070 from yurydelendik/new-node-js-check

New node.js check to protect from webpack.",True
fa0e559fe28e44245505a3cdb836b123faf7f67b,2017-02-15 02:30:52,Yury Delendik,New node.js check to protect from webpack.,False
b509a3f83cf7c8d93f5ed34167f29218078ef1f8,2017-02-14 04:14:53,Yury Delendik,"Merge pull request #8067 from Snuffleupagus/gulp-mozcentral-pdfjschildbootstrap.js

Include the `pdfjschildbootstrap.js` file in the output for `gulp mozcentral` builds (PR 8023 follow-up)",True
2aaeb170374d39bae8726c6ced86cf406ca60874,2017-02-14 03:55:54,Jonas Jenwald,"Include the `pdfjschildbootstrap.js` file in the output for `gulp mozcentral` builds (PR 8023 follow-up)

*Yet another thing that I unfortunately missed during review of PR 8023.*

Note that previously, in `make.js` this file was being preprocessed, however as far as I can tell that wasn't actually necessary. Hence this patch just copies the file to the proper output directory.

Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1338395#c8.",False
41041c15767cdff255f355d976f05bd874b40376,2017-02-12 00:34:18,Yury Delendik,"Merge pull request #8063 from Snuffleupagus/issue-8061

Consume the current character when encountering illegal characters in `Lexer.getObject`, in order to prevent infinite loops during reading of streams (issue 8061)",True
23c62cc321193ad7daeea96f193b267773079226,2017-02-12 00:02:48,Jonas Jenwald,"Consume the current character when encountering illegal characters in `Lexer.getObject`, in order to prevent infinite loops during reading of streams (issue 8061)

*Please note:* The rendering of the PDF file in issue 8061 first regressed in PR 7039, and then PR 7493 exacerbated the problem even further by causing an infinite loop.

In this particular case, when errors were encountered inside of the `Lexer.getObject` method *itself*, we didn't advance the stream position. This thus caused an inifinite loop in `parseCMap`, since the exact same character was then parsed over and over again.

Fixes 8061.",False
da08b801a51831f31faf408b63574505c8448f51,2017-02-11 21:03:46,Tim van der Meij,"Merge pull request #8062 from timvandermeij/readme

Improve the README by removing outdated information",True
fd21ee59a6a2423d0151074095cbe08464c741e6,2017-02-11 20:57:34,Tim van der Meij,Improve the README by removing outdated information,False
7be8bd9f9681e1f2d0774572c9b9da405208ff74,2017-02-11 18:02:04,Jonas Jenwald,"Merge pull request #8060 from a0preetham/font_ascent_fix

Font ascent descent calculation fix",True
af8292058fe0fc4b89d83116772ce89380dfc7e8,2017-02-11 11:55:05,pmysore1,Font ascent descent calculation fix,False
466760efca3e4cf70c1cfc8faf1f005987fa1dbe,2017-02-11 03:47:17,Tim van der Meij,"Merge pull request #8056 from Snuffleupagus/ChildNode.remove

Use `ChildNode.remove` instead of `ChildNode.ParentNode.removeChild` in a couple of places (bug 1334831, issue 8008)",True
1549a46e3de891fb3e23bc03dd3b54adc0f43cac,2017-02-11 01:10:53,Yury Delendik,"Merge pull request #8058 from yurydelendik/fix-webpack-combined

Fixes pdf.combined.js for webpack",True
7d9941d87054ade3fccd25b6bb8b21611480ae7a,2017-02-10 22:54:35,Yury Delendik,Fixes pdf.combined.js for webpack.,False
f8879d984c9e0638da757a19c42061764734dc1b,2017-02-10 21:16:34,Yury Delendik,"Merge pull request #8054 from Snuffleupagus/gulp-mozcentral-locale-dest

Write the l10n files to the correct destination for `gulp mozcentral` builds (PR 8023 follow-up)",True
63f13773e717d2209c1311f929a1b2ffd5396e60,2017-02-10 19:09:50,Jonas Jenwald,"Use `ChildNode.remove` instead of `ChildNode.ParentNode.removeChild` in a couple of places (bug 1334831, issue 8008)

Re: [bug 1334831](https://bugzilla.mozilla.org/show_bug.cgi?id=1334831) and issue 8008.

Note that according to the specification, see https://dom.spec.whatwg.org/#interface-childnode, the `remove` method shouldn't throw.
This is also consistent with e.g. the Firefox implementation, see http://searchfox.org/mozilla-central/rev/d3307f19d5dac31d7d36fc206b00b686de82eee4/dom/base/nsINode.cpp#1852.

Obviously this isn't supported in IE (because that would be too easy), however we can easily polyfill it to avoid having to WONTFIX the bug/issue.",False
ba81b37b438207fa1d5c512d32586a83d0061741,2017-02-10 17:17:50,Rob Wu,"Merge pull request #8053 from Snuffleupagus/DEFAULT_URL-chromecom

[Chromium addon] Prevent errors that break the addon, caused by the `DEFAULT_URL` constant being replaced by a `defaultUrl` viewer configuration parameter (PR 8046 follow-up)",True
991c7c196d345e2ae896a38b300328138b7cde4b,2017-02-10 16:16:14,Jonas Jenwald,"Write the l10n files to the correct destination for `gulp mozcentral` builds (PR 8023 follow-up)

Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1338395#c2.",False
190c8398ba73dd02aab789198ab008cbe27aceda,2017-02-10 15:16:44,Jonas Jenwald,"[Chromium addon] Prevent errors that break the addon, caused by the `DEFAULT_URL` constant being replaced by a `defaultUrl` viewer configuration parameter (PR 8046 follow-up)

I missed this during review, sorry about that!

Fixes 8051.",False
32856f0adbd495325a8704d335534cc159d1bccc,2017-02-10 03:34:54,Yury Delendik,"Merge pull request #8046 from yurydelendik/webpack

Replacing custom bundling with webpack 2",True
573236e3adcdaebe31bb2d24d22ff6760a679f85,2017-02-09 04:27:28,Tim van der Meij,"Merge pull request #8043 from Rob--W/issue6696-auto-rotate-page

Allow automatic print rotation via the enablePrintAutoRotate preference",True
0759066be0f58f56a5115c60ecfa8963d2126d47,2017-02-09 04:18:37,Yury Delendik,Saving old-style JS module name of dist libraries.,False
a048519fa18701db10ba2c9948f1cfcf1f5d3366,2017-02-09 04:05:58,Yury Delendik,Replace copyright headers; changes UMD to CommonJS.,False
eb4c88cd44cd9e2320166a95077d26100818928e,2017-02-09 04:02:15,Yury Delendik,Replacing custom bundling with webpack2.,False
ece44d36e8ff9bc7469e0952e4707858f0427e3f,2017-02-08 17:09:24,Rob Wu,Allow automatic print rotation via enablePrintAutoRotate,False
f6548e463f1a2af0b5dbae065ee7463f8dc2478f,2017-02-08 15:51:34,Rob Wu,"Open PDF attachments in the viewer instead of download

If users want to download, they can quickly click on the Download button
in the newly opened viewer.

The blobUrl logic for Firefox relies on `disableCreateObjectURL` is
never false in Firefox. If the assumption is invalid, then PDF
attachments at the attachment view will not correctly be displayed,
because a data-URL will be generated and `?<filename>` is treated as
part of the data:-URL.",False
35102c025ae154b95a825f671fde3d00ec2f0110,2017-02-08 05:05:48,Tim van der Meij,"Merge pull request #8041 from timvandermeij/radio-button-value

Interactive forms: set the `buttonValue` for radio buttons that do not have a `fieldValue`",True
9f05a5a2119e0a3b6b687d1069dd9404e58b54e2,2017-02-08 04:14:31,Tim van der Meij,Interactive forms: unit test for radio buttons without a field value,False
4e181e59efa5fd80cfd9657074cb3336e4de009e,2017-02-08 04:12:40,vkuryakov,Interactive forms: values for radio buttons (issue #6995),False
775441b7c69100e52578fbe48113e6c114066ada,2017-02-08 04:12:36,Rob Wu,"Refactor: configurable page rotation in print job

Determine the page rotation at the same place as where the page size is
determined. This allows us to implement custom print page rotation logic
in one place, in the future.",False
1a2f3f95ca5d911d5e15831d98f5152d0ec72e1e,2017-02-08 04:00:26,Tim van der Meij,"Merge pull request #8040 from timvandermeij/l10n-update

Update localization files",True
dae71559da0c9b8f263bb79e7a87f7b69c62eab2,2017-02-08 03:44:06,Tim van der Meij,Update localization files,False
d7a113e76664b0693f589b5cd16f7d9c7d7de276,2017-02-08 00:46:39,Yury Delendik,"Merge pull request #8039 from yurydelendik/examples

Moving interactive examples to jsfiddle.net",True
fd4428136b6a2dffb31b88f9b6da724623c5e8c5,2017-02-08 00:41:18,Yury Delendik,Moving interactive examples to jsfiddle.net,False
d7cb46dafc1cfe40f60a411f71dbaeb0c20dc68a,2017-02-07 21:54:29,Jonas Jenwald,"Merge pull request #8038 from yurydelendik/rm-sed

Moves sed processing into the preprocessing tasks and merging tasks.",True
a5ad2b166b007ab992469705de95b0617b71b163,2017-02-07 20:23:33,Yury Delendik,Moves sed processing into the preprocessing tasks and merging tasks.,False
9b0e0954fbda8e9514e222c9398cbdbc98b5da6e,2017-02-07 19:09:12,Yury Delendik,"Merge pull request #8036 from mukulmishra18/node-canvas

[api-minor] Fixes behaviour of DOMCanvasFactory to return {canvas, context}.",True
d3ae5b38ceca12cf07e460c637a5623fe2a7bfcb,2017-02-07 04:07:02,Tim van der Meij,"Merge pull request #8035 from Snuffleupagus/api-disableNativeImageDecoder

[api-minor] Add a `getDocument` parameter that allows disabling of the `NativeImageDecoder` (e.g. for use with Node.js)",True
41d092d04be686cb1c3205db2164d7399d136f26,2017-02-07 03:47:13,Mukul Mishra,"Fixes behaviour of DOMCanvasFactory to return {canvas, context}.",False
9c34d0aa8c94fd89ac90d76c939b41611392317e,2017-02-07 02:51:34,Jonas Jenwald,"[api-minor] Add a `getDocument` parameter that allows disabling of the `NativeImageDecoder` (e.g. for use with Node.js)

Note that I initially tried to add this as a parameter to the `PDFPageProxy.render` method, such that it could be passed to `PartialEvaluator.getOperatorList`.
However, given all the different code-paths that call `getOperatorList` (there's a bunch only in `annotation.js`), this seemed to very quickly become unwieldy and thus difficult to maintain compared to simply using the existing `evaluatorOptions`.",False
ec26a7e565e378554ed791124e720dfa55e2d07c,2017-02-07 02:34:54,Tim van der Meij,"Merge pull request #8028 from Snuffleupagus/tests-prevent-console-errors

Prevent browser console errors during testing",True
3e5c6e4287493fc5d0be15377c301929b89b4737,2017-02-06 22:15:44,Jonas Jenwald,"Merge pull request #8030 from timvandermeij/acroforms-example

Interactive forms: rewrite AcroForms example",True
d842c9c6b040e726e74a25e9dae28eefa340efd8,2017-02-06 19:15:41,Yury Delendik,"Merge pull request #8002 from mukulmishra18/refactor-canvas

[api-minor] Fix #7798: Refactor scratch canvas usage.",True
c67edabcb3a566a97c9610a93aa04284b10aadc7,2017-02-06 05:18:46,Rob Wu,"Set title using logic similar as download name

The download method (and the PDF document properties) detect the
file name using `getPDFFileNameFromURL`. The title ought to also
display the PDF filename if available.",False
228d253f30917381ecca68cb3f49d3086db94384,2017-02-06 05:18:46,Rob Wu,Detect download filename based on full URL,False
63fa26843bdc86481d06820d360e02cb31aa7061,2017-02-06 04:14:32,Tim van der Meij,"Interactive forms: rewrite AcroForms example

This patch lets the AcroForms example make use of the built-in interactive
forms functionality in PDF.js. This makes the example:

- much easier to understand;
- more feature-complete;
- in sync with the core when new functionality is added;
- similar to the other examples in terms of structure.",False
66304f7c9933d6e405f8aafc6a278b8d718d2499,2017-02-06 02:39:18,Tim van der Meij,"Merge pull request #8027 from Snuffleupagus/addon-remove-MOZ_CENTRAL

[Firefox addon] Remove the unused `MOZ_CENTRAL` constant",True
32817633c9c3205996e4adb0ea4bf42f5a21e9ca,2017-02-05 20:19:47,Mukul Mishra,"Fix #7798: Refactor scratch canvas usage.

Fixes extra canvas create calls.
Fixes unnecessary call of `new DOMCanvasFactory`.
Fixes undefined error of DOMCanvasFactory.
Fixes failures in some of the tests.
Fixes expected behaviour.
Remove unused vars.",False
e416032b3845d337ebe4f2819ab44ca044afd159,2017-02-05 17:53:42,Jonas Jenwald,"Prevent browser console errors during testing

The `Driver._cleanup` method is removing all stylesheets between test runs, which causes ""TypeError: styleElement.parentNode is null"" console errors in `FontLoader.clear`.

As can also be seen during various tests, some of the changes I made in PR 7972 unfortunately causes console errors.
It seems that I didn't test this properly, since it *should* have been obvious to me that while tests are triggered using Node.js, the files in question are run within the *browser*.
My apologies for not testing this thoroughly, and for causing unnecessary churn in the code!",False
cae8d97c4c44d820de7dd64bdd8b15af03f191fc,2017-02-05 02:53:01,Tim van der Meij,"Merge pull request #8025 from Snuffleupagus/eslint_brace-style_allowSingleLine_false

Adjust the `brace-style` ESLint rule to disallow single lines (and also enable `no-iterator`)",True
b898a453f09d0e734cab2c6143983948b2a7e5db,2017-02-04 22:21:40,Jonas Jenwald,"[Firefox addon] Remove the unused `MOZ_CENTRAL` constant

The last (and only) usage of `MOZ_CENTRAL` was removed in PR 3036, so it's been unused for almost four years now.
If we need to have different code-paths for `FIREFOX`/`MOZCENTRAL` builds, the preprocessor should (and has) been used instead.",False
bc736fdc7df9096d0e5142231f59efd93cc95b7c,2017-02-04 20:23:08,Jonas Jenwald,"Adjust the `brace-style` ESLint rule to disallow single lines (and also enable `no-iterator`)

See http://eslint.org/docs/rules/brace-style.
Having the opening/closing braces on the same line can often make the code slightly more difficult to read, in particular for `if`/`else if` statements, compared to using new lines.

This patch also, for consistency with `mozilla-central`, enables the [`no-iterator`](http://eslint.org/docs/rules/no-iterator) rule. Note that this rule didn't require a single code change.",False
92e5fb099e54949055c15e14a930db4f5b366cc4,2017-02-04 20:15:18,Jonas Jenwald,"Merge pull request #8023 from yurydelendik/mv-preprocessorbuild

Moves preprocessor stuff to the gulpfile.",True
2049cf01db3c3e89ba6659e70beed8dfe99a178f,2017-02-04 19:49:46,Yury Delendik,Moves preprocessor stuff to the gulpfile.,False
d9f90d595d0eb64875e9d3ed252ae0d0c2aca2bf,2017-02-04 05:50:17,Rob Wu,"[CRX] Recognize blob and data-URLs in the router

When a blob or data-URL is opened with the extension, viewer.html
rewrites the URL. But when the viewer is refreshed (e.g. F5), Chrome
would fail to display the viewer because the extension router was not
set up to recognize such URLs.

Now it is.",False
5fdc908f020c63e129a9a66b76a7a31c69f8321d,2017-02-04 05:26:15,Rob Wu,"Recognize file name in reference fragment in getPDFFileNameFromURL

The regular expression incorrectly marked a group as capturing.
For `http://example.com/#file.pdf`, the expected result is ""file.pdf"",
but instead ""document.pdf"" was returned.",False
6f0cf8c4cb15debe3616de6ddb9e642ff424ff23,2017-02-02 04:20:23,Tim van der Meij,"Merge pull request #7972 from Snuffleupagus/eslint_no-unused-vars

Enable the `no-unused-vars` ESLint rule",True
fe3b64d4ab6b0cbf2fb7b437b6508ea062e04e90,2017-02-02 03:37:40,Tim van der Meij,"Merge pull request #8016 from Snuffleupagus/remove-isStream-property

Remove the unused `isStream` property on various `Stream`s",True
37ecb8e620099e10e02d6608976e7e97bf1f3f16,2017-02-02 03:29:31,Tim van der Meij,"Merge pull request #7959 from Snuffleupagus/PDFSidebar-notifications

Display a notification on the `sidebarToggle` button for PDF documents with outline/attachments",True
f7d99ccc26cd35225102ea764bf3cb49cf702dc4,2017-02-01 16:08:11,Jonas Jenwald,"Remove the unused `isStream` property on various `Stream`s

This property was added all the way back in PR 542, but hasn't actually been relied upon ever since PR 692.
Note that there's a `isStream()` utility function which replaced the property years ago, hence the `isStream` property is now dead code.",False
c1022322757366b0204896085378cb5e199de480,2017-02-01 02:56:16,Jonas Jenwald,"Append the contents of `FileAttachment` annotations to the attachments view of the sidebar, for easier access to the embedded files

Other PDF viewers, e.g. Adobe Reader, seem to append `FileAttachment`s to their attachments views.
One obvious difference in PDF.js is that we cannot append all the annotations on document load, since that would require parsing *every* page. Despite that, it still seems like a good idea to add `FileAttachment`s, since it's thus possible to access all the various types of attachments from a single place.

*Note:* With the previous patch we display a notification when a `FileAttachment` is added to the sidebar, which thus makes appending the contents of these annotations to the sidebar slightly more visible/useful.",False
616e5fadff1be97fcae39214993ddb1346b2439c,2017-01-30 20:09:04,Jonas Jenwald,"Display a notification on the `sidebarToggle` button for PDF documents with outline/attachments

A longstanding issue with the viewer is that you cannot tell if a PDF document includes an outline and/or attachments without actually opening the sidebar.
This patch contains a suggested solution for that, by displaying an hide-on-interaction notification on the `sidebarToggle` button (and the relevant sidebar view buttons). Note that this was inspired by e.g. the update notification that is displayed on the menu button in Firefox.

For an initial implementation, I've tried to do this in such a way that the notification isn't too distracting. Without being an UX expert, I don't think that we'd want something too in-your-face, in order to keep the viewer toolbars reasonable clean. (We probably do *not* want e.g. an entire notification bar in these situations, since that would take up unnecessary screen space and require actions from the user to close.)

However it's certainly possible that the current notification might simply be *too* inconspicuous to be truly helpful to users, but we could probably iterate on that if the feature itself is deemed useful.",False
3f320f0b11a01e6dc19d7a24484eeaf9aab06495,2017-01-30 15:05:29,Jonas Jenwald,"Merge pull request #8006 from timvandermeij/mozFillRule

Remove usage of `mozFillRule`",True
95732279b647adde43d0bb0a3a835ba5b83f86ca,2017-01-30 03:54:44,Tim van der Meij,"Remove usage of `mozFillRule`

The non-standard `mozFillRule` has been removed in Firefox 51 [1, 2].
Instead, a parameter of the standard methods should be used. Note that
this is supported in all major browsers for a long time now, so there
should be no need keeping this Firefox-specific code around.

[1] https://developer.mozilla.org/en-US/Firefox/Releases/51
[2] https://bugzilla.mozilla.org/show_bug.cgi?id=826619",False
52e0f519172df020042a9e4cde5c228f654a7f42,2017-01-30 03:53:17,Jonas Jenwald,"Enable the `no-unused-vars` ESLint rule

Please see http://eslint.org/docs/rules/no-unused-vars; note that this patch purposely uses the same rule options as in `mozilla-central`, such that it fixes part of issue 7957.

It wasn't, in my opinion, entirely straightforward to enable this rule compared to the already existing rules. In many cases a `var descriptiveName = ...` format was used (more or less) to document the code, and I choose to place the old variable name in a trailing comment to not lose that information.

I welcome feedback on these changes, since it wasn't always entirely easy to know what changes made the most sense in every situation.",False
8d684b5b3fa5a738f463bf94de36e4cbee5666b0,2017-01-30 02:46:25,Tim van der Meij,"Merge pull request #8003 from Snuffleupagus/move-EOF-isEOF

Move `EOF`/`isEOF` from core/parser.js to core/primitives.js",True
2b84fb79b402a578c50861a65fff9fa9cc79cc78,2017-01-27 23:41:43,Jonas Jenwald,"Merge pull request #7995 from Snuffleupagus/addon-eslint_consistent-return

[Firefox addon] Enable the `consistent-return` ESLint rule (issue 7957)",True
7e1d92461a6d2e877699d65b50d4fda333035f7a,2017-01-27 23:34:08,Jonas Jenwald,"[Firefox addon] Enable the `consistent-return` ESLint rule (issue 7957)

See http://eslint.org/docs/rules/consistent-return; it appears that I overlooked this rule in PR 7982.

Also adds the http://eslint.org/docs/rules/no-nested-ternary rule, which didn't require any code changes, since that rule is being enforced in mozilla-central.

Re: issue 7957.",False
8823f6f5eb91a65a72123e35f494eda4d8707e50,2017-01-27 22:24:26,Jonas Jenwald,"Merge pull request #7991 from Snuffleupagus/addon-eslint-quotes-double

[Firefox addon] Enforce double quotes, using ESLint, to avoid linting errors in mozilla-central (issue 7957)",True
50c2856097ce49cc7ae38c72d0e9aba50b0c3481,2017-01-27 18:07:48,Jonas Jenwald,"Move `EOF`/`isEOF` from core/parser.js to core/primitives.js

Given the nature of `EOF` and `isEOF`, it seems to me that they really ought to be placed in `core/primitives.js` instead.

In general, it doesn't seem great to have to depend on the entire `core/parser.js` file for such simple primitives/helper functions.
In particular, while `core/ps_parser.js` is completely separate from `core/parser.js` with regards to its function, it still depends on the latter for just *one* primitive.

Note that compared to e.g. PR 7389, this will not reduce the number of dependencies for `core/ps_parser`, however the new dependency IMHO makes more sense.",False
e132fa976e4b792835420e189570390c2708d763,2017-01-27 02:25:22,Yury Delendik,"Merge pull request #8001 from yurydelendik/v1.7.225

Release of 1.7.225",True
ad4960ab091b80f646eedcf0a0100e9df211bd41,2017-01-27 02:24:47,Yury Delendik,Release of 1.7.225,False
17d135fcfc0765c3684d9909a096bda080a3dea0,2017-01-27 02:18:49,Yury Delendik,"Merge pull request #8000 from yurydelendik/version1.7

Version 1.7",True
5fdec9257ad539b8b7a43995784be2643674f49a,2017-01-27 02:17:23,Yury Delendik,Version 1.7,False
e835774d9c5657e87921b7ec1a2b93c734772cd3,2017-01-27 01:54:30,Jonas Jenwald,Update l10n files,False
af42c266e7766697d9a15fbe04d94e676d87ded4,2017-01-27 01:24:09,Jonas Jenwald,"Merge pull request #7987 from yurydelendik/noopener

[api-minor] Adds noopener and nofollow to rel attribute of hyperlinks.",True
a5d5b970afa16745044b41f9e31c96d06aac36e5,2017-01-25 05:44:06,Jonas Jenwald,"[Firefox addon] Enforce double quotes, using ESLint, to avoid linting errors in mozilla-central (issue 7957)

Given that this patch causes a lot of churn in the addon code, I wouldn't really mind if we ultimately decide against doing this and just add a rule exception in mozilla-central instead.[1]

---
[1] Note that I used the ESLint `--fix` option, hence writing this commit message actually took longer time than the creation of the patch :-)",False
e0a92a7f4853adb4145145920f2c85078d1695ff,2017-01-24 21:24:14,Yury Delendik,"Merge pull request #7990 from Snuffleupagus/addon-remove-network.js

[Firefox addon] Stop bundling `src/core/network.js` into the `FIREFOX`/`MOZCENTRAL` builds (PR 7322 follow-up)",True
2170eda9df013119835a21d5194e6d986397f4ac,2017-01-24 02:57:26,Tim van der Meij,"Merge pull request #7971 from davehouse/remove_viewer_page_div_id

remove viewer page div id",True
f000417ce076d392e052adac30bff3426b4e36b9,2017-01-24 02:53:17,Jonas Jenwald,"[Firefox addon] Stop bundling `src/core/network.js` into the `FIREFOX`/`MOZCENTRAL` builds (PR 7322 follow-up)

PR 7322 added the `PdfJsNetwork.jsm` file, instead of the general `src/core/network.js` file for the Firefox addon. However, `make.js` wasn't updated to actually stop including the now obsolete network file.",False
ca74e15a461c64a9dc56fdeff5117e997bcec1b1,2017-01-24 01:58:12,Yury Delendik,"Merge pull request #7988 from Snuffleupagus/eslint-more-rules-2

Enable the `no-empty-pattern`/`no-floating-decimal`/`no-self-compare`/`no-delete-var`/`no-new-object` ESLint rules",True
f77c52291e5d63b98986229f5c4c0909ec98cb5b,2017-01-24 01:00:50,Jonas Jenwald,"Enable the `no-empty-pattern`/`no-floating-decimal`/`no-self-compare`/`no-delete-var`/`no-new-object` ESLint rules

The following rules required no code changes:
http://eslint.org/docs/rules/no-empty-pattern
http://eslint.org/docs/rules/no-floating-decimal
http://eslint.org/docs/rules/no-delete-var
http://eslint.org/docs/rules/no-new-object

There was just one change needed in order to enable:
http://eslint.org/docs/rules/no-self-compare; which I think helps readability a lot, since that comparison makes no sense until you realize that we push `NaN` onto the `stack` in some cases *and* furthermore that `NaN !== NaN`.",False
fc2d8c15e81d3a052f406632f8b72dc5fb65eabf,2017-01-23 22:04:27,Yury Delendik,Adds noopener and nofollow to rel attribute of hyperlinks.,False
fd1affa78a9f4c1142a1cdecc615952737fce918,2017-01-23 21:23:37,Yury Delendik,"Merge pull request #7982 from Snuffleupagus/addon-es6

[Firefox addon] Convert the code to be ES6 friendly, in order to better agree with mozilla-central coding conventions (issue 7957)",True
857e360a4245adb4eabc5c9ba6157ba533ea525c,2017-01-23 21:11:35,Yury Delendik,"Merge pull request #7977 from Snuffleupagus/paintedViewport-regression

Ensure that we use the *correct* `paintedViewport` in `PDFPageView.cssTransform`, to avoid visual glitches on quick rotations (PR 7738 follow-up)",True
a47fc2f8f30998a96581df31dd98ee7d6c057423,2017-01-23 21:07:23,Jonas Jenwald,"Merge pull request #7985 from yurydelendik/ie9-doc-ready

Fixes IE9 document.readyState and input.type=number issues.",True
a9cf2817231aa60b078ca0d60bf908aac36593e5,2017-01-23 20:53:13,Yury Delendik,Fixes IE9 document.readyState and input.type=number issues.,False
52360694b0f28828f9a103d4649724effac2bb98,2017-01-23 20:16:39,Dave House,"Remove ids from viewer page and thumbnail divs

The id, and parsing it for the page number, is replaced by the
data-page-number attribute (added here for thumbnails).",False
9eb9065c7911659bcbbbfd5e7b286e5873571c81,2017-01-23 16:43:53,Jonas Jenwald,"Ensure that we use the *correct* `paintedViewport` in `PDFPageView.cssTransform`, to avoid visual glitches on quick rotations (PR 7738 follow-up)

*This fixes a regression from commit https://github.com/mozilla/pdf.js/pull/7738/commits/c9a0955c9c7ed857c98696732c6edeb6f4901f43, i.e. PR 7738.*

Currently if you quickly rotate a document at least *twice*,[1] such that rendering of a page hasn't finished for the first rotation before the last rotation is triggered, the `cssTransform` method can fail to update the page correctly leading to it looking temporarily distorted.

The reason why things break is that previously we stored the `viewport` on the canvas DOM element, meaning that when it was accessed in `cssTransform` is was guaranteed to point to the `viewport` of the `zoomLayer` canvas.
Generally you want to avoid storing data on DOM elements this way, and during the `PDFPageView` refactoring needed to support SVG rendering, the previous `viewport` was instead stored directly on `PDFPageView`.
However, the problem is first of all that the `paintedViewport` only stores the *last* `viewport` computed, and second of all that there're no guarantees that it actually applies to the current `zoomLayer` canvas.
If a document is rotated slowly enough that rendering finishes *before* the next rotation then this problem doesn't exist, but for sufficiently quick rotations rendering will be cancelled at least once and the `paintedViewport` could thus be bogus.

The solution for the above problems is to ensure that we track the correct `viewport` for each DOM element (canvas or svg),[2] which seemed easist to do with a `WeakMap`.[3]

---
[1] I'm able to reproduce this using the `tracemonkey` file, but please note that for pages with few operations, i.e. that render very quickly, the effect may be hard to spot.

[2] One other possible solution that I briefly considered, was to wait until rendering finished before storing the current `viewport`. However, that would have caused issues with rotating a page before the *first* rendering operation had finished.

[3] This regression took me way longer to both figure out, and fix, than I'd like to admit :-)",False
3ec99f0e12c8da2df927937a8a29c1eca7ad020a,2017-01-23 03:44:58,Jonas Jenwald,"[Firefox addon] Convert the code to be ES6 friendly, in order to better agree with mozilla-central coding conventions (issue 7957)

*Please note: ignoring whitespace changes is most likely necessary for the diff to be readable.*

This patch addresses all the current, in `mozilla-central`, linting failures in the addon. It should thus be possible to change the `.eslintignore` entry for PDF.js in `mozilla-central` from `browser/extensions/pdfjs/**` to `browser/extensions/pdfjs/build/**` and `browser/extensions/pdfjs/web/**` instead.
Note that we cannot, for backwards compatibility reason of the general PDF.js library, at this time make similar changes for files residing in the `build` and `web` directories in `mozilla-central`.

The main changes in this patch are that we now use [classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) instead of our previous ""class-like"" functions, and also use the more compact [object shorthand notation](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Object_initializer#New_notations_in_ECMAScript_2015).
A couple of functions were also converted to [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions), to reduced usages of `bind(this)` and `var self = this`.

One caveat with ES6 classes is that it's not (yet) possible to define private constants/helper functions within them, which is why the `NetworkManagerClosure` was kept to not change the visibility of those constant/functions.

Besides testing in Firefox Nightly 53, this patch has also been tested in Firefox ESR 45 and SeaMonkey 2.46.
However, I'd gladly welcome help with testing the patch more, to ensure that nothing has gone wrong during the refactoring.

Fixes the first bullet point of issue 7957.",False
1948a53ebb06dad88754ab16562320ba406f2f20,2017-01-23 02:28:42,Tim van der Meij,"Merge pull request #7973 from Snuffleupagus/eslint_spaced-comment

Enable the `spaced-comment` ESLint rule",True
17dd2e6b20db7ea1114c9dfd6523873024980ee7,2017-01-23 01:23:26,Tim van der Meij,"Merge pull request #7979 from Snuffleupagus/eslint-more-rules

Enable the `no-unsafe-finally`/`no-octal`/`no-useless-call` ESLint rules",True
54d55e8b7ae8a49be6673a327a7168827bd963d1,2017-01-22 05:19:20,Jonas Jenwald,"Merge pull request #7980 from mukulmishra18/lint-errors

Fix #7978: Fixes ESLint yoda rule for the URL polyfill.",True
4e38200030fe162d36d58bac23bbdd6cd8ce5770,2017-01-21 22:47:28,Mukul Mishra,Fix #7978: Fixes ESLint yoda rule for the URL polyfill.,False
82ea7e6e6e4bc5014c22d7bd778c5bcd521d7bc5,2017-01-21 21:45:57,Jonas Jenwald,"Enable the `no-unsafe-finally`/`no-octal`/`no-useless-call` ESLint rules

http://eslint.org/docs/rules/no-unsafe-finally, there's just one violation which in this case can actually be ignored since there's nothing `return`ed there.
http://eslint.org/docs/rules/no-octal, there're no violations in the code-base.
http://eslint.org/docs/rules/no-useless-call, there's just one violation that needs to be fixed.",False
f8e793f8c2d5de791fea52b234a51e3421e070c6,2017-01-20 03:05:38,Tim van der Meij,"Merge pull request #7974 from Snuffleupagus/eslint_no-lone-blocks

Enable the `no-lone-blocks` ESLint rule",True
31684e6918a847239cb68a9dd77823ca7eaa3cdd,2017-01-20 00:26:23,Jonas Jenwald,"Enable the `no-lone-blocks` ESLint rule

http://eslint.org/docs/rules/no-lone-blocks

Note that we currently have no code that violates this rule in the source files, but it seems that the built files are possibly affected (see issue 7957).",False
4626fc83424abe95389057b8d27bc949593aa478,2017-01-19 21:11:59,Jonas Jenwald,"Enable the `spaced-comment` ESLint rule

Please see http://eslint.org/docs/rules/spaced-comment.

Note that the exceptions added for `line` comments are intended to still allow use of the old preprocessor without linting errors.
Also, I took the opportunity to improve the grammar slightly (w.r.t. capitalization and punctuation) for comments touched in the patch.",False
a917443ae6733e77ec0011097ddfb23fa0e740fc,2017-01-18 02:56:26,Tim van der Meij,"Merge pull request #7965 from Snuffleupagus/bug-1331081

[Bug 1331081] omit addEventListener/removeEventListener's third parameter when it's false",True
70c1a6b120475033c0f34b1866f79e663fa564b2,2017-01-17 22:20:21,Jonas Jenwald,"[Bug 1331081] omit addEventListener/removeEventListener's third parameter when it's false

Upstream changes from https://bugzilla.mozilla.org/show_bug.cgi?id=1331081; this patch also covers one file, `pdf_print_service.js`, that's not present in mozilla-central.

Fixes 7962.",False
c1703e977d59180438aac94e63f8845efa6079f3,2017-01-17 02:48:39,Tim van der Meij,"Merge pull request #7960 from Snuffleupagus/eslint_space-unary-ops

Adjust the `space-unary-ops` ESLint rule to comply with mozilla-central lint rules",True
0dff8f360024783485ee978a690091b382dc1d1f,2017-01-16 21:49:25,Jonas Jenwald,"Adjust the `space-unary-ops` ESLint rule to comply with mozilla-central lint rules

See http://eslint.org/docs/rules/space-unary-ops; a *very* small part of issue 7957.",False
c0a47fddcca573e49db3d1ba0a6a1777e9889224,2017-01-16 14:24:50,Jonas Jenwald,Update l10n files,False
9b111c9157154778a8017d29781689df6b546fc4,2017-01-13 19:36:18,Yury Delendik,"Merge pull request #7956 from Snuffleupagus/bug-1330147

[Bug 1330147] removeObserver calls should not supply a third parameter",True
54a64863e227e815440b5180d2fced7f1ebe5fd1,2017-01-13 16:04:26,Jonas Jenwald,"[Bug 1330147] removeObserver calls should not supply a third parameter

*This is yet another very recent change that we were not notified about.*

Upstream changes from https://bugzilla.mozilla.org/show_bug.cgi?id=1330147, specifically https://hg.mozilla.org/mozilla-central/rev/8e0b7bc5fd71.",False
76b4c8fae14c6b9c88ec0e258bf837827746272f,2017-01-13 07:11:44,Yury Delendik,"Merge pull request #7954 from yurydelendik/bug1329182

[Bug 1329182] remove trailing newURI null parameters",True
1f424e561d5f69505f24cdffe7ed680f89d5b1ec,2017-01-13 07:10:51,Yury Delendik,[Bug 1329182] remove trailing newURI null parameters,False
b8cd14336e78349d8263a89327543e970a663496,2017-01-13 02:42:27,Yury Delendik,"Merge pull request #7913 from Snuffleupagus/addon-minimum-firefox45

[Firefox addon] Change the minimum supported version to Firefox 45, i.e. the current ESR version, and remove no longer necessary fallback code",True
1fda987a4cc4d53067a84cc40874c295d1c5e679,2017-01-13 02:25:57,Tim van der Meij,"Merge pull request #7904 from Snuffleupagus/issue-7901

Further adjust the heuristics used to detect OpenType font files with CFF data, to ensure that all Type0 fonts are handled the same way regardless of font Subtype (issue 7901)",True
c0d70290390a8d004b891929528bdd527c0efd71,2017-01-12 23:57:26,Yury Delendik,"Merge pull request #7951 from Snuffleupagus/FileAttachmentAnnotation-simplified-unittest

Rename `annotation_layer_spec.js` to `annotation_spec.js` to better describe what is actually tested, and simplify the `FileAttachmentAnnotation` unit-test to avoid having to use the entire API in the test",True
e88c9c75dba11b738918757d98e7d90601d4b16b,2017-01-12 23:40:37,Jonas Jenwald,"Simplify the `FileAttachmentAnnotation` unit-test to avoid having to use the entire API in the test

Every other unit-test in `annotation_spec.js` is already only testing the annotation code. Hence it seems unnecessarily convoluted to make use of the API here, when we can (fairly) simply provide the necessary data explicitly as in all the other annotation unit-test.",False
7c3a63bae051256a49cfe96147309e87d6e6dc7c,2017-01-12 23:38:57,Jonas Jenwald,Rename `annotation_layer_spec.js` to `annotation_spec.js` since the unit-tests only cover `src/core/annotation.js` functionality,False
1af35a6d882c15d9cd50daddddb84391f2ea23eb,2017-01-12 22:10:08,Yury Delendik,"Merge pull request #7948 from Skaty/fix-bidi-fraction

Fix inverted calculation of RTL text percentage in bidi",True
857a5da8f12d1cd360ed12ad311b61e55e7203b8,2017-01-12 21:24:06,Syed Abdullah,Fix inverted calculation of RTL text percentage in bidi.,False
00ab0abd4ecf10b4f0a36072e48b7a11c87edb8a,2017-01-11 18:35:21,Jonas Jenwald,"Merge pull request #7945 from yurydelendik/mv-locale-cmaps

Moves locale and cmaps tasks to gulpfile.",True
393740e2ae2585df1c52235bc1751fcb54b25ff2,2017-01-11 00:07:26,Yury Delendik,"Merge pull request #7869 from PedroPachecoInf/master

Fixes issue #6071 - TIFF with 1 bit-depth",True
f1abd834d89ca2cd34a2257a196b8d3cf51f0e3e,2017-01-10 23:20:38,Yury Delendik,Moves locale and cmaps tasks to gulpfile.,False
493853031b4ad6d372c36555819afa7d3ebdbb23,2017-01-10 22:12:43,jazzchipc,"Fixes issue #6071.

Corrects readBlockTiff() case for 1-bit depth and 1 color TIFF images incorporated in the PDF.

Adds reference test for PDF used to fix this issue.",False
e5cea0588115a2063090d00a1243eb6dd71300d3,2017-01-10 21:49:26,Jonas Jenwald,"Merge pull request #7944 from yurydelendik/rm-defpref

Removes Promise usage from preferences.js",True
cf7a9f99c8d3102ff89ad28a80ac3342d6f65e71,2017-01-10 20:28:37,Yury Delendik,"Merge pull request #7943 from Snuffleupagus/fixtures-test-fixes

Various fixes for the `external/builder/test*.js` files",True
930a28d879af0e42f2cabe98c2c74514c900da0f,2017-01-10 20:19:08,Yury Delendik,Better DOMContentLoaded handling.,False
ac2d4abf3979997b1d7039cc238433a24a42206c,2017-01-10 20:03:32,Yury Delendik,Removes web/default_preferences.js file.,False
3aa37ae8bc13cdda4935a60eced808330b3d112b,2017-01-10 19:15:40,Jonas Jenwald,"Add the `external/builder/fixtures/` directory to `.eslintignore`, to avoid having to disable various lint rules locally

This is similar to the already existing exception for `external/builder/fixtures_esprima`.",False
fe9a561d45de33e8db7d1d25a3193f94d88e91f0,2017-01-10 19:15:36,Jonas Jenwald,"Actually increment the `errors` counter on failures in `test-fixtures.js`/`test_fixtures_esprima.js`, so that the test runners won't incorrectly report that the tests passed",False
cf00516f043ba00521e3fc8868d19db5332d2eff,2017-01-10 18:57:05,Jonas Jenwald,"Rename the `external/builder/test*.js` files to make it more obvious what they test

Currently you have to open the files to be certain which tests each one will run, which we can avoid by appending the directory names to the file names of the tests themselves.",False
ca0ebdfa56723c7f715459eb566bf0aba43f988b,2017-01-10 18:01:47,Jonas Jenwald,"Merge pull request #7942 from yurydelendik/rm-deadcode

Fixes preprocessor testing and adds deadcode removal.",True
77b7b84d1ec7da6f7e0531056259ba320cd9291a,2017-01-10 06:43:36,Yury Delendik,Removes rest of 'no-else-return' comments.,False
6265bb60384f839b93840724b67d9b4cef3261fa,2017-01-10 06:35:36,Yury Delendik,Fixes preprocessor testing and adds deadcode removal.,False
f828f07ccdc5f03b229c654cfa21bb5f88ea8768,2017-01-10 04:55:48,Tim van der Meij,"Merge pull request #7941 from Snuffleupagus/Page-idFactory

Replace direct lookup of `uniquePrefix`/`idCounters`, in `Page` instances, with an `idFactory` containing an `createObjId` method instead",True
642d8621ef871cc241ad3b0256faef18d2eb803a,2017-01-10 03:46:25,Jonas Jenwald,"Replace direct lookup of `uniquePrefix`/`idCounters`, in `Page` instances, with an `idFactory` containing an `createObjId` method instead

We're currently making use of `uniquePrefix`/`idCounters` in multiple files, to create unique object id's, and adding a new occurrence of them requires some care to ensure that an object id isn't accidentally reused.
Furthermore, having to pass around multiple parameters as we currently do seem like something you want to avoid.

Instead, this patch adds a factory which means that there's only *one* thing that needs to be passed around. And since it's now only necessary to call a method in order to obtain a unique object id, the details are thus abstracted away at the call-sites which avoids accidental reuse of object id's.

To test that this works as expected a very simple `Page` unit-test is added, and the existing `Annotation layer` tests are also adjusted slightly.",False
e259bc2c16c4c0b23d539aa4dc8952d3a6c86efd,2017-01-10 03:44:17,Tim van der Meij,"Merge pull request #7939 from yurydelendik/unittesttravis

Enables some unit tests on travis.",True
098acb126958e8f0eb18399f1182a945e5164fd2,2017-01-10 03:33:48,Tim van der Meij,"Merge pull request #7935 from Snuffleupagus/eslint_no-else-return

Enable the `no-else-return` ESLint rule",True
c45300e06ccedbbbb387cf52bb357c2d889f2a06,2017-01-10 03:13:45,Yury Delendik,Enables some unit tests on travis.,False
4046d67fde82b8286b5f4dc80b11c3154b0286d5,2017-01-10 00:57:39,Jonas Jenwald,"Enable the `no-else-return` ESLint rule

Using `else` after `return` is not necessary, and can often lead to unnecessarily cluttered code. By using the `no-else-return` rule in ESLint we can avoid this pattern, see http://eslint.org/docs/rules/no-else-return.",False
049d7fa2770be90f51fd46856cdbaf4bc1276af7,2017-01-09 22:57:31,Yury Delendik,"Merge pull request #7934 from porlan1/master

Unit test files as modules",True
d9e1cb79553ad2d459ce599d7dde6bdaf64a6216,2017-01-09 22:10:57,porlan1,unit test files as UMD modules,False
15f75a5585200fcdf1755d9686be8b6afa9a9601,2017-01-07 16:49:42,Jonas Jenwald,"[Firefox addon] Remove the `registerAddonHistogram` fallback code for Firefox versions 36 (and below) from `PdfJsTelemetry-addon.jsm`

Given that the addon doesn't even work in Firefox versions prior to 38, this is just dead code that can now be removed.",False
9434c023aba3fd58f838b3d84188ab5c808b6aa0,2017-01-07 16:49:42,Jonas Jenwald,"[Firefox addon] Change the minimum supported version to Firefox 45, i.e. the current ESR version, and remove no longer necessary fallback code

According to https://wiki.mozilla.org/RapidRelease/Calendar#Past_branch_dates: The *last* ESR version of Firefox 38 was released in April this year, and since June the only available ESR version has been based on Firefox 45.

Now that Seamonkey has *finally* released a new version, i.e. 2.46 which should correspond to Firefox 49, there doesn't seem to be any reason to keep the fallback code around in the addon anymore.",False
aabfb7788ad140c424dd0b7823f35255d13f5225,2017-01-04 15:14:18,Jonas Jenwald,"Merge pull request #7926 from Snuffleupagus/api-onPassword-abort/throw-Promise

[api-minor] Ensure that the `getDocument` Promise is rejected if the `loadingTask` is destroyed, or an `Error` is thrown, inside of the `onPassword` callback (issue 7806)",True
14b85233144767f101d9be17fcb2bf407c1193fd,2017-01-04 00:59:52,Jonas Jenwald,"Refactor the `password` handling so that it's stored in the `PdfManager`s, instead of in the `XRef`

We're already passing in a, currently unused, `PdfManager` instance when initializing the `XRef`. To avoid having to pass a single `password` parameter around, we could thus simply get the `password` through the `PdfManager` instance instead.",False
27513cd23b5d87a440264134ebdacb024f242da8,2017-01-04 00:59:46,Jonas Jenwald,"[api-minor] Ensure that the `getDocument` Promise is rejected if the `loadingTask` is destroyed, or an `Error` is thrown, inside of the `onPassword` callback (issue 7806)

This patch also removes the `UpdatePassword` message, in favour of using the `sendWithPromise` method of `MessageHandler`.
Furthermore, the patch also refactors the `BasePdfManager_updatePassword`/`BasePdfManager_passwordChanged` methods (in pdf_manager.js), and the `pdfManagerReady` function (in worker.js).",False
4e62562a36c8dc34f8ff88f68138cd1f276906e9,2017-01-02 17:56:09,Jonas Jenwald,Update l10n files,False
59afb4b9f02b9318f4f0d8964fdf210b42ad5fcf,2016-12-29 15:22:31,Jonas Jenwald,"Merge pull request #7920 from Snuffleupagus/bug-1157493-followup

Improve the handling of `Encoding` dictionary, with `Differences` array, in `PartialEvaluator_preEvaluateFont`",True
ddea9a6b040a6965b37821fdc24a8485ee927546,2016-12-29 02:02:54,Jonas Jenwald,"Improve the handling of `Encoding` dictionary, with `Differences` array, in `PartialEvaluator_preEvaluateFont`

I recently happened to look at the code I wrote for PR 5964, which fixed [bug 1157493](https://bugzilla.mozilla.org/show_bug.cgi?id=1157493), and I quickly realized that the solution is way too simplistic.
The fact that only using the `length` of a `Differences` array worked seems more like a happy accident for a particular set of font data, but could just as easily be incorrect for other PDF files.

Note that in practice, the case where the `Encoding` entry is a regular `Dict` (and not a `Ref` or `Name`) is very rare, hence I don't think that we really need to worry about having to reparse this data.
Also, the performance of this code-block is quite a bit better by updating the `hash` with the data from the *entire* `Differences` array, instead of at every loop iteration.",False
22f0a04df03b1161b52a2896ea8a1246f10bb7de,2016-12-28 04:21:06,Tim van der Meij,"Merge pull request #7829 from Snuffleupagus/finishPaintTask-promise

Let `finishPaintTask` in pdf_page_view.js return a promise instead, to avoid having to throw in the `paintTask.promise` rejection handler, and don't reject the `PDFPageView_draw` promise when rendering is `cancelled`",True
e963971244b96b9fe555df381016cae8f680dc5d,2016-12-20 21:33:51,Jonas Jenwald,"Further adjust the heuristics used to detect OpenType font files with CFF data, to ensure that all Type0 fonts are handled the same way regardless of font Subtype (issue 7901)

Changing this particular code makes me somewhat nervous about regressions, since PR 5770 necessitated the follow-up PR 6270.
However, the patch passes all tests added in those PRs (and obviously all other tests). Furthermore, I've manually checked all the issues/bugs referenced in PRs 5770 and 6270 without finding any issues.

**Please note:** This patch fixes *only* the font bug, not the SVG conversion, present on pages two and three of the PDF file in issue 7901.",False
3b3a179486e9e9f5979d574ec6ec8c86e2d1a877,2016-12-19 20:48:13,Yury Delendik,"Merge pull request #7879 from rossj/highlight-fix

Make use of textAdvanceScale consistent during combineTextItems. Fix for #7878.",True
33063a486e4eb3762c93eff28d7322989e83f3b3,2016-12-19 15:40:14,Jonas Jenwald,Update l10n files,False
73e0daed6cfa51b80a8a04f225cb8e000c693052,2016-12-18 02:59:48,Jonas Jenwald,"Let `finishPaintTask` in pdf_page_view.js return a promise instead, to avoid having to throw in the `paintTask.promise` rejection handler, and don't reject the `PDFPageView_draw` promise when rendering is `cancelled`

As mentioned on IRC yesterday, we currently throw even when rendering is `cancelled`, which is annoying when the devtools are active. Furthermore, since `cancelled` isn't really an error, rejecting the `PDFPageView_draw` promise seems somewhat strange in that case.",False
017e9b98d10608a2c75ce265c5c1ebf63b46c1c2,2016-12-18 01:52:15,Tim van der Meij,"Merge pull request #7898 from timvandermeij/acroforms-checkbox-radiobutton

Interactive forms: render button widget annotations (checkboxes and radio buttons)",True
a428899b3c92bb276409fa5f7a969d109d89460c,2016-12-18 01:08:48,Tim van der Meij,"Button widget annotations: improve unit tests, simplify code and remove labels

Modern browsers support styling radio buttons and checkboxes with CSS.
This makes the implementation much easier, and the fallback for older
browsers is still decent.",False
77148c7880e8e4f49b3456b597930cecf2d4eae4,2016-12-18 01:04:32,Tim van der Meij,Button widget annotations: implement radio button value fetching according to the specification,False
0c9a06c020fce7965083b7eff0bd1cb2a452c7cc,2016-12-18 01:03:35,Tim van der Meij,"Button widget annotations: implement reference testing

Moreover, ensure that the read-only state is respected and improve CSS
names.",False
ba012c7a683bef9117ca3e5206c8949432d82113,2016-12-18 01:01:30,benweet,Button widget annotations: implement checkboxes and radio buttons,False
d0893b0c484415af3b8b68f8cac9692ac5cd3903,2016-12-18 00:59:43,Tim van der Meij,"Merge pull request #7900 from Snuffleupagus/choiceWidget-Opt-indirect-objects

Ensure that we handle indirect objects in all types of `Opt` entries in `ChoiceWidget` annotation dictionaries",True
bd91f3451377929df37fccebe5c45241ce2065e4,2016-12-17 18:14:20,Jonas Jenwald,"Ensure that we handle indirect objects in all types of `Opt` entries in `ChoiceWidget` annotation dictionaries

I haven't got an example where the current code breaks, but given all the previous cases we've seen where PDF generators use indirect objects in Arrays it makes sense to fix this pro-actively.
I've modified the relevant unit-tests slightly, and they would *not* pass without the code changes in this patch.

*Note:* `Dict_getArray` only dereferences Array elements on the ""top-level"", to avoid recursion issues. Furthermore if you have to loop through the Array at the call-site anyway, then using `Dict_get` in combination with `XRef_fetchIfRef` is a tiny bit more efficient.",False
a719b71e5957ee513ebf43a4ff703926c629b553,2016-12-17 03:10:41,Tim van der Meij,"Merge pull request #7897 from Snuffleupagus/eslint-switch

Switch to using ESLint, instead of JSHint, for linting",True
c850968fa7335c7fa29454bb5a3d56c5893bf296,2016-12-17 01:39:55,Jonas Jenwald,"Remove `globals` that are now unnecessary thanks to the use of various ESLint environments (e.g. Node, ShellJS, Jasmine)",False
2f3805efbc0822fc326afeca2ca2b0d4936a097d,2016-12-17 01:36:36,Jonas Jenwald,"Switch to using ESLint, instead of JSHint, for linting

*Please note that most of the necessary code adjustments were made in PR 7890.*

ESLint has a number of advantageous properties, compared to JSHint. Among those are:
 - The ability to find subtle bugs, thanks to more rules (e.g. PR 7881).
 - Much more customizable in general, and many rules allow fine-tuned behaviour rather than the just the on/off rules in JSHint.
 - Many more rules that can help developers avoid bugs, and a lot of rules that can be used to enforce a consistent coding style. The latter should be particularily useful for new contributors (and reduce the amount of stylistic review comments necessary).
 - The ability to easily specify exactly what rules to use/not to use, as opposed to JSHint which has a default set. *Note:* in future JSHint version some of the rules we depend on will be removed, according to warnings in http://jshint.com/docs/options/, so we wouldn't be able to update without losing lint coverage.
 - More easily disable one, or more, rules temporarily. In JSHint this requires using a numeric code, which isn't very user friendly, whereas in ESLint the rule name is simply used instead.

By default there's no rules enabled in ESLint, but there are some default rule sets available. However, to prevent linting failures if we update ESLint in the future, it seemed easier to just explicitly specify what rules we want.
Obviously this makes the ESLint config file somewhat bigger than the old JSHint config file, but given how rarely that one has been updated over the years I don't think that matters too much.

I've tried, to the best of my ability, to ensure that we enable the same rules for ESLint that we had for JSHint. Furthermore, I've also enabled a number of rules that seemed to make sense, both to catch possible errors *and* various style guide violations.

Despite the ESLint README claiming that it's slower that JSHint, https://github.com/eslint/eslint#how-does-eslint-performance-compare-to-jshint, locally this patch actually reduces the runtime for `gulp` lint (by approximately 20-25%).

A couple of stylistic rules that would have been nice to enable, but where our code currently differs to much to make it feasible:
 - `comma-dangle`, controls trailing commas in Objects and Arrays (among others).
 - `object-curly-spacing`, controls spacing inside of Objects.
 - `spaced-comment`, used to enforce spaces after `//` and `/*. (This is made difficult by the fact that there's still some usage of the old preprocessor left.)

Rules that I indend to look into possibly enabling in follow-ups, if it seems to make sense: `no-else-return`, `no-lonely-if`, `brace-style` with the `allowSingleLine` parameter removed.

Useful links:
 - http://eslint.org/docs/user-guide/configuring
 - http://eslint.org/docs/rules/",False
4537590033169915e68f6480e2463bc4b2175f78,2016-12-15 08:32:19,Ross Johnson,Consitently apply textAdvanceScale during building of textContentItems for improved highlighting. Fixes #7878.,False
b629be05bd1fa725a4b0388f85e6d524ef45e8f8,2016-12-14 22:00:40,Jonas Jenwald,"Merge pull request #7886 from Snuffleupagus/viewer-async-initialization

Move the `Preferences` initialization/fetching code to the top of `PDFViewerApplication.initialize`, to enable using them when initializing e.g. the viewer components",True
a96b0f80dd6883b9da366cbb430135827434aa24,2016-12-14 20:49:10,Jonas Jenwald,"Convert the only remaining consumer (in `hand_tool.js`) of the 'localized' event to use the `localized` Promise instead, and only re-dispatch the 'localized' event on the `eventBus` for `GENERIC` builds

Ideally we'd remove the 'localized' event from the `eventBus`, but for backwards compatibility we keep it in `GENERIC` builds.
Note that while we want to ensure that the direction attribute of the HTML is updated as soon as the `localized` Promise is resolved, we purposely wait until the viewer has been initialized to ensure that the 'localized' event will always be dispatched.",False
648024f5d028f1650838fd62ac9f5c1e1892e417,2016-12-14 20:47:10,Jonas Jenwald,"Don't call `bindEvents()` until `PDFViewerApplication` has been initialized, and move binding of `window` event listeners to a helper method, to prevent errors if an event manages to arrive too soon

With `bindEvents()` now being called after the viewer has been initialized, we no longer need to have `PDFViewerApplication.initialized` checks in the event handler functions.
Furthermore by moving the `window.addEventListener`s to a helper method, `PDFViewerApplication.initialized` checks are no longer necessary in the event handlers, hence we thus address part of issue 7797 here as well.",False
849f5dde9d608ec50c0b0a78345b19721e9edf6f,2016-12-14 20:45:53,Jonas Jenwald,"Move the `Preferences` initialization/fetching code to the top of `PDFViewerApplication.initialize`, to enable using them when initializing e.g. the viewer components

Note that in quick testing using `console.time/timeEnd`, both locally and with the Firefox addon, the total run time of the *entire* `PDFViewerApplication.initialize` function does not seem to change with this patch.",False
2c1436f6cb3c563a90a76bc879ed7bb7a8c1b8d0,2016-12-14 20:43:20,Jonas Jenwald,"Refactor `PDFViewerApplication.initialize` into two methods, one that reads the Preferences and one that initializes the various viewer components",False
7d8fa1385d47e180cdba32a2e63d87d5c4132d7f,2016-12-14 05:46:24,Tim van der Meij,"Merge pull request #7890 from Snuffleupagus/pre-eslint-fixes

Fix a number of code style issues found by various ESLint rules, to make it easier to switch from JSHint to ESLint",True
28e50cfa21f4e33d65564d33e8a1aca50b50488f,2016-12-13 01:06:00,Jonas Jenwald,"Fix errors reported by the `space-infix-ops` ESLint rule

http://eslint.org/docs/rules/space-infix-ops",False
68bf47d55d032bbc1bc6a3f5e62f86cc377e3803,2016-12-13 01:05:59,Jonas Jenwald,"Fix errors reported by the `space-before-function-paren` ESLint rule

http://eslint.org/docs/rules/space-before-function-paren",False
551eb263e3e73dc56b9e8122dfac3bba455c677a,2016-12-13 01:05:58,Jonas Jenwald,"Fix errors reported by the `semi-spacing` ESLint rule

http://eslint.org/docs/rules/semi-spacing",False
aae27e76bbcd59e70b0f62436a69ac692fe4fb1b,2016-12-13 01:05:58,Jonas Jenwald,"Fix errors reported by the `no-multiple-empty-lines` ESLint rule

http://eslint.org/docs/rules/no-multiple-empty-lines",False
efbb1e9b1c1ede2f43eeb1d8e4a3994a7769f8de,2016-12-13 01:05:57,Jonas Jenwald,"Fix errors reported by the `new-cap` ESLint rule

http://eslint.org/docs/rules/new-cap",False
c36468cbce3175ba6409e423eeaf2621322f222b,2016-12-13 01:05:56,Jonas Jenwald,"Fix errors reported by the `keyword-spacing` ESLint rule

http://eslint.org/docs/rules/keyword-spacing",False
86ba634c97e60dee87fc1d5bd17867d062e40db4,2016-12-13 01:05:55,Jonas Jenwald,"Fix errors reported by the `key-spacing` ESLint rule

http://eslint.org/docs/rules/key-spacing",False
6606540fe419abf0e3dca72ea90766b8c2f292ba,2016-12-13 01:05:54,Jonas Jenwald,"Fix errors reported by the `func-call-spacing` ESLint rule

http://eslint.org/docs/rules/func-call-spacing",False
ad915f8af1c54e6205c02f0dea62ea98ccefd926,2016-12-13 01:05:53,Jonas Jenwald,"Fix errors reported by the `comma-spacing` ESLint rule

http://eslint.org/docs/rules/comma-spacing",False
66d2637b3fc627b7c7b49da92e90053640110547,2016-12-13 01:05:52,Jonas Jenwald,"Fix errors reported by the `yoda` ESLint rule

http://eslint.org/docs/rules/yoda",False
e53ab844cc55e1dae76cffd1bad480dcbcb09b12,2016-12-13 01:05:51,Jonas Jenwald,"Fix errors reported by the `no-useless-concat` ESLint rule

http://eslint.org/docs/rules/no-useless-concat",False
382094630190f83311cf4745e0711c7817cd7cec,2016-12-13 01:05:51,Jonas Jenwald,"Fix (most) errors reported by the `no-multi-spaces` ESLint rule

http://eslint.org/docs/rules/no-multi-spaces",False
328e7397ea535f6919821d7a374e0daf9d67232f,2016-12-13 01:05:50,Jonas Jenwald,"Fix errors reported by the `no-extra-bind` ESLint rule

http://eslint.org/docs/rules/no-extra-bind",False
25bf5db47ea421d476ccadc4d93178e59931ecfd,2016-12-13 00:56:18,Jonas Jenwald,"Fix errors reported by the `no-extra-boolean-cast` ESLint rule

http://eslint.org/docs/rules/no-extra-boolean-cast",False
fb5e75668355d0802e6d6e582fb69f5de9b249ed,2016-12-13 00:56:06,Jonas Jenwald,"Fix errors reported by the `no-cond-assign` ESLint rule

http://eslint.org/docs/rules/no-cond-assign",False
00a006e466014439dd43813e5cd2d7ec86b79a9b,2016-12-11 02:00:28,Tim van der Meij,"Merge pull request #7705 from Snuffleupagus/issue-2594

Move symbolic font glyphs to private use area if they don't have unicode mappings (issue 2594, bug 789074, bug 865644)",True
47f03b619f0c6fec506235227a9a2df457d3ef93,2016-12-09 04:29:45,Tim van der Meij,"Merge pull request #7873 from timvandermeij/mediabox-cropbox-indirect

Document: handle indirect objects in `MediaBox` and `CropBox` entries",True
3800b5e4639b3c6154ee5321891a820b7ddad8fa,2016-12-09 03:14:53,Tim van der Meij,"Document: extract `CropBox` fetching and validation into a getter

This patch refactors the `CropBox` code to combine fetching and
validation code in a getter, like we already did for the `MediaBox`
property. Combined with variable name changes, this improves readability
of the code and makes the `view` getter simpler as well.",False
9be3aee9c93d55920a9bf27733472b1d8d366757,2016-12-09 02:33:42,Jonas Jenwald,"Add a parameter to `Page_getInheritedPageProp` to make it possible to fetch (and dereference) Arrays, and use that for the `MediaBox`/`CropBox` getters (issue 7872)",False
407dee390afd67a72870c013395f513c174ee71d,2016-12-09 02:29:34,Tim van der Meij,"Merge pull request #7884 from Snuffleupagus/Parser-fetch-indirect-objects-in-filter-arrays

Ensure that we resolve indirect objects in `Filter` and `DecodeParms` arrays in `parser.js`",True
b4ac6bd2f6e65c2f4e1b5f245bc26f5187034060,2016-12-08 16:25:08,Jonas Jenwald,"Ensure that we resolve indirect objects in `Filter` and `DecodeParms` arrays in `parser.js`

I've not actually, thus far, come across a PDF file that this patch fixes. However, given the string of recent patches that has fixed issues with indirect objects in arrays, I think that it makes sense to proactively avoid any issues in this code.",False
aaec490847ea2c1b4edba22f635fef89b2ac85c3,2016-12-08 04:59:42,Tim van der Meij,"Merge pull request #7881 from Snuffleupagus/fixMetadata-constant-condition

Remove a misplaced `false` from a condition in `fixMetadata`, in `metadata.js`, since it currently short circuits the entire condition",True
77bcc9232e61a3cfe46bfaa3412e9aa97c8d163a,2016-12-08 03:21:46,Jonas Jenwald,"Remove a misplaced `false` from a condition in `fixMetadata`, in `metadata.js`, since it currently short circuits the entire condition

This looks to me like a simple oversight, which has existed ever since PR 1598 all the way back in 2012.",False
94ddd8f61df1f39bbb246bc98162736c4457a710,2016-12-06 15:48:53,Jonas Jenwald,"Merge pull request #7863 from timvandermeij/colorspace

Colorspace: refactoring to prevent unnecessary creation of intermediate arrays",True
caf81685cb56b069608e113d16ed3d9a79d894d7,2016-12-05 14:40:17,Jonas Jenwald,Update l10n files,False
fa6b9b7552b51678a35d5d439ad513db8c4b2aca,2016-12-05 01:15:52,Tim van der Meij,"Merge pull request #7868 from Snuffleupagus/pageLabels-St-unit-test

Adjust one of the Page Label unit-tests to use a PDF file where the ""St"" entry is both present and non-default (i.e. greater than one)",True
e386af7b22e1ed97c85eb6b12f69dcba60d17f85,2016-12-04 17:33:22,Jonas Jenwald,"Adjust one of the Page Label unit-tests to use a PDF file where the ""St"" entry is both present and non-default (i.e. greater than one)

I just realized that none of our current unit-tests cover this particular part of the Page Label parsing code, hence this patch adjusts an existing test PDF to include a ""St"" entry in the Page Label dictionary.",False
90d94815adafef9b5cac0da0a1b73e7aa77b218b,2016-12-02 21:17:39,Tim van der Meij,"Colorspace: miscellaneous improvements

- Remove an unnecessary check and assignment.
- Clean up code regarding mode setting (no need for a member variable).
- Indent two methods correctly.",False
c5c0a00dcad7a1372e8aa3c1a0a6c644346ba87d,2016-12-02 21:12:22,Tim van der Meij,Colorspace: reduce duplication in `AlternateCS.getRgbBuffer`,False
ef653d952b0bf2685eafcc690521a50420a650bf,2016-12-02 21:12:22,Tim van der Meij,"Colorspace: optimize default color initialization

This patch avoids the creation of extra arrays when initializing an
array with default (zero) values. Doing this additionally makes the code
more readable by allocating enough space for the number of color
components.",False
46d2c892ded2dd9fb0d14ac23fb309d960bbe023,2016-12-01 21:04:04,Tim van der Meij,"Merge pull request #7857 from jabiinfante/murmurhash3-unit-tests

add basic unit-tests for murmurhash3.js",True
48ab6463df5b183eb48f5495b1e17f72921ca834,2016-12-01 20:36:29,Jonas Jenwald,"Merge pull request #7862 from yurydelendik/issue7861

Don't fail if mozL10n is not present.",True
7b6ba5e9fda8a3b9d2c38deb7779165da481969c,2016-12-01 20:18:07,Yury Delendik,Don't fail if mozL10n is not present.,False
54fab606ee51e876d0c1ca9534f42f2d5ec5b023,2016-12-01 06:51:05,Javier Infante,add basic unit-tests for murmurhash3.js,False
8e8af62faf381f8b97f8699a49f2dc87b6c0e783,2016-12-01 03:24:56,Tim van der Meij,"Merge pull request #7856 from Snuffleupagus/issue-7855

Ensure that `PartialEvaluator_extractWidths` is able to handle indirect objects in all kinds of ""width"" data (issue 7855)",True
fb4c4ffb97069cfb51a5162116b1bbc16f4fd055,2016-12-01 02:50:28,Tim van der Meij,"Merge pull request #7858 from Snuffleupagus/issue-7852

Make the keyboard shortcuts `Ctrl + Up/Down` behave as `Home/End` (issue 7852)",True
48696a8d06539b6ddc742e94af75e5525ce43674,2016-11-30 22:12:52,Jonas Jenwald,"Make the keyboard shortcuts `Ctrl + Up/Down` behave as `Home/End` (issue 7852)

It seems that for normal web pages, at least in Firefox, the keyboard shortcuts <kbd>Ctrl</kbd> + <kbd>Up</kbd>/<kbd>Down</kbd> are functionally equivalent to <kbd>Home</kbd>/<kbd>End</kbd>. This is obviously an edge-case, but can be easily implemented by using the same logic as we do for <kbd>Home</kbd>/<kbd>End</kbd>.

Fixes 7852.

*Please note:* I'm finding it slightly difficult to interpret issue 7852, and bug 1285719, since among other things: the title includes the word ""reverse"" with no other mention of it, and the STR makes reference to print preview which doesn't seem applicable to the PDF viewer.
However, compared to regular web pages in Firefox, I think the behavior of this patch makes sense here.",False
c5b06cb40d032e782f5afa3a0ed73d4ee80f160a,2016-11-30 01:19:07,Jonas Jenwald,"Ensure that `PartialEvaluator_extractWidths` is able to handle indirect objects in all kinds of ""width"" data (issue 7855)

Fixes 7855.",False
451956c0b12857c44854bed598687d15ea03f2b3,2016-11-29 17:07:36,Jonas Jenwald,"Merge pull request #7628 from Snuffleupagus/issue-7580

Fallback to the `StandardEncoding` for Nonsymbolic fonts without `/Encoding` entry (issue 7580)",True
013f69e65f9299f2c5956c699a115ead3cbf8ef4,2016-11-29 15:30:21,Jonas Jenwald,"Merge pull request #7700 from Snuffleupagus/non-embedded-NuptialScript

Improve rendering of non-embedded NuptialScript font",True
362d20b23a707c8e3f3d436d5d2c2bd0cff05df4,2016-11-28 15:00:05,Jonas Jenwald,Update l10n files,False
e6720ad558e7fb99594eed1b9d5de6c5bc79ae8e,2016-11-27 20:51:03,Tim van der Meij,"Merge pull request #7853 from Snuffleupagus/jsdoc-parseDestDictionary

Fix the JSDoc comment for `Catalog.parseDestDictionary`",True
c6008b4d7cc35cad1e6f88c13afa7bbb49e0116e,2016-11-27 15:48:18,Jonas Jenwald,Fix the JSDoc comment for `Catalog.parseDestDictionary`,False
ce416eb26ea17c504e70ef49ec1d8862455d477c,2016-11-25 04:21:27,Tim van der Meij,"Merge pull request #7849 from timvandermeij/css-cleanup

Viewer: remove unused CSS rule",True
14d7e2f29ca8fdf20ba319f1395b78c1f53ba207,2016-11-25 04:14:57,Tim van der Meij,"Viewer: remove unused CSS rule

This appears to have been part of the first mock-up of the viewer, but
hasn't been used since.",False
424fc2df4ff7e36a39a17136661ff3db7b5c709c,2016-11-25 03:29:31,Tim van der Meij,"Merge pull request #7846 from timvandermeij/bidi-types

Bidi: import Unicode types from the specification",True
995be193787befef9545c0b39edaf8f73c7af807,2016-11-25 02:43:12,Tim van der Meij,"Bidi: skip invalid Unicode character to make indexing work

For Arabic characters, the Unicode character codes are mapped to Unicode
character types using the character codes for indexing. However, the
character code 0x061D is undefined (and therefore invalid) in the
Unicode standard. The imported list does not contain this entry, but not
having it in the list breaks indexing for items after it. Therefore, put
an empty string on its position to make indexing work properly and issue
a warning in the unlikely event that we encounter this character.",False
11839f018fcd6f4d289a08ea37902e6e54b32425,2016-11-25 01:38:31,Tim van der Meij,"Bidi: import Unicode types from the specification

Mention the specification in the comments for future reference. These
types have been imported from the CSV source.",False
7c96da43731ed340b2353838bdc727e083e546b0,2016-11-24 01:53:44,Tim van der Meij,"Merge pull request #7845 from timvandermeij/dist-min

Make: include minified library files for the distribution target",True
906b8ea9075db99b7a4f61b46a4ddaa7fcabef8b,2016-11-23 22:05:19,Adhika Setya Pramudita,"Make: include minified library files for the distribution target

Fixes #5487.",False
ef7fd75a949e6ea2e76fa1e69ba8dbc2cdab378c,2016-11-23 03:23:36,Jonas Jenwald,"Merge pull request #7841 from timvandermeij/ios-range

Compatibility: disable range requests for iOS and refactor user agent detection",True
cf3a7425b6c5fb2fe132089cb3a64a050749365b,2016-11-23 03:12:01,Tim van der Meij,"Compatibility: refactor user agent detection

This patch moves the user agent checks to the top of the file to reduce
duplication and to provide a clear overview of which user agent we are
detecting.

Moreover, we extract inline user agent checks as well and use existing
checks in more places. Finally, we fix the indenting in one place for
consistency.",False
0b0e18f05c1bccf91da558f02e3600603c9d6494,2016-11-23 02:49:20,Tim van der Meij,"Compatibility: disable range request for iOS

Fixes #7815.",False
9ff19985c0a43e186fe2fae7f1d87bb310c89780,2016-11-23 01:48:57,Tim van der Meij,"Merge pull request #7832 from seanburke-wf/expose-userunit-on-page

Expose the optional UserUnit entry as a page property",True
3170a4c40ac52c578df44752f2ede9e971230d9d,2016-11-22 22:26:17,Jonas Jenwald,"Improve rendering of non-embedded NuptialScript font

*This patch fixes something that I noticed while debugging https://bugzilla.mozilla.org/show_bug.cgi?id=1308536.*

The PDF file contains a font called ""NuptialScript"", which unfortunately is not embedded. Since that is a non-standard font we will not be able to render it entirely correct. However, by adding ""NuptialScript"" to the `getNonStdFontMap`, we can at least improve the rendering slightly by using an italic (serif) fallback font.",False
9d8fb025127751449b827515c32b50f95e45f49f,2016-11-22 22:07:44,Jonas Jenwald,"Merge pull request #7839 from Snuffleupagus/issue-7835

Correctly detect more cases of non-embedded Arial Black fonts (issue 7835)",True
f76cd2ce433b17466ba6bdbcb53c1918bafab6bf,2016-11-22 21:48:19,Sean Burke,Expose the optional UserUnit entry as a page property,False
d3043167de6ff7b42215b40bd8bb1d2f6cdae7c9,2016-11-22 18:26:21,Jonas Jenwald,"Correctly detect more cases of non-embedded Arial Black fonts (issue 7835)

This patch adds support for non-embedded Arial Black fonts, that use a `Arial-Black...` format for the font names.
Also, this patch changes `canvas.js` such that we always render Arial Black fonts with the maximum weight, which actually improves a number of existing test-cases. This should thus explain the test ""failures"", which are clear improvements compared with e.g. Adobe Reader.

Fixes 7835.",False
787d887a2f8d8ae75a9fe7ddfccaeec6c48f0b5d,2016-11-22 01:46:44,Tim van der Meij,"Merge pull request #7793 from Snuffleupagus/ViewHistory-storage-key-name

Rename the `ViewHistory` localStorage (and sessionStorage) key from `database` to `pdfjs.history`, and migrate existing data on read (issue 7760)",True
0af42f1ca7f05d42d20264690cf1e834b57a2c71,2016-11-22 01:33:37,Jonas Jenwald,"Rename the `ViewHistory` localStorage (and sessionStorage) key from `database` to `pdfjs.history`, and migrate existing data on read (issue 7760)

For consistency, I also renamed the `FIREFOX/MOZCENTRAL` sessionStorage key, but given that sessionStorage is a lot less permanent than localStorage it didn't seem necessary to migrate any existing values.

Fixes 7760.",False
8a1ed8ab1f318879f43e8e3ec498b2130d932369,2016-11-21 21:53:22,Jonas Jenwald,Update l10n files,False
99b5416ba095c8adb15633edf5ce829654929a38,2016-11-21 21:39:20,Tim van der Meij,"Merge pull request #7830 from Snuffleupagus/paintOnSvg-unsupported

Return a mock object in `paintOnSvg` when SVG rendering is not supported, to prevent `TypeError`s in the addons",True
9872660a95f479f6d89e4ddd99a8f64223d727a0,2016-11-19 18:02:17,Jonas Jenwald,"Return a mock object in `paintOnSvg` when SVG rendering is not supported, to prevent `TypeError`s in the addons

Currently if you try to enable SVG rendering in the addons, a `TypeError` is thrown by the browser since we have code that depends on what `paintOnCanvas`/`paintOnSvg` (should) return.",False
9c3419de94a62b8e8a87ec4c06cd22c9ae378269,2016-11-19 01:50:47,Yury Delendik,"Merge pull request #7826 from Snuffleupagus/PDFPageView_paintOnSvg-FIREFOX-prevent-unreachable-code-after-return-statement-warning

Prevent ""unreachable code after return statement"" warnings from `PDFPageView_paintOnSvg` in the addons",True
7272bb4894d82d4e23d42b937c670fb16d6076f5,2016-11-19 01:48:27,Jonas Jenwald,"Prevent ""unreachable code after return statement"" warnings from `PDFPageView_paintOnSvg` in the addons

Follow-up to PR 7738.",False
eaf9bff4e42ae9a62d2858ccb1b93d0a40817e46,2016-11-19 00:40:12,Tim van der Meij,"Merge pull request #7738 from yurydelendik/svg-page

Adds SVG rendering capabilities to the main viewer.",True
f7d6f3a7393fcefecc9aa66b7dd9581400e559a7,2016-11-19 00:33:49,Yury Delendik,Adds SVG rendering capabilities to the PDFViewer.,False
c9a0955c9c7ed857c98696732c6edeb6f4901f43,2016-11-19 00:27:11,Yury Delendik,Refactors PDFPageView_draw.,False
f6a8d9c4dd338ac18de673103c4e2cf8e65daf5a,2016-11-19 00:23:51,Yury Delendik,"Merge pull request #7789 from yurydelendik/toolbar

Refactor toolbar.",True
a4402c84de8b1f5c87dbb86e4506e5d74674e272,2016-11-19 00:21:15,Yury Delendik,Refactor toolbar (and secondary toolbar).,False
043cea251df376122c4cd276d82bd8166863849c,2016-11-18 23:34:30,Tim van der Meij,"Merge pull request #7819 from Snuffleupagus/issue-7804

For commands with with too few arguments, clear out `args` if it's an Array instead of replacing it with `null` in `EvaluatorPreprocessor_read` (issue 7804)",True
7f678e3af1dff01e84ea6cff6e566a49ccb1b0fb,2016-11-17 16:33:31,Jonas Jenwald,Update l10n files,False
a930f9af15a3a72981cd51df0336560f9a3a42f7,2016-11-16 14:50:29,Jonas Jenwald,"For commands with with too few arguments, clear out `args` if it's an Array instead of replacing it with `null` in `EvaluatorPreprocessor_read` (issue 7804)

For `PartialEvaluator_getTextContent`, the same `args` Array should be re-used for every `EvaluatorPreprocessor_read` call. Hence we want to ensure that it's not accidentally replaced with `null` in `EvaluatorPreprocessor_read`, since otherwise corrupt PDF files (with too few arguments for certain commands) will cause errors in `PartialEvaluator_getTextContent`.

Perhaps a micro-optimization, but this patch also changes two `!args` comparisons to `args === null`, since that should be a tiny bit more efficient.",False
7f6a607ea537a6237802fe11e211afb2b19af9cf,2016-11-14 17:34:25,Jonas Jenwald,"Merge pull request #7803 from mukulmishra18/master

Fix #7701: additional check for http/https protocols to fix unsafe he…",True
6ce2be98b7937dadc00c364ff78829441d0bbb57,2016-11-14 11:39:10,Mukul Mishra,"Fix #7701: additional check for http/https protocols to fix unsafe header request.

add missing ! and removed trailing whitespaces.",False
7ec8adc712bd5d03768991d59da7950e3fda75df,2016-11-12 02:52:30,Jonas Jenwald,"Merge pull request #7801 from Snuffleupagus/preprocessor2-remove-comment-except-copyright

Enable removing of all comments (except for Copyright notices) when preprocessing code, and reduce the indentation level",True
4f1cccb1389305a5d76ec26408295e2b4c7c1ce5,2016-11-12 02:35:17,Jonas Jenwald,"Enable removing of all comments (except for Copyright notices) when preprocessing code, and reduce the indentation level",False
a139c757748ee14ca154d205a4b3f134098f2eba,2016-11-11 22:27:29,Jonas Jenwald,"Merge pull request #7800 from Snuffleupagus/compatibility-Safari-regex

Replace the Safari detection in `checkRangeRequests` in compatibility.js with a regular expression",True
db2ce3ff643a984deadfbbbff51ed4b193024465,2016-11-11 21:45:24,Jonas Jenwald,"Replace the Safari detection in `checkRangeRequests` in compatibility.js with a regular expression

According to e.g. issue 7754, it appears that the current `isSafari` check is failing in newer version of the browser. Despite the fact that checking the userAgent is an anti-pattern, which should be avoided, it's currently the simplest solution.",False
c23f124051b5e1a81a411c9e890a4efd5c237cf2,2016-11-09 14:59:05,Jonas Jenwald,"Merge pull request #7794 from Snuffleupagus/JavaScript-white-listed-actions

[api-minor] Add support for a couple of white-listed `JavaScript` actions that contains valid URLs (issue 3897, bug 843699)",True
2f5170f28f12e6dace99afc8a944055ce8fd9ecc,2016-11-09 02:25:51,Tim van der Meij,"Merge pull request #7792 from Snuffleupagus/bug-1315608

Make the `customScaleOption` disabled to prevent it being keyboard accessible (bug 1315608)",True
6d8a404a9c3fefd0a2f26389e5a0ca5d1545291d,2016-11-08 21:18:27,Jonas Jenwald,"[api-minor] Add support for a couple of white-listed `JavaScript` actions that contains valid URLs (issue 3897, bug 843699)

By only allowing very specific type of `JavaScript` actions, and also utilizing the existing `URL` validation, this patch shouldn't pose too much risk.

Fixes one of the points in issue 3897 (with the PDF file taken from issue 3438).
Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=843699 (probably, since that bug doesn't contain a test-case).",False
a97bc16fbc0427c6bf68d3d9d86fd08b89aacae2,2016-11-08 16:34:55,Jonas Jenwald,"Make the `customScaleOption` disabled to prevent it being keyboard accessible (bug 1315608)

Given that the `customScaleOption` should already be hidden, provided that the browser supports that, this patch also prevents it from being accessible via the keyboard.
As far as my testing goes in various browsers, this doesn't seem to have any ill effects, and note that we're already explicitly ignoring the `custom` value in the `select` event handler.

Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1315608.",False
340c6638c590a47fe11c8022e7b38d9aeaa0af09,2016-11-07 22:08:23,Jonas Jenwald,"Merge pull request #7781 from timvandermeij/viewer-responsiveness

Viewer: improve responsiveness and clean up CSS",True
f95915fc73803794395de2627d04a6929a96f226,2016-11-07 20:53:50,Tim van der Meij,"Viewer: amend `.sidebarOpen` responsiveness rules with rules for
`.sidebarMoving`",False
b428463ecc179053312a0bd38eaee48d05732280,2016-11-05 20:15:08,Tim van der Meij,"Merge pull request #7786 from SuriyaaKudoIsc/patch-3

Add HTTPS support for Demo",True
1446e0e64f1f87cc0d4012337e6756a99366f2f0,2016-11-04 20:25:56,Suriyaa Kudo,Add HTTPS support,False
b4100ba65103142c626c0961e7f9af476a1c5f6e,2016-11-04 04:23:14,Jonas Jenwald,"Merge pull request #7698 from Snuffleupagus/bug-1308536

Ignore reserved commands when parsing operands in `CFFParser_parseDict`, instead of just rejecting the entire font (bug 1308536)",True
28ef01272734c576d87ffa3e675233333f7d1965,2016-11-04 03:26:46,Tim van der Meij,"Viewer: improve responsiveness and clean up CSS

This patch resolves the responsiveness issues for the toolbar in the
viewer. Depending on the language (for example the Dutch language),
elements could overlap when the viewport size is reduced.

The main issue here is that the CSS rules are unnecessarily complex and
handle lots of different cases (LTR/RTL, displacements for specific
viewport widths, et cetera). By removing this complexity and letting the
browser handle the responsiveness, we not only get simpler CSS rules and
HTML mark-up, but the responsiveness issues are mostly fixed at the same
time. We no longer have to position the elements manually (by setting
their `left` attribute value) anymore.",False
1d82521b4c99787ca923092a3892ce9e8888cea7,2016-11-04 02:46:39,Tim van der Meij,"Merge pull request #7782 from Snuffleupagus/page-labels-more-validation

Use `stringToPDFString` to sanitizing bad ""Prefix"" entries in Page Label dictionaries, and add more validation",True
fe3c12bd16d9706d7a081b343afad9d3def925f9,2016-11-04 02:33:44,Tim van der Meij,"Merge pull request #7778 from srslafazan/defensive-check-for-mousewheel-handler

Additional check to ensure pdfViewer object is defined before handleMouseWheel event accesses its property isInPresentationMode",True
7fec8de502605370789b62c21ec448a94824189c,2016-11-04 00:55:16,Shain Lafazan,Additional check to ensure pdfViewer object is defined before handleMouseWheel event accesses its property isInPresentationMode,False
0844a72b4dd84852f4b9cf9d341610b015161195,2016-11-04 00:38:06,Jonas Jenwald,"Add a bit more validation to `Catalog_readPageLabels`, to ensure that the Page Labels are well formed",False
2d8d8b5e538544ec3509f72ec6b91323f73cc5d5,2016-11-04 00:18:08,Jonas Jenwald,"Use `stringToPDFString` to sanitizing bad ""Prefix"" entries in Page Label dictionaries

It seems that certain bad PDF generators can create badly encoded ""Prefix"" entries for Page Labels, one example being http://ukjewishfilm.org/wp-content/uploads/2015/09/Jewish-Film-Festival-Programme-ONLINE.pdf.

Unfortunately I didn't come across such a PDF file while adding the API support for Page Labels, but with them now being used in the viewer I just found this issue. With this patch, we now display the Page Labels in the same way as Adobe Reader.",False
9dc64639333b4290b53753ca27fa693e480ba33a,2016-11-03 17:20:40,Jonas Jenwald,"Ignore reserved commands when parsing operands in `CFFParser_parseDict`, instead of just rejecting the entire font (bug 1308536)

According to the CFF specification, see http://partners.adobe.com/public/developer/en/font/5176.CFF.pdf#page=11, certain commands are currently reserved.

Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1308536.",False
9f8d67475ea668e3e8eaeb241733b998d64e90ca,2016-11-03 03:13:17,Tim van der Meij,"Merge pull request #7775 from timvandermeij/widget-annotation-name

Widget annotation: implement field name according to the specification",True
1d96854019d86917e6f980d39a3e6c92c5b72302,2016-11-03 02:14:44,Tim van der Meij,"Widget annotation: implement field name according to the specification

The original code is difficult to read and, more importantly, performs
actions that are not described in the specification. It replaces empty
names with a backtick and an index, but this behavior is not described
in the specification. While the specification is not entirely clear
about what should happen in this case, it does specify that the `T`
field is optional and that multiple field dictionaries may have the same
fully qualified name, so to achieve this it makes the most sense to
ignore missing `T` fields during construction of the field name. This is
the most specification-compliant solution and, judging by opened issue #6623, also the required and expected behavior.",False
6e22b323727091734d36658b276d05140e7ea8bc,2016-11-02 01:42:08,Tim van der Meij,"Merge pull request #7745 from Snuffleupagus/Launch-actions

[api-minor] Add basic support for `Launch` actions (issue 1778, issue 3897, issue 6616)",True
9295114bddf9218694f662913be94c0d9076f452,2016-11-01 21:23:51,Jonas Jenwald,"Merge pull request #7774 from timvandermeij/lint

Improve lint coverage and correct code style violations",True
5194e681346c5e1e6cad65185ab16ff1d5b873ce,2016-11-01 19:34:21,Tim van der Meij,"Lint: correct code style violations

Manual observations and working with other linting tools found these.",False
978b214c92f4b0dc8ad15d228a6c9172e8279b54,2016-11-01 19:13:38,Tim van der Meij,Lint: do not ignore `external/importL10n` as it is one of our components,False
c719762099ef294c4e26fb699b6bf601d434b6c1,2016-11-01 19:09:35,Tim van der Meij,"Lint: update `.jshintignore`

Remove folders that no longer exist and ignore folders with binary/PDF
files.",False
29fc2f99087cc449a3ef795f64e28fa054f6213a,2016-11-01 18:02:41,Tim van der Meij,"Merge pull request #7773 from Snuffleupagus/update-swedish-l10n

[l10n] Add Swedish translations for a couple of new/changed localization IDs",True
40d2d3f56959a67b6de726a9af995cccc0f24b9e,2016-11-01 14:39:47,Jonas Jenwald,"[l10n] Add Swedish translations for a couple of new/changed localization IDs

I got tired of staring at a bunch of localization warnings every time that I open the console, hence this patch adds the missing translations to the Swedish locale.",False
c8158dc672df96ae831aa7461907f65cdb1f7d88,2016-11-01 04:14:55,Tim van der Meij,"Merge pull request #7771 from timvandermeij/l10n-updates

Localization updates",True
775b294bb966a8ecd68926d1f8e9b6753090f4ca,2016-11-01 04:05:05,Tim van der Meij,L10n: import upstream translations,False
f8e29ad80f4443a075ac48d5713b47460955d578,2016-11-01 04:01:14,Tim van der Meij,L10n: update the Dutch translation after recent string changes,False
077e64443772a52bbc6545090fd861ab0fb54dad,2016-11-01 03:44:22,Jonas Jenwald,Fix a typo in the `page_of_pages` l10n ID for the en-US locale,False
e9c63a2b3274e7fc851fcdc0761bec7eefb3f4b6,2016-11-01 03:29:56,Tim van der Meij,"Merge pull request #6945 from Snuffleupagus/page-labels-viewer

Add support for PageLabels in the viewer (issue 6902, bug 793632)",True
a740d6945701368970152efa32aeb4807b014485,2016-10-31 19:21:49,Yury Delendik,"Merge pull request #7766 from Rob--W/printing-refactor-split-from-7721

Printing refactor split from 7721",True
594592216c9b6c33d48a972c6427a8233fbe5bd3,2016-10-30 16:33:24,Rob Wu,"Refactor printing: startPrint -> performPrint

- Renamed startPrint to performPrint to emphasize that the method
  does not start the print process (preparing pages for the printer),
  but that it does the actual printing (sending pages off to the
  printer).

- Put performPrint in the PDFPrintService, so that it can be
  overridden if needed.",False
d3b13e36d32a7e4f4f4df4a603a97e6f3c162213,2016-10-30 16:33:24,Rob Wu,"Refactor page printing logic on the web

- Move the global scratchCanvas to PDFPrintService. This is mainly to
  make it easier to reason about the state of scratchCanvas. In practice
  there is no difference because only one PDFPrintService instance can
  be instantiated at any given time.

- Move all logic of using the rendered page to one location.
  This makes it easier to replace the printing logic later, when I add
  special handling to out-of-process frames in the Chrome extension.",False
0c21ebf9f3f957f1126ef5220af58e697005fd09,2016-10-30 16:33:24,Rob Wu,"Close overlay if print service was not initialized

Fixes #7720",False
1c869906c8d1dcb2d7e389b1b1dd5a0645fe445a,2016-10-30 16:33:24,Rob Wu,"Strictly manage lifetime of PDFPrintService

Make sure that the print service is stopped as soon as possible when
aborted, and that it is not possible for a (slow) promise to
accidentally wipe the state of a print job that was started later.",False
1c3fb175dd22db9ce71db1c9de6c8557561e290b,2016-10-28 03:26:23,Tim van der Meij,"Merge pull request #7757 from Snuffleupagus/setHash-remove-pageNumber-directly-after-hash

Remove/deprecate specifying a pageNumber directly after the hash symbol (#), to improve compatibility since other PDF viewers don't support this form (issue 7746)",True
87c2ff5483e043c6e75e4c0c3073d0b5ec86133c,2016-10-28 02:55:53,Jonas Jenwald,"Remove/deprecate specifying a pageNumber directly after the hash symbol (#), to improve compatibility since other PDF viewers don't support this form (issue 7746)

There's no mention of our `#{pagenum}` form in http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/pdf_open_parameters.pdf, and Adobe Reader doesn't seem to support it either.
Hence this patch removes support for it in the extensions, but keeps it in the `GENERIC` build with a deprecation warning and a fallback to handle it as a destination.

Fixes 7746.",False
ab464df3364b1cce9731734cd32112e87193e3d4,2016-10-28 02:46:27,Yury Delendik,Import L10n files.,False
abc417cee924b6766a705d735c6c7d6b4656c8bd,2016-10-28 01:46:35,Tim van der Meij,"Merge pull request #7750 from Snuffleupagus/PDFLinkService_navigateTo-more-validation

Add more validation to `PDFLinkService_navigateTo`",True
a28a71072d63435032033857d8e578d1d0ddf58a,2016-10-28 00:49:03,Tim van der Meij,"Merge pull request #7756 from timvandermeij/npm

Travis CI: use most recent version of NPM",True
7c78b2f6c097f7da303bc0b784de89148c457abc,2016-10-28 00:40:19,Tim van der Meij,Travis CI: use most recent version of NPM,False
e94c2945af2d534cd43d33a3f1dda73d59892457,2016-10-27 19:44:28,Tim van der Meij,"Merge pull request #7749 from Snuffleupagus/PDFLinkService_setHash-dest-fallback

Avoid accidentally rejecting a named destination that looks like a decimal number or a boolean (PR 7341 follow-up)",True
81b9d553cf7a37db2105a734b2d0397d57536b52,2016-10-26 20:09:58,Jonas Jenwald,Add TeX-specific glyph names to `glyphlist.js` to improve both glyph mapping and text selection for mathematic fonts (issue 2594),False
8d036faf403fb71fd106f7f605251268feb6a658,2016-10-26 20:09:21,Brendan Dahl,Move symbolic font glyphs to private use area if they don't have unicode mappings.,False
efb9619e53b0e12ccbac95f3d7d5c87bbae24fa0,2016-10-26 17:00:37,Jonas Jenwald,Add PageLabels to `PDFPageView` and `PDFThumbnailView`,False
f461fd64aa221255cce87669a9cf3911acceac93,2016-10-26 17:00:36,Jonas Jenwald,"Add support for PageLabels in the viewer

This patch implements the page label functionality in a similar way as Adobe Reader.
For documents with page labels, if a non-existent page label is entered we'll try to fallback to the page number instead.
The patch also includes a preference (`disablePageLabels`), to make it easy to opt-out of using page labels if the user/implementor so wishes.

The way that `get/set currentPageLabel` is implemented in `PDFViewer`, is as wrappers for the corresponding `get/set currentPageNumber` functions, since that seemed like the cleanest solution.
The page labels are purposely *only* added to the page controls in the viewer UI, and not stored in e.g. the `ViewHistory`. Since doing so would mean adding unnecessary code complexity, without any real added value, and would also mean delaying the inital loading of PDF documents.

Note that this patch will ignore page labels if they are identical to standard page numbering, since in this case displaying the page labels adds no value (but only UI noise). The reason for handling this case specially, is that in practice a surprising number of PDF files include ""pointless"" page labels.",False
23ec02bb930b8723f6464b61666deba1bff86748,2016-10-26 17:00:26,Jonas Jenwald,"Remove the ""Page: "" label and replace it with a tooltip

The following reasoning was used for deciding to remove the ""Page: "" label, and replace it with a tooltip, from the main toolbar:
 - We have no other visible labels in the *main* toolbar (e.g. the Zoom dropdown doesn't have a label, but only a tooltip).
 - We already hide the ""Page: "" label when the viewer is narrow.
 - The varying width of the ""Page: "" label in different locales is already causing issues for many languages, with overlap in the main toolbar as a result.
Trying to create responsive CSS styles that works well in all locales is already difficult, and if we add support for page labels that will only further compound the issues.
 - Some PDF viewers (e.g. Adobe Reader, pdfium in Chrome) doesn't show labels in the UI by default.",False
e1412de32075e76f3c6129dc59ef6631cc68b6c6,2016-10-24 13:52:45,Jonas Jenwald,"Add more validation to `PDFLinkService_navigateTo`

In some PDF files, the first element (i.e. the one containing either a `Ref` or a `Number` pointing to a page) of the explicit destination Array may be bogus.

One such example is actually the file `pdf.pdf` in the test-suite, where some destinations are incompletely specified. One such example being the `G1.998360` destination whose explicit destination Array contains `[null, /XYZ, 54, 488, null]`, i.e. the destination page is `null`.
Hence this patch adds a bit more validation for that case. It also adds an additional check to ensure that the resulting `pageNumber` is non-negative, and finally a couple more error messages for existing cases of malformed data.",False
d5e3b2fbf0eb21d6acfd79a7bce91436d0e2220f,2016-10-23 19:38:26,Jonas Jenwald,Update `PDFOutlineViewer_bindLink` to look more like `LinkAnnotationElement_bindLink`,False
47a1c7797eb18bf473e9439fba670a4379d6578b,2016-10-23 15:49:00,Jonas Jenwald,Update l10n files,False
901a2d41beb564c278c049f5738930a259fa8f50,2016-10-23 15:25:27,Jonas Jenwald,"Avoid accidentally rejecting a named destination that looks like a decimal number or a boolean (PR 7341 follow-up)

Without this patch, the following link does not work correctly: http://unesdoc.unesco.org/images/0013/001346/134685E.pdf#4.3
Compare the correct behaviour of this link: http://unesdoc.unesco.org/images/0013/001346/134685E.pdf#nameddest=4.3",False
2b79782377b26cf6f5bd13ca34127711d5f38e8f,2016-10-21 17:10:32,Jonas Jenwald,"[api-minor] Add basic support for `Launch` actions (issue 1778, issue 3897, issue 6616)

In general we neither want, nor can, support arbitrary `Launch` actions. But in practice, all the cases we've seen so far just contains relative URLs to other PDF files. Building on PR 7689, we can thus at least support basic `Launch` actions.",False
7e392c0205e8f3590976fe2008df2a6ecd71c942,2016-10-20 02:21:09,Jonas Jenwald,"Merge pull request #7689 from Snuffleupagus/relative-URLs

[api-minor] Add support for relative URLs, in both annotations and the outline, by adding a `docBaseUrl` parameter to `PDFJS.getDocument` (bug 766086)",True
d284cfd5ebe7b6b5d3961f8c5d3a477456ebb516,2016-10-20 01:50:24,Jonas Jenwald,"[api-minor] Add support for relative URLs, in both annotations and the outline, by adding a `docBaseUrl` parameter to `PDFJS.getDocument` (bug 766086)

Note that in `FIREFOX/MOZCENTRAL/CHROME` builds of the standard viewer the `docBaseUrl` parameter will be set by default, since in that case it makes sense to use the current URL as a base.
For the `GENERIC` viewer, or the API itself, it doesn't make sense to try and set the `docBaseUrl` by default. However, custom deployments/implementations may still find the parameter useful.",False
71a781ee5c9e548c16d8e612f41fbc45f1082fc5,2016-10-20 01:41:22,Jonas Jenwald,"Deprecate the `isValidUrl` utility function and replace it with `createValidAbsoluteUrl`/`isValidProtocal` functions instead, since the main URL validation is now done using the `new URL` constructor",False
42f07c62624361204fd1892e2a635c08b5d9c9f5,2016-10-20 01:41:17,Jonas Jenwald,"[api-minor] Use the `new URL` constructor when validating URLs in annotations and the outline, as a complement to only checking the protocol, and add a bit more validation to `Catalog_parseDestDictionary`

Note that this will automatically reject any relative URL.
To make the API more useful to consumers, URLs that are rejected will be available via the `unsafeUrl` property in the data object returned by `PDFPageProxy_getAnnotations`.

The patch also adds a bit more validation of the data for `Named` actions.",False
e64bc1fd1387d43c3447c7018eaa16f1794f0d2a,2016-10-18 19:44:07,Jonas Jenwald,"Move parsing of destination dictionaries to a helper function

This not only reduces code duplication, but it also allow us to easily support the same kind of URLs we currently do for Link annotations in the Outline as well.",False
69066234626775955afdffdc48544794b9817fb5,2016-10-18 17:22:31,Tim van der Meij,"Merge pull request #7717 from jeenuv/display-double-click-tooltip

Explain double-click behaviour on tool tip",True
1783f145115f6f23119b581aaa54f2ce9490f3fa,2016-10-18 04:27:52,Tim van der Meij,"Merge pull request #7732 from yurydelendik/svg-cgrp

Removes SVG this.cgrp usages.",True
1236b279932e5521944ab278416080ac78d8ae42,2016-10-18 02:39:24,Yury Delendik,Removes SVG this.cgrp usages.,False
273d2de6ec76706407b77abd105f48488102c8a7,2016-10-17 20:40:47,Yury Delendik,"Merge pull request #7715 from timvandermeij/svg-groups

SVG: optimize and refactor group creation code",True
960e344a8a48e302a5530e37744d6562ad8c5b9c,2016-10-17 20:08:13,Tim van der Meij,"Merge pull request #7730 from Snuffleupagus/jsdoc-typedef-property

Fix a couple of JSDoc `@typedef`s to use `@property` (instead of `@param`) to fix some missing documentation when running `gulp jsdoc`",True
1369997bbfe71e05a6f45aee303a3d5f8d312798,2016-10-17 19:17:05,Yury Delendik,Properly invoke 'gulp' in make.js and fail when it fails.,False
85db14652531a4c234dd0239e530c3e0d1062176,2016-10-17 18:35:16,Yury Delendik,Run 'firefox' and 'chromium' task in-sequences,False
2ce9da9b7ad2464de61ae0098b59d93ccca371c4,2016-10-17 16:34:55,Jonas Jenwald,Fix a couple of JSDoc `@typedef`s to use `@property` (instead of `@param`) to fix some missing documentation when running `gulp jsdoc`,False
6678da379b45fb274dc9dbd944648b896e194965,2016-10-17 16:19:47,Jonas Jenwald,"Merge pull request #7728 from timvandermeij/gulp-port

Gulp: port the `all`, `extension` and `jsdoc` targets",True
224e3a42a23edf0d11ede2c0ecabf80cc69b2b34,2016-10-17 01:47:25,Tim van der Meij,"Gulp: port the `all`, `extension` and `jsdoc` targets

This requires the `run-sequence` dependency because Gulp does not have a
way to run sequences of tasks inside a Gulp task. Gulp 4.0 will have
support for this, but until that is released this is the recommended way
to implement it.",False
f2dcacd164e7fd22eedff54fa803438d8bb5f709,2016-10-16 13:52:48,Jeenu Viswambharan,"Explain double-click behaviour on tool tip

The outline toggle button has a feature where it can be double-clicked
to expand/collapse all items shown therein. Although this is described
in the FAQ, can go potentially unnoticed. This, however, being a useful
feature, advertise on the tool tip itself.

l10n translation for en-US and IDs updated.

Signed-off-by: Jeenu Viswambharan <jeenuv@gmail.com>",False
426fc454de146730afb7d4c57452930027bfe228,2016-10-16 01:15:44,Tim van der Meij,"SVG: factor out initialization code into a private method

Each well-formed SVG image has the following structure:

SVG element
- Definitions element
- Root group
  - Other group 1
  - ...
  - Other group n

This patch factors out initialization code into a private method in such
as way that the creation of this structure is clear from the code. The
root group is the replacement for the parent group from before. We need
this group as we cannot apply the viewport transform on the SVG element
itself (this caused issues in Chrome). If other code appends groups to
the SVG image, in reality it is appending those groups to the root
group, but this detail is abstracted away by this patch.",False
fa90573c4b41eb9c145c82705647e28581497357,2016-10-16 01:13:12,Tim van der Meij,"SVG: optimize transform group creation

This patch ensures that we only create transformation groups when it is
actually required and that we re-use transform groups as much as possible.
It reduces the number of transform groups for the Tracemonkey paper from
2790 to 1271, thereby making the DOM much lighter and rendering/scrolling
smoother. Moreover, it simplifies the code and prevents duplication.

Finally, we issue a warning when an unimplemented graphic state is
encountered. Before, this was ignored silently, making debugging harder.",False
de6c92a96dace1a47dbfda44c9fa7ab6370a7f5e,2016-10-16 00:38:24,Tim van der Meij,"Examples: improve SVG viewer

This patch:

- resolves a warning in the console about missing character encoding;
- makes the viewer use the same background color and PDF file as the
  regular viewer;
- simplifies the example to bring it more in line with the other
  examples.",False
2e20000b7147a2a6ff4a01264ec39e594e084f78,2016-10-15 23:34:17,Tim van der Meij,"Merge pull request #7727 from Snuffleupagus/parser-stream-decodeParms

Let `Parser_makeFilter` pass in the `DecodeParms` data to various image `Stream`s, instead of re-fetching it in various `[...]Stream.prototype.ensureBuffer` methods",True
ea5949f1fd8aca03e2f9571ccf7a6cd2bf49836e,2016-10-15 21:22:08,Yury Delendik,"Merge pull request #7668 from Snuffleupagus/issue-7665

Prevent an infinite loop in `XRef_fetchUncompressed` for encrypted PDF files with indirect objects in the /Encrypt dictionary (issue 7665)",True
f209030b9967fdcd335369ce53954df803f021c5,2016-10-15 17:16:23,Jonas Jenwald,"Merge pull request #7726 from Snuffleupagus/remove-remaining-preprocessor-statement-core-fonts

Remove a remaining old-style preprocessor from `src/core/fonts.js` (PR 7322 follow-up)",True
c8f83d6487a1a4080c7373ad78d16811cfafa045,2016-10-15 15:39:51,Jonas Jenwald,"Let `Parser_makeFilter` pass in the `DecodeParms` data to various image `Stream`s, instead of re-fetching it in various `[...]Stream.prototype.ensureBuffer` methods

In `Parser_filter` the `DecodeParms` data is fetched and passed to `Parser_makeFilter`, where we also make sure that a `Ref` is resolved to a direct object.
We can thus pass this along to the various image `Stream` constructors, to avoid the current situation where we lookup/resolve data that is already available.
Note also that we currently do *not* handle the case where `DecodeParms` is an Array entirely correct in the various image `Stream`s, and this patch fixes that for free.",False
1da59bec9bfcfbae8af2f96e2ac55525b38e2991,2016-10-15 15:03:09,Jonas Jenwald,"Remove a remaining old-style preprocessor from `src/core/fonts.js` (PR 7322 follow-up)

Note that this code was added *after* PR 7322 was opened, which thus explains why it was missed during rebasing.",False
c1a34ffbcdec0eb31a2bdccc3b49c41f1e5e4601,2016-10-15 03:05:17,Jonas Jenwald,"Merge pull request #7322 from yurydelendik/preproc2

Remove JS preprocessor code from the web/ and src/ files",True
0576c9c6c6a85a2a7c660e640b0a10b27cd6e1f9,2016-10-14 21:27:53,Yury Delendik,Replaces all preprocessor directives with PDFJSDev calls.,False
bf52ff156d9d2f3d03160f4c3ffc856fcfb829f8,2016-10-14 19:03:22,Yury Delendik,Adds esprima-based preprocessor.,False
bc3bcebde2bf88ebdab1c98420af308e3f1ce167,2016-10-14 13:28:24,Jonas Jenwald,"Merge pull request #7722 from Rob--W/grab-to-pan-cssom-and-cleanup

Update to latest grab-to-pan version",True
c7c6bf1ae8ffa66942e9f4ee16b5cd466dda0fad,2016-10-14 04:25:58,Rob Wu,Update to latest grab-to-pan version,False
c457e6015dcaae7efb4d2185275f5d855515f293,2016-10-13 19:33:49,Tim van der Meij,"Merge pull request #7714 from cemerick/fix-non-numeric-TJ

Fix getTextContent evaluation to only apply TJ horizontal offsets using numeric items/args",True
85c52f1fd67f540b5defa671fb324de0b175c868,2016-10-13 17:38:31,Chas Emerick,"Fix getTextContent evaluation to only apply TJ horizontal offsets using numeric items/args

While the array argument to TJ should only contain strings and numbers, other
unfortunate items are found in PDFs in the wild, e.g.:

[(Grandes) 0.0 Tc
-250.0 (Client\350les,) 0.0 Tc
-250.0 (Financements) 0.0 Tc
-250.0 (et) 0.0 Tc
-250.0 (March\351s) ] TJ

getOperatorList already properly ignores any non-string, non-numeric values in
TJ arrays; without this patch to getTextContent, returned text items can have
NaN widths due to calculations being applied to those non-numeric values.",False
8c5b9255471d7c2f472e477592fca4a50f2a5962,2016-10-12 03:18:51,Tim van der Meij,"Merge pull request #7514 from Snuffleupagus/viewer-abort-rendering-on-close

Ensure that we cancel any pending rendering operations when the viewer is closed (issue 7274)",True
885ba83624841a5d17521f047f69655d63634501,2016-10-12 02:06:02,Jonas Jenwald,"Add the number of `textDivs` to the `textlayerrendered` event, to avoid having to manually get that information in the event handler",False
3904be888928a2941c656c353ce3b062632e94da,2016-10-12 01:31:22,Jonas Jenwald,Ensure that we cancel any pending `textLayer` rendering operations when the viewer is closed (issue 7274),False
a824c6c4f6e29577a978ddb267cffede732ce35a,2016-10-12 01:31:22,Jonas Jenwald,Ensure that any pending rendering operations in `PDFViewer`/`PDFThumbnailViewer` are cancelled when the viewer is closed,False
fb5aa58008d53628bd368aca95799e64886c8ebe,2016-10-12 00:52:07,Tim van der Meij,"Merge pull request #7697 from yurydelendik/print-v2

Refactoring of printing code and mozPrintCallback polyfill",True
1a056caf88a47e26f107b9773867d43cdd64f922,2016-10-11 20:38:13,Yury Delendik,Localization of the print dialog.,False
c09f634bb6c713f6dc36628145788c88e60448e0,2016-10-11 20:38:13,Yury Delendik,"Removes mozPrintCallback polyfill, converts canvas to PNG.",False
d7148735ba70a13760f4f688e734a43accac299b,2016-10-09 15:41:53,Jonas Jenwald,Update l10n files,False
24a7a58da7a5144d736fb9b2bf673c386fe0bcbd,2016-10-08 18:03:07,Yury Delendik,Moves mozPrintCallback specific code to firefox_printservice.js,False
f8bd3d4473c801401354f12442d8c0fda459a0b4,2016-10-07 02:47:12,Tim van der Meij,"Merge pull request #7694 from yurydelendik/print-ff

Disables Font Loading API for Firefox.",True
e336604ef1e1d424c4b9cac8833469abe0f7a3ee,2016-10-06 20:00:18,Yury Delendik,Disables Font Loading API for Firefox.,False
e48f388d24cff412edb632337159cc438ee67f6e,2016-10-06 18:46:19,Yury Delendik,"Merge pull request #7677 from yurydelendik/print

Bug 1302069 - Printing canvases at PDF document size.",True
29947b5a570e07ca2ea2c2f14d5a3c7bcb838d4c,2016-10-06 18:21:45,Yury Delendik,Printing canvases at PDF document size.,False
9b3a91f3656d482377e12a5b295b7aa898ea527a,2016-10-06 02:57:45,Tim van der Meij,"Merge pull request #7671 from timvandermeij/interactive-forms-choice-fields

Interactive forms: render choice widget annotations",True
f85f3243b1dff4b2cd9934ddeb99d16c3d018ccf,2016-10-06 00:55:29,Tim van der Meij,Choice widget annotations: unit and reference testing,False
d5d9f362aac7a18f058cfcca32e758fdb78d5ee7,2016-10-06 00:55:29,Tim van der Meij,Choice widget annotations: core and display layer implementation,False
7b2a9ee4e065e45f2bfaa3cd68ca69e1e4f610f5,2016-10-05 21:08:12,Yury Delendik,"Merge pull request #7670 from Snuffleupagus/Parser_makeFilter-maybeLength

Only skip parsing a stream in `Parser_makeFilter` when we know for sure that it is empty (PR 6372 follow-up)",True
b4a90121f01af6896a57b0a7b690047418fe71a1,2016-10-04 22:51:07,Yury Delendik,"Merge pull request #7692 from yurydelendik/v1.6.210

Release of 1.6.210",True
970cf8e891056a2effbd2055bcfec357539ff5e4,2016-10-04 22:49:51,Yury Delendik,Release of 1.6.210,False
4ce2356a59574f8c25fae2bcea1d510bee07dc39,2016-10-04 22:44:18,Yury Delendik,"Merge pull request #7691 from yurydelendik/version-1.6

Version 1.6",True
c1539f584a5887efca97345403739645a874bb45,2016-10-04 22:42:37,Yury Delendik,Version 1.6,False
d2a4974785ac7ed199fa25b62903ebbed63bd882,2016-09-30 18:58:23,Yury Delendik,"Merge pull request #7681 from Snuffleupagus/bug-1122280-unit-test

Add a unit-test for annotations where the `URI` action has an incorrect encoding (bug 1122280, PR 5999)",True
93830032ac22cb94ce79407d30d487f31f89a2ed,2016-09-30 15:14:24,Jonas Jenwald,"Add a unit-test for annotations where the `URI` action has an incorrect encoding (bug 1122280, PR 5999)",False
1564dc311a37f62a261fe74df25bd13dc262d98d,2016-09-29 03:00:35,Tim van der Meij,"Merge pull request #7618 from jeremypress/fix-enhanced-double-click

fixing #7590 by delaying div shrink after mouse up",True
869914529dfa9008e9c1fe0335b8494e6073e2c2,2016-09-28 22:13:38,Yury Delendik,"Merge pull request #7656 from Snuffleupagus/issue-4090

Attempt to skip zero bytes at the end of Scan blocks when decoding JPEG images (issue 4090)",True
b4be1e91abc5cb02172c0c6b4bd0863e203409e5,2016-09-28 22:00:37,Yury Delendik,"Merge pull request #7653 from staktrace/touch_swipe_presentation_mode

Add support for touch-swiping between pages in presentation mode (bug…",True
ba9e8cb1849cbcb6b82b14778f44e84ed9bff47f,2016-09-28 21:05:25,Kartikaya Gupta,Add support for touch-swiping between pages in presentation mode (bug 1300878).,False
54ee83eb125ff6bbf95a4e7a0e7ef2493e4aae4d,2016-09-28 20:01:02,Jonas Jenwald,Attempt to skip zero bytes at the end of Scan blocks when decoding JPEG images (issue 4090),False
a9a3396f3d7121a66081279a92cb1fbbd7b20b07,2016-09-28 02:20:50,Tim van der Meij,"Merge pull request #7181 from yurydelendik/mouse-wheel

Simplified wheel processing",True
223a18ccc88787b5d673aa8104a1d313ced8979d,2016-09-28 01:57:42,Yury Delendik,Simplified wheel processing.,False
7f381c8064f7f67668892130f5f7f818658098ca,2016-09-27 23:52:43,Tim van der Meij,"Merge pull request #7661 from Snuffleupagus/bug-956965

Respect the 'ColorTransform' entry in the image dictionary when decoding JPEG images (bug 956965, issue 6574)",True
116ba19dd90c56d729c0d1b163adcece9c291296,2016-09-27 01:25:43,Jonas Jenwald,"Respect the 'ColorTransform' entry in the image dictionary when decoding JPEG images (bug 956965, issue 6574)

Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=956965.
Fixes 6574.",False
a22f0ae82092d9a15c737afd0418412a9bf06500,2016-09-25 16:10:15,Jonas Jenwald,"Only skip parsing a stream in `Parser_makeFilter` when we know for sure that it is empty (PR 6372 follow-up)

For PDF files with multiple `/Filter`s, where the `/Length` entry is zero, we fail to render the file correctly. The reason is that `maybeLength` is `null` for the every filter except the first, and `!maybeLength` is thus truthy.
Hence it seems that we should completely ignore the `/Length` entry and also explicitly check `maybeLength === 0`.

Note that I've not (yet) come across a PDF file with this issue in the wild, but given all the stupid things PDF generators do I wouldn't be surprised if such a file actually exists. In order to prevent a possible future bug, I'm submitting this patch which includes a hand-edited PDF file that we currently cannot render correctly (but e.g. Adobe Reader can).",False
4d2de9b47e7a64d690f6972072344e418965b494,2016-09-25 03:49:42,Jonas Jenwald,Add a reduced `load` test for issue 7665,False
3e77cf6b32188bfe433fa48567418576dcdb7700,2016-09-25 03:48:47,Jonas Jenwald,Prevent an infinite loop in `XRef_fetchUncompressed` for encrypted PDF files with indirect objects in the /Encrypt dictionary (issue 7665),False
6c263c19946af23b723f148d9f05118971e18b36,2016-09-22 15:06:30,Jonas Jenwald,"Merge pull request #7649 from timvandermeij/interactive-forms-tx-comb

Text widget annotations: implement comb support",True
375229d6b9fd6368fb3d216e80a05a130fbd6f02,2016-09-22 00:41:37,Tim van der Meij,"Widget annotations: simplify field flag handling

Directly use the hexadecimal representation, just like the
`AnnotationFlags`, to avoid calculations and to improve readability.
This allows us to simplify the unit tests for text widget annotations as
well.",False
7820f58c490b0c6f09384ab5f369955bb71286d0,2016-09-22 00:39:44,Tim van der Meij,"Merge pull request #7647 from Snuffleupagus/Annotation_appendToOperatorList-pass-in-forms

Ensure that `test/driver.js` actually takes the same `Annotation` code-path as the viewer when running `forms` tests (PR 7633 follow-up)",True
431af8cf85a743f69d5b8e185e82bcfa9ca7559d,2016-09-21 18:52:29,Yury Delendik,"Merge pull request #7652 from Snuffleupagus/resize-event-handler-prevent-error-before-eventBus-initialized

Prevent errors if the 'resize' event is fired before the `eventBus` has been initialized",True
1a2f142a14df452ea5ebc939220c7d9d8b0bb34b,2016-09-21 17:02:17,Jonas Jenwald,"Prevent errors if the 'resize' event is fired before the `eventBus` has been initialized

When opening a PDF file that triggers the browser fallback bar in the Firefox addon/built-in version, e.g. http://web.archive.org/web/20110918100215/http://www.irs.gov/pub/irs-pdf/f1040.pdf (with forms *disabled*), and then reloading the document an error can be thrown.
The reason is that displaying the fallback bar triggers 'resize' events, and they can arrive *before* the viewer has had a chance to run all the necessary initialization code.",False
5f16cbd2c05c1b84007293db9b06e571f0b1befb,2016-09-21 16:03:04,Jonas Jenwald,"When rendering forms, don't use `element.value` since it prevents the AnnotationLayer rasterizer (in `test/driver.js`) from parsing the elements correctly

Without this, the reference test images will have empty fields despite the viewer working as intended.",False
3a105e37f4fa9155ae703261545acdf8221e874e,2016-09-21 15:51:20,Jonas Jenwald,"Ensure that `test/driver.js` actually takes the same `Annotation` code-path as the viewer when running `forms` tests (PR 7633 follow-up)

Unfortunately PR 7633 missed, and I didn't catch it during review, to update `test/driver.js` such that the `forms` tests takes the correct code-path.
This resultet in the `forms` reference test images looking better than they should, and more problematicly differing from the rendering in the viewer.

With this patch, the tests now correctly skip over any `Appearance` streams.
The `forms` tests now highlights quite clearly (e.g. look at `annotation-tx2.pdf`/`annotation-tx3.pdf`) that we cannot just skip the `Appearance` streams when rendering forms. Hence we're going to have to find a way to fix that *before* enabling forms by default, since both display *and* print would look completely wrong otherwise.
Finally, this patch also uncovers one more existing bug that still needs to be fixed, since the current `rasterizeAnnotationLayer` in `test/driver.js` isn't able to handle the contents of e.g. `<input>` and `<textarea>`.",False
ded01356c713e51bb8506622d162feec540f4201,2016-09-21 15:51:20,Jonas Jenwald,"Pass in the `renderInteractiveForms` parameter to `Annotation_appendToOperatorList`, in `Page_getOperatorList`, instead of to the `Annotation` constructor (PR 7633 follow-up)

When debugging issue 7643, I noticed that the `forms` tests currently doesn't look like the rendering in the viewer (with `renderInteractiveForms = true` set).
After scratching my head for a little while, I realized that PR 7633 make the implicit assumption that `Page_getOperatorList` (in `core/document.js`) is called *before* fetching the annotation with `PDFPageProxy_getAnnotations` (in `display/api.js`).

Hence this patch, that changes it so that we instead pass in the `renderInteractiveForms` parameter to `Annotation_appendToOperatorList` to ensure that it's always correctly set.",False
6100ab4b18008d4c2fdf68abb04f34297a234dae,2016-09-21 02:01:10,Tim van der Meij,Text widget annotations: implement comb support,False
15e1ae4e3f70e90e9f9df12a5dff2d9d386cd0f6,2016-09-21 00:26:47,Brendan Dahl,"Merge pull request #7639 from Snuffleupagus/bug-1252420

Replace empty CharStrings with '.notdef' in `Type1Font_wrap` to prevent OTS from rejecting the font (bug 1252420)",True
9e927ded937473c2a268fb549eeabd442bc40e55,2016-09-20 16:21:52,Jonas Jenwald,Update l10n files,False
c0e82dbc38ca7f2222aefbce75252df3b95ca2d9,2016-09-19 04:50:58,Tim van der Meij,"Merge pull request #7642 from Rob--W/crx-type-from-content-disposition-header

Deduct file type from content-disposition if needed",True
ab1b4cec5d409704b0f739d5dc22d05efe0eae5b,2016-09-19 04:32:44,Tim van der Meij,"Merge pull request #7640 from timvandermeij/interactive-forms-rm-global

Interactive forms: remove global PDFJS usage",True
2da2c45889c45b4f3d60a8fde98e02a945c73ad4,2016-09-19 03:42:42,Tim van der Meij,Interactive forms: remove global PDFJS usage,False
2d287c867ec6e05ea7641f00742343ae5dca776e,2016-09-19 02:19:32,Tim van der Meij,"Merge pull request #7645 from Snuffleupagus/TextWidgetAnnotation-double-rendering

Prevent rendering `TextWidgetAnnotation`s in both the `core`/`display` layer (issue 7643)",True
170871ab3d275a99a100e113e6ac4cd3ee3d90c2,2016-09-18 19:12:22,Jonas Jenwald,Prevent rendering `TextWidgetAnnotation`s in both the `core`/`display` layer (issue 7643),False
ae74e1bbd6779357688f77108a504753af3c7c1b,2016-09-18 11:04:18,Rob Wu,"Deduct file type from content-disposition

A user encountered a response that looks like:

URL: some gibberish
Headers:

    Content-Type: application/octet-stream
    Content-Disposition: attachment; filename=""something.pdf""

In the Chrome extension, the ""attachment"" content disposition is almost
always ignored (i.e. the PDF Viewer will try to view it anyway). So we
need to fall back to the Content-Disposition header if the URL check is
inconclusive.",False
f062695d62af719394f0e10ac458ee2440f94eb4,2016-09-17 20:49:47,Tim van der Meij,"Merge pull request #7633 from timvandermeij/interactive-forms-tx-flags

Text widget annotations: support read-only/multiline fields and improve testing",True
dbea302a6e2245abd4e6dd4ac30043754b09056b,2016-09-17 18:54:48,Tim van der Meij,"Text widget annotations: do not render on canvas as well

If interactive forms are enabled, then the display layer takes care of
rendering the form elements. There is no need to draw them on the canvas
as well. This also leads to issues when values are prefilled, because
the text fields are transparent, so the contents that have been rendered
onto the canvas will be visible too.

We address this issue by passing the `renderInteractiveForms` parameter
to the render task and handling it when the page is rendered (i.e., when
the canvas is rendered).",False
adf0972ca57e66202acb489b8782a3b73d510bf5,2016-09-17 18:54:48,Tim van der Meij,"Text widget annotations: improve unit and reference tests

This patch improves the unit tests by testing the support for read-only
and multiline fields. Moreover, we add a reference test to ensure that
the text widgets are not only rendered, but also that their contents are
styled properly.

Finally, we perform minor improvements in `src/core/annotation.js`, for
example adding missing comments.",False
f6965fadc02cc62f873387cfa623f506a68fed38,2016-09-17 18:54:47,Tim van der Meij,"Text widget annotations: support multiline and read-only fields

Moreover, this patch provides us with a framework for handling field
flags in general for all types of widget annotations.",False
aadcbe98c827f3a24e6649239273a313fb7dbf00,2016-09-17 18:09:10,Jonas Jenwald,"Replace empty CharStrings with '.notdef' in `Type1Font_wrap` to prevent OTS from rejecting the font (bug 1252420)

Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1252420.",False
4acd31f51ee96270a6affd51c81f0cc3e897efa4,2016-09-16 21:21:55,Jonas Jenwald,"Merge pull request #7550 from Snuffleupagus/Type1-toUnicode-builtInEncoding-fallback

For embedded Type1 fonts without included `ToUnicode`/`Encoding` data, attempt to improve text selection by using the `builtInEncoding` to amend the `toUnicode` map (issue 6901, issue 7182, issue 7217, bug 917796, bug 1242142)",True
834a7ff329184498a356b0a3168c117968279750,2016-09-15 22:31:11,Brendan Dahl,"Merge pull request #7636 from yurydelendik/rm-refresh

Drops unneeded HTTP refresh header for the extension.",True
503bf45ecaf77395ac31067199335930cbf3cf0f,2016-09-15 19:42:16,Yury Delendik,"Drops unneeded HTTP refresh header for the extension.

Some sites doing that by mistake. Aligning the extension functionality with behavior of other browsers/plugins..",False
26da2d57ce4b379514988b78be75230b2aa1af80,2016-09-15 19:31:07,Tim van der Meij,"Merge pull request #7632 from Snuffleupagus/more-efficient-expandTextDivs

[EnhanceTextSelection] Make `expandTextDivs` more efficient by updating all styles at once instead of piecewise",True
3b94ecf563accb2560b057d854eae9c001e27b7a,2016-09-15 17:40:31,Tim van der Meij,"Merge pull request #7634 from Snuffleupagus/remove-mozDash

Remove the deprecated `mozDash`/`mozDashOffset` canvas 2D context methods",True
8eaa2cbce33b7b76f78941a638fef0ff01399bf1,2016-09-15 13:35:40,Jonas Jenwald,"Remove the deprecated `mozDash`/`mozDashOffset` canvas 2D context methods

According to [MDN](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility) the standard versions of these methods have been supported since Firefox 27, which was released over two and a half years ago. (See the dates in https://wiki.mozilla.org/RapidRelease/Calendar#Past_branch_dates)

Furthermore the non-standard properties are now in the process of being removed, please see https://groups.google.com/forum/#!topic/mozilla.dev.platform/UIudMABegcY.
Hence I don't think that we need to keep the old `moz` prefixed ones as fallback any more.",False
cb5f9df0c8932fe0db9f783ede7893b7efcadcdb,2016-09-15 00:49:28,Jonas Jenwald,"[EnhanceTextSelection] Make `expandTextDivs` more efficient by updating all styles at once instead of piecewise

I intended to provide proper benchmarking results here, as outlined in https://github.com/mozilla/pdf.js/wiki/Benchmarking-your-changes, but after wasting a couple of hours over the weekend getting weird results I gave up.
It appears that there's a lot of, i.e. way too much, variance between subsequent runs of `text` tests for the results to be meaningful.
(Previously I've only benchmarked `eq` tests, so I don't know if the `text` tests has never worked well or if it's a newer problem. For reference, please see the results of back-to-back benchmark runs on the current `master` with a *very* simple manifest file: [link here].)

Instead I used `console.time/timeEnd` in `appendText` and `expandTextDivs` to be able to compare the performance with/without the patch. The entire viewer was (skip-cache) reloaded between measurements, and the result are available here: [link here].
Given the troubles I've had with benchmarking, I've not yet computed any statistics on the results (e.g. mean, variance, confidence intervals, and so on).
However, just by looking at the data I think it's safe to say that this patch first of all doesn't seem to regress the current performance. Secondly it certainly looks *very* likely that this patch actually improves the performance, especially for the one-glyph-per-text-div case (cf. issue 7224).

Re: issue 7584.",False
a7c35025fed8beb8f9b93688fff40497c7ad2de0,2016-09-13 20:22:30,Jonas Jenwald,"Merge pull request #7629 from timvandermeij/interactive-form-unit-tests

Text widget annotations: implement unit testing and sanitize data values",True
323e86c442782f12c137f62f6d530bc920e6fa8d,2016-09-13 18:27:11,Tim van der Meij,Text widget annotations: implement unit testing and sanitize data values,False
356b321f6de06aad8c6341c7331abf78bb3786b2,2016-09-13 17:37:16,Jonas Jenwald,"Fallback to the `StandardEncoding` for Nonsymbolic fonts without `/Encoding` entry (issue 7580)

Even though this patch passes all tests (unit/font/reference) locally, including the new ones that I added in PR 7621, I'm still a bit nervous about modifying the code that choose the fallback encoding for fonts without an `/Encoding` entry.
Note that over the years this code has been changed on a number of occasions, see a possibly incomplete [list here], to deal with various cases of incorrect font data.

According to the PDF specification, see http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#G8.1904184, it seems that we should fallback to the `StandardEncoding` for Nonsymbolic fonts.
There's obviously a risk that fixing this particular issue *could* break other PDF files for which we don't have tests. However I've tried to change the logic as little as possible in this patch, to hopefully reduce possible breakage.

Based on debugging numerous font issue, it seems that a lot of fonts actually set the Symbolic flag, even when they are in fact *not* Symbolic. Fonts actually marked as Nonsymbolic seem to be somewhat less common, which I hope should reduce the risk of the patch somewhat.

Fixes 7580.",False
4d1592883dfa4b039a3ac2ca61c1e131e5e74949,2016-09-13 00:45:47,Tim van der Meij,"Merge pull request #7626 from yashsriv/lint-fix-url-polyfill

Fix lint warnings in URL polyfill",True
4e428c767507bf668cc8bda4680cc8de7ec4d4b9,2016-09-12 20:34:51,Yash Srivastav,Fix lint warnings in URL polyfill,False
03588ccbf7f99133ea78f78ccc7b88c2951988b8,2016-09-12 19:04:05,Tim van der Meij,"Merge pull request #7623 from Snuffleupagus/jpx-error

Change `src/core/jpx.js` to use the `error` utility function instead of using `throw new Error`",True
230b1e327531bda277bd94748b6b7f26eec2c0fb,2016-09-12 16:11:33,Jonas Jenwald,"Merge pull request #7624 from Snuffleupagus/yury-fake-cloning

Adding ""proper"" message port for fake worker.",True
160b17610912c653755d3028ec73b864f24567b1,2016-09-12 14:47:10,Yury Delendik,"Adding ""proper"" message port for fake worker.",False
f620f618870760cb70514be7a0d64fdc9310a25f,2016-09-12 14:35:43,Jonas Jenwald,"Change `src/core/jpx.js` to use the `error` utility function instead of using `throw new Error`

Note that in `parseCodestream` I purposly left the `throw new Error` instances inside of the `try` block, since we don't want to throw any `Errors` while in recovery mode.
Finally somewhat unrelated to the rest of the patch, but I moved the `doNotRecover` variable declaration outside of the `try` block to avoid variable hoisting given that it's accessed inside the `catch` block.",False
6b05cfd1b83b6de22dc4094d934e70fc72c96ae7,2016-09-12 01:12:22,Tim van der Meij,"Merge pull request #7622 from timvandermeij/interactive-forms-text

Text widget annotations: implement maximum length and text alignment",True
325f7afcca30c891ec7be06a5178c012a052bd55,2016-09-12 00:24:10,Jonas Jenwald,"For embedded Type1 fonts without included `ToUnicode`/`Encoding` data, attempt to improve text selection by using the `builtInEncoding` to amend the `toUnicode` map (issue 6901, issue 7182, issue 7217, bug 917796, bug 1242142)

Note that in order to prevent any possible issues, this patch does *not* try to amend the `toUnicode` data for Type1 fonts that contain either `ToUnicode` or `Encoding` entries in the font dictionary.

Fixes, or at least improves, issues/bugs such as e.g. 6658, 6901, 7182, 7217, bug 917796, bug 1242142.",False
be485f59ab3a7f9d044efa09800bd7f13181874c,2016-09-12 00:19:00,Tim van der Meij,"Text widget annotations: implement maximum length and text alignment

Moreover, we refactor the code a bit to extract code that is shared
between the two branches and we only apply text alignment (and create
the array) when it is actually defined, since it's optional and left is
already the default.",False
bf6f5d1cc9d28b0ee6301effd3a6bb62eafbe23a,2016-09-12 00:14:30,Tim van der Meij,"Merge pull request #7621 from Snuffleupagus/more-symbolic-fonts-without-included-encoding-tests

Add a couple more, mostly `text`, reference tests for non-embedded symbolic fonts without included encoding information",True
ae2cc9119b02bb6d81d677f76af9ce9441394262,2016-09-11 20:08:39,Jonas Jenwald,"Add a couple more, mostly `text`, reference tests for non-embedded symbolic fonts without included encoding information

I've started to look into how we can fix issue 7580, but quickly became worried that fixing it could easily mean that we'd trade one fixed PDF file for a multitude of broken ones.

Hence I started going through the history of the code that choose the fallback encoding, and noticed that it has been changed a number of times over the years to deal with various cases of weirdness/errors in non-embedded fonts.
To my relief it turned out that almost all the PRs, please see a possibly incomplete [list here], that changed this code actually included `eq` test-cases.

However, in one case it appears that a PR missed to add a test-case. Furthermore since the fallback encoding may also be the only source for creating a `toUnicode` map, changing the encoding could possibly regress only the text-selection despite a PDF file still rendering correctly.
Therefore, this PR adds one new `eq` test, and also a number of additional `text` tests for PDF files already present in the test-suite.

Note that it's obviously possible that there's a certain overlap between the added tests, but I'd be *a whole lot* more concerned with causing regressions.",False
1fae435e884b31bc3b552fecbbaea8f9fe2961ff,2016-09-11 18:50:36,Jonas Jenwald,"Merge pull request #7546 from Snuffleupagus/issue-7544

Don't duplicate the first entry in the `charCodeToGlyphId` map for CIDFontType2 fonts with a `CIDToGIDMap` that already mapped the first entry to a non-zero `glyphId` (issue 7544)",True
e68f4f855f1cd14228d960ddf4f352e04df38379,2016-09-10 02:25:19,Jeremy Press,fixing 7590 by delaying div shrink after mouse up,False
0b75f63c0300237a9f3176abe76eed08b59b03e6,2016-09-10 02:03:41,Jonas Jenwald,"Don't duplicate the first entry in the `charCodeToGlyphId` map for CIDFontType2 fonts with a `CIDToGIDMap` that already mapped the first entry to a non-zero `glyphId` (issue 7544)

Fixes 7544.",False
b112f9f9f40630b74027bb2328e9a7de5e9a13c8,2016-09-10 01:32:58,Tim van der Meij,"Merge pull request #7600 from Snuffleupagus/issue-7598

Check that Type1C fonts does not actually contain OpenType font files (issue 7598)",True
22c7ff494ae740e3adb1d6248182b421cbf46b84,2016-09-09 20:08:45,Tim van der Meij,"Merge pull request #7609 from Snuffleupagus/enhanceTextSelection-pref-hack

Add a `enhanceTextSelection` preference",True
23a0264a157d98fb1b63ce3ab73691e3f578e182,2016-09-09 19:37:51,Tim van der Meij,"Merge pull request #7619 from Snuffleupagus/SecondaryToolbar-setMaxHeight-events

Only update the `max-height` of the `SecondaryToolbar` when it's actually visible",True
be8a69a52c4ec41eeb8d2a2243836fff8ae63f7c,2016-09-09 11:46:10,Jonas Jenwald,Ensure that we provide the `source` parameter when dispatching the button click events in `SecondaryToolbar` (PR 7313 follow-up),False
6e126b31dca33df2b33856b667a696b8695179d9,2016-09-09 11:46:09,Jonas Jenwald,"Only update the `max-height` of the `SecondaryToolbar` when it's actually visible

There's really no good reason to attempt to adjust the `max-height` of the `SecondaryToolbar` when it's not visible, so let's not do that anymore.
Also, we can listen for the `resize` event in `SecondaryToolbar`, to avoid having to manually call the `max-height` adjust function from various event handlers in `app.js`. Please note that by always adjusting the `max-height` when the toolbar is opened we no longer need the `localized` event, since it was mainly used to set a correct inital `max-height` value.",False
e12c48b73f26e1a2e9b6bc234ea9be950e51403b,2016-09-08 13:52:01,Jonas Jenwald,"Add a `enhanceTextSelection` preference

Please note that this is a hack, but I think that it should be OK for now to atleast get the preference landed. Refer to the code comment for further information.

Re: issue 7584 and PR 7586.",False
ca61ccc533ab9e0d693d32cec2c27ca9e7aabdd7,2016-09-08 13:43:27,Jonas Jenwald,"Merge pull request #7602 from timvandermeij/interactive-forms

Render interactive form (AcroForm) text widget annotations",True
e281ce7c7313633a668719292c9f6dcfff581390,2016-09-07 20:20:44,Tim van der Meij,Enable regression testing for interactive forms,False
e686db250cdb37647f6ba9c05be6b26fc9a07ea6,2016-09-07 19:07:28,Tim van der Meij,"Render interactive form (AcroForm) text widget annotations

This patch is the first step towards implementing support for
interactive forms (AcroForms). It makes it possible to render text
widget annotations exactly like Adobe Reader/Acrobat.

Everything we implement for AcroForms is disabled by default using a
preference, mainly because it is not ready to use yet, but has to
implemented in many steps to avoid complexity. The preference allows us
to work with the code while not exposing the behavior by default. Mainly
storing entered values and printing them is still absent, which would be
minimal requirements for enabling this by default.",False
8dbb5a7c4a63782e24382f9773386d9facbfc557,2016-09-06 17:16:31,Jonas Jenwald,"Merge pull request #7596 from timvandermeij/widget-annotation-cleanup

Improve the structure for widget annotations",True
44b75c01a1f9694943281ed905d4e8275e56ee53,2016-09-06 13:43:11,Jonas Jenwald,"Check that Type1C fonts does not actually contain OpenType font files (issue 7598)

This patch is yet another instalment in the (never ending) series of patches for PDF files that specify completely incorrect Type/Subtype for its fonts. In this case Type1/Type1C, when in fact OpenType would have been correct.

Fixes 7598.",False
576f7420476cfe33c694b491d45c6170cbe93840,2016-09-06 03:56:05,Tim van der Meij,"Improve the structure for widget annotations

Currently, we only support text widget annotations (field type 'Tx')
partially. However, the current code does not make this entirely clear
and does not provide a warning when an unsupported field type is
encountered, making it harder to determine why rendering fails.

Moreover, in the display layer we make no distinction between the
various types of widget annotations, causing the code for text widget
annotations to also be executed for other types of widget annotations in
a fallback situation.

This patch improves the structure of the widget annotation code. In the
core layer, we use the same structure we use for non-widget annotations
in the factory and provide a clear warning when an unsupported type is
encountered. In the display layer, we do the same and split the
`WidgetAnnotationElement` class into two classes, namely
`TextWidgetAnnotationElement` for text widget annotations and
`WidgetAnnotationElement` for other unsupported annotations as a
fallback. From this it clear that we only support text widget
annotations and nothing else.",False
b26af7ee2471305a39239ceed2e171986a8115a6,2016-09-05 20:44:44,Tim van der Meij,"Merge pull request #7595 from Snuffleupagus/api-reject-with-Error

In `display/api.js` ensure that we always reject with an `Error` in `JpegDecode`, and adjust a couple of other rejection sites as well",True
37998076c9d847a7e93b52563425fd7fd391fb53,2016-09-05 20:05:32,Jonas Jenwald,"In `display/api.js` ensure that we always reject with an `Error` in `JpegDecode`, and adjust a couple of other rejection sites as well

In the case where the document was destroyed, we were rejecting the `Promise` in `JpegDecode` with a string instead of an `Error`. The patch also brings the wording more inline with other such rejections.

Use the `isInt` utility function when validating the `pageNumber` parameter in `WorkerTransport_getPage`, to make it more obvious what's actually happening. There's also a couple more unit-tests added, to ensure that we always fail in the expected way.

Finally, we can simplify the rejection handling in `WorkerTransport_getPageIndexByRef` somewhat. (Note that the only reason for using `catch` here is that since the promise is rejected on the worker side, the `reason` becomes a string instead of an `Error` which is why we ""re-reject"" on the display side.)",False
38c85039d17c40239c597044975a1a9fdde1feb6,2016-09-05 00:55:48,Jonas Jenwald,"Merge pull request #7588 from timvandermeij/text-layer-weakmap

Use a `WeakMap` in `src/display/text_layer.js`",True
96593571eb25ab3f55bb09c8717244a74d771ec1,2016-09-04 23:49:31,Tim van der Meij,"Optimize scale calculation in `text_layer.js`

This patch avoids having to calculate the scale twice by saving it in
the properties object.

Moreover, we remove a temporary variable and place parentheses around a
calculation inside a string concatenation.",False
7db1983d6401a206f970b7f658b4ab8433fb7298,2016-09-04 23:41:09,Tim van der Meij,"Merge pull request #7591 from Snuffleupagus/jpeg-error

Change `src/core/jpg.js` to use the `error` utility function instead of `throw`ing",True
a35773ec8c2e547e71370db6de2515592267bbc9,2016-09-04 19:58:23,Jonas Jenwald,"Change `src/core/jpg.js` to use the `error` utility function instead of `throw`ing

This allows us to remove the `try/catch` statements used in `src/core/stream.js` when parsing JPEG images.
As far as I can tell, the only reason for the current usage of plain `throw` is that `jpg.js` originally was external code. Given that this code now lives in our repo, this patch brings the JPEG code more in line with e.g. `src/core/jpx.js` and `src/core/jbig2.js`.",False
d03651efff6ef60221f1530469f43f9dab603e4f,2016-09-04 18:19:01,Tim van der Meij,"Merge pull request #7407 from Snuffleupagus/issue-7406

Assign the `quantizationTables` after parsing the entire JPEG image, to prevent issues when the DQT (Define Quantization Tables) marker is encountered after SOF{n} (Start of Frame) markers (issue 7406)",True
31f6180a08f469ea210e803e462a38a981e475a4,2016-09-04 00:12:21,Tim van der Meij,"Merge pull request #7592 from timvandermeij/revert

Revert the commits from pull request #7586 for causing addon issues",True
eb2ba3287a1a435b3f23cca3a005cd3058dd6c61,2016-09-03 23:57:01,Tim van der Meij,"Revert ""Move the `Preferences` initialization/fetching code to the top of `PDFViewerApplication.initialize`, to enable using them when initializing the viewer components""

This reverts commit ffb876fdf4b4dbc38273609b9b16b7a341decc02.",False
a2525a8ba30402f17bd0906168e4d529389b188e,2016-09-03 23:56:46,Tim van der Meij,"Revert ""Add a `enhanceTextSelection` preference to the viewer""

This reverts commit 15e45d772f181e735713dcf077d03e2fc87e3a45.",False
b3818d5c36696e0f24e04893416f968125fab26e,2016-09-03 23:36:42,Tim van der Meij,"Replace `div.dataset` with a `WeakMap` in `text_layer.js`

This patch improves performance by avoiding unnecessary type
conversions, which also help the JIT for optimizations.

Moreover, this patch fixes issues with the div expansion code where
`textScale` would be undefined in a division. Because of the `dataset`
usage, other comparisons evaluated to `true` while `false` would have
been correct. This makes the expansion mode now work correctly for cases
with, for example, each glyph in one div.

The polyfill for `WeakMap` has been provided by @yurydelendik.",False
461a18a74a3c859e7b3ab303a205e72bf7343388,2016-09-03 22:25:24,Tim van der Meij,"Merge pull request #7586 from Snuffleupagus/viewer-initialize-Preferences-earlier

Move the `Preferences` initialization/fetching code to the top of `PDFViewerApplication.initialize`, and add a `enhanceTextSelection` preference to the viewer",True
b10add14f36923afc0dea590f2fd1248217c7a35,2016-09-03 00:16:36,Tim van der Meij,"Refactor `text_layer.js` to pass the task as a parameter

We pass many parameters to `appendText` while we might as well pass the
`task` object that contains them. This saves a few lines of code and
makes the signature of `appendText` more clear. We do the same for
`expand`, which is useful for the next commit in which we replace
`div.dataset` with a `WeakMap`.

Furthermore, this patch adds a missing parameter to a comment block to
make it clear which parameters remain.",False
15e45d772f181e735713dcf077d03e2fc87e3a45,2016-09-02 18:08:51,Jonas Jenwald,Add a `enhanceTextSelection` preference to the viewer,False
ffb876fdf4b4dbc38273609b9b16b7a341decc02,2016-09-02 18:08:48,Jonas Jenwald,"Move the `Preferences` initialization/fetching code to the top of `PDFViewerApplication.initialize`, to enable using them when initializing the viewer components",False
8522625da243c530d9dce0c1816b790240272ffa,2016-09-01 22:18:04,Tim van der Meij,"Merge pull request #7585 from timvandermeij/text-selection-code-fixes

Minor code style improvements after #7539",True
7c961b6b7acf022d827f578bba099f4fd5cfcd44,2016-09-01 21:37:12,Tim van der Meij,Minor code style improvements after #7539,False
6bb95e3129a58b5c0e2cb1440914f79eb984e498,2016-09-01 21:13:31,Tim van der Meij,"Merge pull request #7539 from jeremypress/fairexpand

[api-minor] Expanding divs to improve selection",True
61a576c41f54916e237b1074f407a4286fccad4f,2016-09-01 19:08:37,Tim van der Meij,"Merge pull request #7583 from Snuffleupagus/Named-Action-GoToPage-select

Change the `GoToPage` Named Action to select the contents of the `pageNumber` input, rather than just focusing the element",True
0db76dc58c3bc096fd49595f46697233c7bb6589,2016-09-01 17:18:49,Jonas Jenwald,"Change the `GoToPage` Named Action to select the contents of the `pageNumber` input, rather than just focusing the element

When clicking on the `pageNumber` input, or when using the keyboard shortcut <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>G</kbd>, the element isn't just focused but its contents is actually *selected* so that the user doesn't need to clear the input before entering a new `pageNumber`.
However, the `GoToPage` named action is only using `focus`, so let's change this to be consistent.

The following document can be used for testing: http://www2.informatik.uni-freiburg.de/~frank/ENG/beamer/example/Beamer-class-example1.pdf#zoom=page-fit

[screeenshot]",False
1ceeb4d17b6d99dd515729f2921e9d035a76bd9d,2016-08-31 22:24:52,Jeremy Press,added text enhancement regression tests,False
6faa84abdb836dad6fa64bca05671bb42fab7d75,2016-08-31 22:24:52,Jeremy Press,"Continuing fairexpand #6663
1. Expanding divs to improve text selection. (Yury)
2. Adding enhanceTextSelection as an option.
3. Moving feature functionality from text_layer_builder.js to text_layer.js.
4. Added expandTextDivs method to only load expanded divs on first click, and only show on subsequent clicks",False
3ac23200ba346840364311f7df241fbc67171ef8,2016-08-31 22:12:07,Jonas Jenwald,"Add a reduced test-case for issue 7406

The PDF file contains an image that we're allowed to use, since it's just the PDF.js logo.
The logo image was simply inverted (so that it requires a /Decode entry in the image dictionary that triggers the use of `jpg.js` instead of the browser), converted to JPEG, and finally edited by hand to change the order of the DQT/SOF{n} markers.",False
1bbc694ac3ce7d949f1ad520abed40bdbd0fe04b,2016-08-31 22:12:05,Jonas Jenwald,"Assign the `quantizationTables` after parsing the entire JPEG image, to prevent issues when the DQT (Define Quantization Tables) marker is encountered after SOF{n} (Start of Frame) markers (issue 7406)

This is a tentative patch that fixes 7406.",False
23b13d368e18c92d8ea1e1b2aec2696c7ebbeb20,2016-08-31 19:03:49,Tim van der Meij,"Merge pull request #7579 from Snuffleupagus/updateUIToolbar-correctly-disable-zoom-buttons

Ensure that the zoom buttons are disabled correctly if the `scale` is smaller/larger than `MIN_SCALE/MAX_SCALE` in `PDFViewerApplication._updateUIToolbar`",True
f3b7fa091dadd84bf51417152450fb0c01e2e9c8,2016-08-31 16:58:38,Jonas Jenwald,"Ensure that the zoom buttons are disabled correctly if the `scale` is smaller/larger than `MIN_SCALE/MAX_SCALE` in `PDFViewerApplication._updateUIToolbar`

In the `zoom{In, Out}` functions in `PDFViewerApplication`, we prevent the zoom value from becoming smaller/larger than `MIN_SCALE/MAX_SCALE`.
However, if the user sets the zoom level through the hash parameter the zoom buttons might not be correctly disabled; try http://mozilla.github.io/pdf.js/web/viewer.html#zoom=10.

Note that this issue has been present since ""forever"", but given that the solution is so simple I think that we should just fix this. (I'm also fixing a stupid typo I previously made in the JSDoc comment.)",False
ffa99397ad598a8a16821e7627b09a00fb298f31,2016-08-31 01:51:41,Yury Delendik,"Merge pull request #7387 from Snuffleupagus/issue-5808

Attempt to ignore multiple identical Tf (setFont) commands in `PartialEvaluator_getTextContent` (issue 5808)",True
a75b0204237bedfca219e6c320fb4b9f75083db4,2016-08-28 19:50:21,Tim van der Meij,"Merge pull request #7575 from timvandermeij/update-l10n

Update translations",True
d1ca5c11ec8b1258a7d692e102e9eb2067d440df,2016-08-28 19:44:03,Tim van der Meij,Update translations,False
b0a0bef267f54d2f22dd41b1840de21402234760,2016-08-28 19:17:40,Tim van der Meij,"Merge pull request #7440 from Snuffleupagus/bug-874482

 Prevent destinations with bad left/top values from scrolling the wrong page into view (bug 874482)",True
f520616e0018827148336c3048a0599dd2a915af,2016-08-28 03:53:59,Tim van der Meij,"Merge pull request #7570 from Snuffleupagus/issue-7569

Create a fallback annotation `id` for entries in `Annots` dictionaries that are not indirect objects (issue 7569)",True
fb6fde9d009eb05beb9a1da0366d6a744a61f410,2016-08-28 02:59:06,Tim van der Meij,"Merge pull request #7574 from timvandermeij/unit-test-font-cleanup

Remove unused globals from fonts unit test file",True
b81d661556bfece7083e32bd698a6db14e8b3048,2016-08-28 02:50:03,Tim van der Meij,Remove unused globals from fonts unit test file,False
d944c320b4add91a43de2e27efd4e3d1caf61377,2016-08-28 02:44:55,Tim van der Meij,"Merge pull request #7540 from Snuffleupagus/ProblematicCharRanges-unit-test

Add a unit-test to check that `ProblematicCharRanges` contains valid entries",True
8aa9b790beb46458536179548ea173bf393d9eb2,2016-08-28 02:15:42,Tim van der Meij,"Merge pull request #7573 from Snuffleupagus/mobile-viewer-async-open/close

[mobile-viewer] Add an async `close` method to the example, and change `open` to also be async (issue 7571)",True
65e9ff68aac9770f49bf6a2ddc889bee3a254f49,2016-08-27 16:27:34,Jonas Jenwald,"[mobile-viewer] Add an async `close` method to the example, and change `open` to also be async (issue 7571)

Since the `mobile-viewer` example is based on the old FirefoxOS/B2G PDF viewer, it didn't need to have the same kind of `open/close` methods as the default viewer.
However, now that it has been re-purposed as a simple `mobile-viewer` example, it seems like a good idea to ensure that it has proper asynchronous `open/close` methods.

Fixes 7571.",False
088ce6c00919e1b29fcaa5ab42d71d038054a522,2016-08-27 15:26:00,Jonas Jenwald,"Add a unit-test to check that `ProblematicCharRanges` contains valid entries

When adding new entries to `ProblematicCharRanges`, you have to be careful to not make any mistakes since that could cause glyph mapping issues.
Currently the existing reference tests should probably help catch any errors, but based on experience I think that having a unit-test which specifically checks `ProblematicCharRanges` would be both helpful and timesaving when modifying/reviewing changes to this code.

Hence this patch which adds a function (and unit-test) that is used to validate the entries in `ProblematicCharRanges`, and also checks that we don't accidentally add more character ranges than the Private Use Area can actually contain.
The way that the validation code, and thus the unit-test, is implemented also means that we have an easy way to tell how much of the Private Use Area is potentially utilized by re-mapped characters.",False
78889646c8329fa9fc1ad9d8a92049df3c0f1516,2016-08-27 14:26:16,Jonas Jenwald,"Create a fallback annotation `id` for entries in `Annots` dictionaries that are not indirect objects (issue 7569)

According to the PDF specification, see http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#page=86, entries in `Annots` dictionaries should be indirect objects, but obviously there're PDF generators that ignore this.

Fixes 7569.",False
0e20d44fefb296e8f08c7f7d23cb9662108db974,2016-08-24 22:19:17,Brendan Dahl,"Merge pull request #7563 from brendandahl/upstream-l10n

Upstream l10n changes from Bug 1259859.",True
8cf32cde6c9271b48d678b811697c4d1afbd80c7,2016-08-24 22:17:36,Brendan Dahl,Upstream l10n changes from Bug 1259859.,False
e5baf7ec368620c5884e258462e1fd6a7fb13576,2016-08-23 00:06:54,Jonas Jenwald,"Merge pull request #7330 from Snuffleupagus/issue-7188

Try to prevent `CanvasGraphics_getSinglePixelWidth` from intermittently returning incorrect values in Firefox (issue 7188)",True
5379749d4be771f0dd22b21c698fe07db56ef036,2016-08-22 23:30:24,Jonas Jenwald,"Try to prevent `CanvasGraphics_getSinglePixelWidth` from intermittently returning incorrect values in Firefox (issue 7188)

Fixes 7188.",False
200c8575aba8245e6c8821cf063f332c51506c6f,2016-08-22 16:59:40,Tim van der Meij,"Merge pull request #7555 from Snuffleupagus/primitives-async-unit-tests

Add unit-tests for asynchronous methods in `primitives.js`",True
db1526c59e6eefd6c3b6ea489d0a627a6a785bdc,2016-08-21 22:14:58,Jonas Jenwald,"Add unit-tests for asynchronous methods in `primitives.js`

In PR 7520, I missed the fact that we currently have no unit-tests for `Dict_getAsync`.",False
a9c37c242e98eddca0d49ac7bcf201535eaedeb8,2016-08-18 03:05:39,Brendan Dahl,"Merge pull request #7521 from brendandahl/bug-1291709

Bug 1291709 - PdfjsChromeUtils.jsm leaks browser.xul windows.",True
ef45085f10763f5fdd10cbf7fd160da9dba6bc6d,2016-08-18 01:05:12,Tim van der Meij,"Merge pull request #7548 from Rob--W/window-print-avoid-microtask

Avoid window.print in a microtask",True
b4c8814fc9b346cce38b224389bf4cf971a752b8,2016-08-17 19:18:42,Tim van der Meij,"Merge pull request #7534 from Snuffleupagus/isName-name-check

Add a parameter to the `isName` function that enables checking not just that something is a `Name`, but also that the actual `name` properties matches",True
76d29759c5fc023a93281064914f3f642275b6c7,2016-08-17 18:22:27,Rob Wu,Avoid window.print in a microtask,False
084fc517fea2e9d59b9afb1decc87a65efd6e07d,2016-08-17 17:16:09,Jonas Jenwald,"Merge pull request #7021 from Snuffleupagus/bug-1250079

Add a `recoveryMode` that suppresses errors from the `Parser`, and utilize it when searching for the main trailer in `XRef_indexObjects` (bug 1250079)",True
544d29f5cbf085012d4365d9751cc88a1f2e9aba,2016-08-17 16:07:35,Jonas Jenwald,"Add a `recoveryMode` that suppresses errors from the `Parser`, and utilize it when searching for the main trailer in `XRef_indexObjects` (bug 1250079)

Instead of having `Parser_getObj` fail unconditionally for the referenced PDF file, this patch attempts to let searching for the main trailer continue even if there are errors.

Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1250079.",False
83ce6f0b6de3ca33d4a6add556e66edf8d5033ea,2016-08-10 14:45:08,Jonas Jenwald,"Adjust the (applicable) existing `isName` callsites to use the new `isName(v, name)` version of the function",False
af636aae9699ff95885c72c3a81060ab225e92b5,2016-08-10 14:45:03,Jonas Jenwald,"Add a parameter to the `isName` function that enables checking not just that something is a `Name`, but also that the actual `name` properties matches

This is similar to the existing `isCmd` and `isDict` functions, which already support similar kind of checks.
With the updated `isName` function, we'll be able to simplify many callsites from: `isName(someVariable) && someVariable.name === 'someName'` to: `isName(someVariable, 'someName')`.",False
94089960c04d7f59eb637d6dc63944115bbc539d,2016-08-08 23:23:01,Brendan Dahl,"Merge pull request #7532 from Snuffleupagus/PDFViewer-remove-obsolete-onAfterDraw-comment

Remove an obsolete comment for `onAfterDraw` in pdf_viewer.js",True
31cd23a6df2a5dde7577642ae3f8b09806a8b8db,2016-08-08 17:19:31,Jonas Jenwald,"Remove an obsolete comment for `onAfterDraw` in pdf_viewer.js

With the viewer code now being split into various components/files, having an obsolete comment in `PDFViewer` that references thumbnails despite there being no other mentions of them in the entire file seems strange.

*Note:* This comment is simply a left-over from older versions of PDF.js, where the *entire* default viewer code was placed in just one file (and where we unconditionally created thumbnails, regardless whether they were visible or not).",False
076e25f1ca6b540396c68a684248820bea1a6b1e,2016-08-07 19:50:18,Jonas Jenwald,"Prevent destinations with bad left/top values from scrolling the wrong page into view (bug 874482)

There are PDF generators which create destinations with e.g. too large top values, which cause the wrong page to be scrolled into view because the offset becomes negative.
By ignoring negative offsets, we can prevent this issue, and get a similar behaviour as in Adobe Reader.

However, since we're also using `PDFViewer_scrollPageIntoView` in more cases than just when links (in the document/outline) are clicked, the patch adds a way to allow the caller to opt-out of this behaviour.
In e.g. the following situations, I think that we still want to be able to allow negative offsets: when restoring a position from the `ViewHistory`, when the `viewBookmark` button is used to obtain a link to the current position, or when maintaining the current position on zooming.

Rather than adding another parameter to `PDFViewer_scrollPageIntoView`, I've changed the signature to take an parameter object instead. To maintain backwards compatibility, I've added fallback code enclosed in a `GENERIC` preprocessor tag.

Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=874482.",False
6cb77d65809babc94f96e7758789b29da8769a91,2016-08-07 19:50:18,Xiliang Chen,fix outline may jump to previous page issue,False
ca81f4df1897322416ede1462abdc3e0a523bdea,2016-08-07 18:13:31,Tim van der Meij,"Merge pull request #7529 from Snuffleupagus/setCurrentPageNumber-warn-on-outOfBounds

Log an error when the value passed to `set currentPageNumber` is out of bounds (PR 7502 followup)",True
7706cfa9fe5611442c268327d69f5d76b2a75ef0,2016-08-07 17:54:09,Jonas Jenwald,"Log an error when the value passed to `set currentPageNumber` is out of bounds (PR 7502 followup)

With PR 7502 we no longer dispatch an event when the `val` is out of bounds, so to better communicate why nothing happens this patch logs an error in that case (similar to the logging of errors when trying to set an invalid scale).

The way that the default viewer is currently implemented, means that e.g. keyboard short-cuts could trigger the new error. Hence this patch also adds the necessary validation code, both to `app.js` and `pdf_link_service.js` to prevent unnecessary errors.",False
ac7b6756036758baf0150c4240e64ae92bfab4c3,2016-08-06 16:50:11,Tim van der Meij,"Merge pull request #7526 from Snuffleupagus/PDFViewer_pagesRotation-validation

Add validation of the `rotation` argument passed to `set pagesRotation` in `PDFViewer`",True
50aeb00adfac77114632a4befdccaa02d1e01bcf,2016-08-06 16:31:17,Jonas Jenwald,"Add validation of the `rotation` argument passed to `set pagesRotation` in `PDFViewer`

*Similar to the validation done when setting page/scale.*",False
3a1e7945125678756fdb14fadcd49692057c9ab4,2016-08-06 16:14:06,Jonas Jenwald,Update l10n files,False
f16b2d468a3b01d10bea120bba16453e073004b4,2016-08-04 18:00:56,Tim van der Meij,"Merge pull request #7520 from Snuffleupagus/primitives-more-unit-tests

Add more unit-tests for `primitives.js`",True
815c3a822f66c87840f41a488ccdc53ef369d1d9,2016-08-04 02:48:40,Brendan Dahl,Bug 1291709 - PdfjsChromeUtils.jsm leaks browser.xul windows.,False
39412e5acec1edcf97954029b20154788eccdb18,2016-08-04 01:42:51,Yury Delendik,"Merge pull request #7519 from timvandermeij/remove-amo

Stop building the AMO extension",True
d70e07fb90715807f3585aa60edf631778e8ae6e,2016-08-03 20:34:12,Jonas Jenwald,Add more unit-tests for `primitives.js`,False
79db293c360bc7a84e3f1f4e8a5d56e3a5bdba7a,2016-08-03 18:14:18,Tim van der Meij,"Stop building the AMO extension

The AMO extension is no longer supported as PDF.js is integrated in
Firefox. It was already removed from the bot's preview messages around a
year ago and has not been used or updated since.",False
77c6ed53890fbfc8918e5e03afe4a2f137b73e04,2016-07-28 01:07:52,Jonas Jenwald,"Attempt to ignore multiple identical Tf (setFont) commands in `PartialEvaluator_getTextContent` (issue 5808)

This patch improves the performance of issue 5808, but I'm not sure if it's enough to call it fixed. On average, this patch reduces the number of textLayer div's by a factor of 3, and it also reduces the time spend in `getTextContent` by a factor of ~2.

The PDF file is generated by `Scribus PDF`, which for reasons I cannot understand is placing redundant `Tf` commands before *every* showText command.
Note how the PDF file also contains lots of (basically) identical fonts, but with slightly different names, which causes unnecessary font-switching. This causes some unnecessary breaking of textLayer div's, but this issue cannot be easily worked around.",False
19105f06699668a7cbd3707679aabdb6bd5ddc76,2016-07-28 00:27:52,Yury Delendik,"Merge pull request #7511 from timvandermeij/b2g-example

Convert the B2G viewer from an extension to an example",True
a20f814265cb9fea8f2c613a3d8c93b3e6525df0,2016-07-27 21:01:52,Tim van der Meij,"Refactor the mobile viewer example

This mostly removes B2G-specific code and adds the styles from the B2G
components.",False
a9dd2ab0abbcb4836119d2ea23706231fff36234,2016-07-27 21:01:52,Tim van der Meij,Move B2G viewer to the examples folder,False
b25bc2749886eeaeb0df20c4b496006aeaacae44,2016-07-27 21:01:52,Tim van der Meij,Remove B2G extension building target,False
df0d21701a7228924eb364c686e8a512c7d72ab2,2016-07-27 19:29:55,Tim van der Meij,"Merge pull request #7510 from timvandermeij/b2g-fix

Remove `previousPageNumber` from the B2G viewer",True
e65606d271a097ec81c6a14b0c751fc9cc81835d,2016-07-27 19:25:40,Tim van der Meij,Remove `previousPageNumber` from the B2G viewer,False
0925503ce7c248d0cf92166f8733dfac01763ec4,2016-07-27 19:05:31,Tim van der Meij,"Merge pull request #7502 from Snuffleupagus/pagechanging-outOfBounds

Remove the `previousPageNumber` parameter from the `pagechanging`/pagechange` events, and stop dispatching the events if the input is out of bounds",True
a02e2686b94af387c62231acbcf0542a7023e8cd,2016-07-27 19:04:24,Yury Delendik,"Merge pull request #7475 from Snuffleupagus/api-getTextContent-combineTextItems

[api-minor] Add a parameter to `PDFPageProxy_getTextContent` that controls whether `PartialEvaluator_getTextContent` will attempt to combine same line text items",True
336b26a39dc304fc589d0cfb85c52e7d4ee85112,2016-07-25 19:55:29,Tim van der Meij,"Merge pull request #7506 from Snuffleupagus/annotation-missing-subtype

Prevent errors when parsing Annotations with missing (or invalid) /Subtype entries (issue 7446)",True
f4b2ad4ec2153fcc3fd071980c9d19e70d2c8d6f,2016-07-25 18:59:37,Tim van der Meij,"Merge pull request #7505 from timvandermeij/travis-ci-update

Use the latest stable Node.js version on Travis CI and enable caching",True
7bbc2f079a045f04a9bd907f817045fd13cd7b80,2016-07-25 18:47:30,Tim van der Meij,Use the latest stable Node.js version on Travis CI and enable caching,False
558a22cd02186965ba5191aad951c6ef94acd98c,2016-07-25 17:29:26,Jonas Jenwald,"Prevent errors when parsing Annotations with missing (or invalid) /Subtype entries (issue 7446)

Note that I used a separate warning message for this case, instead of utilizing the same one as in the unsupported subtype case, to more clearly indicate that the PDF file itself is to blame rather than PDF.js.

Fixes 7446.",False
b7cb44af88f0bc2da89b893d5db6b1fe5bb8281f,2016-07-25 13:38:53,Jonas Jenwald,"Remove the `previousPageNumber` parameter from the `pagechanging`/pagechange` events, and stop dispatching the events if the input is out of bounds

This patch attempts to cleanup a couple of things:
 - Remove the `previousPageNumber` paramater. Prior to PR 7289, when the events were dispatched even when the active page didn't change, it made sense to be able to detect that in an event listener. However, now that's no longer the case, and furthermore other similar events (e.g. `scalechanging`/`scalechange`) don't include information about the previous state.

 - Don't dispatch the events when the value passed to `set currentPageNumber` is out of bounds. Given that the active page doesn't change in this case, again similar to PR 7289, I don't think that the events should actually be dispatched in this case.

 - Ensure that the value passed to `set currentPageNumber` is actually an integer, to avoid any issues (note how e.g. `set currentScale` has similar validation code).

Given that these changes could possibly affect the PDF.js `mochitest` integration tests in mozilla-central, in particular https://dxr.mozilla.org/mozilla-central/source/browser/extensions/pdfjs/test/browser_pdfjs_navigation.js, I ran the tests locally with this patch applied to ensure that they still pass.",False
5678486802f24a104444d311aee0572e1153fe85,2016-07-23 05:51:47,Brendan Dahl,"Merge pull request #7347 from Snuffleupagus/evaluator-more-Ref_toString

Slightly refactor the `fontRef` handling in `PartialEvaluator_loadFont` (issue 7403 and issue 7402)",True
50d6e4f1475a4cb62978a64a398828dc96f075f0,2016-07-23 03:03:32,Brendan Dahl,"Merge pull request #7447 from Snuffleupagus/buildToUnicode-notdef

Ignore .notdef in the `differences` array when building a fallback `toUnicode` map in `PartialEvaluator_buildToUnicode` (issue 5256)",True
390c02a3e952945a8d112a6e3c4f2f15f820cbb9,2016-07-21 19:34:07,Jonas Jenwald,"Attempt to cache fonts that are direct objects (i.e. `Dict`s), as opposed to `Ref`s, to prevent re-rendering after `cleanup` from breaking (issue 7403 and issue 7402)

Fonts that are not referenced by `Ref`s are very uncommon in practice, but it can unfortunately happen. In this case, we're currently not caching them in the usual way, i.e. by `Ref`, which leads to failures when a page is rendered after `cleanup` has run.
The simplest solution would have been to remove the `font.translated` workaround, but since this would have meant loading these kind of fonts over and over, the patch attempts to be a bit clever about this situation.

Note that if we instead loaded fonts per *page*, instead of per document, this issue wouldn't have existed.",False
4fe891c5e7fc533f4c73ec81ff4ccd4d250e07d7,2016-07-21 19:34:07,Jonas Jenwald,Add a reduced test-case for issue 7403,False
2e9cd3ea64997ff43904082f1ec07244abf38e46,2016-07-21 19:33:33,Jonas Jenwald,"Slightly refactor the `fontRef` handling in `PartialEvaluator_loadFont` (issue 7403 and issue 7402)

Originally, I was just going to change this code to use `Ref_toString` in a couple more places. When I started reading the code, I figured that it wouldn't hurt to clean up a couple of comments. While doing this, I noticed that the logic for the (rare) `isDict(fontRef)` case could do with a few improvements.

There should be no functional changes with this patch, but given the added reference checks, we will now avoid bogus `Ref`s when resolving font aliases. In practice, as issue 7403 shows, the current code can break certain PDF files even if it's very rare.

Note that the only thing that this patch will change, is the `font.loadedName` in the case where a `fontRef` is a reference *and* the font doesn't have a descriptor. Previously for `fontRef = Ref(4, 0)` we'd get `font.loadedName = 'g_d0_f4_0'`, and with this patch `font.loadedName = g_d0_f4R`, which is actually one character shorted in most cases. (Given that `Ref_toString` contains an optimization for the `gen === 0` case, which is by far the most common `gen` value.)

In the already existing fallback case, where the `fontName` is used to when creating the `font.loadedName`, we allow any alphanumeric character. Hence I don't see how (as mentioned above) e.g. `font.loadedName = g_d0_f4R` would be an issue here.",False
10f9f11ec4cb1221c8be5335f1bf5aed19c558c0,2016-07-21 18:09:19,Tim van der Meij,"Merge pull request #7490 from Snuffleupagus/issue-7426

Don't map glyphs to the Lepcha Unicode block (issue 7426)",True
f297e4d17c5c0ac3dc26b585afc1918ff87ee8de,2016-07-19 17:08:57,Jonas Jenwald,"[api-minor] Add a parameter to `PDFPageProxy_getTextContent` that controls whether `PartialEvaluator_getTextContent` will attempt to combine same line text items

From the discussion in issue 7445, it seems that there may be cases where an API consumer would want to get the text content as is, without combined text items.",False
9228a04061a53a7882ed6f6a1ee262fb56b46b30,2016-07-19 14:01:26,Jonas Jenwald,"Merge pull request #7493 from Snuffleupagus/issue-7492

Catch errors and continue parsing in `parseCMap` (issue 7492)",True
90d19de935def13faa056ba0c754bd76353ba62f,2016-07-18 20:09:56,Jonas Jenwald,"Catch errors and continue parsing in `parseCMap` (issue 7492)

After PR 7039, the PDF file in issue 7492 no longer renders at all, but note that text selection wasn't working correctly previously.

The problem with the PDF file in issue 7492 is that the `cMap`, in the `toUnicode` entry in the font, contains an invalid name:
```
/CMapName /-usr-share-fonts-truetype-Panton-Panton Family-Fontfabric - Panton.otf,000-UTF16 def
```
When we parse that line, things obviously break because there are spaces present in the wrong places.
To avoid that issue, the patch simply lets `parseCMap` continue when errors are encountered, to try and recover usable data. Note that by not aborting immediatly when an error is encountered, we are also able to fix the text selection.

Obviously, it could be argued that we should just immediatly reject a corrupt `cMap`. But given that they usually are correct, it seems that trying to recover as much data as possible from corrupt one can only be a good thing for both glyph mapping and text selection.

Fixes 7492.",False
0da97ad2a03b5d0a100677770fbf7bc9a759c298,2016-07-17 23:19:11,Tim van der Meij,"Merge pull request #7485 from Snuffleupagus/resetCurrentPageView

Ensure that we don't reset the current page view if the user inputs an invalid page number (PR 7289 follow-up)",True
3ab68f2e062724104b247963add1517090833a4e,2016-07-17 23:10:17,Tim van der Meij,"Merge pull request #7489 from ka7/spelling

trivial spelling fixes",True
64783c8b6e662555b2976d2fa103f8d273f59bf1,2016-07-17 20:23:36,Jonas Jenwald,"Don't map glyphs to the Lepcha Unicode block (issue 7426)

In the PDF file in the issue, some of the glyphs end up being mapped to the Lepcha Unicode block; see https://en.wikipedia.org/wiki/Lepcha_(Unicode_block).
This didn't use to matter, but after HarfBuzz updates that improved support for Lepcha fonts, in particular https://bugzilla.mozilla.org/show_bug.cgi?id=1249861, some glyphs are now moved horizontally.
To avoid that, this patch adds the Lepcha block to the list of Unicode ranges that we skip when building the glyph mapping.

Fixes 7426.",False
6f03f62327520d5c041fe12c69e933b9d64ba5c8,2016-07-17 18:03:41,klemens,trivial spelling fixes,False
11381cdb0f3828d338ac9303d97b030d3dd2cebe,2016-07-15 15:18:37,Jonas Jenwald,Update l10n files,False
9f34700e0d242fa4d24a16564014ed0f8bee08c6,2016-07-14 16:16:33,Jonas Jenwald,"Ensure that we don't reset the current page view if the user inputs an invalid page number (PR 7289 follow-up)

After PR 7289, we'll now reset the current page view in cases where I don't think we should. To avoid this, this patch ensures that we'll not modify the position when the page number is out-of-bounds.

**STR:**
1. Open http://mozilla.github.io/pdf.js/web/viewer.html#page=1&zoom=auto,-98,696
2. Enter an invalid number, e.g. `1000`, in the `pageNumber` input.

**ER:**
The current position in the document shouldn't change, since the page number wasn't valid.

**AR:**
The document resets to the top of the page `1`.",False
1695893526126599a64c29a14f38827a5946fff5,2016-07-10 17:16:54,Tim van der Meij,"Merge pull request #7478 from PeterDaveHelloKitchen/image-optimize

optimize png images using zopflipng",True
625d637297102c0cb09f93a314229cfcb5b06965,2016-07-10 15:19:16,Peter Dave Hello,optimize png images using zopflipng,False
223adf4656dd8e67d00c040c423bb4569ef7921a,2016-07-10 00:15:46,Tim van der Meij,"Merge pull request #7481 from Snuffleupagus/firefox-addon-remove-compatibility

[Firefox addon] Remove compatibility.js",True
bd562bb39c56993ea5e96ac3e0d016a5e015f14d,2016-07-10 00:10:24,Tim van der Meij,"Merge pull request #7480 from Snuffleupagus/remove-MozBlobBuilder-fallback

Remove the obsolete `MozBlobBuilder` fallback from the `createBlob` utility function",True
a69e862bc48cd0a83275e91660426348d4b2f4bc,2016-07-09 21:29:06,Jonas Jenwald,"[Firefox addon] Remove compatibility.js

This was added in PR 4865, but hasn't been necessary for quite some time now (and the minimum version is currently Firefox 38 for the addon).",False
8f4ec669d0efa1cf192165626b6d45548531aba8,2016-07-09 20:07:05,Jonas Jenwald,"Remove the obsolete `MozBlobBuilder` fallback from the `createBlob` utility function

`MozBlobBuilder` has been obsolete since Firefox 14, so there's no reason to keep this code around anymore.",False
43613f19f99a789cc951a1931463cac1007de278,2016-07-09 19:21:25,Tim van der Meij,"Merge pull request #7466 from Snuffleupagus/PDFViewerApplication-open-remove-fallback-args

Remove handling of fallback arguments from `PDFViewerApplication.open`",True
d728651455a5be63300b3c2c265740cce8b71197,2016-07-09 19:04:59,Tim van der Meij,"Merge pull request #7479 from Snuffleupagus/recoverGlyphName-warn-to-info

Change the `warn` to `info` in `recoverGlyphName` to reduce the console spam",True
51e46fa1a79ce69bb48be5d8b047e7213e22482c,2016-07-09 15:38:41,Jonas Jenwald,"Change the `warn` to `info` in `recoverGlyphName` to reduce the console spam

After PR 7441, where `recoverGlyphName` is used a lot more than before, many PDF files will generate a lot of warnings the console. For normal usage, compared to debugging/development, this is probably more annoying than helpful.",False
bca1aebeac2278504e9b31e0857ef483056e7821,2016-07-08 23:04:39,Yury Delendik,"Merge pull request #7458 from Snuffleupagus/updateUIToolbar

Consolidate updating of various Toolbar state (e.g. page and scale) in one method in `PDFViewerApplication`",True
b87676078cdc753a80468d1445d979050a3ee386,2016-07-08 23:04:09,Yury Delendik,"Merge pull request #7455 from Snuffleupagus/issue-7448

Ensure that the necessary src/* dependencies are loaded before the viewer, when it's run with `gulp server` (issue 7448)",True
b6826a46a849bb3c94d64c18f9e1b37c2f2cc354,2016-07-07 04:33:40,Tim van der Meij,"Merge pull request #7453 from simoncpu/master

Expose the text widget's maximum length.",True
10cd37cfb22395e395b64b14445c004b592643b3,2016-07-07 01:56:38,Tim van der Meij,"Merge pull request #7473 from Snuffleupagus/links-mxr-to-dxr

Update `mxr.mozilla.org` links to point to `dxr.mozilla.org` instead",True
1f3f4a8dd723f452a5ecd69eb39e74388efc2e4c,2016-07-07 01:32:21,Brendan Dahl,"Merge pull request #7441 from Snuffleupagus/issue-7439

Fallback to attempt to recover standard glyph names when amending the `charCodeToGlyphId` with entries from the `differences` array in `type1FontGlyphMapping` (issue 7439)",True
87229a086fc2b37e89fad0ee33fe17172b153cae,2016-07-06 15:12:16,Jonas Jenwald,"Update `mxr.mozilla.org` links to point to `dxr.mozilla.org` instead

Given that MXR has been officially retired, see https://groups.google.com/forum/#!topic/mozilla.dev.platform/_k-ditFrne4, we've got a couple of links that are no longer working.",False
b9e903808f5932225c6055c7cdbda1f7b39954f0,2016-07-05 00:03:56,Tim van der Meij,"Merge pull request #7467 from Snuffleupagus/getAttachments-unit-test

Add a `getAttachments` unit-test for a PDF file that actually contains attachments",True
72c1df726e516941df2a672aa58d1d96a7844100,2016-07-02 16:43:30,Jonas Jenwald,Add a `getAttachments` unit-test for a PDF file that actually contains attachments,False
cb6a7e5503cd1b7a8cc42596c3e2f1c8039f0ba1,2016-07-02 15:01:32,Jonas Jenwald,"Remove handling of fallback arguments from `PDFViewerApplication.open`

The method signature was improved in PR 6546, which was included in the `1.2.109` release from last November.
Hence I think that we should now be able to remove the fallback code for the old method signature. Note that this patch now throws an `Error` in `GENERIC` builds, to clearly indicate that the `open` callsite must be modified.",False
f082407ab4c6342bd72ade8c3745f12cf445bbad,2016-07-01 18:39:08,Yury Delendik,"Merge pull request #7463 from Snuffleupagus/fix-bug-1268749-fallout

Add back moz-specific fullscreen support code for ´MOZCENTRAL` builds (bug 1268749, PR 7273 follow-up)",True
2f127df97b3eb9db0cd916fe8856a6b5902cf992,2016-07-01 17:41:58,Jonas Jenwald,"Add back moz-specific fullscreen support code for ´MOZCENTRAL` builds (bug 1268749, PR 7273 follow-up)

In PR 7273, we simplified the `MOZCENTRAL` specific check for fullscreen support. Unfortunately I've just, by coincidence, found out about https://bugzilla.mozilla.org/show_bug.cgi?id=1268749, which disabled the unprefixed fullscreen support in release versions of Firefox. If we do nothing, this will lead to Presentation Mode being unavailable in future Firefox releases.

This patch should fix things for now, and I'm afraid that we'll need to uplift it to Firefox 49 as well.",False
3cba2cb2584028c7a1f18a33a62898a80fe74608,2016-06-30 04:24:11,Yury Delendik,Fixes SeaMonkey version,False
e2e657e44f9d033e1925099a80be707b57bfa807,2016-06-30 03:41:19,Brendan Dahl,"Merge pull request #7390 from Snuffleupagus/issue-7180

Add upper-case `I` as a possible space replacement fallback in `Font.spaceWidth` to improve text-selection (issue 7180)",True
dd0fe10a52bd23a445e1f5cc58a3639fe82a6e79,2016-06-30 02:06:45,Jonas Jenwald,"Consolidate updating of various Toolbar state (e.g. page and scale) in one method in `PDFViewerApplication`

With the changes in PR 7289, we no longer dispatch a 'pagechanging' event on load. Since most PDF documents open on the first page, this means that the `previous` and `firstPage` buttons are no longer correctly disabled.
To avoid this, this patch moves the code that updates various UI toolbar state into one method, which is then called on document initialization and from the various existing event handling functions.",False
4342993a3f9c11d21a362857e5cc7d0730feda79,2016-06-29 18:49:28,Jonas Jenwald,"Ensure that the necessary src/* dependencies are loaded before the viewer, when it's run with `gulp server` (issue 7448)

Fixes 7448.",False
d872fc90b9958579bd1bc3f9a1b388eaede0f34d,2016-06-29 14:34:33,Simon Cornelius P. Umacob,Expose the text widget's maximum length.,False
bdd58ab1d2ce06a70318c65f048a01dc5c2cc42c,2016-06-27 19:50:23,Jonas Jenwald,"Ignore .notdef in the `differences` array when building a fallback `toUnicode` map in `PartialEvaluator_buildToUnicode` (issue 5256)

Fixes 5256.",False
7866109af97d16ebedd55901b16d4bfef27eb15b,2016-06-25 18:24:34,Jonas Jenwald,"Fallback to attempt to recover standard glyph names when amending the `charCodeToGlyphId` with entries from the `differences` array in `type1FontGlyphMapping` (issue 7439)

Fixes 7439.",False
e908b71309bddd9656cfd6bfc86054eaab3c1974,2016-06-25 17:40:39,Tim van der Meij,"Merge pull request #7438 from Snuffleupagus/README-addon-compat

Update README.md to only guarantee Firefox addon compatibility with the current ESR version",True
3b9042034b4b1451760c221ec5d3656b5f6aa602,2016-06-25 12:29:59,Jonas Jenwald,"Update README.md to only guarantee Firefox addon compatibility with the current ESR version

To reduced the amount of compatibility code that we need to maintain in the addon, I think that we should be more explicit about which Firefox versions we intend to support. In the future, this should allow us to more quickly remove old compatibility code.
Furthermore, this patch also tries to be more explicit about the addon support for Seamonkey, by defining it in terms of the underlying Firefox version.",False
671f33a324700df3ec7ab6fec39e8f22e84efbaf,2016-06-24 21:27:55,Yury Delendik,"Merge pull request #7427 from Snuffleupagus/fonts-skip-mapping-ideographic-space

Skip mapping of glyphs to Unicode ""Ideographic space"" (issue 7416)",True
546e22397e5c9a6fab246c3570f5fe3e23c2ee6e,2016-06-24 20:55:49,Yury Delendik,"Merge pull request #7437 from Snuffleupagus/addon-seamonkey-compat

[Firefox addon] Feature detect `originAttributes` to make it Seamonkey 2.40 compatible",True
9fbde18880a4fb55ca6714f2c9ea8fd116b860ba,2016-06-24 20:35:53,Jonas Jenwald,"[Firefox addon] Feature detect `originAttributes` to make it Seamonkey 2.40 compatible

Fixes 7245.",False
98d97123083ade2ec48be42f06fab3888c46d422,2016-06-24 20:19:56,Yury Delendik,"Merge pull request #7409 from Snuffleupagus/upstream-bug-1242730

Upstream the changes from Bug 1242730 - Convert callsites to use channel.async0pen2() within browser/extensions/pdfjs (issue 7386)",True
2d8ed7ba187ad3e3a550e49534c57c0500bc9667,2016-06-24 12:35:12,Jonas Jenwald,"Merge pull request #7430 from Rob--W/crx-rewrite-url-asap

Move Chromium URL rewrite to top of viewer.js",True
de852785371c2611b032d164079694e8144ee9b2,2016-06-24 04:27:30,Rob Wu,"Move Chromium URL rewrite to top of viewer.js

Move the Chromium-specific URL rewriting code to the top of viewer.js
(before the PDF.js library) to make sure that the URL is as expected.

This ensures that variables that synchronously depends on the URL
(e.g. PDFViewerApplication.initialBookmark) are properly set.",False
9a948f3190c61fd28b27c50a04f2a14266a228f6,2016-06-22 23:56:14,Tim van der Meij,"Merge pull request #7428 from Snuffleupagus/importl10n-use-hg.mozilla.org

 Unbreak the `importl10n` command by updating the links to point to hg.mozilla.org instead of mxr",True
2e42c192022afddb8c85658defb80ba3d4e81ee8,2016-06-22 13:11:18,Jonas Jenwald,Update l10n files,False
bd0affab9c1c4d1206813a55e594102b80046da3,2016-06-22 13:11:11,Jonas Jenwald,"Unbreak the `importl10n` command by updating the links to point to hg.mozilla.org instead of mxr

Currently `importl10n` fails, since mxr.mozilla.org has been down for a while. Based on discussions in #developers, it isn't clear to me if/when it'll be available again.
Furthermore, I'm not sure why we're even getting the l10n files through a code search tool, rather than just using the official Mozilla repository directly.",False
c1ca268ef33244029c9fb5a232b7a5b403f7ee39,2016-06-22 12:28:00,Jonas Jenwald,"Skip mapping of glyphs to Unicode ""Ideographic space"" (issue 7416)

Fixes 7416, which is an IE specific issue.",False
6d7f6f1b8665bfb9badd33b2a12fe41fa1d520c5,2016-06-15 18:20:56,Jonas Jenwald,"Upstream the changes from Bug 1242730 - Convert callsites to use channel.async0pen2() within browser/extensions/pdfjs (issue 7386)

Please see https://bugzilla.mozilla.org/show_bug.cgi?id=1242730.

Fixes 7386.",False
a0a6e6d688bd43c0ba680025702d1b7228f4c89c,2016-06-15 17:57:33,Yury Delendik,"Merge pull request #7400 from Snuffleupagus/addon-minimum-firefox38

[Firefox addon] Change the minimum supported version to Firefox 38 and remove a bunch old no longer necessary fallback code",True
d3d3bb96951aae32d178f5de111aede6447c5eb5,2016-06-15 13:24:41,Jonas Jenwald,"[Firefox addon] Change the minimum supported version to Firefox 38 and remove a bunch old no longer necessary fallback code

From the discussion in issue 7386, it wasn't really clear if we can restrict addon support to Firefox `45` (i.e. the version that corresponds to the *current* ESR version).

However, we have a bunch of code for *very* old Firefox versions. Hence this patch changes the minimum supported version to Firefox `38` (which was released on `2015-05-12`, and correspond to the *previous* ESR version), and removes code that only applies to old Firefox versions.

Regardless what we end up deciding regarding addon support for previous Firefox versions, given the amount of code that even the Firefox `>= 38` condition lets us remove, I certainly think that there is value in doing this.",False
64a409b539bf7974aa695dec82fa414cfcb777ac,2016-06-11 20:04:39,Jonas Jenwald,"Merge pull request #7404 from Rob--W/crx-pdf-embed-object-fix-1

Force inline block display style for <object>.",True
08ad551a015b8ade9ebc3db754bb1db277549ef2,2016-06-11 19:24:16,Rob Wu,"Force inline block display style for <object>.

Test:
1. Build the Chrome extension and load it.
2. Visit https://robwu.nl/pdfjs/object-embed.html
3. Verify that all displayed blocks have the same width and
   height as the reference (""Expected dimension"").",False
f97d52182a6ef90fc16f7c5441b6931fbfe98099,2016-06-09 03:59:10,Tim van der Meij,"Merge pull request #7341 from Snuffleupagus/getDestinationHash-Array

[api-minor] Improve handling of links that are using explicit destination arrays",True
70b3eea4a3280aa860569438aebf6efb9a976542,2016-06-09 02:27:45,Tim van der Meij,"Merge pull request #7389 from Snuffleupagus/move-isSpace

Move the `isSpace` utility function from core/parser.js to shared/util.js",True
6a0b047bfaab38e023a8273b454b9000c7cde0c7,2016-06-08 02:25:25,Jonas Jenwald,"Add upper-case `I` as a possible space replacement fallback in `Font.spaceWidth` to improve text-selection (issue 7180)

In fonts with only upper-case glyphs, that are also missing a space glyph, `get spaceWidth` won't be able to return anything useful.
By adding upper-case `I` as a fallback, we can thus improve text-selection in some PDF files.
Note that locally, the patch causes slight movement in a few existing `text` tests, but in my opinion this actually looks like slight improvements.

Fixes 7180.",False
c4db4dd4ac366236cbf2864e94cb0e561e096de8,2016-06-08 00:17:51,Brendan Dahl,"Merge pull request #7361 from Snuffleupagus/bug-1146106

Attempt to recover valid `format 3` FDSelect data from broken CFF fonts (bug 1146106)",True
6260fc09a3965ab18e2e13b3b0d6459694264c20,2016-06-06 21:50:52,Jonas Jenwald,"Attempt to recover valid `format 3` FDSelect data from broken CFF fonts (bug 1146106)

According to the CFF specification, see http://partners.adobe.com/public/developer/en/font/5176.CFF.pdf#G3.46884, for `format 3` FDSelect data: ""The first range must have a ‘first’ GID of 0"".
Since the PDF file (attached in the bug) violates that part of the specification, this patch tries to recover valid FDSelect data to prevent OTS from rejecting the font.

Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1146106.",False
a36a946976168226593f8b09f7e50404f8ad36d8,2016-06-06 12:41:33,Jonas Jenwald,"Move the `isSpace` utility function from core/parser.js to shared/util.js

Currently the `isSpace` utility function is a member of `Lexer`, which seems suboptimal, given that it's placed in `core/parser.js`. In practice, this means that in a number of `core/*.js` files we thus have an *otherwise* completely unnecessary dependency on `core/parser.js` for a one-line function.

Instead, this patch moves `isSpace` into `shared/util.js` which seems more appropriate for this kind of utility function. Not to mention that since all the affected `core/*.js` files already depends on `shared/util.js`, this doesn't incur any more file dependencies.",False
bd47440e799a4e769b38566ffd54cf390c22a17e,2016-06-04 02:59:20,Rob Wu,"Merge pull request #7388 from Rob--W/crx-telemetry-7312-typo

Fix typo in telemetry.js, follow-up to #7370",True
60438399e091801fc813c5aa89e7c585457e88e8,2016-06-04 02:58:01,Rob Wu,"Fix typo in telemetry.js, follow-up to #7370",False
f0585f5d653c7bab02fa823e8cb190edee66c430,2016-06-04 02:18:46,Yury Delendik,"Merge pull request #7370 from Rob--W/crx-telemetry-7312

Add opt-out telemetry to the Chrome extension",True
724308c57a8fb7318746076cfb43b1fdcccb007b,2016-06-04 00:06:57,Rob Wu,"Add opt-out telemetry to the Chrome extension

Privacy policy: https://github.com/Rob--W/pdfjs-telemetry#privacy-policy

Unit tests (offline):

```
node test/chromium/test-telemetry.js
```

Server tests (requires that Nginx is installed):

```
git clone https://github.com/Rob--W/pdfjs-telemetry.git
cd pdfjs-telemetry/
python testserver.py TestHttp TestHttps
```

Integration test (extension + server):

- Build the extension
- Edit build/chromium/telemetry.js and remove the check for
  chrome.runtime.id.
- Start Chrome (preferably a new profile):
  chromium --user-data-dir=/tmp/pdftest --no-first-run
- Open chrome://net-internals#events
- Visit chrome://extensions and enable Developer mode.
- Load unpacked extension, select build/chromium.
- Go to the chrome://net-internals tab and filter on pdfjs.robwu.nl.
- Click on URL_REQUEST and verify that the server replied with 204.
- Reload the extension.
- Verify that chrome://net-internals did not contain a new log request.",False
5a5bb9973433b078355599ad827c72f1cd645c1e,2016-06-03 22:24:41,Yury Delendik,"Merge pull request #7374 from Snuffleupagus/fix-getTextContent-setGState

Fix errors in `setGState` in `PartialEvaluator_getTextContent` that prevents text-selection from working properly",True
b02d560ae0d4728ef2acf06c7a17fae02c39340e,2016-06-02 02:28:49,Jonas Jenwald,"Fix errors in `setGState` in `PartialEvaluator_getTextContent` that prevents text-selection from working properly

Currently `setGState` is completely broken, and looking through the history of that code, it seems to me that this may never have worked correctly.
This patch fixes the text-selection in `extgstate.pdf` in the test-suite, which is also added as a `text` test.",False
7c7d2399956c25491aa7d2548c9c784cc2b3cea8,2016-05-29 16:17:00,Jonas Jenwald,Update l10n files,False
5aefce6ba6853bee9397b96e7d684521e81f06eb,2016-05-28 00:53:26,Yury Delendik,"Merge pull request #5579 from jazzy-em/master

Added multiple term search functionality (with default phrase search)",True
41f978c7c353499050056481e564539570ebee57,2016-05-26 23:45:52,Tim van der Meij,"Merge pull request #7362 from bbodenmiller/patch-2

Github -> GitHub",True
e0b9d49f2c7c26af92f88278fa7e2ead0622afe5,2016-05-26 23:41:50,Ben Bodenmiller,Github -> GitHub,False
0a347ec04d527c6f39ce8b8dfb875df10d6df580,2016-05-26 18:54:58,jazzy-em,Added multiple term search functionality (with default phrase search),False
c55541f1f375e6bcfe18ab0a023de6610d5c83d7,2016-05-26 03:27:33,Tim van der Meij,"Merge pull request #7352 from Snuffleupagus/popup-annotation-inherit-parent-flags

Let non-viewable Popup Annotations inherit the parent's Annotation Flags if the parent is viewable",True
98fe094d18a8048d70991e7e95d689fb14933279,2016-05-26 02:30:26,Jonas Jenwald,"Let non-viewable Popup Annotations inherit the parent's Annotation Flags if the parent is viewable

Fixes http://www.pdf-archive.com/2013/09/30/file2/file2.pdf.

Note how it's not possible to show the various Popup Annotations in the above document.
To fix that, this patch lets the Popup inherit the flags of the parent, in the special case where the parent is `viewable` *and* the Popup is not.
In general, I don't think that a Popup must have the same flags set as the parent. However, it seems very strange to have a `viewable` parent annotation, and then not being able to view the Popup.

Annoyingly the PDF specification doesn't, as far as I can find, mention anything about how this case should be handled, but this patch seem consistent with the actual behaviour in Adobe Reader.",False
47b929be26b3f14fc7587fcaa1ff4d05e8a397e9,2016-05-25 05:20:39,Tim van der Meij,"Merge pull request #7346 from Rob--W/crx-sync-storage

Support syncing of settings in Chrome extension",True
0be8e72d6fe45a38f49a2b4bcfd12e981d0a3ecc,2016-05-25 04:21:51,Rob Wu,"Support syncing of settings in Chrome extension

Use chrome.storage.sync to store preferences instead of
chrome.storage.local, to allow settings to be synchronized if the user
chooses to sign in in Chrome and enables synchronization of extension
preferences.",False
78359d8b033a146cdbe62fe5eeedcf0f9e58578b,2016-05-25 04:13:50,Tim van der Meij,"Merge pull request #7353 from timvandermeij/chromium-regression

Resolve a regression in the Chromium extension's preferences handling",True
fdfaa43f5ea9d9e2fef6b9c1645d9a690e3c10f9,2016-05-25 04:02:32,Tim van der Meij,"Resolve a regression in the Chromium extension's preferences handling

Commit https://github.com/mozilla/pdf.js/commit/df10513e103cc165352fb1ee2e2cf5122a73eee1 unfortunately broke the options dialog of the Chromium extension because the logic required to work with the preference was not added. This patch adds the required logic to show the preference in the options dialog and to persist it to the preferences storage.

Verified using Chromium 50 on Arch Linux.",False
6316ca0299c4454247a950325ba5c7606cf9393e,2016-05-25 03:34:45,Tim van der Meij,"Merge pull request #7344 from Rob--W/crx-cleanup-compat-frame

Remove support for frames in old Chromium versions",True
b86610ffdbc7bcdab5456d1537b29800cce703c6,2016-05-25 00:42:38,Brendan Dahl,"Merge pull request #7300 from Snuffleupagus/bug-1068432

Prevent adding invalid values in `CFFDict_setByKey` (bug 1068432)",True
b354682dd64df36859e1f4e8ca14816d8204d02e,2016-05-21 17:44:07,Jonas Jenwald,"[api-minor] Let `LinkAnnotation`/`PDFLinkService_getDestinationHash` return a stringified version of the destination array for explicit destinations

Currently for explicit destinations, compared to named destinations, we manually try to build a hash that often times is a quite poor representation of the *actual* destination. (Currently this only, kind of, works for `\XYZ` destinations.)
For PDF files using explicit destinations, this can make it difficult/impossible to obtain a link to a specific section of the document through the URL.

Note that in practice most PDF files, especially newer ones, use named destinations and these are thus unnaffected by this patch.
This patch also fixes an existing issue in `PDFLinkService_getDestinationHash`, where a named destination consisting of only a number would not be handled correctly.

With the added, and already existing, type checks in place for destinations, I really don't think that this patch exposes any ""sensitive"" internal destination code not already accessible through normal hash parameters.

*Please note:* Just trying to improve the algorithm that generates the hash is unfortunately not possible in general, since there are a number of cases where it will simply never work well.

 - First of all, note that `getDestinationHash` currently relies on the `_pagesRefCache`, hence it's possible that the hash returned is empty during e.g. ranged/streamed loading of a PDF file.

 - Second of all, the currently computed hash is actually dependent on the document rotation. With named destinations, the fetched internal destination array is rotational invariant (as it should be), but this will not hold in general for the hash. We can easily avoid this issue by using a stringified destination array.

 - Third of all, note that according to the PDF specification[1], `GoToR` destinations may actually contain explicit destination arrays. Since we cannot really construct a hash in `annotation.js`, we currently have no good way to support those. Even though this case seems *very* rare in practice (I've not actually seen such a PDF file), it's in the specification, and this patch allows us to support that for ""free"".

---
[1] http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#G11.1951685",False
01ab15a6f17b2f71cd1403f84aae2d09002cccda,2016-05-21 17:43:41,Jonas Jenwald,"[api-minor] Let `Catalog_getPageIndex` check that the `Ref` actually points to a /Page dictionary

Currently the `getPageIndex` method will happily return `0`, even if the `Ref` parameter doesn't actually point to a proper /Page dictionary.
Having the API trust that the consumer is doing the right thing seems error-prone, hence this patch which adds a check for this case.

Given that the `Catalog_getPageIndex` method isn't used in any hot part of the codebase, this extra check shouldn't be a problem.
(Note: in the standard viewer, it is only ever used from `PDFLinkService_navigateTo` if a destination needs to be resolved during document loading, which isn't common enough to be an issue IMHO.)",False
db46829ef7c7954fb2ae3a726083e0156302e02d,2016-05-21 17:37:33,Tim van der Meij,"Merge pull request #7316 from timvandermeij/remove-unused

Remove unused variables",True
7ac48ef4d58136aca9bb11c1597436993c873aa0,2016-05-20 00:16:17,Tim van der Meij,"Merge pull request #7340 from Snuffleupagus/unicode-unit-tests

Add basic unit-tests for unicode.js",True
c5c5a2a71f800320ca4f8c55e3b1da8e6ee19987,2016-05-19 23:15:45,Jonas Jenwald,"Add basic unit-tests for unicode.js

Re: issue 7261.",False
f4e6afb74f1ae98cfa16e976c50d804949ce344d,2016-05-19 02:35:36,Tim van der Meij,"Merge pull request #7337 from Snuffleupagus/combine-setTextMatrix

Attempt to combine text runs positioned with `setTextMatrix`",True
7ddb0bc7187c497de1b629cf52ebad708235d9e5,2016-05-18 20:51:58,Jonas Jenwald,Attempt to combine text runs positioned with `setTextMatrix`,False
8aa5901c205465f781c864c6f4e40d171b025658,2016-05-16 22:32:59,Yury Delendik,"Merge pull request #7332 from yurydelendik/fix-components

Fixes AMD name in web/the pdf_viewer.js.",True
185a1f45e75e557b4a74905d20f749024d0a9e36,2016-05-16 22:31:29,Yury Delendik,Fixes AMD name in the web/pdf_viewer.js.,False
1c0433586e1d2e59c2d93f4b565a28055eaaeeb4,2016-05-13 01:48:43,Yury Delendik,"Merge pull request #7315 from McGiogen/bug-usestrict-compatibilityjs

Solving issue #7307, 'use strict' context in compatibility.js",True
1c96cb8862caf734c9e0fdb6a757660c6e7e5bed,2016-05-12 13:34:51,Gioele Masini,Added context to compatibility.js to have 'use strict' directive in our context only,False
b261203018f847c89e05bb4c03c820fad0c90672,2016-05-12 04:35:20,Yury Delendik,"Merge pull request #7317 from yurydelendik/move-defaultprefs

Moves DEFAULT_PREFENCES into JSON format.",True
df10513e103cc165352fb1ee2e2cf5122a73eee1,2016-05-12 04:28:17,Yury Delendik,Moves DEFAULT_PREFENCES into JSON format.,False
12a93971fee6e19f941661f2912d7a7613f662ab,2016-05-12 02:52:18,Jonas Jenwald,"Merge pull request #7313 from timvandermeij/secondary-toolbar-class

Convert the secondary toolbar to a class",True
f4ae277355ac20960cbc124263ac312bbc273556,2016-05-12 00:23:39,Tim van der Meij,Convert the secondary toolbar to a class,False
6a7012aaca42fcca32550cd7c04817bda76f70b3,2016-05-11 19:41:13,Tim van der Meij,"Remove unused variables

These have been found using `gulp lint` in combination with the `unused:
true` parameter for JSHint. Unfortunately there are too many false
positives to enable this feature, but now that most globals have been
removed because of the conversion to UMD the results are much more
useful than before.",False
c1c199d70277a2a42fe1ac12ef598248076ac829,2016-05-11 02:51:54,Tim van der Meij,"Merge pull request #7295 from Snuffleupagus/core-getArray

Use `Dict_getArray` in more places in `src/core/` to avoid issues when Arrays contain indirect objects",True
9394fc133c529a8f06c197d2ddd3405caa9ead74,2016-05-11 02:10:07,Rob Wu,"Remove support for frames in old Chromium versions

Frames are only supported (via redirectUrl) in Chrome 35.0.1911.0+",False
69cf8c5fb31d15942d450d3fcd0ef293e14c1c22,2016-05-10 20:08:55,Jonas Jenwald,"Merge pull request #7289 from yurydelendik/double-pagechange

Disable pagechange event if page is not changing.",True
aa9ba43fa1a0fe0cfd974780038c563f6db8bd74,2016-05-10 19:49:49,Jonas Jenwald,"Merge pull request #7306 from yurydelendik/enable-debugger

Enables debugger only when needed.",True
a4c81c203b6133ea4c73ce82a68b86f8b79b3ee8,2016-05-10 04:48:43,Yury Delendik,Enables debugger only when needed.,False
8dcc727be134a6743d411314100562839a5a2f9d,2016-05-10 03:29:28,Tim van der Meij,"Merge pull request #7244 from Rob--W/crx-pdf-embed-object-no-shadow-dom

Don't use shadow DOM for rendering <object>/<embed>",True
d78f90390bca1f6d3492ef71ea96a7ada7dfca31,2016-05-10 02:53:46,Tim van der Meij,"Merge pull request #7305 from Rob--W/crx-delete-streamsPrivate

Remove streamsPrivate usage",True
fc658a718cc3b91ff390e9a9c6af722646c5b9f3,2016-05-10 02:19:47,Rob Wu,"Remove streamsPrivate usage

This was only ever useful for the Opera extension because the API
requires a whitelisted extension ID. Opera ditched PDF.js from their
extension gallery, so we don't need to keep this in the tree.",False
11914277d58130c4ca6c9d8f1426b0a9b9ea0605,2016-05-10 01:46:09,Tim van der Meij,"Merge pull request #7299 from Snuffleupagus/PDFPageView_draw-zoomLayer-prevent-error

Prevent intermittent ""Node was not found"" errors when removing the `zoomLayer` in `PDFPageView_draw`",True
dd828ea6f1e2935505bd513b6fdbcd6a7336cfc6,2016-05-09 21:33:14,Yury Delendik,"Merge pull request #7302 from Snuffleupagus/Parser_getObj-skip-over-endobj

Ignore 'endobj' commands inside of `ObjStm` streams (issue 5241, bug 898610, bug 1037816)",True
182d33800ad0f6d0619912c5d7430f4ab723635e,2016-05-09 13:20:45,Jonas Jenwald,"Ignore 'endobj' commands inside of `ObjStm` streams (issue 5241, bug 898610, bug 1037816)

According to an example in the PDF specification, see http://www.adobe.com/content/dam/Adobe/en/devnet/acrobat/pdfs/PDF32000_2008.pdf#page=56, an `ObjStm` stream should not contain 'endobj' commands.

Fixes 5241.
Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=898610.
Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1037816.",False
b13b78388bab426233af0065fbe68700bf415684,2016-05-08 19:33:17,Jonas Jenwald,"Prevent intermittent ""Node was not found"" errors when removing the `zoomLayer` in `PDFPageView_draw`

I've seen the above error occasionally when the scale is updated many times in quick succession, but I've not been able to pinpoint exactly why it happens.
Since the error isn't caught, this means that the `pageViewDrawCallback` function doesn't run to completion.

Unfortunately, given the very intermittent nature of the issue, I haven't got any good STR for reliably reproducing this issue. However, I hope that this patch can be accepted anyway, since it's simple and should help prevent unnecessary errors.",False
5f59d079e096efcbf10b0eeacee4412ad2592988,2016-05-08 13:16:32,Jonas Jenwald,"Merge pull request #7301 from Rob--W/grab-to-pan-mouse-buttons

Update grab_to_pan.js",True
057b4615ba3ee3329f99b989b82e8c9c7df922f6,2016-05-08 03:16:56,Rob Wu,"Update grab_to_pan.js

See https://github.com/Rob--W/grab-to-pan.js/commit/b81897bee4f08daf0bf7539ceb207ed09e472a7b",False
c9b6de3b16d9ebecd7caf27b606cfc9eb45d086d,2016-05-08 00:39:58,Jonas Jenwald,"Prevent adding invalid values in `CFFDict_setByKey` (bug 1068432)

In the font in question, there are a couple of `topDict` entries that have invalid values (`0xF 0xF`, i.e. just eof markers without any actual numbers).
This causes the `parseFloatOperand` function, inside `CFFParser_parseDict`, to return `NaN`. Currently we pass this broken font onto the browser, which OTS unsurprisingly rejects.

Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1068432.",False
8b605b69804d537fe675179076bc9d699112c396,2016-05-07 14:55:47,Jonas Jenwald,"Merge pull request #7298 from mortonfox/patch-1

Update link to CONTRIBUTING.md",True
f697d83f59fb7346f929f678c425eedb2db49908,2016-05-07 09:40:36,Morton Fox,Update link to CONTRIBUTING.md,False
a682ccec2f48cc335cecd2794a2052bd14548b1d,2016-05-06 02:15:27,Brendan Dahl,"Merge pull request #7285 from Snuffleupagus/split_font_unittests

Split the font_spec.js unit-tests into cff_parser_spec.js and type1_parser_spec.js",True
6111c17c8aa3e196743aa34185a6e9330b37aa53,2016-05-05 23:12:57,Jonas Jenwald,"Use `Dict_getArray` in more places in `src/core/` to avoid issues when Arrays contain indirect objects

As evident from e.g. PRs 6485 and 7118, some bad PDF generators unfortunately create Arrays where *some* elements are indirect objects (i.e. `Ref`s). This seems to mostly affect Arrays that contain numbers, such as e.g. `Matrix/FontMatrix/BBox/FontBBox/Rect/Color/...`, and has manifested itself in PDF files that fail to render correctly (some elements are missing).

The problem in both the cases above, besides broken rendering, was that there were *no* errors/warnings that indicated what the problem was, making it difficult to pinpoint the issue.
Hence this patch, where I've audited all usages of `Dict_get` in `src/core/` files, and replaced it with `Dict_getArray` where appropriate to try and prevent unnecessary future bugs.",False
9f68e3f1bc38cc18191976f309becb94f70f7239,2016-05-04 21:36:07,Yury Delendik,Disable pagechange event if page is not changing.,False
8adddf031c2cf47c46f947c0c8f265af01ae03cf,2016-05-03 17:36:43,Yury Delendik,"Merge pull request #7242 from Snuffleupagus/bug-1194700

[Bug 1194700] Ensure that the `customScaleOption` is hidden in e10s",True
29c4a604aff5062877b2f296048a445f2f5a284b,2016-05-03 13:07:36,Jonas Jenwald,"Split the font_spec.js unit-tests into cff_parser_spec.js and type1_parser_spec.js

Re: issue 7261.

Given the we have `gulp fonttest`, which tests the `fonts.js` functionality at a higher level, and that we have *a lot* of font specific reference tests, I'm not convinced that we *also* need unit-tests for it.",False
9c95d089dea692f2ab4cd4c8b188555d2550b27f,2016-05-03 04:56:17,Tim van der Meij,"Merge pull request #7281 from yurydelendik/static-warnings

Fixes some static analysis warnings and recommendations",True
32ce369d886e855f266661fd69f90516c5d4d30d,2016-05-03 04:04:58,Yury Delendik,"Fixes some static analysis warnings and recommendations

* Useless conditional
* Superfluous trailing arguments
* Useless assignment to local variable
* Misspelled identifier
* JSDoc tag for non-existent parameter",False
d1799929c46758b0f4f8cd8e32df4305d355c666,2016-05-03 03:51:20,Tim van der Meij,"Merge pull request #7260 from yurydelendik/gulp-tests

Moves all testing into gulpfile.",True
7aff695969e3b1ed96b8a59927b438c00f0e04c6,2016-05-03 03:04:54,Yury Delendik,"Merge pull request #7279 from yurydelendik/cff-encodeint

Fixes unneed conversion to array in CFF encodeInteger.",True
4cde9984f956873fd495be73c6c63171f88a680e,2016-05-03 01:54:16,Yury Delendik,Fixes unneed conversion to array in CFF encodeInteger.,False
fe6001363d84a3e0164a84ffaa963302c496b878,2016-05-02 20:28:29,Yury Delendik,Moves all testing into gulpfile.,False
d20002b6b1ff98ee4024f386551eb3a3f3fe56c4,2016-04-29 21:07:11,Yury Delendik,"Merge pull request #7273 from Snuffleupagus/issue-7270

Prevent ""Prefixed Fullscreen API is deprecated."" warnings in the MOZCENTRAL version (issue 7270)",True
9dd6017901da00bfc3dca25ae343d3aecfc96f0f,2016-04-29 20:58:24,Jonas Jenwald,"Prevent ""Prefixed Fullscreen API is deprecated."" warnings in the MOZCENTRAL version (issue 7270)

We're already, since quite some time, using the standard Fullscreen API provided that it's available in the browser. The warning is only caused by the code that checks if the Fullscreen API is supported.

This patch uses a simple preprocessor tag to avoid the warning, since I'm assuming that in general, we want to try and remain backwards compatible with the prefixed versions of the Fullscreen API.

Fixes 7270.",False
baa149365090d3b23f63c41ca0da552866c78e5e,2016-04-29 20:50:47,Yury Delendik,"Merge pull request #7272 from yurydelendik/bug1268706

Adds post UI control change events.",True
4a2c76a34fa592440cef342a0d91d3f71ecb92e1,2016-04-29 20:35:04,Yury Delendik,Adds pre and post UI control change events.,False
4968ac7ceaf2949f907631148aae6aba6c16f69c,2016-04-29 14:48:59,Jonas Jenwald,"Merge pull request #7266 from yurydelendik/secondary

Removes circular dependency of secondary toolbar on app.js.",True
3cbaa9a499c2f6d4f0891ea7ce74cc62deb104c5,2016-04-29 03:27:46,Yury Delendik,"Merge pull request #7268 from yurydelendik/components-samples

Better components examples.",True
eb3d1ca00300385a7b3eefb1ffb4338f2bd0b16b,2016-04-29 01:34:09,Yury Delendik,Removes circular dependency of secondary toolbar on app.js.,False
5f883d763f1810ad0cd719628eeff1626468a9f3,2016-04-29 00:00:03,Yury Delendik,Better components examples.,False
61a4c740d2df6fa2fe1497f5436d4acc1dcbb0c8,2016-04-28 18:49:49,Jonas Jenwald,"Merge pull request #7254 from yurydelendik/eventbus

Introducing EventBus for the viewer UI.",True
3e6e294fd41971a856c5c57d64afabc3b1d152da,2016-04-28 17:41:40,Yury Delendik,Refactors PDFFindBar and FirefoxCom find events.,False
7fd3db99778a0cf7a0e74bd3bd5a3cf2f5970b84,2016-04-28 17:27:24,Yury Delendik,Adds EventBus.,False
bd49973ee56b5f85eaf255308edfb52ed4e5fbf8,2016-04-28 03:48:57,Yury Delendik,"Merge pull request #7262 from yurydelendik/issue7231

Fixes weird loop in the bidi.js.",True
4016f9fd43d057d155caa1c17e8bed87dfb03e1d,2016-04-28 02:44:33,Yury Delendik,"Fixes weird loop in the bidi.js.

Closes #7231.",False
4dc00b003d81d14bc5400d2a106c4cf7f7215526,2016-04-27 21:25:58,Yury Delendik,"Merge pull request #7256 from timvandermeij/gulp-targets

Port the `publish` target to Gulp",True
5166b46a1cbe3714107889fc0d77f93814a17515,2016-04-27 16:24:57,Tim van der Meij,Port the `publish` target to Gulp,False
97b3a70df86713aaf9abcea1d48bc2e31d6a7453,2016-04-27 01:53:21,Tim van der Meij,"Merge pull request #7255 from timvandermeij/readme

Mention web application usage in README.md",True
9c4bb83f7ad94501c9c092ec6ce19bd3eb40fab4,2016-04-27 01:43:01,Tim van der Meij,Mention web application usage in README.md,False
11a2282b95379540a1efa80d7fabaa88237f268f,2016-04-26 18:34:04,Yury Delendik,"Merge pull request #7251 from yurydelendik/force-defines

Makes defines parameter non-optional in createBundle.",True
cca0e40aa2a58c24ca4846575baaa72bb70c468e,2016-04-26 18:24:07,Yury Delendik,Makes defines parameter non-optional in createBundle.,False
f220db55be0b56958d02aa1f580c1057513b58ec,2016-04-26 04:30:00,Tim van der Meij,"Merge pull request #7240 from yurydelendik/bundle

Moves bundle target/task to gulpfile.js",True
5568a19ee3146060704e6f701257dec0a3de7d39,2016-04-24 19:07:39,Yury Delendik,Moves bundle target/task to gulpfile.js,False
55581b162e81f152d3d8f58467e90b11963706c9,2016-04-24 19:02:17,Yury Delendik,"Merge pull request #7202 from yurydelendik/firefox-deps

Refactors dependencies of PDFViewerApplication on external services",True
3132941948459e372ab911ee57ebc6a6ab47cea8,2016-04-24 18:55:55,Yury Delendik,Removes app.js dependency on mozPrintCallback_polyfill.js.,False
3b21b5171618ef6d3a1fad260930fba4b079014f,2016-04-24 18:55:55,Yury Delendik,Refactors preferences and PDF opening related chromecom code.,False
148102b6260b3e0df0a94664b9b9938c7a79197e,2016-04-24 18:55:55,Yury Delendik,Refactors firefoxcom dependency on app and l10n.,False
81fc46e6663d5c41fd66a61f23b2c4f51f6f7ef3,2016-04-24 18:55:55,Yury Delendik,Refactors FindController dependencies.,False
b45e6a7cc9470de202bf0490ebd36c9a8419dbbc,2016-04-24 03:22:22,Rob Wu,"Don't use shadow DOM for rendering <object>/<embed>

Multiple shadow roots are not supported any more in Chrome 51+
(https://crbug.com/603448#c6), so this patch changes the way that PDFs
are rendered in `<embed>` / `<object>` tags.

I used shadow roots because their content is not visible from the web
page, so the odds of conflicts were minimal. Now I have to render the
PDF frame directly in the page, which can be observed from the page
(unfortunately).

Now the following happens when an embedded PDF tag is detected:

- `<embed>` tags: The type and src attributes are updated.
- `<object>` tags: The type attribute is changed and the fallback
  content is set and displayed.",False
9d7d95ead4afe347800ad4fcb836eca5c3540801,2016-04-23 19:27:51,Jonas Jenwald,"[Bug 1194700] Ensure that the `customScaleOption` is hidden in e10s

When Firefox is run in e10s mode, which will soon be the default, the PDF.js zoom dropdown menu doesn't look right. This is apparently because the `<select>` DOM element is rendered in the parent, and that all the necessary style information isn't sent up from the child. See the discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=910022.

Besides this causing the PDF.js UI to *look* worse in e10s, notably it also means that the `customScaleOption` isn't hidden like it ought to be.
To work-around that, this patch utilizes the `hidden` attribute, since https://bugzilla.mozilla.org/show_bug.cgi?id=1242450 at least made that work in e10s.

Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1194700.",False
ff6669d930c2447e37bf058e44ef6b8b6381e1c3,2016-04-23 03:54:58,Yury Delendik,"Merge pull request #7241 from yurydelendik/server-importl10n-async

Makes importl10n and server async gulp functions.",True
76aa6875482df521368d3b97f8b098f44e73ce03,2016-04-23 03:53:25,Yury Delendik,Makes importl10n and server async gulp functions.,False
3d498792118bc3370ff1740cc585f4371870a14e,2016-04-23 02:40:07,Yury Delendik,"Merge pull request #7130 from nschloe/patch-1

Add element to text layer even if width === 0",True
f13119f237a3f021b313bf106f2e58df004188f1,2016-04-22 23:19:01,Yury Delendik,"Merge pull request #7237 from Snuffleupagus/issue-7232

Prevent accidentally overriding the `error` function in the `commonobj` messageHandler in api.js (issue 7232)",True
9ceeb2174196afc9def3b7e75b0d2ab6bd9b46dd,2016-04-22 13:42:12,Jonas Jenwald,"Prevent accidentally overriding the `error` function in the `commonobj` messageHandler in api.js (issue 7232)

This naming issue has been present since PR 3529, but at least I cannot find any issues/bugs that seem to have been caused by it, which is good.

The patch also removes an unnecessary `else` branch, since an already existing `break` means that it's redundant.

Fixes 7232.",False
ee4d8ef8f712bc2462bf683abf052e41c19b4587,2016-04-22 01:46:09,Yury Delendik,"Merge pull request #7236 from yurydelendik/release1.5.188

Release of 1.5.188",True
e20a2171777ac46fef4e27f592b084c885626f15,2016-04-22 01:41:26,Yury Delendik,Release of 1.5.188,False
0e2d50f8e67adce0b89a6e5b1deb0a3887df613d,2016-04-22 01:40:16,Yury Delendik,"Merge pull request #7235 from yurydelendik/version1.5

Version 1.5",True
c5f2cd6dd44f6c2668a3f167da049a982fc24c4e,2016-04-22 01:37:19,Yury Delendik,Version 1.5,False
4aac324558829e26020c0fa4d56efb37b8599ad5,2016-04-22 01:25:37,Jonas Jenwald,"Merge pull request #7209 from yurydelendik/getElementById

Moves all document.getElementById lookups into viewer.js",True
b6c74f20561b04573cd00dd924484be7f80a09ce,2016-04-21 22:09:11,Yury Delendik,Moves all document.getElementById lookups into viewer.js,False
d5c000850aeee9ce19b732d3c09d8d5fe596c98d,2016-04-21 20:30:19,Yury Delendik,"Merge pull request #7233 from Snuffleupagus/issue-7229

Adjust incorrect first obj number of ""free"" xref entry in `XRef_readXRefTable` (issue 7229)",True
293901d7e59938d31104faacc48e61e7c009e1b4,2016-04-21 20:06:46,Jonas Jenwald,Add a (linked) test-case for issue 3248,False
e281ef15dba06d2a4159373d2384224ce6bf10b0,2016-04-21 20:06:32,Jonas Jenwald,"Adjust incorrect first obj number of ""free"" xref entry in `XRef_readXRefTable` (issue 7229)

Fixes 7229.",False
20019538710e188773512cf20b80d90d174db94b,2016-04-21 18:49:34,Jonas Jenwald,"Merge pull request #7219 from timvandermeij/password-prompt-class

Convert the password prompt to a class",True
2b7137ba0a05aede70b03860c9546adba19490a6,2016-04-21 17:36:10,Tim van der Meij,"Convert the password prompt to a class

Furthermore we introduce two new methods named `setCallback` and
`setReason` so external code does not change the properties of the class
directly. Finally we update various names of properties and methods to
be more self-explanatory.",False
990150ce615d76257d4bcbc5a1d7f853ef3fd0da,2016-04-19 17:02:25,Jonas Jenwald,Update l10n files,False
3228c9445c9acb719cf462d4befd3e87eff2d166,2016-04-17 18:19:37,Yury Delendik,"Merge pull request #7210 from Snuffleupagus/extract-PDFImage.resize

Split the two paths in `PDFImage.resize` into separate helper functions, placed in colorspace.js and image.js",True
19e0599f7476213837620068e2b9da12b6f23aa4,2016-04-17 13:54:36,Jonas Jenwald,"Split the two paths in `PDFImage.resize` into separate helper functions, placed in colorspace.js and image.js

Re: issue 6777.",False
0428fdf3ca46a4a5d15cd8a7798938fc80030ed8,2016-04-17 06:32:05,Yury Delendik,"Merge pull request #7211 from Snuffleupagus/crypto-tests-NEED_PASSWORD

Add a couple of `CipherTransformFactory` unit-tests for blank passwords, and move the `isDict` unit-tests to the correct file",True
b4a17323b6149c7f63b91a1959c8ef973ea2dcc9,2016-04-17 00:02:46,Jonas Jenwald,"Move `isDict` unit-tests from util_spec.js to primitives_spec.js

This patch moves the unit-test to the correct file, since the `isDict` function was moved PR 6683.",False
4523ae0b914a4c280c1bb9252275a357a85d47f0,2016-04-16 23:54:55,Jonas Jenwald,Add a couple of `CipherTransformFactory` unit-tests to check that blank passwords are correctly rejected,False
a093d755b7b5e00434b12d3b65a23ebf4825d302,2016-04-16 23:02:58,Tim van der Meij,"Merge pull request #7207 from timvandermeij/hand-tool-class

Convert the hand tool to a class",True
b0aca31de8e34badca5b70272857bc658b61b5e1,2016-04-16 22:50:37,Tim van der Meij,Convert the hand tool to a class,False
7f90f5bfedd2b0e3e583d8db351a246675927bfa,2016-04-16 20:13:22,Jonas Jenwald,"Merge pull request #7206 from Snuffleupagus/viewer-expose-non-classes-on-PDFViewerApplication

Expose a few non-classes on `PDFViewerApplication`",True
9dfda2b90813f02ae248af03265ccfe84d1503e6,2016-04-16 19:53:21,Jonas Jenwald,"Expose a few non-classes on `PDFViewerApplication`

With the recent PR 7172, which made the viewer modular, there's now a couple of modules that are no longer easily accessible (e.g. through the console).
This can make testing/debugging more difficult, and means that e.g. https://github.com/mozilla/pdf.js/wiki/Debugging-PDF.js#enabling no longer works in the generic viewer.

For now, as a simple solution, this patch just exposes those non-classes on `PDFViewerApplication` to ensure that they are available, and to avoid polluting the `window` scope.",False
452c031af5a1242a632bc4276dc778b8d2970b7e,2016-04-16 19:16:41,Tim van der Meij,"Merge pull request #7116 from Snuffleupagus/refactor-LinkAnnotation-tests

Refactor `LinkAnnotation` slightly, improve handling of the `GoToR` action, and add unit-tests",True
ff65c8021f8af5e2f7fa5b7e80d4e1cf9cf86048,2016-04-16 18:28:50,Tim van der Meij,"Merge pull request #7190 from Snuffleupagus/sidebarviewchanged-event

Dispatch a `sidebarviewchanged` event in `PDFSidebar` when the view changes",True
6ceda3f29079d9df12c26239e792bcb5cc56da16,2016-04-16 13:47:42,Ankit Aggarwal,"web/viewer.js: Persist the state of sidebar

Persist the state of content sidebar while browsing away from viewer and
initializing the same on returning back to the viewer. The state is saved
in persistent store preferences and used upon viewer initialization.

Fixes #6935",False
5657d082c73864b9468bc092ab6048c32d35768d,2016-04-16 13:40:28,Jonas Jenwald,"Dispatch a `sidebarviewchanged` event in `PDFSidebar` when the view changes

We cannot piggy-back on the `updateviewarea` event in order to update the stored sidebar state, since there're a number of cases where opening/switching the sidebar view won't fire a `updateviewarea` event.
Note that `updateviewarea` only fires when the position changes in the *viewer*, which means that it won't fire if e.g. the viewer is narrow, such that the sidebar overlays the document transparently; or when switching views, without the document position also changing.

This patch also moves the handling of `forceOpen` parameter in `PDFSidebar_switchView`, to prevent triggering back-to-back rendering and dispatching of events.",False
171f908b892e43062586c25418c722861f98f6b0,2016-04-16 02:29:08,Jonas Jenwald,"Add a couple of `LinkAnnotation` unit-tests

We currently don't have *any* unit-tests for `LinkAnnotation`s, so it seemed a good idea to add a few. These tests are taken from various actual PDF files.",False
f3f825cc71020cc44f17745f7f58a7fc0c9058d9,2016-04-16 02:25:05,Jonas Jenwald,"Various improvements for `GoToR` actions

 - Add support for the 'NewWindow' property.

 - Ensure that destinations are applied to the *remote* document, instead of the current one.

 - Handle the `F` entry being a standard string, instead of a dictionary.",False
b63ef7a8b6527205a4b51c5e1dc468aaeabf934f,2016-04-16 02:25:05,Jonas Jenwald,"Refactor `LinkAnnotation` slightly to add `data.url`/`data.dest` at the end

This patch also makes sure that all URLs are converted to the correct encoding.",False
4a601ffc2867854dc82f51d947b677ad4754ce14,2016-04-16 02:14:07,Tim van der Meij,"Merge pull request #7197 from prakashpalanisamy/remove-combineurl-test

Remove `combineUrl` and replace it with `new URL`. Issue #7183, for reference.",True
a25c29d98d476c71a4d8bd7ed6cb0a7df0b9db65,2016-04-15 21:33:10,Prakash Palanisamy,Remove `combineUrl` and replace it with `new URL`.,False
5c17df9f07116f45b5e2c8689128d1365a60823a,2016-04-15 20:29:54,Jonas Jenwald,"Merge pull request #7201 from Snuffleupagus/issue-7200

Ensure that the `params` parameter of the `PredictorStream` is a dictionary (issue 7200)",True
079b563e2d2f998b970b53e32755de89f6ed1684,2016-04-15 20:00:18,Jonas Jenwald,"Ensure that the `params` parameter of the `PredictorStream` is a dictionary (issue 7200)

Fixes 7200.",False
e9dbb233aaacac77c6bdd7b9e8fedf0cf7de7eee,2016-04-13 21:20:15,Yury Delendik,"Merge pull request #7191 from Snuffleupagus/export-DefaultAnnotationLayerFactory

Export the `DefaultAnnotationLayerFactory` to prevent the viewer components from breaking (PR 7172 followup)",True
c98f25145fe119efb7d12ce17d4c30fe8eaa510f,2016-04-13 21:12:04,Jonas Jenwald,Export the `DefaultAnnotationLayerFactory` to prevent the viewer components from breaking (PR 7172 followup),False
6282ec24d1a6529d11cef8f741e5cc497e7c2a6f,2016-04-13 20:53:23,Yury Delendik,"Merge pull request #7172 from yurydelendik/umd-web

Introduces UMD headers to the web/ folder.",True
50fe8e7c7548f20553751a682d46041186f2154d,2016-04-13 20:41:43,Yury Delendik,Removes PDFView global and pagerender event support.,False
4165cedc9fb27fe1543f8058143a8969e97f162e,2016-04-13 20:41:34,Yury Delendik,Replace pdfjsLib with module that represents pdf.js.,False
006e8fb59d9ee9abad2439fec795a71e0b2360d4,2016-04-13 20:39:48,Yury Delendik,Introduces UMD headers to the web/ folder.,False
fa2f80d0fde9ec3b296b1ab23bb593a58c43a34f,2016-04-13 19:12:11,Yury Delendik,"Merge pull request #7189 from yurydelendik/webpack-browserify-love

Removing ""entry-loader"" dependency from webpack.",True
ae415f9e80949e28ed8f73bc28b9ecb8e8789935,2016-04-13 18:54:25,Yury Delendik,"Removing ""entry-loader"" dependency from webpack.",False
b834b6899c0119e691eb2119f914746a770f616b,2016-04-13 03:51:03,Yury Delendik,"Merge pull request #7185 from iloire/issue-7177-support-almondjs

Support almond.js #7177",True
127e6d73431346e43cd29a0814e0a65aebd230ff,2016-04-12 16:17:38,Jonas Jenwald,"Merge pull request #7184 from yurydelendik/pad-mesh

[Bug 1260585] Stops bleeding of pattern edges for mesh.",True
1dfc49152a4c8b3aa802828583af4352d00f0e78,2016-04-12 05:02:07,Ivan Loire,Support almond.js #7177,False
398e6acbc52c77e7465ce4a893bb3173c71638f1,2016-04-12 04:51:44,Yury Delendik,Stops bleeding of pattern edges for mesh.,False
be6754a1a05b59668677154cedb3ec43d0f96169,2016-04-11 19:27:40,Jonas Jenwald,"Merge pull request #7176 from yurydelendik/smask-resume

Allow SMask be resumed after restore() and better transform after SMask",True
d76db416f49286cda4276de40f6d9bb7c761242a,2016-04-11 18:32:06,Yury Delendik,Adds more SMask tests.,False
63f62a0e5350b944d369c2902228d48726561c34,2016-04-11 18:32:06,Yury Delendik,Finishing SMask at the end of operators list.,False
1485c1d1dad83ebf2c936b8074c4010ddb4f2a44,2016-04-11 18:32:06,Yury Delendik,Suspending/resuming SMask operation during setGState/restore.,False
b2828858ed2673fa1d4b6c8edc9290149597f193,2016-04-11 18:28:41,Yury Delendik,"Merge pull request #7178 from yurydelendik/rm-describe-test-hack

Removes hijack describe() hack from unit tests.",True
879340d7410880b6685d5b05442e365c6e363a51,2016-04-11 18:07:35,Yury Delendik,Removes hijack describe() hack from unit tests.,False
44c63bca281e0ee10520e62aa754f26e3e7ecd33,2016-04-11 17:50:45,Yury Delendik,"Merge pull request #7175 from Snuffleupagus/issue-6905-font_spec

Use `beforeAll`/`afterAll` in font_spec.js (issue 6905)",True
070f2d32ada10bd877bdfd6cae2a2179a20a9930,2016-04-11 17:47:30,Yury Delendik,"Merge pull request #7171 from Snuffleupagus/remove-new-Name/Cmd

Remove the remaining usages of `new {Name,Cmd}` in favor of `{Name,Cmd}.get`",True
c4e21c93a23c8e27faa0bff1e370bd5d4411b0f5,2016-04-10 19:39:11,Jonas Jenwald,"Use `beforeAll`/`afterAll` in font_spec.js (issue 6905)

This patch fixes the only remaining point in issue 6905.",False
5f925a561e392aae5944c756f91de427ace6f5ae,2016-04-10 17:43:24,Tim van der Meij,"Merge pull request #7174 from Snuffleupagus/issue-6905-crypto_spec

Use `beforeAll`/`afterAll` in `CipherTransformFactory` in crypto_spec.js (issue 6905)",True
b0ce83b37289894d31a1a26892d64168d5ba98fa,2016-04-10 16:50:21,Jonas Jenwald,"Use `beforeAll`/`afterAll` in `CipherTransformFactory` in crypto_spec.js (issue 6905

This patch also adds/improves utility functions for checking if the passwords are correct/incorrect, and replaces `string2binary` with `stringToBytes`. Finally the patch does away with the `DictMock`, in favour of using actual `Dict`s.

Re: issue 6905.",False
f59c3a0644160307eabc1963f08ae37418d23e72,2016-04-08 15:44:05,Jonas Jenwald,"Remove the remaining usages of `new {Name,Cmd}` in favor of `{Name,Cmd}.get`

Using `new {Name,Cmd}` should be avoided, since it creates a new object on *every* call, whereas `{Name,Cmd}.get` uses caches to only create *one* object regardless of how many times they are called.

Most of these are found in the unit-tests, where increased memory usage probably doesn't matter very much. But it still seems good to get rid of those cases, since no part of the codebase ought to advertise that usage.

Given the small size of the patch, I'm also tweaking a few comments and class names.",False
1c253e6e1d44237e12ed165d03c50576f732dcf4,2016-04-08 01:25:00,Yury Delendik,"Merge pull request #7170 from Snuffleupagus/pr-7097-followup

Prevent the *entire* viewer from zooming, when quickly switching from scrolling to zooming using the mousewheel (PR 7097 followup)",True
514210814dbd9f1c9a0dac9305c8387bbfc153af,2016-04-08 00:34:52,Jonas Jenwald,"Prevent the *entire* viewer from zooming, when quickly switching from scrolling to zooming using the mousewheel (PR 7097 followup)

This is a regression from PR 7097.

(Also, out of scope for this PR, but I think that a `setTimeout` value of `1000 ms` is too large. Switching from scrolling to zooming can fell sluggish, and give the impression that nothing happens.)",False
f351eb23aa9db75a0bdecd6737e5cbe1bc06f5c0,2016-04-08 00:22:10,Brendan Dahl,"Merge pull request #7097 from prometheansacrifice/zoom-due-to-scroll-inertia

Prevents document zooming if still scrolling and meta keys pressed (Issue #7022)",True
68e8f5fff51f2ee7f845a4217b9419b8676df866,2016-04-08 00:17:58,Brendan Dahl,"Merge pull request #7126 from yurydelendik/rm-pdfjs-display

Move all PDFJS display/ usages into global.js file.",True
1e4886a15a29596bd548d058651620c7c0e67132,2016-04-08 00:16:07,Yury Delendik,Remove global window and navigator usages from the core code.,False
1e3e14e6b2bee4dd414ee7a9f28c2ae16c93fb76,2016-04-08 00:16:07,Yury Delendik,Exposes all functional members via lib exports and use them in viewer.,False
1d12aed5cac6a0caccb0550e0aad4ef9f6bb263d,2016-04-08 00:16:07,Yury Delendik,Move all PDFJS.xxx settings into display/global.,False
bc8df673a62d5f58ca0fba0c20638f01cb97df7b,2016-04-08 00:09:01,Tim van der Meij,"Merge pull request #7164 from Snuffleupagus/issue-6905-dom_utils_spec

Use `beforeAll`/`afterAll` in `isExternalLinkTargetSet` in dom_utils_spec.js (issue 6905)",True
6123c0367f325ad97780545314815c788e82db04,2016-04-07 22:28:07,Yury Delendik,"Merge pull request #7169 from yurydelendik/jspm-format

Specifies package format for jspm.",True
38c41d86c65a66fa1db4a1162618a0f2ad409d72,2016-04-07 22:22:56,Yury Delendik,Specifies package format for jspm.,False
6878d7c6d3e7b791bdb9944ab2d0b99387bc2206,2016-04-07 22:18:46,Manas,"Disables zooming when the stream of events that don't have meta/ctrl
keys active at the outset, for 1000ms",False
c6c5b8fab812b8b783d44eabc5f8d03d05f45156,2016-04-07 17:30:40,Jonas Jenwald,"Use `beforeAll`/`afterAll` in `isExternalLinkTargetSet` in dom_utils_spec.js (issue 6905)

Re: issue 6905.",False
911a2ca1c68958f991b86eb583e70e60186b047b,2016-04-06 22:14:31,Tim van der Meij,"Merge pull request #7158 from timvandermeij/readme

Update Webpack and Browserify example README files",True
b293d1caf5f331f01283b7df4579cc7ea641379d,2016-04-06 22:06:41,Tim van der Meij,"Update Webpack and Browserify example README files

Previously the commands were not properly parsed as such by GitHub
because they need to be indented with four spaces.

Furthermore, address some minor textual nits.",False
6c9f418aaee79a2f19dfb933dda3d1c8db1acddf,2016-04-06 20:15:55,Yury Delendik,"Merge pull request #7150 from yurydelendik/browserify

Initial browserify example.",True
47688b655aa0b8dc06a4df6d950d1eaceecdb994,2016-04-06 20:10:59,Yury Delendik,"Merge pull request #7144 from yurydelendik/mv-viewer-2

Prepare viewer.js for async loading and module separation.",True
f9a0dc1188745a6fcce5a50e1018df8decd9124d,2016-04-06 20:08:11,Yury Delendik,"Merge pull request #7114 from dhuseby/Bug_1237908

[Bug 1237908] Make pdf.js use the correct principal origin attributes when loading …",True
867a5ea1b00f1bc5f58a1b5edc29f87ebe348527,2016-04-05 02:42:51,Dave Huseby,Make pdf.js use the correct principal origin attributes when loading subresources.,False
d7d7935648c5284de0c7db48d82a769be202e1f6,2016-04-04 22:02:01,Yury Delendik,Initial browserify example.,False
2dd03e178594ff9958819114c0e5f097e9e1f1ec,2016-04-02 22:29:29,Yury Delendik,"Merge pull request #7148 from yurydelendik/force-cjs-path

Forces UMD header to have relative path and extension for CommonJS.",True
118b71925c52ec06ffc0fd73a964e14a47389e17,2016-04-02 21:40:36,Yury Delendik,Forces UMD header to have relative path and extension for CommonJS.,False
34aa9154412527eaaa4659de0ffeed8e6c51d0bc,2016-04-02 21:20:38,Yury Delendik,"Merge pull request #7146 from Snuffleupagus/extract-CFFParser

Extract CFFParser and Type1Parser from fonts.js",True
055d642bf2047629420eb6d22ecd52c5d47ee6d4,2016-04-02 21:10:26,Yury Delendik,"Merge pull request #7107 from Rob--W/worker-loading

Detect premature worker load error",True
c8996f654fa8c1c8100e84ba387d0dabb9b0d598,2016-04-02 14:36:15,Rob Wu,"Detect and handle premature worker load error

Fall back to a fake worker if the worker fails to load or initialize,
e.g. due to a network error, a security error or simply a script error.",False
ef551e8266490182dfdddf5575d8ed2b5339aeb6,2016-04-02 03:08:53,Jonas Jenwald,Extract `Type1Parser` from fonts.js,False
b961e1d21b521b8dfb9758e450ca4f8be836bd12,2016-04-02 02:02:39,Jonas Jenwald,Extract `CFFParser` from fonts.js (issue 6777),False
313b418a20f3cb72975c1977288706689f69ce06,2016-04-01 20:59:44,Yury Delendik,Prepare viewer.js for async loading and module separation.,False
b371785fbbe5ae6d0bcf1adeaa215ee60a86796d,2016-04-01 20:57:16,Yury Delendik,Rename web/viewer.js -> web/app.js,False
a250c150ab54be59f78cde67451e745e9a6ee8f7,2016-04-01 18:53:24,Yury Delendik,"Merge pull request #7134 from yurydelendik/circ-stream-colorspace

Refactors to remove stream.js dependency on colorspace.js",True
ff3ce973b82b7b420fba5448b545fb162c5ff1ad,2016-04-01 18:39:21,Yury Delendik,"Merge pull request #7106 from Snuffleupagus/issue-7101

Keep track of the character to glyph mapping in font_renderer.js, to prevent errors when different characters point to the same glyph (issue 7101)",True
35cbf74b129c7d2672ec0954978539d5a29a9096,2016-04-01 18:06:16,Yury Delendik,Refactors to remove stream.js dependency on colorspace.js,False
13d440df6116f171c0b0568aaa5e9608c4600037,2016-03-31 23:13:11,Brendan Dahl,"Merge pull request #7078 from Snuffleupagus/refactor-toFontChar-without-file

Refactor the building of `toFontChar` for non-embedded fonts",True
8910cea7d66dcb160456886bbd6592817997619a,2016-03-31 21:55:16,Brendan Dahl,"Merge pull request #7066 from Snuffleupagus/Type1-headerBlockLength

Parse Type1 font files to determine the various `Length{n}` properties, instead of trusting the PDF file (issue 5686, issue 3928)",True
05cf709f8ef30fbb939f1c1cced3093688988c87,2016-03-31 14:38:12,Jonas Jenwald,"Parse Type1 font files to determine the various `Length{n}` properties, instead of trusting the PDF file (issue 5686, issue 3928)

Fixes 5686.
Fixes 3928.",False
c40df8a393d6b0c8659f89003373408c3067e61d,2016-03-31 14:30:27,Jonas Jenwald,"Make `Type1Font` more class-like, by adding closure

*Note:* Ignoring whitespace should simplify reviewing a great deal.",False
447c48ea2718cc672eb03908e1863b475b69e30c,2016-03-30 19:58:16,Yury Delendik,"Merge pull request #7133 from Snuffleupagus/faster-unittests-beforeAll-afterAll

Faster unit-tests by using `beforeAll`/`afterAll` in api_spec.js",True
7163e1eff324daea6aa23f6decbffd4637b5d849,2016-03-30 19:02:01,Jonas Jenwald,"Faster unit-tests by using `beforeAll`/`afterAll` in api_spec.js

In the API unit-tests, we're currently loading the `basicapi.pdf` before every sub-test in `PDFDocument` and `Page`, which slows down the unit-tests quite a bit.
Locally this patch reduces the run time for `gulp unittest` by at least 40% for me.",False
17aaa125df7f08465008b21d994c16684de83e32,2016-03-30 15:03:04,Jonas Jenwald,"Keep track of the character to glyph mapping in font_renderer.js, to prevent errors when different characters point to the same glyph (issue 7101)

Fixes 7101.",False
bec4891f5d3ee5ea32af01a6614d7de606d90f39,2016-03-30 03:53:28,Yury Delendik,"Merge pull request #7102 from brendandahl/onerror

Log uncaught global errors.",True
6d2b195857092ade9ad97a61dfd5b347384c76b8,2016-03-30 02:14:22,Tim van der Meij,"Merge pull request #7128 from Snuffleupagus/issue-6204-unittest

Add unit-tests for destionations in /Names (NameTree) dictionaries where all entries are indirect objects",True
7cb055307d0e3860137019e2b6c302beba6e31a2,2016-03-29 23:02:51,Nico Schlömer,"Add element to text layer even if width === 0

Some browsers render certain special characters with width 0, others with strictly positive width. (For example, the Greek Delta, Δ, has width 0 in Google Chrome, and a positive width in Firefox.) The `if` clause in operation so far results in different text layer DOM trees for different browsers.

This commit fixes that by adding the elements independently of their width.",False
4e2f70440fca20e6c2919a3491346f411fa55129,2016-03-29 21:49:28,Brendan Dahl,"Merge pull request #6711 from yurydelendik/errors

Better errors capturing at the core and stop rendering on error.",True
ac772017b6a567c1aad52b3c16495e87c4d08065,2016-03-29 21:25:05,Jonas Jenwald,"Add unit-tests for destionations in /Names (NameTree) dictionaries where all entries are indirect objects

Re: issue 6204 and PR 6208.",False
df0cbccfd8cd0aad970d151e1b6d8aa9780e48d3,2016-03-29 21:02:17,Yury Delendik,"Merge pull request #7129 from yurydelendik/jasmine

Updates Jasmine version.",True
0a700fa29d54a5dd02527615aac8f69a94e2c87a,2016-03-29 20:04:13,Yury Delendik,Updates Jasmine version.,False
553928c26e0de247af07e0613cc84242fb430e09,2016-03-29 03:34:59,Tim van der Meij,"Merge pull request #7118 from Snuffleupagus/issue-7115

Prevent failures in the Annotation code if the `Rect` array contains indirect objects (issue 7115)",True
27dd386248c96f9f0dbbc568a8f81a27c5448206,2016-03-28 20:49:17,Yury Delendik,"Merge pull request #7122 from Snuffleupagus/issue-7117

Allow unit-tests to use linked PDF files, by having the `unittest` command download unavailable ones (issue 7117)",True
8f097abb46ed469bd3d36596222a6f4db915c4e1,2016-03-27 16:47:55,Jonas Jenwald,"Allow unit-tests to use linked PDF files, by having the `unittest` command download unavailable ones (issue 7117)",False
13d7a5070ec50ac944954185279b88c424f7283f,2016-03-27 01:25:16,Jonas Jenwald,"Prevent failures in the Annotation code if the `Rect` array contains indirect objects (issue 7115)

Note that in the PDF files provided by the reporter, this issue was limited to `Rect` arrays in AcroForm entries (which we currently don't support).
However, since a bad PDF generator could create this problem in *any* kind of annotation, the reduced test-case included here uses a simple LinkAnnotation instead.

Fixes 7115.",False
df7afcf004c407cc9488a5120425b62d22aaecd4,2016-03-26 01:49:43,Brendan Dahl,"Merge pull request #7053 from yurydelendik/rm-pdfjs-core

Removes global PDFJS usage from the src/core/.",True
c22c85f8ee25e5d148d2c6a7b2c7a0ad78cef943,2016-03-25 23:42:36,Yury Delendik,"Merge pull request #7113 from yurydelendik/disable-issue6961

Disables issue6961 test.",True
a505aa8e904a0b6f43af816bdbb60195d7220f9d,2016-03-25 23:18:11,Yury Delendik,Disables issue6961 test.,False
b589add2b5b002f7c996e4a3316ca04aec72f7e6,2016-03-25 18:40:56,Jonas Jenwald,Update l10n files,False
7aa864db3ef501d9580d9cca10de875e46799b0d,2016-03-24 22:54:13,Brendan Dahl,"Merge pull request #7108 from yurydelendik/frontWindow-null

Removes frontWindow usage from the stream converter.",True
2b246192e110039738703c7e3f3d399af9fc79f7,2016-03-24 22:17:34,Yury Delendik,Removes frontWindow usage from the stream converter.,False
da8e345d143457f99dd7c39603404de7a1942fca,2016-03-24 19:08:27,Tim van der Meij,"Merge pull request #7005 from tobytailor/master

Fixes insertion of blank pages during print if page sizes differ",True
2fa4dd6f4024b3ff25c74cd7008df3ffa9f68561,2016-03-24 05:54:37,Yury Delendik,Proxy global PDFJS.verbosity to properly configure shared/util.,False
a8e5912cb16612d39a83e7bf20e43a9b6567e02e,2016-03-24 05:54:37,Yury Delendik,Moves shared/global to display/global,False
e372f3608b12ec8adf31f1264fa73e52a556bb3c,2016-03-24 05:54:37,Yury Delendik,Makes WorkerMessageHandler non-global.,False
bda5e6235e9a8309ace5c13c0fb557b3fd657709,2016-03-24 05:54:37,Yury Delendik,Removes global PDFJS usage from the src/core/.,False
e1ac5744d01555cbb76b79d5dcfb2341680ff22e,2016-03-24 03:29:45,Tim van der Meij,"Merge pull request #7105 from fkaelberer/fkaelberer-issue-template

Add an ISSUE_TEMPLATE",True
4eb9daf34af437f2b7cebd894b2c2ccbc27eb59c,2016-03-24 03:18:14,fkaelberer,Add an ISSUE_TEMPLATE,False
fb47490648509279c352326c299e39fc81117a74,2016-03-23 04:19:32,Brendan Dahl,Log uncaught global errors.,False
54ee15d866812d8c9db9d5e23be654534b616fc6,2016-03-23 01:38:12,Yury Delendik,"Merge pull request #7100 from yurydelendik/stream-wo-parser

Removes core/stream circular dependency on core/parser.",True
4a44a2c7dcd8c929a2a2eb176a1a9243229b9358,2016-03-23 00:41:27,Yury Delendik,"Merge pull request #7098 from Snuffleupagus/uint32-checksums

Ensure that TrueType font tables have `uint32` checksums",True
6038c236b24b7d60181ee4a3df0ec43de5ba2900,2016-03-23 00:36:01,Yury Delendik,Removes core/stream circular dependency on core/parser.,False
d78fae01812193aa80237fc2422345391da7337d,2016-03-22 18:10:50,Jonas Jenwald,"Ensure that TrueType font tables have `uint32` checksums

According to ""The table directory"" under https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6.html#Directory, TrueType font tables should have `uint32` checksums.

This is something that I noticed, and was initially confused about, while debugging a TrueType issue.
As far as I can tell, the current (`int32`) checksums we use doesn't cause any issues in practice. However, I do think that this should be addressed to agree with the specification, and to reduce possible confusion when reading the font code.",False
708895ffbacdb468d14906d5ae5e49c287910102,2016-03-22 02:51:07,Tobias Schneider,Let print canvas height scale proportionally,False
aeabd0db209a98b70c8b14226ae381e8b49c81b1,2016-03-22 02:51:07,Tobias Schneider,Fix insertion of blank pages during printing due to non-matching page sizes,False
21ed8ff71d581c56ee8c1f225199b8a5d901e7cb,2016-03-22 00:27:36,Yury Delendik,"Merge pull request #7039 from prometheansacrifice/async-cmap-factory

Refactors CMapFactory.create to make it async",True
f6d28ca32355f37a643a06d453bed74a21deb21a,2016-03-21 23:08:19,Manas,Refactors CMapFactory.create to make it async,False
7ad8f3a6f08da819be3eaca11ae33910bd73c7c6,2016-03-21 02:42:30,Tim van der Meij,"Merge pull request #7093 from Snuffleupagus/gulp-importl10n-dir-fix

Use the correct path when checking if a `/l10n` directory exists, to avoid errors during `gulp importl10n` (PR 7063 followup)",True
41e5fa3c7a80daa08da71549836249282c9fed49,2016-03-21 00:32:43,Jonas Jenwald,"Use the correct path when checking if a `/l10n` directory exists, to avoid errors during `gulp importl10n` (PR 7063 followup)

This is regression from PR 7063, causing `gulp importl10n` to fail:
```
$ gulp importl10n
[19:45:02] Using gulpfile c:\Users\Jonas\Git\pdfjs\gulpfile.js
[19:45:02] Starting 'importl10n'...

Downloading ach...
[19:45:02] 'importl10n' errored after 4.42 ms
[19:45:02] Error: EEXIST, file already exists 'c:\Users\Jonas\Git\pdfjs\l10n\ach
'
    at Error (native)
    at Object.fs.mkdirSync (fs.js:747:18)
    at downloadLanguageFiles (c:\Users\Jonas\Git\pdfjs\external\importL10n\local
es.js:59:8)
    at next (c:\Users\Jonas\Git\pdfjs\external\importL10n\locales.js:90:5)
    at Object.downloadL10n (c:\Users\Jonas\Git\pdfjs\external\importL10n\locales
.js:91:5)
    at Gulp.<anonymous> (c:\Users\Jonas\Git\pdfjs\gulpfile.js:92:11)
    at module.exports (c:\Users\Jonas\Git\pdfjs\node_modules\gulp\node_modules\o
rchestrator\lib\runTask.js:34:7)
    at Gulp.Orchestrator._runTask (c:\Users\Jonas\Git\pdfjs\node_modules\gulp\no
de_modules\orchestrator\index.js:273:3)
    at Gulp.Orchestrator._runStep (c:\Users\Jonas\Git\pdfjs\node_modules\gulp\no
de_modules\orchestrator\index.js:214:10)
    at Gulp.Orchestrator.start (c:\Users\Jonas\Git\pdfjs\node_modules\gulp\node_
modules\orchestrator\index.js:134:8)
```",False
56f5c3a5ff036b4639712b3581f9fc34d0202d0c,2016-03-19 01:38:46,Brendan Dahl,"Merge pull request #7088 from Snuffleupagus/issue-6957

Pass the `PDFJS.postMessageTransfer` parameter to the worker, so that the `MessageHandler` can be setup correctly in `createDocumentHandler` (issue 6957)",True
91756f6e86bb780945e70c241c3de5e74e24a86e,2016-03-16 23:04:26,Jonas Jenwald,"Pass the `PDFJS.postMessageTransfer` parameter to the worker, so that the `MessageHandler` can be setup correctly in `createDocumentHandler` (issue 6957)

This regressed in commit https://github.com/mozilla/pdf.js/pull/6571/commits/acdd49f48097ffcb27332673a8b51cd653f6de88, i.e. PR 6571.

Fixes 6957.",False
122d4732398ca67381cc469dc2f49696b824c98d,2016-03-14 14:55:11,Jonas Jenwald,"Merge pull request #7084 from timvandermeij/gulp-fix

Revert renaming `node make` to `gulp` for `mozcentral`",True
2b6d7ba3ec4a2b06b3885f0efb92ad79af766888,2016-03-14 02:23:17,Tim van der Meij,Gulp: allow passing parameters and revert one `node make` renaming,False
c6d2b7f9d9c8fdf75b0b73b5c6bb1b7b7ebcf91d,2016-03-11 19:56:59,Yury Delendik,"Merge pull request #6906 from KamiHQ/fix-printing

avoid apply transform twice for composite context",True
8ba413e761e252475911e14cd921126e05a187ab,2016-03-11 19:29:09,Yury Delendik,Better errors capturing at the core and stop rendering on error.,False
cd2bd057abb3074f3ff9627a889919d1422597d8,2016-03-11 01:55:39,Jonas Jenwald,"Refactor the building of `toFontChar` for non-embedded fonts

Currently there's a lot of duplicate code for non-embedded `toFontChar`, which this patch simplifies by extracting the code into a helper function instead.",False
4784863ef7ef3198631cb3299fff16a0843f7a88,2016-03-11 01:15:59,Tim van der Meij,"Merge pull request #7069 from Snuffleupagus/TrueType-recover-glyphNames

Convert `uniXXXX` glyph names to proper ones when building the `charCodeToGlyphId` map for TrueType fonts (bug 1132849, issue 6893, issue 6894)",True
dfe9015a43b82595655419ef496e27263cef5da8,2016-03-10 00:07:15,Jonas Jenwald,"Convert `uniXXXX` glyph names to proper ones when building the `charCodeToGlyphId` map for TrueType fonts (bug 1132849, issue 6893, issue 6894)

This patch adds a `getUnicodeForGlyph` helper function, which is used to recover Unicode values for non-standard glyph names.

Some PDF generators, e.g. Scribus PDF, use improper `uniXXXX` glyph names which breaks the glyph mapping. We can avoid this by converting them to ""standard"" glyph names instead.

Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1132849.
Fixes 6893.
Fixes 6894.",False
147598417ceb3df175b3d89c0e4ac4db49359c88,2016-03-09 16:44:03,Tim van der Meij,"Merge pull request #7046 from a0preetham/zero_descent_fix

fonts.js: bad metric overrides when values are zero",True
4065a21f8cdfa4a26b2843284ca2c47f52164a50,2016-03-08 01:30:39,Yury Delendik,"Merge pull request #7029 from Snuffleupagus/PDFThumnailView-refactor-canvas-to-image

[PDFThumbnailView] Re-factor the `canvas` to `image` conversion such that we always render to a `canvas`, and then replace it with an `image` once rendering is done",True
b540d7d6dce94c6410e6af740b5c26641b7b8393,2016-03-08 00:59:29,Yury Delendik,"Merge pull request #7063 from timvandermeij/gulp

Migrate `clean` and `importl10n` target to gulp",True
96cca2b37acfe43f9a12763c0329185cb1595170,2016-03-05 01:44:56,Tim van der Meij,Migrate `clean` and `importl10n` target to gulp,False
b8aaa242576537178201612d69464ddcfbcd8693,2016-03-05 01:00:36,Tim van der Meij,Convert all `node make` instances to `gulp`,False
ec1cf28679bd6a9bb86570f15857f3e46c7568aa,2016-03-04 23:55:52,Tim van der Meij,"Merge pull request #7061 from yurydelendik/gulp

Introducing gulp",True
262d1e0863973d28b56075462c3d23756edb16eb,2016-03-04 21:20:51,Yury Delendik,Import L10n files.,False
9798e1007ef934e35e0da0e3d7e09ccd7c98a8f8,2016-03-04 21:06:46,Yury Delendik,Introducing gulp.,False
be1e12dbcb2cdb91f01090e35e050dc316300038,2016-03-03 19:21:41,Preetham Mysore,Fix for descent calculation while reading font hhea headers,False
51f6aba0a03747f65d08ca2503b3c55f898e6173,2016-03-03 03:28:05,Tim van der Meij,"Merge pull request #7054 from timvandermeij/fix-typo

Correct a minor name issue in the outline viewer code",True
f4bb23a66b0fe008be4d839ee09158ffdd5e829e,2016-03-03 03:21:31,Tim van der Meij,Correct a minor name issue in the outline viewer code,False
d302ac612ef3ea1973e6127edff45f87f3c94ab8,2016-03-03 03:12:03,Tim van der Meij,"Merge pull request #6943 from Snuffleupagus/outline-styles

Add support for bold/italic styled outline items in the viewer",True
e1906035caac61e9118455db0f7e91527a09b9c4,2016-03-02 22:52:48,Yury Delendik,"Merge pull request #7052 from yurydelendik/issue7048

Reverts back un-need change made at #6879.",True
a022f6f0691b8b817be58499f1eb244aaa5cdb23,2016-03-02 21:27:33,Yury Delendik,Reverts back un-need change made at #6879.,False
8402c791711a1dd0a66021cc02e97e455194d8b1,2016-03-02 14:41:42,Jonas Jenwald,"Merge pull request #7050 from brendandahl/issue4402

For CIDFontType2 use CID as glyph ID when missing CID to GID map.",True
9b126711cd29ec7ef0a54a5b58e5316fb2eb68cc,2016-03-02 14:26:58,Jonas Jenwald,Add support for bold/italic styled outline items in the viewer,False
a6acf74b54484c59df11e874ce552775f19dfcf3,2016-03-02 07:33:37,Brendan Dahl,"Merge pull request #7023 from brendandahl/issue6721

Only draw glyphs on canvas if they are in the font or the font file is missing.",True
6e1d131384f7d218c7f5f73c0d54b1554f529052,2016-03-02 06:35:33,Brendan Dahl,For CIDFontType2 use CID as glyph ID when missing CID to GID map.,False
6b1de4aa380b4a4e784d340343a32a4b570eecfe,2016-03-02 06:09:40,Brendan Dahl,"Merge pull request #7049 from Snuffleupagus/issue-7020

Avoid accidentally getting the entire font file in `readNameTable` (issue 7020)",True
ff87f3fb86e3b50d3d952842cb0d57d991fe994e,2016-03-02 02:54:58,Brendan Dahl,Only draw glyphs on canvas if they are in the font or the font file is missing.,False
505f15f2219251b440830e6c80bd42d29ef3190c,2016-03-02 02:29:49,Jonas Jenwald,"Avoid accidentally getting the entire font file in `readNameTable` (issue 7020)

In the PDF file in question, some of the 'name' table entries have `record.length === 0`. This becomes problematic in the non-unicode case, since `font.getBytes(0)` will fetch the *entire* stream.
Given that OTS rejects 'name' entries larger than `2^16`, this thus explain the sanitizer errors.

Fixes 7020.",False
22341c07617f83d05d2582c53e8cb65931fdfddf,2016-03-01 20:40:52,Yury Delendik,"Merge pull request #6879 from yurydelendik/streams

Makes PDF data reading Streams API friendly.",True
4d9a3d4fb9b667b25f62647de200a4816b2c903c,2016-02-29 00:36:56,Tim van der Meij,"Merge pull request #7040 from Snuffleupagus/remove-PDFThumbnailViewer_ensureThumbnailVisible

Remove `PDFThumbnailViewer_ensureThumbnailVisible`",True
39cba5d25d45c439cbc9667f8cfbea008b0e6d86,2016-02-28 22:51:59,Jonas Jenwald,"Remove `PDFThumbnailViewer_ensureThumbnailVisible`

Functionality wise, `ensureThumbnailVisible` is essentially just a shorthand for `scrollThumbnailIntoView`. (And note that `PDFViewer` doesn't implement a `ensurePageVisible` method.)

The only remaining usage of `PDFThumbnailViewer_ensureThumbnailVisible` is inside `PDFPresentationMode`, which introduces an otherwise unnecessary `PDFThumbnailViewer` dependency there.

We're already relying on the `presentationmodechanged` event, in various files, to track the state of Presentation Mode. Thus we can simply listen for that event in `PDFSidebar` too, and update the thumbnails if necessary.",False
b5582e14a93a59fb8a37a6ce106e0c8d5866121f,2016-02-28 22:48:12,Jonas Jenwald,"[PDFThumbnailView] Re-factor the `canvas` to `image` conversion such that we always render to a `canvas`, and then replace it with an `image` once rendering is done

*This is a follow-up to PRs 6299 and 6441.*

The patch also adds an option to `PDFThumbnailView`, that disables the canvas-to-image conversion entirely, which might be useful in the context of issue 7026.",False
9ff6c83bb6ac91f628bf87a38796e83758a60718,2016-02-28 19:28:47,Tim van der Meij,"Merge pull request #7038 from Snuffleupagus/refactor-sidebar

Move the sidebar related code from viewer.js into `PDFSidebar`",True
67a1dfcfb59691be7173822819e4482234ea2b06,2016-02-27 18:43:09,Jonas Jenwald,"Move the sidebar related code from viewer.js into `PDFSidebar`

The sidebar code has, except for minor fixes/additions (such as attachments), been largely untouch for years.
To avoid having a bunch of sidebar code sprinkled throughout viewer.js, this patch moves the sidebar code into a separate file (pdf_sidebar.js), similar to how most other functionality has been moved in the last few years.

Besides simply moving code around, this patch also has the added benefit that we now keep track of the sidebar state (not just opened/closed).
This now makes it possible to handle both `Preferences` *and* `ViewHistory` settings for the sidebar state in a cleaner way, preventing strange and confusing interactions between the two.",False
21f048234d0b6b185768c5c4e4a58dac19e44945,2016-02-27 18:43:08,Jonas Jenwald,"Refactor how `PDFOutlineView`/`PDFAttachmentView` is initialized in viewer.js, rename the classes, and refactor their `render` methods

Changes `PDFOutlineView`/`PDFAttachmentView` to be initialized once, since we're always creating them, and refactor their `render` methods to instead pass in the `outline`/`attachments`.

For consistency with other ""classes"", the `PDFOutlineView`/`PDFAttachmentView` are renamed to `PDFOutlineViewer`/`PDFAttachmentViewer`.

Also, make sure that the outline/attachments are reset when the document is closed. Currently we keep the old ones around until the `getOutline`/`getAttachments` API calls are resolved for a new document.",False
7cb3c365ca20066acc3032af025a47ce6de09929,2016-02-27 18:28:14,Tim van der Meij,"Merge pull request #7035 from Snuffleupagus/issue-7034

Ensure that `PDFFindController_reset` actually resets *all* state (issue 7034)",True
915eac3d2069201687a3222866d8cbc9a17bb3fd,2016-02-27 17:57:37,Tim van der Meij,"Merge pull request #7036 from Snuffleupagus/svg-example-set-cmap-url

[SVG] Specify the `PDFJS.cMapUrl`/`PDFJS.cMapPacked` parameters in the svgviewer example",True
4a6575643bbbc8c554a13e1debde53e2484130fa,2016-02-27 03:37:39,Jonas Jenwald,"[SVG] Specify the `PDFJS.cMapUrl`/`PDFJS.cMapPacked` parameters in the svgviewer example

Re: issue 7017.
This should prevent the error, but does not fix the broken rendering.

The rendering issues are caused by `svg.js` not supporting the various text rendering modes, in this case specifically ""invisible"" (as indicated in the console `Warning: Unimplemented method setTextRenderingMode`).

Compared to the canvas case, where we just ignore invisible text, a smarter solution is probably required for the SVG case. Since just ignoring invisible text in `svg.js` would mean that text-selection isn't possible.",False
0c19d84911569b75577ce5e72248bc4c960e7a85,2016-02-27 03:07:51,Tim van der Meij,"Merge pull request #7031 from Snuffleupagus/outline-default-title

Add a default title for outline items, to prevent display issues if the title is missing",True
c7a44391cfd47210a574291e7a316934e706f37a,2016-02-26 23:05:45,Jonas Jenwald,"Add a `reset` method to `PDFFindbar`, and use it to clear parts of the find UI when the document is closed",False
e7d039dbce8849c225ddafa5ed06fcfda14ee86e,2016-02-26 23:05:17,Jonas Jenwald,"Ensure that `PDFFindController_reset` actually resets *all* state (issue 7034)

To reduce code duplication, the initialization code now uses the `reset` method.
Also, this patch moves `charactersToNormalize` out of `PDFFindController`, since it seemed better suited to be a ""constant"".",False
9bcbd4d87218c4fb5b333d11f39ded33f7cb315c,2016-02-26 17:16:46,Jonas Jenwald,"Add a default title for outline items, to prevent display issues if the title is missing

Open http://www.puolustusvoimat.fi/wcm/61ba4180411e702ea19ee9e364705c96/luonnonmuonaohjelmalumo1985.pdf?MOD=AJPERES#pagemode=bookmarks.

Note how the outline looks entirely empty, but hovering over it you'll see that there are entries present. There's two separate issues here, first of all the fact that you cannot visually make out the outline items, and secondly that the lack of text means that the clickable area becomes too small.

In Adobe Reader this issue is somewhat mitigated, since they use an icon for every item. For PDF.js, the easist way to address this seems to be making use of a default title.
This issue should be *very* rare in practice, but given the simplicity of the solution I think that we should fix this.",False
2b813c0ca4bcb67c6e4c1e4da5500b6aafb28951,2016-02-26 03:47:48,Tim van der Meij,"Merge pull request #7030 from Snuffleupagus/PDFThumbnailView-remove-hasImage

Remove the `hasImage` property from `PDFThumbnailView`",True
95aa8b0415592176ce0bf00e88354a9e50be6979,2016-02-25 21:34:11,Jonas Jenwald,"Remove the `hasImage` property from `PDFThumbnailView`

The `hasImage` property is a left-over from older thumbnail code, and has been made obsolete by `renderingState`.
Having two different properties tracking (basically) the same state is asking for trouble, since it's very easy to forget to update one of them, with annoying bugs as the result.",False
05917b65d50153c33173361f15a5074252d7fe71,2016-02-25 14:57:49,Jonas Jenwald,"Merge pull request #7016 from timvandermeij/annotations-missing-popup

Group popup creation code and apply it to more annotation types",True
ad31e52a26c9f08a0ff49b196f42f2f7bea01067,2016-02-25 05:05:45,Tim van der Meij,Group popup creation code and apply it to more annotation types,False
41efb92d3a6af0be38afaf27808504e404491afd,2016-02-24 17:28:06,Jonas Jenwald,"Merge pull request #6988 from timvandermeij/fileattachment-annotation

Implement support for FileAttachment annotations",True
0351c7eff49ba2357575a5bf1084059c98bb91a8,2016-02-24 03:19:53,Tim van der Meij,"Move the `getFileName` helper function to the core

This is required to be able to use it in the annotation display code,
where we now apply it to sanitize the filename of the FileAttachment
annotation. The PDF file from https://bugzilla.mozilla.org/show_bug.cgi?id=1230933 has shown that some PDF generators include the path of the file rather than the filename, which causes filenames with weird initial characters. PDF viewers handle this differently (for example Foxit Reader just replaces forward slashes with spaces), but we think it's better to only show the filename as intended.

Additionally we add unit tests for the `getFilenameFromUrl` helper
function.",False
10902fd882055c8a03b0da32de3d293b0e9b472c,2016-02-24 03:19:53,Tim van der Meij,Implement unit and reference testing for FileAttachment annotations,False
6a33dfd13a20afb1bc1ed5dc9f96740d4e9a2312,2016-02-24 03:19:53,Tim van der Meij,Implement support for FileAttachment annotations,False
c53581f4e54026487393bb978b0dbb260ed8e13c,2016-02-23 03:29:38,Tim van der Meij,"Merge pull request #7009 from KamiHQ/annotations-fix

[api-minor] Always expose data.title and data.contents for TextAnnotation",True
ebe6fb2560659948edefdfa62d38621dfbccd894,2016-02-23 02:24:08,Tim van der Meij,"Merge pull request #7012 from KamiHQ/fix-annotation-popup

don't render highlight/underline/squiggly/strikeout annotations that doesn't have popup",True
6762ff2fd66c6d974d5efd2b7f33ced0b4aca752,2016-02-22 05:40:20,Xiliang Chen,don't render highlight/underline/squiggly/strikeout annotations that doesn't have popup,False
266cedd960c5d16e9ca7ce985e53097702b80d1f,2016-02-19 06:20:25,Xiliang Chen,always expose data.title and data.content,False
0629fd0afaf0e7d658d957fdc5722dfc8473d04f,2016-02-19 05:48:15,Brendan Dahl,"Merge pull request #7007 from Snuffleupagus/bug-1248959

[Addon] Catch errors in `getFindBar` (in PdfStreamConverter.jsm) to fix loading of PDF files in the bookmark sidebar (bug 1248959)",True
0d591719d9482f255782dea1c1e0d741574f7b88,2016-02-19 00:47:53,Yury Delendik,Makes PDF data reading Streams API friendly.,False
f64113c927b10672d26b05087cd5f635cd96dc57,2016-02-18 18:29:18,Jonas Jenwald,"[Addon] Catch errors in `getFindBar` (in PdfStreamConverter.jsm) to fix loading of PDF files in the bookmark sidebar (bug 1248959)

Fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1248959.",False
8cdb69634f6149f400541794b69e6fc85c433420,2016-02-18 16:21:07,Jonas Jenwald,"Merge pull request #6984 from Snuffleupagus/issue-6066

Update `JpegImage.getData` to support `forceRGBoutput` for images with `numComponents === 1` (issue 6066)",True
a494e33776995c3617d07cb8ab7536f3bbbfd280,2016-02-18 14:42:37,Jonas Jenwald,"Update `JpegImage.getData` to support `forceRGBoutput` for images with `numComponents === 1` (issue 6066)

*A more robust solution for issue 6066.*

As a temporary work-around for (the upstream) [bug 1164199](https://bugzilla.mozilla.org/show_bug.cgi?id=1164199), we parsed *all* images in the Firefox addon during a short time.
Doing so uncovered an issue with our image handling (see 6066), for JPEG images with a `DeviceGray` ColorSpace *and* `bpc !== 1` (bits per component).

As long as we let the browser handle image decoding in this case, this isn't going to be an issue, but I do think that we should proactively fix this to avoid future issues if we change where the images are decoded (in `jpg.js` vs in browser).
Also, we currently don't seem to have a test-case for that kind of image data.",False
9eedfc128c526d3155955ef825a952d627780922,2016-02-17 04:01:55,Tim van der Meij,"Merge pull request #6998 from Snuffleupagus/outline-styles-core

[api-minor] Change `getOutline` to actually return the RGB color of outline items",True
7cf9de2c173ec67f2139cae64e2a4c954012fc1b,2016-02-15 18:11:22,Jonas Jenwald,"[api-minor] Change `getOutline` to actually return the RGB color of outline items

Currently the `C` entry in an outline item is returned as is, which is neither particularly useful nor what the API documentation claims.

This patch also adds unit-tests for both the color handling, and the `F` entry (bold/italic flags).",False
45fea8808e43e846e4aace0d8f672015fd788951,2016-02-14 20:02:45,Jonas Jenwald,"Merge pull request #6985 from timvandermeij/xhtml-leftovers

Remove XHTML leftovers from the viewer HTML files",True
05e080c802f651caa9642cfbfe40f743777d7268,2016-02-14 18:39:48,Tim van der Meij,"Merge pull request #6987 from timvandermeij/readme

Remove Opera from the README file as they removed the extension",True
eeeebe8061ef79758aa2a59858ae97ecaa1569b4,2016-02-14 18:35:20,Tim van der Meij,Remove Opera from the README file as they removed the extension,False
edb2eecdc881ba89ffaed42599a428197b1b56f7,2016-02-14 17:53:34,Tim van der Meij,Remove XHTML leftovers from the viewer HTML files,False
98db06807900ebf454145ddac1bdaa17c02e5ad5,2016-02-14 16:08:43,Jonas Jenwald,"Reduce the overall indentation level in `Catalog_readDocumentOutline`, by using early returns, in order to improve readability",False
e9a1a47d2881e59362670d1504bc5f457961cf3c,2016-02-14 01:18:37,Tim van der Meij,"Merge pull request #6982 from Snuffleupagus/evaluator-remove-getAll

Remove the only remaining `Dict_getAll` usage (in evaluator.js) and the method itself",True
addc4a3dedf7a3d881ff2a4cfef70c9dfbea7796,2016-02-14 00:42:09,Tim van der Meij,"Merge pull request #6856 from KamiHQ/remove-has-html

move hasHtml to AnnotationElement",True
cd9d134af3d2d89429dd495cebd6ef193f057bc0,2016-02-13 19:37:47,Tim van der Meij,"Merge pull request #6939 from LilyBin/uglifyjs

Use UglifyJS to minify files in minified target",True
1ee016b005ff3265b82f784bbde253bd99657d94,2016-02-13 03:02:07,Jonas Jenwald,"Remove `Dict_getAll` since it is now unused

`Dict_getAll` is problematic for a number of reasons. First of all, as issue 6961 shows, it can be really bad for performance, since it dereferences all indirect objects.
Second of all, all the derefencing can lead to data being unncessarily requested when ranged/chunked loading is used, thus unnecessarily delaying rendering.

Note: For cases where `Dict_getAll` was previously used, `Dict_getKeys` in combination with `Dict_get` can be used instead. This has the advantage that data isn't requested until it's actually needed.",False
93ea866f0141dbad92edc7be0555b1510582ee2b,2016-02-13 03:01:50,Jonas Jenwald,"Remove `getAll` from `EvaluatorPreprocessor_read`

For the operators that we currently support, the arguments are not `Dict`s, which means that it's not really necessary to use `Dict_getAll` in `EvaluatorPreprocessor_read`.
Also, I do think that if/when we support operators that use `Dict`s as arguments, that should be dealt with in the corresponding `case` in `PartialEvaluator_getOperatorList` which handles the operator.

The only reason that I can find for using `Dict_getAll` like that, is that prior to PR 6550 we would just append certain (currently unsupported) operators without doing any further processing/checking. But as issue 6549 showed, that can lead to issues in practice, which is why it was changed.

In an effort to prevent possible issue with unsupported operators, this patch simply ignores operators with `Dict` arguments in `PartialEvaluator_getOperatorList`.",False
62b17ad36e305659b7658e92f37fa32b7a6d8ef0,2016-02-12 22:40:07,Jonas Jenwald,Add a linked `load` test for issue 6549,False
2f145d8db4d53cb2f7cc87689c6b6b419afa314b,2016-02-12 03:06:32,Yury Delendik,Republish addon,False
2addcc795781b4683110d4d71fdadd55ab9dbdf7,2016-02-12 02:51:15,Yury Delendik,Republish addon,False
2d61652c75559243999c2d556259112ca53c2476,2016-02-11 19:03:03,Jonas Jenwald,Update l10n files,False
1f49e7b19490e5f2c3a82eadee1cf240b2597ca2,2016-02-11 18:53:10,Tim van der Meij,"Merge pull request #6975 from Snuffleupagus/ColorSpace-remove-getAll

Get rid of `getAll` usage in colorspace.js",True
6133a993a95918219b61753461ea1a225f4be506,2016-02-11 18:45:31,Tim van der Meij,"Merge pull request #6972 from Snuffleupagus/loadType3Data-getKeys

Replace `getAll` with `getKeys` in `loadType3Data`",True
72c05af37c331c87a2b0bef38d09b53dfcbca399,2016-02-11 18:40:45,Tim van der Meij,"Merge pull request #6973 from pra85/patch-1

Fix a typo in api.js",True
02a6b73492b08226f535c0cea795ef16d52358b3,2016-02-11 16:29:26,Jonas Jenwald,"Get rid of `getAll` usage in colorspace.js

For the `CalGray`/`CalRGB`/`Lab` colour spaces, we're currently using `getAll` to retrieve the parameters. However that's not really necessary, since we may just as well explicitly `get` the needed parameters instead.",False
049beac3466df8cb9bac8110c516af37c8e7b46b,2016-02-11 07:18:56,Prayag Verma,"Fix a typo in api.js

`fulfills` misspelt as `fullfills`",False
e42da0f5e93f6b2cc2ae126995acb23a79fac532,2016-02-11 06:28:17,Xiliang Chen,move hasHtml to AnnotationElement,False
acf74d40b1fcdc5ebe0cde2482060aa0215e10e5,2016-02-11 01:28:24,Tim van der Meij,"Merge pull request #6941 from Rob--W/crx-allow-pdf-in-local-frames

Allow local PDF files to be viewed in local frames",True
f7f60197ce6de81fcd0b3bdc177c0e55cd39f813,2016-02-11 00:49:14,Jonas Jenwald,"Replace `getAll` with `getKeys` in `loadType3Data`

Not only is `getAll` less efficient, but given that we actually need the keys here, using `getKeys` seems much more suitable.",False
33b57d7450807d7e6ab40fac9f67170b109fd249,2016-02-10 22:36:06,Yury Delendik,"Merge pull request #6971 from Snuffleupagus/issue-6961

Replace `getAll` with `getKeys` in `PartialEvaluator_hasBlendModes` to speed up loading of badly generated PDF files (issue 6961)",True
07e1ad40a2c8cb4d6e46053fe2714d57f2fbca01,2016-02-10 21:51:38,Jonas Jenwald,"Replace `getAll` with `getKeys` in `PartialEvaluator_hasBlendModes` to speed up loading of badly generated PDF files (issue 6961)

Some bad PDF generators, in particular ""Scribus PDF"", duplicates resources *a lot* at various levels of the PDF files. This can lead to `PartialEvaluator_hasBlendModes` taking an unreasonable amount of time to complete.
The reason is that the current code is using `Dict_getAll`, which recursively dereferences *all* indirect objects, which can be really slow. This patch instead uses `Dict_getKeys`, and then manually looks up only the necessary indirect objects.

I've added the PDF file as a `load` test. The most important thing here is probably to ensure that the file remains available in the repo, and the comment should help reduced the chance of regressions. (Note that locally, the `load` test times out without this patch, but we cannot really assume that that always happens.)

Fixes 6961.",False
0ec82d4a50e6b0c0af9c18ca4f070b30d5c3e90e,2016-02-10 19:22:54,Rob Wu,"Allow local PDF files to be viewed in local frames

The Chrome extension enforces that local files cannot be embedded in
non-local web pages. The previous check was too strict (because the
origin of a file:-URL is ""null""), and prevented local PDF from being
viewed in local files).

This patch fixes that problem, by querying the actual tab URL via the
background page.

Steps to verify:
1. Create a HTML file: `<iframe src=test.pdf width=100% height=100%>`
2. Build and load the extension.
3. Allow file access to the extension at `chrome://extensions`
4. Open the HTML file from a file:// URL.
5. VERIFY: The extension should attempt to load the PDF file.

6. Now open the following (replace ID with the extension ID, which you
   can find at `chrome://extensions`):
  `data:text/html,<iframe src=""chrome-extension://ID/file:///test.pdf"">`
7. VERIFY: The next error should be displayed:
   ""Refused to load a local file in a non-local page for security reasons.""",False
03f12a10b5b66f054ad9965986be9b31da09d62a,2016-02-10 05:08:31,Tim van der Meij,"Merge pull request #6954 from Snuffleupagus/setGState-fixes

Various `setGState` improvements",True
02b161d43223894526e3fc5fa281dada834536c1,2016-02-10 04:11:22,Tim van der Meij,"Merge pull request #6933 from brendandahl/faster-decrypt

Make type 1 font program decryption faster.",True
d7e5935f91f2f97b9ba66f370befb0ba21162aa2,2016-02-10 00:20:12,Brendan Dahl,"Merge pull request #6938 from yurydelendik/fix-ff-disableworker

Fix 'Ready' message sequence for Firefox ext disabled worker.",True
a0aa781c394a8e5dedbf14c5db0195ab72e8ff46,2016-02-05 00:21:26,Tim van der Meij,"Merge pull request #6913 from Rob--W/importScripts-work-around

Improve work-around for importScripts bug.",True
097e273ca444804c0c3efd66d05096e14521eee8,2016-02-04 04:00:27,Rob Wu,"Improve work-around for importScripts bug.

Reverts ""Hack to avoid intermidiate Chrome failures during tests.""
(2b2c5212133dc69d238a286ae69d49eda571db2f).

require.js uses importScript asynchronously, which activates the worker
GC bug in WebKit. This patch works around a bug in a way that is similar
in the upcoming (but not yet released) require.js 2.1.23

The advantage of the new work-around is that it allows the runtime to
garbage-collect idle Workers.

References:
- https://crbug.com/572225
- https://webkit.org/b/153317",False
4c59712606e67bd66bb982dbb465117a3d349afb,2016-02-04 02:16:22,Yury Delendik,"Merge pull request #6904 from timvandermeij/cleanup-workers

Destroy workers when they are no longer needed in the unit tests",True
a1fe2cb443963272cf5f3685098fd2b548b9059d,2016-02-03 21:43:42,Jonas Jenwald,"Don't directly access the private `map` in `setGState`, and ensure that we avoid indirect objects

*This patch is based on something I noticed while debugging some of the PDF files in issue 6931.*

In a number of the cases in `setGState`, we're implicitly assuming that we're not dealing with indirect objects (i.e. `Ref`s). See e.g. the 'Font' case, or the various cases where we simply do `gStateObj.push([key, value]);` (since the code in `canvas.js` won't be able to deal with a `Ref` for those cases).

The reason that I didn't use `Dict_forEach` instead, is that it would re-introduce the unncessary closures that PR 5205 removed.",False
2d4a1aa0afc8265d360b72830fc9d8af5e0ba978,2016-02-03 21:43:02,Jonas Jenwald,"Actually ignore no-op `setGState` (PR 5192 followup)

The intention of PR 5192 was to avoid adding empty `setGState` ops to the operatorList. But the patch accidentally used `>=`, which means that it's not actually working as intended, since empty arrays always have `length === 0`.",False
974433a7a791e081a937b206cbe9763ac4e68d9b,2016-02-03 20:56:37,Yury Delendik,"Merge pull request #6953 from Snuffleupagus/smask-transferMap-upper-limit

Correct the upper bound used when building the `transferMap` for SMasks (PR 6723 followup)",True
4770b516fe82028d6dc5e7cb84c84635ac9066bb,2016-02-03 18:11:10,Jonas Jenwald,"Correct the upper bound used when building the `transferMap` for SMasks (PR 6723 followup)

Even though the currently known test-cases render correctly without this patch, that seems more like a lucky coincidence, given that there's no guarantee that `transferMap[255] === 0` for every possible transfer function.",False
e403f5272232c87581b0471e04c5e94c60aca91d,2016-02-01 03:25:23,Timothy Gu,"Use UglifyJS to minify files in minified target

It is written in JavaScript, is less buggy, and compresses better.",False
a4b90243d0c7b825a7a549440c701073d3725d9f,2016-02-01 00:47:16,Tim van der Meij,"Merge pull request #6940 from Snuffleupagus/differences-fix-indirect-objects

Ensure that we don't modify the `Dict` data when the `Differences` array of a font contains indirect objects",True
992472fd38cea110df7564910f9fe90c1a0b79b8,2016-01-30 18:01:24,Jonas Jenwald,"Ensure that we don't modify the `Dict` data when the `Differences` array of a font contains indirect objects

This patch fixes an issue that I inadvertently introduced in PR 5815, where we accidentally modify the `Differences` array in the encoding dictionary for indirect objects.

Instead of this change, we could also have used the now existing `Dict_getArray`. However in this case I don't think that would have been a good idea, since it would mean iterating through the array *twice*.",False
02331f6e3350e389b1e55861525e40eabf038b55,2016-01-30 00:40:30,Brendan Dahl,"Make type 1 font program decryption faster.

Discard the values first so we don't have to slice the array.",False
e36b04e1ffdcbe5f9355281abd508b443e0b1252,2016-01-29 23:13:19,Yury Delendik,Fix 'Ready' message sequence for Firefox ext disabled worker.,False
e401804f13fc76b63b7aa68021c11bf45ecd4d49,2016-01-29 17:04:26,Jonas Jenwald,"Remove the 'oplist' rendering intent when `getOperatorList` has returned the complete `OperatorList`, and prevent errors in `PDFPageProxy_destroy` for the 'oplist' rendering intent",False
5bcf4c18959f722b435039b3b6768e0f5ae623a1,2016-01-29 16:53:17,Tim van der Meij,Destroy workers when they are no longer needed in the unit tests,False
5d797e1a850fbe99fb4343621c611bfb5da767f3,2016-01-29 16:42:08,Tim van der Meij,"Merge pull request #6921 from Snuffleupagus/mandatory-deprecated

Always display `deprecated` messages, regardless of the verbosity setting",True
365bc99508a71a71252d10b38b6c404a34d4bba6,2016-01-29 04:41:39,Yury Delendik,"Merge pull request #6934 from jswalden/detach-terminology

Adjust a comment discussing transferred ArrayBuffers, to refer to those buffers being detached, not neutered",True
4691a4a1e4392d625057a9108e5a9989d6d146a1,2016-01-29 04:22:07,Jeff Walden,"Adjust a comment discussing transferred ArrayBuffers to refer to those buffers being detached, not neutered.  This change makes the comment consistent with terminology used in the ECMAScript specification.",False
825a2225ab8d2c205e0ad6ef844565b410c0a075,2016-01-29 02:31:06,Yury Delendik,"Merge pull request #6915 from yurydelendik/lookuptables

Refactor lookup hash tables/objects",True
2edf2792dcb6adbfffed242cc5c02b412157e45c,2016-01-28 23:48:38,Yury Delendik,Replaces literal {} created lookup tables with Object.create,False
d6adf8415998ee7cf85013bf973bed65f6c37874,2016-01-28 23:48:37,Yury Delendik,Lazify OP_MAP.,False
1de90454b7977eaa77d9304252652c1f83ee969a,2016-01-28 23:41:46,Yury Delendik,Lazify Metrics,False
55a201d92d8e76757b2e606f396f13b2cc55fd00,2016-01-28 23:26:42,Yury Delendik,Lazify NormalizedUnicodes,False
d0738d7e24dc97402269346f4dd8cea5becc77d0,2016-01-28 23:21:54,Yury Delendik,"Lazify stdFontMap, serifFonts, GlyphMapForStandardFonts",False
1a9a665adfaf4f715cd110feecbc13003a1a4243,2016-01-28 23:02:59,Yury Delendik,Refactor Encodings,False
4ef20de429e439019bfad22b7d8f53e54fd52fb4,2016-01-28 23:02:59,Yury Delendik,Lazify GlyphsUnicode.,False
252b9d5910b787250e5882e8a50b7eb609a4af15,2016-01-28 02:51:10,Brendan Dahl,"Merge pull request #6753 from yurydelendik/cdn-worker

Wraps worker script if its cross-origin location is detected.",True
e44dada0479410d76667732343c520415f6fa3ae,2016-01-27 22:02:58,Yury Delendik,Publish 1.4.20,False
b15f335380749f61bf1dc95a94278410de10864f,2016-01-27 21:01:52,Yury Delendik,"Merge pull request #6930 from Snuffleupagus/page-labels-standard-numbering

[api-minor] Change `getPageLabels` to always return the pageLabels, even if they are identical to standard page numbering",True
1140a34f5ccbeb7cbf1c97b6e3586788fb3e5ab5,2016-01-27 18:06:03,Jonas Jenwald,"[api-minor] Change `getPageLabels` to always return the pageLabels, even if they are identical to standard page numbering",False
1f2910b2a2cd3009e42712bcc38a2ffaa4b1ca6a,2016-01-27 07:20:30,Brendan Dahl,"Merge pull request #6928 from yurydelendik/url-check

Fixes URL polyfill check for MS Edge.",True
bc30c42758e9920af71649845b3deab0c0d052c8,2016-01-27 04:19:44,Yury Delendik,Fixes URL polyfill check for MS Edge.,False
0558ffcbf9695e8cb9f3c6f0de66af52f79e0818,2016-01-26 21:36:51,Yury Delendik,"Merge pull request #6922 from Snuffleupagus/issue-1536

Prevent failures in the ""scanning for endstream"" code, in `Parser_makeStream`, by handling the case where 'endstream' is split between contiguous chunks (issue 1536)",True
15ce96a6ebbe0bca93fac5a2527f7c6925aaba6f,2016-01-26 13:33:51,Jonas Jenwald,"Prevent failures in the ""scanning for endstream"" code, in `Parser_makeStream`, by handling the case where 'endstream' is split between contiguous chunks (issue 1536)",False
472e793a279045bf00e8dcc325e21831ca43378f,2016-01-25 17:08:34,Jonas Jenwald,"Always display `deprecated` messages, regardless of the verbosity setting

Currently the `deprecated` message is using `warn`, meaning that it's possible to disable warnings about deprecated API usage through the `PDFJS.verbosity` setting.

I don't think that it should be possible to opt out of deprecation messages,[1] since it might mean that in a custom deployment of PDF.js these messages could be overlooked, leading to PDF.js being broken (seemingly without any warning) when updating to a future version.
Obviously this could be considered the responsibility of the people doing custom PDF.js implementations, but in order to reduce the support burden later on, it seems better to ""annoy"" people upfront.

Compared to various `info`/`warn`/`error` messages, `deprecated` messages should be very simple to get rid of -- just update the API usage and the message goes away!

---
[1] In e.g. Firefox it doesn't seem possible to prevent deprecation warnings from being displayed (in the Browser Console).",False
051a0746e17d6769e58b53d0ff2044189bf520fb,2016-01-25 00:05:05,Yury Delendik,Changes version of the stable release to 1.3.91,False
117f105ef1999630eaaf210a05355acf313cbdcc,2016-01-23 00:15:14,Brendan Dahl,"Merge pull request #6919 from brendandahl/update-links

Update beta and stable.",True
0cb56968fa96d5f41f05f8e68be3e82590152fd6,2016-01-23 00:14:32,Brendan Dahl,Update beta and stable.,False
b14c55fb858719b11da0ed3afb3b7e9c20ab148c,2016-01-23 00:07:23,Brendan Dahl,"Merge pull request #6918 from brendandahl/v1.4

Bump version to 1.4",True
c21dd498806d616b8451b0573cd916e46500d77a,2016-01-23 00:06:38,Brendan Dahl,Bump version to 1.4,False
059e826e20518a00e4bdcb72a6b7a37bb849a5bb,2016-01-22 23:32:52,Brendan Dahl,"Merge pull request #6916 from yurydelendik/hosted-viewer

Allow foriegn origin URLs only for hosted viewers.",True
7c89bdc8d673ea347e5faa02155e6b401b135420,2016-01-22 23:24:19,Yury Delendik,Allow foriegn origin URLs only for hosted viewers.,False
069f4b9bdf8a43a336f1650c5806ec41c3154f2e,2016-01-21 06:55:39,Xiliang Chen,avoid apply transform twice for composite context,False
58329f7f92f9c9f5dd8a7e42caf6ba3afdd6911d,2016-01-21 02:35:48,Tim van der Meij,"Merge pull request #6803 from Snuffleupagus/page-labels

[api-minor] Add support for PageLabels in the API",True
0aa373cdf38448adaf86bfbbe88b5504dbc37ea3,2016-01-21 00:44:47,Yury Delendik,"Merge pull request #6891 from Snuffleupagus/issue-6889

Map missing glyphs to the `notdef` glyph for TrueType (3, 1) fonts regardless if the 'post' table is defined or not (issue 6889)",True
232748251a021b31c1c1d62349b7c848e38483d5,2016-01-20 21:03:34,Yury Delendik,"Merge pull request #6900 from Snuffleupagus/issue-6898

Set type=""password"" for the `PasswordPrompt` input dynamically, to prevent unnecessary warnings in Firefox for http:// documents (issue 6898)",True
4b94416277852b160445e2c9facc522be4dd1b8e,2016-01-20 18:24:19,Jonas Jenwald,"Set type=""password"" for the `PasswordPrompt` input dynamically, to prevent unnecessary warnings in Firefox for http:// documents (issue 6898)

Fixes 6898.

Note that this doesn't prevent the warning for PDF files that *do* ask for a password, e.g. http://async5.org/moz/passwordOU.pdf, but it's not clear to me if/how we could avoid that.",False
85cf90643f39ee19f51afe02170fa44f6867095c,2016-01-20 03:19:04,Jonas Jenwald,[api-minor] Add support for PageLabels in the API,False
8ad18959d72bb13c5f8b13c287bc99fcd37a8db1,2016-01-20 03:17:45,Jonas Jenwald,Add support for NumberTree,False
1eea0db897196417609ea3223fc9bd9728ed68ed,2016-01-20 02:51:40,Tim van der Meij,"Merge pull request #6822 from Snuffleupagus/urls-in-outline

[api-minor] Add support for URLs in the document outline",True
0030a82dc379f9f54c7976feaefd5bf1cb1f2d01,2016-01-20 02:06:27,Jonas Jenwald,"[api-minor] Add support for URLs in the document outline

Re: issue 5089.
(Note that since there are other outline features that we currently don't support, e.g. bold/italic text and custom colours, I thus think we can keep the referenced issue open.)",False
d9e21a3523f2395f027f23557a53fb689a42e760,2016-01-19 01:30:14,Jonas Jenwald,"Merge pull request #6895 from timvandermeij/issue-6854-final

Update links to point to the Internet Archive for issue2799 and issue5726",True
ec066101d821e7e36834f29a0250a1eace773aae,2016-01-19 00:58:52,Tim van der Meij,"Merge pull request #6848 from Snuffleupagus/recover-missing-glyf-table

[TrueType] Recover from a missing ""glyf"" table by replacing it with dummy data, utilizing the existing code in `sanitizeGlyphLocations`",True
10a55087b5169f9b692b3d52b9d00592ca2b4984,2016-01-18 20:23:07,Tim van der Meij,"Update links to point to the Internet Archive for issue2799 and
issue5726

We remove yo01. The file is not available, it was introduced in
https://github.com/mozilla/pdf.js/commit/3529658ac5a6aa2ca137d8f77ab1470af43abbab
along with another test file (so we should not need it) and it was
replaced in
https://github.com/mozilla/pdf.js/commit/6b2c6fc22397350ace1c65867e33b9b02c1fdc4b,
so it was only in the repository for a very short time.",False
4855d4cc9f367377c6523e3a4fdd4a0c1462d378,2016-01-18 03:28:00,Jonas Jenwald,"Map missing glyphs to the `notdef` glyph for TrueType (3, 1) fonts regardless if the 'post' table is defined or not (issue 6889)",False
e60fde73ca23e0e5fcfbb1ba8ab51789774512fe,2016-01-17 21:45:45,Jonas Jenwald,"Merge pull request #6888 from timvandermeij/issue-6854-5

Update links to point to the Internet Archive for issue1597, issue2627 and kdchart",True
57246c15c7e48c5a4e955e54718b3ae02d2feb19,2016-01-17 19:06:17,Tim van der Meij,"Update links to point to the Internet Archive for issue1597, issue2627 and kdchart",False
5a9b0062f8ceabb0f345e2acc7cfe9d8e9fa64b5,2016-01-17 18:41:43,Tim van der Meij,"Merge pull request #6887 from Snuffleupagus/remove-issue2537.pdf.link

Remove 'issue2537.pdf.link', since it has been replaced with a reduced test-case",True
da7567119972ab95d900810461022efb40c7234d,2016-01-17 18:34:00,Jonas Jenwald,"Remove 'issue2537.pdf.link', since it has been replaced with a reduced test-case

In PR 4732, Yury replaced the linked test, but apparently the .link file stuck around despite not being needed anymore.

Re: PR 6854.",False
d864bef160a859b8635774316a87d8d01161ba60,2016-01-17 18:13:50,Tim van der Meij,"Merge pull request #6886 from Snuffleupagus/issue-6854-11

Issue 6854 - Update the link locations to point to the Internet Archive for tests: issue2829, issue2853, issue2881, issue3062, issue3999",True
f80a6efce3efc3694cc2fe7c0391262088266a3f,2016-01-17 17:45:42,Jonas Jenwald,"Issue 6854 - Update the link locations to point to the Internet Archive for tests: issue2829, issue2853, issue2881, issue3062, issue3999",False
38b428bb01fd349756902bb1aa2d47a8d0a47b7e,2016-01-17 01:16:54,Tim van der Meij,"Merge pull request #6885 from Snuffleupagus/issue-1155-reduced-test

Replace the linked test-case for issue 1155 with a reduced one",True
b4020047bc8a3e6ec77e5d119720d548f704142f,2016-01-16 20:30:37,Jonas Jenwald,"Replace the linked test-case for issue 1155 with a reduced one

As part of the link cleanup in issue 6854, obtaining this file through the Internet Archive didn't work.
However, given that the file was added in order to test an issue with `CropBox/MediaBox`, a reduced test-case should do just fine instead.

Please refer to issue 1155, and PR 1212.",False
e54edd11287746e0a39436bd8bc4e9d97ae2cc37,2016-01-16 19:19:52,Tim van der Meij,"Merge pull request #6883 from Snuffleupagus/issue-6854-10

Issue 6854 - Update the link locations to point to the Internet Archive for tests: issue2129, issue2139, issue2386, issue2442, issue2531",True
6d767001cd0b6934591a6efda8171026825cdb6a,2016-01-16 19:04:05,Tim van der Meij,"Merge pull request #6884 from Snuffleupagus/remove-tcpdf_033.pdf.link

Remove 'tcpdf_033.pdf.link', since it has been replaced with a reduced test-case",True
92fa439eaca635aea86488ae471b9639cbb70f69,2016-01-16 17:03:11,Jonas Jenwald,"Remove 'tcpdf_033.pdf.link', since it has been replaced with a reduced test-case

In PR 1556 Brendan replaced the linked test, but apparently the `.link` file stuck around despite not being needed anymore.

Re: PR 6854.",False
2bdffdd7b0afd824456865fa4e30044462778ff5,2016-01-16 16:40:48,Jonas Jenwald,"Issue 6854 - Update the link locations to point to the Internet Archive for tests: issue2129, issue2139, issue2386, issue2442, issue2531",False
b7fe79c026972472dadf85c3549c0188a5b0e535,2016-01-16 16:32:33,Jonas Jenwald,"Merge pull request #6881 from timvandermeij/issue-6854-4

Update links to point to the Internet Archive for issue3384, issue3848, issue3903, issue3925 and issue5592",True
e29d85e58900a5a89fc2d8b5fc48ab0130c7d215,2016-01-16 03:16:41,Jonas Jenwald,"Merge pull request #6880 from timvandermeij/issue-6854-3

Update links to point to the Internet Archive for issue818, issue919, jai, liveprogramming and mao",True
1e45f2d4e134d3ff5ced2b48f10dd2b4d7d76afa,2016-01-16 02:35:46,Yury Delendik,Wraps worker script if its cross-origin location is detected.,False
d52495a9c83c266a34d0aad77a7bb699ea47720f,2016-01-16 02:14:59,Jonas Jenwald,"[TrueType] Recover from a missing ""glyf"" table by replacing it with dummy data, utilizing the existing code in `sanitizeGlyphLocations`

It seems to be fairly common for OCR software to include incomplete TrueType fonts, notable missing the ""glyf"" table, in PDF files. Since we currently reject such fonts, the result is that text-selection/copying is broken.

This patch contains a suggested approach to try and use these kind of broken fonts, by using existing code in `sanitizeGlyphLocations` to replace a missing ""glyf"" table with dummy data.

Fixes 4684.
Fixes 6007.
Fixes 6829.",False
4155dfeb19347cc97ec7d5d3ac37a2561b971b3b,2016-01-16 02:14:59,Tim van der Meij,"Update links to point to the Internet Archive for issue3384, issue3848, issue3903, issue3925 and issue5592",False
159eb6d46c6b842fbc6773299a3d9c8e859f4ede,2016-01-16 01:56:37,Tim van der Meij,"Update links to point to the Internet Archive for issue818, issue919, jai, liveprogramming and mao",False
e1349475335fc4174da186dbad5ebff1d90e8d0b,2016-01-16 01:33:47,Tim van der Meij,"Merge pull request #6878 from Snuffleupagus/issue-6854-9

Issue 6854 - Update the link locations to point to the Internet Archive for tests: issue1878, issue1912, issue1936, issue1998, issue2006",True
223249fe2c491a0ad17f9f793f1636698c1ce1d4,2016-01-15 22:52:03,Jonas Jenwald,"Issue 6854 - Update the link locations to point to the Internet Archive for tests: issue1878, issue1912, issue1936, issue1998, issue2006",False
7f821f5b78d650d4f945d603b399f73f232d503e,2016-01-15 21:08:45,Tim van der Meij,"Merge pull request #6876 from Snuffleupagus/issue-6854-8

Issue 6854 - Update the link locations to point to the Internet Archive for tests: issue1709, issue1721, issue1729, issue1796, issue1810",True
d02217c3fd971c629b9a760a55c61a9ace237266,2016-01-15 20:58:27,Tim van der Meij,"Merge pull request #6875 from Snuffleupagus/issue-6854-7

Issue 6854 - Update the link locations to point to the Internet Archive for tests: issue1466, issue1629, issue1658, issue1685, issue1687",True
b03703f20c53b43ee659a3dbd974a5341c1605ed,2016-01-15 18:25:56,Jonas Jenwald,"Issue 6854 - Update the link locations to point to the Internet Archive for tests: issue1709, issue1721, issue1729, issue1796, issue1810",False
93088ce342d6d834b6ff686d650807df2f4e3829,2016-01-15 18:00:24,Jonas Jenwald,"Issue 6854 - Update the link locations to point to the Internet Archive for tests: issue1466, issue1629, issue1658, issue1685, issue1687",False
5336a5363f9abf566f70bcc086d22d711fb1b1c7,2016-01-15 05:34:40,Tim van der Meij,"Merge pull request #6871 from Snuffleupagus/issue-6854-6

Issue 6854 - Update the link locations to point to the Internet Archive for tests: issue1233, issue1257, issue1309, issue1317, issue1419",True
8e58c8bc3d07d4e1d200fc65a8782be96b287d0b,2016-01-15 05:20:05,Tim van der Meij,"Merge pull request #6869 from Snuffleupagus/issue-6854-5

Issue 6854 - Update the link locations to point to the Internet Archive for tests: issue1049, issue1096, issue1127, issue1133, issue1169",True
e6ff1a4179926681ae80f8d0679ad1d20545fe88,2016-01-15 04:54:06,Tim van der Meij,"Merge pull request #6866 from Snuffleupagus/issue-6854-4

Issue 6854 - Update the link locations to point to the Internet Archive for tests: html5checker, hudsonsurvey, ichiji, issue1010, issue1015",True
04677eea4504e3a53701434e99efe9d7f7ae04c4,2016-01-15 04:26:44,Tim van der Meij,"Merge pull request #6867 from brendandahl/disable-e10s

Disable e10s.",True
f6a8dfb76a730a79217022945fe4efe78e47ca85,2016-01-15 03:39:37,Tim van der Meij,"Merge pull request #6873 from Snuffleupagus/pr-6846-followup

Add an extra set of `//` to the comment for the URL polyfill, since the preprocessor eats one set, thus breaking the world (PR 6846 followup)",True
cca265352f71e984c7ada29329f9b8363bc6af2e,2016-01-15 03:13:34,Jonas Jenwald,"Add an extra set of `//` to the comment for the URL polyfill, since the preprocessor eats one set, thus breaking the world (PR 6846 followup)

The Firefox addon currently fails with:
```
SyntaxError: missing ; before statement pdf.js:1692:12
TypeError: PDFJS.shadow is not a function viewer.js:6228:12
```",False
794e1a317873420de7d2eeb665ead73700c7b7d4,2016-01-15 02:59:16,Brendan Dahl,"Merge pull request #6846 from brendandahl/url

Use URL constructor for combineURL.",True
2d27cb1da63e0a024e92847376066623ef926e28,2016-01-15 02:53:48,Brendan Dahl,Remove 'use strict'; causing failure and unused prefs.,False
e362c3b8fcbd738578dc8f6f3d2050edbb26330d,2016-01-15 01:06:36,Brendan Dahl,Use URL constructor for combineURL.,False
01bb6b4e9859fb68ee81e84d191c65cb6af87bdf,2016-01-14 21:54:26,Jonas Jenwald,"Issue 6854 - Update the link locations to point to the Internet Archive for tests: issue1233, issue1257, issue1309, issue1317, issue1419",False
8318c8203c834d1d4fa21b631e5c5b000901afbf,2016-01-14 21:43:16,Tim van der Meij,"Merge pull request #6311 from yurydelendik/clean_test_manifest

Cleans test manifest from absent files.",True
850fa3504035361a322e75d6cccee15fa91ac078,2016-01-14 16:36:30,Jonas Jenwald,"Issue 6854 - Update the link locations to point to the Internet Archive for tests: issue1049, issue1096, issue1127, issue1133, issue1169",False
ff79c56fa3fe157d96de2b22097cb58521fffafe,2016-01-14 16:18:32,Jonas Jenwald,"Merge pull request #6865 from timvandermeij/hmm

Update the linked test case hmm.pdf to point to the intended version",True
ad8e43a1859057154fc1ed2e9425961056a9759b,2016-01-14 04:51:28,Brendan Dahl,Disable e10s.,False
86f97d8e64e977fc6be6b528303af61d4b9c00c8,2016-01-13 22:41:35,Jonas Jenwald,"Issue 6854 - Update the link locations to point to the Internet Archive for tests: html5checker, hudsonsurvey, ichiji, issue1010, issue1015",False
18f05316193716b780a2ae885766d986c8b342cd,2016-01-13 21:10:21,Yury Delendik,Cleans test manifest from absent files.,False
38645f5701829d1d3ce571236fe50bff5117dfcb,2016-01-13 21:03:35,Jonas Jenwald,"Merge pull request #6864 from timvandermeij/issue6854-2

Update links to point to the Internet Archive for ohkubo-SS04, pal-o47, pdf, piperine and preistabelle",True
17b639bfc5428cfbfc99d2752872b2c219ed07e4,2016-01-13 21:00:26,Tim van der Meij,"Update the linked test case hmm.pdf to point to the intended version

The test case was changed in https://github.com/mozilla/pdf.js/commit/1faca190216deed1ef6084697d04a1d90621e210 because the original file was not available anymore. However, its hash was also changed, meaning that we do not test the intended version anymore.

This patch makes sure that we test the intented version by reverting to
the original hash and using a link, also pointing to the Internet
Archive, with the original file.",False
51b59bc86f07ad2b56e4630d44ce080cd293c664,2016-01-13 20:19:40,Yury Delendik,"Merge pull request #6853 from Snuffleupagus/issue-3666-test-link

Update the link location for 'issue3666.pdf' to point to the Internet Archive",True
c6ad1b573bdcff3368a6cf08abecd0f58fe2e6c0,2016-01-13 19:29:21,Tim van der Meij,"Update links to point to the Internet Archive for ohkubo-SS04, pal-o47, pdf, piperine and preistabelle",False
f3dd9bcc48237e677191c07b4d86df940869a5be,2016-01-13 18:59:50,Tim van der Meij,"Merge pull request #6862 from Snuffleupagus/issue-6854-3

Issue 6854 - Update the link locations to point to the Internet Archive for tests: cable, fips197, fit11-talk, geothermal, hmm",True
239846f0d6ec0d1f4bb8056ca800c645b31a215c,2016-01-13 02:05:23,Jonas Jenwald,"Issue 6854 - Update the link locations to point to the Internet Archive for tests: cable, fips197, fit11-talk, geothermal, hmm",False
7e2f1f43e41e8361e30dd2197bfea236091512a6,2016-01-12 21:04:00,Tim van der Meij,"Merge pull request #6860 from Snuffleupagus/issue-6854-2

Issue 6854 - Update the link locations to point to the Internet Archive for tests: artofwar, bpl13210, bug766138, bug808084, bug887152",True
a20883ac79deeceeca73ac2bdb66fc0499159c1b,2016-01-12 20:21:39,Jonas Jenwald,"Issue 6854 - Update the link locations to point to the Internet Archive for tests: artofwar, bpl13210, bug766138, bug808084, bug887152",False
596bf2b87bac753f268f9f9e66fbf87328980cba,2016-01-12 20:01:47,Jonas Jenwald,"Merge pull request #6859 from timvandermeij/issue-6854-1

Update five linked test cases to point to the Internet Archive",True
3df2b1141ca6118fb081de15bdf83ac54525461e,2016-01-12 19:30:36,Tim van der Meij,Update five linked test cases to point to the Internet Archive,False
2625ceca8dcd5b9f718a61d513f08c3f487ebba9,2016-01-12 19:00:48,Tim van der Meij,"Merge pull request #6858 from Snuffleupagus/restore-aboutstacks

Issue 6854 - Re-enable testing of 'aboutstacks.pdf'",True
15e384c5587a7c6f10db4fcddcfd9eaab72ba78f,2016-01-12 17:43:43,Jonas Jenwald,"Issue 6854 - Re-enable testing of 'aboutstacks.pdf'

This test was disabled in PR 4732, because the file was no longer available. The motivation being that there were two other files which should be good replacements. However, one of those has since been replaced with a reduced test-case (which doesn't exercise the same code-path), and in the other one the error does not appear to be entirely identical.
Hence it seems reasonable to re-add the 'aboutstacks.pdf' test, since it was possible to find it on the Internet Archive (by searching using a different URL, compared to the current one).",False
52caad62666116753fafce431dfe15cbc048b5f6,2016-01-12 05:22:34,Tim van der Meij,"Merge pull request #6855 from Snuffleupagus/issue-6854-1

Issue 6854 - Update the link locations to point to the Internet Archive for tests: 20130226130259, JST2007-5, P020121130574743273239, SFAA_Japanese, TaroUTR50SortedList112",True
57097c54dee6aec847c9f941733606810630b89b,2016-01-12 04:17:24,Jonas Jenwald,"Issue 6854 - Update the link locations to point to the Internet Archive for tests: 20130226130259, JST2007-5, P020121130574743273239, SFAA_Japanese, TaroUTR50SortedList112",False
c197e47742f77d83cf51ae94d762a4f190e7e9f2,2016-01-12 01:57:00,Jonas Jenwald,"Update the link location for 'issue3666.pdf' to point to the Internet Archive

Note that despite the new file having a different hash than the the current one, it does render *identically* and most importantly it uses *the same* JBIG2 functionality.

For reference, please see issue 3666 and PR 3738.",False
3057b69e450e1a5d29c2f0732ddc08d7d9861a34,2016-01-11 22:26:48,Brendan Dahl,"Merge pull request #6839 from Snuffleupagus/issue-6782

Check that CIDFontType0 fonts does not actually contain OpenType font files (issue 6782)",True
30b8f4100325f3f6a55de0722e7dadf239b2cc0e,2016-01-08 18:32:56,Tim van der Meij,"Merge pull request #6820 from Snuffleupagus/showText-shadingPattern

Apply Patterns, if necessary, when rendering text",True
944d1e6dc5db0a113ee93648072f30a681b9b52b,2016-01-06 20:53:20,Tim van der Meij,"Merge pull request #6843 from timvandermeij/pr-6796-fixup

shading-pattern: Decreased `Shadings.SMALL_NUMBER`",True
90ec2c9294409b19b983c1988f89bc5f385d108d,2016-01-06 19:56:40,Daan Sprenkels,"shading-pattern: Decreased `Shadings.SMALL_NUMBER`
and added a test case for #6298",False
3f19b3fee31cb57e40a7783f64565d95265b3942,2016-01-06 19:42:06,Tim van der Meij,"Merge pull request #6842 from Snuffleupagus/intelisa-updated-link

Update the link location for 'intelisa.pdf' to point to the Internet Archive",True
325abf5f8c037e3994729f565b74bc39358d1dfb,2016-01-06 17:26:31,Jonas Jenwald,"Update the link location for 'intelisa.pdf' to point to the Internet Archive

Given the the file changes every now and then, this patch should ensure that we test the *intended* version.",False
896e390285f69e245161b5dac2e60ac86feb3827,2016-01-06 06:49:02,Jonas Jenwald,"Check that CIDFontType0 fonts does not actually contain OpenType font files (issue 6782)

*This patch follows a similar idea as PR 5756.*

The patch is based on the nice debugging done by Brendan in the referenced issue 6782.
A better way to handle this, and similar issues, would probably be to completely ignore what the PDF file claims about font type/subtype, and just check the actual data. But until that kind of rewrite happens, this patch should help.

Fixes 6782.",False
4399d0116946c0696afc6d038acb534129f655a1,2016-01-06 04:29:25,Tim van der Meij,"Merge pull request #6834 from Snuffleupagus/issue-6832

Strip `null` (\x00) characters from the URLs in LinkAnnotations (issue 6832)",True
96d8b8f8a0a35743943cb191a51c3076d5b39c03,2016-01-06 02:26:08,Yury Delendik,"Merge pull request #6837 from Snuffleupagus/issue-3694-fix-manifest

Fix a typo in the ""file"" entry for issue3694_reduced in test_manifest.json",True
0083f63dda21fdb7cac1bac31296db1cb563b21b,2016-01-06 01:53:00,Jonas Jenwald,"Fix a typo in the ""file"" entry for issue3694_reduced in test_manifest.json

When generating new references locally on Windows, after PR 6724, I get the following output:
```
WARNING: Unable to open file for reading ""Error: ENOENT, open 'c:\Users\Jonas\Git\pdfjs\test\pdfs\issue_3694_reduced.pdf'"".
Unable to verify the checksum for the files that are used for testing.
Please re-download the files, or adjust the MD5 checksum in the manifest for the files listed above.

```

Compared to the name of the file (`issue3694_reduced.pdf`), you see that the manifest entry has a superfluous underscore in the ""file"" entry.",False
62ade3e3732b741ddfb0170eaadf4d45c40d1973,2016-01-06 01:16:14,Yury Delendik,"Merge pull request #6724 from brendandahl/callsubr

Add validation for callsubr and callgsubr for type 2 charstrings.",True
eb7c36beb6c69c27e458e187f5cc8af81f810a0b,2016-01-05 23:24:25,Brendan Dahl,Add validation for callsubr and callgsubr for type 2 charstrings.,False
97c10e9c08eaaf994252702e88f3897b56990e6e,2016-01-05 02:25:20,Jonas Jenwald,"Strip `null` (\x00) characters from the URLs in LinkAnnotations (issue 6832)

Apparently some PDF files can have annotations with `URI` entries ending with `null` characters, thus breaking the links.
To handle this edge-case of bad PDFs, this patch moves the already existing utility function from `ui_utils.js` into `util.js`, in order to fix those URLs.

Fixes 6832.",False
4e9ea35eee7d01a178792fde3a65142ed7cc02b9,2016-01-02 18:53:52,Jonas Jenwald,"Merge pull request #6827 from timvandermeij/highlight-annotation

Implement support for Highlight annotations",True
