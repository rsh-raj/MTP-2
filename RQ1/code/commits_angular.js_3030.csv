Hash,Date,Author,Message,IsMerge
d8f77817eb5c98dec5317bc3756d1ea1812bcfbe,2024-04-12 23:13:13,Mike Brocchi,"chore: update post LTS links (#17187)

Co-authored-by: Mike Brocchi <brocco@users.noreply.github.com>",False
47bf11ee94664367a26ed8c91b9b586d3dd420f5,2022-04-12 21:18:22,Jeremy Elbourn,docs(changelog): fix wrong date in changelog for 1.8.3,False
b5aa42586e5750b780324bb50e6a0bffda8cb6be,2022-04-12 01:56:36,Jeremy Elbourn,docs(changelog): fix typo in changelog for 1.8.3,False
cf16b241e1c61c22a820ed8211bc2332ede88e62,2022-04-07 21:43:37,Jeremy Elbourn,"docs(changelog): add release notes for 1.8.3

We're doing this final release to update poackage README files for npm.",False
757d56ea9c3de6245df7e5cac025dbf7077082ff,2022-03-19 00:34:55,Jeremy Elbourn,"docs(*): update end-of-life messages (#17177)

* Docs homepage
* Docs banner
* Security and support pages
* GitHub README
* CHANGELOG",False
f3624374e436cec6a8e42ff9298df429c26f8c56,2021-12-10 04:30:31,Ed Clement,"docs(eol): add EOL options text and link to template header used in every page

Closes #17164",False
fb04e424bb0826c07090fa4cac91b6fbe7108b18,2021-12-10 01:50:18,Ed Clement,"test(Angular): fix `angularInit()` tests on Safari v15+

Previously, the `angularInit()` tests assumed that the Safari browser
uses the `safari-extension:` protocol for browser extension URLs. This
is true for versions <15. However, since v15, Safari on iOS only
recognizes the `chrome-extension:` protocol, which causes the tests to
fail ([example failure][1]).

This commit updates the tests to use the correct protocol according to
the version of Safari used.

NOTE:
On macOS, Safari v15+ recognizes both `safari-extension:` and
`chrome-extension:`, so it is OK to always use the later with Safari
v15+ (regardless of the platform).

[1]: https://circleci.com/gh/angular/angular.js/3527

Co-authored-by: George Kalpakas <kalpakas.g@gmail.com>

Closes #17166",False
6a52c4f90cc661c0605cd98e6cb04455ba913f58,2021-12-10 01:49:58,Ed Clement,"test(input): fix tests on Firefox v93+

Since version 93, Firefox started more closely following the spec on
formatting `datetime-local` input values by removing trailing zeros from
the string representation of the value. This causes some of our tests to
fail ([example failure][1]).

For example, a value is reported by Firefox as `2009-01-06T16:25` while
the tests expect `2009-01-06T16:25:00.000`. I.e. Firefox started leaving
out seconds/milliseconds if they are zero.

According to [MDN][2], this is the correct behavior according to the
spec. Indeed the spec says that [if the value of the element is a valid
local date and time string, then it must be set to a **valid normalized
local date and time string**][3], where **valid normalized local date
and time string** is [defined as consisting of][4]:
> - A valid date string representing the date.
> - A U+0054 LATIN CAPITAL LETTER T character (T).
> - A valid time string representing the time, expressed as the
>   **shortest possible string** for the given time (e.g. **omitting the
>   seconds component** entirely if the given time is zero seconds past
>   the minute).

This commit fixes the relevant tests by explicitly specifying non-zero
values for seconds and milliseconds.

[1]: https://circleci.com/gh/angular/angular.js/3527
[2]: https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats
  #local_date_and_time_strings
[3]: https://html.spec.whatwg.org/multipage/input.html
  #local-date-and-time-state-(type=datetime-local)
[4]: https://html.spec.whatwg.org/multipage/common-microsyntaxes.html
  #concept-datetime-local

Co-authored-by: George Kalpakas <kalpakas.g@gmail.com>",False
ed30c4d0ea820d79601ca17e2c670e6acae16eb7,2021-08-24 13:54:46,Gage Guzman,"docs(README.md): add wiki link to MVC

Add a wiki link to MVC in case people have not heard of it before and
want to read about it more.

Closes #17152",False
4032655100dfb085e20e07d364f6292d64cfc15c,2021-06-12 18:55:47,dependabot[bot],"chore(deps): bump js-yaml from 3.5.5 to 3.14.1

Bumps [js-yaml](https://github.com/nodeca/js-yaml) from 3.5.5 to 3.14.1.
- [Release notes](https://github.com/nodeca/js-yaml/releases)
- [Changelog](https://github.com/nodeca/js-yaml/blob/master/CHANGELOG.md)
- [Commits](https://github.com/nodeca/js-yaml/compare/3.5.5...3.14.1)

Closes #17147",False
47f8c65aca7a55ea2978ef575822596689cb2648,2021-06-12 17:56:29,dependabot[bot],"chore(deps): bump normalize-url from 4.5.0 to 4.5.1

Bumps [normalize-url](https://github.com/sindresorhus/normalize-url) from 4.5.0 to 4.5.1.
- [Release notes](https://github.com/sindresorhus/normalize-url/releases)
- [Commits](https://github.com/sindresorhus/normalize-url/commits)

Closes #17145",False
56b0ee32756d9ac7ab39145e6c6df656fa649c07,2021-06-12 17:55:34,Michael Prentice,"chore(e2e): run tests against Chrome 91 on macOS Catalina

Closes #17144",False
58cd89742029291a30678bfe440fad958c9a0275,2021-06-12 17:52:18,Michael Prentice,"chore(e2e): run tests against Firefox 85 on macOS Catalina

Closes #17142",False
c3769a6b5b169ab1f5f1fc4de7a840fb47ecaa48,2021-06-07 22:32:55,Michael Prentice,"chore(functions): support NodeJS LTS v14. fix audit issues

- update firebase scripts
- from: 6 vulnerabilities found - Severity: 6 High
- to: 0 vulnerabilities found

Closes #17140",False
c140d89583be1a1bb424689ecfeb3f7ce9b9d9b1,2021-06-05 23:16:59,Michael Prentice,"chore(build): support NodeJS LTS v14. fix audit issues

- from:483 vulnerabilities found - 273 Low | 38 Moderate | 168 High | 4 Critical
- to: 389 vulnerabilities found - 259 Low | 28 Moderate | 98 High | 4 Critical

Closes #17139",False
1a5b0517d059297c775329323a5b036a69b5554e,2021-06-01 18:53:10,Michael Prentice,"docs(misc/Version Support Status): update URL for XLTS.dev

- the subdomain was switched to a path many months ago
- the angularjs.xlts.dev site will soon be used for hosting something else
  and the redirect removed (ASAP)

Closes #17136",False
e29900c78f8fa962559b1cf95e1e7d428230e645,2021-04-22 14:19:07,Ikko Ashimine,"docs($parse): fix typo in parse.js

Propogate -> Propagate",False
02545a8bab39a1ce2bf5bf1278ef3243cfa909ff,2021-03-31 22:15:19,dependabot[bot],"chore(deps): bump y18n from 3.2.1 to 3.2.2

Bumps [y18n](https://github.com/yargs/y18n) from 3.2.1 to 3.2.2.
- [Release notes](https://github.com/yargs/y18n/releases)
- [Changelog](https://github.com/yargs/y18n/blob/master/CHANGELOG.md)
- [Commits](https://github.com/yargs/y18n/commits)

Signed-off-by: dependabot[bot] <support@github.com>

Closes #17122",False
9bff2ce8fb170d7a33d3ad551922d7e23e9f82fc,2021-03-09 16:57:46,Ikko Ashimine,"docs($parse): fix typo in lval.ngdoc

assigment -> assignment

Closes #17120",False
d463206d0a186df84c0e775ba6dc1f5f30bdff7b,2021-03-09 16:55:06,dependabot[bot],"chore(deps): bump elliptic from 6.5.3 to 6.5.4

Bumps [elliptic](https://github.com/indutny/elliptic) from 6.5.3 to 6.5.4.
- [Release notes](https://github.com/indutny/elliptic/releases)
- [Commits](https://github.com/indutny/elliptic/compare/v6.5.3...v6.5.4)

Signed-off-by: dependabot[bot] <support@github.com>

Closes #17119",False
ae8e903edf88a83fedd116ae02c0628bf72b150c,2021-02-07 01:01:35,dependabot[bot],"chore(deps): bump bl from 1.2.2 to 1.2.3

Bumps [bl](https://github.com/rvagg/bl) from 1.2.2 to 1.2.3.
- [Release notes](https://github.com/rvagg/bl/releases)
- [Commits](https://github.com/rvagg/bl/compare/v1.2.2...v1.2.3)

Signed-off-by: dependabot[bot] <support@github.com>

Closes #17116",False
89c7794b21f409e9a4e20be34069f00c574b9285,2021-02-07 01:00:54,dependabot[bot],"chore(deps): bump https-proxy-agent from 2.2.1 to 2.2.4

Bumps [https-proxy-agent](https://github.com/TooTallNate/node-https-proxy-agent) from 2.2.1 to 2.2.4.
- [Release notes](https://github.com/TooTallNate/node-https-proxy-agent/releases)
- [Commits](https://github.com/TooTallNate/node-https-proxy-agent/compare/2.2.1...2.2.4)

Signed-off-by: dependabot[bot] <support@github.com>

Closes #17115",False
8a941b8ea97cabea34b6c11a4cf52e80fe1c05dc,2021-02-07 01:00:11,dependabot[bot],"chore(deps): bump ini from 1.3.4 to 1.3.7

Bumps [ini](https://github.com/isaacs/ini) from 1.3.4 to 1.3.7.
- [Release notes](https://github.com/isaacs/ini/releases)
- [Commits](https://github.com/isaacs/ini/compare/v1.3.4...v1.3.7)

Signed-off-by: dependabot[bot] <support@github.com>

Closes #17099",False
30a4424da29ea921381d1f2472e8c2ca05ece379,2021-02-06 23:16:27,George Kalpakas,"chore(ci): only run `deploy-code-firebase` on master

Previously, the `deploy-code-firebase` CI job was run on any build
corresponding to a git tag, the master branch or the stable branch.
Given that all runs of `deploy-code-firebase` deploy to the same
Firebase project (and overwrites previous deployments), there is no
point in deploying from multiple branches/tags.

This commit fixes this by ensuring that we only run the
`deploy-code-firebase` job on builds for the master branch, which
contains the most up-to-date code/configuration.",False
a6fa1ce76ec0637a554acc88d1a8c3a4e2b5ebae,2021-02-06 17:12:28,George Kalpakas,"chore(ci): fix failing `deploy-code` job

In #17114, the `deploy-code` CI job was modified to also run some
commands via `yarn`. It turns out that this breaks on CI, because the
`deploy-code` job uses the `cloud-sdk` executor that does not have
`yarn` installed. ([Example failure][1])

This commit fixes this by splitting the `deploy-code` job into two jobs:
- `deploy-code-files` uses the `cloud-sdk` and uploads the files to
  Google Cloud.
  (This is essentially the `deploy-code` job from before #17114.)
- `deploy-code-firebase` uses the `default` executor (which has `yarn`
  installed) and deploys to Firebase.
  (This essentially includes the new bits added in #17114.)

[1]: https://circleci.com/gh/angular/angular.js/2712",False
63d613fccfecde3078ef7302a681abba412cc270,2021-02-06 15:20:11,George Kalpakas,"fix(code.angularjs.org): correctly re-construct paths on Windows in `sendStoredFile()`

Previously, the `sendStoredFile()` Firebase function used `.split('/')`
to split the request path into segments and later used `path.join()` to
join them back together. This worked fine on *nix based systems, which
use `/` as the path separator. On Windows, however, where `\` is the
path separator, the re-constructed paths could not be retrieved from the
Google Cloud Storage bucket. This prevented the Firebase emulators from
working correctly when testing the function locally on Windows.

This commit fixes the issue by using `.join('/')` to join the path
segments back together.

Closes #17114",False
ed7d506b7d4bc026d5645ef43ee60fbd59b35eee,2021-02-06 15:20:06,George Kalpakas,"chore(build): update Firebase dependencies to latest versions

This commit updates `firebase-admin`, `firebase-functions` and
`firebase-tools` to latest versions to take advantage of the most recent
fixes and improvements.",False
12df4d6a00e42e5b6b3e5b0e04bef6e822058c6a,2021-02-06 15:20:06,George Kalpakas,"chore(build): use Node.js v12 for Firebase functions on `{code,docs}-angularjs-org`",False
4267ad65a5725da567c63e26dc43c29f3efbbf8b,2021-02-06 15:20:06,George Kalpakas,"chore(ci): use default project from config when deploying to Firebase

Previously, when deploying `scripts/{code,docs}.angularjs.org-firebase/`
to Firebase, we explicitly specified the target projects. Since the
project IDs are also specified in the respective `.firebaserc` files,
this was unnecessary (and meant we had multiple places to update if the
IDs changed).

This commit simplifies the process by automatically targeting the
default projects (as configured in the `.firebaserc` files) when
deploying to Firebase in CI.",False
66ada20d1bada0842d2ed924c44fde2e84a8bd2b,2021-02-06 15:20:06,George Kalpakas,"chore(ci): also deploy `code-angularjs-org` to Firebase

Previously, we only deployed the built files to Google Cloud Storage for
the `code-angularjs-org` Firebase project. This meant that the other
Firebase services (such as functions, hosting, storage) were not updated
when we made changes to their source code or configuration.
(This isn't a problem at the moment, since the code/configuration for
these service changes infrequently, but could bite us in the future.)

This commit fixes this by ensuring that we deploy to all enabled
Firebase services (currently functions, hosting and storage).",False
c7d68fa0448a444aa47f87122fb0f4e99b394e3e,2021-02-06 15:20:06,George Kalpakas,"chore(ci): also deploy Firebase functions to `docs-angularjs-org`

Previously, we only deployed to Firebase hosting for the
`docs-angularjs-org` Firebase project. This meant that the deployed
functions used an old version of Node.js and started failing once
support was dropped for that version. See #17111 for details.

This commit fixes this by ensuring that we deploy to all enabled
Firebase services (currently functions and hosting).

Fixes #17111
Fixes angular/angularjs.org#251",False
667ff87ab55db46ede8f52bdf5f4855e5c88413c,2021-02-06 15:20:06,George Kalpakas,"chore(ci): deploy to `docs.angularjs.org` from within the corresponding directory

Previously, in order to deploy to Firebase from
`scripts/docs.angularjs.org-firebase/`, we had to copy the
`firebase.json` file to the repository root and adjust the contained
paths accordingly.

By running the `firebase` CLI directly (instead of via `yarn`), we are
able to deploy from `docs.angularjs.org-firebase/` directly. This
simplifies the deployment (and local testing) process and paves the way
for also deploying from `code.angularjs.org-firebase/` in a subsequent
commit.",False
b481a165765c4bece1a5c72b052dde113a163ad1,2021-02-06 15:20:06,George Kalpakas,"chore(ci): copy deployment files inside the respective Firebase directories

We have the `scripts/{code,docs}.angularjs.org-firebase/` directories,
which contain the necessary code and config for deploying built files to
the `code-angularjs-org` and `docs-angularjs-org` Firebase projects
respectively.

Previously, some of the files that needed to be deployed to Firebase (or
Google Cloud) were placed outside these directories (e.g. in
`deploy/{code,docs}/`).

Since these files are only used for deploying to Firebase/Google Cloud,
this commit changes the deployment process to instead copy the files
inside the directories. In a subsequent commit, this will allow
simplifying the deployment process, by running it from inside each
directory instead of having to copy the `firebase.json` files to the
repository root (and adjust the paths).

These are the destination directory changes:

| Before       | After                                       |
|--------------|---------------------------------------------|
| deploy/code/ | scripts/code.angularjs.org-firebase/deploy/ |
| deploy/docs/ | scripts/docs.angularjs.org-firebase/deploy/ |",False
6e052a4243c315dd76081892ac5dac7670bd822a,2021-02-06 15:20:05,George Kalpakas,"chore(code.angularjs.org): check in `yarn.lock` file (and remove `package-lock.json`)

Since we are using `yarn` to install dependencies, it makes sense to use
`yarn.lock` as the lockfile (and get rid of the unused
`package-lock.json`).",False
2e72ea13fa98bebf6ed4b5e3c45eaf5f990ed16f,2020-10-25 15:12:13,George Kalpakas,"docs(changelog): fix typos in 1.8.1/1.8.2 notes

- Remove stray backtick.
- Add missing preposition (`identical` --> `identical to`).
- Remove 1.8.1 change from the 1.8.2 section.

Closes #17093",False
9b3b6f7f79491de33b0183c2cea2fbe8dc4de06d,2020-10-21 17:18:47,Pete Bacon Darwin,docs(changelog): add release notes for 1.8.2,False
e41f018959934bfbf982ba996cd654b1fce88d43,2020-10-14 18:14:24,George Kalpakas,"fix($sceDelegate): make `resourceUrlWhitelist()` is identical `trustedResourceUrlList()`

In commit a206e2675c351c3cdcde, `$sceDelegateProvider`'s
`resourceUrlWhitelist()` was deprecated in favor of the new
`trustedResourceUrlList()`. However, although both properties were
assigned the same value, it was possible for an app to break if one of
the properties was overwritten in one part of the app (or a 3rd-party
library) while another part of the app interacts with the other,
non-overwritten property.

This commit fixes it by making `resourceUrlWhitelist()` a getter/setter
that delegates to `trustedResourceUrlList()`, ensuring that the two
properties will remain in sync. This, also, makes it consistent with
other similar deprecated properties, such as `$sceDelegateProvider`'s
`resourceUrlBlacklist()`.

Closes #17090",False
71d19f120ab342a9e7cac64cf88b497ad5890de4,2020-10-14 18:14:24,George Kalpakas,"docs(*): fix docs on recently deprecated properties/methods

In commits 9679e58ec4e9d9e4b743..3dd42cea688a7b6f7789, some properties
and methods names including the terms whitelist/blacklist were
deprecated in favor of new ones not including the terms.

This commit fixes some typos in docs related to these changes and adds
links to the new properties/methods in the changelog for easier access.

Fixes #17088",False
8aa3389ed66bbf022c6b854f7a64a8c973849843,2020-10-08 23:46:57,frosty,docs(version-support-status): add link to extended long term support,False
bb480064b98f8a725a546257b778b7c7569a7819,2020-10-05 18:34:33,Pete Bacon Darwin,docs(changelog): add release notes for 1.8.1,False
6b86a888cb7384b051326a5dc2e54114502f0aed,2020-10-01 04:45:59,George Kalpakas,"chore(CircleCI): fix `deploy-docs` job

Since #17039, our docs Firebase functions' `package.json` specifies a
`node` engine version. This is required for configuring which version of
Node.js should Firebase use to execute the functions. However, since
Firebase is using an older version of Node.js than the one we use to
build the AngularJS project, yarn would error due to incompatible
Node.js engine versions ([example failure][1]).

This commit avoids the error by running yarn with the `--ignore-engines`
option.

[1]: https://app.circleci.com/pipelines/github/angular/angular.js/214/
     workflows/ad2e9baf-7249-467d-bc71-bd98e6cd922c/jobs/2247",False
f17c7d8f666c1e9b57e0abb79f359f03af285d91,2020-10-01 03:24:33,dependabot[bot],"chore(deps): bump node-fetch from 2.6.0 to 2.6.1

Bumps [node-fetch](https://github.com/bitinn/node-fetch) from 2.6.0 to 2.6.1.
- [Release notes](https://github.com/bitinn/node-fetch/releases)
- [Changelog](https://github.com/node-fetch/node-fetch/blob/master/docs/CHANGELOG.md)
- [Commits](https://github.com/bitinn/node-fetch/compare/v2.6.0...v2.6.1)

Signed-off-by: dependabot[bot] <support@github.com>

Closes #17073",False
e7c105c592f0f2b7578438ba53992cf6c4ef3cd9,2020-10-01 03:23:44,dependabot[bot],"chore(deps): bump node-fetch

Bumps [node-fetch](https://github.com/bitinn/node-fetch) from 2.6.0 to 2.6.1.
- [Release notes](https://github.com/bitinn/node-fetch/releases)
- [Changelog](https://github.com/node-fetch/node-fetch/blob/master/docs/CHANGELOG.md)
- [Commits](https://github.com/bitinn/node-fetch/compare/v2.6.0...v2.6.1)

Signed-off-by: dependabot[bot] <support@github.com>

Closes #17072",False
d0e7dc14bbc1d03dc4e219112743092a8f88828a,2020-10-01 03:22:21,dependabot[bot],"chore(deps): bump node-fetch

Bumps [node-fetch](https://github.com/bitinn/node-fetch) from 2.6.0 to 2.6.1.
- [Release notes](https://github.com/bitinn/node-fetch/releases)
- [Changelog](https://github.com/node-fetch/node-fetch/blob/master/docs/CHANGELOG.md)
- [Commits](https://github.com/bitinn/node-fetch/compare/v2.6.0...v2.6.1)

Signed-off-by: dependabot[bot] <support@github.com>

Closes #17071",False
0a746a25210fc90e767f5c7e07aff4629056f4d6,2020-10-01 03:20:49,dependabot[bot],"chore(deps): bump http-proxy from 1.16.2 to 1.18.1

Bumps [http-proxy](https://github.com/http-party/node-http-proxy) from 1.16.2 to 1.18.1.
- [Release notes](https://github.com/http-party/node-http-proxy/releases)
- [Changelog](https://github.com/http-party/node-http-proxy/blob/master/CHANGELOG.md)
- [Commits](https://github.com/http-party/node-http-proxy/compare/1.16.2...1.18.1)

Signed-off-by: dependabot[bot] <support@github.com>

Closes #17070",False
2f73f6a8c099e559d8d233d0bbf9dfa48f8d1f38,2020-10-01 03:19:43,Michael Prentice,"chore(copyright): update to Google LLC

- fix minor typo in comment

Relates to angular/angular#27880

Closes #17062",False
e1ecd184c596f3bf2cb402fcf6b812fed612802e,2020-10-01 03:17:23,George Kalpakas,"chore(SauceLabs): update `sauce-connect` to version 4.6.2

Closes #17078",False
abff6500167913880ea5e106f8b863c9e99698f2,2020-10-01 00:11:06,Martin Staffa,"chore(ci): add engines to docs firebase deployment

According to the Firebase docs, this field is necessary: https://firebase.google.com/docs/functions/manage-functions#set_nodejs_version
It's also a good idea to set it because NodeJS 8 is end-of-life, and Firebase will require Node 10 for all functions by  March 15, 2021.",False
b96a1de842f6b97e5995a0af59cb6fa4e9f63cf3,2020-10-01 00:05:46,dependabot[bot],"chore(deps): bump is-my-json-valid from 2.15.0 to 2.20.5

Bumps [is-my-json-valid](https://github.com/mafintosh/is-my-json-valid) from 2.15.0 to 2.20.5.
- [Release notes](https://github.com/mafintosh/is-my-json-valid/releases)
- [Commits](https://github.com/mafintosh/is-my-json-valid/compare/v2.15.0...v2.20.5)

Signed-off-by: dependabot[bot] <support@github.com>",False
b42ab51ad9c3922f5ed6a85e7f88460fe5d37884,2020-10-01 00:04:45,Michael Prentice,docs(security): add SECURITY.md,False
3dd42cea688a7b6f77893f49c254dad430f3ab49,2020-09-30 23:16:45,Joey Perrott,"refactor(misc): remove usages of whitelist and blacklist

Remove miscellaneous usages and references to usages of whitelist and blacklist
throughout the repository.",False
767381020d88bda2855ac87ca6f00748907e14ff,2020-09-30 23:16:45,Joey Perrott,"refactor(SanitizeUriProvider): remove usages of whitelist

Changes aHrefSanitizationWhitelist to aHrefSanitizationTrustedUri and imgSrcSanitizationWhitelist
to imgSrcSanitizationTrustedUri updating references to use the new symbols.

For the purposes of backward compatibility, the previous symbols are aliased to
the new symbols.",False
c953af6b8cfeefe4acc0ca358550eed5da8cfe00,2020-09-30 23:16:45,Joey Perrott,"refactor(httpProvider): remove usages of whitelist and blacklist

Changes xsrfWhitelistedOrigins to xsrfTrustedOrigins updating references to use
this new symbol.

For the purposes of backward compatibility, the previous symbol is aliased to
the new symbol.",False
a206e2675c351c3cdcde3402978126774c1c5df9,2020-09-30 23:16:45,Joey Perrott,"refactor(sceDelegateProvider): remove usages of whitelist and blacklist

Changes resourceUrlWhitelist to trustedResourceUrlList and resourceUrlBlacklist
to bannedResourceUrlList, updating references to use this new symbol.

For the purposes of backward compatibility, the previous symbols are aliased to
their new symbol.",False
9679e58ec4e9d9e4b7433d53c2ed5db15c618835,2020-08-23 00:33:58,George Kalpakas,"chore(ci): correctly compute `$DIST_TAG` in the `deploy-code` CI job

Previously, the `DIST_TAG` environment variable was failing to be
computed correctly in the `deploy-code` CI job, because it relied on the
non-existent `node` executable. It worked with the default executor
(which includes `node`), but not with the `cloud-sdk` executor used in
`deploy-code`, resulting in the following error:

```sh
./.circleci/env.sh: line 59: node: command not found
DIST_TAG=
```

You can see an example failure in the ""Set up environment"" step logs in
https://app.circleci.com/pipelines/github/angular/angular.js/
170/workflows/32fcacf9-c89b-4020-b3eb-15debe18bb67/jobs/1793

This commit fixes it by computing `$DIST_TAG` using unix tools (`cat`,
`grep`, `sed`) that _are_ available on the docker images of all
executors.

Closes #17067",False
26e13e5797cef2159e4e396d187f16ab1cdf481a,2020-08-22 21:20:06,George Kalpakas,"chore(ci): fix docs deployment to Firebase (`deploy-docs` CI job)

Previously, the command used to deploy the docs to Firebase (as part of
the `deploy-docs` CI job) would fail, because no target project was
specified (either directly in the command or indirectly via a
`.firebaserc` file in the working directory).

Example failure:
https://app.circleci.com/pipelines/github/angular/angular.js/
166/workflows/34c692ec-18d4-4422-a1cf-108a91219fa5/jobs/1744

This commit fixes the command by specifying the project via the
`--project` cli argument. It also adds the commit SHA as message to make
it easier to associate a deployment with the corresponding commit.

Closes #17066",False
4428dd0c0f8a89c58316162804efe4cd56f0cba3,2020-08-22 21:20:05,George Kalpakas,"chore(ci): correctly compute the `DIST_TAG` environment variable

Previously, the `DIST_TAG` environment variable was failing to be
computed correctly, because it was using the non-existent `jq` tool. In
the past (when running on TravisCI), `jq` used to be available, but it
is not on the currently used CircleCI docker image, resulting in the
following error:

```sh
./.circleci/env.sh: line 59: jq: command not found
DIST_TAG=
```

You can see an example failure in the ""Set up environment"" step logs in
https://app.circleci.com/pipelines/github/angular/angular.js/
166/workflows/34c692ec-18d4-4422-a1cf-108a91219fa5/jobs/1742

This commit fixes it by using `node` (which _is_ available on the docker
image) to compute `$DIST_TAG`.",False
a6a6c16195f939ef21efab12c58d243529ee3a60,2020-08-21 20:02:55,George Kalpakas,"chore(ci): avoid deploying if linting fails

Previously, the `prepare-deployment` CI job, which requires all unit and
e2e test jobs to have succeeded before running, was ignoring the `lint`
job. As a result, deployments might happen even when there were linting
issues. This looks like an oversight.

This commit ensures that, in addition to unit and e2e tests passing,
linting must also pass before deploying the code or documentation.

Closes #17063",False
744862ac3111e7e2dfe7346aa4d05381c35d913c,2020-08-21 20:02:25,George Kalpakas,"chore(ci): fix `deploy-docs` CI job

One step in the `deploy-docs` CI job contains a typo that causes it to
fail: `yarn -cwd ...` instead of `yarn --cwd ...`
This has been broken since a0488b30a7faa5c84998e4b276388dd839d1a761, but
has not been noticed because the job was not running. #17060 configured
the job to run as necessary, which brought up the error.

Example failure:
  - On v1.8.x:
    https://app.circleci.com/pipelines/github/angular/angular.js/
    153/workflows/6a9826ac-d191-4042-8c39-0c969c81e381/jobs/1606

This commit fixes the typo in the command.",False
3e628326804238d3cf514c3d96d21a0122478a2e,2020-08-21 20:02:25,George Kalpakas,"chore(ci): fix `deploy-code` CI job

In #17060, the `deploy-code` job was updated to [include][1] the
`init_environment` custom command. This caused the job to start failing,
because  the `init_environment` command was not compatible with the
`cloud-sdk` executor used in `deploy-code`. There were two problems:

1. The `init_environment` command assumes that the working directory is
   `~/ng`. The `cloud-sdk` executor [did not specify][2] a working
   directory.
   Example failures:
     - On master:
       https://app.circleci.com/pipelines/github/angular/angular.js/
       152/workflows/812df7b2-4bba-4e9e-a868-8c58db5d40d1/jobs/1594
     - On v1.8.x:
       https://app.circleci.com/pipelines/github/angular/angular.js/
       153/workflows/6a9826ac-d191-4042-8c39-0c969c81e381/jobs/1607

2. The `install_java` step, which is part of the `init_environment`
   command, relies on `sudo`, which is not available in the `cloud-sdk`
   executor.
   Example failure:
   - [On a PR]:
     https://app.circleci.com/pipelines/github/angular/angular.js/
     160/workflows/2eed5cfa-751c-44ba-b825-1d6cd5ba3406/jobs/1660

This commit fixes the issues by:
1. Specifying a working directory for the `cloud-sdk` executor. It also
   updates paths used in other steps of the `deploy-code` job to take
   the working directory into account.
2. Removing the `install_java` step from the `init_environment` command
   and adding it explicitly to jobs than require it.

[1]: https://github.com/angular/angular.js/blob/83f084e5db95768dcee5/.circleci/config.yml#L359
[2]: https://github.com/angular/angular.js/blob/83f084e5db95768dcee5/.circleci/config.yml#L34-L37",False
83f084e5db95768dcee5302fa77924e1fb1f3239,2020-08-13 17:27:18,George Kalpakas,"chore(ci): avoid unnecessarily running `grunt prepareDeploy` in `deploy-docs` CI job

Previously, the `grunt prepareDeploy` command was run in both the
`prepare-deployment` and `deploy-docs` CI jobs. The reason was that not
all files affected by `grunt prepareDeploy` were persisted to the
workspace across jobs.

More specifically, the command would affect files in the `deploy/` and
`scripts/docs.angularjs.org-firebase/` directories and also create a
`firebase.json` file at the root directory, but only the `deploy/`
directory was [persisted to the workspace][1].

This commit avoids unnecessarily running the `grunt prepareDeploy`
command in the `deploy-docs` CI job by ensuring that all affected files
will be persisted to the workspace in the `prepare-deployment` CI job,
which always runs before `deploy-docs`.

[1]: https://github.com/angular/angular.js/blob/295213df953766625462/.circleci/config.yml#L265

Closes #17060",False
046887048af312ed786f0b52c6c5c97a33419fbf,2020-08-13 17:26:34,George Kalpakas,"chore(ci): correctly deploy code and docs on version branches and tags

Previously, the generated build artifacts and docs were only deployed
for builds associated with the master branch. There was also a `latest`
branch mentioned in the config, but there is normally no such branch, so
this had no effect.

This commit fixes the rules so that deployments happen when necessary.
More specifically:
- The `deploy-code` job now runs for builds associated with:
  - The master branch.
  - The stable branch (i.e. the branch from which the version tagged as
    `@latest` on npm is released).
  - Tags of the form `v1.X.Y(-Z)`. (This also required configuring
    CircleCI to run builds for git tags, which does not happen by
    default.)
- The `deploy-docs` job now runs for builds associated with:
  - The stable branch (i.e. the branch from which the version tagged as
    `@latest` on npm is released).

The new rules for when deployments should take place are based on the
logic previously in [.travis.yml][1] and [scripts/travis/build.sh][2]
(from before we switched from Travis to CircleCI).

[1]: https://github.com/angular/angular.js/blob/974700af7c1/.travis.yml#L54-L103
[2]: https://github.com/angular/angular.js/blob/974700af7c1/scripts/travis/build.sh#L66-L101",False
f9b5cbfcf74bef5468d3da27d3db1c045d528a90,2020-08-13 17:26:34,George Kalpakas,"chore(package.json): update docs app to use version 1.8 of AngularJS

As mentioned in `RELEASE.md`, now that the [CDN][1] has been updated
with the 1.8.0 version, it is safe to bump the value of the
`branchVersion` property in `package.json` to `^1.8.0`. This will cause
the docs app to use the latest version, namely 1.8.0.

[1]: https://ajax.googleapis.com/ajax/libs/angularjs/1.8.0/angular.js",False
0d14993d754e85df970ee25c9409c05b7043bbe7,2020-07-30 21:14:04,dependabot[bot],"chore(deps): bump elliptic from 6.3.3 to 6.5.3

Bumps [elliptic](https://github.com/indutny/elliptic) from 6.3.3 to 6.5.3.
- [Release notes](https://github.com/indutny/elliptic/releases)
- [Commits](https://github.com/indutny/elliptic/compare/v6.3.3...v6.5.3)

Signed-off-by: dependabot[bot] <support@github.com>

Closes #17059",False
5541828ff40641f00c08fe5067a48f59589c44d9,2020-07-30 14:55:28,Ewa G,"docs(misc/Version Support Status): mention LTS extension by 6 months due to COVID

Due to COVID-19 affecting teams migrating from AngularJS, the Long Term Support period has been
extended by 6 months (until the end of 2021). See announcement on Twitter:
https://twitter.com/angular/status/1287780634572857357

This commit updates the ""Version Support Status"" page to also mention the extension.

Partially addresses #17058.",False
4099279426d197e52c936cdf9e1f559549040e3e,2020-07-16 22:02:02,George Kalpakas,"fix(doc-gen): use the correct lodash method in dgeni processor (indexBy --> keyBy)

The `indexBy()` method was renamed to `keyBy()` in lodash v4 (see
lodash/lodash@b1d52ccd82caa374094b9c872883cdb622537a46). This commit
updates all usages of `indexBy()` to `keyBy()`.",False
01ed44efd6f6f4101c57482cc5661337b4c2f602,2020-07-16 22:02:02,dependabot[bot],"chore(deps-dev): bump lodash from 2.4.2 to 4.17.19

Bumps [lodash](https://github.com/lodash/lodash) from 2.4.2 to 4.17.19.
- [Release notes](https://github.com/lodash/lodash/releases)
- [Commits](https://github.com/lodash/lodash/compare/2.4.2...4.17.19)

Signed-off-by: dependabot[bot] <support@github.com>",False
49655fac26fe5d4acddae5437cf61ebbcb446421,2020-07-16 18:18:27,dependabot[bot],"chore(deps): bump lodash

Bumps [lodash](https://github.com/lodash/lodash) from 4.17.15 to 4.17.19.
- [Release notes](https://github.com/lodash/lodash/releases)
- [Commits](https://github.com/lodash/lodash/compare/4.17.15...4.17.19)

Signed-off-by: dependabot[bot] <support@github.com>",False
42abc8270aaa1640539d084d7de30eda08badf62,2020-07-16 14:45:17,dependabot[bot],"chore(deps): bump lodash

Bumps [lodash](https://github.com/lodash/lodash) from 4.17.15 to 4.17.19.
- [Release notes](https://github.com/lodash/lodash/releases)
- [Commits](https://github.com/lodash/lodash/compare/4.17.15...4.17.19)

Signed-off-by: dependabot[bot] <support@github.com>",False
d6ae0ee7723dd28e4d41745b7421771226167a8c,2020-06-11 16:17:40,dependabot[bot],"Merge pull request #17043 from angular/dependabot/npm_and_yarn/scripts/docs.angularjs.org-firebase/functions/websocket-extensions-0.1.4

chore(deps): bump websocket-extensions from 0.1.3 to 0.1.4 in /scripts/docs.angularjs.org-firebase/functions",False
94dc1d0e6dadd97923e2d100fd21f26dff08da53,2020-06-11 16:16:25,dependabot[bot],"chore(deps): bump websocket-extensions

Bumps [websocket-extensions](https://github.com/faye/websocket-extensions-node) from 0.1.3 to 0.1.4.
- [Release notes](https://github.com/faye/websocket-extensions-node/releases)
- [Changelog](https://github.com/faye/websocket-extensions-node/blob/master/CHANGELOG.md)
- [Commits](https://github.com/faye/websocket-extensions-node/compare/0.1.3...0.1.4)

Signed-off-by: dependabot[bot] <support@github.com>",False
2fab3d4e00f4fe35bfa3cf255160cb97404baf24,2020-06-11 16:11:27,Harri Lehtola,"fix($sanitize): do not trigger CSP alert/report in Firefox and Chrome

If `ngSanitize` is added as a module dependency and a Content-Security-Policy
is set that does not allow inline styles then Firefox and Chrome show the
following message:

> Content Security Policy: The page’s settings observed the loading of a
resource at self (“default-src”). A CSP report is being sent.

This message is caused because AngularJS is creating an inline style tag
to test for a browser bug that we use to decide what sanitization strategy
to use, which causes CSP violation errors if inline CSS is prohibited.

This test is no longer necessary, since the `DOMParser` is now safe to use
and the `style` based check is redundant.

In this fix, we default to using `DOMParser` if it is available and fall back
to `createHTMLDocument()` if needed. This is the approach used by DOMPurify
too.

The related unit tests in `sanitizeSpec.js`, ""should not allow JavaScript
execution when creating inert document"" and ""should not allow JavaScript
hidden in badly formed HTML to get through sanitization (Firefox bug)"", are
left untouched to assert that the behavior hasn't changed in those scenarios.

Fixes #16463.",False
72fbd48f2a805e789fc574176e7a9a87979418d7,2020-06-05 18:05:32,Pete Bacon Darwin,chore: update changelog with vulnerability credits,False
e55d352e942465479fa9f93b566db20a96b4cf15,2020-06-04 20:42:37,Pete Bacon Darwin,docs(*): update changelog for 1.8.0,False
78ab691072f050aa3daa200012914d7f9858ac8c,2020-06-04 20:41:00,Pete Bacon Darwin,chore(*): prep for 1.8.0,False
59b5651d8228925ea300d19a1b24d13df589cb34,2020-06-02 17:22:51,Eran Nussbaum,docs(ngRepeat): missing closing backtick,False
c8b7c16b78bc3ba7486ebf9c41f4603a9f429dd1,2020-05-27 01:51:32,Michał Gołębiowski-Owczarek,fix(jqLite): improve documentation,False
05cf60677b0cdac47ce6b860cbb7b41957a2cbba,2020-05-27 01:38:46,Michał Gołębiowski-Owczarek,"fix(jqLite): apply suggestions from code review

Co-authored-by: Michael Prentice <splaktar@gmail.com>",False
2df43c07779137d1bddf7f3b282a1287a8634acd,2020-05-26 22:28:01,Michał Gołębiowski-Owczarek,"fix(jqLite): prevent possible XSS due to regex-based HTML replacement

This also splits the wrapping logic to one for modern browsers & one for IE 9
as IE 9 has restrictions that make it impossible to make it as secure.",False
295213df9537666254626ffe3e4a6013122e4802,2020-05-26 20:09:51,George Kalpakas,"chore(*): clean up `package.json` and CircleCI config

This is a follow-up to #16915, cleaning up `package.json` and
`.circleci/config.yml` and making release scripts executable.",False
a31c207bf1da10c6a1fbbaf289cafe19f481ad41,2020-05-25 21:11:54,George Kalpakas,"chore(docs-app): remove `document.write()` from docs `index.html`

Previously, the docs app used `document.write()`, causing the following
warning on Chrome:

```
A parser-blocking, cross site (i.e. different eTLD+1) script,
https://ajax.googleapis.com/ajax/libs/angularjs/1.7.9/angular.min.js, is
invoked via document.write. The network request for this script MAY be
blocked by the browser in this or a future page load due to poor network
connectivity.
```

In the past, `document.write()` seems to have been used in order for
browsers (such as Firefox) to work correctly with our dynamically set
`<base>` tag and relative style/script URLs.

This commit replaces `document.write()` with regular
`<style>`/`<script>` tabs to avoid the warning (and potential issues due
to poor network connectivity). It seems that the latest versions of
Chrome, Firefox and IE can handle this fine (without naticeable delays).

Fixes #15396",False
25189661534502d578d27ea02bee17c29df1a882,2020-05-25 13:47:53,Krzysztof Kotowicz,"fix(grunt-utils): insert the core CSS styles without using innerHTML

Create style elements and modify their text content instead of using
innerHTML to create the whole `<style>` element with its content.
That way style insertion done at bootstrap time doesn't interfere with
Trusted Types restrictions in Chrome (https://bit.ly/trusted-types).

Remove the type attribute - `text/css` is default:
https://html.spec.whatwg.org/#update-a-style-block.

Closes #17014",False
7de25c8e41e5462d78d372ea2bca1ed3dadfd0db,2020-05-25 00:27:58,Pete Bacon Darwin,chore(ci): ensure that deployment files are ready for deployment,False
566a5526458bed1edd654b2d163d88dc7344dbe7,2020-05-25 00:27:57,Pete Bacon Darwin,chore(ci): update and deploy firebase function for code.angularjs.org,False
3c75a899065e51f1b030e21a7202eb822eb9e271,2020-05-24 11:49:13,Pete Bacon Darwin,chore(ci): attempt to fix up code deployment,False
d9e68b157b461556b5ad635d4fabb955c2c33e81,2020-05-23 19:27:48,Pete Bacon Darwin,chore(ci): use correct executor for deploying code,False
a0488b30a7faa5c84998e4b276388dd839d1a761,2020-05-23 17:52:56,Pete Bacon Darwin,"chore(ci): move over to CircleCi config

This commit gets rid of all references to Travis and, belatedly, Jenkins.
Now all CI is done on CircleCI and releases are run locally.

The CI no longer updates the docs and code.angularjs.org for jobs that are
not on the `master` branch.

During releases, the docs and code should be uploaded manually.",False
974700af7c17f07eb217d698dcfaf16796d1b263,2020-05-22 22:39:15,Pete Bacon Darwin,test(*): fix up some tests for Firefox,False
9c810ebb2cbef98925a8fb440901ffd2a34a4f5e,2020-05-22 22:39:15,Pete Bacon Darwin,chore(*): update saucelabs browsers,False
c4b79d59b4425c527d0c913dff3f2377042b68a1,2020-05-22 22:39:07,Pete Bacon Darwin,chore(*): update protractor to latest version,False
43c3e5b11b6a793641273c995f757e5661846257,2020-05-22 22:38:04,Michał Gołębiowski-Owczarek,"chore(*): update Node.js from 8 to 12, update some dependencies

Node.js 8 ends its support at the end of 2019. Node 12 will be supported
until April 2022 which is way past AngularJS end of support.

Some dependencies needed to be updated to make them work in Node.js 12.",False
8e941f42e493d6ed37492b9191b80fca2edb914d,2020-05-20 09:47:05,Michał Gołębiowski-Owczarek,chore(*): update jQuery from 3.4.0 to 3.5.1,False
418355f1cf9a9a9827ae81d257966e6acfb5623a,2020-04-14 18:42:17,George Kalpakas,chore(docs.angularjs.org): upgrade Firebase libraries,False
94c288b125020016075189b373db0778ddcff5e8,2020-04-14 18:41:59,George Kalpakas,chore(code.angularjs.org): upgrade Firebase libraries,False
123c5a0a3e7b99bea678f32217440f075b24b941,2020-04-13 18:18:57,Nishant Mittal,"docs(misc/Version Support Status): Minor Typo Fix

Closes #17012",False
f6986f8e52c1f889c8649ec75c5abac003102999,2020-03-11 16:59:49,Sam Katakouzinos,"docs(developers): commit message format typo

Any line of the commit message cannot be longer *than* 100 characters!

Closes #17006",False
ff963de73ab8913bce27a1e75ac01f53e8ece1d9,2020-02-07 19:53:12,Chives,"docs($aria): get the docs working for the service

Closes #16945",False
2b28c540ad7ebf4a9c3a6f108a9cb5b673d3712d,2020-02-02 14:58:55,comet,"docs(*): fix spelling errors

Closes #16942",False
68701efb9e4e419da624fbe20fb4ff034d249261,2020-02-02 14:49:17,George Kalpakas,"chore(*): fix serving of URI-encoded files on code.angularjs.org

The files served for the various versions on https://code.angularjs.org/
are retrieved by a Firebase function from a Firebase Storage bucket
(where they are deployed to from Travis CI). The files are stored
exactly as they are named on disk.

It turns out that some of the files have names with special characters
that get URI-encoded when sent to the Firebase function. For example,
`input[text].html` becomes `input%5Btext%5D.html`. As a result, the
actual file cannot be retrieved from the Storage bucket (since the name
does not match) and `index.html` is returned instead. Apparently, this
never worked, but nobody noticed or reported it until recently.

An example of a failing URL is:
https://code.angularjs.org/1.7.9/docs/api/ng/input/input%5Btext%5D

(NOTE: https://docs.angularjs.org/ works correctly, since the files are
deployed to Firebase hosting directly and not to a Storage bucket.)

This commit fixes the problem by decoding the request path before trying
to retrieve the corresponding file from the Storage bucket.

Closes #16943",False
c8a6e8450f63978156000411c7bfbff1366641ea,2020-02-02 14:49:11,George Kalpakas,chore(package): fix scripts for latest Node 10.x on Windows,False
0cd592f49f8ea67273fd0fc424e988cbf1e3dbb2,2020-01-14 15:52:44,thatshubham,"docs(angular.errorHandlingConfig): fix typo (wether --> whether)

Closes #16935",False
a4daf1f767bb942433be23586dbceb476c2e2e89,2020-01-14 15:49:52,thatshubham,"docs(angular.copy): fix `getter`/`setter` formatting

Fix the formatting of `getter`/`setter` in the known limitations section
of the `angular.copy()` docs.

Closes #16934",False
be6a6d80e0f9f28efe6b3b4cd9dbf053691cf5af,2020-01-14 15:46:06,Angel_Kitty,"chore(*): update copyright year to 2020

Closes #16930",False
36f17c92627564af12e839c84422b3f327afa27e,2019-11-19 20:07:18,Pete Bacon Darwin,docs: add mention to changelog,False
ff5f782b204a5db1b159edd52f093670acb6b177,2019-11-19 20:05:59,Pete Bacon Darwin,docs: add mention to changelog,False
27460db1dbb4b957825f774c0ab22803a98b714b,2019-11-19 13:53:28,Pete Bacon Darwin,docs: release notes for 1.7.9,False
add78e62004e80bb1e16ab2dfe224afa8e513bc3,2019-11-07 21:09:21,Pete Bacon Darwin,"fix(angular.merge): do not merge __proto__ property

By blocking `__proto__` on deep merging, this commit
prevents the `Object` prototype from being polluted.",False
060bcdeeb9f5181fb885417f68429c86a8e59eb2,2019-07-24 18:23:19,George Kalpakas,"chore(saucelabs): switch to latest version of desktop Safari

The currently latest-1 version of desktop Safari (v12.0) on SauceLabs is
completely unstable. Switching to the latest version (currently v12.1),
which works fine.

Closes #16888",False
881167d7bd9cc4bcbef4a8249ea1c54bda167f4e,2019-07-24 18:22:07,George Kalpakas,chore(saucelabs): upgrade SauceConnect to 4.5.4,False
1147f0e213d4b79c4878639ef0ed56afe457a860,2019-07-21 20:30:47,George Kalpakas,docs($compile): fix typos and incorrect example,False
825e25b095be4ab8e0e821fe90c096a2042cd96d,2019-05-28 23:45:25,byronigoe,"docs(guide/migration): fix typo (misceallenous --> miscellaneous)

Closes #16876",False
10d1b197372dba8ba2ce5c636c47e64731129798,2019-05-09 23:54:02,George Kalpakas,"fix(ngStyle): correctly remove old style when new style value is invalid

Since d6098eeb1, old styles were not removed if `newStyles` specified an
invalid value for the style (e.g. `false`). The assumption was that the
new style would overwrite the old style value, but using an invalid
value made browsers ignore the new value and thus keep the old style.
This would typically happen when guarding a style with a boolean flag;
e.g.: `ng-style=""{backgroundColor: isError && 'red'}""`

This commit essentially revers commit d6098eeb1, whose main purpose was
to work around jquery/jquery#4185. The jQuery issue has been fixed in
3.4.0, so that should not be a problem any more.

Fixes #16860

Closes #16868",False
c8d985a0f317f20808b0384a24c3e345aa34638c,2019-04-12 14:57:25,Michał Gołębiowski-Owczarek,"chore(*): update jQuery from 3.2.1 to 3.4.0

This updates jQuery to 3.4.0 to ensure future security fixes won't break it.

Closes #16863",False
55075b840c9194b8524627a293d6166528b9a1c2,2019-03-26 17:05:18,askhalil,"docs(DEVELOPERS): remove git revert misleading information

Closes #16857",False
c8980099dc542a577d9abfab9092f3d4ad2248d3,2019-03-22 12:57:46,JandersonConstantino,chore(*): update copyright year,False
e629fe4a789954084c886a2e770f70c79e8b8bd0,2019-03-11 17:28:29,Pete Bacon Darwin,docs(CHANGELOG): add 1.7.8 release notes,False
6959bc297f30b04c7794f996e15afa82426d610e,2019-03-06 22:38:05,Martin Staffa,"fix(required): correctly validate required on non-input element surrounded by ngIf

Closes #16830
Closes #16836",False
a1d15649ed2207ce0e7160539306ba3a7c4ad3ad,2019-03-06 01:29:32,Ashish Kamble,"docs(guide/di): clarify example description

Closes #16833",False
cbf35f04f3bfa5f55cc886ca5e476e81e6f29b06,2019-02-27 15:00:13,Pete Bacon Darwin,chore(github): update Issue template with LTS info,False
f76802369851296a635f48a0df24dec975ac152c,2019-02-27 14:42:34,Pete Bacon Darwin,chore(github): update PR template to highlight LTS mode,False
587843bca0a0f469aa1bfd36bbc7907b8f5a25b6,2019-02-04 19:05:37,Pete Bacon Darwin,chore(scripts): use https for git repo URLs,False
94582f0def044a7a790cd10e5bb610738fe7b6b0,2019-02-04 18:36:49,Pete Bacon Darwin,docs(CHANGELOG): update with 1.7.7 release notes,False
fffe7d19799eaa41058167a577ea95dcc23bc83e,2019-02-04 18:35:43,Pete Bacon Darwin,docs(RELEASE): store release instructions,False
005dd97255840547f0c11f4cd0ee9ec126ad1325,2019-01-26 16:01:25,Martin Staffa,"fix(ngRequired): set error correctly when inside ngRepeat and false by default

Previously, in the required validator, we would read the required setting directly
from attr.required, where it is set by ngRequired.

However, when the control is inside ngRepeat, ngRequired sets it only after a another digest has
passed, which means the initial validation run of ngModel does not include the correct required
setting. (Before commit 0637a2124c4515311a317e0e39926521228fc0af this would not have been a problem,
as every observed value change triggered a validation).

We now use the initially parsed value from ngRequired in the validator.

Fixes #16814
Closes #16820",False
9f7144b035800c6671a981ba7e5987aeb6c9e959,2019-01-22 01:05:53,Martin Staffa,docs(angular.copy): fix list of unsupported types,False
65f800e19ec669ab7d5abbd2f6b82bf60110651a,2019-01-21 20:10:22,Martin Staffa,"docs(angular.merge): add notes about support and lodash compatibility

Closes #16187
Closes #14512",False
63796d3f98a9edcf4db57ac4b439bd2b88bb394a,2019-01-21 20:10:22,Martin Staffa,"docs(angular.copy): list object types / features that are not supported

Closes #5085
Closes #13193
Closes #14352
Closes #15904
Closes #16055
Closes #16061
Closes #16067",False
2d8b34670bb2bce60fd27ad1c212a624bc449a4e,2019-01-21 20:10:22,Martin Staffa,"docs(angular.copy): add note about destination and source compatibility

Closes #15444
Closes #15462",False
fbc83f00c71932d8f5075b55f32b8d58a43f49b5,2019-01-21 20:10:22,Martin Staffa,"docs(ngParseExt): note limitations with ngOptions and ngRepeat

Closes #15954
Closes #15926",False
0633d8f2b0ac6cbad1c637768258b1f72994a614,2019-01-21 20:10:22,Martin Staffa,"docs(input[email]): note limitations with IPv6 addresses

Closes #16599",False
78257729259eed46df79ee6707d3a1136aa6ec26,2019-01-21 17:19:42,Martin Staffa,"docs(ngDisabled): remove restriction to input element

Disabled can be set on many different elements, and might also be used
on custom controls, so it's better to remove the restriction completely

Closes #16775",False
c7671edbfdcdc161507fb57cff12523f4400b5ac,2019-01-17 14:52:16,Pete Bacon Darwin,chore(*): update CHANGELOG with release notes for 1.7.6,False
8b973e04cad06b839f8d6641131e2b206afb284c,2019-01-11 08:07:21,Jason Bedard,"fix($compile): fix ng-prop-* with undefined values

Fixes #16797
Closes #16798",False
be45d3c20877aa77951643bd7984b218e2be9dc3,2019-01-11 01:08:56,George Kalpakas,"chore(saucelabs): remove `SL_Safari` from browser list

Closes #16806",False
53ff4487e7f4d21289a9184257e863b6899759a2,2019-01-11 01:08:41,George Kalpakas,chore(saucelabs): add `SL_EDGE-1` to browser list,False
7944b0c98f9d18ac5d656e383aeab3150b4b7c54,2019-01-11 01:08:41,George Kalpakas,"chore(travis): suppress verbose log output and allow error logging

Based on angular/angular#27657.",False
195756b45c754b9fad41a187b964c8d8cb48f398,2019-01-11 01:08:41,George Kalpakas,"chore(package): upgrade to latest `karma-sauce-launcher`

Based on angular/angular#27634.",False
940c1abf861ac902d27131c548d38870cd12716a,2019-01-11 01:08:41,George Kalpakas,"chore(package): upgrade to latest `karma`

This includes a Karma fix that affects CI flakiness.
Based on angular/angular#27735.",False
4584f0c37d097ac236fb337058890f607293b0cd,2019-01-11 01:08:41,George Kalpakas,chore(saucelabs): use 'websocket' for transmission when possible,False
7448d8748c23d651fd682cc8f4825f92bb1d7c37,2019-01-11 01:08:41,George Kalpakas,chore(saucelabs): upgrade to latest SauceConnect,False
915939396a2b4dae2f418a9406275c4b7256a130,2019-01-11 01:08:41,George Kalpakas,test(ngHref): only run Edge-specific test on relevant Edge versions,False
1e8a3de15d5b5b57b5837eb6f8782f39e51eb70d,2019-01-07 16:37:27,Bernhard Kiselka,"docs(guide/Conceptual Overview): use exchangeratesapi.io

As fixer.io introduced an API key and thus a limitation of calls
(see https://github.com/fixerAPI/fixer#readme ),
change https://api.fixer.io to https://api.exchangeratesapi.io instead,
which is ""designed and tested to handle thousands of request per second""
and has ""built in Fixer.io compatibility so you can keep all the libraries you already like
and use daily"" (from https://api.exchangeratesapi.io ).
The idea is from https://github.com/fixerAPI/fixer/issues/107

fixes  #16807

Closes #16808",False
2580bde8acc18f9589a188c261dccc1b02d2e275,2018-12-29 16:13:39,Julien RAJERISON,"docs(ISSUE_TEMPLATE.md): add Opera to browser list

Opera is indirectly supported, although not explicitly tested on (see
[here](https://docs.angularjs.org/misc/faq#what-browsers-does-angularjs-work-with-)
for more info), so it doesn't hurt adding it to the list of browsers.

Closes #16801",False
98d9143f0d8abeab2e9960cd25f36bc2f52ae007,2018-12-27 23:57:36,Frederik Prijck,"chore(package): rename to angular to match npm

Previously, angularjs was used as the name inside the package.json file.
However, angularjs is published to npm using angular.
To avoid conflicts, the name is updated to reflect the same name as being published on npm.

Fixes #16799

Closes #16800",False
9ae51d751b3803d610652687b6a63f98f825a592,2018-12-11 21:10:15,Pete Bacon Darwin,"test(ngAnimate): ensure that `blockTransitions` can be spied upon

Previously the test was assuing that this function was attached to
the window, which is not the case in production, nor in the isolated
module tests.",False
264819a308e4727f8d9d510900973cee44895f37,2018-12-11 21:10:15,Pete Bacon Darwin,"chore(modules): execute modules unit tests in one karma run

SauceLabs  is struggling to keep connecting and disconnecting
for each of the modules unit test runs. This commit puts most of
the module tests into IIFEs so that they can be run in one go.

* ngMock is still tested separately since unlike the other tests
it doesn't want to have a pre-built version of ngMock available.

* ngAnimate is still tested separately because it does some funny
things with globals that were difficult to isolate in the main modules
test run.",False
5f1cf11e2374f969b16ca4f54f292c8e47c1f844,2018-12-11 00:41:59,Pete Bacon Darwin,chore(utils): do not mutate source arrays,False
04ae4e5b47fbc015b5de3dd660bce7b1904e2268,2018-12-10 22:27:20,Pete Bacon Darwin,test(*): isolate cache leaks from subsequent tests,False
e7e8dad3b3c460bdfb8d7ee0515103b59403cd92,2018-12-09 07:53:09,Michał Gołębiowski-Owczarek,"test(ngSanitize): disable a failing Edge test in all versions, including 18

It's been only disabled on Edge 16/17 so far which made it fail in Edge 18.

Closes #16786",False
09f013ae921c048d06d991710afa70e2edcd5190,2018-12-06 14:37:55,Michał Gołębiowski-Owczarek,"fix(compile): properly handle false value for boolean attrs with jQuery

jQuery skips special boolean attrs treatment in XML nodes for historical reasons
and hence AngularJS cannot freely call `.attr(attrName, false) with such
attributes. To avoid issues in XHTML, call `removeAttr` in such cases instead.

Ref jquery/jquery#4249
Fixes #16778
Closes #16779",False
de0aad89844a81b273b1fe50f53f1148ef8d20f2,2018-12-06 09:10:01,Jason Bedard,"fix(ngRepeat): fix reference to last collection value remaining across linkages

Ref #16776",False
3ea8c2b880b10d091e09cae6aa12bca5aaec7aac,2018-12-06 09:10:01,Jason Bedard,"fix(ngRepeat): fix trackBy function being invoked with incorrect scope

Also fixes a leak of that scope across all further instances of the
repeated element.

Fixes #16776
Closes #16777",False
a0c4e25a010477fe5a3c548fcf06a751de1ec613,2018-12-05 22:26:08,Joseph Jacobs,"docs(tutorial/step_3): clarify how components are mapped to HTML elements

Closes #16768",False
fa8fe1f739da9296d61e2dae9e9f0854b481bb03,2018-12-05 20:50:09,Anthony X,"docs(tutorial/step_6): fix experiment description

In the experiments section, it is suggested to add a `-` symbol to
`<option value=""age"">Oldest</option>`. This change is made to reverse
the sort order when selecting the `age` option.

However, this change affects the default `$ctrl.orderProp` that we had
set in `phone-list.component.js`. After making the change, our default
when refreshing the page is ""Sort by: [blank]"".

This commit adds some additional documentation to clarify that this
behavior makes sense and that the reader should try and fix this within
`phone-list.component.js`.

Closes #16781",False
0637a2124c4515311a317e0e39926521228fc0af,2018-12-05 18:36:43,Martin Staffa,"perf(input): prevent multiple validations on initialization

This commit updates in-built validators with observers to prevent
multiple calls to $validate that could happen on initial linking of the directives in
certain circumstances:

- when an input is wrapped in a transclude: element directive (e.g. ngRepeat),
the order of execution between ngModel and the input / validation directives changes so that
the initial observer call happens when ngModel has already been initalized,
leading to another call to $validate, which calls *all* defined validators again.
Without ngRepeat, ngModel hasn't been initialized yet, and $validate does not call the validators.

When using validators with scope expressions, the expression value is not available when
ngModel first runs the validators (e.g. ngMinlength=""myMinlength""). Only in the first call to
the observer does the value become available, making a call to $validate a necessity.

This commit solves the first problem by storing the validation attribute value so we can compare
the current value and the observed value - which will be the same after compilation.

The second problem is solved by parsing the validation expression once in the link function,
so the value is available when ngModel first validates.

Closes #14691 
Closes #16760",False
d855b74095c616c061d67ae9bd57299ed84dbeae,2018-12-05 13:00:40,Martin Staffa,"chore(Saucelabs): increase max session duration

We have amassed so many e2e tests, that the default 30 minute
Saucelabs session limit is often not enough, especially during
the week, when the VMs are under heavy load.",False
0cdff4273766579fcf897fac7da84346b5a83029,2018-12-02 16:45:39,Eirik Blakstad,"fix(aria/ngClick): check if element is `contenteditable` before blocking spacebar

`ngAria`'s `ngClick` blocks spacebar keypresses on non-blacklisted
elements, which is an issue when the element is `contenteditable`.

Closes #16762",False
a5a98d36c0acd7a02614f5ccf18582e07f412e76,2018-11-23 18:36:30,Martin Staffa,"chore(travis): put unit module tests into separate job

They take a lot of time since we created different karma jobs for them",False
15d4dd3ccadd2e43e9f82773f8b573211b930767,2018-11-23 18:36:30,Martin Staffa,"chore(saucelabs): always test 2 latest Safari versions

Safari 10 does not finish the tests, but Safari 11 and 12 do",False
ab36c4b487032183833ab62656ed2dfaefb32b9e,2018-11-23 18:36:30,Martin Staffa,"revert: fix(Angular): add workaround for Safari / Webdriver problem

This reverts commit 6b915ad9db29027e0aa70634e08a8a3c5af897b8.
Karma has this workaround built in since 3.1.0:
https://github.com/karma-runner/karma/commit/873e4f9",False
e77a74472a1498cf8ceb776b22cbab6517b14dd3,2018-11-23 18:36:30,Martin Staffa,"chore(*): update karma

This allows us to remove the workaround added in #16645",False
4a3ae43407f7a39a88fd6d7554b9dad6c248ac5c,2018-11-22 04:38:42,Jason Bedard,"fix($browser): normalize inputted URLs

Calls to `$browser.url` now normalize the inputted URL ensuring multiple
calls only differing in formatting do not force a browser `pushState`.

Normalization is done the same as the browser location URL and may
differ per browser and may be changed by browsers. Today no browsers
fully normalize URLs so this does not fix all instances of this issue.

See #16100
Closes #16606",False
dc90cbf6db105a588c3b793ae96fe3c7d021b17d,2018-11-22 04:38:42,Jason Bedard,test($browser): update MockWindow to normalize URLs similar to real window.location,False
622d32e805cfd9fc5515c17054d358aa9db541a7,2018-11-20 19:40:03,Pete Bacon Darwin,"fix(interpolate): do not create directives for constant media URL attributes

By creating attribute directives that watch the value of
media url attributes (e.g. `img[src]`) we caused a conflict
when both `src` and `data-src` were appearing on the
same element. As each directive was trying to write to the
attributes on the element, where AngularJS treats `src` and
`data-src` as synonymous.

This commit ensures that we do not create create such directives
when the media url attribute is a constant (no interpolation).

Because of this (and because we no longer sanitize URLs in the
`$attr.$set()` method, this commit also updates `ngHref` and
`ngSrc` to do a preliminary sanitization of URLs in case there
is no interpolation in the attribute value.

Fixes #16734",False
2dfb6b4af62d750032c91fd86dc1f8d684d179c6,2018-11-15 21:07:38,Volker Braun,"fix($q): allow third-party promise libraries

For testing, it can be useful to overwrite `$q` with other promise
implementions, such as Bluebird + angular-bluebird-promises. This broke
in v1.6.x with ""TypeError: Cannot set property 'pur' of undefined"".

Closes #16164

Closes #16471",False
318e6ceea3a255413ac86a7d28f1eefb0478ca24,2018-11-15 20:43:18,Alejandro López,"test(e2e): replace the deprecated `browser.getLocationAbsUrl()` with `browser.getCurrentUrl()`

According to angular/protractor#3969, `browser.getLocationAbsUrl()` is
now deprecated and `browser.getCurrentUrl()` should be used instead.

Closes #16053",False
4f2b2b61c5d0dd7f9e7a144e520e353cf835137c,2018-11-15 20:15:11,George Kalpakas,"docs(tutorial): mention that Protractor might need upgrading

Since Protractor requires specific WebDriver versions and these are only
compatible with specific browser version ranges, it is often necessary
to upgrade Protractor just so that it picks up a more recent WebDriver
version.
Related: #16739

Closes #16753",False
67263f2bd0d076c5dd36910eec2078d6df01ce0d,2018-11-15 20:15:09,George Kalpakas,"docs(tutorial): explain how to upgrade dependencies

Related: angular/angular-seed#439",False
a48c47fec0e44bbc7eeae2ea1fb8b40cf93ad231,2018-11-15 20:15:08,George Kalpakas,"docs(tutorial): replace `getLocationAbsUrl()` with `getCurrentUrl()`

Protractor's `browser.getLocationAbsUrl()` has been deprecated and
`browser.getCurrentUrl()` is the recommended alternative.
Related: angular/angular-phonecat#430",False
b77f0585053af0fffacc8e433bb07a46115c5d45,2018-11-15 20:15:07,George Kalpakas,"docs(tutorial): switch from `bower` to `npm` and upgrade AngularJS to 1.7.x

Related: angular/angular-phonecat#430",False
1a14b58c6e3899cb791f7ccd73be1edf794c1879,2018-11-15 20:14:59,George Kalpakas,docs(tutotial): switch all links to `https`,False
362dd1786f585594de8295144dd161dc425e6676,2018-11-15 18:40:53,teresy,"refactor(production): remove duplicate expression

Remove a duplicate expression (the left and right sides both check `versionInfo.currentVersion.version`). [48f0957](https://github.com/angular/angular.js/blob/48f0957dde728b050e2d8f76db81cbf12cffd42a/docs/config/services/deployments/production.js#L18) is the most recent commit I found where these expressions differ. My best guess is the duplicated expression can be removed.

Closes #16738",False
736e299ef3eb6f0acd36e242ead755998d27c48f,2018-11-12 16:45:57,George Kalpakas,"test(ngOn*): add tests for binding to camelCased event names

Closes #16757",False
06d154f91c67250864c590ce20c5ad5cf03a3191,2018-11-12 16:45:51,George Kalpakas,test($compile): fix incorrect markup in tests,False
ba4d9035860fc23944c12b5e39d5da4ab4faf4bf,2018-11-12 16:45:51,George Kalpakas,"chore(i18n): fix UCD extraction for Node 10.x

Previously (e.g. Node.js 8.x), the 3rd argument to `fs.writeFile()`
(i.e. the callback) could be undefined. On Node.js 10.x, this throws an
error.

This commit fixes it by switching to `fs.writeFileSync()` which seems to
have been the original intention (based on the sorrounding code).",False
7240f31824b94d22ec382854b7b3dc47100374c2,2018-11-12 16:45:51,George Kalpakas,chore(docs): fix rendering of methods' `this` type,False
c3f6123de9df6e31e9b2e6806088038d5830a92a,2018-11-12 16:45:51,George Kalpakas,chore(package): fix scripts for Node 10.x on Windows,False
4e372d93144b4dab7dcaa029fbbc5d7f3f1ceb8c,2018-11-02 23:04:55,Daniel Breen,"docs(guide/migration): fix typos, change 'ctrk' to 'ctrl'

Closes #16754",False
3df4ee421c4679e0d11dc6f6a843c6428b046078,2018-11-02 23:04:45,Daniel Breen,"docs(changelog): fix typos, change 'ctrk' to 'ctrl'",False
258713a77db1a68527760832f185efe28008e3c2,2018-10-31 23:49:54,Pete Bacon Darwin,chore(package): update protractor & webdriver dependencies,False
6e3bbfc744f0b4049f543bc4ea3586de6b7a5310,2018-10-31 23:49:54,Jason Bedard,"fix(input): prevent browsers from autofilling hidden inputs

Autofilling with previous values (which will then be `$interpolate`ed) could lead to XSS or errors",False
09751be9bc1580a49799350b7ee46b3807905899,2018-10-29 14:26:32,Hallstein Brøtan,"docs(guide/Developer Guide): correct broken link

The blog post ""Creating multilingual support using AngularJS"" has moved. Corrected the URL.

Closes #16746",False
b4e409bf6cd81307f57e51f2f1281b05ceb6cbf2,2018-10-18 15:15:09,Michał Gołębiowski-Owczarek,"fix(urlUtils): make IPv6 URL's hostname wrapped in square brackets in IE/Edge

IE 9-11 and Edge 16-17 (fixed in 18 Preview) incorrectly don't wrap IPv6
addresses' hostnames in square brackets when parsed out of an anchor element.

Fixes #16692
Closes #16715",False
3e380325d8f64f30a6715578b117c6c161aee57b,2018-10-16 01:48:59,George Kalpakas,"fix(ngAnimateSwap): make it compatible with `ngIf` on the same element

Previously, both `ngAnimateSwap` and `ngIf` had a priority of 600, which
meant that (while both are [terminal directives][1]) they were executed
on top of each other (essentially messing each other's comment node).

This commit fixes it, by giving `ngAnimateSwap` a priority of 550, which
is lower than `ngIf` but still higher than other directives.

For reference, here is a list of built-in directive per priority:

```
-400: ngInclude, ngView
  -1: ngRef
   1: ngMessage, ngMessageDefault, ngMessageExp, ngModel, select
  10: ngModelOptions
  99: ngHref, ngSrc, ngSrcset
 100: attr interpolation, ngChecked, ngDisabled, ngList, ngMax,
      ngMaxlength, ngMin, ngMinlength, ngModel (aria), ngMultiple,
      ngOpen, ngPattern, ngProp*, ngReadonly, ngRequired, ngSelected,
      ngStep, ngValue, option
 400: ngInclude, ngView
 450: ngInit
 500: ngController
 600: ngAnimateSwap, ngIf
1000: ngNonBindable, ngRepeat
1200: ngSwitchDefault, ngSwitchWhen
```

[1]: https://docs.angularjs.org/api/ng/service/$compile#-terminal-

Fixes #16616

Closes #16729",False
fd28edfc5097febbf2b01119ab013832eaa96fe5,2018-10-16 01:48:47,George Kalpakas,refactor(ngAnimateSwap): remove unnecessary `inject()` from tests,False
393072081c64886211b3b312b2be76e8726e267a,2018-10-15 18:40:10,Martin Staffa,"test(modules): properly isolate module tests

Closes #16712",False
52ad819d2f986590069bcb6fa9d46cfc8ce6a5ae,2018-10-15 16:44:36,Martin Staffa,"docs(ngMock/ngMockE2E.$httpBackend): fix method name to matchLatestDefinitionEnabled

See #16702",False
d86f6be57bbfc154c36e42469008a87bfaeef1d2,2018-10-15 16:44:36,Martin Staffa,"fix(ngMock): make matchLatestDefinitionEnabled work

Fixes #16702",False
100cf7245eff0cf9d6d19d8bb5f26852d78581a8,2018-10-15 14:35:14,Michał Gołębiowski-Owczarek,"chore(*): update Sauce Connect from 4.4.12 to 4.5.1

Sauce Connect 4.5.0 fixes ""a major bug in connection state logic that caused
clients to exit prematurely"".
See https://wiki.saucelabs.com/display/DOCS/Sauce+Connect+Proxy+Change+Logs
This will possibly improve the stability of our test runs.

Closes #16730",False
0a5e58dacbeda71892950ff84033d02155725b54,2018-10-11 20:05:57,Michał Gołębiowski-Owczarek,"chore(*): update minimum Yarn version, do some Yarn-related cleanups

Included changes:

*Update minimum Yarn version from 1.3.2 to 1.10.1*

Yarn 1.10 added the integrity field to the lockfile, making newer Yarn users
have their lockfile changed a lot if they run `yarn`. This commit updates the
required Yarn version to be at least 1.10.1 and changes Travis & Jenkins to use
Yarn 1.10.1

*Change the package.json's engines grunt field to grunt-cli*

The grunt field suggested it's the grunt package version we're checking while
we check the grunt-cli version instead.

*Stop separating Yarn script arguments from script names via "" -- ""*

The "" -- "" separator is necessary in npm but not in Yarn. In fact, it's
deprecated in Yarn and some future version is supposed to start passing this
parameter directly to the scripts which may break them.

*Don't install grunt-cli globally during the build*

It's enough to use `yarn grunt` instead of `grunt` and the global grunt-cli
installation is no longer needed.

*Use `yarn grunt` instead of `yarn run grunt`*

The former form is shorter.

*Don't define the `grunt` Yarn script*

As opposed to npm, `yarn binName` invokes a binary named `binName` exposed
by the respective package so the `grant` Yarn script is no longer needed.

*Allow Node versions newer than 8; bump the minimum*

Closes #16714",False
bb5a7e39ba2c8fe5afe1ec6f90ebedf22658a1c8,2018-10-04 20:16:41,itchyny,"fix(ngStyle): skip setting empty value when new style has the property

Previously, all the properties in oldStyles are set to empty value once.
Using AngularJS with jQuery 3.3.1, this disables the CSS transition as
reported in jquery/jquery#4185.

Closes #16709",False
33f801e7c2b17ec893058ac2e6af6fa851bcd6fd,2018-10-04 19:53:34,Pete Bacon Darwin,docs(changelog): add 1.7.5 release notes,False
26ddc5f830f902a3d22f4b2aab70d86d4d688c82,2018-09-20 14:32:19,George Kalpakas,"fix(ngClass): do not break on invalid values

Previously, when an `ngClass` expression evaluated to something that was
not a string, array or object (and was truthy), an error would be thrown
while trying to call `.split()` on a non-string value. This error was
not very helpful for the user to identify the root cause of the problem.

This commit fixes it by ensuring such values are converted to string.

Fixes #16697

Closes #16699",False
eb0ccc625f27e6ae550f8c5e0186bd99f986e80b,2018-09-10 23:28:41,Sibiraj,"docs(*): update LTS information in `README.md` and docs landing page

Closes #16688",False
e25f84296f459f5e1dc86c8720f655f906bc8845,2018-09-07 14:29:03,Pete Bacon Darwin,docs(changelog): add 1.7.4 release notes,False
8082d5eae0731dabb63045fc5e856ff365042f8f,2018-09-06 19:23:33,Martin Staffa,"fix(ngAria.ngClick): preventDefault on space/enter only on non-interactive elements

Fixes #16664
Closes #16680",False
c42cadd4ed41b6d89537e8d7b25352ce7fc9569e,2018-09-06 13:41:33,Michał Gołębiowski-Owczarek,"docs(version-support-status): remove outdated info, resolve inconsistencies

Closes #16684",False
44cc823092e321b7401b094da149182cd3b09ce4,2018-09-06 13:17:12,Martin Staffa,"fix(ngAnimate): remove prepare classes with multiple structural animations

Closes #16681
Closes #16677",False
f010d6c00f91da0e0297e64856360598ad7db15d,2018-09-05 23:04:58,Craig Johnson,"docs(guide): grammar correction in security guide

Closes #16683",False
a5537359c531ca9c32ea481f9189e9d4354859c0,2018-08-26 02:08:51,George Kalpakas,"refactor(ngMocks): simplify `routeToRegExp` by assuming `path` has query/hash stripped off

Closes #16672",False
99ad41fa3fb65421f52e640fcaebc7e38fd333a6,2018-08-26 02:08:47,George Kalpakas,refactor(ngMocks): clean up `MockHttpExpectation`,False
132344c8670965be9d7e1fce8e44f3721c459e6e,2018-08-26 02:08:46,George Kalpakas,refactor(ngMocks): ignore query/hash when extracting path params for `MockHttpExpectation`,False
321ee99647d7c0e0d939ea44971643212b9e2737,2018-08-26 02:08:45,George Kalpakas,refactor(ngMocks): clean up `MockHttpExpectation#params()`,False
9824c59dca4ab57a2de6b7844e46ea8a77560f4f,2018-08-26 02:08:43,George Kalpakas,refactor(ngRoute): do not unnecessarily return `originalPath` in `routeToRegExp`,False
506fe73a4af3e874397137fd10a45d26d3aabd47,2018-08-26 02:08:41,George Kalpakas,test(ngMocks): use correct method name in `$httpBackend` test,False
510404e5b34fcf47a4d0cc8094afe7431b0a0b63,2018-08-26 02:08:40,Susisu,"fix($route): correctly extract path params if path contains question mark or hash

The `routeToRegExp()` function, introduced by 840b5f0, could not extract
path params if the path contained question mark or hash. Although these
characters would normally be encoded in the path, they are decoded by
`$location.path()`, before being passed to the RegExp returned by
`routeToRegExp()`.

`routeToRegExp()` has to be able to deal with both encoded URL and
decoded path, because it is being shared between `ngRoute` and
`ngMocks`.

This commit fixes the issue, by introducing an `isUrl` option that
allows creating an appropriate RegExp for each usecase.",False
937fb891fa4fcf79e9fa02f8e0d517593e781077,2018-08-23 17:37:18,George Kalpakas,"chore(doc-gen): upgrade `dgeni-packages` to 0.26.5

Related: #16671, angular/dgeni-packages#271",False
aecd551bdeff476ea1076a6fee807366e1a584c9,2018-08-21 14:13:18,George Kalpakas,"docs(angular.copy): fix formatting

Using `<br>` messes formatting (due to a bug in
`dgeni`/`dgeni-packages`). This started breaking in c387e0d79.

Fixes #16671",False
837e519acc8cbe8e714c1f2bc14fa6adf9c1bf5d,2018-08-20 23:34:28,Martin Staffa,"fix(ngHref): allow numbers and other objects in interpolation

Interpolated content in ngHref must be stringified before being passed to $$sanitizeUri by $sce. Before 1.7.x, the sanitization had happened on the already interpolated value inside $compile.

Closes #16652
Fixes #16626",False
ad7ea953868ac8ee376e8a44472793659cdd0589,2018-08-07 18:50:40,John Mantas,"docs(ngRepeat): redundant ""and"" on line 77

Closes #16657",False
fd4a284c858059cad72fc90a579d1ab80f49bfce,2018-08-06 18:21:03,George Kalpakas,"docs(guide/migration): fix typos, format inline code",False
79ca0f1e914d9176167e55062900414fe5cc4557,2018-08-06 16:17:43,Martin Staffa,"fix(select): allow to select first option with value `undefined`

Previously, the value observer incorrectly assumed a value had changed even if
it was the first time it was set, which caused it to remove an option with
the value `undefined` from the internal option map.

Fixes #16653
Closes #16656",False
848c9b51f12b40306fcc2fe1dc7194c6ce5e7c90,2018-08-03 21:46:19,Martin Staffa,"docs(select): remove solved known issue

The issue in question has been resolved some time in 2017.
The bug report is still open, but the behavior has changed:
https://bugzilla.mozilla.org/show_bug.cgi?id=126379

Let's hope they have tests for this!",False
16b0692885eec3d1789f800e2a6a61b79b7dc122,2018-08-03 17:06:59,Martin Staffa,docs(CHANGELOG.md): add changes for 1.7.3,False
af3b71ef4607bfbf0a9732d52e1b7377ec6333c6,2018-08-03 15:47:03,Martin Staffa,"docs(\$compile): add docs for ngProp and ngOn bindings

The docs are written as if ngProp and ngOn were regular directives,
which makes them easier to find.

Closes #16627",False
dedb10c0b89a92f5c43b4c4d3f1054cd8179a58e,2018-08-02 06:20:25,Jason Bedard,"feat($compile): add support for arbitrary DOM property and event bindings

Properties:

Previously only arbitrary DOM attribute bindings were supported via interpolation such as
`my-attribute=""{{expression}}""` or `ng-attr-my-attribute=""{{expression}}""`, and only a set of
distinct properties could be bound. `ng-prop-*` adds support for binding expressions to any DOM
properties. For example `ng-prop-foo=""x""` will assign the value of the expression `x` to the
`foo` property, and re-assign whenever the expression `x` changes.

Events:

Previously only a distinct set of DOM events could be bound using directives such as `ng-click`,
`ng-blur` etc. `ng-on-*` adds support for binding expressions to any DOM event. For example
`ng-on-bar=""barOccured($event)""` will add a listener to the ""bar"" event and invoke the
`barOccured($event)` expression.

Since HTML attributes are case-insensitive, property and event names are specified in snake_case
for `ng-prop-*` and `ng-on-*`. For example, to bind property `fooBar` use `ng-prop-foo_bar`, to
listen to event `fooBar` use `ng-on-foo_bar`.

Fixes #16428
Fixes #16235
Closes #16614",False
88a12f8623d53579f8a21ac48d02ae1834fa7acb,2018-08-02 06:20:25,Jason Bedard,refactor($compile): move img[srcset] sanitizing to helper method,False
ebeb1c94917eaf53358ae0892232e6a7bb987ce2,2018-07-31 17:05:39,Georgii Dolzhykov,"fix(ngMock): pass failed HTTP expectations to `$exceptionHandler`

This was only partially fixed in f18dd2957.

Closes #16644",False
864c7f00c46ce86a0c808c112287d5eeac21f780,2018-07-31 02:06:31,George Kalpakas,"fix($location): avoid unnecessary `$locationChange*` events due to empty hash

Fixes #16632

Closes #16636",False
2907798ca58f24065711efdadb984f945c6e9df2,2018-07-31 02:06:12,George Kalpakas,test($location): add assertion,False
8562a621975876e7e695534127ceefd6e2dbd087,2018-07-31 02:06:12,George Kalpakas,"refactor($browser): correctly export helper used in specs

The helper is used in `fakeWindow.location.hash`. ATM, no test is using
the `hash` getter, so there were no errors.",False
fdfba097da8eefc6fe433e682bf89ead93a82885,2018-07-31 02:06:12,George Kalpakas,refactor($location): remove unnecessary capturing group in RegExp,False
a07191727dcc324943ffa718d77dbd93ad2858c8,2018-07-31 02:06:12,George Kalpakas,"refactor($location): minor changes (unused deps, exported globals, unused deps, etc)",False
c133ef8360c81c9f42713616e6ac8414c0e119c0,2018-07-27 23:16:25,George Kalpakas,"fix($animate): avoid memory leak with `$animate.enabled(element, enabled)`

When disabling/enabling animations on a specific element (via
`$animate.enabled(element, enabled)`), the element is added in a map to
track its state. Previously, the element was never removed from the map,
causing AngularJS to hold on to the element even after it is removed
from the DOM, thus preventing it from being garbage collected.

This commit fixes it by removing the element from the map on `$destroy`.

Fixes #16637.

Closes #16649",False
aa7d45e8040f86ee4b70f3b0a26d28acee7ef4d0,2018-07-27 20:40:25,Martin Staffa,"fix($compile): use correct parent element when requiring on html element

Fixes #16535
Closes #16647",False
6b915ad9db29027e0aa70634e08a8a3c5af897b8,2018-07-26 14:13:14,Martin Staffa,"fix(Angular): add workaround for Safari / Webdriver problem

Closes #16645",False
a42f8a0d5b67f46af354b23f14b88d6893a183ec,2018-07-25 16:13:14,Martin Staffa,"fix(ngEventDirs): pass error in handler to $exceptionHandler when event was triggered in a digest

This ensures that the error handling is the same for events triggered inside and outside a digest.",False
6b0193e4d9a796d8a7eead3c5a34d19a66b877c2,2018-07-25 16:13:14,Mark Gardner,"fix(ngEventDirs): don't wrap the event handler in $apply if already in $digest

Digest cycle already in progress error can inadvertently be caused when triggering an
element's click event while within an active digest cycle. This is due to the ngEventsDirs
event handler always calling $rootScope.$apply regardless of the status of $rootScope.$$phase.
Checking the phase and calling the function immediately if within an active digest cycle
will prevent the problem without reducing current functionality.

Closes #14673
Closes #14674",False
e500fb6ddb859cf172d06739fda7492730576de1,2018-07-23 16:50:31,George Kalpakas,"fix(angular.element): do not break on `cleanData()` if `_data()` returns undefined

This shouldn't happen in supported jQuery versions (2+), but if someone
uses the unsupported 1.x version the app will break. The change that
causes this new behavior was introduced in b7d396b8b.

Even though jQuery 1.x is not supported, it is worth avoiding the
unnecessary breakage (given how simple).

Fixes #16641

Closes #16642",False
204f9ffebe2568f1bba3ebbf260ea72d29962b49,2018-07-22 21:39:19,George Kalpakas,docs(browserTrigger): document `eventData.data` property,False
7eee0c2c13397716db3dce9ca3b6397457ee891a,2018-07-22 21:14:59,George Kalpakas,docs($route): fix typo (inluding --> including),False
2dc83b2f04848fc169b17a7aeac5395f03eb515b,2018-07-22 19:44:55,George Kalpakas,"docs(ngMock/$interval.flush): fix param type (not optional)

Closes #16640",False
3154111bb451cd1bafb6ff9b898cf6148ad2542d,2018-07-21 16:06:24,George Kalpakas,"chore(saucelabs): upgrade `sauce-connect` to latest version

Closes #16639",False
2f6f1a7d70eb82ec4d0c4960f0d4e41bdaa6dae6,2018-07-21 16:05:50,George Kalpakas,chore(karma): upgrade karma and related dependencies to latest versions,False
ff60b3f47ad4b567448f04b3991608c9f424acea,2018-07-21 15:09:38,Jason Bedard,"refactor($location): move repeated path normalization code into helper method (#16618)

Closes #16618",False
c2d0783ca97032707a2940f0f11ecf8ebdecd9f9,2018-07-21 13:14:57,George Kalpakas,"docs(ngMocks): fix type for `$flushPendingTasks`/`$verifyPendingsTasks`

Closes #16638",False
6706353a71e3c11c56c0b19be03600dac57aafe1,2018-07-13 16:01:50,George Kalpakas,"docs(ngMock/$timeout): deprecate `flush()` and `verifyNoPendingTasks()`

Closes #16603",False
24eeab0ebd4343a6a12016b90756dc60e760e59b,2018-07-13 16:01:48,George Kalpakas,"docs(ngMock/$timeout): recommend `$verifyNoPendingTasks()` when appropriate

For historical reasons, `$timeout.verifyNoPendingTasks()` throws if
there is any type of task pending (even if it is not a timeout). When
calling `$timeout.verifyNoPendingTasks()`, the user is most likely
interested in verifying pending timeouts only, which is now possible
with `$verifyNoPendingTasks('$timeout')`.

To raise awareness of `$verifyNoPendingTasks()`, it is mentioned in the
error message thrown by `$timeoutverifyNoPendingTasks()` if none of the
pending tasks is a timeout.",False
b14f67f4ae08afbc83c430d758e167c3fd4657a9,2018-07-13 16:01:48,George Kalpakas,"feat(ngMock): add `$flushPendingTasks()` and `$verifyNoPendingTasks()`

`$flushPendingTasks([delay])` allows flushing all pending tasks (or up
to a specific delay). This includes `$timeout`s, `$q` promises and tasks
scheduled via `$rootScope.$applyAsync()` and `$rootScope.$evalAsync()`.
(ATM, it only flushes tasks scheduled via `$browser.defer()`, which does
not include `$http` requests and `$route` transitions.)

`$verifyNoPendingTasks([taskType])` allows verifying that there are no
pending tasks (in general or of a specific type). This includes tasks
flushed by `$flushPendingTasks()` as well as pending `$http` requests
and in-progress `$route` transitions.

Background:
`ngMock/$timeout` has `flush()` and `verifyNoPendingTasks()` methods,
but they take all kinds of tasks into account which is confusing. For
example, `$timeout.verifyNoPendingTasks()` can fail (even if there are
no pending timeouts) because of an unrelated pending `$http` request.

This behavior is retained for backwards compatibility, but the new
methods are more generic (and thus less confusing) and also allow
more fine-grained control (when appropriate).

Closes #14336",False
411e35472bc4d9430267e30f77a72e024c0b9a5d,2018-07-13 16:01:46,George Kalpakas,"refactor($browser): share task-tracking code between `$browser` and `ngMock/$browser`

This avoids code/logic duplication and helps the implementations stay
in-sync.",False
af59a0a00b1391c80dbe15883ca8236ee22d4346,2018-07-13 16:01:44,George Kalpakas,"refactor($interval): share code between `$interval` and `ngMock/$interval`

This avoids code/logic duplication and helps the implementations stay
in-sync.",False
1c380b76712db833480ba8c63dd8fb7c6ab3dd6d,2018-07-13 16:01:44,George Kalpakas,refactor(ngMock/$interval): more closely follow actual `$interval`'s internal implementation,False
84fb041a897554eefdedf953ae069eaa0e9ad04a,2018-07-13 16:01:43,George Kalpakas,"feat(*): implement more granular pending task tracking

Previously, all pending async tasks (tracked via `$browser`) are treated
the same. I.e. things like `$$testability.whenStable()` and
`ngMock#$timeout.verifyNoPendingTasks()` take all tasks into account.

Yet, in some cases we might be interested in specific tasks only. For
example, if one wants to verify there are no pending `$timeout`s, they
don't care if there are other pending tasks, such as `$http` requests.
Similarly, one might want to get notified when all `$http` requests have
completed and does not care about pending promises.

This commit adds support for more granular task tracking, by enabling
callers to specify the type of task that is being added/removed from the
queue and enabling listeners to be triggered when specific types of
tasks are completed (even if there are more pending tasks of different
types).

The change is backwards compatible. I.e. calling the affected methods
with no explicit task-type, behaves the same as before.

Related to #14336.",False
aee7d53a6b5d3d7bc0a1124fd3df9b263777e72e,2018-07-10 08:09:25,Jason Bedard,"fix($location): fix infinite recursion/digest on URLs with special characters

Some characters are treated differently by `$location` compared to `$browser` and
the native browser. When comparing URLs across these two services this must be
taken into account.

Fixes #16592
Closes #16611",False
bfdc9170f213c546a390e0f4bff3994bcd10560c,2018-07-09 23:51:24,George Kalpakas,"fix($compile): work around Firefox `DocumentFragment` bug

DOM nodes passed to `compilationGenerator()` will eventually be wrapped
in `jqLite`, when the compilation actually happens. In Firefox 60+,
there seems to be a `DocumentFragment`-related bug that sometimes causes
the `childNodes` to be empty at the time the compilation happens.

This commit works around this bug by eagerly wrapping `childNodes` in
`jqLite`.

NOTE:
The wrapped nodes have references to their `DocumentFragment` container.
This is ""by design"", since we want to be able to traverse the nodes via
`nextSibling` (in order to correctly handle multi-element directives).

Once the nodes are compiled, they will be either moved to a new
container element or the `jqLite` wrapper is release making them
eligible for garbage collection. In both cases, the original
`DocumentFragment` container should be eligible for garbage collection
too.

Fixes #16607

Closes #16615",False
494277e3d3668699133fc796e5bf632258e34802,2018-07-09 20:40:03,Martin Staffa,docs($animate): clarify possible options and fired events,False
e4339bc51239fbef3d7bbd1b090a3e3cc0b2ef22,2018-07-09 20:40:03,Martin Staffa,"feat($animate): add option data to event callbacks

Closes #12697
Closes #13059",False
0e2619762398a7cd566c6e7f5141d22081d6b465,2018-07-05 23:14:34,Matias Niemelä,"perf(ngAnimate): avoid repeated calls to addClass/removeClass when animation has no duration

Background:
ngAnimate writes helper classes to DOM elements to see if animations are defined on them. If many
elements have the same definition, and the same parent, we can cache the definition and skip the
application of the helper classes altogether. This helps particularly with large ngRepeat
collections.

Closes #14165
Closes #14166
Closes #16613",False
74726b4f7934720c8106dfb7212b868ad5efc111,2018-07-04 18:19:40,Martin Staffa,"docs(changelog, guide/Migration): add info about $sce BC in 1.7 

Closes #16593
Closes #16622",False
3ad07eadef94aa6f9f71e7fd3549cc6d4c338965,2018-07-04 18:16:26,Martin Staffa,docs(guide/Using Location): change / remove obsolete information,False
7920f7140fb4ce7cd28b7be28c880a988bf9df76,2018-07-04 18:16:26,Martin Staffa,docs(*): fix headlines,False
66fdf2a8a79a07f97b55ff2974ddaadcc2008588,2018-06-29 13:40:01,Atef Ben Ali,"docs(guide/component): add missing `:`

Add `:` to `Components have a well-defined lifecycle` title.

Closes #16620",False
26a5779cddf70944b7548e3a6410d35237a516e5,2018-06-25 20:24:33,Martin Staffa,"chore(benchpress): add ngRepeat animation benchmark

Closes #13976",False
a90d0cbbba7a88f0ddacf95136a72abeb932363f,2018-06-23 21:26:45,Martin Staffa,chore: fix eslint error,False
9307ccf6ee558ebc05b7c48dc40c41e44ba20e8f,2018-06-23 02:24:51,Pete Bacon Darwin,"chore(docs-app): ensure ToC links contain the path

Without the path the link is always pointing to the
root page, rather than the current page, which means
that copying the link address or opening the page in
a new tab is broken.

Closes #16608",False
2c7aa68ca8c60663529e4f423bc73e448c3441b1,2018-06-20 23:36:25,Ilia Choly,"fix(grunt-utils): correctly detect java 32bit support

Closes #16605",False
840b5f0a7634efdf4d6ed81a52e66fc0e0620127,2018-06-18 22:12:50,Georgii Dolzhykov,"fix(ngMock/$httpBackend): correctly ignore query params in {expect,when}Route

Previously, a route definition such as
`$httpBackend.whenRoute('GET', '/route/:id')` matched against a URL with
query params, for example `/route/1?q=foo`, would incorrectly include
the query params in `id`: `{id: '1?q=foo', q: 'foo'}`.

This commit fixes it, so that the extracted `params` will now be:
`{id: '1', q: 'foo'}`.

Fixes #14173

Closes #16589",False
6c224a2a6059d4a089ef396c880c4a6369f0be59,2018-06-18 21:14:46,George Kalpakas,"fix(ngAria): do not scroll when pressing spacebar on custom buttons

By default, pressing spacebar causes the browser to scroll down.
However, when a native button is focused, the button is clicked instead.

`ngAria`'s `ngClick` directive, sets elements up to behave like buttons.
For example, it adds `role=""button""` and forwards `ENTER` and `SPACEBAR`
keypresses to the `click` handler (to emulate the behavior of native
buttons).

Yet, pressing spacebar on such an element, still invokes the default
browser behavior of scrolling down.

This commit fixes this, by calling `preventDefault()` on the keyboard
event, thus preventing the default scrolling behavior and making custom
buttons behave closer to native ones.

Closes #14665

Closes #16604",False
af1e6a38b7013d3cb5815d7e6549499ff2293812,2018-06-18 21:14:27,George Kalpakas,refactor(ngAria): clean up `accessible actions` tests,False
5b11145473da01c69b50cc08f1202b5b6be904b1,2018-06-18 19:32:19,Martin Staffa,"feat(form.FormController): add $getControls() 

Closes #16601
Fixes #14749
Closes #14517
Closes #13202",False
d7d64cc363d86e486bb9e9db13f0e1374af3738e,2018-06-14 21:36:00,Martin Staffa,"docs(downloading.ngdoc): remove link to Google CDN overview page

AngularJS is no longer listed on the CDN page, because the available versions
were almost always out of date due to the need to manually update the list",False
998d8b4b55656f5a0c8e36fa1ddded0dafc0e338,2018-06-14 15:18:59,Pete Bacon Darwin,chore(code.angularjs.org): fix directory list paging,False
2472d621d7d4a09a53704f4809aaa3b594ea8e04,2018-06-14 13:07:22,Pete Bacon Darwin,chore(code.angularjs.org): update firebase libraries,False
83f7980e2f2e9ea6a373a5e1e301edfc90c8daa8,2018-06-13 03:15:17,Martin Staffa,"feat(ngModelOptions): add `timeStripZeroSeconds` and `timeSecondsFormat`

Closes #10721
Closes #16510
Closes #16584",False
c9a92fcad52477f93ddbee5091e76d8763cde0bd,2018-06-12 19:03:59,George Kalpakas,docs(CHANGELOG): add release notes for 1.7.2,False
f7b2fffa5116247c74e770ac124474ae2b7baf19,2018-06-12 17:10:32,George Kalpakas,"chore(doc-gen): error on unmatched links

Closes #16597",False
9a065c0fa921e452678ed669c634b113089a2c9c,2018-06-12 17:10:21,George Kalpakas,docs(*): fix dangling or ambiguous links,False
42e622b751d1ad1520b824473f9ad31e7efb75b3,2018-06-11 19:28:54,George Kalpakas,"revert: refactor($compile): remove preAssignBindingsEnabled leftovers

This reverts commit 8e104ee508418bc2ebb65e5b4ac73d22285cc224.

This internal clean-up turned out to break popular UI libraries (e.g.
`ngMaterial`, `ui-bootstrap`) and cause pain to developers.

Fixes #16594

Closes #16595",False
ad0ba99d8a231da9796eb94adcfa670665ea0eed,2018-06-08 19:39:30,George Kalpakas,docs(CHANGELOG): fix links to issues/PRs,False
05170bf3716359f81b32bf5113330dd6240a0cf7,2018-06-08 18:55:08,George Kalpakas,docs(CHANGELOG): add release notes for 1.7.1,False
db584f7835b995a20fe1f5f68f3344ceb0b99db2,2018-06-08 13:41:55,Georgios Kalpakas,"feat(ngAria): add support for ignoring a specific element

Fixes #14602
Fixes #14672

Closes #14833",False
83d1229c87d41954a5446073fbae1c779439f262,2018-06-08 13:32:49,Georgios Kalpakas,refactor(ngAria): move test helpers inside of closure,False
60069e67aeb0352a7849ebfef15a6183bc3b7235,2018-06-08 13:28:53,Georgios Kalpakas,"feat($route): add support for the `reloadOnUrl` configuration option

Enables users to specify that a particular route should not be reloaded after a
URL change (including a change in `$location.path()`), if the new URL maps to
the same route.
The default behavior is still to always load the matched route when any part of
the URL changes.

Related to #1699, #5860, #14999 (potentially closing the first two).

Fixes #7925

Closes #15002",False
84d80be2b4624b9fcfac81204ff047eba108d804,2018-06-06 21:10:55,Martin Staffa,"feat(ngMessages): add support for default message

add support for showing default message when a truthy value is not matched by an ng-message directive.

Closes #12008
Closes #12213
Closes #16587",False
03a4782a35e036a6b1b4fc8137fae58f73f3bb6f,2018-06-06 18:33:09,Martin Staffa,"feat(errorHandlingConfig): add option to exclude error params from url

Specific errors, such as those during nested module loading, can create very long
error urls because the error message includes the error stack. These urls create visual
clutter in the browser console, are often not clickable, and may be rejected
by the docs page because they are simply too long.

We've already made improvements to the error display in #16283, which excludes
the error url from error parameters, which results in cleaner error messages.

Further, modern browsers restrict console message length intelligently.

This option can still be useful for older browsers like Internet Explorer, or
in general to reduce visual clutter in the console.

Closes #14744
Closes #15707
Closes #16283
Closes #16299 
Closes #16591",False
0ed36430da8216194e6e228f9e9b5d0a5106bf2b,2018-06-06 01:52:25,Jakub Freisler,"docs(ngAnimate): add ""animating between value changes"" section

Add a section which covers use case when users need to animate upon
a variable's value changes (not between two states).

Refers #16561

Closes #16582",False
aa6adc77aef68f555928a385ecd1e0049cd9b6d9,2018-06-05 18:30:12,Martin Staffa,"feat(ngRef): add directive to publish controller, or element into scope

Thanks to @drpicox for the original implementation: PR #14080 

Closes #16511",False
a7de87d3e8600ce1cdcb77f83a558fcfd2b8aef8,2018-06-04 17:01:06,Georgii Dolzhykov,"docs($httpBackend): headers param of expect* can be function

Closes #16588",False
1bb9aa05236a9c8649e7cbe48d25cf3be507984a,2018-06-04 13:43:43,Christian Oliff,docs(.editorconfig): change link to use https,False
586b6e8b73804e7ab1f80d6a628ec18cf8510719,2018-06-02 14:18:20,Jakub Freisler,"docs(ngAnimate): refactor of ngAnimate docs

- Synced ""animation aware"" directives tables in API docs and ""Animation""
  guide.
- Sorted tables alphabetically.
- Added info about `ngAnimateSwap` directive.

References #16561

Closes #16581",False
459997b482ef9597ce3505d16f7ebc3b9a14b9cb,2018-05-31 13:21:53,George Kalpakas,"fix(ngModel): do not throw if view value changes on destroyed scope

This could for example happen if updating the value is debounced (either
by asynchronously calling `$setViewValue()` or via `ngModelOptions`).

Fixes #16583

Closes #16585",False
8e104ee508418bc2ebb65e5b4ac73d22285cc224,2018-05-31 01:31:52,Georgii Dolzhykov,"refactor($compile): remove preAssignBindingsEnabled leftovers

Now that we don't need to support `preAssignBindingsEnabled` (removed in #15782),
complexity introduced in `$controller` by #7645 can be removed.

One difference with the previous implementation is that all non-ES2015-class controller instances
were available on the element before calling their constructors. Now it depends on the relative
order of controllers. Controller constructors shouldn't be used to access other controllers
(e.g. via `$element.controller(directiveName)`). The recommended way is to use the `require`
property of the directive definition object and the life cycle hooks `$onChanges` or `$onInit`.

See
https://docs.angularjs.org/api/ng/service/$compile#-require-
https://docs.angularjs.org/api/ng/service/$compile#life-cycle-hooks

Closes #16580",False
78b9f61366faa1fd4460412771a65f8f01406ed0,2018-05-26 19:41:09,George Kalpakas,"fix($compile): support transcluding multi-element directives 

Previously, transcluding multi-element directives (e.g. `foo-start`/`foo-end`)
was not supported on elements with multi-slot transclusion (a `uterdir` error
was thrown).
This commit fixes it by putting the transcluded nodes into a DocumentFragment,
where they can be traversed via `.nextSibling`.

Fixes #15554
Closes #15555",False
b9f19ad0d4907a1b33e1557f713b2351944f5ba9,2018-05-26 19:35:51,Martin Staffa,"docs(ngMockE2E): add docs for $httpBackend.matchLatestDefinitionEnabled()

Closes #16577",False
0b1adbb2e7bd47845aab92fd77d02c8e37cba091,2018-05-26 00:47:55,Martin Staffa,chore: try ios 11.2,False
6a1d7dd7dce767b78411528de318e419a16769b1,2018-05-25 23:48:30,Martin Staffa,chore(saucelabs): remove platform for ios11,False
52620390966d6b796d36a8b294b7e90e5276b61e,2018-05-24 15:29:30,George Kalpakas,"refactor(ngModelOptions): fix `ng-closure-runner` warning

Without this fix `grunt minall` emits the following warning:
> WARNING - Parse error. Non-JSDoc comment has annotations.
> Did you mean to start it with '/**'?

Closes #16575",False
96c4cb6694d6775ef4892ed39556b7927b0897a7,2018-05-24 03:06:48,Martin Staffa,chore: set ios 11 in saucelabs to 11.3,False
9fe596422fbb83ffbef0ece8c23d445ff0070355,2018-05-24 02:12:14,Martin Staffa,chore: add platform to ios saucelabs,False
e22c5d3dba67fb4e4de3b687a9ec285f3ee12b83,2018-05-23 23:50:29,Pete Bacon Darwin,chore(package.json): update dist-tag for master branch,False
62660be328efb890ec8584311ac0346829b9577a,2018-05-22 16:40:43,Martin Staffa,"docs(input[number]): note issue with large number and step validation

Closes #16486 
Closes #16573",False
773f39c9345479f5f8b6321236ce6ad96f77aa92,2018-05-21 18:29:22,Martin Staffa,"feat(ngMock, ngMockE2E): add option to match latest definition for $httpBackend request

Closes #16251
Closes #11637
Closes #16560",False
7d121accdf69d9de8f970654ca7472f23b176ebf,2018-05-21 14:49:44,Pete Bacon Darwin,chore(package.json): update docs app to use latest version of AngularJS,False
10a229ce1befdeaf6295d1635dc11391c252a91a,2018-05-17 22:32:04,Mohamed amr,"feat(ngCookies): support samesite option

Closes  #16543 
Closes  #16544",False
f9d1ca20c38f065f15769fbe23aee5314cb58bd4,2018-05-17 19:00:39,Jason Bedard,"feat($compile): add one-way collection bindings

Closes #14039
Closes #16553
Closes  #15874",False
f6e189dde07b8693639fc367b7c7a5a0186fba76,2018-05-17 01:20:20,George Kalpakas,"refactor(ngAnimateSwap): simplify scope creation add tests regarding creating/removing scopes

Closes #16565",False
c0b01d91230ebebc4c7b549f4f46e9ab02cd40a8,2018-05-17 01:19:44,George Kalpakas,refactor(ngAnimateSwap): remove usused dependency,False
45879a8c5a2222f88bcd1c0fcc0acabbddb1693f,2018-05-11 14:01:53,Martin Staffa,docs(CHANGELOG.md): update date for 1.7.0,False
fe600c03da9f62b071e1b4d426c288ced4869c30,2018-05-10 02:00:41,Martin Staffa,docs(CHANGELOG.md): add changes for 1.7.0,False
02c04690da16a9bef55694f5db0b8368dc0125c9,2018-05-10 01:03:23,Daniel Herman,"fix($rootScope): don't allow explicit digest calls to affect $evalAsync

Fixes #15127

Closes #15494",False
c3d5cc50cc929b06a22eea3dff699b28de6e798e,2018-05-10 00:59:10,Jason Bedard,"refactor($compile): remove workaround for chrome bug fixed in v50

Closes #16554",False
6f85b3b6997427c2df5fb0b60a20780653dee8d6,2018-05-09 23:10:07,Martin Staffa,"chore(package.json): change distTag to ""latest""",False
70b801f3269738290e8edb2cd1326da7920d11f9,2018-05-07 21:40:16,Martin Staffa,"test(Angular): remove special case for Edge 

Edge 17 supports this behavior.

Closes #16558",False
3cf4eed6b58c4b09a44d59cba68f3d6a7283a2a4,2018-05-06 23:04:53,Martin Staffa,"test($sanitize): exclude elclob test in Edge 17 (#16555)

We don't exclude Edge completely to know if the bug has been fixed
in the next version",False
376804676e1cfab32aeab34ebc88f7bbe21b7634,2018-05-05 16:06:47,George Kalpakas,"docs(migration.ngdoc): add missing breaking changes from #16476

Closes #16557",False
e3cb64b9e4aab003e97b8aec4df3a8c84e7162af,2018-05-05 15:41:07,George Kalpakas,"docs(CHANGELOG.md): add missing breaking changes from #16476

Closes #16556",False
fb2d3fa15b66df836026a10433c8b27d65c6c675,2018-05-04 02:32:29,Oscar Busk,"docs(guide/Components): add link to documentation for component method

Closes #16548",False
0517799a050a4532e95a7d21423a449b0b49bcd3,2018-05-04 02:29:41,Oscar Busk,"docs(angular.Module): improved documentation for component method

Copy improved documentation for component() method from $compileProvider
and add missing object syntax.

Closes #16547",False
627180fb71b92048d5b9ca2606b9eff1fd99387e,2018-04-27 21:21:58,George Kalpakas,"fix(input[date]): correctly parse 2-digit years

When parsing a date string value, AngularJS uses `new Date(year, ...)`
to create a Date object and assign it to the model. In the constructor,
2-digit years map to 1900-1999, so the created Date object has the wrong
value for year.
This commit fixes it, by explicitly using `setFullYear()` to set the
year to the correct value, when necessary.

Fixes #16537

Closes #16539",False
841feb0a05f0b716d0628c2341820893bda5f929,2018-04-19 13:37:41,Martin Staffa,"docs(guide/migration): add notes on 1.6 to 1.7 migration

Closes #16474",False
b85c70a9584a636b31fba0d5d3c8136fbf73a125,2018-04-19 13:37:41,Martin Staffa,"docs(CHANGELOG.md): add changes for 1.7.0-rc.0

Closes #16439
Closes #16514",False
b2ed68d723084cd36a25c8d2b9ec94f465c50dfb,2018-04-17 22:04:13,Martin Staffa,docs(CHANGELOG.md): update date for 1.6.10,False
5b7e4b43942da932d4377e8af0df5b2fc86efa61,2018-04-13 13:13:38,Michał Gołębiowski-Owczarek,"chore(*): remove manualLowercase & manualUppercase functions

The `manualLowercase` & `manualUppercase` functions were inspired by Google Caja
code which worked around Java issues where problems with `toLowerCase`
working differently in Turkish locale are well known[1]. In JavaScript
`String#toLowerCase` is defined in the ECMAScript spec and all implementations
are required to lowercase I in the same way, regardless of the current locale.
Differences may (and do) happen only in `String#toLocaleLowerCase`.

The mirroring of the Java workarounds in Caja was needed due to an old Rhino bug.
Rhino is a pre-Nashorn JavaScript interpreter written in Java and it used to
delegate `String.prototype.toLowerCase` to `java.lang.String.toLowerCase`. This
has since been long fixed.

Other libraries doing string normalization, like jQuery or DOMPurify don't
apply special lowercasing logic in a Turkish environment.

Therefore, the `manualLowercase` & `manualUppercase` logic is dead code in
AngularJS and can be removed.

Also, the `manualLowercase` & `manualUppercase` functions are incomplete; they
only lowercase ASCII characters which is different to native
`String#toLowerCase`. Since those functions are used in many places in the
library, they would break a lot of code. For example, the lowercase filter would
not lowercase Ω to ω but leave it as Ω.

[1] https://garygregory.wordpress.com/2015/11/03/java-lowercase-conversion-turkey/

Closes #15890
Ref #11387",False
77f26bddf79d812a8ac347f591896f197c8a3f08,2018-04-12 22:09:35,Martin Staffa,docs(CHANGELOG.md): add changes for 1.6.10,False
c8c3de490f0e91b196682514ab57e26e747db5d8,2018-04-09 13:50:50,Martin Staffa,"docs($compile): add known issues with replace:true 

Closes #16523

Related #2573
Related #5695
Related #9837
Related #10612",False
3a2aea78adccd76b0966f253bcb3981a13dcd5e1,2018-04-06 20:10:14,Martin Staffa,"fix(input): allow overriding timezone for date input types

This commit also fixes a bug where part of the Date object
was re-used even after the input was emptied.

Fixes #16181
Closes #13382
Closes #16336",False
b7bb797e5c7bdc93f2ffca39baf6e112e6dddbe2,2018-04-06 15:23:32,Mohamed amr,"fix(input): take timezone into account when validating minimum and maximum date types

Closes #16342
Closes #16390",False
059d4f61181c7a43fc38fa4020c0c828da5aabad,2018-04-04 23:34:22,George Kalpakas,"refactor(urlResolve): return already parsed URLs unchanged

Closes #14890",False
1e90d030771b68d55dffd56898a380f903712b66,2018-04-04 23:34:20,Georgios Kalpakas,"feat($http): support sending XSRF token to whitelisted origins

Normally, the XSRF token will not be set for cross-origin requests.
With this commit, it is possible to whitelist additional origins, so that requests to these origins
will include the XSRF token header.

Fixes #7862",False
b7d396b8b6e8f27a1f4556d58fc903321e8d532a,2018-04-04 01:19:52,Michał Gołębiowski-Owczarek,"fix(jqLite): make removeData() not remove event handlers

This change aligns jqLite with jQuery.

Fixes #15869
Closes #16512

BREAKING CHANGE:

Before this commit `removeData()` invoked on an element removed its event
handlers as well. If you want to trigger a full cleanup of an element, change:

```js
elem.removeData();
```

to:

```js
angular.element.cleanData(elem);
```

In most cases, though, cleaning up after an element is supposed to be done
only when it's removed from the DOM as well; in such cases the following:

```js
elem.remove();
```

will remove event handlers as well.",False
71d2c147a858d65dcaf0365e67b92fcc4335f4cf,2018-04-04 01:04:32,Jason Bedard,"test($parse): add tests for watching one-time array/object literals

Closes #16477",False
4492db3077b94edce55d2461c68b065f71c94cb4,2018-04-04 00:55:52,Jason Bedard,"test($rootScope): add tests clarifying $watchGroup oldValues behavior

Closes #16024 
Closes #16494
See also #16514",False
09a638559a29ad34463d2a645195ff2e2fab066c,2018-04-04 00:40:12,Michał Gołębiowski-Owczarek,"docs(jqLite): document that append doesn't work well with a multi-node object

Contrary to jQuery jqLite's append doesn't clone elements so will not work
correctly when invoked on a jqLite object containing more than one DOM node.

Refs #11446
Closes #16517",False
a8dedf7a015e5a3c2b74e66225a43e820a58518c,2018-04-04 00:28:00,Michał Gołębiowski-Owczarek,"fix(jqLite): use XHTML-compliant HTML as input for jqLite

Fixes #6917
Closes #16518",False
b0815a702ef6cfee4e106d7b7bdbfd50240815e5,2018-03-28 18:13:45,Michał Gołębiowski-Owczarek,"chore(*): stop testing on Edge 15 due to its instability

Edge 15 disconnects from Karma frequently causing extreme build instability.
We are testing on Edge 16 & Edge 17 should be released soon anyway.

Closes #16516",False
feee36c8c9e17d47e044c085012128108ce36b76,2018-03-28 16:50:42,Michał Gołębiowski-Owczarek,"tests(ngMock): remove a broken jqLite cache clearing (#16515)

This commit removes the resetting of `angular.element.cache` in some tests;
this was desynchronizing jqLite.cache & the local jqCache variable and since
some parts of the code use one of them and some the other one, it was breaking
JQLite._data. `angular.element.cache` doesn't even exist when jQuery 2+ is used.

Closes #16515
Refs #16512",False
983e27b628fd1eab653e2b3966d90a270f27cc93,2018-03-22 15:07:15,Martin Staffa,"fix($compile): throw error in $onChanges immediately

This brings it in line with how we throw errors in a digest cycle, 
and also avoids throwing an array.

Closes #15578 
Closes #16492",False
c68b31cb2c0d2f30471ab03bb6193638a3aed834,2018-03-19 22:32:52,Giuseppe Scoppino,"docs(guide/Internet Explorer Compatibility): include warnings for usage of 'disabled' attribute

* docs(guide/Internet Explorer Compatibility): Mention 'disabled' attribute

Setting the 'disabled' attribute on an element that has descendant elements has unexpected behavior in Internet Explorer 11.

* Input elements that are descendants have the text content of the 'placeholder' attribute inserted as the value (and it is not removed when typing in the field).
* Select elements that are descendants are disabled.

To avoid this issue, it is important to not set `disabled` or `ng-disabled` on an element that has descendant form elements. Normally these should only be used on actual form controls so the issue would not manifest.

The issue can also appear if a directive/component is named 'disabled' or takes an attribute named 'disabled' as an input/output attribute, so avoid these.

Closes  #16490
Related #15700",False
4b2de4bcbf1e496aefb5095cc574b3c1d49865ad,2018-03-19 22:27:44,Martin Staffa,"feat(minErr): strip error url from error parameters

Related https://github.com/angular/angular.js/issues/14744",False
786cb30c618f2e5efcc0426377020ca922984ddf,2018-03-19 22:27:44,Martin Staffa,fix(minErr): update url to https,False
c0bc1df3f73d03455175ca7e2002c026a0b64b4c,2018-03-16 21:18:12,Martin Staffa,"chore(travis): update iOs test browsers

Closes #16493",False
98e0e047b0f705005b256c70feb4e6368ff3a591,2018-03-15 03:05:34,Martin Staffa,"docs(ngShow/ngHide): add note about flicker when toggling elements

Related to https://github.com/angular/angular.js/issues/14015

Closes #16489",False
a8bef95127775d83d80daa4617c33227c4b443d4,2018-03-14 00:50:10,George Kalpakas,"fix($interval): throw when trying to cancel non-$interval promise

Previously, calling `$interval.cancel()` with a promise that was not
generated by a call to `$interval()` would do nothing. This could, for
example, happen when calling `.then()`/`.catch()` on the returned
promise, which creates a new promise, and passing that to
`$interval.cancel()`.
With this commit, `$interval.cancel()` will throw an error if called
with a non-$interval promise, thus surfacing errors that would otherwise
go unnoticed.

Related to #16424.

BREAKING CHNAGE:

`$interval.cancel()` will throw an error if called with a promise that
was not generated by `$interval()`. Previously, it would silently do
nothing.

Before:
```js
var promise = $interval(doSomething, 1000, 5).then(doSomethingElse);
$interval.cancel(promise);  // No error; interval NOT canceled.
```

After:
```js
var promise = $interval(doSomething, 1000, 5).then(doSomethingElse);
$interval.cancel(promise);  // Throws error.
```

Correct usage:
```js
var promise = $interval(doSomething, 1000, 5);
var newPromise = promise.then(doSomethingElse);
$interval.cancel(promise);  // Interval canceled.
```

Closes #16476",False
3365256502344970f86355d3ace1cb4251ae9828,2018-03-14 00:49:45,George Kalpakas,"fix($timeout): throw when trying to cancel non-$timeout promise

Previously, calling `$timeout.cancel()` with a promise that was not
generated by a call to `$timeout()` would do nothing. This could, for
example, happen when calling `.then()`/`.catch()` on the returned
promise, which creates a new promise, and passing that to
`$timeout.cancel()`.
With this commit, `$timeout.cancel()` will throw an error if called with
a non-$timeout promise, thus surfacing errors that would otherwise go
unnoticed.

Fixes #16424

BREAKING CHNAGE:

`$timeout.cancel()` will throw an error if called with a promise that
was not generated by `$timeout()`. Previously, it would silently do
nothing.

Before:
```js
var promise = $timeout(doSomething, 1000).then(doSomethingElse);
$timeout.cancel(promise);  // No error; timeout NOT canceled.
```

After:
```js
var promise = $timeout(doSomething, 1000).then(doSomethingElse);
$timeout.cancel(promise);  // Throws error.
```

Correct usage:
```js
var promise = $timeout(doSomething, 1000);
var newPromise = promise.then(doSomethingElse);
$timeout.cancel(promise);  // Timeout canceled.
```",False
de94dd407906acece524e83100993484538e9fd9,2018-03-14 00:49:44,George Kalpakas,style($interval): fix indentation,False
a2a8d7e791636b4d452609c08b165768e2444bbd,2018-03-14 00:49:44,George Kalpakas,style($timeout): fix indentation,False
73c6467f1468353215dc689c019ed83aa4993c77,2018-03-13 14:01:15,Michał Gołębiowski-Owczarek,"fix($cookies): remove the deprecated $cookieStore factory

Closes #16465

BREAKING CHANGE:

The $cookieStore has been removed. Migrate to the $cookies service. Note that
for object values you need to use the `putObject` & `getObject` methods as
`get`/`put` will not correctly save/retrieve them.

Before:
```js
$cookieStore.put('name', {key: 'value'});
$cookieStore.get('name'); // {key: 'value'}
$cookieStore.remove('name');
```

After:
```js
$cookies.putObject('name', {key: 'value'});
$cookies.getObject('name'); // {key: 'value'}
$cookies.remove('name');
```",False
6e55b890de282ed5ad8984b9494eea2b3e4929c5,2018-03-12 20:00:31,George Kalpakas,"docs(input[radio]): explain what happens with same name on multiple inputs

Closes #15009

Closes #16478",False
64c23e4d9c527da42c2de3c7b46fcaa378d2a4a0,2018-03-07 15:10:02,Martin Staffa,docs($http): move response object documentation into Usage section,False
7e2e235cf25389a59ea957631ff07c6cc8a3ad32,2018-03-07 15:10:02,Martin Staffa,"fix($http): set correct xhrStatus in response when using 'timeout'

This correctly sets ""timeout"" if a request fails because the timeout
(numerical or $timeout) is exceeded,
and ""abort"" if the request is aborted by resolving a promise that was passed in.",False
4f4ad3cad43aa4ed9a90c7275e26c8abc1bce0ab,2018-03-01 17:22:12,Martin Staffa,"chore(docs.angularjs.org): add csp headers for csp example

Fixes #16270",False
a37f89f8646df3ea64aee32e63055b9722236753,2018-03-01 17:22:12,Martin Staffa,"chore(docs-app): add dynamic 404 behavior

Adapted from https://github.com/angular/angular/commit/88045a50506adfe32c2f7a213c8e95f46d1e40e1,
https://github.com/angular/angular/commit/c3fb820473d64036ef0dd3d4c004cc7fbc67be75,
and https://github.com/angular/angular/commit/5a624fa1be530a1b3479a4cc7f96e5a20a3d64fb.",False
02fb980de67fc9158920ec4ab0969d544ac96c1a,2018-03-01 17:22:12,Martin Staffa,"chore(docs.angularjs.org): only deploy production index.html as entry file

Previously, we rewrote index.html to index-production.html, but Firebase ignored
this, probably because an exact file match always takes priority. This lead
to the problem thatthe root - angularjs.org - didn't include the angular.js source
files from the CDN",False
77917e34c93668e9936768bed681696d78028748,2018-03-01 17:22:12,Martin Staffa,"chore(docs.angularjs.org): allow crawling of examples, don't deploy e2e test files",False
290a5f23395eeb669aff3f7957300833e46646d8,2018-02-27 22:11:13,Martin Staffa,docs(tutorial): fix headlines,False
719e66b38bd75a66b01df5b4cd90bbbac2bc069d,2018-02-26 19:30:42,Frederik Prijck,"docs(README): fix incorrect version-support-status link (#16473)

Closes #16472",False
c0adcc3a4b561260d0f1ff6b834ca940bf1971a9,2018-02-21 15:16:22,George Kalpakas,"refactor($compile): avoid catastrophic backtracking when parsing bindings

This isn't expected to have any actual impact, since AngularJS is only
intended to be used in the browser (not the server) and for this RegExp
to be exploited by malicious user code the developer would have to have
to give the user rights to execute arbitrary JavaScript code anyway.
Fixing as a general good practice and to avoid encouraging use of a
similar RegExp in other environments where it might actually matter.

Closes #16464",False
33b251d55e48da867cb2998e6d87ef33c3fec416,2018-02-21 14:03:28,Pete Bacon Darwin,"docs(misc): add version-support-status page (#16460)

Closes #16058
Closes #16458",False
ea0585773bb93fd891576e2271254a17e15f1ddd,2018-02-20 19:25:15,George Kalpakas,"fix($resource): fix interceptors and success/error callbacks

Previously, action-specific interceptors and `success`/`error` callbacks
were executed in inconsistent relative orders and in a way that did not
meet the general expectation for interceptor behavior (e.g. ability to
recover from errors, performing asynchronous operations, etc).

This commit fixes the behavior to make it more consistent and expected.
The main differences are that `success`/`error` callbacks will now be
run _after_ `response`/`responseError` interceptors complete (even if
interceptors return a promise) and the correct callback will be called
based on the result of the interceptor (e.g. if the `responseError`
interceptor recovers from an error, the `success` callback will be
called).
See also https://github.com/angular/angular.js/issues/9334#issuecomment-364650642.

This commit also replaces the use of `success`/`error` callbacks in the
docs with using the returned promise.

Fixes #6731
Fixes #9334
Closes #6865

Closes #16446

BREAKING CHANGE:

If you are not using `success` or `error` callbacks with `$resource`,
your app should not be affected by this change.

If you are using `success` or `error` callbacks (with or without
response interceptors), one (subtle) difference is that throwing an
error inside the callbacks will not propagate to the returned
`$promise`. Therefore, you should try to use the promises whenever
possible. E.g.:

```js
// Avoid
User.query(function onSuccess(users) { throw new Error(); }).
  $promise.
  catch(function onError() { /* Will not be called. */ });

// Prefer
User.query().
  $promise.
  then(function onSuccess(users) { throw new Error(); }).
  catch(function onError() { /* Will be called. */ });
```

Finally, if you are using `success` or `error` callbacks with response
interceptors, the callbacks will now always run _after_ the interceptors
(and wait for them to resolve in case they return a promise).
Previously, the `error` callback was called before the `responseError`
interceptor and the `success` callback was synchronously called after
the `response` interceptor. E.g.:

```js
var User = $resource('/api/users/:id', {id: '@id'}, {
  get: {
    method: 'get',
    interceptor: {
      response: function(response) {
        console.log('responseInterceptor-1');
        return $timeout(1000).then(function() {
          console.log('responseInterceptor-2');
          return response.resource;
        });
      },
      responseError: function(response) {
        console.log('responseErrorInterceptor-1');
        return $timeout(1000).then(function() {
          console.log('responseErrorInterceptor-2');
          return $q.reject('Ooops!');
        });
      }
    }
  }
});
var onSuccess = function(value) { console.log('successCallback', value); };
var onError = function(error) { console.log('errorCallback', error); };

// Assuming the following call is successful...
User.get({id: 1}, onSuccess, onError);
  // Old behavior:
  //   responseInterceptor-1
  //   successCallback, {/* Promise object */}
  //   responseInterceptor-2
  // New behavior:
  //   responseInterceptor-1
  //   responseInterceptor-2
  //   successCallback, {/* User object */}

// Assuming the following call returns an error...
User.get({id: 2}, onSuccess, onError);
  // Old behavior:
  //   errorCallback, {/* Response object */}
  //   responseErrorInterceptor-1
  //   responseErrorInterceptor-2
  // New behavior:
  //   responseErrorInterceptor-1
  //   responseErrorInterceptor-2
  //   errorCallback, Ooops!
```",False
8b399545a5098cb2576594a26a03cd7268c55fb6,2018-02-20 18:34:25,Pete Bacon Darwin,docs($route): fix typo in error message,False
b87c6a6d4d3d73fbc4d8aeecca58503d5d958d2c,2018-02-20 18:34:25,Pete Bacon Darwin,test(*): fix references to `tpload` minerr in tests,False
c617d6dceee5b000bfceda44ced22fc16b48b18b,2018-02-20 15:55:33,Pete Bacon Darwin,"fix($templateRequest): give tpload error the correct namespace

BREAKING CHANGE

Previously the `tpload` error was namespaced to `$compile`. If you have
code that matches errors of the form `[$compile:tpload]` it will no
longer run. You should change the code to match
`[$templateRequest:tpload]`.",False
56b6ba8e0b891b88687b826a9c4b2100bfd4901a,2018-02-20 01:07:26,Pete Bacon Darwin,docs($route): add missing error document,False
f1c164c92f880b41fed38246baa0c1d4d914dd61,2018-02-20 01:01:43,Pete Bacon Darwin,docs($parse): add missing error documents,False
3eabaab009c9b8d86759374a3b66a6b7a71dd5aa,2018-02-15 19:07:24,Martin Staffa,"chore(docs.angularjs.org): allow crawling but not indexing of partials/

The sitemap.xml might also prevent the indexing, as the partials are not
listed.

Related to #16432 
Closes #16457",False
9645a08b61bf4e0b52f3cde9567e4a12524ea488,2018-02-15 19:06:50,Martin Staffa,"chore(docs.angularjs.org): allow robots access to js files

Related to #16432",False
04ee1e781b931725cded2e40ce9bdc2674186b11,2018-02-15 18:58:47,Michał Gołębiowski-Owczarek,"docs(*): add CODE_OF_CONDUCT.md

Closes #16456",False
a126b346ff0f99562231a3721868d23a7c48495e,2018-02-13 05:51:22,George Kalpakas,chore(travis): fix `ROOT_DIR` path when `build.sh` is sourced,False
ba140dbff9dddcdad239241fbe0240a25b29d188,2018-02-13 05:06:22,George Kalpakas,"chore(docs.angularjs.org): install firebase dependencies before deploying

Firebase is trying to execute our functions code locally in order to
parse the triggers. Install npm dependencies to avoid errors like:

```
Error: Error parsing triggers: Cannot find module 'firebase-functions'
```

Closes #16453",False
fb479188f5312310094ee8f6c7366000181d6130,2018-02-13 02:48:52,George Kalpakas,"chore(docs.angular.js): do not break when deploying

Follow-up to #16451.

Closes #16452",False
75bf199421011466b799b2eeec5223c0a9143516,2018-02-12 19:04:06,Martin Staffa,"chore(docs.angularjs.org): serve snapshots for googlebot

This commit restores serving the plain partials (content) when a docs
page is accessed with ?_escaped_fragment_=.
The Google Ajax Crawler accesses these urls when the page has
`<meta type=""fragment"" content=""!"">` is set.

During the migration to Firebase, this was lost, which resulted in Google
dropping the docs almost completely from the index.

We are using a Firebase cloud function to serve the partials. Since
we cannot access the static hosted files from the function, we have to
deploy them as part of the function directory instead, from which they
can be read.

Related to #16432
Related to #16417",False
9196c80c3394d0afcfc4f3ab0ec881d501190fe3,2018-02-12 19:04:06,Martin Staffa,chore(deploy): rename deploy folders,False
e1e2100e66acf79bafed7e07fbbdf7d865b2b035,2018-02-12 19:04:06,Martin Staffa,chore(code.angularjs.org): don't gzip compressed image files,False
9f1793fd2dc92225991f9db5ec661af6f86206ca,2018-02-12 19:04:06,Martin Staffa,chore(eslint): allow ES6 for node scripts,False
a7a9688962039fb5af5e073faddbc239a9479e9b,2018-02-12 00:52:15,George Kalpakas,"fix(docs): fix `@media` breakpoints for small/extra small devices

Previously, our custom styles used `@media` breakpoints for
small/extra small devices that were off-by-one from
[Bootstrap breakpoints](https://getbootstrap.com/docs/3.3/css/#responsive-utilities-classes)
(767px vs 768px). This caused the site to not be displayed correctly on
these exact sizes, which affected for example all iPad devices (whose
screens are exactly 768px wide).

This commit fixes it by making our breakpoints match those of Bootstrap.

Fixes #16448

Closes #16449",False
32b1a0c5807a6b3148543676b920543e32162c69,2018-02-09 05:01:48,Martin Staffa,"chore(docs.angularjs.org): actually fix deployment

When a file is symlinked, relative paths obviously aren't correct anymore.
This error was masked because Travis didn't fail the job when Firebase
couldn't find the public folder.
To fix, we copy the file and adjust the folder path",False
9a0f1abddac5670a0d6efa7689f04d594bb9f274,2018-02-09 04:20:45,Martin Staffa,"chore(docs.angularjs.org): deploy sitemap.xml

Closes #16445",False
c484213180470c2a8044eeb09dfdc5ef11099bc8,2018-02-09 04:20:07,Martin Staffa,test(input): add test for IE composition bug,False
2789ccbcf9666b64211c08b188b168175109f563,2018-02-09 04:20:07,Jae Ik Lee,"fix(input): fix composition mode in IE for Korean input

Fixes #6656
Closes #16273",False
3e7a87d7d1be2afea16d0863040fe51e26326d6f,2018-02-09 04:20:07,Martin Staffa,fix(browserTrigger): support CompositionEvent,False
3ecb00115a95bce3add50680b452436fbf213d8c,2018-02-08 23:26:59,Martin Staffa,chore(docs.angularjs.org): serve xml files (sitemap),False
e4e2024d1c0860b142a915fab3f7beff975aa048,2018-02-08 23:24:25,Martin Staffa,"chore(code.angularjs.org): increase the cache duration

This is already set, but wasn't checked in",False
02f4ca4887f337e87ce668f657c32f49e18beec8,2018-02-07 01:25:29,frederikprijck,"docs(ngClass): add docs regarding animation for `ngClassEven` and `ngClassOdd`

Previously, the documentation has no information regarding using
`ngAnimate` together with the `ngClassEven` and `ngClassOdd` directives.

This commit adds the same docs used by the `ngClass` directive to the
`ngClassEven` and `ngClassOdd` docs and adds an extra example for both
`ngClassEven` and `ngClassOdd` that showcases animations.

Closes #15654",False
8d6ac5f3178cb6ead6b3b7526c50cd1c07112097,2018-02-06 19:37:49,Maksim Ryzhikov,"feat($sanitize): support enhancing elements/attributes white-lists

Fixes #5900
Closes #16326",False
7d50b2e9eea9c7e8950beffc1e139c4e05af00f5,2018-02-05 22:22:34,Martin Staffa,"chore(docs.angularjs.org): allow robots to access js and css

Otherwise, the google bot cannot execute the JS",False
ea04dbb229ec69a7ffc954d57496f058d6ce6dcb,2018-02-05 22:22:34,Martin Staffa,"chore(code.angularjs.org): fix robots.txt

- allow all-versions-data.js in snapshot, which is used by docs.angularjs.org
- disallow access to folders like docs-0.9.2 etc which are used by early versions",False
fbe679dfbcb2108249931d44f452d09da6c98477,2018-02-05 22:22:34,Martin Staffa,chore(doc-gen): generate sitemap.xml,False
fb00991460cf69ae8bc7f1f826363d09c73c0d5e,2018-02-05 16:51:28,frederikprijck,"fix($templateRequest): always return the template that is stored in the cache

Previously, `$templateRequest` returned the raw `$http` response data on the
first request for a template and then the value from the cache for subsequent
requests.

If the value is transformed when being added to the cache (by decorating
`$templateCache.put`)  the return value of `$templateRequest` would be
inconsistent depending upon when the request is made.

This commit ensures the cached value is returned instead of the raw `$http`
response data, thus allowing the `$templateCache` service to be decorated.

Closes #16225",False
d3bffc547697c8f2059f32402c9f02092c1a8b5c,2018-02-02 18:25:13,Martin Staffa,chore(docs.angularjs.org): add robots.txt,False
b969c3e3540d05a781404beebecdd4fa4ceb2d2e,2018-02-02 18:25:11,Martin Staffa,docs(changelog): add changes for 1.6.9,False
16b82c6afe0ab916fef1d6ca78053b00bf5ada83,2018-02-02 14:32:06,Martin Staffa,"fix($animate): let cancel() reject the runner promise

Closes #14204
Closes #16373

BREAKING CHANGE:

$animate.cancel(runner) now rejects the underlying
promise and calls the catch() handler on the runner
returned by $animate functions (enter, leave, move,
addClass, removeClass, setClass, animate).
Previously it would resolve the promise as if the animation
had ended successfully.

Example:

```js
var runner = $animate.addClass('red');
runner.then(function() { console.log('success')});
runner.catch(function() { console.log('cancelled')});

runner.cancel();
```

Pre-1.7.0, this logs 'success', 1.7.0 and later it logs 'cancelled'.
To migrate, add a catch() handler to your animation runners.",False
e3ece2fad9e1e6d47b5f06815ff186d7e6f44948,2018-02-02 02:36:03,Georgii Dolzhykov,"feat(isArray): support Array subclasses in `angular.isArray()`

Closes #15533
Closes #15541

BREAKING CHANGE:

Previously, `angular.isArray()` was an alias for `Array.isArray()`.
Therefore, objects that prototypally inherit from `Array` where not
considered arrays. Now such objects are considered arrays too.

This change affects several other methods that use `angular.isArray()`
under the hood, such as `angular.copy()`, `angular.equals()`,
`angular.forEach()`, and `angular.merge()`.

This in turn affects how dirty checking treats objects that prototypally
inherit from `Array` (e.g. MobX observable arrays). AngularJS will now
be able to handle these objects better when copying or watching.",False
67f54b660038de2b4346b3e76d66a8dc8ccb1f9b,2018-02-01 15:01:32,Martin Staffa,"fix(ngTouch): deprecate the module and its contents

Closes #16427
Closes #16431",False
3fc684352815108688de411717d11239f4d789c9,2018-01-31 22:31:10,Martin Staffa,chore(code.angularjs.org): improve output of directory listing,False
1e9eadcd72dbbd5c67dae8328a63e535cfa91ff9,2018-01-31 18:42:29,Pete Bacon Darwin,"feat($sce): handle URL sanitization through the `$sce` service

Thanks to @rjamet for the original work on this feature.

This is a large patch to handle URLs with the $sce service, similarly to HTML context.

Where we previously sanitized URL attributes when setting attribute value inside the
`$compile` service, we now only apply an `$sce` context requirement and leave the
`$interpolate` service to deal with sanitization.

This commit introduces a new `$sce` context called `MEDIA_URL`, which represents
a URL used as a source for a media element that is not expected to execute code, such as
image, video, audio, etc.
The context hierarchy is setup so that a value trusted as `URL` is also trusted in the
`MEDIA_URL` context, in the same way that the a value trusted as `RESOURCE_URL` is also
trusted in the `URL` context (and transitively also the `MEDIA_URL` context).

The `$sce` service will now automatically attempt to sanitize non-trusted values that
require the `URL` or `MEDIA_URL` context:

* When calling `getTrustedMediaUrl()` a value that is not already a trusted `MEDIA_URL`
will be sanitized using the `imgSrcSanitizationWhitelist`.
* When calling `getTrustedUrl()` a value that is not already a trusted `URL` will be
sanitized using the `aHrefSanitizationWhitelist`.

This results in behaviour that closely matches the previous sanitization behaviour.

To keep rough compatibility with existing apps, we need to allow concatenation of values
that may contain trusted contexts. The following approach is taken for situations that
require a `URL` or `MEDIA_URL` secure context:

* A single trusted value is trusted, e.g. `""{{trustedUrl}}""` and will not be sanitized.
* A single non-trusted value, e.g. `""{{ 'javascript:foo' }}""`, will be handled by
  `getTrustedMediaUrl` or `getTrustedUrl)` and sanitized.
* Any concatenation of values (which may or may not be trusted) results in a
  non-trusted type that will be handled by `getTrustedMediaUrl` or `getTrustedUrl` once the
  concatenation is complete.
  E.g. `""javascript:{{safeType}}""` is a concatenation of a non-trusted and a trusted value,
  which will be sanitized as a whole after unwrapping the `safeType` value.
* An interpolation containing no expressions will still be handled by `getTrustedMediaUrl` or
  `getTrustedUrl`, whereas before this would have been short-circuited in the `$interpolate`
  service. E.g. `""some/hard/coded/url""`. This ensures that `ngHref` and similar directives
  still securely, even if the URL is hard-coded into a template or index.html (perhaps by
  server-side rendering).

BREAKING CHANGES:

If you use `attrs.$set` for URL attributes (a[href] and img[src]) there will no
longer be any automated sanitization of the value. This is in line with other
programmatic operations, such as writing to the innerHTML of an element.

If you are programmatically writing URL values to attributes from untrusted
input then you must sanitize it yourself. You could write your own sanitizer or copy
the private `$$sanitizeUri` service.

Note that values that have been passed through the `$interpolate` service within the
`URL` or `MEDIA_URL` will have already been sanitized, so you would not need to sanitize
these values again.",False
a8830d2be402764225dd1108b992965a5f8b1f4d,2018-01-28 16:54:00,Dmitriy,feat(input): add `drop` event support (#16420),False
8d9984e530873497c39acf7726d51f17d60df909,2018-01-26 16:35:46,Martin Staffa,"chore(docs-gen): generate list of versions in correct order

Closes #16419",False
1d804645f7656d592c90216a0355b4948807f6b8,2018-01-25 16:46:48,Frederik Prijck,"feat(orderBy): consider `null` and `undefined` greater than other values

Previously, `null` values where sorted using type `string` resulting in a string
comparison. `undefined` values where compared to other values by type and were
usually considered greater than other values (since their type happens to start
with a `u`), but this was coincidental.

This commit ensures that `null` and `undefined ` values are explicitly
considered greater than other values (with `undefined` > `null`) and will
effectively be put at the end of the sorted list (for ascending order sorting).

Closes #15294

Closes #16376

BREAKING CHANGE:

When using `orderBy` to sort arrays containing `null` values, the `null` values
will be considered ""greater than"" all other values, except for `undefined`.
Previously, they were sorted as strings. This will result in different (but more
intuitive) sorting order.

Before:
```js
orderByFilter(['a', undefined, 'o', null, 'z']);
//--> 'a', null, 'o', 'z', undefined
```

After:
```js
orderByFilter(['a', undefined, 'o', null, 'z']);
//--> 'a', 'o', 'z', null, undefined
```",False
40c49902b6dcd2d836f760c65289580a9593a719,2018-01-25 16:42:46,Martin Staffa,docs(*): fix headings and links,False
7300a5311c74a377db64db580e2e4ad3aa63570e,2018-01-23 15:01:31,Martin Staffa,"chore(docs.angularjs.org): fix firebase deploy

Travis looks for the firebase.json in the repo root,
but we moved each firebase project in its own sub-folder.
To fix, we create a symlink before deployment.",False
4c97df5852ffe9e1f295d9d96fca9d02aeb8758a,2018-01-19 18:27:26,Martin Staffa,"chore(code.angularjs.org): don't use trailing slashes, and don't set headers after response was sent",False
2ea1e49cd646874d3427344853c695c28a473d84,2018-01-19 18:27:25,Martin Staffa,chore(code.angularjs.org): don't gzip the zip file before uploading,False
c76b09beed3cac974a44a0b3992abefb8aa7d51b,2018-01-19 18:27:09,Martin Staffa,chore(errors.angularjs.org): add project with redirects to docs.angularjs.org,False
f9d29889c45b9d3d0fb67278721a227b7d760934,2018-01-18 18:05:16,Martin Staffa,"chore(docs.angularjs.org): move project in separate folder

Firebase projects should be in their own folder, because the firebase-tools
search for projects in the parent folder, which makes it more difficult to create
new projects.",False
50ceb232777097c63a0136f3db3e0368c8938945,2018-01-17 19:27:32,Pete Bacon Darwin,"fix(ngMessages): prevent memory leak from messages that are never attached

Closes #16389
Closes #16404
Closes #16406",False
ab386cdef2eb69199cb7444e29c8798ff1f76b5d,2018-01-17 16:33:05,Martin Staffa,"fix(ngTransclude): remove terminal: true

This was introduced in commit 2adaff083f309bd324c466edd781f3edbf0aff89,
but made obsolete in 41f3269bfbd90a8d48e62639bb43f3020617bc57.

Fixes #16411
Closes #16412",False
507185979f76a8075312b2ab3470bc199b3c3d35,2018-01-17 16:31:54,Martin Staffa,"docs(ngRepeat): improve info about tracking 

- deduplicate info between docs section and arguments
- don't draw too much attention to track by $index  ...
- ... but highlight its drawbacks
- add example to show how tracking affects collection updates
- clarify duplicates support for specific tracking expressions

Closes #16332
Closes #16334 
Closes #16397",False
a7e5e83240f9539ffa0d4b429d30440c11775e76,2018-01-17 16:30:10,Martin Staffa,"docs(*): clarify module API and dependency injection rules

Closes #16363
Closes #16395",False
3f95ae21efba54e78c6cc0445043ac3654b340c6,2018-01-17 00:19:04,Martin Staffa,"chore(code.angularjs.org): resolve gcs file stream on 'finish'

'response' is called before the data transfer is complete.",False
00b482fd8b8a5dde666e1cc6784d2bb81290ca0b,2018-01-17 00:19:04,Martin Staffa,"chore(docs.angularjs.org): copy unminified angular files

e2e tests use the unminified files even in production deployment",False
9ba3d0070d3bf22a90c17efdb6b607d077b09b87,2018-01-15 22:56:26,Deb Saunders,"docs(guide/External Resources): remove link to deprecated content

Content at URL is deprecated.

Closes #16403",False
ddbf197ad97564a17576b7910ead754e4dcd7932,2018-01-15 17:40:10,Frederik Prijck,"docs(guide/Animations): fix minor typos

Closes #16409",False
7a9b7ba9135cb9b45354caf440188b34ffc623aa,2018-01-15 17:38:24,Manuel Darveau,"docs(guide/Using $location): fix typo

Closes #16408",False
62e2ec18e65f15db4f52bb9f695a92799c58b5f1,2018-01-15 17:37:45,Martin Staffa,"chore(node): add karma launchers for Edge, IE, and Safari

That makes it easier to run the tests with these browsers locally.

Closes #16407",False
b86876c4a20412305f00e5f76e327f1982a99fa5,2018-01-11 19:04:06,Peter Bacon Darwin,"fix($sanitize): sanitize `xml:base` attributes

On Firefox there is a XSS vulnerability if a malicious attacker
can write into the `xml:base` attribute on an SVG anchor.

Thanks to Masato Kinugawa at Cure23",False
c7bea44107a9585fc50d0e740860016a1a61479e,2018-01-11 17:59:19,Martin Staffa,chore(travis): test on 2 latest Safari versions,False
8510143a0ec68534c6dfc6e9c67f6de32ab0501c,2018-01-11 17:59:19,Martin Staffa,"test(*): fix tests for Safari 10+

The mocksSpec change is due to the following issue in Safari 10+ strict mode:
In the following code, Safari will not use the name of the enclosing function (testCaller)
in the stack, but rather list the anonymous function that is called to inject:

```
function testCaller() {
  return inject(function() {
    throw new Error();
  });
}
var throwErrorFromInjectCallback = testCaller();
```

Naming the anonymous function allows us to check for it in the test.",False
6388a348e4d0338dcc350dfc10bf088d18c0c9db,2018-01-10 17:28:30,Martin Staffa,docs(guide/Controllers): fix headings; re-order info,False
2da4917af4e53b281e1c7b28273ce06a6cac824b,2018-01-09 17:27:45,Martin Staffa,"chore(node): update semver

Closes #16396",False
4ff51bf18e801e04e0ed15d5d646cf439f667deb,2018-01-08 17:31:21,Martin Staffa,docs(vendor): add readme,False
ba42cedce5c07f53a6dccf1e8b4828e5b61c1298,2018-01-08 17:31:21,Martin Staffa,"refactor(getVersion.js): remove unused parameters

The parameters have been unused since we moved most of the bower
package dependencies to npm",False
ff2ce9dddec73601db727361812429180798205b,2018-01-08 17:31:21,Michał Gołębiowski-Owczarek,"chore(*): get rid of Bower in favor of Yarn aliases & checked-in packages

Bower was used to install multiple versions of jQuery which is now handled
using Yarn aliases. The remaining two packages, closure-compiler and
ng-closure-compiler were installed from zip files which is not supported by Yarn
(see https://github.com/yarnpkg/yarn/issues/1483); the first of them exists
on npm as the google-closure-compiler but only versions newer than we used are
published and they don't work with ng-closure-compiler so - instead - both were
checked in to the repository.

Fixes #16268
Fixes #14961
Ref yarnpkg/yarn#1483",False
8da3aef91c33cd15b465bbaaf2e1ceca90aa2aab,2018-01-08 15:11:06,Martin Staffa,"chore(node): update karma to 2.0.0

Also reduce karma log level on Travis to INFO.
Before, the log level was DEBUG, but it seems that
prior to karma 2.0.0, the debug messages were not outoput on Karma,
so this simply restores the status quo (and prevents cluttering the log).",False
89881578614c5954943e5b83a27c8ba748e50ce2,2018-01-08 15:11:06,Martin Staffa,"chore(node): update jasmine to 2.8.0, and adjust tests",False
d253c9d45c69705e80dce519b2c393424b2d5e85,2018-01-08 15:11:06,Martin Staffa,"test($sanitize): skip nextSibling clobber test on Edge 16

In some circumstances, Edge 16 will not throw on clobbered
elements, because the nextSibling property is null. The exact
cause is currently unknown.",False
07d84dd85f44f773766dba6db5ff99e2dd1ad69c,2018-01-06 01:36:09,Martin Staffa,"chore(*): update copyright year

Closes #16386",False
88cb9af59487171d1e2728800dcd45f66057517e,2018-01-03 22:49:05,Martin Staffa,docs(DEVELOPERS.md): improve testing section,False
e942e1e988d71b86bade392ef53eeee108e92861,2017-12-29 22:18:35,Sergey Kryvets,"docs(developers.md): update node version as specified in package.json 

Closes #16384",False
96dd35afb6156746c8e62e2e1c51feb42931328f,2017-12-29 19:00:31,Georgii Dolzhykov,"docs(ngModel.NgModelController): correct description for `$viewChangeListeners` 

It was misleading.

Closes #16382",False
9a521cb3ad223f4f21e7f616138ec9eb5466fcb6,2017-12-19 22:59:53,Frederik Prijck,"docs(PULL_REQUEST_TEMPLATE.md): fix broken links in PR template

Closes #16377",False
62743a54b79187e6c1325c0f6dec0f474147881d,2017-12-19 14:59:33,Georgios Kalpakas,"feat(currencyFilter): trim whitespace around an empty currency symbol

In most locales, this won't make a difference (since they do not have
whitespace around their currency symbols). In locales where there is a
whitespace separating the currency symbol from the number, it makes
sense to also remove such whitespace if the user specified an empty
currency symbol (indicating they just want the number).

Fixes #15018
Closes #15085

Closes #15105",False
22450e5b7c8486a721db74be32333007273ba584,2017-12-18 20:45:06,Martin Staffa,docs(CHANGELOG.md): add changes for 1.6.8,False
240a3ddbf12a9bb79754031be95dae4b6bd2dded,2017-12-18 18:18:15,George Kalpakas,"feat($resource): add support for `request` and `requestError` interceptors (#15674)

This commit adds `request` and `requestError` interceptors for `$resource`, as
per the documentation found for `$http` interceptors. It is important to note
that returning an error at this stage of the request - before the call to
`$http` - will completely bypass any global interceptors and/or recovery
handlers, as those are added to a separate context. This is intentional;
intercepting a request before it is passed to `$http` indicates that the
resource itself has made a decision, and that it accepts the responsibility for
recovery.

Closes #5146

BREAKING CHANGE:

Previously, calling a `$resource` method would synchronously call
`$http`. Now, it will be called asynchronously (regardless if a
`request`/`requestError` interceptor has been defined.

This is not expected to affect applications at runtime, since the
overall operation is asynchronous already, but may affect assertions in
tests. For example, if you want to assert that `$http` has been called
with specific arguments as a result of a `$resource` call, you now need
to run a `$digest` first, to ensure the (possibly empty) request
interceptor promise has been resolved.

Before:
```js
it('...', function() {
  $httpBackend.expectGET('/api/things').respond(...);
  var Things = $resource('/api/things');
  Things.query();

  expect($http).toHaveBeenCalledWith(...);
});
```

After:
```js
it('...', function() {
  $httpBackend.expectGET('/api/things').respond(...);
  var Things = $resource('/api/things');
  Things.query();
  $rootScope.$digest();

  expect($http).toHaveBeenCalledWith(...);
});
```",False
7df29521d8c1c494f615c49d6c2e1e267e3a6be5,2017-12-14 16:20:36,Martin Staffa,"refactor($location): remove obsolete workaround for Firefox bug

The bug was fixed in Firefox 48: https://bugzilla.mozilla.org/show_bug.cgi?id=684208,
and only affected the scenario runner",False
167766a5dd277adc42301e2e177816a6fb9a58f6,2017-12-14 16:20:36,Martin Staffa,docs(*): add browserTrigger docs; remove references to scenario runner,False
0cd39217828b0ad53eaf731576af17d66c18ff60,2017-12-14 16:20:36,Martin Staffa,"fix(ngScenario): completely remove the angular scenario runner

The runner has been deprecated and undocumented since 2014:
See commit 8d6d126899d4b1927360599403a7592011243270

Closes #9405

BREAKING CHANGE:

The angular scenario runner end-to-end test framework has been
removed from the project and will no longer be available on npm
or bower starting with 1.7.0.
It was deprecated and removed from the documentation in 2014.
Applications that still use it should migrate to
[Protractor](http://www.protractortest.org).
Technically, it should also be possible to continue using an
older version of the scenario runner, as the underlying APIs have
not changed. However, we do not guarantee future compatibility.",False
f6e60c14c055960ce85c55d9c819d30eda0b9086,2017-12-13 23:53:49,Martin Staffa,docs(ngForm): clarify usage and limitations,False
223de59e988dc0cc8b4ec3a045b7c0735eba1c77,2017-12-13 23:53:49,Martin Staffa,"fix(form): set $submitted to true on child forms when parent is submitted

Closes #10071

BREAKING CHANGE:

Forms will now set $submitted on child forms when they are submitted.
For example:
```
<form name=""parentform"" ng-submit=""$ctrl.submit()"">
  <ng-form name=""childform"">
    <input type=""text"" name=""input"" ng-model=""my.model"" />
  </ng-form>
  <input type=""submit"" />
</form>

Submitting this form will set $submitted on ""parentform"" and ""childform"".
Previously, it was only set on ""parentform"".

This change was introduced because mixing form and ngForm does not create
logically separate forms, but rather something like input groups.
Therefore, child forms should inherit the submission state from their parent form.",False
5c38fb744eb9deaf602f2f1d2e02cefdb815a6c6,2017-12-13 16:15:31,Jason Bedard,test($rootScope): test recursive event broadcast and emit,False
97d0224ae60f614c8b8a07a00829e46ec4997382,2017-12-13 16:15:31,Jason Bedard,"fix($rootScope): fix potential memory leak when removing scope listeners

When removing listeners they are removed from the array but the array size
is not changed until the event is fired again. If the event is never fired
but listeners are added/removed then the array will continue growing.

By changing the listener removal to `delete` the array entry instead of setting
it to `null` browsers can potentially deallocate the memory for the entry.

Fixes #16135
Closes #16161",False
e5fb92978f310d690e394bac2c09beeae4a56e03,2017-12-13 16:15:31,Jason Bedard,"revert: fix($rootScope): fix potential memory leak when removing scope listeners

This reverts commit 817ac56719505680ac4c9997972e8f39eb40a6d0.",False
41d5c90f170cc054b0f8f88220c22ef1ef6cc0a6,2017-12-12 01:18:03,Peter Bacon Darwin,"feat($rootScope): allow suspending and resuming watchers on scope

This can be very helpful for external modules that help making the digest
loop faster by ignoring some of the watchers under some circumstance.
Example: https://github.com/shahata/angular-viewport-watch

Thanks to @shahata for the original implementation.

Closes #5301",False
2c1e58984b31a86d5d81c03f9c54852dfdb44829,2017-12-12 01:11:14,Peter Bacon Darwin,"fix($location): always decode special chars in `$location.url(value)`

The original fix for #16312 included changing how `$location.url(value)`
decoded the special characters passed to it as a setter.
This broke a number of use cases (mostly involving the ui-router).

Further analysis appears to show that we can solve #16312, to prevent
urls being rewritten with decoded values, without modifying the
behaviour of `$location.url`.

This commit reverts changes to `$location.url(value)` so that encoded
chars will once again be decoded and passed to `$location.path(value)`.
In particular it will convert encoded forward slashes, which changes how
the path is updated, since e.g. `a/b/%2Fc%2Fd` will become `a/b/c/d`.
While this is arguably not ""correct"", it appears that there are too many
use cases relying upon this behaviour.",False
6d5ef34fc6a974cde73157ba94f9706723dd8f5b,2017-12-11 23:57:47,Martin Staffa,"fix(ngAria): do not set aria attributes on input[type=""hidden""]

This fixes a error found by @edclements  using the Google Accessibility Developer Tools audit.
Input fields of type hidden shouldn't have aria attributes.
https://www.w3.org/TR/html-aria/#allowed-aria-roles-states-and-properties-1

Closes #15113 
Closes #16367

BREAKING CHANGE:

ngAria no longer sets aria-* attributes on input[type=""hidden""] with ngModel.
This can affect apps that test for the presence of aria attributes on hidden inputs.
To migrate, remove these assertions.
In actual apps, this should not have a user-facing effect, as the previous behavior 
was incorrect, and the new behavior is correct for accessibility.",False
00815db8ef1a54e331b301ee3604d47e75c49d46,2017-12-11 14:25:47,John Hampton,"docs(ng-model-options): remove extra quotes in example

Remove unnecessary quotes around attribute directive name in the docs example.  This syntax is incorrect.

Closes #16362",False
a61c5d382e4986104353031729c3658bcd86ab07,2017-12-08 00:57:35,Michał Gołębiowski-Owczarek,"chore(*): bump Yarn in Jenkins init-node script

Without it Jenkins builds are broken.

Closes #16365",False
a7688100e3714ebc1e26b8289cbf6d1689f32e59,2017-12-07 23:56:32,Michał Gołębiowski-Owczarek,"build(*): update Node from 6 to 8, update Yarn

Angular (2+) switched to Node 8 and so should we.

Closes #16360
Ref angular/angular#20807
Ref angular/angular#20832",False
dde520e02a78fa1a194268d84ce7203513613738,2017-12-07 16:21:03,Martin Staffa,docs(ngModelOptions): fix link text,False
394b185416c473ec5e04c6ca2c8e5bedcbaf5357,2017-12-06 02:56:20,Jason Bedard,"refactor($rootScope): consistently use noop as the default $watch listener

Closes #16343",False
da724777019acbcbc831290b2bb62465a0635766,2017-12-06 00:37:45,Martin Staffa,"fix(ngModelController): allow $overrideModelOptions to set updateOn

Also adds more docs about ""default"" events and how to override
ngModelController options.

Closes #16351
Closes #16352",False
74b04c9403af4fc7df5b6420f22c9f45a3e84140,2017-12-04 15:47:32,Martin Staffa,"fix(ngModel, input): improve handling of built-in named parsers

This commit changes how input elements use the private $$parserName
property on the ngModelController to name parse errors. Until now,
the input types (number, date etc.) would set $$parserName when
the inputs were initialized, which meant that any other parsers on
the ngModelController would also be named after that type. The
effect of that was that the `$error` property and the `ng-invalid-...`
class would always be that of the built-in parser, even if the custom
parser had nothing to do with it.

The new behavior is that the $$parserName is only set if the built-in
parser is invalid i.e. returns `undefined`.

Also, $$parserName has been removed from input[email] and input[url],
as these types do not have a built-in parser anymore.

Closes #14292
Closes #10076
Closes #16347

BREAKING CHANGE:

*Custom* parsers that fail to parse on input types ""email"", ""url"", ""number"", ""date"", ""month"",
""time"", ""datetime-local"", ""week"", do no longer set `ngModelController.$error[inputType]`, and
the `ng-invalid-[inputType]` class. Also, custom parsers on input type ""range"" do no
longer set `ngModelController.$error.number` and the `ng-invalid-number` class.

Instead, any custom parsers on these inputs set `ngModelController.$error.parse` and
`ng-invalid-parse`. This change was made to make distinguishing errors from built-in parsers
and custom parsers easier.",False
2e03aedc8520bb863e465b0f35030a02ebe2cade,2017-11-30 19:29:30,Francesco Pipita,"feat($parse): add a hidden interface to retrieve an expression's AST

This PR adds a new private method to the `$parse` service, `$$getAst`,
which takes an Angular expression as its only argument and returns
the computed AST. This feature is not meant to be part of the public
API and might be subject to changes, so use it with caution.

Closes #16253

Closes #16260",False
199d888b8427e222700ee52519e0d1d4a048241b,2017-11-30 18:52:38,Peter Bacon Darwin,"fix($location): decode non-component special chars in Hashbang URLS

Fixes https://github.com/angular/angular.js/pull/16316#issuecomment-347527097",False
8b69d91fffff840fc9eeb16a06707e7bf17f75e4,2017-11-29 20:15:59,Martin Staffa,"chore(travis): fix deployment condition to include tagged commits

Tagged commits are not considered to belong to any branch.

Closes #16346",False
0fa5a37838a895ca01e0c63b3bb4141bc97a0238,2017-11-27 17:41:50,jugglinmike,"docs(ngNonBindable): document effect on the element's directives

The phrase ""contents of the current DOM element"" may be interpreted either as
inclusive of the DOM element's attributes or as exclusive of the attributes.
This situation concerns markup such as:

    <div ng-non-bindable ng-controller=""MyController""></div>

In practice, AngularJS does not compile or bind attribute values for elements
which specify the `ng-non-bindable` directive. Extend the documentation to
definitely describe this behavior.

Closes #16338",False
07e475137ec39604bca4a8be07a1a605a4fd6e7d,2017-11-24 14:01:19,Martin Staffa,docs(CHANGELOG.md): add changes for 1.6.7,False
5838017f267172fdb97324415a783bec2cfd05ec,2017-11-24 13:55:33,Jason Bedard,"refactor($rootScope): simplify $emit stopPropagation handling

See https://github.com/angular/angular.js/pull/16293#discussion_r147960028

Closes #16339",False
f2f5ac7ce42fe9a83306aac8114f0a604ec230ea,2017-11-22 17:54:56,Michał Gołębiowski-Owczarek,"chore(*): normalize Vojta's email in .mailmap correctly

Closes #16340",False
55ba44913e02650b56410aa9ab5eeea5d3492b68,2017-11-21 18:20:25,Martin Staffa,"feat(ngModelOptions): add debounce catch-all + allow debouncing 'default' only

Closes #15411
Closes #16335

BREAKING CHANGE:

the 'default' key in 'debounce' now only debounces the default event, i.e. the event
that is added as an update trigger by the different input directives automatically.

Previously, it also applied to other update triggers defined in 'updateOn' that
did not have a corresponding key in the 'debounce'.

This behavior is now supported via a special wildcard / catch-all key: '*'.

See the following example:

Pre-1.7:
'mouseup' is also debounced by 500 milliseconds because 'default' is applied:
```
ng-model-options=""{
  updateOn: 'default blur mouseup',
  debounce: { 'default': 500, 'blur': 0 }
}
```

1.7:
The pre-1.7 behavior can be re-created by setting '*' as a catch-all debounce value:
```
ng-model-options=""{
  updateOn: 'default blur mouseup',
  debounce: { '*': 500, 'blur': 0 }
}
```

In contrast, when only 'default' is used, 'blur' and 'mouseup' are not debounced:
```
ng-model-options=""{
  updateOn: 'default blur mouseup',
  debounce: { 'default': 500 }
}
```",False
aa3f951330ec7b10b43ea884d9b5754e296770ec,2017-11-17 16:58:03,Martin Staffa,"fix(input[number]): validate min/max against viewValue

This brings the validation in line with HTML5 validation, i.e. what the user has entered
is validated, and not a possibly transformed value.

Fixes #12761
Closes #16325

BREAKING CHANGE

`input[type=number]` with `ngModel` now validates the input for the `max`/`min` restriction against
the `ngModelController.$viewValue` instead of against the `ngModelController.$modelValue`.

This affects apps that use `$parsers` or `$formatters` to transform the input / model value.

If you rely on the $modelValue validation, you can overwrite the `min`/`max` validator from a custom directive, as seen in the following example directive definition object:

```
{
  restrict: 'A',
  require: 'ngModel',
  link: function(scope, element, attrs, ctrl) {
    var maxValidator = ctrl.$validators.max;

    ctrk.$validators.max = function(modelValue, viewValue) {
      return maxValidator(modelValue, modelValue);
    };
  }
}
```",False
12cf994fccd7df6c2c2ba07d50b921ee80d62be7,2017-11-17 16:25:18,Denys B,"fix($compile): sanitize special chars in directive name

This fixes regression bug
when directive name with preceeding special char
in HTML markup does not match the registered name.
(introduced in https://github.com/angular/angular.js/commit/73050cdda04675bfa6705dc841ddbbb6919eb048)

Closes #16314
Closes #16278",False
873e26347fd5bb3d978d16d272db30cc5e49241a,2017-11-17 16:17:18,kirk,"docs(linky): mark ""target"" param as optional

This argument is optional in practice, and it is not provided in many of the examples in the
documentation. Its optional presence is handled here:
https://github.com/angular/angular.js/blob/f876ab71913e17e9126baad19ab795f28b61bfe6/src/ngSanitize/filter/linky.js#L185

Closes #16330",False
f876ab71913e17e9126baad19ab795f28b61bfe6,2017-11-11 18:40:53,Frederik Prijck,"docs(*): remove usage of global grunt-cli 

Previously, the `DEVELOPERS.md` and `CONTRIBUTING.md` files
refered to global `grunt-cli` by default.

This commit ensures the local `grunt-cli` is used by default
and mentiones the possibility to still use the global `grunt-cli`.",False
181ac0b7a1823bd9965f5e88b3c5b437dc00fafd,2017-11-03 17:11:54,Martin Staffa,"docs(*): update CONTRIBUTING.md and create DEVELOPERS.md

CONTRIBUTING.md
- focus on basic info about issues and pull requests for new contributors
- move development heavy info to DEVELOPERS.md + add links
- remove outdated info

DEVELOPERS.md
- contains info about project setup, coding rules, and commit message guidelines from CONTRIBUTING.md
- add and update info about writing docs from Wiki
- add info about development setup from docs contribute.md
- add info about running tests on Saucelabs / Browserstack

Closes #7303
Closes #9444 
Closes #16297",False
0cbc50512126fa22546dbe9b79a14939d9dc4459,2017-11-03 16:33:19,Peter Bacon Darwin,"fix($location): do not decode forward slashes in the path in HTML5 mode

Closes #16312",False
667db466f959f8bbca1451d0f1c1a3db25d46a6c,2017-11-03 15:43:59,Peter Bacon Darwin,"fix(sanitizeUri): sanitize URIs that contain IDEOGRAPHIC SPACE chars

Browsers mutate attributes values such as `&#12288;javascript:alert(1)`
when they are written to the DOM via `innerHTML` in various vendor specific
ways.

In Chrome (<62), this mutation removed the preceding ""whitespace"" resulting
in a value that could end up being executed as JavaScript.

Here is an example of what could happen:
https://plnkr.co/edit/Y6EsbsuDgd18YTn1oARu?p=preview
If you run that in Chrome 61 you will get a dialog box pop up.

There is background here:
http://www.nds.rub.de/media/emma/veroeffentlichungen/2013/12/10/mXSS-CCS13.pdf

The sanitizer has a bit of code that triggers this mutation on an inert piece
of DOM, before we try to sanitize it:
https://github.com/angular/angular.js/blob/817ac567/src/ngSanitize/sanitize.js#L406-L417

Chrome 62 does not appear to mutate this particular string any more, instead
it just leaves the ""whitespace"" in place. This probably means that Chrome 62
is no longer vulnerable to this specific attack vector; but there may be
other mutating strings that we haven't found, which are vulnerable.

Since we are leaving the mXSS check in place, the sanitizer should still
be immune to any strings that try to utilise this attack vector.

This commit uses `trim()` to remove the IDEOGRAPHIC SPACE ""whitespace""
before sanitizing, which allows us to expose this mXSS test to all browsers
rather than just Chrome.

Closes #16288",False
2c9c3a07845d9a0aae12fa3259983d37b68f918f,2017-11-02 21:53:20,Lisa Pfisterer,"docs(guide/Unit Testing): change $scope = {} to $scope = $rootScope.$new() 

{} will just create an empty object. This will break if the module uses for example $watch or others.
While it's not necessary for this example, it's good general practice.

Closes #16315",False
817ac56719505680ac4c9997972e8f39eb40a6d0,2017-11-01 10:06:58,Jason Bedard,"fix($rootScope): fix potential memory leak when removing scope listeners

Previously the array entry for listeners was set to null but the array size was
not trimmed until the event was broadcasted again (see e6966e05f508d1d2633b9ff327fea912b12555ac).

By keeping track of the listener iteration index globally it can be adjusted if
a listener removal effects the index.

Fixes #16135
Closes #16293

BREAKING CHANGE:

Recursively invoking `$emit` or `$broadcast` with the same event name is
no longer supported. This will now throw a `inevt` minErr.",False
0864f73458864dadc92753bb1fae5d7f32e90a9a,2017-10-30 15:53:44,Martin Staffa,"docs($compileProvider): improve strictComponentBindingsEnabled info

Related to #16303 
Closes #16306",False
c15c8a1380d7cc991a27e0f17737b84013ad9f63,2017-10-28 09:22:30,Jason Bedard,test($rootScope): test removal of event listeners during event broadcast,False
9871ada04bc52d9a11f4232764aae89d948ed1ee,2017-10-26 17:55:45,Martin Staffa,chore(travis): tighten up deploy conditions,False
202f1809ad14827a6ac6a125157c605d65e0b551,2017-10-25 14:14:55,Martin Staffa,"chore(travis): fix deploy conditions

Closes #16296",False
32fbb2e78f53d765fbb170f7cf99e42e072d363b,2017-10-23 16:23:36,Martin Staffa,"chore(travis): split unit test into 'core' and 'jquery'

""unit-core"" consists of code+jqlite, module test, and promise A+ tests.
""unit-jquery"" is code+jquery
""docs-app"" includes unit and e2e tests

Splitting the unit tests into more than one job makes it faster
to rerun jobs that fail because Safari or Edge cannot complete the
suite, which seemingly happens on random.

Closes #16292",False
9ba07e974a45eea4ff0b29d1df2d64863f484c7b,2017-10-23 14:15:05,Sagir Khan,"docs(tutorial/step_14): replace broken web platform docs link

Replace broken [webplatform-animations][1] link with [mdn-animations][2].

The original link returns a 404. The closest match that works is
https://webplatform.github.io/docs/css/properties/animation. However,
the notice at the top of the page reads:

> The WebPlatform project, supported by various stewards between 2012
> and 2015, has been discontinued.

The CSS animations guide on MDN web docs is not only current, but also
more comprehensive.

[1]: https://docs.webplatform.org/wiki/css/properties/animations
[2]: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations

Closes #16294",False
dfcb5ac1e43e25f2df19dd89c0514022e6ff62b3,2017-10-20 16:47:20,Martin Staffa,"chore(travis): deploy to docs and code when distTag=latest

We now deploy to code.angularjs.org and docs.angularjs.org
when we are on the branch which has distTag=latest set in the
package.json, i.e. the stable branch.

Previously, we deployed to docs only when distTag=latest and
the commit was tagged, and to code only on the master branch.",False
10b48094d72e0381e498a674c711807ce5e4cbde,2017-10-20 16:47:20,Martin Staffa,"chore(doc-gen, docs-app): generate ""stable snapshot"" for distTag=latest

The ""stable snapshot"" is the current state of the branch that has
distTag=latest, i.e. a preview of the next patch version of the stable branch.",False
0f0a16ec409f5b4f1de37982c04b14667568f802,2017-10-19 15:21:30,Martin Staffa,"chore(travis): remove unnessecary addons

The ""Trusty"" build environment on Travis includes these addons,
see https://docs.travis-ci.com/user/languages/javascript-with-nodejs#Node.js-v4-(or-io.js-v3)-compiler-requirements

Closes  #16286",False
84294ec1fcf8a2b01438951c5bbb41c98d6da3b7,2017-10-18 17:22:47,Martin Staffa,"chore(travis): unit-test latest & latest-1 Chrome, FF, Edge 

Previously, we used fixed versions that became outdated quickly for
FF and Chrome.

Safari 10/11 is not included because during the latest test there were 
failures, see https://github.com/angular/angular.js/pull/15717

Jasmine is fixed to 2.5.2 because 2.6.0+ is not compatible with the suite:
https://github.com/angular/angular.js/pull/15927#issuecomment-309206419

Closes #15927",False
69e0968309da250ae2b5ecb2a3de745a51439be0,2017-10-18 16:59:50,Martin Staffa,"chore(doc-gen): add directive names that aren't params to usage section

When a directive can be used as an attribute or CSS class, but doesn't take 
a value, its name is not included in the parameters, which previously meant 
that the directive name was missing from the Attribute / CSS Class usage 
section of the docs.

This commit adds the name to the Usage section when it is missing
from the parameters.

Closes #14045
Closes #16265",False
bf758d0bef449e07ce57d9c53dcb2a9191c1dc3d,2017-10-16 15:21:00,Martin Staffa,"chore(node): update karma-sauce-launcher

Related to #14961
Closes #16281",False
00936ad12bb016212ac4e3f0962b14c6154fc8c2,2017-10-13 20:27:21,Martin Staffa,"docs(select.SelectController): fix example

Closes #16271
Closes #16275",False
656c8fa8f23b1277cc5c214c4d0237f3393afa1e,2017-10-13 19:09:53,Martin Staffa,"fix(input): listen on ""change"" instead of ""click"" for radio/checkbox ngModels

input[radio] and inout[checkbox] now listen on the change event instead
of the click event. This fixes issue with 3rd party libraries that trigger
a change event on inputs, e.g. Bootstrap 3 custom checkbox / radio button
toggles.
It also makes it easier to prevent specific events that can cause a checkbox / radio
to change, e.g. click events. Previously, this was difficult because the custom click
handler had to be registered before the input directive's click handler.

It is possible that radio and checkbox listened to click because IE8 has
broken support for listening on change, see http://www.quirksmode.org/dom/events/change.html

Closes #4516
Closes #14667
Closes #14685

BREAKING CHANGE:

`input[radio]` and `input[checkbox]` now listen to the ""change"" event instead of the ""click"" event.
Most apps should not be affected, as ""change"" is automatically fired by browsers after ""click""
happens.

Two scenarios might need migration:

- Custom click events:

Before this change, custom click event listeners on radio / checkbox would be called after the
input element and `ngModel` had been updated, unless they were specifically registered before
the built-in click handlers.
After this change, they are called before the input is updated, and can call event.preventDefault()
to prevent the input from updating.

If an app uses a click event listener that expects ngModel to be updated when it is called, it now
needs to register a change event listener instead.

- Triggering click events:

Conventional trigger functions:

The change event might not be fired when the input element is not attached to the document. This
can happen in **tests** that compile input elements and
trigger click events on them. Depending on the browser (Chrome and Safari) and the trigger method,
the change event will not be fired when the input isn't attached to the document.

Before:

```js
    it('should update the model', inject(function($compile, $rootScope) {
      var inputElm = $compile('<input type=""checkbox"" ng-model=""checkbox"" />')($rootScope);

      inputElm[0].click(); // Or different trigger mechanisms, such as jQuery.trigger()
      expect($rootScope.checkbox).toBe(true);
    });
```

With this patch, `$rootScope.checkbox` might not be true, because the click event
hasn't triggered the change event. To make the test, work append the inputElm to the app's
`$rootElement`, and the `$rootElement` to the `$document`.

After:

```js
    it('should update the model', inject(function($compile, $rootScope, $rootElement, $document) {
      var inputElm = $compile('<input type=""checkbox"" ng-model=""checkbox"" />')($rootScope);

      $rootElement.append(inputElm);
      $document.append($rootElement);

      inputElm[0].click(); // Or different trigger mechanisms, such as jQuery.trigger()
      expect($rootScope.checkbox).toBe(true);
    });
```

`triggerHandler()`:

If you are using this jQuery / jqLite function on the input elements, you don't have to attach
the elements to the document, but instead change the triggered event to ""change"". This is because
`triggerHandler(event)` only triggers the exact event when it has been added by jQuery / jqLite.",False
5462373b5bbc5a0137054838ea6af3d236cfc8ac,2017-10-13 19:06:32,Martin Staffa,"chore($resource): remove undocumented API

This code has been in the $resource service since 2010, but was
never documented and can therefore be removed. It'll save precious bytes!

Shout-out to @gkalpak for finding this

Closes #16267",False
5f76bc60976fd2d28f793fa72dd6ce49daf645d6,2017-10-11 18:40:07,Dmitriy,"feat($sanitize, $compileProvider, linky): add support for the ""sftp"" protocol in links

Add support for the sftp protocol in the linky filter and the ""aHrefSanitizationWhitelist"" that is used by $sanitize and can be configured in the $compileProvider.

Closes #16102",False
c8d349870812284a82896087c05c2d19c8f5cdfd,2017-10-11 18:06:05,Martin Staffa,"docs(ngPattern): add option of specifying literal RegExp

Closes #15929",False
2cb0318c1c74342f66e7c2e0a96f9931ccc36c92,2017-10-11 18:06:05,Martin Staffa,"docs(ngInit): clarify when it's okay to use ngInit

Closes #10489",False
2c8bfd8a085695c3f46557fba6566d870b771573,2017-10-11 18:06:05,Martin Staffa,"docs(*): add / correct `@`-tags; fix headlines; add info

- add / correct `@param`, `@restrict`, `@element`, `@priorìty` to directives
- use `@animations` instead of manual headings
- fix more incorrect h1 headings
- fix incorrectly indented `<examples>`
- add some info to $templateCache and $templateRequest",False
e5c6174839e96113c93913dd8b3c4cca760dfc41,2017-10-05 17:36:08,Martin Staffa,"docs(*): fix heading levels; use @example instead of headings

This ensures the doc-gen creates correct headlines and
table of contents entries.",False
f05f5485460125ca6cea8d89170d1cef0edbb6fc,2017-10-05 17:36:08,Martin Staffa,"chore(doc-gen): improve headings for events and examples

The ""Events"" heading now gets an id (which makes them show in
the table of contents, and their ""Parameters"" use a heading with
a lower priority (previously it was the same as ""Events"" itself).

The ""@example"" tag now generates the heading ""Example"" if there's
only one, or ""Examples"" if there are multiple.",False
8166dd40e4a1b8bc3d682261eede798d0e0ad9b8,2017-10-05 02:54:47,Michał Gołębiowski-Owczarek,"chore(*): add a Git .mailmap with my new name

In this way:
* my past contributions are mapped correctly
* other people's distinct entries are collapsed into one

Closes #16254",False
0822d34b10ea0371c260c80a1486a4d508ea5a91,2017-10-04 19:18:33,Martin Staffa,refactor(api-pages.scenario.js): remove misleading describe block,False
87273022f26f462fab52b5c8962009cc536ba5a0,2017-10-04 19:18:33,Martin Staffa,"docs(*): fix heading levels and general clean-up

- docs pages should only have one h1
- docs pages shouldn't skip a h* in the hierarchy
- manual table of contents are no longer necesary
- references to the doc-module-components directive are obsolete",False
ddd78bd3e4afb36bd5101b8d6cab691642ff00fe,2017-10-04 19:18:33,Martin Staffa,chore(docs-app): add table of contents to individual pages,False
05fdf918d97a379634c8b0e15da8615edfc6fb8d,2017-09-29 16:42:18,Martin Staffa,"feat(ngModel.NgModelController): expose $processModelValue to run model -> view pipeline

Closes #3407
Closes #10764
Closes #16237",False
6eb15cb1143cfbc291810708d6727c398878de17,2017-09-25 20:44:22,Trotyl Yu,"docs(changelog): fix typo

Closes #16242",False
72a87ceda7ae7a08b69fbc23dc6a3620f249493d,2017-09-24 03:44:05,Peter Bacon Darwin,fix(http): do not allow encoded callback params in jsonp requests,False
6d997f56a31cc85d6abb4c72adeecec42015fcaa,2017-09-23 01:52:56,George Kalpakas,"chore(doc-gen): fix script paths in plnkr for examples with deps

Closes #16238",False
34237f929927295392bbb1a600e78cbde581839a,2017-09-21 18:22:46,Craig Leyshan,"feat($injector): ability to load new modules after bootstrapping

The new method `$injector.loadNewModules(modules)` will add each of the
injectables to the injector and execute all of the config and run blocks
for each module passed to the method.

* The application developer is responsible for loading the code containing
the modules.
* Modules cannot be unloaded.
* Previously loaded modules will not be reloaded.
* Previously compiled HTML will not be affected by newly loaded directives,
filters and components.",False
7e5a12e2c19fe6e3d43367ba56f204a2aeda4ff4,2017-09-21 18:18:06,ImgBotApp,"docs(*): optimize images

\docs\app\assets\img\AngularJS-small.png (1.82%)
\docs\img\One_Way_Data_Binding.png (12.15%)
\docs\img\guide\di_sequence_final.png (19.05%)
\docs\app\assets\img\bullet.png (13.68%)
\images\docs\Diagrams.svg\image1.png (1.73%)
\docs\img\angular_parts.png (30.41%)
\images\docs\tutorial\tutorial_06.svg\image15.png (1.55%)
\docs\img\Two_Way_Data_Binding.png (11.59%)
\docs\img\guide\concepts-databinding2.png (7.54%)
\images\docs\Diagrams.svg\image4.png (1.89%)
\images\docs\Diagrams.svg\image2.png (1.93%)
\images\docs\Diagrams.graffle\image9.png (2.12%)
\docs\img\guide\concepts-module-injector.png (2.41%)
\docs\img\guide\hero-detail.png (41.79%)
\images\docs\tutorial\tutorial_09.graffle\image9.png (7.86%)
\images\docs\Diagrams.svg\image9.png (2.12%)
\images\docs\guide\concepts.graffle\image4.png (10.43%)
\docs\img\guide\scenario_runner.png (37.15%)
\docs\img\guide\concepts-directive.png (1.05%)
\docs\img\guide\concepts-databinding1.png (8.75%)
\images\docs\guide\concepts.graffle\image1.png (9%)
\images\docs\tutorial\tutorial_09.svg\image9.png (15.35%)
\docs\img\form_data_flow.png (6.68%)
\docs\img\guide\heroes-list.png (40.81%)
\images\docs\guide\concepts.graffle\image5.png (12.02%)
\docs\img\guide\simple_scope_final.png (0.51%)
\docs\img\guide\concepts-startup.png (3.22%)
\docs\img\tutorial\tutorial_12.png (10.49%)
\images\docs\guide\concepts.svg\image4.png (10.43%)
\images\docs\Diagrams.graffle\image4.png (1.89%)
\docs\img\tutorial\tutorial_05.png (11.11%)
\docs\img\tutorial\catalog_screen.png (0.46%)
\images\docs\tutorial\tutorial_10.graffle\image10.png (5.73%)
\images\docs\tutorial\simple_scope.graffle\image7.png (43.81%)
\images\docs\guide\simple_scope.graffle\image7.png (43.81%)
\images\docs\tutorial\tutorial_02.graffle\image11.png (0.19%)
\docs\img\guide\crisis-list.png (39.68%)
\docs\img\guide\concepts-runtime.png (2.48%)
\images\docs\guide\concepts.svg\image5.png (12.02%)
\docs\img\guide\concepts-view.png (2.98%)
\images\docs\tutorial\tutorial_02.svg\image11.png (28.1%)
\docs\img\tutorial\tutorial_00.png (10.99%)
\docs\img\tutorial\tutorial_06.png (11.3%)
\docs\img\guide\crisis-detail.png (38.86%)
\docs\img\guide\concepts-scope-watch-strategies.png (7.59%)
\images\docs\guide\simple_scope.svg\image7.png (43.81%)
\docs\img\tutorial\tutorial_09.png (10.7%)
\images\docs\tutorial\tutorial_12.svg\image10.png (25.88%)
\images\docs\tutorial\tutorial_10.svg\image10.png (25.88%)
\images\logo\AngularJS.exports\AngularJS-large.png (3.86%)
\images\docs\Diagrams.graffle\image1.png (1.73%)
\images\docs\tutorial\tutorial_03.svg\image11.png (28.1%)
\docs\img\tutorial\tutorial_10.png (10.44%)
\images\docs\tutorial\tutorial_proto.graffle\image7.png (43.81%)
\images\docs\tutorial\simple_scope.svg\image7.png (43.81%)
\images\logo\AngularJS.exports\AngularJS-small.png (3.64%)
\images\docs\tutorial\tutorial_proto.svg\image7.png (43.81%)
\docs\img\tutorial\tutorial_02.png (10.91%)
\images\docs\tutorial\tutorial_05.graffle\image13.png (10.92%)
\images\logo\AngularJS-Shield.exports\AngularJS-Shield-large.png (5.3%)
\docs\img\tutorial\tutorial_03.png (10.77%)
\images\docs\tutorial\tutorial_05.svg\image13.png (3.46%)
\images\logo\AngularJS.graffle\image1.png (0.55%)
\images\docs\Diagrams.graffle\image2.png (1.93%)
\images\docs\tutorial\tutorial_12.graffle\image10.png (5.73%)
\images\logo\AngularJS-Shield.exports\AngularJS-Shield-huge.png (2.99%)
\images\docs\tutorial\tutorial_06.graffle\image15.png (16.51%)
\images\logo\AngularJS.graffle\image2.png (5.21%)
\docs\img\guide\hashbang_vs_regular_url.jpg (32.92%)
\images\logo\AngularJS-Shield.exports\AngularJS-Shield-medium.png (6.18%)
\images\logo\AngularJS-Shield.exports\AngularJS-Shield-small.png (6.58%)
\images\logo\AngularJS.exports\AngularJS-medium.png (3.37%)
\images\logo\AngularJS.exports\AngularJS-huge.png (3.56%)

Closes #16222",False
da6ae8b4b6ad6f902e2ea7fea2dd944f4bd190dc,2017-09-21 16:43:42,Michał Gołębiowski-Owczarek,"docs(*): don't hide results for middle-clicks

Middle-clicking opens a link in a new tab; it shouldn't close the results list
as the user may want to open more of those links.

Closes #16233",False
efaf59f9880de042e81a91149776785e8dd5547e,2017-09-20 17:32:53,Michał Gołębiowski-Owczarek,chore(jqLite): fix $destroy describe block titles,False
f18dd2957caf1993bc2a3b4db7ebfeb797170aca,2017-09-19 01:31:14,Marcin Wosinek,"fix(ngMock): pass unexpected request failures in `$httpBackend` to the error handler

Closes #16150
Closes #15855",False
97b00ca497676aaff8a803762a9f8c7ff4aa24dd,2017-09-19 01:20:33,Jason Bedard,"perf($rootScope): allow $watchCollection use of expression input watching

By adding a $$pure flag to the $watchCollectionInterceptor to shallow
watch all inputs regardless of type when watching an object/array
literal.",False
57280768e1fc382f643f7db6b782c3cb24a3565a,2017-09-18 01:58:59,Jason Bedard,perf(jqLite): avoid setting class attribute when not changed,False
bf60182df1980f7d87e72e59a06be9ccd791dcfd,2017-09-18 01:58:59,Jason Bedard,"perf(jqLite): avoid repeated add/removeAttribute in jqLiteRemoveClass

Fixes #16078
Closes #16131",False
8f61cf631aaac48e1a60e12eb72ba55d9eff23a4,2017-09-11 17:06:21,Fengwei Wang,"docs(guide/bootstrap): fix typo ('There a few things' --> 'There are a few things')

Closes #16221",False
21a2f4bb2310f5cea69d637568ca6c21f2815270,2017-09-07 18:14:19,melbourne2991,"docs(input[checkbox]): fix @param type for `ngChange`

Closes #16219",False
20590c0bd007fda6b7a2f9b4eaf44dcf995ba8bb,2017-09-06 19:46:55,Martin Staffa,fix(ngAnimate): don't close animations when child transitions close,False
2f7fad5f9f629c48b93c710ab5fdf8a85c3396e3,2017-09-06 19:46:55,Martin Staffa,"fix(ngMock.browserTrigger): add 'bubbles' to Transition/Animation Event

When the event objects are created synthetically, the bubbles property is set to false
if not explicitly defined",False
ecc09a45f02454e4e2478ad22cd0d179dccc7916,2017-09-05 18:04:18,Yonatan Kra,"docs(guide/expression): add clarification for RegExp literal in `ngPattern` expression

The `ngPattern` expression does accept a RegExp created with literal notation,
hence it should be mentioned as an exception to the
""No RegExp Creation With Literal Notation"" rule.

Closes #16206",False
3651e42e49ded7d410fd1cbd46f717056000afd4,2017-08-28 14:40:54,frederikprijck,"docs(*): replace master/slave with leader/follower

Previously, the docs made use of `master/slave`, which is offensive.

This commit removes the usage of these terms and replace them with `leader/follower`.",False
233a93f6e01f7f06d17cdea8a7b2a7098803639d,2017-08-24 00:41:01,Oscar Busk,"docs($compileProvider): add more info on `debugInfoEnabled()`

Add more info on what `debugInfoEnabled()` affects.

Closes #16154",False
59a9c1319de13b9224644b28b799bed33fe4c0d9,2017-08-23 21:26:45,Oscar Busk,"docs(guide/production): add more info on `debugInfoEnabled()`

Add bullet mentioning how placeholder comments are affected.

Closes #16155",False
66dff7cf5f8dc2827fd8cb7dff4a0eb57ce317f5,2017-08-23 15:22:46,Martin Staffa,"chore(docs.angularjs.org): fix docs deploy for source file changes

Since the embedded examples in the docs app now include the local source files instead
of CDN files, we need to include the source files into the folder that is deployed
to Firebase hosting",False
307293818636efc3f7f81903f6a2255447e67a77,2017-08-23 15:22:46,Martin Staffa,chore(doc-gen): include source files from code.angularjs.org for production plnkr examples,False
48f0957dde728b050e2d8f76db81cbf12cffd42a,2017-08-23 15:22:46,Martin Staffa,"revert: chore(docs-app): load example files based on active deployment

This reverts commit d91a6bdbc66098ff7bbf8fa435ae5652fe6a795f.

The runnable examples cannot rely on the CDN for loading the common files,
because the CDN push does not happen at the same time as the docs are generated,
which means the doc examples are non-functional for an unforeseeable time.",False
6d2ff0ac6daf70f5907643ccd57e888405d53074,2017-08-18 18:53:17,Martin Staffa,docs(CHANGELOG.md): add changes for 1.6.6,False
7c876285cbfebf69a2ea64a216f903cf8d3803ee,2017-08-12 14:28:55,Georgios Kalpakas,"test(ngOptions): fix flaky test on Firefox 54+ and Safari 9

Closes #16149",False
a83d64605f76128de7e208692c8b081d3f21fe59,2017-08-12 02:26:02,Martin Staffa,"chore(karma): use dots reporter by default

dots is nicer for local testing, as you usually don't run a
ton of test suites, and the progress visualization is more important .
It's also more readable if you skip many tests (i.e. run isolated tests)

Closes #16167",False
919087f0eca8555cdf03fe79c4de303d3784f549,2017-08-12 02:24:51,Martin Staffa,"chore(code.angular): correctly remove old zip files from snapshot

Previously, the event would be triggered on the deletion of the previous zip files,
which would delete the current zip file as well

Closes #16168",False
5b31b379a6359517d45ac8a319f5d3135acdc074,2017-08-11 19:23:56,Frederik Prijck,"docs(*): change Angular to AngularJS

Closes #16163",False
c9691a29f2e57e085be42bf4f0bd0aacc30e6400,2017-08-11 18:59:21,Martin Staffa,"chore(travis): manually install yarn (#16166)

Currently, the yarn version on Travis is outdated:
https://github.com/travis-ci/packer-templates/issues/478",False
9b6c1540a573a2b98e85fe172215b07be1c229bd,2017-08-11 18:55:37,Frederik Prijck,"docs($compile): update preAssignBindingsEnabled description

Previously, the changelog and migration guide did not mention the fact
that this only applies to controllers which are part of a
directive/component.

This commit ensures the changelog and migration guide mentions this explicitly.

Closes #15740

Closes #16162",False
56ac2a7b3cb68f2e12eb6577fe854d2b2e20f3d3,2017-08-04 14:37:55,Georgios Kalpakas,"chore(karma): run tests on latest Chrome (59) and Firefox (54) available on Saucelabs

Closes #16141",False
811af9ccfbc973117926c052232d65165dc5f576,2017-08-04 14:37:34,Georgios Kalpakas,"test(*): fix tests involving `submit` on Chrome 60

On Chrome 60 (at least on Windows) the `submit` event when clicking on a submit
button is not fired on the form element, unless it is already part of the DOM.",False
a784fab605d825f1158c6292b3c42f8c4a502fdf,2017-08-03 23:31:39,Frederik Prijck,"fix($httpParamSerializerJQLike): call functions as jQuery does

Previously, `httpParamSerializerJQLike` stringified function properties without executing them.
This commit ensures function properties are executed and the return value is used.

Fixes #16138

Closes #16139",False
3650723501ca5f50003192bc4f94c77cef711e1a,2017-08-02 16:03:38,andypotts,"docs(guide/concepts): simplify currency exchange API example (YQL --> Fixer.io)

Fixes #16130

Closes #16137",False
aee5d02cb789e178f3f80f95cdabea38e0090501,2017-08-01 03:01:39,Martin Staffa,chore(travis): actually skip build on deployment job when from Pull Request,False
0179c70d02211328ebc4cf6dc4839e7ae8522965,2017-07-31 19:28:11,Martin Staffa,chore(code.angularjs): enable directory listings,False
84061c29547e93bb9da604c147420dc8d4712f3f,2017-07-31 19:28:11,Martin Staffa,chore(code.angularjs): delete old zip files on snapshot,False
9936e570ea91098c7c6ea59809468224d07296ec,2017-07-31 19:28:11,Martin Staffa,chore(travis): skip build on deployment job when from Pull Request,False
1b196332f5c76d809ce06b10263af7772c8072bb,2017-07-31 19:28:11,Martin Staffa,"chore(docs-app): only copy relevant assets

This keeps the size of the docs-app build down.
Especially needed to keep the size of the generated build .zip
under 10MB, which is the limit for firebase / gcs https function transfers",False
d91a6bdbc66098ff7bbf8fa435ae5652fe6a795f,2017-07-31 19:28:11,Martin Staffa,chore(docs-app): load example files based on active deployment,False
394dbcc2773e218b1eaa7b1f2b14a943ef78c8e0,2017-07-31 18:44:33,Carl,"fix($httpParamSerializer): ignore functions

Closes #16133",False
f1d01bbc748e033035107dbb4259fe40d3443dfb,2017-07-28 15:21:38,Zita Nemeckova,"feat($compile): add `strictComponentBindingsEnabled()` method

Closes #16129",False
01d6a47e91e60f99d093d90968adb32f8c24615a,2017-07-27 13:07:16,Chirag Bhatia,"fix($resource): do not throw when calling old `$cancelRequest()`

Closes #16037",False
ac57a25cd981fe3ffcfdfeea1e1ac3fccf787696,2017-07-27 09:55:48,Jason Bedard,test(ngStyle): add test for object literal,False
15bbd3e18cd89b91f7206a06c73d40e54a8a48a0,2017-07-27 09:55:48,gdi2290,"perf(ngStyleDirective): use $watchCollection

Since we are simply watching a flat object collection it is more performant
to use $watchCollection than a deepWatch...

BREAKING CHANGE:

Previously the use of deep watch by ng-style would trigger styles to be
re-applied when nested state changed. Now only changes to direct
properties of the watched object will trigger changes.

Closes #15947",False
87a586eb9a23cfd0d0bb681cc778b4b8e5c8451d,2017-07-22 09:26:14,Jason Bedard,fix($parse): do not pass scope/locals to interceptors of one-time bindings,False
e6d5fe7dea795d02eb2eab6ac69aca81a3edc99d,2017-07-19 17:48:08,sathify,style(css) separate selectors and declarations by new lines,False
823c7edb84e2698f035a6712e32dfb4e95be888c,2017-07-18 19:40:47,Kerry McCullough,"feat($resource): add resource to response for error interceptors

Closes #16109",False
631076a31bf0bb7ab78c0504a81eed006805c182,2017-07-18 12:08:39,Jason Bedard,"fix($parse): do not shallow-watch computed property keys

Shallow watching is not enough when an object implements a non-pure toString",False
341f8dbe2484c9841c4fbf405ba5438029175675,2017-07-18 10:41:42,Jason Bedard,refactor($parse): remove unnecessary .constant if when collecting inputs,False
8de97949c58a95c348a1b95198c0747eb908d18a,2017-07-18 09:24:43,Jason Bedard,fix($parse): support constants in computed keys,False
2fb2d09971c203cc0164b3100cd9b43b484aeece,2017-07-17 10:31:40,Jason Bedard,test(ngClass): add test for one-time objects in array literal,False
2ee5033967d5f87a516bad137686b0592e25d26b,2017-07-17 10:31:40,Jason Bedard,"fix($parse): always pass the intercepted value to watchers

Fixes #16021",False
de74034ddf6f92505ccdb61be413a6df2c723f87,2017-07-17 10:31:40,Jason Bedard,fix($parse): respect the interceptor.$stateful flag,False
529550d0da3d88514ce9efb038fb935fbf90f971,2017-07-14 14:23:48,Jason Bedard,"refactor($parse): do not pass scope,locals to interceptor fns

All internal use of interceptors are for things such as data
conversion/normalizing, never reading state from the scope/locals.
This is the intended use and makes interceptors more like filters
(which receive only the input value + args, no scope/locals).",False
828a2757b2e04a3bec12012c127812559fab78e3,2017-07-13 14:44:55,Martin Staffa,"chore(*): deploy (docs|code) .angularjs.org to Firebase via Travis

- code.angularjs.org and docs.angularjs.org are two separate Firebase projects
- both are automatically deployed via Travis config
- Travis is split up into 2 build stages: first, all tests are run, and if they pass, the deploy
stage runs a single job with both deployments (actual deployment depends on the state of the commit)
- docs. is deployed directly to Firebase hosting
- code. is uploaded to Firebase Google Cloud Storage and uses Firebase hosting rewrites to acces the
files
- jenkins builds still push the code builds to the code.angularjs.org Github repository

Closes #9674
Closes #16093",False
7e97db93ff3ccd45ba943d2df28d4b53c0efc280,2017-07-13 14:43:09,SteveAndrewArcher,"docs(input[week]): clarify value of Date object

Add a note to documentation of input[week] to explicitly state that the
resulting Date object's value is set to Thursday at midnight of the
specified week.

Resolves #15883 
Closes #16104",False
6a22c79a94087bd9f61e84b7c11e26dc83a9bb07,2017-07-13 14:08:57,Martin Staffa,"chore(travis): fix bower install

We removed `grunt package` from JOB_UNIT in 4015e0fde5bb0005d9812bdd1fb5c6496f5b1944,
but this runs `grunt bower` which JOB_UNIT needs.

This commit adds `grunt bower` to JOB_UNIT.

Closes #16105",False
0616dde95efbd16d541ce2f27fc5a870b704230c,2017-07-12 15:32:18,Martin Staffa,"chore(travis): add commitplease validation to ci-checks 

This will provide feedback to contributors without getting in the way of writing invalid commit messages locally. 

The git hook integration is turned off.

Committers who push directly to the repo can be expected to use correct commit messages ;) Most changes go through PRs anyway.

Note that ""Merge commit"" messages and everything starting with ""WIP"" is always allowed by commitplease. Follow issue https://github.com/jzaefferer/commitplease/issues/101 for more info.

Related to #14888 
Closes #16097",False
25bf1ef07cc76116ce77a5727c97c7597bfc480b,2017-07-12 14:45:09,Martin Staffa,"chore(doc-gen): insert current tagged version if missing from list of all versions

In commit ce49edc08b3d642f3768f4282d391062d2f83037, we switched to npm info (now yarn info)
instead of the local git repository information to get the list of currently available versions for
the docs app. This means that during a release the version that is currently tagged is not yet
available on npm, and therefore our list of available versions is incomplete.

We now simply add the current build version (read from build/version.json) to the list of all
versions if it fulfills the following conditions:

- it is not a snapshot build
- it is not already part of the list of all versions (i.e. if you are building locally on a tagged commit)

Closes #15741
Closes #16099",False
7f2accaa3aed18e811338c9593fb363808c2b40d,2017-07-11 21:02:12,Nikos Katsos,"fix($http): do not throw error if `Content-Type` is not `application/json` but response is JSON-like

Previously, when the response data was JSON-like, `$http` would try to
`JSON.parse` them and throw if they were not actually JSON. This happened even
if the `Content-Type` header was not `application/json`. As a result, it was not
possible to send `text/plain` data that looked like JSON (e.g. `{abcd}`).
The reason for not relying solely on the `Content-Type` is that many users serve
JSON data without proper headers.

This commit fixes it by returning the raw response text if `$http` fails to
parse a JSON-like response, unless the `Content-Type` header has been explicitly
set to `application/json` (in which case it will still fail with an error).

Fixes #16027

Closes #16075",False
c8793431b600338edc382db1ce0020b5c9d5382f,2017-07-11 19:04:46,Martin Staffa,"docs($rootScope.Scope): improve wording in $watch

Closes #16050",False
77b302ab00b28294d31948cfcb702219b84c9227,2017-07-11 12:18:49,Eyal Ronel,"docs($resource): add missing closing square bracket in example

Closes #16090",False
af83c1541cf5fbe97e1f15d891977975af003020,2017-07-06 22:36:34,z.ky,"docs(ngRepeat): correct typo

Closes #16088",False
e872f0ed36f4885d9ea35dd0ebce5cc8418f5b21,2017-07-04 17:50:48,Frederik Prijck,"feat($http): allow differentiation between XHR completion, error, abort, timeout

Previously, it wasn't possible to tell if an `$http`-initiated XMLHttpRequest
was completed normally or with an error or it was aborted or timed out.
This commit adds a new property on the `response` object (`xhrStatus`) which
allows to defferentiate between the possible statuses.

Fixes #15924

Closes #15847",False
122d89b2401fadf4f6a07a906d3d25324b7d859e,2017-07-04 16:03:00,Martin Staffa,"docs(ngOpen): improve example, correct browser compat note

Firefox supports details since version 49",False
1991e77e43e09b55792af5ca082482d2f0cfaf05,2017-07-03 17:20:58,Georgios Kalpakas,docs(changelog): add release notes for 1.6.5,False
57a972d8999017a17e7d13b27d98bc8416ea9a88,2017-07-03 14:37:10,ksvitkovsky,"feat($compile): overload `.component()` to accept object map of components

Register multiple components with single call as it is possible with other module units.

Closes #14579 
Closes #16062",False
cdaa6a951b8fce67673bec224a7ad1f24f0a05bf,2017-07-03 14:34:17,Jason Bedard,"fix($timeout/$interval): do not trigger a digest on cancel

Previously, `.catch(noop)` was used on a rejected timeout/interval to prevent an unhandled rejection error (introduced in #c9dffde1cb). However this would schedule a deferred task to run the `noop`. If the cancelling was outside a digest this could cause a new digest such as with the ng-model `debounce` option.

For unit testing, this means that it's no longer necessary to use `$timeout.flush()` when a `$timeout` has been cancelled outside of a digest. Previously, this was necessary to execute the deferred task added by `.catch(noop).
There's an example of such a change in this commit's changeset in the file `/test/ngAnimate/animateCssSpec.js`.

Fixes #16057
Closes #16064",False
bf0af6dbb16d9c405338d48bc6f194626c99c4f3,2017-06-30 15:28:30,davesidious,"docs($log): add note about blackboxing

Add browser-agnostic hint about blackboxing and the benefits it brings developers when using $log.

Closes #15592",False
62c9d1da7a2d3bfe0c28e80c1b6322edf37232da,2017-06-29 14:32:58,Idan Cohen,"docs(misc/FAQ): correct misspell

The brackets are still just 'angular' :-)

Fixing over-correction made in [this PR](https://github.com/angular/angular.js/commit/03043839d5a540b02208001fe12e812dfde00a8e)

Closes #16070",False
8deff89e5f8dc91741dab734bd02bf40e04f70d5,2017-06-29 14:21:09,Martin Staffa,test(ngOptions): ensure options are only painted once on compile,False
65728383f35d8516558ab94a913a0a604579c93f,2017-06-29 14:21:09,Pol Bonastre,"perf(ngOptions): prevent initial options repainting

Avoid double execution of `updateOptions()` method,
which causes a complete repainting of all `<option>` elements.

Fixes #15801
Closes #15812
Close #16071",False
a772b94b0a4429051bf85b01ed74444e7ecfd747,2017-06-28 10:12:28,Jason Bedard,chore(benchmarks): add $watchCollection tests,False
423acc2c677411b47338be7c577caca795ebad79,2017-06-28 10:12:28,Jason Bedard,chore(benchmarks): remove no longer applicable tests and literal watching workarounds,False
a03b75c6a812fcc2f616fc05c0f1710e03fca8e9,2017-06-21 20:04:37,Jason Bedard,"refactor($browser): remove workaround for old ff bug

- https://bugzilla.mozilla.org/show_bug.cgi?id=407172 was fixed in ff 40

Closes #16065",False
e58bcfab99450d2c4777d87a7ddfea19b9f38b5c,2017-06-13 15:10:09,Martin Staffa,chore(grunt): increase task readability,False
4015e0fde5bb0005d9812bdd1fb5c6496f5b1944,2017-06-13 15:10:09,Martin Staffa,"chore(travis): don't build package for the ""unit"" job

Source test:unit do not need built or packaged code,
and, and tests:docs only need built code.",False
030ae660bb4bf0adadc040750fcc97062a8ed9a2,2017-06-13 15:10:09,Martin Staffa,"chore(travis): use ""karma-spec-reporter""

dots reporter creates lots of empty space that makes it tedious to scroll
through the logs. ""Spec"" is configured to only report on failures.",False
b85926b33f57882a917b96fd8a5f97a8a057f6d4,2017-06-13 10:37:00,Jason Bedard,test($parse): add one-time/interceptor tests,False
b12a0b7652f4161375fd9a535d2832dd1f09817a,2017-06-13 10:00:36,Jason Bedard,"fix($parse): do not shallow-watch inputs when wrapped in an interceptor fn

Fixes #15905
Closes #16018",False
464dde8bd12d9be8503678ac5752945661e006a5,2017-06-12 19:29:20,Martin Staffa,"fix(Angular): deprecate angular.merge 

This function has problems with special object types but since it's not used in core,
it is not worth implementing fixes for these cases.
A general purpose library like lodash (provides `merge`) should be used instead.

Closes #12653
Closes #14941
Closes #15180
Closes #15992
Closes #16036",False
42299e9f6dbe5f0f6f73e01c96a9e97419aa365d,2017-06-12 17:32:02,Saurav Bhattacharya,"docs(external-resources.ngdoc): fix broken link

Closes #16042",False
53fb909068fc391d969bdcd039f39e249cdd6a8a,2017-06-12 17:09:13,Georgios Kalpakas,"test(ngMock): fix Firefox craches on Travis

This test keeps causing Firefox 47 (currently used on Travis) to crash and fail
the build. The test passes locally (on Firefox 53). Lowering the loop count from
1000 to 100 seems to fix the issue.
(Note: The crach only affects the mocked implementation of `$interval` and does
not happen locally.)

Closes #16040",False
420ceb6e485441d0953fc5ca415a1b93b017b776,2017-06-06 16:56:05,Peter Bacon Darwin,"chore(jenkins): do not publish to code.angularjs.org snapshot

While the firewall continues to block the update ports
we will not try to publish there. This will be fixed when we move to hosting
the sites on Firebase.

This means that successful builds on master will not automatically update
code.angularjs.org, this will affect:

* https://code.angularjs.org/snapshot, which people often use to check latest features
* https://docs.angularjs.org, which is supposed to display the docs for the latest master

As it turns out we can manually partially trigger an update by browsing to
https://code.angularjs.org/gitFetchSite.php but we just can’t guarantee that we will update
both the round robin servers.",False
32f464531472ca7b5aa0dc81c5f6421096012201,2017-06-06 15:58:34,Lucio Martinez,"fix(ngMock/$interval): add support for zero-delay intervals in tests

Previously, trying to test code thaat contained zero-delay intervals (e.g.
`$interval(fn, 0)` or `$interval(fn)`) would result in an infinite loop.
This commit avoids the infinite loop, by treating zero-delay intervals as one
second intervals (except for the initial trigger, where they can also be
executed with `$interval.flush(0)`).

Fixes #15952

Closes #15953",False
e5c5b4a1311e9e68319e3cbe9e6c6f3dbf66c3d4,2017-06-06 15:38:05,Georgios Kalpakas,"chore(i18n): update CLDR to v30.0.1

Fixes #15976

Closes #15997",False
5d5fd6292a1383b6eb3916ec6e7f961de02423d8,2017-06-06 15:38:03,Georgios Kalpakas,"chore(i18n): fix parser for currency patterns without fraction digits

Previously, it was assumed that all currency pattern would have fraction digits.
However, in [closure-library@b9155d5][1] the `agq_CM` locale was modified to
have such a pattern (namely `#,##0\u00A4`).
This commit modifies the parser implementation to account for pattern without a
decimal point (and thus no fraction digits).

[1]: https://github.com/google/closure-library/commit/b9155d5966a228cb33f367c30c275c833b30e3ff#diff-02793124214ad0470ccea6f86b90d786R711",False
7fbbacc104dfb142f560bb1a162dac6d8a4952a9,2017-06-06 15:37:35,Georgios Kalpakas,chore(i18n): fix relative paths in scripts,False
1df736e2561b9e061a218529fb1b47cfc55a5d84,2017-06-06 15:37:35,Georgios Kalpakas,test(i18n): remove bad assertion,False
7673ca7d158fffdd8cd0e8ecb1f36901fb471c84,2017-06-06 01:32:03,Peter Bacon Darwin,"fix($sanitize): use appropriate inert document strategy for Firefox and Safari

Both Firefox and Safari are vulnerable to XSS if we use an inert document
created via `document.implementation.createHTMLDocument()`.

Now we check for those vulnerabilities and then use a DOMParser or XHR
strategy if needed.

Thanks to @cure53 for the heads up on this issue.",False
e65928eecb3443943e3f9431e394e9bc59787952,2017-06-05 23:53:12,Martin Staffa,"docs($compile): add more info about optional bindings

This centralizes the info about optional bindings.
Also adds more examples to the $compile:iscp error.

Closes #15989
Closes #16025",False
3bce707421464c320e38fe758a6143003ce87522,2017-05-31 22:07:31,Martin Staffa,docs(ngRepeat): highlight track by expression position,False
b4651e5278cccba79af9376c0cfe0b4313d3967b,2017-05-25 19:44:31,Michał Gołębiowski,"test(support): verify support tests results in all tested browsers (#16008)

Closes #16008",False
aef3ef7b0380701323edac83b79f66fc44e382e3,2017-05-25 10:12:21,Jason Bedard,test($parse): reorganize $parse tests,False
b5118ac6a9e0a327b31094b3fdcdc0432b23ad2f,2017-05-25 10:12:21,Jason Bedard,"fix($parse): always re-evaluate filters within literals when an input is an object

Fixes #15964
Closes #15990",False
33cd29b3a30239f8836381f3163e5b9ff233d6b4,2017-05-24 13:55:30,Michał Gołębiowski,chore(testabilityPatch): fix a typo,False
667d4734fcf7a58a58d29bd87fac32a7831df184,2017-05-24 13:44:29,Michał Gołębiowski,"test($log): run all $log tests in IE9 & non-IE9 logging mode (#15995)

In IE 9 console methods don't inherit from Function.prototype and, hence, don't
have apply. Until recently IE 9 logging in AngularJS was restricted to the
first 2 parameters but that changed as we could just reuse
Function.prototype.apply everywhere, creating one code path for all browsers.
Therefore, we can now run all tests in modes where apply exists on logging
methods and where it doesn't.

Ref #15911
Ref b277e3ead7296ae27106fe7ac37696635c6bfda1
Closes #15995",False
837acd14e005c79d8e79f59a0075075f125da50c,2017-05-22 16:37:52,Thomas Grainger,"fix(*): correctly detect Error instances from different contexts

Previously, errors thrown from different contexts (such as an iframe or
webworker) were not detected as `Error` instances and handled accordingly.
This commit fixes it by introducing an `isError()` helper, that is able to
correctly detect such instances.

Fixes #15868

Closes #15872",False
63b6d64a606c9e2fd09a337f7e00229d1914a7a3,2017-05-22 14:20:20,Sercan Eraslan,"docs(guide/component): remove redundant empty controller from example

There is no need for empty controller functions on components, since this is the
default.

Closes #16003",False
762580ff347e733397c70cb192ca023e7d06f581,2017-05-19 17:10:04,BobChao87,"fix(orderBy): guarantee stable sort

If a user-provided comparator fails to differentiate between two items, fall
back to the built-in comparator (using the tie-breaker predicate).

Fixes #14881

Closes #15914",False
a86a3195b47264fb683a8700e492cff2de81d45a,2017-05-17 12:52:34,Martin Staffa,"chore(*): update protractor

Update protractor to latest 5.1.2 to make it work with Chrome 58 on Jenkins.
This protractor version is not compatible with FF 53 and directConnect, but this should be irrelevant as Travis does not use directConnect and on Jenkins we don't test FF.

Closes #15991",False
2acea11a17b63c1622daa7681c0355eef101ab4e,2017-05-15 16:59:13,Martin Staffa,"chore(ci): disable unit testing on Firefox

Related to https://github.com/angular/angular.js/issues/15987

Closes #15988",False
9bcdfcfe17f2655b11350aad5846a9a3cc481cc2,2017-05-12 20:39:33,Georgios Kalpakas,"docs(*): fix dangling links

Closes #15984",False
66945e217eef76c9321ca4750921196fdf0851cc,2017-05-12 20:39:32,Georgios Kalpakas,"docs(form): improve the docs for `FormController.$setValidity()`

Fixes #15963",False
cd5efa095e448dfe179f8cd3ed34988ee34fa271,2017-05-11 14:10:16,tsclaus,"docs(ngRepeat): fix argument name in comment to match actual argument (element --> clone)

Closes #15975",False
e79c472fdd765000ac82a3c99b678a96eeccb588,2017-05-11 14:04:36,Jake Danforth,"docs(error/badrestrict): fix typo (of --> or)

Closes #15979",False
e1dd00e4ef4fbdb255698908ca0ac7d7f1aa3968,2017-05-10 17:40:23,Martin Staffa,"chore(*): update jasmine-core to 2.5.2

This might resolve an issue where Firefox 51+ fails on Jenkins at this
test: https://github.com/angular/angular.js/blob/8a89586bede0256494cb3027d856f1ebf592afde/test/ng/directive/ngOptionsSpec.js#L2891

The failure can also be reproduced locally when running the whole test suite with the
Firefox window unfocused. With 2.5.2, the failure happens too, but much less
frequent.

Latest jasmine (2.6.2) has problems with some browsers, see here:
https://github.com/jasmine/jasmine/issues/1327

Closes #15978",False
8a89586bede0256494cb3027d856f1ebf592afde,2017-05-10 16:56:49,David Fuka,"docs(errors/badjsonp): fix typo

Closes #15977",False
d0d829899c4bcdf4b322d45245d7b811cd4cb855,2017-05-10 10:24:15,Jason Bedard,"test($rootScope): add $watch/$watchCollection/$watchGroup tests

Closes #15949",False
30eb1943419038250627fb93a7c8f411e6f79231,2017-05-09 18:38:35,Michał Gołębiowski,"test(*): run class-related tests everywhere; fix eval syntax

1. Wrap an evaled class definition in parens; previously they weren't; the test
   wasn't failing only because it was disabled everywhere outside of Chrome
   and Chrome <59 incorrectly accepted such input.
2. There's no reason to restrict class-related tests just to Chrome; now they
   run in every browser that supports ES6 classes. The classes support test
   was modified to check not only if a class definition parses but also if
   it stringifies correctly which is required by AngularJS. This restriction
   disables class-related tests in current Firefox (53) but will work in v55
   or newer.

Closes #15967",False
2f3bd89a5184e9140fc680a46a301caa22d14199,2017-05-09 12:48:38,musclor,"docs(guide/component): remove redundant unit test

Fixes #15968
Closes #15974",False
301fdda648680d89ccab607c413a7ddede7b0165,2017-05-07 23:54:07,Lucas Mirelmann,"fix(httpParamSerializerJQLike): Follow jQuery for `null` and `undefined`

Follow jQuery when serializing `null` and `undefined`.

Closes: #15969
Closes: #15971",False
1069086299fd784fae6cb16c59036d7f328b8d6e,2017-05-06 21:20:42,Michał Gołębiowski,"chore(*): update all Karma-related packages except Karma

The updated karma-chrome-launcher adds support for ChromeHeadless &
ChromeCanaryHeadless launchers; test with:

    karma start karma-jqlite.conf.js --browsers=ChromeCanaryHeadless

The updated karma-firefox-launcher disables multi-process which may increase
stability on Jenkins.

Closes #15966",False
2a8a29ac43361fe6d6d1fa6ef3cf8113d5359e2f,2017-05-04 16:32:48,Valentin,"docs(guide/templates): add missing closing `<script>` tag

Closes #15961",False
d21acafa7751da92856052fc44d36d38120444ea,2017-05-02 18:11:58,Leonardo Souza,"docs(guide/interpolation): fix typo in markdown (code highlight)

Closes #15935",False
8f563e2ecf7a882f8306225e8c781fafad42ecb5,2017-04-28 15:18:03,Georgios Kalpakas,"perf(animate): avoid unnecessary computations if animations are globally disabled

Closes #14914",False
c09e613aac8edf98e7a1d3273784418a264c9906,2017-04-28 15:18:02,Georgios Kalpakas,"feat($animate): add support for `customFilter`

This commit adds a new `customFilter()` function on `$animateProvider` (similar
to `classNameFilter()`), which can be used to filter animations (i.e. decide
whether they are allowed or not), based on the return value of a custom filter
function.
This allows to easily create arbitrarily complex rules for filtering animations,
such as allowing specific events only, or enabling animations on specific
subtrees of the DOM, etc.

Fixes #14891",False
913cf794c974dd8953acd18eee48ad5947486c81,2017-04-28 15:17:49,Georgios Kalpakas,perf($animate): do not retrieve `className` unless `classNameFilter` is used,False
17fb15d7a40942defad1dfb6d7d72a773d43a5fa,2017-04-28 15:17:49,Georgios Kalpakas,"docs(guide/animations): list missing animated directives (and other improvements)

- List missing animation-aware directives.
- Fix/Improve wording/formatting.
- Fix typos.
- Limit lines to 100 chars.",False
9341671d78673e3aff0f90e2d791423dab5aabe5,2017-04-28 14:50:27,Dimitri Tarasiuk,"docs($q): fix typo in `qFactory` documentation

Closes #15946",False
4a12ae7b3617e7c5389cf67ce3e3c7b309fcd9b9,2017-04-28 01:16:35,Georgios Kalpakas,"fix(angular-loader): do not depend on ""closure"" globals that may not be available

Code that is distributed as part of both `angular.js` and `angular-loader.js`
should not depend on ""closure"" globals that may not be available in
`angular-loader`.

Fixes #15880

Closes #15881",False
b496daabe692ed6e1d1acf1c797845e669584c21,2017-04-28 01:05:26,Martin Staffa,fix(ngOptions): re-render after empty option has been removed,False
6fc0f02ad24a6ac8bef517210e6d7e679c3988fd,2017-04-28 01:05:26,Martin Staffa,"feat(select): expose info about selection state in controller

This allows custom directives to manipulate the select's and
ngModel's behavior based on the state of the unknown and
the empty option.

Closes #13172
Closes #10127",False
2fdfbe729660a0a55df96f3eb6f833d7a6e709a9,2017-04-28 01:05:26,Pol Bonastre,"fix(ngOptions): allow empty option to be removed and re-added

This bug was reported as part of angular/angular.js#15801",False
f90b48d7d8683a2a584b2a7e0453a1fd92ada26b,2017-04-27 19:30:49,Georgios Kalpakas,"chore(docs-app): fix vertical scrolling offset after recent re-design

Previously, the `yOffset` pointed to the `<header>` element, which had a height
of 0 (since all its children have fixed positions). This caused scrolled items
to have 0 vertical offset, essentially hiding the top part behind the static
`<nav>` items.
This commit fixes the vertical scrolling offset, by setting `yOffset` to the
last (lowest) `<nav>` item.

Closes #15945",False
dcc57f1718b1b52a22ad833de4d093bcb418064b,2017-04-26 16:18:36,Martin Staffa,"docs(select): add known issue about Firefox selection behavior

Related to #9134",False
602fa698a54ea82628617561aab30099b6cf93ef,2017-04-26 00:26:10,Michał Gołębiowski,"refactor($injector): require standard class stringification

ES6 classes now require Edge 14 or newer to work.

Closes #15911",False
b277e3ead7296ae27106fe7ac37696635c6bfda1,2017-04-22 19:03:05,Michał Gołębiowski,"feat($log): log all parameters in IE 9, not just the first two.

IE 9 lacks apply on console methods but it's possible to borrow the apply
method from Function.prototype.",False
e4c2fe6d427cb1540977520f7e31a7e7a30acfda,2017-04-22 19:01:36,Michał Gołębiowski,"refactor(*): remove workarounds for IE <9, update IE/Edge-related comments",False
ff0e61166d3dca59351e3913e0360c24d1bce99c,2017-04-22 00:08:57,Martin Staffa,"refactor(select, ngOptions): extract common methods; make consistent",False
4b06637f703d2a94baedfda64a8e3ac8eea26403,2017-04-22 00:08:57,Martin Staffa,chore(matchers): improve output for toBeMarkedAsSelected,False
5878f07474755cb3df1e727cef4e7e4716f44783,2017-04-22 00:08:57,Martin Staffa,"fix(ngOptions): select unknown option if unmatched model does not match empty option

When a regular / ngOptions select has an explicit *empty* option, this option can be selected
by the user and will set the model to `null`. It is also selected when the model is set to
`null` or `undefined`.

When the model is set to a value that does not match any option value, and is also not
`null` or `undefined`, the *unknown* option is inserted and selected - this is an explicit marker
that the select is in an invalid / unknown state, which is different from an allowed empty state.

Previously, regular selects followed this logic, whereas ngOptions selects selected the empty
option in the case described above.

This patch makes the behavior consistent between regular / ngOptions select - the latter will now
insert and select the unknown option. The order of the options has been fixed to unknown -> empty
-> actual options.",False
8d7c7f4a8eed3dbf46ecb277c54b5c0f1eb1958e,2017-04-22 00:08:57,Martin Staffa,"test(select, ngOptions): add more tests for ""required"" with ""empty"" or ""unknown"" option",False
080357e906e2ec34e669091ef345fc4442e23ea0,2017-04-21 17:09:36,Jacob Hansson,"feat(ngMock): describe unflushed http requests

The current implementation of $httpBackend.verifyNoOutstandingRequest
gives an integer number describing how many requests are unflushed.

While it's superficially easy to solve test errors from that message
by simply adding an additional $httpBackend.flush(), if a developer
is truly not expecting the code to make further requests this is
not ideal.

This change explicitly prints out which additional requests remain
unflushed in the error message, helping her determine if the code
needs changing, or if an additional flush is appropriate.

Before this change:

    Unflushed requests: 1

After this change:

    Unflushed requests: 1
      GET /some

Closes #10596
Closes #15928",False
69c3faf40589b4ac9e7fa75f3b4fb83349aba60d,2017-04-19 16:35:25,Martin Staffa,test(core): expect that Edge cannot auto-bootstrap in extensions,False
7efed006327df7e6f0784b54e856f0a4e87331e5,2017-04-19 16:35:25,Martin Staffa,test(input): exclude tests that are only failing on Edge,False
496138f12a03028daa37bb23f63cb61826c857f6,2017-04-19 16:35:25,Martin Staffa,"chore: test on Microsoft Edge

Closes #13687
Closes #14401",False
37a2c20bb85f6a2ffd3c6338116c67ced6e5c022,2017-04-18 12:58:20,TheHalcyonSavant,"docs(guide/migration): remove duplicate entry for commit 13c252

Closes #15919",False
8eb925d7c58a64dd2a63e68e706a9dda309fcfd8,2017-04-12 19:30:57,Michał Gołębiowski,"chore(browserstack): Update OS X, make iOS 8-10 available to test",False
ad0bb83819458563eac9729b448894164cc2da53,2017-04-12 16:50:43,Michał Gołębiowski,"chore(browserstack): Update browserstacktunnel-wrapper, fix options

Only the latest version of the package works correctly (the backend for it at
BrowserStack is not versioned) and the options have changed in the new version
of the package.

Also, iOS 8.0 is no longer available on BrowserStack, only 8.3 is. Instead,
this commit changes it to 9.3 as we shouldn't be testing on 8 anymore anyway.

Closes #15892",False
e23782b8c23fc766efb29a87a25bc054af3159fd,2017-04-12 14:51:10,Martin Staffa,"docs($http): correct and clarify default transforms

- baddata error described incorrect http behavior, and workarounds
- httpProvider defaults were missing transformResponse / transformRequest
- http was not clear about JSON detection strategy

Closes #15897 
Closes #15906",False
d0622d06499ae514dd618f593e103d9e8857b217,2017-04-08 17:40:21,Vigneshkumar Chinnachamy,"docs(guide/Developer Guide): Update twitter handle

Replaced the old Angular twitter handle with the new one.

Closes #15903",False
e812b9fa9ec7086ab8d64a32d86f6e991f84bc55,2017-04-07 20:53:19,Eli Sadoff,"docs(filter/uppercase): add an example

I saw that the uppercase filter had no example so I decided to add a minimal example to explain how the uppercase filter works.

Thank you very much to @narretz for helping me through this process.

Closes #15885",False
6ee7c29ca74e416bd53ca6174e2003a001e1356c,2017-04-07 18:32:48,Martin Staffa,"docs(filter/filter): remove duplicate 'the'

Closes #15893",False
0fbb1187b8d9f04576c146221aaba95e983bdac7,2017-04-05 18:43:28,Atef Ben Ali,"docs(guide/directive): delete redundant 'the'

Closes #15891",False
136a42abc162a64ac57ff45417553b58a031990b,2017-04-03 13:49:35,Atul Shimpi,"docs(README): improve vocabulary and orthography

Closes #15876
Closes #15875",False
06516d7c27a32614b1d45070c409e2d0112c9a11,2017-04-02 18:42:46,michaelb958,"docs(guide/i18n): fix links to CLDR

The old link target is dead, deceased, pushing up daisies. I quote:
> The cldr-tmp repository is no longer available.
> For access to CLDR sources and data, please see the [CLDR pages](link to new one).

Closes #15879",False
617b36117a1e66e29deca19c347dedd096316ae9,2017-03-31 14:17:45,Martin Staffa,docs(changelog): add release notes for 1.6.4,False
189461f9bf6fda18ddbd16c42f2e959cf939c3da,2017-03-31 13:06:19,Jason Bedard,"fix($parse): standardize one-time literal vs non-literal and interceptors

Previously literal one-time bindings did not use the expression `inputs`, causing infinite digest issues with literal values. This often forces the use of deepEquals when watching one-time literals.

`ng-class` is one example of deepEquals which is no longer required.

This one-time/literal behavior is now also consistently propogated through interceptors.

Closes #15858",False
93879b3c721f4c0273c90e9bfeb368425b0078c4,2017-03-31 12:47:55,Jason Bedard,"fix($parse): fix infinite digest errors when watching objects with .valueOf in literals

Closes #15867",False
c2b8fab0a480204374d561d6b9b3d47347ac5570,2017-03-31 10:52:22,Jason Bedard,fix($rootScope): provide correct value of one-time bindings in watchGroup,False
f403925ee034be3c95d3a0f78fa11dcfc905ae13,2017-03-29 18:19:00,bennycoomans,"docs(guide/Migrating from Previous Versions): fix typo ""indentifiers""

Closes #15871",False
1e841a89c1c999a9d819a14d729e6eb7c2d40bfd,2017-03-29 17:45:26,Michał Gołębiowski,"docs($compile): remove a mention of preassigning bindings in controllers

The deprecation warning is no longer needed as the feature has been removed
in 1.7.

Closes #15870",False
2b0c0505e222e28449829e6f4f49826b1d1ce59e,2017-03-28 11:59:02,Jason Bedard,"refactor($parse): move duplicate $parse interpreter/compiler logic into Parser
- the construction of the AST is now in the Parser
- the assigning of the literal and constant flags is now in the Parser
- remove unused references to the lexer, $filter and options on the Parser",False
9d74f0fdcb44aa597b81a2bde967d4c37b60dce2,2017-03-28 11:55:22,Jason Bedard,refactor($compile): reuse shared simpleCompare method,False
f1d0f0386301adc7dea029253d1c0277aa451f37,2017-03-28 11:23:12,Jason Bedard,refactor($parse): make use of local variable instead of refetching property,False
b0f6afcdacc53fd91b37ad0c5d70544f7e37ebde,2017-03-28 11:17:25,Jason Bedard,test($compile): add test for #15833,False
2931a6df034ad0b93b24718e86814e4592ade43e,2017-03-28 11:17:15,Jason Bedard,refactor(ngModel): use local scope param in watcher,False
bf5c2eef34a314d5d2298fdcb6deaa7282cc563f,2017-03-27 15:25:56,Michał Gołębiowski,"fix(jqLite): make jqLite invoke jqLite.cleanData as a method

The previous implementation of jqLite didn't use cleanData from the jqLite
object but instead used a cached version which maede it impossible to
monkey-patch jqLite.cleanData similarly to how you can do it in jQuery.

The cleanData method is not meant to be called directly by userland code;
its purpose is mainly to be able to be monkey-patched; therefore, the previous
implementation didn't make a lot of sense.

This commit enables one of the tests so far run only with jQuery to run with
jqLite as well.

Ref #8486
Ref #8695
Closes #15846",False
dcdd5def8ff896776f8d89fc4182d228dc1d3d46,2017-03-27 14:53:49,Michał Gołębiowski,"test(jQuery): run tests with jQuery 2.1, 2.2 & 3.2

Also, update jQuery 2.2.x mentions in the tutorial to 3.2.x.

Closes #15843",False
f3aa1d183a73e4eeeb105d861bbf2f985449ed94,2017-03-25 21:38:38,Peter Mertz,"docs($interval): Update interval promise docs

It's currently not clear when or why the promise returned by `$interval` resolves. This updates the docs to be more specific.

Closes #15862",False
80077f35d042e04b6da19a6cb91b659334b8246f,2017-03-24 17:15:28,Martin Staffa,"docs(faq): clarify the versioning strategy

- When do breaking changes appear
- Relationship with Semver
- Compatibility of modules

Closes #15845",False
32f38a33b68144e32021fecad44c788f8bab5e33,2017-03-24 15:14:51,Martin Staffa,docs($animate): remove obsolete error doc,False
9de0842719630b8e42fc9874717bbd41aee69309,2017-03-24 15:14:51,Martin Staffa,"chore(doc-gen): report on missing or obsolete error docs

Closes #12527",False
b9d2b30808db367af1c31fa0fa6cef8f1bc086d3,2017-03-23 19:30:37,Rodrigo,"docs(filterFilter): clarify the comparator parameter

Closes #15827",False
3d0abffbc04479fb1c5b704925807ab1bd4d345f,2017-03-23 03:19:51,Michał Gołębiowski,"chore(yarn): rely on Travis built-in Yarn support, update Yarn in Jenkins

On Travis we now rely on built-in Yarn support and we only cache the Yarn cache,
not node_modules. This creates a more stable environment as we don't install
over previous node_modules state but we still won't download packages from the
internet in the second run for the same yarn.lock as Yarn takes packages from
its local cache if they exist there.

We install a new Yarn verison manually on Jenkins; the location of the install
script changed.

Closes #15851",False
c35786ae2634fc82a79dc42f58e138a9d33cf67e,2017-03-22 21:33:44,Martin Staffa,"chore(github): update issue template

Closes #15824",False
60644d5d0533dc85fca6f1d47f1a542922216f3f,2017-03-22 21:19:16,Michał Gołębiowski,chore(*): remove unused docs/bower_components mentions,False
233f47b98a64eda7aaa7083581c9b64b50c6efea,2017-03-22 16:38:05,Michał Gołębiowski,chore($parse): make sure no one changes .toEqual(-0) to .toBe(-0),False
421040588c04a01319a97b2c7289abd5bfbd9607,2017-03-22 16:30:32,Martin Staffa,docs(component-router): give deprecation notice red color,False
f132ce740a869ac68d76e88ab1b2d50a829ed52e,2017-03-22 16:24:55,Jason Bedard,"refactor($controller): remove unused injected $window

Closes #15839",False
5377baf0fccaec52d01481b67c495aa2bd21187f,2017-03-22 16:21:55,Joshua J Wilborn,"docs ($compile): add error documentation for noslot error in $compile

Fixes #15790
Closes  #15828",False
bf7685abbd9a7056342add69b259fed3c7816ade,2017-03-22 16:07:17,Michał Gołębiowski,"test(jqLite): test not firing $destroy on jqLite.cleanData with jQuery UI

So far it wasn't tested that Angular's logic for skipping it triggering
the $destroy event on jQuery.cleanData in the replaceWith internal function
works correctly when Angular is not the last one to patch the cleanData method
(e.g. if jQuery UI does the patching later). This commits adds the relevant
test.

Ref #8486",False
ba2e0d3d9b40c5023b85530b1fe401e3fea53278,2017-03-22 16:02:28,Michał Gołębiowski,"docs(faq): document the AngularJS/jqLite deprecation strategy

Fixes #15282",False
0d9d57d4184eb3105e390d96e2d1aa2230874604,2017-03-21 21:04:33,Raphael Jamet,"docs($sce): overhaul the `$sce` service documentation

A big docs update around `$sce`:
There is a lot of content in there that is often misunderstood, and some of the
documentation starts to get really old too. Also fixed capitalization,
formatting, indentation and uniformized `@param` descriptions.

Closes #15735",False
d96e58fdc87572225846c181e45e700ec2b55c40,2017-03-21 16:13:48,Richard Kaufhold,"feat($resource): add `hasBody` action configuration option

By default, only `PUT`, `POST` and `PATCH` requests have a body, but you can use
`hasBody` to configure any action to either have or not have a body, regardless
of its HTTP method.

Fixes #10128

Closes #12181",False
70dbb158469541a6f712ebe03b970a4a4d1abe57,2017-03-20 19:56:14,Georgios Kalpakas,docs($sanitize): fix incorrect test description,False
d94153939cb9e78621feaec8bb315f899e13f6b8,2017-03-20 16:20:18,BobChao87,"docs($resource): encode `)` in link

JSDoc to HTML converter was treating the close parenthesis in
`[MDN](...#toJson()_behavior)` as the final close parenthesis, thus resulting in
a broken link.
This commit fixes it by percent-encoding the parentesis in the link address.

Closes #15825",False
eacf06f5cfa69989b5277dd77007c79c96721160,2017-03-20 16:15:06,xfg,"docs(ngMock/$httpBackend): add `catch()` block to example

Make the `it should fail authentication` test pass.

Closes #15822",False
bb2a247aa51d750d2348b8a0bccc712ec742749c,2017-03-20 16:02:39,TheRealMaxion,"docs(tutorial/step_09) fix typo

Closes #15829",False
24c94b83fad3aa1e4c555448e3dbff2e0b399e04,2017-03-20 15:57:44,TheRealMaxion,"docs(tutorial/step_04): fix typo (each --> its)

Closes #15826",False
0c3620bbf5e654a0f1b07953b62f6619c31c06e4,2017-03-15 22:49:06,Vitaliy,"docs($interpolate): fix typo

There was missing `JS` at line 141.

Closes #15817",False
38f8c97af74649ce224b6dd45f433cc665acfbfb,2017-03-15 20:08:44,Michał Gołębiowski,"fix($compile): remove the preAssignBindingsEnabled flag

Closes #15782

BREAKING CHANGE:

Previously, the `$compileProvider.preAssignBindingsEnabled` flag was supported.
The flag controlled whether bindings were available inside the controller
constructor or only in the `$onInit` hook. The bindings are now no longer
available in the constructor.

To migrate your code:

1. If you haven't invoked `$compileProvider.preAssignBindingsEnabled()` you
don't have to do anything to migrate.

2. If you specified `$compileProvider.preAssignBindingsEnabled(false)`, you
can remove that statement - since AngularJS 1.6.0 this is the default so your
app should still work even in AngularJS 1.6 after such removal. Afterwards,
migrating to AngularJS 1.7.0 shouldn't require any further action.

3. If you specified `$compileProvider.preAssignBindingsEnabled(true)` you need
to first migrate your code so that the flag can be flipped to `false`. The
instructions on how to do that are available in the ""Migrating from 1.5 to 1.6""
guide:
https://docs.angularjs.org/guide/migration#migrating-from-1-5-to-1-6
Afterwards, remove the `$compileProvider.preAssignBindingsEnabled(true)`
statement.",False
c80fa1cfe13b3b08b934e7e8ee073661f2b1ab8b,2017-03-14 18:17:39,Chirag Bhatia,"fix($http): throw more informative error on invalid JSON response

Fixes #15695

Closes #15724",False
11d9ad1eb25eaf5967195e424108207427835d50,2017-03-14 16:18:54,Martin Staffa,"fix(ngTouch): remove ngClick override, `$touchProvider`, and `$touch`

Closes #15761
Closes #15755

BREAKING CHANGE:

The `ngClick` directive from the ngTouch module has been removed, and with it the
corresponding `$touchProvider` and `$touch` service.

If you have included ngTouch v1.5.0 or higher in your application, and have not
changed the value of `$touchProvider.ngClickOverrideEnabled()`, or injected and used the `$touch`
service, then there are no migration steps for your code. Otherwise you must remove references to
the provider and service.

The `ngClick` override directive had been deprecated and by default disabled since v1.5.0,
because of buggy behavior in edge cases, and a general trend to avoid special touch based
overrides of click events. In modern browsers, it should not be necessary to use a touch override
library:

- Chrome, Firefox, Edge, and Safari remove the 300ms delay when
  `<meta name=""viewport"" content=""width=device-width"">` is set.
- Internet Explorer 10+, Edge, Safari, and Chrome remove the delay on elements that have the
  `touch-action` css property is set to `manipulation`.

You can find out more in these articles:
https://developers.google.com/web/updates/2013/12/300ms-tap-delay-gone-away
https://developer.apple.com/library/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_9_1.html#//apple_ref/doc/uid/TP40014305-CH10-SW8
https://blogs.msdn.microsoft.com/ie/2015/02/24/pointer-events-w3c-recommendation-interoperable-touch-and-removing-the-dreaded-300ms-tap-delay/",False
5a13cacf9ff33150e17745dc1e35608daf26f774,2017-03-14 15:00:14,eeeqxxtg,"docs(changelog): fix typo (resourceUrlWhiteList --> resourceUrlWhitelist)

Closes #15809",False
28bad725b122d72fb1f62914a3798d88a6c8e7f1,2017-03-13 22:58:26,Ash Searle,"fix(dateFilter): correctly handle newlines in `format` string

Fixes #15794

Closes #15792",False
1daa4f2231a89ee88345689f001805ffffa9e7de,2017-03-08 19:03:34,Martin Staffa,"fix(Angular): remove `angular.lowercase` and `angular.uppercase`

Closes #15445

BREAKING CHANGE:

The helper functions `angular.lowercase` `and angular.uppercase` have
been removed.

These functions have been deprecated since 1.5.0. They are internally
used, but should not be exposed as they contain special locale handling 
(for Turkish) to maintain internal consistency regardless of user-set locale.

Developers should generally use the built-ins `toLowerCase` and `toUpperCase`
or `toLocaleLowerCase` and `toLocaleUpperCase` for special cases.

Further, we generally discourage using the angular.x helpers in application code.",False
4d43ee3327fe5fbeb6bc3ac3e91426e574d8c25f,2017-03-08 17:17:23,Martin Staffa,docs(changelog): move bootstrap fixes to Bug Fix section,False
a59f46b37db4cc88db9721108f294f31bf71e549,2017-03-08 16:52:32,Martin Staffa,docs(changelog): add release notes for 1.6.3,False
728ce7237241774fede8e46bf810a78b61d5faef,2017-03-08 00:50:01,Pablo Targa,"docs(ngAnimate): update staggering config for use with css animations

Closes #15743",False
b779091ffdfed7a1d5baf292172b09149d9ba407,2017-03-08 00:43:24,diegomrsantos,"docs(guide/migration): add info for 1.4 (ng)Pattern BC

Breaking change was introduced in commit 0e001084ffff8674efad289d37cb16cc4e46b50a.
This content being included in the migration guide is taken from the commit message of commit 0e001084ffff8674efad289d37cb16cc4e46b50a.

Closes #15758
Closes #15765",False
6ccbfa65d60a3dc396d0cf6da21b993ad74653fd,2017-03-05 04:27:04,Raphael Jamet,"feat($compile): lower the `xlink:href` security context for SVG's `a` and `image` elements

Previously, `xlink:href` on SVG's `<a>` and `<image>` elements, was
`$sce.RESOURCE_URL`. While this makes sense for other `xlink:href` usecases, it
was an overkill for these elements.
This commit lowers the `xlink:href` security context for these specific
elements, treating it in the same way as `a[href]` or `img[src]` respectively.
The `xlink:href` security context for other elements is not affected.

BREAKING CHANGE:

In the unlikely case that an app relied on RESOURCE_URL whitelisting for the
purpose of binding to the `xlink:href` property of SVG's `<a>` or `<image>`
elements and if the values do not pass the regular URL sanitization, they will
break.

To fix this you need to ensure that the values used for binding to the affected
`xlink:href` contexts are considered safe URLs, e.g. by whitelisting them in
`$compileProvider`'s `aHrefSanitizationWhitelist` (for `<a>` elements) or
`imgSrcSanitizationWhitelist` (for `<image>` elements).

Closes #15736",False
cc793a1364d5861afd262846ef4c621812ea353c,2017-03-05 04:14:45,mohamed amr,"test(errorHandlingConfig): add tests for `errorHandlingConfig()` (independent of `minErr`)

Closes #15770",False
3dc0096dc4469808bd221610d71febe3f3e52d66,2017-03-03 16:08:58,Michał Gołębiowski,"fix($log): don't parse error stacks manually outside of IE/Edge

IE/Edge display errors in such a way that it requires the user to click in
4 places to see the stack trace. There is no way to feature-detect it so
there's a chance of the user agent sniffing to go wrong but since it's only
about logging, this shouldn't break apps. Other browsers display errors in
a sensible way and some of them map stack traces along source maps if available
so it makes sense to let browsers display it as they want.

Fixes #15590
Closes #15767",False
846fa1cdf64e8d58dc8c7845639906cea48bc828,2017-03-03 15:38:54,jason-larigakis-hs,"docs(guide/Providers): remove confusing section

This part of the guide  is called ""Providers"", which means the section no longer applies.

Closes #15771",False
60e294cbd8f0c34ed03046778a0be3befc6b6982,2017-03-02 13:52:08,Peter Bacon Darwin,"feat(info): add `angularVersion` info to each module

You can now check what version of AngularJS a core module is designed for:

```
var angularVersion = $injector.modules['myModule'].info().angularVersion;
```",False
550f309dba4d3c1530c128b1c97a1678c2be0da1,2017-03-02 13:52:08,Peter Bacon Darwin,"feat($injector): add new `modules` property

The `modules` property is a hash of the modules loaded into the injector
at bootstrap time. This can be used to access the module's info.",False
49aba51e6bfd3f6d59c0f28628cc983d84438cfa,2017-03-02 13:52:08,Peter Bacon Darwin,"feat(Module): add `info()` method

The new `info()` method lets developers store arbitrary information about
their module for consumption later.

Closes #15225",False
e269c14425a3209040f65c022658770e00a36f16,2017-03-01 17:57:17,Martin Staffa,"fix($controller): remove instantiating controllers defined on window

This also removes the likewise deprecated `$controllerProvider.allowGlobals()` method.

Closes #15349
Closes #15762

BREAKING CHANGE:

The option to instantiate controllers from constructors on the global `window` object
has been removed. Likewise, the deprecated `$controllerProvider.allowGlobals()`
method that could enable this behavior, has been removed.

This behavior had been deprecated since AngularJS v1.3.0, because polluting the global scope
is bad. To migrate, remove the call to $controllerProvider.allowGlobals() in the config, and
register your controller via the Module API or the $controllerProvider, e.g.

```
angular.module('myModule', []).controller('myController', function() {...});

angular.module('myModule', []).config(function($controllerProvider) {
  $controllerProvider.register('myController', function() {...});
});

```",False
19bc52127f8393ffccac563b21267adb75c19275,2017-02-27 17:23:44,Peter Bacon Darwin,"fix(Angular): do not autobootstrap if the `src` exists but is empty

In Chrome an empty `src` attribute will be ignored, but in Firefox it seems
happy to prepend the `base[href]` and try to load whatever that is.",False
4f69d38f097fab76e683105d1c758706e6cbe1a9,2017-02-24 22:08:16,Georgios Kalpakas,"fix($sanitize): prevent clobbered elements from freezing the browser

Closes #15699",False
ebe90051eda8a3328e5993cca1663e28d03113d0,2017-02-24 20:23:22,Peter Bacon Darwin,fix(Angular): do not auto bootstrap if the currentScript has been clobbered,False
a649758655843275cc477fb638f8e55f72a4eaa6,2017-02-24 20:22:13,Peter Bacon Darwin,fix(Angular): do not auto bootstrap if the script source is bad and inside SVG,False
c357b1aba6f990820c6789ff43727e4754e7713a,2017-02-24 20:16:27,Peter Bacon Darwin,test(Angular): refactor auto bootstrap tests,False
603b66e1facb59cf4587f0c19112a3e78a4685ff,2017-02-24 15:39:11,Martin Staffa,"docs(changelog): insert release notes for 1.2.32

They were only in the v1.2.x branch.",False
295043d32e27fdea26cfe3f8a9a7d47c5d292f5a,2017-02-23 01:35:44,Martin Staffa,"docs($compile): clarify to which element scope isolation applies

Closes #13556",False
892d236afcf772f2377eac6f75caa8f1e40e3159,2017-02-21 19:50:14,waahhhh,"docs(changelog): correct typo

changed spelling from ""auto-bootstraping"" to ""auto-bootstrapping"".

Closes #15729",False
b7ee5ee3c6050c60058f5bcd895fdd8064091d1b,2017-02-21 01:39:38,Peter Bacon Darwin,"chore(jenkins): disable unit testing on Safari

There is a strange failure in the animation code that only appears to happen
on Safari 10 on OS/X. While we investigate we are disabling this browser
to allow the development (and doc generation) to continue.",False
b55637a8f7b740add594e11cdde2b58943049ba3,2017-02-17 14:56:23,Georgios Kalpakas,"fix($animate): reset `classNameFilter` to `null` when a disallowed RegExp is used

Closes #14913",False
9a2efb7b66e3dc3a1ef43f4ca17a6e2632f51c3e,2017-02-17 14:56:21,Georgios Kalpakas,"fix($animate): improve detection on `ng-animate` in `classNameFilter` RegExp

Fixes #14806",False
db46d244917fe18e25bae2ea13062647fe25432c,2017-02-16 18:58:43,Martin Staffa,"chore(docs-app): add debounce to search input

This fixes issues where the search results do not correctly reflect
the search query. This happens in Firefox when you enter a search query
very rapidly.
There is probably an issue with the async behavior of the search / webworker,
so this is just a workaround.",False
f779230f70d12cbc075971f14acf382a5d3fd1d0,2017-02-16 15:29:35,Keith Walsh,"docs($resource): add minor clarification

Closes #15711",False
62494bae38126392075b5e707b24982aae0418cb,2017-02-15 20:23:51,Martin Staffa,"chore(docs-app): update links in header menu

They are now in the same order as angularjs.org

Closes #14351",False
f85656e934f9eb13cf3332e70fd06745c7ab79fb,2017-02-15 20:23:51,Martin Staffa,"chore(docs-app): update the header style

Also adds a new fixed strip / bar about the AngularJS version

Closes #14963
Closes #15670",False
b9d3185e52292b1d57a7b19800db73accb2f8ff2,2017-02-15 19:55:25,Martin Staffa,"docs(select, ngOptions): add ngAttrSize as argument

Closes #1619",False
43cf54c3a2473af3a26675d99459a6399d873d94,2017-02-15 17:35:15,Martin Staffa,"docs(ngModelController): improve $formatters and $parsers info

Closes #11714
Closes #8194",False
15149c1da1020f139dfcdd50c8e641f8f43088a4,2017-02-15 16:49:06,Martin Staffa,"docs(filterFilter): add note about self-referencing objects in array

Relate #6655, #6319",False
23e747331b0775d91e39abcf0bb0b857accb406f,2017-02-15 16:49:06,Martin Staffa,"docs(guide/directive): clarify which type of matching directives support

Closes #15710",False
71f437c15a606b542536e70c392808e84d982078,2017-02-10 03:08:03,Georgii Dolzhykov,"refactor($rootScope): remove extraneous call to `$parse` in `$evalAsync`

Closes #15682",False
2c7400e7d07b0f6cec1817dab40b9250ce8ebce6,2017-02-09 16:26:59,Michał Gołębiowski,"chore(jenkins): get rid of Opera from the Jenkins build script

The Opera launcher hasn't been installed for ages, but until Karma 1.4.0 the
error of Opera not being able to start was ignored. Karma has fixed the bug and
now Jenkins is failing.

This commit also removes Opera/Opera launcher mentions from the docs. We don't
support Opera officially anymore (it's sort-of supported via being based on
Blink).

Closes #15691",False
2af2607fba4eda8f963f7db2e9b8076ac26129a0,2017-02-09 02:47:26,PRIJCK Frederik (FPRJ),"fix(filterFilter): don't throw if `key.charAt` is not a function

Previously, when an object has keys which are not of type string, `filterFilter`
would throw an exception for trying to call `key.charAt()`, which is a string
method.

This commit checks whether `charAt` is defined before calling it.

Fixes #15644

Closes #15660",False
a0641ea4750819255ccb63693dd0a707751d1d65,2017-02-08 22:35:43,mohamed amr,"feat(errorHandlingConfig): make the depth for object stringification in errors configurable

Closes #15402
Closes #15433",False
538f4606ff32e776b093243fed4af3460df74f2a,2017-02-08 22:14:47,Martin Staffa,"fix(select): add attribute ""selected"" for select[multiple]

This helps screen readers identify the selected options,
see #14419",False
4385e1268a29e34c805e0b6703c327f76455e176,2017-02-08 22:14:47,Martin Staffa,"fix(select): keep original selection when using shift to add options in IE/Edge

In IE9-11 + Edge, the selected options were previously incorrect under the following
circumstances:
- at least two options are selected
- shift+click or shift+down/up is used to add to the selection (any number of options)

In these cases, only the last of the previously selected options and the newly selected
options would be selected.

The problems seems to be that the render engine gets confused when an option that
already has selected = true gets selected = true set again.

Note that this is not testable via unit test because it's not possible to simulate
click / keyboard events on option elements (the events are delegated to the select element
change event), and the problem also doesn't appear when modifying the option elements directly
and then using the selectController API. It seems that this only happens when you manipulate the
select directly in the user interface.

Fixes #15675
Closes #15676",False
ba8b924bf5d8dbe5b4c9a7f937fbf4f4f8718a81,2017-02-08 22:11:23,Martin Staffa,"test($http): ensure json deserialization errors are forwarded to error handler

Since https://github.com/angular/angular.js/commit/e13eeabd7e34a78becec06cfbe72c23f2dcb85f9,
errors thrown from onFulfilled and onRejected handlers are passed to the regular http
error handlers. Before this, JSON deserialization errors lead to hard application errors, and could
not be handled by application code. This behavior was introduced in https://github.com/angular/angular.js/commit/7b6c1d08aceba6704a40302f373400aed9ed0e0b, and originally, a malformed JSON string was forwarded
as the data to the http success response handler.

This commit adds a specifc test case, even though the behavior is unlikely to break in the future without
a change in the $q rejection handling.

Related #11433
Closes #15689",False
0ce9348bc01811a88e0e19f85e5bf74536ad4dd4,2017-02-08 21:37:17,Matt Lewis,"fix($jsonpCallbacks): allow `$window` to be mocked in unit tests

Fixes #15685

Closes #15686",False
a29f66c465cf67c8126e453956fdd874bc72dd41,2017-02-08 21:37:17,Georgios Kalpakas,chore(*): update dependencies (including `changez-angular`),False
79c4a712d7b53179a8e43f35adb79f84808b8529,2017-02-07 18:56:25,Georgios Kalpakas,docs(changelog): update with changes for 1.6.2,False
2f667b177c85c2f8e41437d9d5a375bde7c44672,2017-02-06 21:55:14,Martin Staffa,"docs(guide/scopes): mention component directive scopes, reorder info

Closes #15634",False
07f34e7af3b684715ac4e7816cb28d8e83cb9c5c,2017-02-06 21:12:49,Martin Staffa,"docs: fix some dangling links

They broke during the Angular -> AngularJS rename",False
493b4967deaca4229cfd36d667cee72d9650bcdb,2017-02-05 21:26:51,Georgios Kalpakas,"test($resource): fix broken test

(Introduced while ""cleaning up"" the tests for in edfb691.)",False
8c1b4c020dd2e5ab5581b9a484e7da7c50c613bf,2017-02-05 19:08:27,Georgios Kalpakas,"refactor(*): remove ignored `expensiveChecks` argument passed to `$parse()`

This is a follow-up to #15094.

Closes #15680",False
edfb691debfd86d2fab5ff8a30449cd28b96547f,2017-02-05 00:30:32,Kyle Wuolle,"fix($resource): do not swallow errors in `success` callback

Previously, errors thrown inside the `success` callback would be swallowed by a
noop `catch()` handler. The `catch()` handler was added in order to avoid an
unnecessary ""Possibly Unhandled Rejection"" error, in case the user provided an
`error` callback (which would handle request errors).

The handler was added too ""eagrly"" and as a result would swallow errors thrown
in the `success` callback, despite the fact that those errors would _not_ be
handled by the `error` callback.

This commit fixes this, by adding the `catch()` handler ""lazily"", only when it
is certain that a rejection will be handled by the `error` callback.

Fixes #15624

Closes #15628",False
816236221700e2844ab6a52b44b36e135a98d293,2017-02-04 19:46:04,Kindy Lin,"fix($parse): make sure ES6 object computed properties are watched

Add the missing watches for ES6 object computed properties which were
implemented in #14407.

Closes #15678",False
15581287a4ec003680d158b303af07f5f16ffbf0,2017-02-03 02:07:17,Dimitris Vardoulakis,"refactor(*): avoid `non-existent property` warnings from Closure Compiler

Closes #15672",False
fd76d872fcefd6469b9a38fa021340005175c771,2017-02-02 22:59:25,Chris,"docs(misc/started): update Twitter handle (@angularjs --> @angular)

Closes #15671",False
3708162bc8cc23dc62df8a03483c2ffd527a6539,2017-02-02 16:15:10,Jessica Soltero,"docs(guide/expression): typo in one-time-binding

Closes #15668",False
813117da31bfc8731e8af26336915e29878b4294,2017-02-01 20:32:11,Michał Gołębiowski,"refactor($injector): remove the Chrome stringification hack

The Chrome stringification hack added in afcedff34c8a44dda0d558d9d6337962f5f03d7b
is no longer needed. I verified that both of the commented out tests pass
on Chrome 56.",False
dc8762eff19c595cc5107a1b1cc0842f3801c4a3,2017-02-01 19:06:08,Michał Gołębiowski,"chore(anchorScroll): remove a Jasmine toHaveBeenCalled workaround

The Jasmine fix landed long time ago and we've updated Jasmine since that
happened.",False
1e3c7d292268c998757df8a0b12122ca330ca4fd,2017-02-01 19:05:01,Michał Gołębiowski,"docs($location): fix examples

The examples contained tests with assertions in form of regular equality
comparisons which would be noops and in case of an error nothing would get
reported. Also, one of the test mixed a HTML5 browser scenario with a non-HTML5
one.",False
187fce7cdf47f9d52c1a1e8c66cf064eeeccc164,2017-02-01 18:59:06,Michał Gołębiowski,docs($animation): fix weird spaces around colons,False
2b00e8893e9611bccc001119bca11626f48f6360,2017-02-01 17:49:37,Peter Bacon Darwin,"feat(ngModel): add `$overrideModelOptions` support

This change allows developers to modify the model options for an `ngModel`
directive programmatically.

Closes #15415",False
d03357a320916371d9aa0c2e177487bf3f73591b,2017-01-31 23:04:29,Patrick McElhaney,"docs(guide/component): add `replace` option

Add `replace` to the table comparing components to directives options. The
`replace` option is deprecated, but it is still documented for directives, so
it is worth pointing it out as a difference between directives and components.

Closes #15658",False
03dbd94cb8e59bd04cecb19283fc2f04d69e91d2,2017-01-30 22:53:50,Georgios Kalpakas,"fix($compile): do not swallow thrown errors in test

In e13eeab, errors/rejections produced during fetching the template or compiling
an asynchronous directive, where overzealously silenced. This doesn't make any
difference in (most) production apps, where `$exceptionHandler` does not rethrow
the errors. In tests though (where `$exceptionHandler` rethrows by default), it
can unexpectedly ""swallow"" thrown errors.

This commit fixes it by removing the extraneous `.catch(noop)`, thus letting
errors thrown by `$exceptionHandler` to surface.

The changes in 'compileSpec.js' essentially revert the modifications that were
unnecessarily (and incorrectly) done in e13eeab (and also one incorrect
modification from [c22615c][1]).

[1]: https://github.com/angular/angular.js/commit/c22615cbfbaa7d1712e79b6bf2ace6eb41313bac#diff-348c2f3781ed66a24894c2046a52c628L2084

Fixes #15629

Closes #15631",False
0ef193f1a3746a6cc71addec64bb50d65e7c2ad1,2017-01-30 19:01:56,Peter Bacon Darwin,chore(docs): don't use bower for docs dependencies,False
dea8ae9af0e59b6727f3f732ea1fae8bb4368b0a,2017-01-28 19:50:05,Frederik Prijck,"chore(doc-gen): show arguments as a subsection of the usage section

Previously, on the docs of directives which include the `animation` section, `arguments` are shown as an `h3` element below the `animation` `h2` element, making it look like it's a subsection of `animations`.

This commit ensures that the àrgument` `h3`element is rendered correctly after the `usage` `h2` element.

Fixes #15645
Closes #15646",False
39a90a9c208236b08abde05309b0a0afdcdc4e7f,2017-01-27 21:45:49,vteremasov,"fix($resource): correctly unescape `/\.` even if `\.` comes from a param value

Closes #15627",False
fd4f0111188b62773b99ab6eab38b4d2b5d8d727,2017-01-27 15:35:51,Jason Bedard,"perf($compile): do not use deepWatch in literal one-way bindings

Avoiding deep watchers for array/object literals will improve watcher
performance of all literals passed as one-way bindings, especially those
containing references to large/complex objects.

BREAKING CHANGE:
Previously when a literal value was passed into a directive/component via
one-way binding it would be watched with a deep watcher.

For example, for `<my-component input=""[a]"">`, a new instance of the array
would be passed into the directive/component (and trigger $onChanges) not
only if `a` changed but also if any sub property of `a` changed such as
`a.b` or `a.b.c.d.e` etc.

This also means a new but equal value for `a` would NOT trigger such a
change.

Now literal values use an input-based watch similar to other directive/component
one-way bindings. In this context inputs are the non-constant parts of the
literal. In the example above the input would be `a`. Changes are only
triggered when the inputs to the literal change.

Closes #15301",False
7084deccaac5855d7148fb6d91dcb83c16b079c4,2017-01-27 15:35:50,Jason Bedard,"feat($parse): allow watching array/object of inputs to literal values

The inputs of array/object literals are now watched for changes.
If the an input changes then a new instance of the literal will be
provided when the parsed expression is executed.

Closes #15301",False
7019d9f27af2cba8e2760d40b330bd53333488eb,2017-01-27 03:41:58,frederikprijck,"fix($sniffer): allow `history` for NW.js apps

Previously `$sniffer` incorrectly detected NW.js apps as Chrome Packaged Apps,
disallowing them to use the history API.

This commit correctly detects NW.js apps and allows them to use the History API.

Fixes #15474

Closes #15633",False
89f3e3b0af74d6ea2f2741b4d6eced184e1a2b1a,2017-01-26 17:59:11,Martin Staffa,"fix(select): keep ngModel when selected option is recreated by ngRepeat

Fixes #15630 
Closes #15632",False
641e13acc180000a8b1293a1bf9dfef29673e2ea,2017-01-26 02:50:18,Georgios Kalpakas,"refactor(*): replace `HashMap` with `NgMap`

For the time being, we will be using `NgMap`, which is an API-compatible
implementation of native `Map` (for the features required in Angular). This will
make it easy to switch to using the native implementations, once they become
more stable.

Note:
At the moment some native implementations are still buggy (often in subtle ways)
and can cause hard-to-debug failures.)

Closes #15483",False
028fa1abb240d367b7e4f1f21fcd45417450b686,2017-01-26 02:47:06,Georgios Kalpakas,test(hashKey): add tests for `hashKey()`,False
3c259ce624a9bf8a7baa0168b2635fbdfb516dae,2017-01-26 00:37:50,Martin Staffa,"docs(ngDisabled): list some elements that natively support

Closes #15473",False
ef7d18b1c44eda924b336b5ad55c629423cd0a64,2017-01-26 00:33:04,Martin Staffa,docs($compile): fix AngularJS versions,False
03043839d5a540b02208001fe12e812dfde00a8e,2017-01-25 13:48:39,Peter Bacon Darwin,docs(*): ensure naming is correct for Angular(JS) versions,False
d24617bf329f1a5394de4627831c49a32b488685,2017-01-25 03:24:33,Georgios Kalpakas,"fix(ngAnimate): correctly animate transcluded clones with `templateUrl`

Previously, `$animate` would decide whether an animation should be cancelled
based on some assumption that didn't hold in specific cases (e.g. when animating
transcluded clones with `templateUrl` directives on them for the first time). As
a result, the entering elements would not be animated in such cases. This
affected commonly used, structural built-in directives (`ngIf`, `ngRepeat`,
`ngSwitch` etc).
This commit fixes it by avoiding invalid assumptions (i.e. by taking into
account the transformations that take place while compiling such elements).

Partly addresses #14074 and #14124.

Fixes #15510

Closes #15514",False
2b7a359363e78ee3ea9fcac8367927ddb5b13404,2017-01-25 03:24:33,Georgios Kalpakas,test(ngAnimate): make expectations more specific,False
e7d8eee46d3ed11fe7054db5e616bd2a8eeb2c1b,2017-01-25 03:24:32,Georgios Kalpakas,"refactor(ngAnimate): simplify functions and remove redundant args/calls

Simplifies/Optimizes the following functions:

- `areAnimationsAllowed()`
- `cleanupEventListeners()`
- `closeChildAnimations()`
- `clearElementAnimationState()`
- `markElementAnimationState()`
- `findCallbacks()`

Although not its primary aim, this commit also offers a small performance boost
to animations (~5% as measured with the `animation-bp` benchmark).",False
565ca6a1f50f83d126422471a326aae7ce623907,2017-01-25 03:24:32,Georgios Kalpakas,chore(benchmarks): add basic animation benchmark,False
54a7caf667690da8e9c99db0794e2917698affa3,2017-01-21 02:17:27,Georgios Kalpakas,docs(*): document the breaking change in 7ceb5f6,False
eba7c28261ff9a80d68e4ddf82e9fad7a112eb1b,2017-01-19 13:48:40,Peter Bacon Darwin,chore(package): relax yarn version constraint,False
83b67b6c54cba38fa463eb0b05977cffae90ec5f,2017-01-19 13:25:33,Peter Bacon Darwin,"revert:docs(guide/scope): access the current element's scope in the console

This reverts commit c6bd58eb587a825bddee06a91ecd4e747a750c8c.
The recommended approach of just typing scope does not appear to work out of the box.

See https://github.com/angular/angular.js/pull/4884#issuecomment-273686380",False
d85b3f56acc544b07cde0a2d51c7951591fc6466,2017-01-18 22:31:11,frederikprijck,"fix(ngValue): correctly update the `value` property when `value` is undefined

Previously, when the expression evaluated to `undefined` the `value` property
was not updated. This happened because jqLite/jQuery's `prop(_, undefined)` is
treated as a getter, thus not apdating the property.

This commit fixes it by setting the property to `null` instead.
(On IE9 we use `''` - see inline comments for more info.)

Fixes #15603

Closes #15605",False
1cf728e209a9e0016068fac2769827e8f747760e,2017-01-18 15:32:15,Raphael Jamet,"fix($compile) : add `base[href]` to the list of RESOURCE_URL context attributes

Previously, `base[href]` didn't have an SCE context. This was not ideal, because
`base[href]` affects the behavior of all relative URLs across the page.
Furthermore, since #15145, `base[href]` also affects which URLs are considered
trusted under the 'self' policy for white- or black-listed resource URLs.

This commit tightens the security of Angular apps, by adding `base[href]` to the
list of RESOURCE_URL context attributes, essentially putting the same
constraints on bindings to `base[href]` as on iframe or script sources.

Refer to the
[`$sce` API docs](https://code.angularjs.org/snapshot/docs/api/ng/service/$sce)
for more info on SCE trusted contexts.

Closes #15597

BREAKING CHANGE:

Previously, `<base href=""{{ $ctrl.baseUrl }}"" />` would not require `baseUrl` to
be trusted as a RESOURCE_URL. Now, `baseUrl` will be sent to `$sce`'s
RESOURCE_URL checks. By default, it will break unless `baseUrl` is of the same
origin as the application document.

Refer to the
[`$sce` API docs](https://code.angularjs.org/snapshot/docs/api/ng/service/$sce)
for more info on how to trust a value in a RESOURCE_URL context.

Also, concatenation in trusted contexts is not allowed, which means that the
following won't work: `<base href=""/something/{{ $ctrl.partialPath }}"" />`.

Either construct complex values in a controller (recommended):

```js
this.baseUrl = '/something/' + this.partialPath;
```
```html
<base href=""{{ $ctrl.baseUrl }}"" />
```

Or use string concatenation in the interpolation expression (not recommended
except for the simplest of cases):

```html
<base href=""{{ '/something/' + $ctrl.partialPath }}"" />
```",False
675f99bc5a9e3276a168b989c951c555d0e8b9e9,2017-01-17 21:39:19,Martin Brown,"docs(guide/i18n): fix typos

Closes #15616",False
5b6763f575b0e824b5c566351e0135898264ee7b,2017-01-13 04:37:45,Georgios Kalpakas,docs(changelog): update with changes for 1.5.11,False
22392ef949904c699f409d0cfa14756cf86df7a1,2017-01-13 02:42:01,Georgios Kalpakas,style($compile): remove trailing whitespace,False
f63c46406f4fe98394e1cfb00d57a535c77cffdc,2017-01-13 02:09:47,Grace Benz,"docs($compile): add some detail about `$onChanges`

Closes #15604",False
3983a66eda1bef8bcfe28ce7f85566b0c27df05e,2017-01-13 01:54:49,Georgios Kalpakas,test(e2e): make test less flakey-prone,False
74e232dab7329c78a6a65b2c84d0c49a19c4fdb3,2017-01-12 15:16:24,Peter Bacon Darwin,"fix(ngMockE2E): ensure that mocked $httpBackend uses correct $browser

The fix from #13124 enabled ngMock and ngMockE2E to work together but
did it in a way that meant that the ""real"" `$httpBackend` service that
was used in pass-through depended upon a different `$browser` service
to the rest of the app.

This broke Protractor since it watches the `$browser` for outstanding
requests and the pass through requests were being tracked by the wrong
`$browser` instance.

Closes #15593",False
2e27df690c0a399b66b3bc049a17093584460b83,2017-01-12 04:03:26,Georgios Kalpakas,"chore(*): update dgeni-packages (and other devDependencies)

`dgeni-packages` prior to version 0.16.3 specified `engine.yarn: '^0.17.9'`,
which was unnecessarily strict and would cause any task to fail if someone had a
yarn version >=0.18.0.
Other devDependencies were also updated (because why not).

Closes #15600",False
c522a43f41978245d0973ccb3a2a59ac5aec1a7e,2017-01-12 03:37:22,Sammy Jelin,"fix($route): make asynchronous tasks count as pending requests

Protractor users were having a problem where if they had asynchonous code in a
`route.resolve` or `route.resolveRedirectTo` variable, Protractor was not
waiting for that code to complete before continuing. See
https://github.com/angular/protractor/issues/789#issuecomment-190983200 for
details.

This commit fixes it by ensuring that `$browser#outstandingRequestCount` is
properly increased/decreased while `$route` (asynchronously) processes a route.

Also, enhanced `ngMock` to wait for pending requests, before calling callbacks
from `$browser.notifyWhenNoOutstandingRequests()`.

Related to angular/protractor#789.

Closes #14159",False
9c722cfcd2f108e7902f90f995770af861473428,2017-01-11 15:09:03,frederikprijck,"fix($compile): allow the usage of ""$"" in isolate scope property alias

Previously, when using an alias for an isolate scope or `bindings` property
(e.g. `alias: '<attrName'` instead of `attrName: '<'`), a `$compile:iscp` error
was thrown if the attribute name contained a ""$"".
This commit removes the error by changing the regex to allow ""$"" characters in
the attribute name when using a property alias.

Fixes: #15586

Closes #15594",False
9412962696532b216ceafcd470c746ed0c3a4d38,2017-01-10 17:50:15,Alex Dobkin,"fix($sce): consider document base URL in 'self' URL policy

Page authors can use the `<base>` tag in HTML to specify URL to use as a base
when resovling relative URLs. This can cause SCE to reject relative URLs on the
page, because they fail the same-origin test.

To improve compatibility with the `<base>` tag, this commit changes the logic
for matching URLs to the 'self' policy to allow URLs that match the protocol and
domain of the base URL in addition to URLs that match the loading origin.

**Security Note:**
If an attacker can inject a `<base>` tag into the page, they can circumvent SCE
protections. However, injecting a `<base>` tag typically requires the ability to
inject arbitrary HTML into the page, which is a more serious vulnerabilty than
bypassing SCE.

Fixes #15144

Closes #15145",False
752f411c8b3495620226e45815807ff798496801,2017-01-10 03:28:10,Georgios Kalpakas,"fix($location): correctly handle external URL change during `$digest`

Previously, when the URL was changed directly (e.g. via `location.href`) during
a `$digest` (e.g. via `scope.$evalAsync()` or `promise.then()`) the change was
not handled correctly, unless a `popstate` or `hashchange` event was fired
synchronously.

This was an issue when calling `history.pushState()/replaceState()` in all
browsers, since these methods do not emit any event. This was also an issue when
setting `location.href` in IE11, where (unlike other browsers) no `popstate`
event is fired at all for hash-only changes ([known bug][1]) and the
`hashchange` event is fired asynchronously (which is too late).

This commit fixes both usecases by:

1. Keeping track of `$location` setter methods being called and only processing
   a URL change if it originated from such a call. If there is a URL difference
   but no setter method has been called, this means that the browser URL/history
   has been updated directly and the change hasn't yet been propagated to
   `$location` (e.g. due to no event being fired synchronously or at all).
2. Checking for URL/state changes at the end of the `$digest`, in order to
   detect changes via `history` methods (that took place during the `$digest`).

[1]: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/3740423/

Fixes #11075
Fixes #12571
Fixes #15556

Closes #15561",False
2b360bf30528e636da429396f2fe740c3f97c6f8,2017-01-10 03:27:31,Georgios Kalpakas,"fix(*): detect external changes in `history.state`

Previously, `$browser.$$checkUrlChange()` (which was run before each `$digest`)
would only detect an external change (i.e. not via `$location`) to the browser
URL. External changes to `history.state` would not be detected and propagated to
`$location`.

This would not be a problem if changes were followed by a `popstate` or
`hashchange` event (which would call `cacheStateAndFireUrlChange()`). But since
`history.pushState()/replaceState()` do not fire any events, calling these
methods manually would result in `$location` getting out-of-sync with the actual
history state.

This was not detected in tests, because the mocked `window.history` would
incorrectly trigger `popstate` when calling `pushState()/replaceState()`, which
""covered"" the bug.

This commit fixes it by always calling `cacheState()`, before looking for and
propagating a URL/state change.",False
c00903be7ac91cd9cd29c265409eea96198b32c7,2017-01-05 18:27:56,Nikhil Wins,"refactor($interpolate): remove unnecessary else

Closes: #15575",False
3776b2ef3073c4ffb842ee15732ed0026e5e9f76,2017-01-05 16:32:01,David Jöch,"style($log): fix indentation

Closes #15579",False
e193cda800cbd481802d6e3334694d25a1ad9614,2017-01-05 14:34:17,Florian Berger,"docs(*): fix typos

Closes #15577",False
296e9f6cdfc87b91ffca39692fe407cf28f364f7,2017-01-04 15:44:45,Nic Mitchell,"chore(*): update copyright year

Closes #15573",False
035f1cd90e527c3e717dbc954eec3c910fcf2c37,2017-01-04 02:06:28,Georgios Kalpakas,docs(guide/$location): correctly format heading,False
0694af8fc4c856f5174545450091602e51f02a11,2017-01-03 22:44:57,Georgios Kalpakas,"fix(angularInit): allow auto-bootstraping from inline script

Some browsers (e.g. Safari 9.x, PhantomJS) do not set `link.origin/protocol`
correctly, when setting `link.href` to `null`, which prevented auto-bootstraping
Angular from scripts without a `src` attribute (i.e. inline scripts).
Inline scripts are on the same origin as the loading page, so auto-bootstraping
should be allowed.

Fixes #15567

Closes #15571",False
090a839ac9a2ed8b17edb9d06c0345c9eb115d44,2017-01-03 19:43:22,Soumya Ranjan Mohanty,"docs(guide/services): fix syntax for Jasmine v2.x

Closes #15570",False
5294d208ae7ef2ce2c6554e7e349a945879497a8,2017-01-03 16:11:11,Georgios Kalpakas,"docs(ngShow/ngHide): improve docs and fix inconsistencies between `ngShow`/`ngHide`

Closes #15471",False
4082fb03b60965e99bf8a6079136f7b60958fb26,2016-12-31 16:01:31,Deco,"docs(tutorial/step_04): fix typo

Closes #15562",False
a24777a2c4ad2ac087d9e3aa278fa2e61e8cc740,2016-12-29 13:46:07,Georgios Kalpakas,"fix(input): fix `step` validation for `input[type=number/range]`

Previously, the validation would incorrectly fail in certain cases (e.g.
`step: 0.01`, `value: 1.16 or 20.1`), due to Floating Point Arithmetic
limitations. The previous fix for FPA limitations (081d06ff) tried to solve the
issue by converting the numbers to integers, before doing the actual
calculation, but it failed to account for cases where the conversion itself
returned non-integer values (again due to FPA limitations).
This commit fixes it by ensuring that the values used in the final calculation
are always integers.

Fixes #15504

Closes #15506",False
99a3adbdaa0b1d6ebdc31c04cf71472a79c4147c,2016-12-29 13:38:40,Georgios Kalpakas,docs(CHANGELOG.md): add missing commas,False
922a83e94fa6d21a993bc72439cb5f0aa4c8cb78,2016-12-29 13:30:42,supasak,"fix($resource): delete `$cancelRequest()` in `toJSON()`

Closes #15244",False
ee1458fdba025e00840827a6a8e9c2ef1a7edd6b,2016-12-23 16:23:38,Peter Bacon Darwin,docs(CHANGELOG): add 1.6.1 release info,False
cfc16b17f70a5c8bed55afac4359f900f34bff12,2016-12-23 16:22:32,Peter Bacon Darwin,chore(deps): update changez-angular version,False
8ceeeccdd765b34937464f9d3f8101f33c44f45e,2016-12-23 15:12:16,Naomi Black,"docs(guide/forms): remove implicit bias from example

Closes #15543",False
316f60fd1433cc83f63c64fadfcde5cdf0033de5,2016-12-22 00:38:24,Thomas Grainger,"fix($q): Add traceback to unhandled promise rejections

Fixes #14631
Closes #15527",False
f768da24884504cb1a683f8429e55c64a2397478,2016-12-21 02:58:34,sp00m,"fix($$cookieReader): correctly handle forbidden access to `document.cookie`

In certain cases (e.g. on LG webOS using the `file:` protocol), access to
`document.cookie` may not be allowed and throw an error. This could break
`$http` which relies on `$$cookieReader()` for retrieving the XSRF token.
This commit fixes it by treating `document.cookie` as empty, when access to it
is fordibben.

Fixes  #15523

Closes #15532",False
c898ae9e45b4fb3f7a2f602e2d76945f85309725,2016-12-20 13:59:36,Simon Legner,"docs(CHANGELOG): fix typo

Closes #15529",False
47b14bf3e38de51fe67549e65fc2735b7d2dfb60,2016-12-20 04:46:24,Thomas Grainger,"docs(guide/migration): improve grammar

Closes #15526",False
4e143fcae3a5b4fb9eebe5bc7c61a3a220ae3937,2016-12-20 02:14:36,Georgios Kalpakas,"fix(ngOptions): do not unset the `selected` property unless necessary

Previously, when updating the value of a `select[multiple]` element, all options
were first set to `selected = false` and then the selected ones were set to
`true`. By setting an already selected option to `selected = false` and then
`true` again - essentially unselecting and reselecting it - caused some browsers
(including Firefox, IE and under some circumstances Chrome) to unexpectedly
scroll to the last selected option.

This commit fixes it by ensuring that the `selected` property is only set if its
current value is different than the new one and even then it is set to its final
value at once (i.e. without first setting it to `false`), thus avoiding the
undesirable behavior.

Fixes #15477

Closes #15478",False
15d07c0108b45a74977d1e3b07b6dddf90b332e1,2016-12-20 00:23:38,Peter Neave,"docs(tutorial/step_13): add missing dependency `phoneDetails` module

Closes #15521",False
d08e31984d0c69b9c31473f4b87e8d8fecf55c5d,2016-12-16 19:38:37,Peter Bacon Darwin,chore(doc-gen): update to dgeni-packages@0.16.2,False
fbe0b73ab5b6b2738ef396d052912885ca6b8dc2,2016-12-16 14:41:22,Georgios Kalpakas,"docs(CHANGELOG.md): remove reverted bug fix

Related to 02f045b.",False
07987e26e9cb6d038fb20ecc4e1881a3127d5bb2,2016-12-16 02:11:13,Peter Bacon Darwin,docs(CHANGELOG): add note to 1.5.0-beta.1,False
c6842b5a65b49aedb35d5b2dd8e430169a5a455d,2016-12-15 22:48:29,Georgios Kalpakas,docs(CHANGELOG.md): add changes for v1.5.10,False
baa30695f3378554a23c6796ff6444d25d9bb0de,2016-12-15 22:48:28,Georgios Kalpakas,docs(CHANGELOG.md): add missing entries for v1.6.0-rc.0/v1.6.0,False
d03cac4cd5aa406aeebfae30f20d31d7e980587a,2016-12-14 04:13:52,Georgios Kalpakas,docs($q): document the default value for `errorOnUnhandledRejections`,False
e9a4de035df5708f7d96180d774b070495dbd045,2016-12-13 17:37:58,Jannick Fahlbusch,"docs($interval): improve fn description

If no additional arguments are passed, the function is called with the current iteration count.

Closes #15503",False
ce8abac66d62d597bfcf9450267939d43cac5902,2016-12-13 03:39:56,Georgios Kalpakas,"fix(ngModelOptions): work correctly when on the template of `replace` directives

Previously, in order for `ngModel` and `ngModelOptions` to work correctly
together, the latter's pre-linking function should be run before the former's
pre-linking function. This was typically what happened, except when `ngModel`
was used on an element which also had a `replace` directive, whose template
included `ngModelOptions`. In that case, the order was reversed.

This commit fixes it by moving the initialization logic of `ngModelOptions` from
its pre-linking function to its controller's `$onInit()` lifecycle hook.

Fixes #15492

Closes #15493",False
fade1db2535436e2479c8ffc0befedab9b2a21b5,2016-12-13 03:34:57,Georgios Kalpakas,refactor(testabilityPatch): remove code duplication,False
29f3bf4bd6c616b31176bdc687aefc95a3b0f391,2016-12-12 00:28:13,Aaron Brewer,"docs(ngMessageExp): improve description

Closes #15486",False
7f8bc587aec1e1fe3a8dfaa686f301b4b0529c8e,2016-12-11 01:45:35,idhindsight,"docs(tutorial/step_09): fix typo (it's --> its)

Closes #15485",False
1ecf6efa81915e0dab6216abf9d160be88f6157e,2016-12-09 15:50:31,David Rodenas Pico,"chore(benchpress): add an `ngClass` benchmark

Closes #15243",False
b82097085d53ad89940828d3c0825518569b1e4a,2016-12-09 15:19:10,Georgios Kalpakas,"perf(ngClass): avoid unnecessary `.data()` accesses, deep-watching and copies

Includes the following commits (see #15246 for details):

- **perf(ngClass): only access the element's `data` once**

- **refactor(ngClass): simplify conditions**

- **refactor(ngClass): move helper functions outside the closure**

- **refactor(ngClass): exit `arrayDifference()` early if an input is empty**

- **perf(ngClass): avoid deep-watching (if possible) and unnecessary copies**

  The cases that should benefit most are:

  1. When using large objects as values (e.g.: `{loaded: $ctrl.data}`).
  2. When using objects/arrays and there are frequent changes.
  3. When there are many `$index` changes (e.g. addition/deletion/reordering in large `ngRepeat`s).

  The differences in operations per digest include:

  1. `Regular expression (when not changed)`
     **Before:** `equals()`
     **After:**  `toClassString()`

  2. `Regular expression (when changed)`
     **Before:** `copy()` + 2 x `arrayClasses()` + `shallowCopy()`
     **After:**  2 x `split()`

  3. `One-time expression (when not changed)`
     **Before:** `equals()`
     **After:**  `toFlatValue()` + `equals()`*

  4. `One-time expression (when changed)`
     **Before:** `copy()` + 2 x `arrayClasses()` + `shallowCopy()`
     **After:**  `copy()`* + `toClassString()`* + 2 x `split()`

  5. `$index modulo changed`
     **Before:** `arrayClasses()`
     **After:**  -

  (*): on flatter structure

  In large based on #14404. Kudos to @drpicox for the initial idea and a big part
  of the implementation.

Closes #14404

Closes #15246",False
5fd5e131b62dcc4564743e74da22a9eb93ebe0be,2016-12-09 15:19:09,Georgios Kalpakas,fix(ngClassOdd/Even): add/remove the correct classes when expression/`$index` change simultaneously,False
7b2ed4ae41956656079c6e411ccf4012aaf611f6,2016-12-09 15:19:09,David Rodenas Pico,test(ngClass): add some tests about one-time bindings and objects inside arrays,False
7c80d8afa9d974b284921a1999b840d0ca30e3c9,2016-12-09 15:18:02,Georgios Kalpakas,"refactor(ngClass): remove redundant `$observe`r and dependency on `$animate`

Includes the following commits (see #15246 for details):

- **refactor(ngClass): remove unnecessary dependency on `$animate`**

- **refactor(ngClass): remove redundant `$observe`r**

  The code was added in b41fe9f in order to support having both `ngClass` and
  interpolation in `class` work together. `ngClass` has changed considerably since
  b41fe9f and for simple cases to work the `$observe`r is no longer necessary (as
  indicated by the expanded test still passing).

  That said, it is a [documented known issue][1] that `ngClass` should not be used
  together with interpolation in `class` and more complicated cases do not work
  anyway.

[1]: https://docs.angularjs.org/api/ng/directive/ngClass#known-issues",False
d05f894aff18ccacdded9cd7ce8d362947f4e6a2,2016-12-09 15:04:53,Aman Mittal,"docs(guide/external-resources): add ""AngularJS in Action"" book

Closes #15480",False
1c0c2605d3ca7c4ad6d838b6a1f28755632f9afc,2016-12-09 14:09:54,Georgios Kalpakas,"fix($rootScope): when adding/removing watchers during $digest

Previously, adding a watcher during a `$digest` (i.e. from within a watcher),
would result in the next watcher getting skipped. Similarly, removing a watcher
during a `$digest` could result in the current watcher being run twice (if the
removed watcher had not run yet in the current `$digest`).

This commit fixes both cases by keeping track of the current watcher index
during a digest and properly updating it when adding/removing watchers.

Fixes #15422

Closes #15424",False
5b477614ff92dcdf5eff62e2143b7fb43aab5653,2016-12-09 06:42:59,Peter Bacon Darwin,"chore(docs): fix plnkrOpener to use $onInit

Since 1.6.0 does not preassign bindings before running the controller
constructor function, we must move initialisation into the `$onInit`
method.",False
9595337f67df619a2666c9a63b4394a119b9ef3e,2016-12-09 05:12:55,Peter Bacon Darwin,chore(package): update docs app to run on 1.6.0,False
a9e91461a892e140e3200b35eaf44060322cbb41,2016-12-08 21:41:34,Georgios Kalpakas,"fix(jqLite): silently ignore `after()` if element has no parent

Previously, the element was always assumed to have a parent and an error was
thrown when that was not the case.
This commit makes jqLite consistent with jQuery, which silently ignores a call
on elements that do not have a parent.

Fixes #15331
Closes #15367

Closes #15475",False
4e7f652b5f4f7943511bf532fb6753b042a0dbf2,2016-12-08 19:26:34,Peter Bacon Darwin,chore(package): update dist-tag for master/1.7,False
e922c38612f52611a47419172e8173a1c024ef6c,2016-12-08 18:23:47,Georgios Kalpakas,docs(ngMockE2E): correctly document the `data` arg of `$httpBackend.when(...)`,False
1b7ddd349186ce0203245a67056c49d3c60e2e5a,2016-12-08 17:51:57,Peter Bacon Darwin,"chore(bower/npm): use npm (not yarn) to publish

yarn has an annoying behaviour in that it wants to do the version bumping
for you and requires an interactive terminal to tell it what version.",False
4c5afb5cc2f72e966be9ee4f80732dd6e143d91d,2016-12-08 16:37:52,Peter Bacon Darwin,chore(jenkins): ensure deps are installed before trying to use them,False
f0dc28882403e0c090d9d9d3e9152d7922e565a0,2016-12-08 16:23:07,Peter Bacon Darwin,chore(jenkins): fix working directory to make yarn work,False
70490ef71703d970989b52667567a91981011308,2016-12-08 15:51:48,Peter Bacon Darwin,docs(CHANGELOG): fix 1.6.0 release name,False
dfef3bf2d4269ae14bff95ce95d93aac7baf13e0,2016-12-08 15:48:07,Peter Bacon Darwin,chore(package): update dist-tag for 1.6.0 release,False
f727adddeb25e743c0e12068b4b8d68c806641aa,2016-12-08 15:45:05,Peter Bacon Darwin,docs(CHANGELOG): 1.6.0 release notes,False
fc89a85406f640146ef80d4953d60725b279b4f4,2016-12-07 16:23:37,Peter Bacon Darwin,chore(jenkins): fix yarn and grunt installation,False
b4f5377a2f7590cbda7b1bf7448ce8836565dee2,2016-12-07 05:25:48,Georgios Kalpakas,docs(guide/migration): fix typo,False
7a667c77e36f2b1738425a9cfb52d48bb9d8220f,2016-12-06 16:13:34,Georgios Kalpakas,"fix(select): do not throw when removing the element (e.g. via `ngIf`)

Fixes #15466

Closes #15468",False
752b1e69b7a8e9c0b908f1980e9c738888f3647c,2016-12-03 13:26:18,Georgios Kalpakas,"fix($resource): allow params in `hostname` (except for IPv6 addresses)

Support for IPv6 addresses (in b643f0d) was too aggressive and broke support for params in the
`hostname` part of a URL.
This commit restores support for params in the `hostname`, as long as it is not an IPv6 address.

Fixes #14542

Closes #14906",False
1102c84f59389226d790769f436282eab82b0d8b,2016-12-03 03:10:22,ojab,"docs(guide/templates): camelCase directive name for consistency

Closes #15465",False
245b27101aad129061585252b73652054319ca82,2016-12-02 23:18:49,Martin Staffa,"fix(ngOptions): don't add comment nodes as empty options

When the ""empty option"" element contains a transclusion directive, the result of the compilation always includes a comment node. Since we are adding / removing the ""selected"" attribute on the empty option, we need to make sure it's an actual element.

To solve this, we take advantage of the fact the each option element has an option directive that tries to register the option with the selectController. With ngOptions, this registerOption function is normally noop'd since it's not possible to add dynamic options. Now if the result of the empty option compilation is a comment, we re-define the function so that it catches empty options when they are actually linked / rendered.

Closes #15454
Closes #15459",False
f5d2bf3d6edcf5af9b5f32d286b8d9033a6b254f,2016-12-01 20:41:25,Martin Staffa,"chore(doc-gen): render `@example` tag in ngdoc `@method`

Currently, ngdoc `@method` ignores `@example` tags and does not output them.
This is usually not a problem, as examples are mostly defined directly
in the `@description` via code blocks or `<example>`
elements. However, some methods still have `@example` tags (possibly
from a previous docs version).

While not absolutely necessary, having special markup for Examples
makes them a) easier to find visually in the docs, and b) easier
to link to as they will have a unique id.

Closes #14722
Closes #15448",False
9c2d0b8af3f4ea8fe5ca4dffc25560bfdd63cd7f,2016-12-01 17:58:39,Georgios Kalpakas,"test($compile): work around Chrome issue with reported size for `<foreignObject>`

Since Chrome 53-57+, the reported size of `<foreignObject>` elements and their
descendants is affected by global display settings (e.g. font size) and browser
settings (e.g. default zoom level). This could cause tests incorrectly failing
due to such settings.

In order to avoid false negatives, we now compare against the size of the
equivalent, hand-written SVG instead of fixed widths/heights.

Fixes #15333

Closes #15458",False
465d1734559ca4a7f4aa24387060f88fcc53ecb1,2016-12-01 16:59:22,Rob Wu,feat(security): do not bootstrap from unknown schemes with a different origin,False
f1db7d735b475a7954023cc63f2b3f0ef685ea7e,2016-11-30 04:21:13,Martin Staffa,docs(ngModelOptions): fix broken layout because of code section,False
b77defde81fc265c13fa504dc78b41a43997abf4,2016-11-29 18:55:59,Peter Bacon Darwin,docs(contribute): mention nvm-windows,False
afafb7a8ab9b7c8ef505f38ff0cb87f591db7622,2016-11-29 18:55:58,Peter Bacon Darwin,docs(FAQ) add link to security guide,False
f04fcdfe9f9260f18d1ac79e3a9584aa28073d4c,2016-11-29 18:55:58,Peter Bacon Darwin,"chore(grunt): check node, yarn and grunt-cli versions

If global versions of node, yarn or grunt-cli don't match what we expect then blow up.",False
5dd3a35f472f1344472b6dc76016b30251888cf4,2016-11-29 18:55:58,Peter Bacon Darwin,chore(grunt): run gulp directly rather than through npm,False
ca139dee8ed0cad50564e76d57ac16c98870a525,2016-11-29 18:55:58,Peter Bacon Darwin,chore(utils): install npm-run to simplify scripts,False
099083352ad3033efc260b46df7299048a3a3954,2016-11-29 18:55:57,Peter Bacon Darwin,chore(travis): install grunt-cli globally to simplify scripts,False
f54e9242fc038ef89c0fa6fa7571a9e34d65c01f,2016-11-29 18:55:57,Peter Bacon Darwin,"chore(jenkins): remove path to grunt

grunt is installed globally on jenkins so we can just use it directly.",False
d003ec1d41f7dc4157e33eb4b46dbc6b5028e565,2016-11-29 18:55:57,Peter Bacon Darwin,docs(ComponentRouter): it is unlikely ever to appear on bower or CDN,False
aadee894dac5275de01d90387f0cc157bf620183,2016-11-29 18:55:57,Peter Bacon Darwin,chore(validate-commit): remove redundant scripts,False
ad4e86a582ebae250591e7c5b2535eafc6ddcee4,2016-11-29 18:55:57,Peter Bacon Darwin,chore(saucelabs): update sauce-connect to 4.4.1,False
e8f9cbfdcec39c5acbf8245c63fc55b7f55caa15,2016-11-29 18:55:57,Peter Bacon Darwin,"chore(bower): set clone depth to speed up releases

We already use `git clone ... --depth=1` for the `code.angularjs.org`
repository, which speeds up the cloning of the repository.",False
d4863a82fac45c8d6bbd04e5bdc9b30049201324,2016-11-29 18:55:57,Peter Bacon Darwin,"chore(npm-bundle-deps): remove unused script

This became reduntant as of 507ee2d9bac77841681282dfcba9297dda576b41",False
736b6c7fed79c8305786bbb86d39dd7af891a162,2016-11-29 18:55:56,Peter Bacon Darwin,style(*): fix `no-useless-escape` eslint errors,False
1dedcdf2bc7f6adaa3977d12d68de1ba0a87150c,2016-11-29 18:55:56,Peter Bacon Darwin,docs(*): switch from npm to yarn,False
05c3336f92c2a9b92e6d4c23c077f33c01f03806,2016-11-29 18:54:50,Peter Bacon Darwin,chore(dependencies): USE YARN (and node 6),False
d1e4f5728c1e9bbd67f683ed4909e39df8d2f774,2016-11-28 23:31:43,Martin Staffa,"chore(docs-app): improve deprecation box layout

Deprecated boxes for APIs appear right under the header and were missing
a bit of margin. Boxes for methods still look good even with the
additional margin.",False
9f61e74be366eccf2c744322b591524eff82facc,2016-11-28 23:20:36,Wesley Cho,"docs($rootScope): add note about watching File objects

- Add note recommending against watching `File` objects with deep watchers

Closes #15440",False
4059600d205a2cabef901d4fbf4184cd91ba0db0,2016-11-28 23:20:36,Wesley Cho,"docs(*): add deprecation notice for `angular.lowercase/uppercase`

Closes #15441
Closes #14316",False
c625b0d5680b1ee3e921f5cee18c466bc5733329,2016-11-28 15:44:55,Georgios Kalpakas,"chore(docs): use correct script-URL for plnkr on snapshot

Fixes #15437

Closes #15438",False
04cbe1e74f6d5cc5e0f12fce63ec8643fe306908,2016-11-28 15:32:10,Wesley Cho,"refactor($q): replace occurrences of `.when()` with `.resolve()`

Related to #13709.

Closes #15442",False
9399d68d989108261892600bf1111ba6a837a479,2016-11-25 17:08:50,Georgios Kalpakas,"docs(*): document the breaking change introduced in e1da4be (#15434)

Closes #15434",False
4a320ab9f01ae32fdbbee35ea513e704529d0580,2016-11-25 15:29:14,Peter Bacon Darwin,docs(CHANGELOG): add missing feature to 1.6.0-rc.0,False
44f9ae61265ba1cdb2b5a3598b04c4ee4b5ba83a,2016-11-25 14:14:39,Georgios Kalpakas,docs(input[number]): fix typo,False
cdb9e08f4e3d1a78c3574545243579f69b88f655,2016-11-25 03:04:31,Peter Bacon Darwin,"docs(CHANGELOG): add missing ""closes"" link",False
dcfcf8189361fc1359583525ee48fce1fa2e9de1,2016-11-25 03:00:56,Peter Bacon Darwin,docs(CHANGELOG): add release notes for 1.6.0-rc.2,False
d7cc863105f75d4bd67fab3c8c44cf6de6bf6dbc,2016-11-25 01:46:03,Peter Bacon Darwin,docs(CHANGELOG): add release notes for 1.5.9,False
6e91f9c25d028620bbfa2e967f8253654212c276,2016-11-24 12:34:05,Martin Probst,style: fix CI failure (#15429),False
7f1b8bdfe1043871c5ead2ec602efc41e0de5e53,2016-11-24 05:14:43,Martin Probst,"feat(security): explicitly whitelist URL schemes for bootstrap. (#15427)

Many browsers have some extension URL scheme. It is unclear how many of
those have the security issue of allowing parser-inserted loads of
extension URLs.

To be conservative, this code whitelists the URL schemes that are known
to be subject to CSP, i.e. the ones that are expected and safe.",False
cc92da0d677973cecaf52fb6c558336b6a738423,2016-11-23 20:12:04,Michał Gołębiowski,"chore(*): cleanup msie handling; add support comments

1. The conditions checking the msie variable value have been simplified.
There is e.g. no point to check if `msie <= 11` since there IE 12 won't ever
exist.
2. Edge UA-sniffing has been added to tests (only!) where appropriate
3. Support comments for IE/Edge have been added.

Closes #15407",False
c9bb5b9fa41720aba49e673c536a868ca179b166,2016-11-23 20:09:06,Packt,"docs(external-resources): add new book link and alphabetize

Closes #15421",False
c54921008d0a5c323f5f7ef175941f1f8fe14a09,2016-11-23 18:58:12,Michał Gołębiowski,"chore(ngAnimate): cleanup vendor prefixes handling in tests

1. Change all transition/transform/animation-related ss.addRule to
   ss.addPossiblyPrefixedRule to account for the -webkit- prefix.
2. Remove manually added -webkit-prefixed rules in favor of automatically
   handling them in ss.addPossiblyPrefixedRule.

Closes #15406",False
69f59f2d0166cc4aba2745c834f649024ca20fb1,2016-11-23 18:22:48,Martin Staffa,"docs($compile, guide/compiler): add ""double compilation"" known issue

Related #15278
Closes #15392",False
f4fb6e0983a6a700dc4a246a913504550b55f1e9,2016-11-23 18:00:41,Martin Staffa,"perf(*): don't trigger digests after enter/leave of structural directives

ngIf, ngInclude, ngSwitch, and ngView now use the `done` callback functions on animation runners returned
by leave/enter animations to do internal cleanup (and $anchorScroll for ngInclude and ngView).
Previously, they were using promise callbacks (`then`), which caused an unnessecary digest.

Background:

In https://github.com/angular/angular.js/commit/bf0f5502b1bbfddc5cdd2f138efd9188b8c652a9, animation
promises where introduced instead of animation callbacks. These promises were however not tied to
the digest cycle, so you had to manually call `$apply` inside them.

This was changed in https://github.com/angular/angular.js/commit/c8700f04fb6fb5dc21ac24de8665c0476d6db5ef,
so animation promise callbacks would always trigger a `$digest`. This meant that several built-in
directives would now trigger additional digests on leave (ngIf, ngSwitch) or enter/leave (ngInclude,
ngView). The `done` callback, which receives a single argument indicating success / failure was
introduced to allow digest-less responses, but wasn't applied to these directives.

Note that this applies to all calls to $animate.enter/leave, even if ngAnimate isn't included, and
no actual animations are running, because the animation runner code is in the core ng module.

Fixes #15322
Closes #15345",False
a18be1513762827ee5a71bfd043c2263545013b2,2016-11-23 18:00:41,Martin Staffa,"style(ngIfSpec.js, ngIncludeSpec.js): add top level describe",False
05a9d3a73cbae70eabce3473084d71aaa2ed348a,2016-11-23 04:40:54,Martin Staffa,docs(*): add more info deprecation versions,False
60035f597c9251919189a15e22ea5118a566d3f9,2016-11-22 18:19:26,Georgios Kalpakas,docs(guide/directive): minor wording and styling fixes,False
0af21a48e53045963f73637be93e18b688d95ff5,2016-11-22 13:18:08,Georgios Kalpakas,docs(CHANGELOG.md): minor fixes/tweaks,False
991a2b30e00aed1d312e29555e356a795f9e3d62,2016-11-21 20:21:48,Santi Albo,"fix($sce): fix `adjustMatcher` to replace multiple '*' and '**'

`adjustMatcher` was only replacing the first occurrences of '*' and '**'
that were found in whitelisted and blacklisted url strings.

Closes ##7897",False
fc4afd0c1b317c38fc81aeb0d3121a8474292060,2016-11-21 18:57:47,Peter Bacon Darwin,"docs(CHANGELOG): add 1.6.0-rc.1 changes

Closes #15364",False
d5109e26e4855270bbd9f439f62c7312c071612f,2016-11-21 18:57:47,Peter Bacon Darwin,docs(CHANGELOG): minor typos and fixes,False
cf3c736b61cb9874fd5034f137094f405f347df8,2016-11-21 17:51:55,Georgios Kalpakas,docs(guide/migrate): fix typo in code (`&amp;` --> `&`),False
b343e7a56013d78ab540eeca4c945896e60c9121,2016-11-21 16:25:11,Georgios Kalpakas,docs(error/ng:areq): fix typo,False
5ff5815f51db146a50ab7446eb50d3e6da9b18ac,2016-11-21 16:21:00,Karthikeyan,"docs(error/ng:areq): mention common error cause

Closes #15414",False
a144c1c0229e75307ca49db71dafe67e87bb89fd,2016-11-19 03:34:12,Georgios Kalpakas,"docs(guide/migration): add ""Migrate 1.5 to 1.6"" section

Closes #15399",False
d79f9b3693058ab2d128ef87ea2280644cf7cfdf,2016-11-18 19:21:56,Peter Bacon Darwin,docs(*): fix up deprecation notices,False
f56926a77d6e440ffd0648367990f88e966493bb,2016-11-18 19:21:56,Peter Bacon Darwin,"chore(docs): deprecation notices for methods and properties

Closes #15351
Closes #15394",False
17e98ace4816b13048a7af567d1f2a2b69251a01,2016-11-18 16:58:14,Peter Bacon Darwin,chore(docs): bring in all templates from dgeni-packages,False
752c989152c7fb9e5638a9a809f3dd867339420d,2016-11-18 16:58:14,Peter Bacon Darwin,chore(package.json): update to latest dgeni-packages,False
789790feee4d6c5b1f5d5b18ecb0ccf6edd36fb3,2016-11-18 05:08:24,Peter Bacon Darwin,"fix(ngModelOptions): handle update triggers that are not in debounce list

Closes #15401",False
fd1a93a4b01291492b81c340a873068f21068ccf,2016-11-18 05:08:24,Peter Bacon Darwin,refactor(ngModelOptions): internal variables do not start with a `$`,False
7d24af110a9bc2a2175e8e99868da74a36eb2ae5,2016-11-18 02:47:42,Michal Bultrowicz,"docs(CONTRIBUTING.md): expand test commit type, add info about closing issues

Expanded ""test"" to also mean test fixes.
Added a link to the help page about closing issues with commit
messages in the section about the footer.

Closes #15340",False
ac7a2daf2e27bf8c17cbc6117d1c9281ecdb20b1,2016-11-17 23:53:52,Arturo Romero,"docs(guide/Forms): add labels to input elements

Closes #15403",False
296cfce40c25e9438bfa46a0eb27240707a10ffa,2016-11-16 19:16:13,Peter Bacon Darwin,"feat(ngModelOptions): allow options to be inherited from ancestor `ngModelOptions`

Previously, you had to apply a complete set of `ngModelOptions` at many places in
the DOM where you might want to modify just one or two settings.

This change allows more general settings to be applied nearer to the root of the DOM
and then for more specific settings to inherit those general settings further down
in the DOM.

To prevent unwanted inheritance you must opt-in on a case by case basis:
* To inherit as single property you simply provide the special value `""$inherit""`.
* To inherit all properties not specified locally then include a property `""*"": ""$inherit""`.

Closes #10922
Closes #15389

BREAKING CHANGE:

The programmatic API for `ngModelOptions` has changed. You must now read options
via the `ngModelController.$options.getOption(name)` method, rather than accessing the
option directly as a property of the `ngModelContoller.$options` object. This does not
affect the usage in templates and only affects custom directives that might have been
reading options for their own purposes.

One benefit of these changes, though, is that the `ngModelControler.$options` property
is now guaranteed to be defined so there is no need to check before accessing.

So, previously:

```
var myOption = ngModelController.$options && ngModelController.$options['my-option'];
```

and now:

```
var myOption = ngModelController.$options.getOption('my-option');
```",False
fb0225a36afb08ab14a808a2fd2d2f39c13fce32,2016-11-16 19:10:46,Peter Bacon Darwin,"revert: feat(ngModelOptions): allow options to be inherited from ancestor ngModelOptions

This reverts commit 87a2ff76af5d0a9268d8eb84db5755077d27c84c",False
7dd42d31a7b9d6c2b1c8f7ea6636e8b70288a3c2,2016-11-16 16:05:54,Georgios Kalpakas,docs(ngModel): fix typo and rephrase for simplicity,False
7d9a791c6a8c80d29d6c84afa287c81f2a307439,2016-11-16 15:11:42,Georgios Kalpakas,"fix(ngMock/$controller): respect `$compileProvider.preAssignBindingsEnabled()`

Fixes #15387

Closes #15395",False
17ddba873b49d9329f09b67bb52088e40cb9979a,2016-11-15 23:22:33,Martin Staffa,"docs($httpProvider): fix broken layout caused by unclosed `

Closes #15393",False
ce49edc08b3d642f3768f4282d391062d2f83037,2016-11-15 16:10:20,Peter Bacon Darwin,"chore(docs): improve version picker

Closes #15385",False
0f45adebea9bdcf0e98fed30687448a6e8729ff5,2016-11-15 15:29:18,Peter Bacon Darwin,chore(package.json): update to latest version of shelljs,False
5419201a3c121a80c43f0f585da0214a5115bad6,2016-11-14 16:00:11,Julio Borja Barra,"docs(ngModel): fix example

For the example to work correctly, the initial model values have to be empty strings.

Closes #15272",False
fcf182eb13e0053d7735e7b34e6e46ba79af1cfc,2016-11-14 15:35:02,kentwalters,"docs(guide/controller): change ""hides"" to ""shadows""

""Shadows"" should better convey the meaning of ""overwriting the value of the property in the child
scope, while leaving the parent scope intact"".
""Hides"" could give the impression that it makes the property unavailable in the child scope and
leaving ""overrides"" only, could give the impression that the parent scope would be affected too,
especially to people not familiar with JavaScript's prototypal inheritance.

Closes #15375",False
f582f9e57be3cc7988d3a7c99493e77d8eda17e6,2016-11-11 18:04:25,Peter Bacon Darwin,chore(promises-tests): make timeout longer (correctly),False
c3a8b5d9f1925ddde59e32d5c8118e841e05918e,2016-11-11 04:29:37,Peter Bacon Darwin,chore(promises-tests): make timeout longer,False
6f072c8a415ae942e584681b7ee999023351c4ab,2016-11-11 03:39:56,Thomas Grainger,"docs(angular.isArray): Document that isArray is an alias

Closes #15383",False
4aa9534b0fea732d6492a2863c3ee7e077c8d004,2016-11-09 15:58:40,Peter Bacon Darwin,"fix($location): throw if the path starts with double (back)slashes

Previously `$location` was rewriting such paths to remove not only the
double slashes but also the first segment of the path, leading to an invalid
path.

In this change, we deem leading double (back)slashes an invalid path and
now throw a `$location:badpath` error if that occurs.

Closes #15365",False
627459b96d34e320668a51741ad9c2c6d292ea6a,2016-11-09 15:58:40,Peter Bacon Darwin,test(): remove redundant hashPrefix params,False
148cd2603064abfc3a0973e809ce208dc1f93b9d,2016-11-09 02:47:14,Tim Black,"docs(ngRepeat): correct typo

Closes #15378",False
5ac7daea72ec31cf337d1d21b13f0d17ff33994f,2016-11-08 21:12:39,Martin Staffa,"fix(input[radio]): use strict comparison when evaluating checked-ness

Closes #15283
Closes #15288

BREAKING CHANGE:

When using input[radio], the checked status is now determined by doing
a strict comparison between the value of the input and the ngModel.$viewValue.
Previously, this was a non-strict comparison (==).

This means in the following examples the radio is no longer checked:

```
  <!-- this.selected = 0 -->
  <input type=""radio"" ng-model=""$ctrl.selected"" value=""0"" >

  <!-- this.selected = 0; this.value = false; -->
  <input type=""radio"" ng-model=""$ctrl.selected"" ng-value=""$ctrl.value"" >
```

The migration strategy is to convert values that matched with non-strict
conversion so that they will match with strict conversion.",False
b5a5623fc7db40f32115e37546b7da1ef4d1c291,2016-11-07 18:25:09,Kyle Wuolle,"docs(filterFilter): mark the `comparator` parameter as optional

Mark the `comparator` parameter as optional and mention that it defaults to `false`.

Fixes #15312

Closes #15371",False
3e87f54922a2a14bebf4fc4e63a6fb39e5054b75,2016-11-07 16:20:27,Georgios Kalpakas,docs(ngRepeat): add warning about `track by $index` with one-time bindings,False
810a3e429a43ccdc1b929ee529a4fd87c8a332ca,2016-11-05 21:39:46,NoHomey,"docs(CHANGELOG.md): add language ids to code blocks for syntax highlighting

Add missing language identifiers to code blocks used as examples, in order to
have proper syntax highlighting.

Fixes #15356

Closes #15357",False
fc3e48980bb2a689b597b6330e4ac86afa190e46,2016-11-05 18:59:12,sathify,chore(docs): apply consistent css property spacing,False
a48f64162d4e9668253de474a42a5943b441e477,2016-11-05 18:59:12,sathify,chore(docs): use $document[0],False
b28f1fc3fb38da5d2fd26143b4a8133ebcdd9071,2016-11-05 17:48:48,Martin Staffa,"chore(docs-gen): create plnkr examples with the correct version

- docs for the snapshot will include the snapshot files from code.angularjs.org
- docs for tagged versions will include the files from the (Google) CDN
- docs for local / untagged versions will try to include the files from the (Google) CDN, which will fail. This gives immediate feedback that something is broken.

Closes #15267
Closes #15358",False
53cb1d7d40e2ad736c3d39f49477951a34aeda0b,2016-11-05 17:03:14,Peter Bacon Darwin,"chore(protractor): upgrade to latest 4.0.10

This fixes problems with testing against Chrome 54.",False
d80cdeb3af74a5c78b42f49e881511e9248ed6be,2016-11-04 22:20:13,Martin Staffa,"docs($routeProvider): document that one of template or templateUrl is required

Closes #8604",False
6d3329479fae215c5f2fc7df77f9fee893c387bf,2016-11-04 18:42:12,Corey Cacic,"docs($cookiesProvider): add example for overwriting defaults on provider

Add an example on how to set default values on `$cookiesProvider`. Many similar services support
overriding the `defaults` object with a new one, but this service only supports changing individual
properties.

Closes #15362",False
d71788455d9e1da2a342bb6464fee4cb931b9d4c,2016-11-03 20:12:32,Tom Harvey,"docs($resourceProvider): correct JS syntax error in code example

Closes #15360",False
bcd0d4d896d0dfdd988ff4f849c1d40366125858,2016-11-03 19:53:12,Michał Gołębiowski,"feat($compile): set preAssignBindingsEnabled to false by default

Fixes #15350
Closes #15352

BREAKING CHANGE: Previously, $compileProvider.preAssignBindingsEnabled was
set to true by default. This means bindings were pre-assigned in component
constructors. In Angular 1.5+ the place to put the initialization logic
relying on bindings being present is the controller $onInit method.

To migrate follow the example below:

Before:

```js
angular.module('myApp', [])
  .component('myComponent', {
    bindings: {value: '<'},
    controller: function() {
      this.doubleValue = this.value * 2;
    }
  });
```

After:
```js
angular.module('myApp', [])
  .component('myComponent', {
    bindings: {value: '<'},
    controller: function() {
      this.$onInit = function() {
        this.doubleValue = this.value * 2;
      };
    }
  });
```

If you don't have time to migrate the code at the moment, you can flip the
setting back to true:
```js
angular.module('myApp', [])
  .config(function($compileProvider) {
    $compileProvider.preAssignBindingsEnabled(false);
  })
  .component('myComponent', {
    bindings: {value: '<'},
    controller: function() {
      this.doubleValue = this.value * 2;
    }
  });
```
Don't do this if you're writing a library, though, as you shouldn't change
global configuration then.",False
0ff10e1b56c6b7c4ac465e35c96a5886e294bac5,2016-11-02 19:03:12,Martin Probst,"fix(security): do not auto-bootstrap when loaded from an extension.

Extension URIs (`resource://...`) bypass Content-Security-Policy in Chrome and
Firefox and can always be loaded. Now if a site already has a XSS bug, and uses
CSP to protect itself, but the user has an extension installed that uses
Angular, an attacked can load Angular from the extension, and Angular's
auto-bootstrapping can be used to bypass the victim site's CSP protection.

Notes:
- `isAutoBootstrapAllowed` must be initialized on load, so that `currentScript`
  is set correctly.
- The tests are a bit indirect as reproducing the actual scenario is too
  complicated to reproduce (requires signing an extension etc). I have confirmed
  this to be working manually.

Closes #15346",False
a7076dc0bb77ca1eff792c56394cc7c97a1a3b76,2016-11-02 19:02:02,Michał Gołębiowski,"chore(*): switch URLs from npmcdn.com to unpkg.com

The domain changed, the old one redirects to the new one.",False
433c8714f3d065a9a842502579b65d0388dd47ec,2016-11-02 17:52:39,Martin Staffa,"fix(docsApp): show correct version number in api index

Previously, the index would show the version of Angular that runs on
the page, not the version for which the docs are. This meant that in
that snapshot docs the stable version was displayed.

The `$scope.docsVersion` value was used in the plnkr opening code, but
has not been used since https://github.com/angular/angular.js/commit/bdec35cebc89e0d80a04eeffbd71ad999fc7e61a.

Closes #15265",False
01d86381141cda4a13ad6b29a4e81eb9a528e99d,2016-11-02 17:51:31,Martin Staffa,"chore: delete the gdocs.js file

This file was probably used for an early version of the docs, but hasn't been updated since 2011.

Closes #15325",False
856e300046732fbc1e92cc81c0ef211397a28f13,2016-11-02 15:41:49,Michał Gołębiowski,"chore(*): make some files non-executable

The repository contained JS/HTML/PNG files that had the executable bit enabled
for no real reason.

Closes #15339",False
3b7f29ff63e8bf02327a1430dcc2a4c83915a206,2016-11-01 16:10:58,Kyle Lieber,"perf(ngOptions): avoid calls to `element.value`

In some cases IE11/Edge calls to `element.value` are very slow when the
`element.value` has not been set. Normally, these calls are usualy 0-3 ms
but in these cases it can take 200-300 ms. This can easily add 3 or more
seconds to the load time on a view that has 10 or more select tags using
`ngOptions`.

The line this pull request is changing not only suffers from the performance
issue described above but it also appears to be broken. The code is checking
that `option.value` does not equal `element.value` but then sets `element.value`
to `option.selectValue`.

I don't believe `option.value` is actually defined anywhere and likely it
was always intended to be `option.selectValue`. This means that check would
always be true and since this code has been this way for quite a while and
is causing a performance issue I've just removed the check. This way a call
to `element.value` is never made prior to it's value being set.

Closes #15344",False
bdf960294ada6f5ecbf9494372922f5f9cfb0a94,2016-11-01 16:02:03,Josh Soref,docs(CONTRIBUTING.md): add note about scope wildcard,False
79d2b9a5a6f2a57c33955e9ba8ddf24ebf3e63ff,2016-10-31 15:01:23,Jason Bedard,"refactor($parse): remove unused expression arguments

These are no longer required after the removal of the expression sandbox errors

Closes #15276",False
e77f717ebf8bb2000b96331f696b03910c1aedb6,2016-10-31 14:59:28,Martin Staffa,"docs(guide/Conceptual Overview): fix external api example

In 1.6, urls accessed with jsonp must be whitelisted via sce. 
However, the yahoo finance api used in the example allows CORS
access via Access-Control-Allow-Origin:""*"", so we can simply use
`$http.get` instead.

Closes #15336",False
872bdbd3439178eff82171c999717b517ce81188,2016-10-31 00:58:46,Erick Delfin,"docs(README.md): mention ""Pug"" (Jade's new name)

Closes #15338",False
f1e677895e936e60be519338a5ae935cd8235db4,2016-10-30 16:43:54,Jason Bedard,"refactor($compile): remove unnecessary assignment

Closes #15337",False
7ed0340488bc8d0d1791cebd564594764526f66f,2016-10-29 22:22:03,Martin Staffa,"style(ng/animate.js): remove a newline

Closes #15309",False
5cce6e233e332d24383123f185351a28e2c65d56,2016-10-29 21:10:21,Josh Soref,"docs(*): fix typos

* a
* allows
* angularytics
* animate
* architecting
* asynchronously
* attribute
* back
* browser
* callback
* component
* delimited
* dependencies
* dynamically
* empty
* encoded
* explicitly
* expression
* fails
* guarantees
* hierarchy
* highlight
* identifiers
* immediately
* infinite
* initialized
* inputting
* instance
* interprets
* linking
* location
* misformed
* numerically
* occurring
* overridden
* overwritten
* parameters
* Pluralsight
* precedence
* primitive
* properly
* prototypically
* representation
* response
* separately
* separator
* should
* specifying
* supported
* template
* thrown
* transclude
* transclusion
* transitions
* trigger
* useful",False
305e201b71710f1d7742662d36450b1926f4aeb6,2016-10-29 21:10:21,Josh Soref,"test(*): fix some inconsequential typos

* select
* synopsis
* params
* template",False
47ba51eaf6bd3b5477e08b16fcc3ef296db0d3b7,2016-10-29 15:21:25,Erik Smith,"docs(guide/production): fix typo (""3rd part"" --> ""3rd party"")

Closes #15328",False
1cf01d6fa7fcfb45bef46e4a800845ae8ab90b06,2016-10-28 00:58:09,Peter Bacon Darwin,"chore(version-info): fix `getTaggedVersion`

The version being used was a ""raw"" version which included the ""v"" prefix.",False
74c19f096f9dda1969809e37bfc7a07b3386239b,2016-10-27 22:18:28,Peter Bacon Darwin,"chore(version-info): fix `getTaggedVersion`

The version being used was a `Semver` object instead of a string.",False
9e4d42cafb2070530a8f4ee96fce5f3b5f869f96,2016-10-27 13:49:55,Peter Bacon Darwin,"chore(version-info): use branchPattern to check tag

We have two fields in package.json for checking the current version:

* branchVersion
* branchPattern

The `branchVersion` field is used to work out what version to use in the
docs application, so we should not update this to the most recent version
until that version is on the Google CDN. Otherwise the docs app will break.

The `branchPattern` is used to determine what branch we are currently
working from and is generally used as a gate-keeper to prevent invalid
releases from the wrong branch.

The `getTaggedVersion()` method was using the `branchVersion` to check
that the tagged commit was valid but this fails when we are moving to a
new minor version with release candidates.

This fix avoids the problem by doing a custom comparison against the
`branchPattern` instead.",False
ad3a1f9deacce6791ba88f41bce5cc54444bd7b2,2016-10-27 01:43:29,Peter Bacon Darwin,chore(package.json): bump  for new minor version,False
3c88c624463ff86896d2e4750ad75e152c87f5ed,2016-10-26 22:20:04,Peter Bacon Darwin,docs(CHANGELOG): add 1.6.0-rc.0 release notes,False
491d23ed571c514cdd44479166d843501813ac91,2016-10-26 22:20:04,Peter Bacon Darwin,chore(deps): add changez,False
6a3374968680ccd809b62ba22b834389ebba99bc,2016-10-26 02:34:14,Allan Watson,"docs(orderBy): clarify behavior of default comparator wrt `null`

Document how `orderBy`'s default comparator handles `null` values.

Fixes #15293

Closes #15304",False
21ac2c42eab490a1fb2235c694ae8d934c5e9b36,2016-10-26 02:04:34,emed,"docs(error/ueoe): add another possible cause

Mention unescaped quotes as another possible cause for this error.

Closes #15313",False
eeb9ef09f9972ec1850549f06a324f150b732873,2016-10-21 17:07:15,Peter Bacon Darwin,"chore(gruntfile): check the node version before starting

We specify the node version that is required to run the build in the `.nvmrc`
file. So let's check that the current node version satisfies this and report
a helpful message if it is not.",False
a6118dfda45b2911c305d344a7c6a4a9411e2d13,2016-10-21 15:56:42,Georgios Kalpakas,"chore(ng-closure-runner): upgrade to version 0.2.4

Version 0.2.4's `minErr` implementation is up to date with the one in core.

Fixes #14971

Closes #15307",False
586e2acb269016a0fee66ac33f4a385f631afad0,2016-10-20 21:56:01,Jonathan Yates,"fix($compile): clean up `@`-binding observers when re-assigning bindings

Fixes #15268

Closes #15298",False
41034bb41beb6df132f677b83d6518df38827408,2016-10-20 21:38:43,Jason Bedard,"test($compile): ensure equal but different instance changes are detected in onChanges

Closes #15300",False
828f8a63b588003da426405083f56c8bfaacb450,2016-10-20 12:18:04,Jason Bedard,"docs($controller): deprecate the use of $controllerProvider#allowGlobals

Closes #15230",False
f5f802c6e68a3d4e22f5e7725057652519d15e60,2016-10-20 12:15:14,laranhee,"docs($rootScope): add missing round bracket

Closes #15299",False
35482babd9eb0970edbc99f223e04594a9d09364,2016-10-20 02:40:52,Michał Gołębiowski,"refactor($sniffer): remove $sniffer.vendorPrefix

Previously, Angular tried to detect the CSS prefix the browser supports and
then use the saved one. This strategy is not ideal as currently some browsers
are supporting more than one vendor prefix. The best example is Microsoft Edge
that added -webkit- prefixes to be more Web-compatible; Firefox is doing
a similar thing on mobile. Some of the -webkit--prefixed things are now even
getting into specs to sanction that they're now required for Web compatibility.

In some cases Edge even supports only the -webkit--prefixed property; one
example is -webkit-appearance.

$sniffer.vendorPrefix is no longer used in Angular core outside of $sniffer
itself; taking that and the above problems into account, it's better to just
remove it. The only remaining use case was an internal use in detection of
support for transitions/animations but we can directly check the webkit prefix
there manually; no other prefix matters for them anyway.

$sniffer is undocumented API so this removal is not a breaking change. However,
if you've previously been using it in your code, just paste the following
to get the same function:

    var vendorPrefix = (function() {
      var prefix, prop, match;
      var vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/;
      for (prop in document.createElement('div').style) {
        if ((match = vendorRegex.exec(prop))) {
          prefix = match[0];
          break;
        }
      }
      return prefix;
    })();

The vendorPrefix variable will contain what $sniffer.vendorPrefix used to.

Note that we advise to not check for vendor prefixes this way; if you have to
do it, it's better to check it separately for each CSS property used for the
reasons described at the beginning. If you use jQuery, you don't have to do
anything; it automatically adds vendor prefixes to CSS prefixes for you in
the .css() method.

Fixes #13690
Closes #15287",False
7dacbcc991657dacbec7b0cad4df318a8075ec04,2016-10-19 17:57:54,Georgios Kalpakas,"test(input): fix typo (`step=""{{step}}""""` --> `step=""{{step}}""`)",False
081d06ffd15c2c6c539ce97b5eb63fa8e2403818,2016-10-19 17:22:51,Georgios Kalpakas,"fix(input): fix `step` validation for `input[number]`/`input[range]`

Related to 9a8b8aa and #15257. Fixes the issue discussed in
https://github.com/angular/angular.js/commit/9a8b8aa#commitcomment-19108436.

Fixes #15257

Closes #15264",False
d6c91ea17589a6401e766dac70367bc48d7d3b74,2016-10-19 17:22:28,Georgios Kalpakas,refactor(input): avoid duplicating `step`/`ngStep` tests,False
00b60f2f03c46f4e8ee40b518747f15f33bbfebc,2016-10-19 15:42:56,Martin Staffa,"docs(a): remove outdated practice

Using a tags as buttons is bad for accessibility and usability",False
18263f1c527f656c0b7194d128b2de7ed2d90641,2016-10-19 15:25:53,Martin Staffa,"chore(docs-app): improve layout when loading partials

By setting the current partial content to hidden, the current height
of the window is maintained until the new content is loaded.
This prevents flickering caused by the scrollbar (dis)appearing and
the footer coming into view.",False
daa47e33e38d1c097a94494f19e4e492d049f608,2016-10-18 02:46:41,Martin Staffa,"Revert ""chore(doc-gen, docs-app): create plnkr examples with correct Angular version""

This patch relies on a change in the dgeni example package, which has not been added to dgeni yet.

This reverts commit db02008fe274410d2b8e2715fa4a3c8c9b2ce809.",False
19973609f43af781b1c4467f3acbc42b3a8f791e,2016-10-17 23:02:15,Martin Staffa,"chore(docs-app): show loader when loading view / partial

Closes #14385
PR (#15280)",False
db02008fe274410d2b8e2715fa4a3c8c9b2ce809,2016-10-17 23:01:39,Martin Staffa,"chore(doc-gen, docs-app): create plnkr examples with correct Angular version

When the docs are based on the snapshot, the plnkr examples must use the snapshot files
from code.angularjs.org

Closes #15267
PR (#15269)",False
705afcd160c8428133b36f2cd63db305dc52f2d7,2016-10-17 15:51:29,Martin Staffa,"fix($location): prevent infinite digest with IDN urls in Edge 

Internationalized Domain Urls, for example urls with Umlaut (Ä, Ö, Ü)
cause infinite digest in Edge 38.14393.0.0 because lastIndexOf doesn't
work correctly in this version when the search string is the same as the haystack string.

The patch uses an implementation based on core.js: https://github.com/zloirock/core-js/blob/v2.4.1/modules/es6.string.starts-with.js#L16

Edge Bug: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/9271625/

Fixes #15217
PR #15235",False
aa6a80618d1e191501488f50b4e21b43f63eabdf,2016-10-17 15:08:40,Georgios Kalpakas,"chore(tutorial): make diagram images responsive

Fixes angular/angular-phonecat#376

Closes #15275",False
b8c8262808f2e1527f5e7607b40765efee71c975,2016-10-17 12:59:24,Venkat Ganesan,"docs(input[checkbox]): mention `ngChecked`

Closes #14465
Closes #15277",False
406c1b094bc0a8a79b06f0d5f0cecdfb9f6087b0,2016-10-15 03:45:12,Georgii Dolzhykov,"docs($rootScope.Scope): grammar

Closes #15263",False
c22615cbfbaa7d1712e79b6bf2ace6eb41313bac,2016-10-14 15:09:21,Martin Staffa,"refactor(compileSpec): make tests consistent

PR (#15141)",False
fc0c11db845d53061430b7f05e773dcb3fb5b860,2016-10-13 12:17:16,Michał Gołębiowski,"fix(jqLite): camelCase keys in jqLite#data

This change aligns jqLite with jQuery 3.
The relevant bit of jQuery code is
https://github.com/jquery/jquery/blob/3.1.1/src/data/Data.js

Close #15126

BREAKING CHANGE: Previously, keys passed to the data method were left untouched.
Now they are internally camelCased similarly to how jQuery handles it, i.e.
only single (!) hyphens followed by a lowercase letter get converted to an
uppercase letter. This means keys `a-b` and `aB` represent the same data piece;
writing to one of them will also be reflected if you ask for the other one.

If you use Angular with jQuery, it already behaved in this way so no changes
are required on your part.

To migrate the code follow the examples below:

BEFORE:

/* 1 */
elem.data('my-key', 2);
elem.data('myKey', 3);

/* 2 */
elem.data('foo-bar', 42);
elem.data()['foo-bar']; // 42
elem.data()['fooBar']; // undefined

/* 3 */
elem.data()['foo-bar'] = 1;
elem.data()['fooBar'] = 2;
elem.data()['foo-bar']; // 1

AFTER:

/* 1 */
// Rename one of the keys as they would now map to the same data slot.
elem.data('my-key', 2);
elem.data('my-key2', 3);

/* 2 */
elem.data('foo-bar', 42);
elem.data()['foo-bar']; // undefined
elem.data()['fooBar']; // 42

/* 3 */
elem.data()['foo-bar'] = 1;
elem.data()['fooBar'] = 2;
elem.data()['foo-bar']; // 2",False
73050cdda04675bfa6705dc841ddbbb6919eb048,2016-10-13 12:17:15,Michał Gołębiowski,"fix(jqLite): align jqLite camelCasing logic with JQuery

jqLite needs camelCase for it's css method; it should only convert one dash
followed by a lowercase letter to an uppercase one; it shouldn't touch
underscores, colons or collapse multiple dashes into one. This is behavior
of jQuery 3 as well.

Also, jqLite's css camelCasing logic was put in a separate function and
refactored: now the properties starting from an uppercase letter are used by
default (i.e. Webkit, not webkit) and the only exception is for the -ms- prefix
that is converted to ms, not Ms. This makes the logic clearer as we're just
always changing a dash followed by a lowercase letter by an uppercase one; this
is also how it works in jQuery.

The camelCasing for the $compile and $sce services retains the previous behaviour.

Ref #15126
Fix #7744

BREAKING CHANGE: before, when Angular was used without jQuery, the key passed
to the css method was more heavily camelCased; now only a single (!) hyphen
followed by a lowercase letter is getting transformed. This also affects APIs
that rely on the css method, like ngStyle.

If you use Angular with jQuery, it already behaved in this way so no changes
are needed on your part.

To migrate the code follow the example below:

Before:

HTML:

// All five versions used to be equivalent.
<div ng-style={background_color: 'blue'}></div>
<div ng-style={'background:color': 'blue'}></div>
<div ng-style={'background-color': 'blue'}></div>
<div ng-style={'background--color': 'blue'}></div>
<div ng-style={backgroundColor: 'blue'}></div>

JS:

// All five versions used to be equivalent.
elem.css('background_color', 'blue');
elem.css('background:color', 'blue');
elem.css('background-color', 'blue');
elem.css('background--color', 'blue');
elem.css('backgroundColor', 'blue');

// All five versions used to be equivalent.
var bgColor = elem.css('background_color');
var bgColor = elem.css('background:color');
var bgColor = elem.css('background-color');
var bgColor = elem.css('background--color');
var bgColor = elem.css('backgroundColor');

After:

HTML:

// Previous five versions are no longer equivalent but these two still are.
<div ng-style={'background-color': 'blue'}></div>
<div ng-style={backgroundColor: 'blue'}></div>

JS:

// Previous five versions are no longer equivalent but these two still are.
elem.css('background-color', 'blue');
elem.css('backgroundColor', 'blue');

// Previous five versions are no longer equivalent but these two still are.
var bgColor = elem.css('background-color');
var bgColor = elem.css('backgroundColor');",False
beab3baec3728cd4034df4bbccdf52af2b7d8b64,2016-10-12 23:01:55,Michał Gołębiowski,"chore(jqLite): remove the ready handlers instead of setting a flag

This change aligns jqLite with the jQuery implementation.

Closes #15237",False
e008df6c8c1f2f7741618f5e57f3ebcbeebd9a15,2016-10-12 23:01:55,Michał Gołębiowski,"docs(jqLite): remove the removal plan info for bind/unbind

We're not going to remove the aliases before jQuery does.",False
8e82bf51b13c80bcba7195f649cff2445b9d641c,2016-10-12 23:01:55,Michał Gołębiowski,"refactor(jqLite): deprecate jqLite#ready

Use jqLite(fn) instead of jqLite(document).ready(fn).",False
369fb7f4f73664bcdab0350701552d8bef6f605e,2016-10-12 23:01:55,Michał Gołębiowski,"feat(jqLite): implement jqLite(f) as alias to jqLite(document).ready(f)

jQuery has supported this form for a long time. As of jQuery 3.0 this form is
the preferred one and all others are deprecated so jqLite(f) is now also
supported.

All internal invocations of jqLite(document).ready(f) (& equivalent) have been
replaced by jqLite(f).

Tests for these methods have been added as jqLite#ready had no explicit tests
so far.",False
4f44e018948c45bfb07f0170de4f703d22778d71,2016-10-12 12:47:23,mohamed amr,"fix($parse): treat falsy values as defined in assignment expressions

Closes #14990
Closes #14994",False
606ea5d23ee8bbb8b7ee238bf07ce4c72de7eaac,2016-10-11 18:03:53,Peter Bacon Darwin,"fix($compile): ensure that hidden input values are correct after history.back

Due to the nature of some browser's PageCache/BFCache, returning to an Angular
app sometimes causes `input[hidden]` elements to retain the last value
that was stored before the page was navigated away from previously.

This is particularly problematic if the input has an interpolated value.
E.g. `<input type=""hidden"" value=""{{ 1 + 2 }}"">` since when the browser
returns, instead of the original interpolation template, the HTML contains
the previous value `<input type=""hidden"" value=""3"">`.

This commit instructs the browser not to attempt to reinstate the previous
value when navigating back in history by setting `autocomplete=""off""` on
the hidden input element element.",False
ec83b04df1f38f37066c2ce6cf791405af73a9b3,2016-10-11 17:58:56,Peter Bacon Darwin,"revert:fix(input): ensure that hidden input values are correct after history.back

This reverts commit 298f8c4d13fbaa104845619e5518cb03c2aad05b.
There was a regression in angular-material that relied upon the input directive
having `link.pre` property.",False
8d394de91fd96f87afdbb277520b111232ec4bdb,2016-10-11 03:37:52,Peter Bacon Darwin,docs(CHANGELOG): add 1.2.31 and 1.4.13 release info,False
298f8c4d13fbaa104845619e5518cb03c2aad05b,2016-10-11 00:39:15,Peter Bacon Darwin,"fix(input): ensure that hidden input values are correct after history.back

Due to the nature of some browser's PageCache/BFCache, returning to an Angular
app sometimes causes `input[hidden]` elements to retain the last value
that was stored before the page was navigated away from previously.

This is particularly problematic if the input has an interpolated value.
E.g. `<input type=""hidden"" value=""{{ 1 + 2 }}"">` since when the browser
returns, instead of the original interpolation template, the HTML contains
the previous value `<input type=""hidden"" value=""3"">`.

This commit instructs the browser not to attempt to reinstate the previous
value when navigating back in history by setting `autocomplete=""off""` on
the hidden input element element.",False
138fbf0d6c609c7d926b9dff10472d68efab8457,2016-10-10 10:58:02,Michał Gołębiowski,"refactor(jqLite): wrap the jqueryVersion binding in a span

Protractor's by.binding selector selects the whole element in which the binding
is contained as otherwise it can't know which bit of text has been interpolated.

It's safer to wrap the binding in a span so that we're sure what the e2e tests
are exactly testing.",False
a02c8863f9e48bc16bacae55c85b03871366d4c4,2016-10-10 10:26:56,Jason Bedard,"fix($parse): validate assignment lval in parser phase

The parser always threw an error in the case of an invalid left-value
assignment but it was an unhelpful:

```
Cannot set property 'undefined' of undefined
```

This commit provides a more meaningful error message, so it is not a
breaking change.

Closes #15234",False
faf0c3e4c1b6f79b00f92f1231491f7569ecd25e,2016-10-09 23:37:08,BobChao87,"refactor(ngModelSpec): use valueFn over curry

Refactor ngModelSpec to use internal helper function `valueFn`.
Use instead of multiple-defining a function called `curry`.

PR (#15231)

Addresses a quick change mentioned in PR 15208 from Issue #14734",False
39a3b58ed2595c904af02888cf5b46ebd3fdf1bf,2016-10-09 00:11:34,Frank Stepanski,"docs(README.md): expand the ""Interconnection with HTML"" section

Closes #15150",False
f41bd7691d5edc9c45b16657379c75748d5f76b7,2016-10-08 00:31:46,Martin Staffa,docs(changelog): add missing commit and remove empty lines,False
b3a3ed34b9c9d965233c0adc4fd4605fbe7c05d3,2016-10-07 20:57:01,Georgios Kalpakas,docs($http): display the actual default `Accept` header,False
34434cf528184290ce25fd11066ff8a3fa760519,2016-10-07 14:32:25,Jason Bedard,"refactor($q): separate Promise from Deferred

Closes #15064

BREAKING CHANGE:

Previously, the `Deferred` object returned by `$q.defer()` delegated the
`resolve()`, `reject()` and `notify()` methods to `Deferred.prototype`. Thus, it
was possible to modify `Deferred.prototype` and have the changes reflect to all
`Deferred` objects.

This commit removes that delegation, so modifying the above three methods on
`Deferred.prototype` will no longer have an effect on `Deferred` objects.",False
cdf3d5e0541230a44591d33c8c1aa68868ccf8fd,2016-10-07 14:14:09,Vincent Gillot,"docs(guide/component-router): fix typo (`$routeOnReuse` --> `$routerOnReuse`)

Closes #15224",False
4e6c14dcae4a9a30b3610a288ef8d20db47c4417,2016-10-06 15:45:39,Michał Gołębiowski,"feat(jqLite): don't throw for elements with missing getAttribute

jQuery falls back to prop here but this feature is not very well tested
& documented so let's just skip it here.

Closes #15181",False
d5b7803064650556a21bbe360d79a41f03b6d506,2016-10-06 15:45:39,Michał Gołębiowski,"refactor(jqLite): deprecate bind/unbind

The on/off aliases have been available since Angular 1.2. bind/unbind have
been deprecated in jQuery 3.0 so we're following suit in jqLite.",False
bb3cfd3d8feaeeb21cf85ba9a0376ea58f7c26cf,2016-10-06 15:45:39,Michał Gołębiowski,tests(jqLite): add basic tests for the bind/unbind aliases,False
304c76535932ec24bb044ba8b111517f6d9f1460,2016-10-06 15:45:39,Michał Gołębiowski,"perf(jqLite): move bind/unbind definitions out of the loop

The bind/unbind aliases to on/off were being assinged in every iteration
of the function assigning traversal methods to the prototype. Now it happens
only once.",False
095cacb79b881e1b36b52a943d2e05d79edee87d,2016-10-06 15:45:39,Michał Gołębiowski,chore(jqLite): fix a typo in a test name,False
c8ba433f1892f61e51991439e484e78322137eb6,2016-10-06 15:45:39,Michał Gołębiowski,"refactor(jqLite): refactor the attr method

The attr method was refactored to be divided into setter & getter parts
and to handle boolean attributes in each one of them separately instead of
dividing into boolean & non-boolean ones and then handling setter & getter
in both of them. This is because handling boolean & non-boolean attributes
has common parts; in particular handling of the `null` value or using
getAttribute to get the value in the getter.",False
3faf4505732758165083c9d21de71fa9b6983f4a,2016-10-06 15:45:39,Michał Gołębiowski,"feat(jqLite): don't remove a boolean attribute for .attr(attrName, '')

This change aligns jqLite with jQuery.

Ref #15126

BREAKING CHANGE: Before, using the `attr` method with an empty string as a value
would remove the boolean attribute. Now it sets it to its lowercase name as
was happening for every non-empty string so far. The only two values that remove
the boolean attribute are now null & false, just like in jQuery.

To migrate the code follow the example below:

Before:

elem.attr(booleanAttrName, '');

After:

elem.attr(booleanAttrName, false);

or:

elem.attr(booleanAttrName, null);",False
4e3624552284d0e725bf6262b2e468cd2c7682fa,2016-10-06 15:45:39,Michał Gołębiowski,"feat(jqLite): remove the attribute for .attr(attribute, null)

This change aligns jqLite with jQuery.

Also, the extra `2` second parameter to `setAttribute` has been removed;
it was only needed for IE<9 and latest jQuery doesn't pass it either.

Ref #15126

BREAKING CHANGE: Invoking `elem.attr(attributeName, null)` would set the
`attributeName` atribute value to a string `""null""`, now it removes the
attribute instead.

To migrate the code follow the example below:

Before:

elem.attr(attributeName, null);

After:

elem.attr(attributeName, ""null"");",False
7ceb5f6fcc43d35d1b66c3151ce6a71c60309304,2016-10-06 15:45:39,Michał Gołębiowski,"refactor(jqLite): Don't get/set props when getting/setting bool attrs

This is done automatically by browsers in cases where it's needed; the
workaround was only needed for IE<9. The new behavior means boolean attributes
will not be reflected on elements where browsers don't reflect them.

This change aligns jqLite with jQuery 3.

Fixes #14126

BREAKING CHANGE: Previously, all boolean attributes were reflected into
properties in a setter and from a property in a getter, even on elements that
don't treat those attributes in a special way. Now Angular doesn't do it
by itself but relies on browsers to know when to reflect the property. Note that
this browser-level conversions differs between browsers; if you need to change
dynamic state of an element you should modify the property, not the attribute.

See https://jquery.com/upgrade-guide/1.9/#attr-versus-prop- for a more detailed
description about a related change in jQuery 1.9.

To migrate the code follow the example below:

Before:

CSS:
input[checked=""checked""] { ... }

JS:
elem1.attr('checked', 'checked');
elem2.attr('checked', false);

After:

CSS:
input:checked { ... }

JS:
elem1.prop('checked', true);
elem2.prop('checked', false);",False
1f16c793961481e61231541664eea6cb812b9563,2016-10-06 15:45:39,Michał Gołębiowski,"docs(jqLite): Document that removeAttr doesn't support multiple attributes

jQuery supports removing multiple attributes in one go, jqLite doesn't.
This is now documented.",False
1ea3d889fa3cc0a3833ff2f17451ed4840b82d9e,2016-10-06 14:37:00,Peter Bacon Darwin,chore(doc-gen): improve version dropdown info,False
7bc71adc63bb6bb609b44dd2d3ea8fb0cd3f300b,2016-10-06 01:12:02,BobChao87,"fix(ngModel): treat synchronous validators as boolean always

Change synchronous validators to convert the return to boolean value.
Prevent unexpected behavior when returning `undefined`.

Closes #14734
Closes #15208

BREAKING CHANGE: Previously, only a literal `false` return would resolve as the
synchronous validator failing. Now, all traditionally false JavaScript values
are treated as failing the validator, as one would naturally expect.

Specifically, the values `0` (the number zero), `null`, `NaN` and `''` (the
empty string) used to considered valid (passing) and they are now considered
invalid (failing). The value `undefined` was treated similarly to a pending
asynchronous validator, causing the validation to be pending. `undefined` is
also now considered invalid.

To migrate, make sure your synchronous validators are returning either a
literal `true` or a literal `false` value. For most code, we expect this to
already be the case. Only a very small subset of projects will be affected.

Namely, anyone using `undefined` or any falsy value as a return will now see
their validation failing, whereas previously falsy values other than `undefined`
would have been seen as passing and `undefined` would have been seen as pending.",False
e8aebb38ff6a171b95001540e85ff730dc828c13,2016-10-05 21:41:45,Georgios Kalpakas,"test(*): introduce the `toEqualMinErr()` custom Jasmine matcher

Closes #15216",False
fbf30b28e0a3de717e3f8eb605a4920da080211b,2016-10-05 21:41:12,Georgios Kalpakas,refactor(*): use the `toThrowMinErr()` matcher when possible,False
b54a39e2029005e0572fbd2ac0e8f6a4e5d69014,2016-10-05 21:32:39,Georgios Kalpakas,"feat($http): remove deprecated callback methods: `success()/error()`

Closes #15157

BREAKING CHANGE:

`$http`'s deprecated custom callback methods - `success()` and `error()` - have been removed.
You can use the standard `then()`/`catch()` promise methods instead, but note that the method
signatures and return values are different.

`success(fn)` can be replaced with `then(fn)`, and `error(fn)` can be replaced with either
`then(null, fn)` or `catch(fn)`.

Before:

```js
$http(...).
  success(function onSuccess(data, status, headers, config) {
    // Handle success
    ...
  }).
  error(function onError(data, status, headers, config) {
    // Handle error
    ...
  });
```

After:

```js
$http(...).
  then(function onSuccess(response) {
    // Handle success
    var data = response.data;
    var status = response.status;
    var statusText = response.statusText;
    var headers = response.headers;
    var config = response.config;
    ...
  }, function onError(response) {
    // Handle error
    var data = response.data;
    var status = response.status;
    var statusText = response.statusText;
    var headers = response.headers;
    var config = response.config;
    ...
  });

// or

$http(...).
  then(function onSuccess(response) {
    // Handle success
    var data = response.data;
    var status = response.status;
    var statusText = response.statusText;
    var headers = response.headers;
    var config = response.config;
    ...
  }).
  catch(function onError(response) {
    // Handle error
    var data = response.data;
    var status = response.status;
    var statusText = response.statusText;
    var headers = response.headers;
    var config = response.config;
    ...
  });
```

**Note:**
There is a subtle difference between the variations showed above. When using
`$http(...).success(onSuccess).error(onError)` or `$http(...).then(onSuccess, onError)`, the
`onError()` callback will only handle errors/rejections produced by the `$http()` call. If the
`onSuccess()` callback produces an error/rejection, it won't be handled by `onError()` and might go
unnoticed. In contrast, when using `$http(...).then(onSuccess).catch(onError)`, `onError()` will
handle errors/rejections produced by both `$http()` _and_ `onSuccess()`.",False
fb663418710736161a6b5da49c345e92edf58dcb,2016-10-05 19:09:50,Peter Bacon Darwin,"feat($http): JSONP callback must be specified by `jsonpCallbackParam` config

The query parameter that will be used to transmit the JSONP callback to the
server is now specified via the `jsonpCallbackParam` config value, instead of
using the `JSON_CALLBACK` placeholder.

* Any use of `JSON_CALLBACK` in a JSONP request URL will cause an error.
* Any request that provides a parameter with the same name as that given
by the `jsonpCallbackParam` config property will cause an error.

This is to prevent malicious attack via the response from an app inadvertently
allowing untrusted data to be used to generate the callback parameter.

Closes #15161
Closes #15143
Closes #11352
Closes #11328

BREAKING CHANGE

You can no longer use the `JSON_CALLBACK` placeholder in your JSONP requests.
Instead you must provide the name of the query parameter that will pass the
callback via the `jsonpCallbackParam` property of the config object, or app-wide via
the `$http.defaults.jsonpCallbackParam` property, which is `""callback""` by default.

Before this change:

```
$http.json('trusted/url?callback=JSON_CALLBACK');
$http.json('other/trusted/url', {params:cb:'JSON_CALLBACK'});
```

After this change:

```
$http.json('trusted/url');
$http.json('other/trusted/url', {callbackParam:'cb'});
```",False
6476af83cd0418c84e034a955b12a842794385c4,2016-10-05 18:49:55,Peter Bacon Darwin,"feat($http): JSONP requests now require a trusted resource URL

The $http service will reject JSONP requests that are not trusted by
`$sce` as ""ResourceUrl"".
This change makes is easier for developers to see clearly where in their
code they are making JSONP calls that may be to untrusted endpoings and
forces them to think about how these URLs are generated.

Be aware that this commit does not put any constraint on the parameters
that will be appended to the URL. Developers should be mindful of what
parameters can be attached and how they are generated.

Closes #11352

BREAKING CHANGE

All JSONP requests now require the URL to be trusted as resource URLs.
There are two approaches to trust a URL:

**Whitelisting with the `$sceDelegateProvider.resourceUrlWhitelist()`
method.**

You configure this list in a module configuration block:

```
appModule.config(['$sceDelegateProvider', function($sceDelegateProvider) {
  $sceDelegateProvider.resourceUrlWhiteList([
    // Allow same origin resource loads.
    'self',
    // Allow JSONP calls that match this pattern
    'https://some.dataserver.com/**.jsonp?**`
  ]);
}]);
```

**Explicitly trusting the URL via the `$sce.trustAsResourceUrl(url)`
method**

You can pass a trusted object instead of a string as a URL to the `$http`
service:

```
var promise = $http.jsonp($sce.trustAsResourceUrl(url));
```",False
9d08b33a0dd9d4a45dda512c95db12555baa9d17,2016-10-05 17:35:49,Peter Bacon Darwin,"test($route): ensure mock $sce delegate is implemented correctly

The mock calls to `valueOf(v)` and `getTrustedResourceUrl(v)` were not dealing
with the case where `v` was null.",False
e13eeabd7e34a78becec06cfbe72c23f2dcb85f9,2016-10-05 17:19:02,Georgios Kalpakas,"fix($q): treat thrown errors as regular rejections

Previously, errors thrown in a promise's `onFulfilled` or `onRejected` handlers were treated in a
slightly different manner than regular rejections:
They were passed to the `$exceptionHandler()` (in addition to being converted to rejections).

The reasoning for this behavior was that an uncaught error is different than a regular rejection, as
it can be caused by a programming error, for example. In practice, this turned out to be confusing
or undesirable for users, since neither native promises nor any other popular promise library
distinguishes thrown errors from regular rejections.
(Note: While this behavior does not go against the Promises/A+ spec, it is not prescribed either.)

This commit removes the distinction, by skipping the call to `$exceptionHandler()`, thus treating
thrown errors as regular rejections.

**Note:**
Unless explicitly turned off, possibly unhandled rejections will still be caught and passed to the
`$exceptionHandler()`, so errors thrown due to programming errors and not otherwise handled (with a
subsequent `onRejected` handler) will not go unnoticed.

Fixes #3174
Fixes #14745

Closes #15213

BREAKING CHANGE:

Previously, throwing an error from a promise's `onFulfilled` or `onRejection` handlers, would result
in passing the error to the `$exceptionHandler()` (in addition to rejecting the promise with the
error as reason).

Now, a thrown error is treated exactly the same as a regular rejection. This applies to all
services/controllers/filters etc that rely on `$q` (including built-in services, such as `$http` and
`$route`). For example, `$http`'s `transformRequest/Response` functions or a route's `redirectTo`
function as well as functions specified in a route's `resolve` object, will no longer result in a
call to `$exceptionHandler()` if they throw an error. Other than that, everything will continue to
behave in the same way; i.e. the promises will be rejected, route transition will be cancelled,
`$routeChangeError` events will be broadcasted etc.",False
823295fee058f169523e84f94be13962a9513d3d,2016-10-03 15:46:08,Justas Brazauskas,"docs(*): fix typos in comments and docs

Closes #15206",False
9062bae05c002934fe7bfd76043dcc3de9acfde6,2016-09-30 21:19:20,mrLarbi,"feat($anchorScroll): convert numeric hash targets to string

This allows `$anchorScroll(7)` to scroll to `<div id=""7"">` (although technically, the target ID is a
string, not a number).

Fixes #14680

Closes #15182",False
3253b5586191b7b487af66bb61943247c930c49f,2016-09-30 16:13:33,Georgios Kalpakas,"docs(ngCsp): fix ""directive""'s `restrict` and hide comment from output",False
2be5ac631b0bfa945a2867a555112f1c0db96e45,2016-09-30 14:56:17,Georgios Kalpakas,"docs(ngAnimate): fix typo (""an the"" --> ""an"")

Fixes #15194",False
26a6a9b624ee85ce51381ab0449f6cd775c445fb,2016-09-30 12:46:44,tijwelch,"docs($http): fix typo in `headersGetter`

Closes #15198",False
714b53ac6fd68f0909cf9aaea14f9b38f62f0da7,2016-09-30 12:38:12,GregoryPorter,"docs(tutorial): fix typos

- **step_04:** `controllers is one file` --> `controllers in one file`
- **step_06:** `.components.js` --> `.component.js`

Closes #15197",False
ddb4ef13a9793b93280e6b5ab2e0593af1c04743,2016-09-26 19:25:06,Georgii Dolzhykov,"docs(angular.mock.inject): improve formatting

Without backticks, underscores are rendered as italics.

PR (#15186)",False
723d64d370e0eff32fe37f77eb6f7dc90e0cf2fa,2016-09-26 19:24:02,pharkare,"docs(tutorial/index): fix spelling error for word 'standalone'

PR (#15187)",False
3fe3da8794571a1479d884be26a621f06cdb7842,2016-09-25 20:00:49,Georgios Kalpakas,"fix($compile): set attribute value even if `ngAttr*` contains no interpolation

Previoulsy, when the value of an `ngAttrXyz` attribute did not contain any interpolation, then the
`xyz` attribute was never set.

BTW, this commit adds a negligible overhead (since we have to set up a one-time watcher for
example), but it is justifiable for someone that is using `ngAttrXyz` (instead of `xyz` directly).

(There is also some irrelevant refactoring to remove unnecessary dependencies from tests.)

Fixes #15133

Closes #15149",False
f60447072df1207e6c70194305e43e78a6680761,2016-09-25 18:45:18,Elliot Cameron,"docs(guide/filter): imrpove explanation of ""pure function""

Improve the explanation of what a ""pure function"" is in simple words. The previous explanation
could be confusing, especially since the term ""idempotent"" (here used in it's broader
""Computer Science"" meaning) is overloaded and has much stricter semantics in Mathematics or pure
Functional Programming.

Closes #15173",False
90f947b18699d0fd93a2fdb8c7167e128587afec,2016-09-25 18:04:00,Adrian Bordinc,"docs($compile): Fix a typo in the warning header

Closes #15184",False
cf241c425b20569e4c7909bfbd379f5c07694288,2016-09-21 17:43:15,Joao Dinis,"docs(guide/concepts): insert comma

Closes #15166",False
8d4d3d527dfc525850def54972fa28c40e4360eb,2016-09-21 16:54:13,Georgios Kalpakas,"refactor($resource): use `route.defaults` (already merged `provider.defaults` + `options`)

Closes #15160",False
bf61c1471da08d7eabeab797ada6731a901e5974,2016-09-21 16:53:28,Georgios Kalpakas,refactor($resource): use local references of Angular helpers,False
6eb4ffc085cc0fde19cbac2c3da227ff47d71e4e,2016-09-21 16:53:28,Georgios Kalpakas,"fix($resource): pass `options` when binding default params

`Resource.bind()`, which creates an new Resource class with the same propertiesexcept for the
additional bound default parameters, was not passing the original Resource class' `options`,
resulting in different behavior.
This commit fixes it by passing the `options` when creating the new Resource class.",False
b59bc0b01ddddbe42310d113dafe127d4e71511c,2016-09-19 21:48:46,davidcigital,"docs(ngCsp): update explanation of CSP rules and how they affect Angular

Update the description of CSP, mainly regarding `unsafe-eval` and `unsafe-inline`. The way it was
presented previously was slightly misleading as it indicated that these were rules forbidding
certain things, when in fact it's a keyword in the CSP that disables the very rule that was
described. The updated text clarifies this better.

Closes #15142",False
f1cc58c7d282d48a9b23b90f1cc5e5b2bc9f296e,2016-09-19 21:36:23,Matt Gilson,"docs(angular.toJson): add missing param type

Reference:
[JSON.stringify](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).

Closes #15156",False
e1e2fe1c089d6cfac5b8c8517d29e6b7c431ea78,2016-09-19 20:27:31,Georgios Kalpakas,docs($templateCache): fix typo (template --> templateCache),False
bb8e955a02093b90567677820aefebb8b48f1c4f,2016-09-19 12:34:53,Stepan Suvorov,"docs(cacheFactory): remove `ng-include` practice from docs

Generally we don't use `ngInclude` any more, so this commit updates the
example snippet to use component instead.

Closes #15153",False
16dccea8873b06285d4ec6eb3bb8e96ccbd3b64e,2016-09-16 21:40:12,thorn0,"fix($compile): `bindToController` should work without `controllerAs`

Fixes #15088

Closes #15110",False
a1bdffa12f82e838dee5492956b380df7e54cdf9,2016-09-16 18:53:57,Georgios Kalpakas,"fix($compile): do not overwrite values set in `$onInit()` for `<`-bound literals

See #15118 for more details.

Fixes #15118

Closes #15123",False
52bf2bd11e9070807762bad1a7ff048a67f24b75,2016-09-16 18:53:47,Georgios Kalpakas,refactor(ngOptions): access `copy()` directly (`angular.copy` --> `copy`),False
32aa7e7395527624119e3917c54ee43b4d219301,2016-09-15 18:06:48,Peter Bacon Darwin,"fix(ngTransclude): use fallback content if only whitespace is provided

If the transcluded content is only whitespace then we should use the
fallback content instead. This allows more flexibility in formatting
your HTML.

Closes #15077
Closes #15140

BREAKING CHANGE:

Previously whitespace only transclusion would be treated as the transclusion
being ""not empty"", which meant that fallback content was not used in that
case.

Now if you only provide whitespace as the transclusion content, it will be
assumed to be empty and the fallback content will be used instead.

If you really do want whitespace then you can force it to be used by adding
a comment to the whitespace.",False
1547c751aa48efe7dbefef701c3df5983b04aa2e,2016-09-15 15:48:26,Peter Bacon Darwin,"refactor($parse): remove Angular expression sandbox

The angular expression parser (`$parse`) attempts to sandbox expressions
to prevent unrestricted access to the global context.

While the sandbox was not on the frontline of the security defense,
developers kept relying upon it as a security feature even though it was
always possible to access arbitrary JavaScript code if a malicious user
could control the content of Angular templates in applications.

This commit removes this sandbox, which has the following benefits:

* it sends a clear message to developers that they should not rely on
the sandbox to prevent XSS attacks; that they must prevent control of
expression and templates instead.
* it allows performance and size improvements in the core Angular 1
library.
* it simplifies maintenance and provides opportunities to make the
parser more capable.

Please see the [Sandbox Removal Blog Post](http://angularjs.blogspot.com/2016/09/angular-16-expression-sandbox-removal.html)
for more detail on what you should do to ensure that your application is
secure.

Closes #15094",False
76d3dafdeaf2f343d094b5a34ffb74adf64bb284,2016-09-15 15:40:27,Prashant Singh Pawar,"fix($compile): don't throw tplrt error when there is a whitespace around a top-level comment

Added new conditional for NODE_TYPE_TEXT inside removeComments method of $compile
Added corresponding unit tests.

Closes #15108
PR (#15132)",False
9e24e774a558143b3478536911a3a4c1714564ba,2016-09-15 01:51:09,Jason Bedard,"perf(form, ngModel): change controllers to use prototype methods

This makes the largetable-bp ng-model benchmarks 10-15% faster (down 90-100ms for me). The actual controller instantiation doesn't change too much but the overall numbers seem consistently faster, I assume all due to reducing memory usage / gc. Specifically on creation there is ~40% less memory GCed, on destruction there is about ~25% less.

PR (#13286)

BREAKING CHANGE:
The use of prototype methods instead of new methods per instance removes the ability to pass 
NgModelController and FormController methods without context.

For example

`$scope.$watch('something', myNgModelCtrl.$render)`

will no longer work because the `$render` method is passed without any context. 
This must now be replaced with

```
$scope.$watch('something', function() {
  myNgModelCtrl.$render();
})
```

or possibly by using `Function.prototype.bind` or `angular.bind`.",False
21e4db9e0783d1f22b043cdb053e3b8c155a2786,2016-09-14 17:26:45,Jérome Freyre,"docs(input[range]): fix erroneous examples

PR (#15135)",False
07849779ba365f371a8caa3b58e23f677cfdc5ad,2016-09-12 21:54:29,Martin Staffa,chore(benchmarks): fix order-by benchmark,False
912d5b9ad36efe3c4b8e0da4b20e2f3540472af8,2016-09-12 19:57:37,Georgios Kalpakas,docs(ngView): remove obsolete known issue,False
d14c7f3c31deb098bf8f1c50ea6d00af758dbdcb,2016-09-10 23:00:14,Georgii Dolzhykov,"docs($compile): remove obsolete sentence

Fixes #15109

Closes #15119",False
78e6a58368470cef3454b33acd8ee788f2eb88e2,2016-09-10 18:33:13,Jason Bedard,"refactor($q): remove unnecessary checks/helpers/wrappers

- Remove internal `makePromise()` helper.
- Remove unnecessary wrapper functions.
- Remove unnecessary check for promises resolving multiple times.
  (By following the Promises/A+ spec, we know this will never happen.)
- Switch from function expressions to (named) function declarations.

Closes #15065",False
51c516e7d4f2d10b0aaa4487bd0b52772022207a,2016-09-10 03:04:29,Austin O'Neil,"docs(ngOptions): correct links

remove redundant link to ngOptions and add link to ngRepeat

PR (#15117)",False
51a2eb7d6fe62ad2d7ba0866cfbde0e69cab82eb,2016-09-09 02:37:27,Mohsen Azimi,"docs($q): fix typo in `race()` test description (array --> object)

Closes #15111",False
3f759b191dc0710b38042897749df17d50279de7,2016-09-09 02:22:39,Tyler Romeo,"fix($sniffer): don't use `history.pushState` in sandboxed Chrome Packaged Apps

While sandboxed Chrome Packaged Apps (CPAs) have the same restrictions wrt
accessing `history.pushState` as ""normal"" CPAs, they can't be detected in the
same way, as they do not have access to the same APIs.
Previously, due to their differences from normal CPAs, `$sniffer` would fail to
detect sandboxed CPAs and incorrectly assume `history.pushState` is available
(which resulted in an error being thrown).
This commit fixes the detection of sandboxed CPAs in `$sniffer`.

See #11932 and #13945 for previous work.

Closes #15021",False
a83a209df6e2680dfc94c4335bed0d182d903b37,2016-09-09 02:09:00,Georgios Kalpakas,docs(ngModelOptions): minor fixes/improvements,False
cc8ea72f3a9375deab4182eb35d615dd9a6eec7f,2016-09-09 00:53:41,Martin Staffa,docs(ngSwitch): add separator example,False
0b22173000596bf4b78f6a90083b994d46164d79,2016-09-09 00:40:14,Lucas Galfaso,"feat(ngSwitch): allow multiple case matches via optional attribute ngSwitchWhenSeparator

Adds an optional attribute `ngSwitchWhenSeparator` that allows multiple tokens to match a given `ngSwitchWhen`.

Closes #3410
Closes #3516

Closes #10798",False
4941e047b77a3428310ae27c6c66fad29c3b0836,2016-09-08 19:28:05,Martin Staffa,docs($compile): link to sections from properties in example,False
c729554281f630ba7ae5de88c5f5481241730883,2016-09-08 18:51:10,Austin O'Neil,"docs(guide/component): clarify when to use directives instead of components

Clarify that components cannot be used to perform actions in compile
and prelink functions.

Closes #15042
PR (#15100)",False
8ec3f4b518fef6ba667c98481f997b8c2f4e769c,2016-09-08 18:48:32,sethbattin,"docs($resourceProvider): include '$' in di in example

The injection argument is missing the '$' in the two examples.  The code fails as written.  This change corrects it.

(#15099)",False
d882fde2e532216e7cf424495db1ccb5be1789f8,2016-09-08 13:25:24,Michał Gołębiowski,"feat(jqLite): return [] for .val() on <select multiple> with no selection

Fixes #14370

BREAKING CHANGE: For the jqLite element representing a select element in
the multiple variant with no options chosen the .val() getter used to return
null and now returns an empty array.

To migrate the code follow the example below:

Before:

HTML:

    <select multiple>
        <option>value 1</option>
        <option>value 2</option>
    </select>

JavaScript:

    var value = $element.val();
    if (value) {
        /* do something */
    }

After:

HTML:

    <select multiple>
        <option>value 1</option>
        <option>value 2</option>
    </select>

JavaScript:

    var value = $element.val();
    if (value.length > 0) {
        /* do something */
    }",False
121f64936e82c92c6ec055b07be7511cc1c2834a,2016-09-08 13:25:24,Michał Gołębiowski,refactor(jqLite): use the toEqualOneOf matcher in jqLite tests,False
dbb8483b4d6f7c133ac96b700a60fc26f52b6839,2016-09-08 13:25:24,Michał Gołębiowski,refactor(matchers): add the toEqualOneOf matcher,False
6341f4260abecb106a78427cc5aa6df5adc64eb3,2016-09-08 13:25:24,Michał Gołębiowski,"refactor(jqLite): run more tests on jQuery 2.2, add version detection helpers",False
704123a81bbfd9c88815543574ffbe6d4377eaa0,2016-09-07 21:40:23,Georgios Kalpakas,"docs($compile): be more explicit about linking not having taken place inside `cloneAttachFn`

Fixes #15093",False
c0cbe54bc68e805b7293ad56a71f5e50c2e9cf90,2016-09-07 17:33:45,Georgios Kalpakas,"test($compile): extend `$onChanges()` test to account for one more case

Discussed in https://github.com/angular/angular.js/pull/15098/files#r77770755.",False
7d7efbf545c8c07713eb45301660dcfca4121445,2016-09-07 16:49:27,Georgios Kalpakas,"fix($compile): avoid calling `$onChanges()` twice for `NaN` initial values

Closes #15098",False
3cb5bad15db3b85490f29e24a4880c5dbcd60f43,2016-09-07 13:22:00,Peter Bacon Darwin,"test($compile): add tests for provider settings

See https://github.com/angular/angular.js/pull/15095#issuecomment-244970426",False
dfb8cf6402678206132e5bc603764d21e0f986ef,2016-09-07 13:21:59,Peter Bacon Darwin,"feat($compile): add `preAssignBindingsEnabled` option

A new option to enable/disable whether directive controllers are assigned bindings before
calling the controller's constructor.

If enabled (true), the compiler assigns the value of each of the bindings to the
properties of the controller object before the constructor of this object is called.

If disabled (false), the compiler calls the constructor first before assigning bindings.

The default value is enabled (true) in Angular 1.5.x but will switch to false in Angular 1.6.x.

See #14580
Closes #15095",False
de1ede7f446f0d4384815dbdf52187f4e29998a2,2016-09-06 02:27:59,Martin Staffa,"docs(error/noident): add missing comma

Closes #15086",False
45129cfd06104bd89f469dded9ccbaf20894bd76,2016-09-06 02:23:07,BobChao87,"fix($sanitize): reduce stack height in IE <= 11

Update Internet Explorer-only helper function stripCustomNsAttrs to be less
recursive. Reduce stack height of function causing out of stack space error.

Closes #14928
Closes #15030",False
aa306c14cb46f0fe51b6a964ef57fca10d53dc29,2016-09-06 01:52:48,gdi2290,"refactor(*): introduce isNumberNaN

window.isNaN(‘lol’); //=> true
Number.isNaN(‘lol’); //=> false

isNaN converts it’s arguments into a Number before checking if it’s NaN.
In various places in the code base, we are checking if a variable is a Number and
NaN (or not), so this can be simplified with this new method (which is not exported on the
global Angular object).

Closes #11242",False
9fbad3c7c2070bf903f08d042918c12c23d228f6,2016-09-06 01:34:36,Martin Staffa,"chore(*): use binaries from node_modules/.bin

Closes #15071",False
6100f10fa9e02bb6b4228e8a553158c928d171d1,2016-09-06 01:34:36,John-David Dalton,chore(npm): use require.resolve when possible to avoid hard coded module paths,False
87a2ff76af5d0a9268d8eb84db5755077d27c84c,2016-09-03 01:10:12,Peter Bacon Darwin,"feat(ngModelOptions): allow options to be inherited from ancestor ngModelOptions

Previously, you had to apply the complete set of ngModelOptions at every point where
you might want to modify just one or two settings.

This change allows more general settings to be applied nearer to the top of the DOM
and then for more specific settings to override those general settings further down
in the DOM.

Furher there is now a new service `$modelOptions` that acts as the top level options
that are inherited by all ngModelOptions directives that do not already have an
ngModelOptions ancestor directive.

Closes #10922

BREAKING CHANGE:

Previously, if a setting was not applied on ngModelOptions, then it would default
to undefined. Now the setting will be inherited from the nearest ngModelOptions
ancestor.

It is possible that an ngModelOptions directive that does not set a property,
has an ancestor ngModelOptions that does set this property to a value other than
undefined. This would cause the ngModel and input controls below this ngModelOptions
directive to display different behaviour. This is fixed by explictly setting the
property in the ngModelOptions to prevent it from inheriting from the ancestor.

For example if you had the following HTML:

```
<form ng-model-options=""{updateOn: 'blur'}"">
  <input ng-model=""..."">
</form>
```

Then before this change the input would update on the default event not blur.
After this change the input will inherit the option to update on blur.
If you want the original behaviour then you will need to specify the option
on the input as well:

```
<form ng-model-options=""{updateOn: 'blur'}"">
  <input ng-model=""..."" ng-model-options=""{updateOn: 'default'}"">
</form>
```

The programmatic API for `ngModelOptions` has changed. You must now read options
via the `getOption` method, rather than accessing the option directly as a property
of the options object. This does not affect the usage in templates and only
affects custom directives that might have been reading options for their own purposes.",False
5be6f993aa64de4b7da4fd26dcd2cf5285bd6ed3,2016-09-01 23:38:52,Brian Glick,"docs(currency): add missing line break

Insert missing line break between currency examples

PR  (#15083)",False
81d52dfe3909cd442a793efb48dbef62340c03b0,2016-09-01 16:10:26,Packt,"docs(guide/External Resources): add a paid-online course

Closes #15075",False
11f2731f72e932615e8ce15e6a73f4ac808cc7e7,2016-08-31 02:18:46,Jason Bedard,"perf($compile): validate directive.restrict property on directive init

This allows the removal of try/catch from addDirective to avoid V8 deopt.

Previously the directive.restrict property was not validated. This would
potentially cause exceptions on each compilation of the directive
requiring a try/catch and potentially causing repeated errors.

New validation when directive.restrict is specified:
* must be a string
* must contain at least one valid character (E, A, C, M)

Cases which previously silently failed (now throw an error):
* values with an indexOf method (such as strings, arrays) which returned
 returned -1 for all valid restrict characters

Cases which previously worked unintentionally (now throw an error):
* arrays with single-character strings of valid restrict characters

PR (#13263)",False
1e1fbc75f5e20e8541f517a5cf6f30f8f2eed53f,2016-08-31 02:15:32,Jason Bedard,"fix($compile): disallow linking the same element more then once

Previously the following would invoke the element link function multiple
times, causing unknown and potentially buggy results:

    var link = $compile(html);
    link(scope);
    link(scope);

This was always unsupported. Now this throws a multilink error.

PR (#13422)",False
53a3bf6634600c3aeff092eacc35edf399b27aec,2016-08-28 20:23:08,Martin Staffa,"feat($compile): throw error when directive name or factory fn is invalid

Closes: #15056
PR (#15057)",False
e3a378e7a329f60f6b48517f83a4f4c9efecb056,2016-08-26 22:06:22,Georgios Kalpakas,"feat($resource): pass `status`/`statusText` to success callbacks

Fixes #8341
Closes #8841
PR (#14836)",False
c75698df55f5a026bcd7fcecbb9d4ff0bc3ebc3e,2016-08-26 17:46:59,Martin Staffa,fix(select): add/remove selected attribute for selected/unselected options,False
2785ad72599ca5f9558a116baecd83a5bebe3292,2016-08-26 17:46:59,Martin Staffa,"fix(select, ngOptions): make the handling of unknown / empty options consistent

- when the model does not match any option, the select generates an unknown option with the value
'? hashedModelVal ?' (select) or simply '?' (ngOptions) and inserts it into the select. This
option is then auto-selected by the browser. Once the user selects an option / the application sets
a matching model, the unknown option is removed from the select. It is therefore not user-selectable.

Alternatively, the application can provide an option with the value='', the so-called empty option.
The empty option takes over the role of the unknown option, in that it is selected when there's no
matching model, but it is not removed when a option and model match, and it can also be selected by
the user. The empty option has the value='' and sets the model to  if selected.

Previously, these concepts where a bit mushy, especially in ngOptions.

This fix now delegates the bulk of the work to the selectCtrl, as the concept of unknown and empty
option are the same for both directives. Only the generation of the empty option is different.

The commit also adjusts a test for an officially unsupported use-case: multiple empty options.
The new behavior is that the empty option that is registered last is used. The other one is still
present. Otherwise, this behavior is unspecified, and the docs are clear that only a single empty
option is allowed. We support dynamically generated empty options, but not multiple ones. I've left
the test to highlight that this might be someone's use case, and the we are aware of it.",False
ad9a99d6895e1c07c950f7141bb0edfc1d4aaf61,2016-08-26 13:28:02,Raphael Jamet,"fix($compile): lower the $sce context for src on video, audio, and track.

Previously, video, audio, and track sources were $sce.RESOURCE_URL. This is not justified as
no attacks are possible through these attributes as far as I can tell. This change is not
breaking, and uses of $sce.trustAsResourceUrl before assigning to src or ng-src attributes
will just be silently ignored.",False
7fb81ecf12eccdb58daccee9f61970ce70311f0c,2016-08-26 13:25:16,Martin Staffa,"Revert ""fix($compile): lower the $sce context for `src` on video, audio, source, and track""

This reverts commit 485320129dd8a942acfcb1e9388eb09667f383b6, because I did not author most of
this commit. I merged via Github and for some reason it used the last commit in a series of commits
to establish the author.",False
485320129dd8a942acfcb1e9388eb09667f383b6,2016-08-26 13:22:11,Martin Staffa,"fix($compile): lower the $sce context for `src` on video, audio, source, and track

Previously, video, audio, source, and track sources were $sce.RESOURCE_URL. This is not justified as
no attacks (script execution) are possible through these attributes as far as we can tell. Angular2 also uses the same categorization.

This change is not breaking, and uses of $sce.trustAsResourceUrl before assigning to src or ng-src attributes will just be silently ignored.

This has also been given a LGTM by @mprobst via email.

PR (#15039)
Closes #14019",False
13c2522baf7c8f616b2efcaab4bffd54c8736591,2016-08-25 21:45:10,Georgios Kalpakas,"fix($compile): correctly merge consecutive text nodes on IE11

As explained in #11781 and #14924, IE11 can (under certain circumstances) break up a text node into
multiple consecutive ones, breaking interpolated expressions (e.g. `{{'foo'}}` would become
`{{` + `'foo'}}`). To work-around this IE11 bug, #11796 introduced extra logic to merge consecutive
text nodes (on IE11 only), which relies on the text nodes' having the same `parentNode`.

This approach works fine in the common case, where `compileNodes` is called with a live NodeList
object, because removing a text node from its parent will automatically update the latter's
`.childNodes` NodeList. It falls short though, when calling `compileNodes` with either a
jqLite/jQuery collection or an Array. In fails in two ways:

1. If the text nodes do not have a parent at the moment of compiling, there will be no merging.
   (This happens for example on directives with `transclude: {...}`.)
2. If the text nodes do have a parent, just removing a text node from its parent does **not** remove
   it from the collection/array, which means that the merged text nodes will still get compiled and
   linked (and possibly be displayed in the view). E.g. `['{{text1}}', '{{text2}}', '{{text3}}']`
   will become `['{{text1}}{{text2}}{{text3}}', '{{text2}}', '{{text3}}']`.

--
This commit works around the above problems by:

1. Merging consecutive text nodes in the provided list, even if they have no parent.
2. When merging a text node, explicitly remove it from the list (unless it is a live, auto-updating
   list).

This can nonetheless have undesirable (albeit rare) side effects by overzealously merging text
nodes that are not meant to be merged (see the ""BREAKING CHANGE"" section below).

Fixes #14924

Closes #15025

BREAKING CHANGE:

**Note:** Everything described below affects **IE11 only**.

Previously, consecutive text nodes would not get merged if they had no parent. They will now, which
might have unexpectd side effects in the following cases:

1. Passing an array or jqLite/jQuery collection of parent-less text nodes to `$compile` directly:

    ```js
    // Assuming:
    var textNodes = [
      document.createTextNode('{{'),
      document.createTextNode('""foo""'),
      document.createTextNode('}}')
    ];
    var compiledNodes = $compile(textNodes)($rootScope);

    // Before:
    console.log(compiledNodes.length);   // 3
    console.log(compiledNodes.text());   // {{'foo'}}

    // After:
    console.log(compiledNodes.length);   // 1
    console.log(compiledNodes.text());   // foo

    // To get the old behavior, compile each node separately:
    var textNodes = [
      document.createTextNode('{{'),
      document.createTextNode('""foo""'),
      document.createTextNode('}}')
    ];
    var compiledNodes = angular.element(textNodes.map(function (node) {
      return $compile(node)($rootScope)[0];
    }));
    ```

2. Using multi-slot transclusion with non-consecutive, default-content text nodes (that form
   interpolated expressions when merged):

   ```js
   // Assuming the following component:
   .compoent('someThing', {
     template: '<ng-transclude><!-- Default content goes here --></ng-transclude>'
     transclude: {
       ignored: 'veryImportantContent'
     }
   })
   ```

   ```html
   <!-- And assuming the following view: -->
   <some-thing>
     {{
     <very-important-content>Nooot</very-important-content>
     'foo'}}
   </some-thing>

   <!-- Before: -->
   <some-thing>
     <ng-transclude>
       {{       <-- Two separate
       'foo'}}  <-- text nodes
     </ng-transclude>
   </some-thing>

   <!-- After: -->
   <some-thing>
     <ng-transclude>
       foo  <-- The text nodes were merged into `{{'foo'}}`, which was then interpolated
     </ng-transclude>
   </some-thing>

   <!-- To (visually) get the old behavior, wrap top-level text nodes on -->
   <!-- multi-slot transclusion directives into `<span>` elements; e.g.: -->
   <some-thing>
     <span>{{</span>
     <very-important-content>Nooot</very-important-content>
     <span>'foo'}}</span>
   </some-thing>

   <!-- Result: -->
   <some-thing>
     <ng-transclude>
       <span>{{</span>       <-- Two separate
       <span>'foo'}}</span>  <-- nodes
     </ng-transclude>
   </some-thing>
   ```",False
cb31067c2ad3e3fdc9d05d15ba0d99501e745d6b,2016-08-25 21:06:20,Georgios Kalpakas,"docs(tutorial/step_03): improve explanation of camel-/kebab-casing

Related to #15051.",False
3d686a988dc4373da094cff6905e5b0d8da6afa4,2016-08-22 20:09:55,Wei Wang,"feat($location): add support for selectively rewriting links based on attribute

In HTML5 mode, links can now be selectively rewritten, by setting `mode.rewriteLinks` to a string
(denoting an attribute name). Anchor elements that have the specified attribute will be rewritten,
while other links will remain untouched.

This can be useful in situations where it is desirable to use HTML5 mode without a `<base>` tag, but
still support rewriting specific links only. See #14959 for more details on a possible usecase.

Closes #14976",False
8df43677e296021045214efa6f5ef52c7a9d46d8,2016-08-18 18:20:30,Benjamin Blackwood,"docs($resource): add `status` param to `transformResponse` signature

Add `status` param to `transformResponse` signature to keep inline with 1b74097.

Closes #15041",False
e50e91c7a83ec148ea3ee929bbfe1924dcbb060b,2016-08-18 01:39:49,Martin Staffa,"docs($componentController): add more info

Closes #15038",False
c54f7a93e09d165d8e6742da7c8b7df2391f0c91,2016-08-18 01:18:47,Duly Bonheur,"docs(ngRepeat): improve example description

The example seems to also be filtering by age. It threw me off a bit because I was getting results when I entered numbers in the input field.

PR (#15037)",False
e1da4bed8e291003d485a8ad346ab80bed8ae2e3,2016-08-18 00:52:01,Martin Staffa,"feat(input[number]): support step

input[number] will now set the step error if the input value
(ngModel $viewValue) does not fit the step constraint set in the step / ngStep attribute.

Fixes #10597",False
9a8b8aaa9641bfc85d245c4355fa5481285b593f,2016-08-18 00:52:01,Martin Staffa,"feat(input[range]): support step

Step support works like min / max, but with the following caveat.
Currently, only Firefox fully implements the spec. Other browsers
(Chrome, Safari, Edge) have issues when the step value changes
after the input has been changed. They do not adjust the input value
to a valid value, but instead set the stepMismatch validity state.

Angular will take this validity state, and forward it as the ngModel
""step"" error. Adjusting the error ourselves would add too much code,
as the logic is quite involved.",False
88f3517db2a66b3b8a1a5888e07ccca7c6604c01,2016-08-17 19:58:00,Georgios Kalpakas,docs(guide/concepts): improve wording,False
a272a3c0bd88b6df354102dc059a0d14b5b22675,2016-08-12 23:28:08,Martin Staffa,"fix(input[range]): correctly handle min/max; remove ngMin/ngMax support

This commit fixes the handling of min/max, and removes support for ngMin/ngMax:

min/max:
Previously, interpolated min/max values on input range were not set when the first $render happens,
because the interpolation directive only sets the actual element attribute value after
a digest passes. That means that the browser would not adjust
the input value according to min/max and the range input and model would
not be initialzed as expected. 
With this change, input range will set the actual element attribute value during its own
linking phase, as it is already available on the attrs argument passed to the link fn.

ngMin/ngMax
Since ng prefixed attributes do not set their corresponding element attribute, the range input would always have min = 0, and max = 100 (in supported browsers), regardless of the value
in ngMin/ngMax. This is confusing and not very useful, so it's better to not support these attributes at all.

The commit also fixes a test which used an interpolation inside an attribute that expects an expression.

Fixes #14982 
PR (#14996)",False
eacfe4148eb97e550117ed7fd3c37b58537a9f64,2016-08-12 22:42:12,Martin Staffa,"feat($controller): throw when requested controller is not registered

Previously, it would throw the ng:areq error, which is less
specific and just informs that the requested controller is not defined. 
Given how commonly controllers are used
in Angular, it makes sense to have a specific error.

The ng:areq error is still thrown when the registered controller
is not a function.

Closes #14980
PR (#15015)",False
6304cde2fc7319e01a47d4ef8603bfbb886ff2aa,2016-08-12 20:48:30,Georgios Kalpakas,"chore(build): fix version placeholder matching

During the `build` task, the version placeholders will be replaced with the actual values using a
RegExp, which expects the placeholders to be surrounded by double quotes. By replacing the quotes
from double to single in #15011, the RegExp was not able to match the placeholders.

(For reference, the RegExps that match and replace the version placeholders are in
[lib/grunt/utils.js][1].)

[1]: https://github.com/angular/angular.js/blob/859348c7f61ff5f93b9f81eb7f46842bd018d8e3/lib/grunt/utils.js#L125-L130

Closes #15016",False
859348c7f61ff5f93b9f81eb7f46842bd018d8e3,2016-08-11 04:46:40,Michał Gołębiowski,"chore(*): change remaining `/* @this */` to `/** @this */`

Ref ec565ddd9c536aa7f7441e89f03ea08e23de1a42",False
9360aa2d27fd4b35c377ecff3eea2a656ecf7114,2016-08-11 01:22:38,Michał Gołębiowski,"chore(eslint): enable `quotes: [""error"", ""single""]`

The quotes rule had to be disabled for e2e tests generated from ngdoc
because dgeni templates use double quotes as string delimiters.

Since we can't have guarantees that dgeni template wrappers will follow
the same JS code style the Angular 1 repo uses, we should find a way
to enforce our ESLint setup only for the parts in this repo, perhaps
via prepending a generated `/* eslint-enable OUR_RULES */` pragma.

Closes #15011",False
42a00611f8384020db8b019c7b50448114072460,2016-08-10 23:15:21,Georgios Kalpakas,"docs(CONTRIBUTING.md): minor improvements

Closes #15008",False
b6340d1654b254cf2609fa1e0db6a11de4e66374,2016-08-10 01:38:20,Martin Staffa,docs(ngValue): improve use case description,False
e6afca00c9061a3e13b570796ca3ab428c1723a1,2016-08-10 01:38:20,mohamed amr,"fix(ngValue): set the element's value property in addition to the value attribute

Input elements use the value attribute as their default value if the value property is not set.
Once the value property has been set (by adding input), it will not react to changes to
the value attribute anymore. Setting both attribute and property fixes this behavior, and
makes it possible to use ngValue as a one-way bind.

Closes #14031
Closes #13984

POSSIBLE BREAKING CHANGE:

`ngValue` now also sets the value *property* of its element. Previously, it would only set the
value *attribute*. This allows `ngValue` to be used as a one-way binding mechanism on `input[text]`
and `textarea` elements without `ngModel`. Previously, these input types would not update correctly
when only the value attribute was changed.
This change should not affect any applications, as `ngValue` is mainly used on `input[radio]` and
`option` elements, both of which are unaffected by this change.",False
c7010bef6ea96fb6035a746ad0f5c2a24c46ae21,2016-08-09 14:00:36,Benjamin Dopplinger,"docs(contributing.md): fix indentation for proper Markdown syntax

PR (#15007)",False
b62f33f29a14c528b0e6934a279edd6a8f2b8134,2016-08-09 02:55:08,Georgios Kalpakas,docs(ngMock/$httpBackend): improve description of `.flush()`,False
72b663219e0a1bf66cd45fc256f4703566d82177,2016-08-09 00:22:30,sarychev,"feat(ngMock/$httpBackend): flush requests in any order

Previously, requests were flushed in the order in which they were made.
With this change, it is possible to flush requests in any order. This is useful for simulating more
realistic scenarios, where parallel requests may be completed in any order.

Partially addresses #13717.

Closes #14967",False
fdf8e0f9889c4ee55c055f09aab57030314c6fde,2016-08-08 21:42:17,Georgios Kalpakas,"fix($httpBackend): complete the request on timeout

When using the [timeout attribute](https://xhr.spec.whatwg.org/#the-timeout-attribute) and an XHR
request times out, browsers trigger the `timeout` event (and execute the XHR's `ontimeout`
callback). Additionally, Safari 9 handles timed-out requests in the same way, even if no `timeout`
has been explicitly set on the XHR.
In the above cases, `$httpBackend` would fail to capture the XHR's completing (with an error), so
the corresponding `$http` promise would never get fulfilled.

Note that using `$http`'s `timeout` configuration option does **not** rely on the XHR's `timeout`
property (or its `ontimeout` callback).

Fixes #14969
Closes #14972",False
ec565ddd9c536aa7f7441e89f03ea08e23de1a42,2016-08-08 21:10:29,Georgios Kalpakas,"chore(package): fix some warnings/errors

Related to #14952. Fixed the following warnings/errors:

1. **Warning**: Closure Compiler complained about `/* @this */` (annotations in non-JSDoc comments).
   Fixed by changing `/* @this */` to `/** @this */`.

2. **Warning**: Dgeni complained about `/** @this */` (invalid tags found).
   Fixed by adding an empty `this` tag definition in `docs/config/tag-defs/`.

3. **Error**: ESLint complained about CRLF linebreaks in `build/docs/examples/`. These are generated
   by dgeni and (apparently) use the system's default linebreak (e.g. CRLF on Windows).
   Fixed by disabling the `linebreak-style` rule for `build/docs/examples/`.

Closes #14997",False
975a6170efceb2a5e6377c57329731c0636eb8c8,2016-08-08 19:58:52,Georgios Kalpakas,"fix(aria/ngModel): do not overwrite the default `$isEmpty()` method for checkboxes

Previously, `ngAria` would overwrite the default `ngModelController.$isEmpty()` method for custom
`checkbox`-shaped controls (e.g. `role=""checkbox""` or `role=""menuitemcheckbox""`), using the same
implementation as `input[checkbox]` (i.e. `value === false`). While this makes sense for
`input[checkbox]` which also defines a custom parser, it doesn't make sense for a custom `checkbox`
out-of-the-box. For example, an unintialized value (`undefined`) would make the checkbox appear as
""checked"".

If the user wants to provide a custom parser (e.g. setting falsy values to `false`), then they
should also provide a custom `$isEmpty()` method.

As a side effect, this commit solves issue #14621. (We could have solved it in different ways.)

Fixes #14621
Closes #14625

BREAKING CHANGE:

Custom `checkbox`-shaped controls (e.g. checkboxes, menuitemcheckboxes), no longer have a custom
`$isEmpty()` method on their `NgModelController` that checks for `value === false`. Unless
overwritten, the default `$isEmpty()` method will be used, which treats `undefined`, `null`, `NaN`
and `''` as ""empty"".

**Note:** The `$isEmpty()` method is used to determine if the checkbox is checked (""not empty"" means
          ""checked"") and thus it can indirectly affect other things, such as the control's validity
          with respect to the `required` validator (e.g. ""empty"" + ""required"" --> ""invalid"").

Before:

```js
var template = '<my-checkbox role=""checkbox"" ng-model=""value""></my-checkbox>';
var customCheckbox = $compile(template)(scope);
var ctrl = customCheckbox.controller('ngModel');

scope.$apply('value = false');
console.log(ctrl.$isEmpty());   //--> true

scope.$apply('value = true');
console.log(ctrl.$isEmpty());   //--> false

scope.$apply('value = undefined'/* or null or NaN or '' */);
console.log(ctrl.$isEmpty());   //--> false
```

After:

```js
var template = '<my-checkbox role=""checkbox"" ng-model=""value""></my-checkbox>';
var customCheckbox = $compile(template)(scope);
var ctrl = customCheckbox.controller('ngModel');

scope.$apply('value = false');
console.log(ctrl.$isEmpty());   //--> false

scope.$apply('value = true');
console.log(ctrl.$isEmpty());   //--> false

scope.$apply('value = undefined'/* or null or NaN or '' */);
console.log(ctrl.$isEmpty());   //--> true
```

--
If you want to have a custom `$isEmpty()` method, you need to overwrite the default. For example:

```js
.directive('myCheckbox', function myCheckboxDirective() {
  return {
    require: 'ngModel',
    link: function myCheckboxPostLink(scope, elem, attrs, ngModelCtrl) {
      ngModelCtrl.$isEmpty = function myCheckboxIsEmpty(value) {
        return !value;   // Any falsy value means ""empty""

        // Or to restore the previous behavior:
        // return value === false;
      };
    }
  };
})
```",False
e8d7496b62f0b42843aeb9a6f86b6c004d9b56d2,2016-08-08 18:18:52,Georgios Kalpakas,"perf($parse): improve performance of assignment expressions

There was a ~5% improvement in the added `parsed-expressions-bp/assignment` benchmark (which only
contains assignment expressions). In real-world applications, the time spent in assignment
expressions will be a tiny fragment of the overall processing time, though.

Closes #14957",False
49f077736dae8a2c3c12b1afcc5a82572d04ec29,2016-08-08 17:31:12,Michał Gołębiowski,"chore(*): minor code style tweaks

This is a followup to the migration to ESLint.

Ref #14952

Closes #15006",False
3393aac0490345db716e22353a5f2cccc76484d9,2016-08-08 17:01:41,Kevin Visscher,"docs(error/reqslot): fix typo

Closes #15003",False
4fe098796644d7b0797b0a93f6b83f340915a86b,2016-08-08 15:03:37,Martin Staffa,style(benchmarks): fix eslint errors,False
b58a7f8a12dc7a2ae0023837ed77c165b62cefcc,2016-08-08 14:38:48,dherman,"chore(styleDirective): remove an unneccessary directive definition

Since the style directive is defined as a non-terminal element directive
with no behavior on link, we may as well not define anything at all.
PR (#14983)",False
38a49641fd74cc126fe895ee390e26865bc94cc4,2016-08-08 14:32:47,Roshan Jossey,"docs(guide/external-resources): add links to Atom and Vim packages

Add links to packages for Atom and Vim editors under editor support
subsection under tools section.
PR (#15000)",False
4c2964d01b55ebb279ea526ae9f44343e513bb8f,2016-08-08 14:31:08,David Rodenas,"perf($compile): add provider option to turn off compilation of css class and comment directives

When the functions `cssClassDirectivesEnabled()` / `commentDirectivesEnabled()` on the `$compileProvider` are called with `false`, then the compiler won't look for directives on css classes / comment elements.

This can result in a compilation speed-up of around 10%.

PR (#14850)",False
5fc993361f355a0d656686c56a4e92082d140e6d,2016-08-06 04:32:21,Michał Gołębiowski,"fix(jenkins): Fix the format for passing parameters to Grunt tasks

The Jenkins build.sh script has to be updated as the previous way of
specifying parameters to the code run in Grunt tasks stopped working
with the newest Grunt. This has been previously fixed for the Travis
build.sh but wasn't done for the Jenkins one.

Also, the contribute docs were updated to account for the new format.",False
c3220325a0a95484724a03bedca24e1bbf05dc80,2016-08-06 01:48:32,Michał Gołębiowski,"chore(*): switch from JSHint/JSCS to ESLint

Thanks to @narretz for help in fixing style violations and to @gkalpak
for a very extensive review.

Closes #14952",False
517b9bd6edb8d9e6b026734daad1e65d8e2ea956,2016-08-05 23:54:58,Michał Gołębiowski,"chore(package.json): Remove the deprecated licenses field

The ""licenses"" field is deprecated in favor of the ""license"" field... which
we already have specified.",False
8c00386e0d8b9b823fbf63dc2895988e33d02af3,2016-08-05 23:54:42,Michał Gołębiowski,chore(package.json): update Karma & BrowserStack-related packages,False
6f737293ee44e7f2b904170affadc2bdd062f2ae,2016-08-05 23:12:53,Michał Gołębiowski,"chore(package.json): remove the engineStrict field

The engineStrict field is deprecated in npm 2 and removed in npm 3.",False
b1c665095cfbe649e904eeade35964c3b977f55d,2016-08-05 23:12:42,Michał Gołębiowski,"chore(*): Add .nvmrc

If one uses nvm to manage Node.js versions, the .nvmrc file makes `nvm use`
switch to the version specified in .nvmrc. There are scripts that invoke
it automatically when cd'ing to directories containing .nvmrc so that you
never run build commands using a wrong Node version, see:
https://github.com/creationix/nvm/blob/v0.31.2/README.markdown#zsh",False
bdb794ebcfa07a96784ea532d6aeb6da80b8cbc6,2016-08-05 23:12:37,Michał Gołębiowski,"chore(bower): change the name in bower.json

This avoids warnings with newer versions of Bower.",False
0606b15384e1c437141b0d0ad4f40239eae3a8b6,2016-08-05 23:12:28,Michał Gołębiowski,"chore(package.json): upgrade Protractor

The previous version depended on a vulnerable request version.

Ref gh-14961",False
3134e78fc0fe7bbb35b260edfe1d59b98f794e66,2016-08-05 23:07:02,Michał Gołębiowski,"chore(package.json): add grunt-cli to devDependencies, update grunt-* packages

The Travis build.sh script has to be updated as the previous way of
specifying parameters to the code run in Grunt tasks stopped working
with the newest Grunt.",False
1660ddd89e55351c74f28a35587e20735612bb26,2016-08-03 14:40:37,Martin Staffa,"docs($resource): clarify overwriting a default action

Closes #14821",False
494d12fd408becfa40b9d2052e1f32f450d16b27,2016-08-01 13:28:37,Gordon Zhu,"docs(guide/External Resources): remove stale resources 

This commit removes two resources  (Firebase Foundations and Angular Course) that I authored but no longer maintain.
PR (#14973)",False
7bef52204257b8c4cb7bf9e7f7f0d01618509e4f,2016-07-31 13:16:19,Georgios Kalpakas,docs($filter): improve description formatting,False
4ef21691680b395551374102a43909db60c17190,2016-07-31 10:29:03,Georgios Kalpakas,"docs(textarea): add known issue about interpolation in placeholder in IE

Closes #5025

Closes #14965",False
31f20b6db103a2d3dd095c5cd8fa668938adf7bb,2016-07-30 20:27:19,Vitaly P,docs($filter): add link to built-in filters page,False
9130166767c4792c5d32d08a918fc7becf32c9a6,2016-07-29 17:59:09,Martin Staffa,"feat(input): add support for binding to input[type=range] (#14870)

Thanks to @cironunes for the initial implementation in https://github.com/angular/angular.js/pull/9715

Adds support for binding to input[range] with the following behavior / features:

- Like input[number], it requires the model to be a Number, and will set the model to a Number
- it supports setting the min/max values via the min/max and ngMin/ngMax attributes
- it follows the browser behavior of never allowing an invalid value. That means, when the browser
converts an invalid value (empty: null, undefined, false ..., out of bounds: greater than max, less than min)
to a valid value, the input will in turn set the model to this new valid value via $setViewValue.
-- this means a range input will never be required and never have a non-Number model value, once the
ngModel directive is initialized.
-- this behavior is supported when the model changes and when the min/max attributes change in a way
that prompts the browser to update the input value.
-- ngMin / ngMax do not prompt the browser to update the values, as they don't set the attribute values.
Instead, they will set the min / max errors when appropriate
- browsers that do not support input[range] (IE9) handle the input like a number input (with validation etc.)

Closes #5892
Closes #9715
Close #14870",False
cd2f6d9d3bcdbcaa3d09dfd9cc75a5058d83b44e,2016-07-29 14:13:36,Georgios Kalpakas,test(e2e): fix e2e tests in Firefox,False
13b7bf0bb5262400a06de6419312fe3010f79cb2,2016-07-28 15:28:58,Peter Bacon Darwin,"docs(examples): give all examples a name

Closes #14958",False
9ac9fb1565ea601a16033061d5a460a41bd89f93,2016-07-28 15:04:54,Chung-Min Cheng,"docs(guide/animations): clean up example

Remove unnecessary inline styles, merge styles for identical selectors and clean up.

Closes #14960",False
c0795c97a5cd922722c813a5177c172b6820ed3b,2016-07-27 14:34:03,Georgios Kalpakas,docs(ngModel/numfmt): remove redundant argument,False
4fa214ce32bf1cbdcfbbf6e525e057646370f6e7,2016-07-27 13:28:02,Georgios Kalpakas,"fix($parse): block assigning to fields of a constructor prototype

This commit also adds the missing `isecaf` error page and more tests for assignment to constructors.

Fixes #14939

Closes #14951",False
8ddfa2a491231004f2ff016f7ec448c309c4f30f,2016-07-26 12:48:09,Georgios Kalpakas,"fix($parse): correctly escape unsafe identifier characters

This commit also adds a couple of tests for `$parseProvider.setIdentifierFns()`.

Closes #14942",False
d6423804a98eae1306ff5d3462a8b731b034b5eb,2016-07-26 12:47:24,Georgios Kalpakas,"test($parse): test custom literals with CSP both enabled and disabled

(This commit also includes a minor clean-up.)",False
10a6e1a663600ebd8c6ff7a21f1a872d5d95d3db,2016-07-25 21:20:10,Georgios Kalpakas,"chore(travis): update sauce-connect

Closes #14936",False
544df1879ba447c4390a58dedfc5f1420cff1a7b,2016-07-25 20:47:28,Giuseppe Scoppino,"docs(guide/component): document `$doCheck` in the component guide

The docs for `$compile` were updated in e235f20 to include information about the recently
implemented `$doCheck` lifecycle hook for component controllers. The lifecycle hook documentation is
mirrored in the Component guide, and this change mirrors the update made to the `$compile` docs, to
the component guide docs.

Closes #14946",False
b4769c371ecb79ebcd02183373c214c20aa31e41,2016-07-23 20:50:16,Martin Staffa,"fix(ngOptions): remove selected attribute from unselected options

When the select model changes, we add the ""selected"" attribute to the selected option, so that
screen readers know which option is selected.

Previously, we failed to remove the attribute from the selected / empty option when the model changed
to match a different option, or the unknown / empty option.

When using ""track by"", the behavior would also show when a user selected an option, and then the
model was changed, because track by watches the tracked expression, and calls the $render function
on change.

This fix reads the current select value, finds the matching option and removes the ""selected""
attribute.

IE9 had to be special cased, as it will report option.hasAttribute('selected') === true even
if the option's property and attribute have been unset (even the dev tools show not selected attribute).

I've added a custom matcher that accounts for this behavior. In all other browsers, property and
attribute should always be in the same state. Since few people will use screen readers with IE9, I
hope this is a satisfactory solution to the problem.

Fixes #14892
Fixes #14419
Related #12731
PR (#14894)",False
ca812b0aebfc62287c920c07977be2ad00692d53,2016-07-23 19:37:02,Martin Staffa,"chore(travis): use Chrome 51 and FF 47 in unit tests

PR (#14943)",False
5fd42b6cb8909419d32a6c83e863c4035c0a74ab,2016-07-23 01:03:33,Martin Staffa,docs(form): clarify what $setPristine does,False
ce3571280dd94437696ab3126baa95ba2c9ebebd,2016-07-23 01:00:43,Martin Staffa,docs(guide/External Resources): move it after the introduction,False
1d4216a8bcd32428f826ab544c3da88b87a2ca7b,2016-07-23 00:58:59,Martin Staffa,"chore(travis): use Firefox 47

This commit also adds a new capability to the protractor configs that
ensures that all angularjs.org tests run correctly on Firefox. See
https://github.com/SeleniumHQ/selenium/issues/1202",False
95660555aacb4c66f4dacda70adbb2252d005b78,2016-07-23 00:58:59,Martin Staffa,"chore(npm): update protractor to 4.0.0

4.0.0 is the first version with Selenium 2.53.x, and we need that as lower versions have problems
with current Firefox versions.
See https://github.com/SeleniumHQ/selenium/issues/1202 and https://github.com/SeleniumHQ/selenium/issues/2110.

We are currently running tests on FF28.

As part of the update the deprecated webdriver fn getInnerHtml has been replaced with getAttribute('innerHTML')",False
228754fe96ae5613bf4b419605891e3be3e3f75f,2016-07-22 20:34:08,Peter Bacon Darwin,docs(CHANGELOG.md): add release notes for v1.5.8,False
83bc2479675fd1e0e023c5be1dbcbeb2e2932c6d,2016-07-21 15:07:47,Georgios Kalpakas,docs(CHANGELOG.md): add release notes for v1.2.30,False
482a3ae9f956d126d814686512b29bc4fd26bc43,2016-07-20 14:07:43,Georgios Kalpakas,"test($anchorScroll): add e2e tests

Fixes #9535
Closes #9583

Closes #14932",False
ce40d5cbda07d062f49a8f97feae6c8f437f1b81,2016-07-20 13:17:49,Brad,"docs($httpParamSerializer): fix typo (remove superfluous quote)

Closes #14934",False
5dfb328c944fc3f4cdd301f0875958bdc6a8ab86,2016-07-20 00:12:24,Georgios Kalpakas,refactor(test/e2e): make file/directory names consistent,False
5f6949fdae57b15340c1213cce379c6e6f8aff62,2016-07-18 19:25:14,Georgios Kalpakas,"fix($resource): fulfill promise with the correct value on error

This fixes a regression introduced with 71cf28c. See #14837 for more info.

Fixes #14837
Closes #14839",False
4487cffb13f26c1dcece3120423251782ad5b4c9,2016-07-18 19:23:22,Georgios Kalpakas,"test($resource): add some tests wrt handling response errors

The test currently fail on master, but should pass on 1.5.x.
A subsequent commit will fix the regressions on master.

(This commit should be backportable to 1.5.x.)

Related to #14837.",False
c13c666728c1a1485ef18e92d7cb35118ce39609,2016-07-18 15:42:28,Georgios Kalpakas,"feat(ngRoute): allow `ngView` to be included in an asynchronously loaded template

During its linking phase, `ngView` relies on the info provided in `$route.current` for
instantiating the initial view. `$route.current` is set in the callback of a listener to
`$locationChangeSuccess`, which is registered during the instantiation of the `$route` service.

Thus, it is crucial that the `$route` service is instantiated _before_ the initial
`$locationChangeSuccess` event is fired. Since `ngView` declares `$route` as a dependency, the
service is instantiated in time, if `ngView` is present during the initial load of the page.

Yet, in cases where `ngView` is included in a template that is loaded asynchronously (e.g. in
another directive's template), the directive factory might not be called soon enough for `$route`
to be instantiated before the initial `$locationChangeSuccess` event is fired.

This commit fixes it, by enabling eager instantiation of `$route` (during the initialization phase).
Eager instantiation can be disabled (restoring the old behavior), but is on by default.

Fixes #1213
Closes #14893

BREAKING CHANGE:

In cases where `ngView` was loaded asynchronously, `$route` (and its dependencies; e.g. `$location`)
might also have been instantiated asynchronously. After this change, `$route` (and its dependencies)
will - by default - be instantiated early on.

Although this is not expected to have unwanted side-effects in normal application bebavior, it may
affect your unit tests: When testing a module that (directly or indirectly) depends on `ngRoute`, a
request will be made for the default route's template. If not properly ""trained"", `$httpBackend`
will complain about this unexpected request.

You can restore the previous behavior (and avoid unexpected requests in tests), by using
`$routeProvider.eagerInstantiationEnabled(false)`.",False
47583d98005f6a498d397dbe2cedaadac69f0b47,2016-07-18 14:39:52,Georgios Kalpakas,"fix($http): avoid `Possibly Unhandled Rejection` error when the request fails

Calling `promise.finally(...)` creates a new promise. If we don't return this promise, the user
won't be able to attach an error handler to it and thus won't be able to prevent a potential PUR
error.

This commit also improves the test coverage for the increment/decrement `outstandingRequestCount`
fix.

Closes #13869
Closes #14921",False
dc7f625f48a49a3bee955d1cd4f97bab4b256a25,2016-07-18 14:39:45,Georgios Kalpakas,"refactor($http): clean up code

Closes #14921",False
5db625723b9d983124f5ebf2de29662ea971683e,2016-07-18 14:39:37,Georgios Kalpakas,"refactor($http): move functions together and order alphabetically

Closes #14921",False
4f6f2bce4ac93b85320e42e5023c09d099779b7d,2016-07-18 14:39:29,William Bagayoko,"fix($http): properly increment/decrement `$browser.outstandingRequestCount`

Calling `$http` will not increment `$browser.outstandingRequestCount` until after all (potentially)
asynchronous request interceptors have been processed and will decrement it before any (potentially)
asynchronous response interceptors have been processed.
This can lead to `$browser.notifyWhenNoOutstandingRequests` firing
prematurely, which can be problematic in end-to-end tests.

This commit fixes this, by synchronizing the increment/decrement
operations with `$http`'s internal interceptor promise chain.

Fixes #13782
Closes #13862
Closes #14921

BREAKING CHANGE:

HTTP requests now update the outstanding request count synchronously.
Previously the request count would not have been updated until the
request to the server is actually in flight. Now the request count is
updated before the async interceptor is called.

The new behaviour is correct but it may change the expected behaviour in
a small number of e2e test cases where an async request interceptor is
being used.",False
56d456360bb5bae9b30623c6ef91a69e5b9b5aa1,2016-07-18 14:14:03,Georgios Kalpakas,"chore(protractor): use `directConnect` locally to speed up tests

Closes #14919",False
26acedde7c59cc15f156ba32d141a8be3cac46bc,2016-07-18 14:14:03,Georgios Kalpakas,"refactor(test/e2e): remove explicit call to `waitForAngular()`

Protractor automatically calls `waitForAngular()`, before every WebDriver action.

Closes #14920",False
fa81df4779cfbae84058cf8992b05d1186cec071,2016-07-18 14:09:00,Georgios Kalpakas,refactor(test/e2e): restore consistency across tests (just because),False
26dac5784ae23cae1222b051723d9a39c1186507,2016-07-15 21:36:06,John (J5) Palmieri,"doc(guide/Animations): point to $animate.pin() to enable animation for elements outside an Angular app

Add a section inside of the ngAnimate documentation to point to $animate.pin().
It was not clear in the documentation why animations were being disabled inside of
modals and popup menus. This documentation explains in what situations elements may
be dynamically placed outside of the application DOM and points to the API documentation
on how to enable animations for these types of elements.

Related #14907
Closes #14918",False
cd06cccc7f41cd54e171b2ddba534ace1f36b1ff,2016-07-15 21:19:57,Martin Staffa,"docs(ngSelected): note that it doesn't interact with ngModel

Closes #14916
Related #14876",False
aea62af5b8df56df94d0a15513f84014f8b94c61,2016-07-15 13:19:23,Georgios Kalpakas,docs(guide): fix links to tutorial steps,False
c8a64817d2c62cdfda072dcae75d190746e7572e,2016-07-15 02:17:01,Peter Bacon Darwin,style(ngViewSpec): fix missing end of file newline,False
d808631d3a4b0aa49b2f05d77f913cc4a3f5e7cd,2016-07-14 16:04:28,Peter Bacon Darwin,style(ngViewSpec): ensure only one top level describe block,False
267ee9c892b0eb40908700ee2435793f8c6c1c84,2016-07-14 00:16:02,Kate Miháliková,"fix(ngMock): trigger digest in `$httpBackend.verifyNoOutstandingRequest()`

Firing a digest at the beginning of the verification process, ensures that requests fired
asynchronously - e.g. in the `resolve` handler of a promise as happens with `$http` - will get
detected as well.
Previously, in order to reliably verify that there was no outstanding request, users needed to
manually trigger a digest, before calling `verifyNoOutstandingRequest()`. Failing to do so, could
prevent `verifyNoOutstandingRequest()` from detecting pending requests and cover bugs in application
code.
This is no longer the case, since a digest will always be fired autommatically as part of a call to
`verifyNoOutstandingRequest()`.

Fixes #13506
Closes #13513

BREAKING CHANGE:

Calling `$httpBackend.verifyNoOutstandingRequest()` will trigger a digest. This will ensure that
requests fired asynchronously will also be detected (without the need to manually trigger a digest).
This is not expected to affect the majority of test-suites. Most of the time, a digest is (directly
or indirectly) triggered anyway, before calling `verifyNoOutstandingRequest()`.
In the unlikely case that a test needs to verify the timing of a request with respect to the digest
cycle, you should rely on other means, such as mocking and/or spying.",False
859b1e300cfc09a9d0740e6ac028665ad96c93fd,2016-07-13 13:38:48,Michał Gołębiowski,"test(jQuery): Run tests with jQuery 3

Closes #14874",False
489224ba8557837c9bd59e52220d7ec822ac4be0,2016-07-13 01:02:07,Georgios Kalpakas,"refactor($animate): avoid unnecessary lookup

Closes #14902",False
76ca4f4c2099e3c8015c703cda946c50a5a893c2,2016-07-12 21:00:35,Ronan Connolly,"docs(guide/unit-testing): add missing heading

Closes #14901",False
c253b8e5777710b51dd6cfe540f4ace859672cb9,2016-07-12 20:19:32,Steve Berube,"docs(guide/animations): use the arguments of `enabled()` in correct order

Closes #14900",False
914b5c87ffbf1496f736314b68c97a44a8e39f63,2016-07-11 21:52:57,Lioman,"docs(FAQ): fix heading

Add whitespace to H1

PR: (#14896)",False
5fe823948f3af9d6ef34bb42112d87d4d7ae360f,2016-07-11 16:06:14,Georgios Kalpakas,"chore(Jenkins): fix e2e tests on Jenkins

Follow-up to c72e13f and a82a8a5.

Closes #14889",False
f8a3faf5c9d03bb83a78800bfa11e260f18161fa,2016-07-10 14:16:36,Georgios Kalpakas,docs(guide/module): remove newline in the middle of sentence,False
c0f0d136f0675ef699d6d6d183f11a3829bcfcb3,2016-07-09 12:52:36,Oliver Salzburg,"docs($http): fix default $http cache name

The name of the cache is the string ""$http"", not the symbol itself.

Closes #14885",False
a82a8a5210858e34a0727eba1ac03a389bdd67d8,2016-07-07 18:59:25,Martin Staffa,chore(protractor): use jasmine2 as framework,False
c72e13fdb696eb0622efbc49d0e2ee487db30977,2016-07-07 18:59:06,Martin Staffa,chore(package.json): update jasmine-reporters to 2.2.0,False
e8c2e119758e58e18fe43932d09a8ff9f506aa9d,2016-07-06 18:34:20,Martin Staffa,"fix(select): don't register options when select has no ngModel

When option elements use ngValue, value or interpolated text to set
the option value, i.e. when the parent select doesn't have an ngModel,
there is no necessity in registering the options with the select controller.

The registration was usually not a problem, as the ngModelController is set to a noop controller,
so that all further interactions are aborted ($render etc)

However, since f02b707 ngValue sets a hashed value inside the option value
(to support arbitrary value types). This can cause issues with tests that expect unhashed values.
The issue was found in angular-material, which uses select + ngValue to populate mdSelect.

POSSIBLE BREAKING CHANGE:

Option elements will no longer set their value attribute from their text value when their select
element has no ngModel associated. Setting the value is only needed for the select directive to
match model values and options. If no ngModel is present, the select directive doesn't need it.

This should not affect many applications as the behavior was undocumented and not part of a public
API. It also has no effect on the usual HTML5 behavior that sets the select value to the option text
if the option does not provide a value attribute.

PR (#14864)",False
ad41baa1fdc057db3fe529ff87735b173b164b4c,2016-07-06 18:24:49,Lee Adcock,"fix(ngAria): bind to `keydown` instead of `keypress` in `ngClick`

Previously, `ngAria` would provide keyboard support for non-native buttons (via `ngClick`), by
binding the `ngClick` handler to the `keypress` event. In an attempt to better emulate the behavior
of native buttons, `ngAria` will now bind to the `keydown` event (instead of `keypress`).

The configuration flag for this feature has been renamed from `bindKeypress` to `bindKeydown`, to
closer describe the underlying behavior.

Fixes #14063
Closes #14065

BREAKING CHANGE:

If you were explicitly setting the value of the `bindKeypress` flag, you need to change your code to
use `bindKeydown` instead.

Before: `$ariaProvider.config({bindKeypress: xyz})`
After: `$ariaProvider.config({bindKeydown: xyz})`

**Note:**
If the element already has any of the `ngKeydown`/`ngKeyup`/`ngKeypress` directives, `ngAria` will
_not_ bind to the `keydown` event, since it assumes that the developer has already taken care of
keyboard interaction for that element.

Although it is not expected to affect many applications, it might be desirable to keep the previous
behavior of binding to the `keypress` event instead of the `keydown`. In that case, you need to
manually use the `ngKeypress` directive (in addition to `ngClick`).

Before:

```html
<div ng-click=""onClick()"">
  I respond to `click` and `keypress` (not `keydown`)
</div>
```

After:

```html
<div ng-click=""onClick()"" ng-keypress=""onClick()"">
  I respond to `click` and `keypress` (not `keydown`)
</div>
<!-- OR -->
<div ng-click=""onClick()"">
  I respond to `click` and `keydown` (not `keypress`)
</div>
```

Finally, it is possible that this change affects your unit or end-to-end tests. If you are currently
expecting your custom buttons to automatically respond to the `keypress` event (due to `ngAria`),
you need to change the tests to trigger `keydown` events instead.",False
30436957ed0f68c98ef0350c5fe400ecd0e4fe04,2016-07-06 16:09:31,Georgios Kalpakas,"docs(guide/component): improve tests

Fixes #14739",False
acb545ec3ebf099db68561033645941c900973b5,2016-07-06 15:30:35,Georgios Kalpakas,"fix($resource): pass all extra, owned properties as params

Previously, a property would not be passed as query param, if `Object.prototype` had a property with
the same name.

Fixes #14866
Closes #14867

BREAKING CHANGE:

All owned properties of the `params` object that are not used to replace URL params, will be passed
to `$http` as `config.params` (to be used as query parameters in the URL), even if
`Object.prototype` has a property with same name. E.g.:

Before:

```js
var Foo = $resource('/foo/:id');
Foo.get({id: 42, bar: 'baz', toString: 'hmm'});
    // URL: /foo/42?bar=baz
    // Note that `toString` is _not_ included in the query,
    // because `Object.prototype.toString` is defined :(
```

After:

```js
var Foo = $resource('/foo/:id');
Foo.get({id: 42, bar: 'baz', toString: 'hmm'});
    // URL: /foo/42?bar=baz&toString=hmm
    // Note that `toString` _is_ included in the query, as expected :)
```",False
c4da2f0193e767276fa0e4b20ddf6c2ea27d4c8d,2016-07-06 14:36:36,Jack,"docs(guide/directive): remove confusing best practice

Prior to this point, the docs do not mention returning a postLink function, and all the examples use
the definition object form. So, this message is confusing to new readers who may misinterpret
""returning a function"" as returning the factory function mentioned in the previous section.

Since this page is only a ""gentle introduction"" to directives, and using the definition object is a
best practice, it is best to just remove the message altogether.

Closes #14871",False
b928043c3b98499c18e246c1f00c44207b9d5585,2016-07-06 00:19:18,Georgios Kalpakas,"docs(tutorial): fix typo in images (phoneList --> phoneDetail)

Fixes #14858

Closes #14868",False
a2c1675ff9805db13d8f5dfca8336e541a69a184,2016-07-05 02:38:56,Georgios Kalpakas,"docs(guide/interpolation): add known issue (do not change the content of interpolated strings)

Closes #12813

Closes #14825",False
951acb128762b376159b0b2ec872a3e290446926,2016-07-05 02:01:07,Peter Bacon Darwin,chore(package.json): update dgeni-packages dependency to 0.14.0,False
6280ec89e3884e91da5c30faf8b4a55218bcac8b,2016-07-05 01:51:22,Igor Zhukov,"fix(copy): fix handling of typed subarrays

Previously, it would return a copy of the whole original typed array, not its slice.
Now, the `byteOffset` and `length` are also preserved.

Fixes #14842

Closes #14845",False
6a219ad8db9dc6632b8f7a352a419e6251dcf806,2016-07-04 19:06:41,franciscovelez,"docs(guide/Expressions): link to English MDN

It is better to link to the English version of MDN rather than German version

PR (#14863)",False
14519f84f54b0100fcadb334220c711cfa8242b1,2016-07-04 12:38:44,Georgios Kalpakas,"docs(copy): mention ignoring non-enumerable properties

This also improves the example a bit:
- better code formatting
- initialization of `form` to an empty object
- avoid using `email`, which doesn't get coppied when invalid (and might confuse users)

Fixes #14853",False
3aedb1a70d9f925cf866ed7ba07f59c7eb13baa3,2016-07-04 11:25:00,David Rodenas Pico,"perf($compile): wrap try/catch of collect comment directives into a function to avoid V8 deopt

Closes #14848",False
dcf8aab85d37d7723cadfce35e8537c632094146,2016-07-04 11:11:07,jfisher446,"docs(tutorial/step_04): fix syntactic error (add missing 'a')

Closes #14860",False
7b50f498eb06f7249c83987fcca87f5297347c10,2016-07-01 16:30:56,Peter Bacon Darwin,chore(benchpress): add benchmarks for select with ngValue,False
ba36bde6736f0810ca670e10952a8e1c021de531,2016-07-01 16:30:56,Martin Staffa,perf(select): don't prepend unknown option if already prepended,False
47c15fbcc10f118170813021e8e605ffd263ad84,2016-07-01 16:30:56,Martin Staffa,"fix(select): handle model updates when options are manipulated

These rules follow ngOptions behavior:

- when an option that is currently selected, is removed or its value changes, the model
is set to null.
- when an an option is added or its value changes to match the currently selected model,
this option is selected.
- when an option is disabled, the model is set to null.
- when the model value changes to a value that matches a disabled option,
this option is selected (analogue to ngOptions)",False
f02b707b5e4a5ffd1e1a20d910754cfabfc19622,2016-07-01 16:30:56,Martin Staffa,"feat(select): support values of any type added with ngValue

select elements with ngModel will now set ngModel to option values added by ngValue.
This allows setting values of any type (not only strings) without the use of ngOptions.

Interpolations inside attributes can only be strings, but the ngValue directive uses attrs.$set,
which does not have any type restriction. Any $observe on the value attribute will therefore receive
the original value (result of ngValue expression). However, when a user selects an option, the browser
sets the select value to the actual option's value attribute, which is still always a string.
For that reason, when options are added by ngValue, we set the hashed value of the original value in
the value attribute and store the actual value in an extra map. When the select value changes, we
read access the actual value via the hashed select value.

Since we only use a hashed value for ngValue, we will have extra checks for the hashed values:
- when options are read, for both single and multiple select
- when options are written, for multiple select

I don't expect this to have a performance impact, but it should be kept in mind.

Closes #9842
Closes #6297

BREAKING CHANGE:

`<option>` elements added to `<select ng-model>` via `ngValue` now add their values in hash form, i.e.
`<option ng-value=""myString"">` becomes `<option ng-value=""myString"" value=""string:myString"">`.

This is done to support binding options with values of any type to selects.

This should rarely affect applications, as the values of options are usually not relevant to the
application logic, but it's possible that option values are checked in tests.",False
47fbbabe0b4a3a0bd1d4937d00185f47dd56b5ba,2016-07-01 15:47:50,mmuppa,"docs(misc/Develop): using `https://` works more widely than `git@`

Closes #14838",False
20051e5c5943cc801f9a9fd4d39ec806eb5013c1,2016-07-01 15:36:18,Peter Bacon Darwin,"docs(guide): tweaks to the index and external resources guides

Closes #14843",False
708e3d97f36bc9bd376ff65d46ef18c629784c3e,2016-07-01 13:54:59,Martin Staffa,"docs(guide): create new page for external resources

The official and external resources  have been split into two different guide sections. Official stays at the index, external gets its own page.

The external resources have also been reorganized and updated, but
I haven't checked if all material is still relevant.",False
f7405e3b98388e8941a9169ac4794dd7f72bcde3,2016-06-29 16:11:57,Jeff Andrews,"fix(ngMocks): allow `ErrorAddingDeclarationLocationStack` to be recognized as an `Error`

Change `ErrorAddingDeclarationLocationStack`'s prototype so test frameworks (such as Jasmine 2.x)
are able to recognize it as `Error`.

Fixes #13821

Closes #14344",False
7ce7e09c51819814af796b41a456312acb5d9332,2016-06-28 14:40:18,Martin Staffa,"test(input): ensure Date objects work for min/max in date input types

Tests that
- interpolated Date objects work for min/max
- Date objects work for ng-min/ng-max",False
fa80a61a05a3b49a2c770d5544cb8480907a18d3,2016-06-28 14:40:17,Martin Staffa,"fix(ngBind): use same string representation as $interpolate

Fixes #11716

BREAKING CHANGE:

`ngBind` now uses the same logic as $interpolate (i.e. {{myString}}) when
binding, which means values other than strings are now transformed as following:
- null / undefined become empty string
- with an object's custom toString() function, except if the object is a Date, Array, or Number
- otherwise with JSON.stringify

Previously, ngBind would use always use toString().

The following examples show the different output:
```js
$scope.myPlainObject = {a: 1, b: 2};
$scope.myCustomObject = {a: 1, b: 2, toString: function() {return 'a+b';}};
```

Plain Object:
```html
<!-- Before: -->
<span ng-bind=""myPlainObject"">[object Object]</span>

<!-- After: -->
<span ng-bind=""myPlainObject"">{""a"":1,""b"":2}</span>
```

Object with custom toString():

```html
<!-- Before: -->
<span ng-bind=""myCustomObject"">[object Object]</span>

<!-- After: -->
<span ng-bind=""myCustomObject"">a+b</span>
```

If you want the output of `toString()`, you can use it directly on the value in ngBind:

```html
<span ng-bind=""myObject.toString()"">[object Object]</span>
```",False
a5fd2e4c0376676fa317e09a8d8be4966b82cbfe,2016-06-28 14:38:47,Martin Staffa,"feat($interpolate): use custom toString() function if present

Except on Numbers, Dates and Arrays.

Thanks to @danielkrainas for the initial implementation of this feature.

This behavior is consistent with implementations found in other languages such as Ruby, Python,
and CoffeeScript.
http://rubymonk.com/learning/books/1-ruby-primer/chapters/5-strings/lessons/31-string-basics
https://docs.python.org/2/library/stdtypes.html#string-formatting-operations
http://coffeescriptcookbook.com/chapters/strings/interpolation

The commit also exposes a private $$stringify method on the angular global, so that ngMessageFormat
can use the same logic without duplicating it.

Fixes #7317
Closes #8350
Fixes #11406

BREAKING CHANGE:

When converting values to strings, interpolation now uses a custom toString() function on objects
that are not Number, Array or Date (custom means that the `toString` function is not the same as
`Object.prototype.toString`). Otherwise, interpolation uses JSON.stringify() as usual.

Should you have a custom toString() function but still want the output of JSON.stringify(),
migrate as shown in the following examples:

Before:

```html
<span>{{myObject}}</span>
```

After - use the `json` filter to stringify the object:

```html
<span>{{myObject | json}}</span>
```",False
3cda8972839be92d6e730c184bb35e931a9da600,2016-06-28 12:08:35,atenhar,"docs(tutorial/step_03): fix grammar and typos

Closes #14834",False
2456ab63a613902d21c151445f9c697a76ab43b3,2016-06-27 20:12:42,Nicholas Serra,"fix($resource): add semicolon to whitelist of delimiters to unencode in URL params

The unencoding happens in methods `encodeUriQuery`/`encodeUriSegment`. Both core and `ngResource`
used to have identical implementations of these methods. Due to this duplication, the
implementations got out-of-sync.

Specifically, the semicolon has been added to the whitelist of unencoded characters in core since
`v1.3.0-beta.18`. See 3625803 for more info.

This commit fixes the problem and the underlying cause by reusing core's methods in `ngResource`.
(The methods are exposed as private helpers on `window.angular`.)

Closes #14309",False
7a191eb400c0e0f69fe957fd7bd7ca26cca0f9fc,2016-06-27 17:16:17,Georgios Kalpakas,"fix($jsonpCallbacks): do not overwrite callbacks added by other apps

Closes #14824",False
c855c3fb9f998a13fbb9f21f6bb76a1a6c4c32e4,2016-06-27 15:58:32,Georgios Kalpakas,"fix($injector): fix class detection RegExp

Mentioned in https://github.com/angular/angular.js/pull/14531#discussion_r61410683.

Closes #14533",False
f6c3b357451a2125550811946084fc25ae4eb0ce,2016-06-27 14:20:59,Georgios Kalpakas,"test($resource): make test for function as param more explicit

Related to aa8d783.

Closes #14820",False
6050f0be30679ff927bc2b87fd64815d8af3dc4f,2016-06-27 14:14:37,Georgios Kalpakas,"fix($animate): do not get affected by custom, enumerable properties on `Object.prototype`

Fixes #14804

Closes #14830",False
56a9eab84915d7d5f5422cabf409ce8f83a02bc0,2016-06-26 22:56:43,Liran Tal,"docs(guide/filter): add link to list of built-in filters

Closes #14828",False
2e0e77ee80236a841085a599c800bd2c9695475e,2016-06-26 00:38:05,Deplay,"refactor(jqLite): remove unused code in `jqLiteBuildFragment()`

Closes #14822",False
fb3bbc9a00585361d01faddab6c4e65788cdab2c,2016-06-26 00:24:34,GARCIA Guillaume,"docs(*): correct bower version separator (@ --> #)

Closes #14819",False
c434bde109b8e131f569808f8b7451013d5b3698,2016-06-23 15:30:54,Martin Staffa,"docs(ngReadonly): note input type restrictions

Closes #14816",False
aa8d783cff3b43996fc69c91a40fea187153c11b,2016-06-22 16:41:14,Chirayu Krishnappa,"feat($resource): pass the resource to a dynamic param functions

Closes #4899",False
22ec93be8f0b49de5a446522782614d52fd39f15,2016-06-22 16:05:24,Martin Staffa,"fix(ngAnimate): allow removal of class that is scheduled to be added with requestAnimationFrame

Also affects the reverse case, adding a class that is scheduled to be removed with rAF.

The following case can happen when ngClass updates an element's classes in very quick order in the following way:

- First animation adds class ""a""
- A digest passes, but ""a"" is not yet added to the element
- Second animation adds class ""b""
- No digest passes, and ""a"" is still not added to the element,
  because requestAnimationFrame hasn't been flushed yet
- Third animation removes class ""a""
- the third animation gets merged into the second animation

Before this change:

- Because the element doesn't have class ""a"" yet, ngAnimate
resolves that it cannot remove class ""a"". However,
the first animation is still running, and finally adds ""a""

After this change:

- ngAnimate reacts to the temporary class ""add-a"", which indicates
that ""a"" is about to be added and decides that ""a"" can be removed
after all.

This is a very rare case where setting the element's class
is not fast enough, and subsequent animations operate on incorrect assumptions.

""In the wild"", this is caused by rapidly updating ngClass,
which uses inidvidual addClass and removeClass calls when both operations happen in a single digest.

Fixes #14582
PR  (#14760)",False
99223a027809094ccb14fef2dc78199244943f97,2016-06-22 15:48:35,Peter Bacon Darwin,docs($http): fix a dangling link,False
b94626cb9bc03a067feb7c6f0302f811edfd8e67,2016-06-22 15:48:35,Peter Bacon Darwin,"docs($compile): reorganize the life-cycle hooks docs

Closes #14811",False
e62e59f281db08e21853c44d382e378bfd5350e9,2016-06-22 15:48:28,Peter Bacon Darwin,"docs($compile): add additional runnable examples for the `$doCheck` hook

Closes #14811",False
4c662e17a120e9345c6a40b5c0924aca5af01e02,2016-06-22 15:48:16,Peter Bacon Darwin,"fix($compile): ensure `$doCheck` hooks can be defined in the controller constructor

Closes #14811",False
e235f20cc1621e389a938dfb74caa17ce87b41c7,2016-06-22 15:47:48,Zach Bjornson,"feat($compile): backport $doCheck

Backuport ngDoCheck from Angular 2.

Closes #14656",False
78e1ba1ef90c851204cfa816125bbd5b908468e3,2016-06-21 23:36:15,Peter Bacon Darwin,"refact($http): use the $jsonpCallbacks service

Use the built-in service to handling callbacks to `$http.jsonp` requests.

Closes #3073
Closes #14795",False
83b5ddb941ce0dde819c26b483796fac37ead3af,2016-06-21 23:36:15,Peter Bacon Darwin,"feat($jsonpCallbacks): new service to abstract how JSONP callbacks are handled

You can now override this service if you have specific requirements about
the behaviour and formatting of the JSON_CALLBACK that is sent to the server
for `$http.jsonp` requests.

Closes #14795",False
d406a15e8cfd0d57c91147c46994f532dc458021,2016-06-18 02:26:14,Georgios Kalpakas,"fix(modules): allow modules to be loaded in any order when using `angular-loader`

Some modules used to assume that the angular helpers would always be available when their script was
executed. This could be a problem when using `angular-loader` and the module file happened to get
loaded before the core `angular.js` file.
This commit fixes the issue by delaying the access to angular helpers, until they are guaranteed to
be available.

Affected modules:
- `ngAnimate`
- `ngMessageFormat`
- `ngMessages`
- `ngRoute`
- `ngSanitize`

Fixes #9140

Closes #14794",False
4585b939ea23191f09a903f45bcbf746c52beb58,2016-06-17 23:14:12,Georgios Kalpakas,docs(misc/downloading): mention `ngMessageFormat`,False
41f3269bfbd90a8d48e62639bb43f3020617bc57,2016-06-17 14:56:16,Peter Bacon Darwin,"fix(ngTransclude): ensure that fallback content is compiled and linked correctly

Closes #14787",False
0ba14e1853e1d40a14570a74d1c82a222bd3be15,2016-06-17 14:50:44,Yihang Ho,"feat($q): implement $q.race

Implement $q.race. $q.race takes in an array or hash of promises and
returns a promise that resolves or rejects as soon as one of those promises
resolves or rejects, with the value or reason from that promise.

Closes #12929
Closes #14757",False
d9b42ddbbd22cc1cba9aa447926be8026674c73f,2016-06-17 14:21:09,Abdulkader,"feat($swipe): add pointer support

Add pointer events to $swipe to support IE11 on touch devices

Closes #14061
Closes #14791",False
7ab00f4c627ce0ddb94d9b2aa28b82f03fa56ee1,2016-06-17 03:14:11,Georgios Kalpakas,docs($resource): clarify how a `@`-prefix param is used,False
02aef572a58a11776ac3e60bd4f9c9b92f96d054,2016-06-17 02:55:50,Georgios Kalpakas,"docs(angular.mock.dump): remove incorrect statement

Fixes #14790",False
56b9b209ca692c43bc81bacf7e98de5845bed2ee,2016-06-17 00:45:33,Roman Rodych,"refactor(input[number]): remove redandant second argument to `parseFloat()`

Closes #14793",False
ab526d5a52084eb5d0c8a87261cb2f48aec1cf73,2016-06-16 20:22:54,Iain Apreotesei,"style(indexPage.template.html): change bad punctuation in documentation footer

PR  (#14792)",False
fd6dc0b7d4925f9906102780f56cb175ef713fb0,2016-06-16 18:08:27,Martin Staffa,chore(changelog.js): don't add empty breaking change section,False
2b182eb02059ab5ccabcedd8f705b61f645cdf2f,2016-06-16 17:39:49,Georgios Kalpakas,"feat(filterFilter): allow overwriting the special `$` property name

Previously, the special property name that would match against any
property was hard-coded to `$`.
With this commit, the user can specify an arbitrary property name,
by passing a 4th argument to `filterFilter()`. E.g.:

```js
var items = [{foo: 'bar'}, {baz: 'qux'}];
var expr  =  {'%': 'bar'};

console.log(filterFilter(items, expr, null, '%'));   // [{foo: 'bar'}]
```

Fixes #13313
PR (#13356)",False
ff5f645b00fbe7df3701285a3ab0b4a538926c63,2016-06-16 00:13:38,Georgios Kalpakas,docs($interpolate): fix heading,False
6bc81ae6ef96436b27a9aa6ee3769e394118ecc9,2016-06-15 23:09:16,Martin Staffa,"fix(ngOptions): don't duplicate groups with falsy values

Previously, ngOptions would fail to remove optgroups with falsy values when the options were changed / removed.

Related #14781 
PR (#14784)",False
bb4cd4a5ce36a741dd18d203b39537a05506b298,2016-06-15 22:36:03,Georgios Kalpakas,"docs(CHANGELOG.md): move entry from ""Features"" to ""Bugs""",False
458ac0b44c63326110d45f455719840364427bdc,2016-06-15 21:44:27,Georgios Kalpakas,docs(CHANGELOG.md): add release notes for v1.5.7,False
d16b60e0d3f372b1d522295914da7a89f37dbcbf,2016-06-15 21:44:16,Georgios Kalpakas,docs(CHANGELOG.md): add release notes for v1.4.12,False
40b657b619dc0c8a95095a1abc5edba4d294b5b2,2016-06-15 20:25:22,Martin Staffa,"docs(guide/filters): clarify when filters are executed

Closes #14590
PR  (#14758)",False
356e6b18d6287cdcea14b57ee525e7921f95a480,2016-06-15 19:09:35,Martin Staffa,"docs($compile): add link to transcludeFn description

Closes #14764",False
915e7a109c8bb512d6e31e639d898095be326c29,2016-06-15 18:42:30,Martin Staffa,"chore(version-info): make online build compatible with Windows

Since we cannot write to dev/null on Windows, don't write to a file at all, but simply use stdout and extract the output from --write-out from the process response. Credit to @petebacondarwin for the idea.

The commit also avoids a premature error when no cdnVersion could be found online, and improves the log wrt the origin of the versions.

PR (#14780)",False
2adaff083f309bd324c466edd781f3edbf0aff89,2016-06-15 16:50:18,Daniel Herman,"fix(ngTransclude): only compile fallback content if necessary

If the instance of the directive does provide transcluded content, then the fallback
content should not be compiled and linked as it will never be used.

If the instance of the directive does not provide transcluded content, then the
transcluded scope that was created for this non-existent content is never used,
so it should be destroy in order to clean up unwanted memory use and digests.

Fixes #14768
Fixes #14765
Closes #14775",False
857d78d17d2f7a1dc54855971f5f1961df7c7276,2016-06-15 15:00:52,Peter Bacon Darwin,"chore(version-info): add offline-build support

Previously it was slow and problematic to run builds if you were not connected
to the internet because the build scripts make requests to github and the
Google CDN to find out version information.

You can now disable these requests by setting the NG1_BUILD_NO_REMOTE_VERSION_REQUESTS
environment variable to a non-empty value

Closes #14769",False
16d915c0458b36b19b8a0993d8a9f28cccd572d0,2016-06-15 15:00:52,Peter Bacon Darwin,"chore(app.scenario): test docs app against production libraries

We have had issues where the docs application has gone down because
our build included invalid URLs to the production angular libraries.

This change runs a subset of the docs e2e tests directly against these
production libraries to ensure that they are accessible. If not then these
tests will fail and the CI build will abort, preventing the docs app from
being updated.

Closes #14769",False
29f19f91fb5a542100e3eae4fbe06d64c70f920c,2016-06-15 15:00:52,Peter Bacon Darwin,"chore(Gruntfile): kill the build if the CDN version was not found

Closes #14769",False
02eaabc1c73c0c267d8c01783761a7418f018343,2016-06-15 14:48:14,Martin Staffa,"docs(changelog.md): add 1.5.0-beta.0 entry

This was a preparation release for the 1.5.x branch,
which only contains one fix over the previous 1.4.6
release.",False
8cd984866bbcbf52990f5c70639bc412296cde8b,2016-06-14 23:49:31,Peter Bacon Darwin,docs(ngMessageFormat): fix e2e test in example,False
b7f786e8a26eeff2c3321e9eeee18e84e42fb2e3,2016-06-14 23:21:36,Peter Bacon Darwin,style(ngMessageFormat): fix jscs whitespace error,False
9575667946acb2a622c2e999485ce329b2eaccfa,2016-06-14 23:02:48,Martin Staffa,"chore(docsApp): don't display module components if none exist

Some modules (ngMessageFormat, ngParseExt) don't have their own api surface
because they integrate with core services ($interpolate and $parse respectively).

Closes #14770",False
9a7431c71b7d2a08cd8e14394d88da3229afcd53,2016-06-14 23:02:36,Martin Staffa,"docs(ngMessageFormat): move docs for $$messageFormat to module namespace.

This is a private service that should not be documented.
The docs have been moved to the ngMessageFormat module namespace.

Closes #14770",False
a82a62e5a674c3a229a304844905ea758dc7461e,2016-06-14 23:02:25,Martin Staffa,"docs(ngMessageFormat): add more examples

Closes #14770",False
9686f3a241d0fe167cce747138dfc000a1d3a76f,2016-06-13 23:14:51,Georgios Kalpakas,"revert: ""chore(version-info): disable remote requests when offline""

This reverts commit 6a134605f1904098022f4e25ade67d0a91a52621.
The connectivity status is not always detected correctly. Skipping version info related tasks, broke
the deployment of the API docs.

Related #https://github.com/angular/angularjs.org/issues/202",False
4d350de038c985a10fd268172e145c423a312eac,2016-06-13 20:49:39,Wesley Cho,"docs($q): add note about optional arguments for promise.then()

- Add note about optional arguments in the promise.then api

Closes #8562
PR (#14754)",False
116e1d7d176d1f40b106675faf6be40554c5cabf,2016-06-13 20:48:35,Wesley Cho,"docs(guide): add notes about using ngAttr for IE

- Add note about using the value attribute for the progress tag with IE in the IE compat / interpolation guide
- Add note about placeholder attribute in textarea to the ie compat guide

Closes #7218
PR (#14753)",False
6a134605f1904098022f4e25ade67d0a91a52621,2016-06-13 20:27:53,Pete Bacon Darwin,"chore(version-info): disable remote requests when offline

When the internet is not accessible build scripts are unnecessarily slow
because of failed attempts to download git tag and CDN version information
from remote servers.

This commit does a synchronous check of internet connectivity before attempting
any remote requests.

Closes #14759",False
3ddf2f6f6f30f6c34170e2b482a1a122100b8761,2016-06-13 15:07:47,Geoffrey Bauduin,"docs($exceptionHandler): add missing end bracket in example

PR  (#14756)",False
9f68b0e29dfab351736c622119e6f07e51bd71ee,2016-06-13 14:51:03,Wesley Cho,"docs(ngOpen): add note about browser compatibility

- Add note about browser compatibility and recommend ng-show/ng-hide

Closes ##7337
PR (#14752)",False
7551b8975a91ee286cc2cf4af5e78f924533575e,2016-06-13 00:53:38,Peter Bacon Darwin,"fix(ngMock/$httpBackend): fail if a url is provided but is `undefined`

While the `url` parameter is optional for `$httpBackend.when`,
`$httpBackend.expect` and related shortcut methods, it should not have the
value of `undefined` if it has been provided.

This change ensures that an error is thrown in those cases.

Closes #8442
Closes #8462
Closes #10934
Closes #12777

BREAKING CHANGE

It is no longer valid to explicitly pass `undefined` as the `url` argument
to any of the `$httpBackend.when...()` and `$httpBackend.expect...()`
methods.

While this argument is optional, it must have a defined value if it is
provided.

Previously passing an explicit `undefined` value was ignored but this
lead to invalid tests passing unexpectedly.",False
f467dc3dd5fe0a046f91488bd92d1098855aaf1b,2016-06-10 23:43:04,Wesley Cho,"feat(limitTo): add support for array-like objects

Fixes #14657

Closes #14694",False
3360b44be6ca67ddd0a9acbe55527cf573e2ce60,2016-06-10 18:15:36,Martin Staffa,"fix(ngMessages): create new scope for ngMessage, clean it up correctly

Previously, ngMessage elements used the same scope as ngMessages. When ngMessage
has interpolation in the textContent, then removing the message would not remove
the watcher from the scope - it would only be removed when the whole ngMessages
element was removed.

This commit changes the ngMessage transclude function to create a new child scope
instead, which can be destroyed safely when the message element is removed and
the message is detached

Fixes #14307
PR (#14308)",False
e9865654b39c71be71034c38581a8c7bd16bc716,2016-06-10 17:40:50,Georgios Kalpakas,"feat($route): implement `resolveRedirectTo`

`resolveRedirectTo` can be set to a function that will (eventually) return the new URL to redirect
to. The function supports dependency injection and should return the new URL either as a string or
as a promise that will be resolved to a string.

If the `resolveRedirectTo` function returns `undefined` or returns a promise that gets resolved to
`undefined`, no redirection will take place and the current route will be processed normally.

If the `resolveRedirectTo` function throws an error or the returned promise gets rejected, no
further processing will take place (e.g. no template fetched, no `resolve` functions run, no
controller instantiated) and a `$routeChangeError` will be broadcasted.

`redirectTo` takes precedence over `resolveRedirectTo`, so specifying both on the same route
definition, will cause the latter to be ignored.

Fixes #5150

Closes #14695

BREAKING CHANGE:

Previously, if `redirectTo` was a function that threw an Error, execution was aborted without firing
a `$routeChangeError` event.
Now, if a `redirectTo` function throws an Error, a `$routeChangeError` event will be fired.",False
a84e3e727015605ec02f21f8052ebe9530f0ea62,2016-06-10 16:57:07,CarlosMiguelDesarrollo,"chore(ngAnimate): delete an unused conditional statement

Delete a conditional statement that appears to have only been for debugging.
It is marked with a TODO tag to be deleted.

Closes #14282",False
53ab8bcde1ee8fa88d06dd3b5ed4986cb141c129,2016-06-10 16:32:59,Georgios Kalpakas,"fix($routeProvider): do not deep-copy route definition objects

Deep-copying route definition objects can break specific custom implementations of `$sce` (used to
trust a `templateUrl` as RESOURCE_URL). The purpose of copying route definition objects was to guard
against the user's modifying the route definition object after route registration, while still
capturing inherited properties.
As suggested by @IgorMinar in https://github.com/angular/angular.js/pull/14699#discussion_r66480539,
we can achieve both _and_ support custom `$sce` implementations, by shallow-copying instead.

This is an alternative implementation for #14699, which avoids the breaking change.

Fixes #14478
Closes #14699

Closes #14750",False
04cad41d26ebaf44b5ee0c29a152d61f235f3efa,2016-06-10 15:44:14,Raphael Jamet,"fix($compile): secure `link[href]` as a `RESOURCE_URL`s in `$sce`.

User-controlled imports or stylesheets can run script in your origin,
which warrants that we require that they are safe `RESOURCE_URL`s.

Closes #14687

BREAKING CHANGE

`link[href]` attributes are now protected via `$sce`, which prevents interpolated
values that fail the `RESOURCE_URL` context tests from being used in interpolation.

For example if the application is running at `https://docs.angularjs.org` then the
following will fail:

```
<link href=""{{ 'http://mydomain.org/unsafe.css' }}"" rel=""stylesheet"">
```

By default, `RESOURCE_URL` safe URLs are only allowed from the same domain and protocol
as the application document.

To use URLs from other domains and/or protocols, you may either whitelist them or
wrap it into a trusted value by calling `$sce.trustAsResourceUrl(url)`.",False
3b4bfa177103986653fabf5a02b20cf97781830a,2016-06-10 15:22:37,Martin Staffa,"refactor(ngMock): extract browserTrigger from ngScenario

`ngScenario` is deprecated, and we expect to remove it from the project in 1.6,
but we use the `browserTrigger` helper throughout our unit tests.

So in preparation for removing `ngScenario` we are relocating `browserTrigger`
to the `ngMock` folder.

Although many people are using browserTrigger in their own application testing
we are still not yet ready to make this a public API; so developers use
this helper at their own risk.

Closes #14718

BREAKING CHANGE

Although it is not a public API, many developers are using `browserTrigger`
in their own application testing. We have now moved this helper from
`ngScenario/browserTrigger.js` to `ngMock/browserTrigger.js`.",False
f3f5cf72ee6ed263c61286a92662a547ad143eba,2016-06-10 15:15:54,mirabilos,"fix(input[email]): improve email address validation

**Limit size of local-part and total path size in eMail addresses**

RFC 5321 §4.5.3.1.1 ⇒ local-part can have up to 64 octets
RFC 5321 §4.5.3.1.3 ⇒ path “including the punctuation and
element separators” can have up to 256 octets
RFC 5321 §4.1.2 specifies path as ‘<’ + mailbox¹ + ‘>’ in
the best case, leaving us 254 octets

The limitation of the total path size to 254 octets leaves
at most 252 octets (one local-part, one ‘@’) for the domain,
which means we don’t need to explicitly check the domain
size any more (removing the assertion after the ‘@’).

① RFC 821/5321 “mailbox” is the same as RFC 822 “addr-spec”

**Optimise eMail address regex for speed**

There is no need to make it case-insensitive; the local-part
already catches the entire range, and the host part is easily
done. Furthermore, this makes the regex locale-independent,
avoiding issues with e.g. turkish case conversions.

cf. http://www.mirbsd.org/cvs.cgi/contrib/hosted/tg/mailfrom.php?rev=HEAD

**Limit eMail address total host part length**

RFC 1035 §2.3.4 imposes a maximum length for any DNS object;
RFC 5321 §2.3.5 references this (and requires FQDNs, but there
have been cases where a TLD had an MX RR and thus eMail addresses
like “localpart@tld” are valid).

Credits: Natureshadow <d.george@tarent.de>

**Limit eMail address individual host part length**

A “label” (each of the things between the dots (‘.’) after the ‘@’ in
the eMail address) MUST NOT be longer than 63 characters.

cf. http://www.mirbsd.org/cvs.cgi/contrib/hosted/tg/mailfrom.php?rev=HEAD
and RFC 1035 §2.3.4

**Fix eMail address local-part validation**

A period (‘.’) may not begin or end a local-part

cf. http://www.mirbsd.org/cvs.cgi/contrib/hosted/tg/mailfrom.php?rev=HEAD
and RFC 822 / 5321

Closes #14719",False
2274dc7bb70ae533834a76cfcde8ce8c78888f1f,2016-06-10 15:11:09,Georgios Kalpakas,"docs(misc/downloading): update content - include missing modules

Closes #14746",False
f82e135aa08d340914a6a60ffbda5a794376b7c0,2016-06-10 02:29:59,Martin Staffa,"refactor(ngList): access ngList attribute directly

The original way is not necessary since $compile doesn't remove
white-space anymore",False
47724baffe050269385b3481e9a9cf4ab3944b4b,2016-06-10 02:29:58,Lucas Galfaso,"feat(input[radio]): allow ng-trim to work for input[type=radio]

Allow input[type=radio] elements to specify ng-trim.

Closes: #12091
Fixes: #11859",False
305ba1a3fb3529cb3fdf04c12ac03fbb4f634456,2016-06-10 02:29:56,Martin Staffa,"fix($compile): don't add leading white-space in attributes for a specific merge case

If the replaced element had an attribute with an empty ("""") value, merging the attribute from
the template would result in a leading white-space.",False
97bbf86a1979d099802f0d631c17c54b87563b40,2016-06-10 02:26:31,Siddique Hameed,"fix($compile): don't trim white-space in attributes

This allows developers to use white-space in their attributes, for example as value for
input[type=radio], as a separator in ngList, or as a value in any custom directive binding.
It's also consistent with the HTML spec, which allows white-space in attributes, and consistent
with Angular2, which also allows white-space in attributes.

Fixes #5513
Fixes #14539
Closes #5597

BREAKING CHANGE:

White-space in attributes is no longer trimmed automatically. This includes leading and trailing
white-space, and attributes that are purely white-space.

To migrate, attributes that require trimming must now be trimmed manually.

A common cases where stray white-space can cause problems is when
attribute values are compared, for example in an $observer:

Before:
```
$attrs.$observe('myAttr', function(newVal) {
  if (newVal === 'false') ...
});
```

To migrate, the attribute value should be trimmed manually:
```
$attrs.$observe('myAttr', function(newVal) {
  if (newVal.trim() === 'false') ...
});
```

Note that `$parse` trims expressions automatically, so attributes with expressions (e.g. directive
bindings) are unlikely to be affected by stray white-space.",False
3ba29c464da9d73de0ea7c7716dc1ecc60bc5287,2016-06-09 20:49:34,Martin Staffa,"fix($compile): don't add merged attributes twice to $attrs

In replace directives, attribute values from the template are added twice
to the replaced element when both the replaced element and the template
element have the attribute. This does not affect the DOM, as it normalizes
duplicate values. The values are however duplicated in the $attrs object
that is available to directive link functions.

Fixes #8159
Closes #14737",False
78a23ccea2d9e00c333ed03df2b56e882ac9495b,2016-06-09 20:30:41,J. Roberto Vidal,"docs($resource): document `Resource#toJSON`

Document the `toJSON` method of `Resource` instances as part of its public API.

See #14637
Closes #14725",False
186bd0df0e8278b7c025d8bd0296931eb3708e7f,2016-06-09 13:36:11,Stepan Suvorov,"docs(misc/downloading): update Angular version in example

Closes #14741",False
38242e99f1fc96405b49704c20e18d8539085a82,2016-06-09 13:35:34,Stepan Suvorov,updated version of angular for script src,False
f3377da6a748007c11fde090890ee58fae4cefa5,2016-06-08 01:44:51,Georgios Kalpakas,"feat(ngMessagesInclude): don't break on empty (or whitespace-only) templates

Fixes #12941

Closes #14726",False
8fcf5f9aa19a63507e602b3f55c4b4e47be5f782,2016-06-08 01:44:51,Georgios Kalpakas,style(ngMessages): fix indentation,False
4969548e1dd578bec7b1f9619accc2fe468a7c18,2016-06-07 23:04:11,mirabilos,"docs(guide/Security): warn about $http.jsonp()

Warn users about security issues with JSONP that are *not* mitigated by AngularJS

Closes #14727",False
418fb9ccd14d1e1ee203259bf1223278de0ca8da,2016-06-07 21:01:55,Stephen Fluin,docs(guide/Component Router): improving comms,False
2f618459b2102ab7119ecd2055457e33b9a1cd2b,2016-06-07 14:13:21,Martin Staffa,"docs(changelog, guide/migration): mention rare BC for ngInclude

See https://github.com/angular/angular.js/issues/13555#issuecomment-165118890
for detailed explanation.

Closes #13555",False
297a7914ab1e6af2c6f3978fe02ac0d3e9b8b58a,2016-06-07 13:47:20,Georgios Kalpakas,style(ngMocks): remove unnecessary jsHint comment,False
96266b9d9e8e5e1c8cefcab8ad1050396999c58f,2016-06-07 13:33:58,Georgios Kalpakas,"fix(ngMock#$controller): properly assign bindings to all types of controllers (e.g. class-based)

The decorated version of `$controller` is able to assign bindings to a controller instance prior to
instantiation, emulating the behavior of `$compile` with directive controllers.

There are cases, that the actual controller instance is different than the pre-populated one (e.g.
when the controller constructor function returns a value or when the controller is an ES2015 Class).
While `$compile` accounts for such situation, by re-asigning the bindings after the controller has
been instantiated, `ngMock`'s `$controller` didn't.

This commit fixes it, by re-applying the bindings if the actual controller instance is different
than the original one (similar to how `$compile` would do it).

Fixes #14437

Closes #14439",False
48c8b230cb234be07497fcf33e1aaee7a883ba0a,2016-06-07 00:50:37,Georgios Kalpakas,"feat(orderBy): add support for custom comparators

Add an optional, 4th argument (`comparator`) for specifying a custom comparator function, used to
compare the values returned by the predicates. Omitting the argument, falls back to the default,
built-in comparator. The 3rd argument (`reverse`) can still be used for controlling the sorting
order (i.e. ascending/descending).

Additionally, the documentation has been expanded to cover the algorithm used by the built-in
comparator and a few more unit and e2e tests (unrelated to the change) have been added.

Helps with #12572 (maybe this is as close as we want to get).

Fixes #13238
Fixes #14455

Closes #5123
Closes #8112
Closes #10368

Closes #14468",False
743bfcfe08723bd72fb79a07c100739053b1816e,2016-06-06 22:43:09,Peter Bacon Darwin,"test($resource): check we do not throw if response.data is the resource object

Closes #4508",False
362d11b5195d52615f23334b5bd3338b4e80281a,2016-06-06 19:50:31,Peter Bacon Darwin,"fix($parse): allow arguments to contain filter chains

Thanks to @esarbanis for the original PR that got out-dated due to the
big $parse overhaul.

Closes #4175
Closes #4168
Closes #14720",False
b9ac3362ee2a7c44417cd9f414ba0c8f40288dfd,2016-06-06 18:20:05,Guillaume Salles,"fix($location) : initialize `$$absUrl` to empty string

Initialize `$$absUrl` to an empty string, in order to avoid exception, when base href
and current location have different domains.

Fixes #11091
Fixes #13565

Closes #14488",False
4ee5717a963c5419ee5be5ce6a74d09f3e6b359a,2016-06-06 18:05:37,Peter Bacon Darwin,docs(tutorial/step-9): fix typo,False
86aff733fc07b2b0053957c87c084211a203e94e,2016-06-06 17:59:57,Martin Staffa,"docs(ngComponentRouter): add deprecation notice and better install notes

Yes, that contradicts itself.

Closes #14655
Closes #14717",False
6ec775e0cd799464ab675e7243e08fdba957b1b7,2016-06-06 17:57:43,Peter Bacon Darwin,test(browserTrigger): fix typo in eventData property,False
c8bfbfc5d7d66b4913874ae2f1c0df6c0dea7857,2016-06-06 16:15:15,Peter Bacon Darwin,"test(browserTrigger): allow event bubbling

In some browsers, events don't bubble when they are dispatched on node inside
a detached tree. When this is the case, the bubbling is made manually.
This may be convenient when unit testing directives, for example.

Closes #5178",False
3ba8bb71092d22d00eea3a4e1e1d5f280bb50cf5,2016-06-06 16:15:08,Peter Bacon Darwin,"test(browserTrigger): support key events

Support for key events like keypress, keyup or keydown.

Closes #8688",False
ff0395f11149bc20f9349953c8ee907147355818,2016-06-06 15:44:41,Andrew Schmadel,"fix(ngMockE2E): allow $httpBackend.passThrough() to work when ngMock is loaded

Allow $httpBackend.passThrough() to work normally when ngMock is loaded
concurrently with ngMockE2E, as is typically the case when writing tests with
angular.mock.module()

Fixes #1434
Closes #13124",False
cd3673e51430620e91ad1b55e8eb528d4833e979,2016-06-04 01:20:32,Martin Staffa,"docs(angular.element): note restrictions of addClass and removeClass

Closes #12851
Closes #12793",False
f82eba814b5fce0c8b541afc3eeadf612d8222f0,2016-06-03 23:25:27,Georgios Kalpakas,"docs($exceptionHandler): include better example

The previous example overwrote the `$exceptionHandler` in order to re-throw the error. This is not
recommended, since it would leave the application in an inconsistent state and prevent proper
clean-up.
The new example simulates logging the error both to the backend and the console.

Fixes #14704",False
96e34e3c446f8689884ad4da6a00e50bd7ea2af0,2016-06-03 19:28:35,Georgios Kalpakas,"refactor($resource): explicitly set `$resourceProvider.defaults.cancellable` to false

Previously, it was just `undefined` and had the same behavior (since we only check for falsy-ness).
Just making it explicit, that this property is also available on `defaults` and is ""not true"" by
default.

Closes #14711",False
618e3f2558170ff49ff50852bb7833a54585e328,2016-06-03 19:28:35,Georgios Kalpakas,"docs($resourceProvider): improve wording and formatting

Closes #11910",False
140820f4c5fad531d87ec198676ebbaeacda47ba,2016-06-03 19:28:35,Yiling Lu,docs($resourceProvider): provide info and example for configuring $resourceProvider,False
146dad73652fc5e2007ca2d48dbdd32e11420406,2016-06-03 16:58:18,Wesley Cho,"docs($animate): detail options object

- Document options object used in various $animate methods

Fixes #12645
PR: #14700",False
8e55b784dea74a4a0d1847e063f705379c213c00,2016-06-03 16:51:38,Martin Staffa,"fix(ngSanitize): call attribute setter in linky for all links

Fixes #14707 
PR: #14710",False
87eff27e971414fb163e2b5a7cfe78cb097a1951,2016-06-03 16:51:05,Martin Staffa,"fix(select): remove workaround for Chrome bug

In the Chrome issue (https://bugs.chromium.org/p/chromium/issues/detail?id=381459)
I noticed that the bug can't be reproduced in Chrome 45 and the issue was
closed subsequently. I've also tested again with Chrome 51 and it still works.

Additionally, the Chrome hack was kept in the select code, but wasn't ported to
the ngOptions code when the two split in 7fda214c4f65a6a06b25cf5d5aff013a364e9cef,
and no regression happened.

Nevertheless, a test has been added to guard against a future regression.

Related: #6828
PR: #14705",False
a478f69783440f43fe6e73c8d62cec7f9c253d0a,2016-06-01 13:37:30,ZachLamb,"docs(tutorial/step_04): fix type (JacaScript --> JavaScript)

Closes #14661",False
cfc8b41771e6f2f5bcf692400e960144009b1f18,2016-05-28 18:27:43,Lucas Mirelmann,refactor($location): Simplify expression.,False
f58d4fb7482f0c0884641654d301373268ff2d6b,2016-05-28 03:04:36,Peter Bacon Darwin,docs(CHANGELOG): fix typo,False
794e99e69fe1f02e7436257fc621f2ef8aaeff44,2016-05-27 21:29:59,Martin Staffa,docs(changelog): update with changes for 1.5.6,False
d23c1453cd3ec80006fedc4fa90bcb095d01dc9f,2016-05-27 20:47:10,Lucas Galfasó,"fix($timeout): make $flush handle new $timeouts added in $timeout callbacks

If a $timeout handler calls $timeout itself, this new $timeout should be
added to the mock deferred queue with a ""now"" time based on when the original
handler was triggered.

Previously it was being added with a now time of when the `$timeout.flush`
method was originally called.

Closes #5420
Closes #14686",False
de544807c23076b4d4eacd8f77682a9028980656,2016-05-27 20:42:03,Peter Bacon Darwin,"fix($compile): cope with `$onChanges` hooks throwing

Previously, if one of these hooks threw an error, then the compilation
was terminated unceremoniously. In particular any other `$onChanges`
hooks that had been scheduled were not executed, nor was the queue cleaned
up properly.

Closes #14444
Closes #14463",False
55b7f7d80e109e9f053d295de8da9ed51ecf164d,2016-05-27 16:12:04,Martin Staffa,docs(changelog): update with changes for 1.4.11,False
85db30a3be7918e2159b799fec190c1836b751ad,2016-05-27 00:25:33,Victor Oliveira da Silva,"docs(ngRepeat): fix typo

Closes #14681",False
5e7c4abb183c17ef3036a02b41145bb885283719,2016-05-26 03:25:56,Georgii Dolzhykov,"chore(package.json): remove unused grunt-jasmine-node

Closes #14363",False
4a5723f83b80c2625b881a96df75efa4f4062a75,2016-05-25 22:08:28,Martin Staffa,"chore(angularFiles): add missing files

ngMessageFormat test files were missing from angularTest
ngMessages and ngAnimate were missing from karmaModules.

This change highlighted a number of problems in the tests and code,
which are now fixed.

Closes #14314
Closes #14669",False
bf59aa5564642a869eb9da1cf8022496caaea45c,2016-05-25 21:29:46,Peter Bacon Darwin,docs(tutorial/step-9): fix typo in inline link,False
7875652298113caf3129ce89ebbb9d27e7f55a28,2016-05-25 21:26:21,Hadrien Tulipe,"docs(ngAnimateMock): document how to require mocked service in tests

Closes #14668
Closes #14670",False
4d5f5ffc78d7153718610f00fa85c59849ef1ca6,2016-05-25 19:02:26,Robin Böhm,"refactor(ngMock): use exactly equal in browserTrigger

Closes #6763",False
36b149332a9b6e33e3eb3f1f14673b25d666869f,2016-05-25 18:47:40,David Goldberg,"style(src/Angular.js): make comment formatting consistent

Corrected formatting errors on lines 258, 695, 696, 1096, 1219, 1451, and 1536
by adding periods at the end of single line comments that were missing them
in order to be consistent with the formatting found in the file.

Capitalized the first letter in the first word of the comments on lines 695, 696, 1096,
to be consistent with the formatting of the rest of the file.

Added a space after the // in the comment on line 1536 to be
consistent with the formatting of the file.

Closes #11832",False
d803354d7cda2c4bdf6c3d159ac86657d70432ca,2016-05-25 18:28:05,Martin Staffa,docs(angular.element): note restriction in toggleClass,False
6ce34dd45c92135ae29f8c6ec8087555f478019d,2016-05-25 18:23:45,Kamron Batman,"style(docs/gulpfile.js) make spacing consistent

Updated gulpfile.js in Docs so that spacing is consistency.",False
cb2f8c0d75bde9ac91f4129e871ff4a8301871f3,2016-05-25 17:51:49,thorn0,"perf($rootScope): make queues more efficient

By using a pointer to the current start of the queue and only clearing
up the queue storage later, we save lots of time that was spent manipulating
arrays with `slice`

Closes #14545",False
9e28b64352b7371cb219a21439c52e4e34d17387,2016-05-25 17:26:33,Ajay,"docs($provide): document `decorator` method

Closes #14562",False
74eb5692384e5b916a4afe9efb1d8510446fe1cd,2016-05-25 17:08:19,Peter Briers,"docs(ngAnimate): remove unnecessary transition prefixes

We can remove the vendor-prefixing from our docs, since all major browsers
support these properties, without prefixes.

Closes #14586",False
66af3d57294dbab87a078e9ce0b9bfc06d2da9f4,2016-05-25 16:47:41,Jacob Reid,"docs(tutorial): fix typos

Closes #14662
Closes #14663
Closes #14664",False
a4e4feed909408ff837ac328371d0fad6ca49e9d,2016-05-24 23:39:23,Peter Bacon Darwin,"refactor(*): faster check for a string starting with a substring

Thanks to @spamdaemon for the original PR to make this improvement.

In naive tests on Chrome I got the following results:

```
             Matches   Misses
indexOf      33ms      1494ms
lastIndexOf  11ms      11ms
```

Closes #3711",False
7f4b356c2bebb87f0c26b57a20415b004b20bcd1,2016-05-24 23:31:16,Jeff Ardilio,"fix($route): don't process route change controllers and templates for `redirectTo` routes

If a route defines a `redirectTo` value, the current route should stop processing the route
and instead wait to process the route of the redirect.

Currently, what is happening is that Angular detects a redirectTo value and updates $location,
but then continues processing the route that was intended to be redirected.
Templates are loaded, resolves are processed, ng-view then updates the view with a new template
and instantiates the controller all for a route that should have been redirected.

A common use case for assigning a function to the redirectTo is to validation authentication,
permission check, or some other logic to determine if the route should continue or redirect
else where. In the end, this happens, but in between, unexpected results may occur by updating
the view and instantiating controllers for logic that wasn't expected to be executed.

http://plnkr.co/edit/8QlA0ouuePH3p35Ntmjy?p=preview

This commit checks for a url change after a potential redirect, it the url changed, and is
not `null` nor `undefined`, exit out and don't process current route change.

Closes #3332
Closes #14658

BREAKING CHANGE

The $route service no longer instantiates controllers nor calls resolves or template functions
for routes that have a `redirectTo` unless the `redirectTo` is a function that returns
`undefined`.",False
4c95ad8d8903a350c1e6064ec9b21226d552f22c,2016-05-24 23:31:16,Peter Bacon Darwin,refactor($route): consolidate route locals processing into a single handler,False
c39936ee26f00d8256c79df07096f03196811df5,2016-05-24 23:31:16,Peter Bacon Darwin,refactor($route): move resolving locals into its own function,False
4adc9a9117e7f7501d94c22c8cbbfeb77ad5d596,2016-05-24 23:31:15,Peter Bacon Darwin,refactor($route): move getting the template into its own function,False
b226f3028e56ce1b537dc310b1a5a23bcaddfc5b,2016-05-24 21:46:46,Martin Staffa,"Revert: revert changes to contribute.ngdoc

Reverts d9d20e6 and febda8f which sneaked in by accident",False
d0af0ca76e9b828be07c5e40e54e3e3dc78766dd,2016-05-24 21:42:12,Martin Staffa,style(loader): make jshint happy,False
d9d20e69685e6893bdb7c20e1575b900b1cb8bbc,2016-05-24 21:24:23,Sibu Stephen,"Update contribute.ngdoc

Closes #12875",False
febda8f7bfe5d2ebd142c335a174cb8f7e52da75,2016-05-24 21:24:21,Sibu Stephen,"Essential note when cloning into Angular repository

1) First change - Whenever cloning into directory there are chances of some users using ""sudo"" without knowing what it does exactly and what's the purpose of using sudo, leading them into a confusion and this lead to changes in git config and permission issues of which users may not be able to figure out at one spot.
2)  Second Change- There are chances of version unstability  issues in node which at times causes npm error and warnings while installing packages, I too had undergone some issues with node version conflicts at times, users who are not aware of this will be benefited with a Note prior.",False
00cdc945baa732a6838788b4adc93d2e47e44d50,2016-05-24 21:14:28,Martin Staffa,docs(guide/Decorators): update info about the order of decorator application,False
01abe6ae5877ea754b639b6bcff0723c097b90bf,2016-05-24 21:14:28,Martin Staffa,test(loader): add tests for order of decorations,False
6a2ebdba5df27e789e3cb10f11eedf90f7b9b97e,2016-05-24 21:14:28,robertmirro,"fix(loader): module.decorator order of operations is now irrelevant

`module.decorator` is now processed via the configBlocks order of operations and:
  1. no longer throws error if declared before the provider being decorated.
  2. guarantees the correct provider will be decorated when multiple, same-name
  providers are defined.

(1) Prior to this fix, declaring `module.decorator` before the provider that it
decorates results in throwing an error:

```js
angular
  .module('theApp', [])
  .decorator('theFactory', moduleDecoratorFn)
  .factory('theFactory', theFactoryFn);

// Error: [$injector:modulerr] Failed to instantiate module theApp due to:
// Error: [$injector:unpr] Unknown provider: theFactoryProvider
```

The result of this fix now allows for the declaration order above.

(2) Prior to this fix, declaring `module.decorator` before the final, same-named
provider results in that provider **not** being decorated as expected:

**NOTE:** Angular does not use provider name spacing, so the final declared
provider is selected if multiple, same-named providers are declared.

```js
angular
  .module('theApp', [])
  .factory('theFactory', theFactoryFn)
  .decorator('theFactory', moduleDecoratorFn)
  .factory('theFactory', theOtherFactoryFn);
```

`theOtherFactoryFn` is selected as 'theFactory' provider, but prior to this fix it is **not**
decorated via `moduleDecoratorFn`. This fix ensures that `theOtherFactoryFn` will be decorated as
expected when using the declaration order above.

Closes #12382
Closes #14348

BREAKING CHANGE:

`module.decorator` declarations are now processed as part of the `module.config`
queue and may result in providers being decorated in a different order if
`module.config` blocks are also used to decorate providers via
`$provide.decorator`.

For example, consider the following declaration order in which 'theFactory' is
decorated by both a `module.decorator` and a `$provide.decorator`:

```js
angular
  .module('theApp', [])
  .factory('theFactory', theFactoryFn)
  .config(function($provide) {
    $provide.decorator('theFactory', provideDecoratorFn);
  })
  .decorator('theFactory', moduleDecoratorFn);
```

Prior to this fix, 'theFactory' provider would be decorated in the following
order:
  1. moduleDecoratorFn
  2. provideDecoratorFn

The result of this fix changes the order in which 'theFactory' is decorated
because now `module.decorator` declarations are processed in the same order as
`module.config` declarations:
  1. provideDecoratorFn
  2. moduleDecoratorFn",False
c2033d7ff04ed5507ee5911a98eb2b2adf7f2092,2016-05-24 16:37:08,Georgios Kalpakas,"docs(tutorial): update to use `v1.5.x` and best practices

This is a major re-structuring of the tutorial app's codebase, aiming at applying established best
practices (in terms of file naming/layout and code organization) and utilizing several new features
and enhancements (most notably components) introduced in recent versions of Angular (especially
v1.5).

Apart from the overall changes, two new chapters were introduced: one on components and one on code
organization.

--
In the process, several other things were (incidentally) taken care of, including:

* Dependencies were upgraded to latest versions.
* Animations were polished.
* Outdated links were updated.
* The app's base URL was changed to `/` (instead of `/app/`).

BTW, this has been tested with the following versions of Node (on Windows 10) and everything worked
fine:

* 0.11.16
* 4.2.6
* 4.4.2
* 5.10.0
* 6.2.0

--
This was inspired by (and loosely based on) #13834.
Again, mad props to @teropa for leading the way :)

--
**Note:**
The old version of the tutorial, that is compatible with Angular version 1.4 or older, has been
saved on the `pre-v1.5.0-snapshot` branch of
[angular-phonecat](https://github.com/angular/angular-phonecat). The `v1.4.x` version of the
tutorial should be pointed to that branch instead of `master`.

--
Related to angular/angular-phonecat#326.
Related to angular/angular-seed#341.

Closes #14416",False
4ae4cc9d469f0327c6576d8bd8ac7f402ddffa2d,2016-05-24 03:03:04,marija,"perf(ngClass): improve even-odd checking

This now uses the same technique as ngRepeat.",False
4fed5d873cb6529c109eea7f21b10b9d6b53dd2a,2016-05-24 03:03:04,marija,refactor($sniffer): avoid unnecessary call to substring,False
f37568499e854248f0e0f6f7c76c1b1c0c018a0f,2016-05-24 03:03:04,Alireza Mirian,"docs(guide/Conceptual Overview): clarify service instantiation sentence

Change a sentence which describes how currencyConverter service is instantiated.

Closes #12924",False
e1f4b350311f4aa6b0ba18267eadb310f17583fe,2016-05-24 03:03:04,Martin Staffa,"docs(input[text]): remove deprecated tt tag

Closes #14547",False
ad59781f7db9966064fa835c2b6b95e5c95685de,2016-05-24 02:48:02,Peter Bacon Darwin,chore(docs): add horizontal rules between known issues,False
2ca6db53745fb51ca0f3129a1abb30bb14407829,2016-05-24 02:29:53,Peter Bacon Darwin,chore(docs): fix api.template.html to display git links,False
c5cdadb601f792703d4622eedc81be54c1dd938e,2016-05-23 18:50:44,Xavier Haniquaut,"docs(error/$compile): add `reqslot` error description

Explains what could generate a `reqslot` error.

Closes #14618",False
3bcbd63e47b7a7210ca8cf0ad75d14605018c91e,2016-05-23 18:32:42,Peter Bacon Darwin,chore(docs): add horizontal rules between known issues,False
c8e09c8a40540856c189532044ed10c1708d6be1,2016-05-23 18:22:25,Peter Bacon Darwin,"docs($interpolate): add known issue about custom interpolation symbols

Closes #14610
Closes #6493",False
ab247d620345f513138a3149b8ef0653e5cd8328,2016-05-23 17:26:56,Jukka,"fix(ngMessagesInclude): do not compile template if scope is destroyed

Messages imported with `ngMessagesInclude` are loaded asynchronously and
they can arrive after the ngMessages element has already been removed from DOM.

Previously we tried to compile these messages and that caused a `$compile:ctreq`
error. Now they are silently ignored if `ngMessagesInclude`'s scope has already
been destroyed.

Closes #12695
Closes #14640",False
e67c3f8ab62d2bcabf86cf0c57d21a288e05a954,2016-05-23 17:18:56,Wesley Cho,"docs(contributing): fix the styleguide link

Update the link to Google's JavaScript style guide to the updated version

Closes #14652",False
3f8efe73fc2bb6fb029952290129f7a788aae772,2016-05-22 23:32:26,Georgios Kalpakas,"fix($animate): don't break on anchored animations without duration

If the `from` element of an animation does not actually have an animation
then there will be no animation runner on that element. This is possible
if the element has the `ng-animate-ref` attribute but does not have any
CSS animations or transitions defined.

In this case, it is not necessary to try to update the host of the
non-existent runner.

Fixes #14641
Closes #14645",False
1581827a512e99c38d313196bc7bf8f6818b0cf5,2016-05-21 15:13:54,Bijay Deo,"fix(ngMock): match HTTP request regardless of the order of query params

Closes #12762",False
eaa1119d4252bed08dfa42f984ef9502d0f02775,2016-05-21 14:45:31,Peter Bacon Darwin,"docs(toJson): documented the Safari RangeError known issue

Closes #14221
Closes #13415",False
efa72a84016c3893a8fcee31ccc5a29421d14b14,2016-05-20 23:52:14,Georgios Kalpakas,"docs(ngMock/$exceptionHandler): fix formatting

Too much indentation, made text get formatted as code block.",False
51cfb61e46c18a4aac27340120a276dda1112637,2016-05-20 19:50:06,Adrian Moos,"fix($brower): set the url even if the browser transforms it

While $location expects that $browser stores the URL unchanged, ""some browsers"" transform the URL
when setting or defer the acutal update. To work around this, $browser.url() kept the unchanged
URL in pendingLocation.

However, it failed to update pendingLocation in all code paths, causing
$browser.url() to sometimes incorrectly report previous URLs, which horribly confused $location.

This fix ensures that pendingLocation is always updated if set, causing url() to report the
current url.

Fixes #14427
Closes #14499",False
9355aea2e228e59e97cf0a174087f90a5d4e0d68,2016-05-18 21:16:04,Peter Bacon Darwin,docs(misc/contribute): specify node version,False
cf862b5eb5d06546b326eafe2cb6a142d7b7468a,2016-05-18 13:11:52,Peter Bacon Darwin,docs(ngMock): final installation description fix,False
24705824d3ed12a13001efce881b4caf444ac921,2016-05-18 00:47:33,Georgios Kalpakas,"fix($compile): properly bind context to linking functions for directives with `templateUrl`

Also, fix some styling issues.",False
7d0fe19734c38c3d5e2fe2581e48bd345495e4d2,2016-05-17 23:13:08,Paulo Cesar,"fix($compile): always use the DDO as `this` in pre-/post-linking functions

Closes #9306",False
921f80e1eabf04ecd4dcfda85e7ac801a8f17728,2016-05-17 22:54:55,Peter Bacon Darwin,docs(ngMock): fix installation instructions,False
ce9f67b08d0703d6545fea17424385f1de81db95,2016-05-17 14:29:31,Thomas Kowalski,"docs(guide/component-router): remove unused code

Closes #14613",False
05d2703b4ed9191f58b1b899be52b4259e611acc,2016-05-17 03:16:31,Peter Bacon Darwin,"docs(ngMock): fix installation formatting

The `@installation` section should be formatted with markdown, not
nunjucks template directives.

Closes #14604",False
3b5751dce8d6c699dc76e47cfa544c30b38b9771,2016-05-16 16:33:24,Lucas Mirelmann,"fix($parse): call once stable bind-once expressions with filter

When an expression has the following:
- Bind-once
- A stateless filter at the end
- Optionally an expression interceptor

Then call the filter once.

Closes: #14583
Closes: #14589",False
5d1e15cb1b7a11e103acda75dd933efdf802f0f1,2016-05-14 04:21:15,Sander Boom,"docs(guide/$location): fix typo

Closes #14607",False
bfaf773ae2b3748b0f28eebf4c9b0a764637f506,2016-05-14 01:46:03,Mark Pieszak,"docs(readme): remove ""(beta)"" from Angular 2 link

Closes #14599",False
f6d8be8ad3b8cd5a8be058d1c44a8ab1fb5cfffb,2016-05-13 21:39:56,Georgios Kalpakas,"docs(ngComponentRouter): specify correct version of npm package

The latest npm package does not contain the angular 1 version of the router.

Related to 824ce30.",False
eebbca0a8bdc47e0d4f4d59d6981b912d6605ccc,2016-05-12 15:34:51,Peter Bacon Darwin,chore(package.json): update to use dgeni-packages@0.13.0,False
6b92ff08cd9338c0ae6496e79e29c33c05609739,2016-05-12 14:55:34,Peter Bacon Darwin,chore(npm/check-node-modules): cope with no npm-shrinkwrap file,False
f1f892d6c0daa8f9ae7b9e4594cee9fe92414d94,2016-05-11 03:00:54,Pete Bacon Darwin,"fix($compile): don't run unnecessary update to one-way bindings

The watch handler was triggering on its first invocation, even though
its change had already been dealt with when setting up the binding.

Closes #14546 
Closes #14580",False
3b714740fdc2b97c2375324ee46b222c23c06bf5,2016-05-10 15:45:35,Anthony Trimble,"docs($httpBackend): fix a typo

Fix comment typo
(#14576)",False
824ce300413e20e1fa72d74743b3a3c64c43a45f,2016-05-08 02:09:14,Peter Bacon Darwin,"docs(guide/component-router): specify correct version of npm package

The latest npm package does not contain the angular 1 version of the router.

Closes #14564
Closes #14560",False
5b053b18d07dddad28a91636389c22f5cedeab89,2016-05-06 19:43:01,Maksim Ryzhikov,"fix(ngAnimate): properly handle empty jqLite collections

Previously `stripCommentsFromElement()` would return an empty Array (instead of a jqLite collection)
which would cause an exception to be thrown: ""element.parent not a function"".
This commit fixes it, by ensuring that the returned value is always a jqLite collection.

Closes #14558

Closes #14559",False
81bf7ed73ee67f9eb997da869c52839449ca02b3,2016-05-06 19:37:01,Sreenivasan K,"fix(ngAnimate) : make svg elements work with classNameFilter

(#14529)

Closes #14508",False
d7274f066e0e288c9288aca74793edf4231fdc19,2016-05-06 19:05:28,dmandelin,"docs($sanitizeProvider): fix param comment for enableSvg

Change the text of the doc comment for the parameter of enableSvg to match the type of the comment and the behavior of the code (#14543).",False
0bd2efb99456f4e54a3ac4f736b5fb144e8d9858,2016-05-06 18:47:21,FGasper,"docs($location): clarify return value for path method

docs for return of path() inaccurately describe the function’s return when a value is passed in.

Closes #14544",False
938bd45626b6f29e8bc74cfe268ff2bf673f357e,2016-05-06 18:21:22,Stephen Barker,"docs(guide/decorators): add decorator guide

+ explain decorators and how they are implemented in angular
+ explain how different types of services can be selected
+ explain `$delegate` objects and how they differ between services
+ warn of the risks/caveats of `$delegate` modification
+ note the exposure of `decorator` through the module api
+ show an example of decorating a core service
+ show an example of decorating a core directive
+ show an example of decorating a core filter

Closes #12163
Closes #14372",False
996b1e4378c61e290cfe0815cd816f2b983ef7f0,2016-05-06 17:56:52,Martin Staffa,style(validators.js): remove trailing whitespace,False
4978a06ad29ce355d69462496b784aa535aa41cc,2016-05-06 17:22:48,Michael Warner,"docs(ngRequired): add 'restrict' info

The Angular Docs do not show the restrictions

Closes #14541",False
aaa069a65a229b4bccfad37cd588326411387615,2016-05-06 06:19:54,Ivo Mirra,"fix($compile): removing unnecessary white space in element-transclusion comments

Fixes #14549

Closes #14550",False
707664a3c448732443bf54027dacda39babdd0c4,2016-04-28 22:48:57,Martin Probst,"fix(ng-bind-html): watch the unwrapped value using `$sce.valueOf()` (instead of `toString()`)

Custom `$sce` implementations might not provide a `toString()` method on the wrapped object, or it
might be compiled away in non-debug mode. Watching the unwrapped value (retrieved using
`$sce.valueOf()`) fixes the problem.

The performance of this should be equivalent - `toString()` on objects usually touches all fields,
plus we will also avoid the (potentially big) string allocation.

Fixes #14526
Closes #14527",False
06e96407a916255f3ff6b1505dcdbd77e1c1c210,2016-04-28 22:15:35,Mark Pieszak,"docs(README.md): add link to Angular 2 repo

Might be helpful for those completely new to Angular in general, that intended to view the upcoming
2.0 version.

Closes #14532",False
afcedff34c8a44dda0d558d9d6337962f5f03d7b,2016-04-28 16:51:38,Georgios Kalpakas,"fix($injector): add workaround for class stringification in Chrome v50/51

Partially fixes #14240.

Closes #14531",False
3dcc01646a36cc00f09128186e59329f76be8ad5,2016-04-28 14:08:04,Petr Mikota,"docs(guide/component-router): add missing backticks

Closes #14530",False
b67d145bf3292a7adbb9766d50f465b05aeddda4,2016-04-28 13:35:45,Weijing Jay Lin,"docs(identity): add example

Closes #14528",False
8dc1f8e00e4b1cac11346fc080c465d0b2852a7f,2016-04-28 13:25:17,Georgios Kalpakas,"fix($injector): add workaround for fat-arrow stringification in Chrome v50/51

Closes #14487

Closes #14495",False
0780666e41938e28984a4496231008ae6066c41e,2016-04-28 13:11:17,Georgios Kalpakas,"feat($compile): support omitting required controller name if same as the local name

Basically, making `require: {someDir: '?^someDir'}` equivalent to `require: {someDir: '?^'}`.

Closes #14513",False
6d2e0718d26d70136f726496af01b76cad8606f4,2016-04-28 13:07:06,Fabricio Ronchi,"docs(ngAria): remove redundant table column

Closes #14518",False
d71dc2f5afec230711351e9f160873a41eb60597,2016-04-27 02:31:09,Martin Staffa,"perf($animate): listen for document visibility changes

perf(ngAnimate): listen for document visibility changes

Accessing the document for the hidden state is costly for
platforms like Electron. Instead, listen for visibilitychange
and store the state.

(#14071)
Closes #14066",False
b9d76bfa55e6954bedcb77524d1b352d80b9d334,2016-04-26 22:53:12,Michael de Wit,"docs(guide/component): several unit-test fixes and remove obsolete testcase

Fixes #14426

Closes #14443",False
2310e1090a2c45f95a02cabd65e0899739b9f221,2016-04-26 11:36:26,Perry Hooker,"fix($compile): properly handle setting `srcset` to undefined

Previously, calling `Attributes#$set('srcset', value)` on an `<img>` element would throw if `value`
were undefined, as it assumed `value` is always a string.
This commit fixes the issue, by skipping the unnecessary string manipulation when `value` is not
defined.

Closes #14470

Closes #14493",False
92752e5b4239d59a4c26d3b0761ee11d62db3fa0,2016-04-26 11:02:13,andrea,"docs(guide/index): fixed formatting with subtitles

The ""Books"" and ""Videos"" subtitles had no space between text and the '#' so it didn't render as a
subtitle.

Closes #14514",False
4ad95607eb9f9aa06a7925402a0a8874913dcd8c,2016-04-26 02:52:24,Tim van Dalen,"docs($anchorScroll): fix link to HTML5 spec

Closes #14364",False
8576baf7510d292f00f430cbaca134fe7d014565,2016-04-25 22:49:53,Raphael Jamet,"fix($templateRequest): trust empty templates in `$templateCache` as well

Implicitly trust empty templates added to `$templateCache` as is the case for all other templates.

Fixes #14479

Closes #14496",False
8d1ee0c3b9026737910dcd9b8fb6c48fb7091aec,2016-04-24 20:16:41,Sam,"docs(guide/Unit Testing): covert 'focussed' to AE spelling

We prefer American English spelling.
(#14503)",False
c95a3d8088de29a54c96f161704a387a12a2cfb2,2016-04-22 17:10:50,Georgios Kalpakas,"docs($interpolate): add known issue about end-symbol in expression

This has been discussed in #8642.

Closes #14494",False
25a7aefc1217dc56ee09d4a4f33ae4d17ea2183c,2016-04-22 15:09:41,Georgios Kalpakas,"fix(filters): always call `splice()` with 2 arguments or more

When calling `.splice()` without a 2nd argument (`deleteCount`), most browsers will splice to the
end of the array. As it turns out, this is the behavior specified in [ES2015][es6]. In [ES5][es5],
the spec seems to imply that nothing should happen.

To avoid inconsistent behavior among browsers implementing different versions of the EcmaScript
standart or when ES5 shims are included (e.g. https://github.com/es-shims/es5-shim/), this commit
ensures that all calls to `.splice()` provide at least two arguments.

[es5]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.12
[es6]: http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.splice

Fixes #14467

Closes #14489",False
0727bfc141db6e60bce2fb1e09ad4f53963dec5d,2016-04-22 14:49:35,Abhishek Garg,"docs($http): add better explanation for error status codes

Add explanation for error status codes in `$http` and mention negative codes normalization.
This alleviates confusion about which status codes will trigger the error callback and what values
to expect in such callbacks.

Fixes #11945

Closes #14459",False
253cb8d4e912a59d1cedd247c92f2d8dace3ec3a,2016-04-22 02:38:39,andreyjkee,"fix(ngMocks): pass eventHandlers to $httpBackend if passThrough is active

Closes #14471",False
d2ec9d71843b645d1b7e1f2ee69b53af66b9647d,2016-04-21 19:56:47,Martin Staffa,"docs(guide/Expressions): mention absence of bitwise operators

Closes #14485",False
1676b8477f2f2ae3b6f603a1e89c73400beb156d,2016-04-21 19:53:30,Abhishek Garg,"docs(changelog): make labels and list style consistent

Remove 'Breaking Changes' label where there are no breaking changes.

Only for '1.4.0-rc.2', breaking changes have different styling (bold without bulleted list). Change to be consistent with others

(#14482)",False
c414ece5cf9749dd6924b4b00cb5773d2d7088bb,2016-04-21 19:48:15,Amy,"docs($sce): add missing article

...teeny letter missing.  Just a grammar change.
(#14480)",False
186c8cb9e411b893ac31e718d98948d5f448a099,2016-04-21 19:46:45,jody tate,"docs(ngAria): fix markdown heading syntax

(#14477)",False
b5983e4b21543bf782a8ddcce0b263efa2d72b45,2016-04-21 19:26:16,Martin Staffa,"docs(ngMock): add custom installation instructions

ngMock should be used in a test runner context, not directly in the application

Closes #14248",False
f30b0ed8497e5f72f347f146a555482d82b95e79,2016-04-21 19:26:16,Martin Staffa,docs: reorganize module overview page template,False
d985944652f7addcc9c0aff0dad3719e0f625aca,2016-04-20 17:06:39,Michał Gołębiowski,chore(jQuery): bump jQuery version from 2.2.1 to 2.2.3,False
e14b486e07be49cdc2113f6c1a5c22e8d101a34f,2016-04-20 00:01:19,Ken Powers,"docs(guide/Components): snake -> kebab 

The example given is not in snake_case, it is in kebab-case.

Closes #14464",False
eb9f7d484d4e8b45996fb745993d33e0da5210a1,2016-04-19 01:45:40,Lucas Mirelmann,"chore(i18n): Update locales to version 29

Closes: #14450",False
b5a0c8d2ea6d595fac18805e25c8a4797b07c7f1,2016-04-19 01:31:30,Lucas Mirelmann,"feat($parse): Add support for ES6 object initializers

- Add support for computed property names
- Add support for short notation in properties definitions

Eg. The expressions `{x}` and `{[x + 'foo']: 1}` are now valid.",False
c1eaf3480b9a88e5309ff4931a720f3f62bd7606,2016-04-18 19:59:10,Lucas Mirelmann,"fix($parse): Handle sign of `-undefined` consistently

When csp is disabled, evaluating `-undefined` is `-0` and when csp is enabled
the evaluation is `0`. In most cases this is not an issue as `0 === -0`, but
there is an edge case as `1/0 === Infinity` and `1/-0 === -Infinity`

Close: #14451",False
997f482b38703b390a60cd6f5611901fcc944a24,2016-04-18 17:38:10,Martin Staffa,docs(ngMockE2E): add $httpBackend mock example,False
0cb94ed3a35af8409b53de09344d531785099e55,2016-04-18 17:01:31,Peter Bacon Darwin,chore(CHANGELOG): fix version number for 1.5.5,False
c3de164b831d8769ba4b957355b3a999ff627453,2016-04-18 16:59:22,Peter Bacon Darwin,chore(CHANGELOG): add 1.5.5 release notes,False
165a862a0b83efb955b84c06942501b42f5fec94,2016-04-18 02:04:55,Martin Staffa,chore(gitignore): exclude .log and .stackdump files,False
7148627eaeed776666fae0ecc70202210a077bf7,2016-04-18 02:03:35,Jeremy,"docs(guide/Component Router): fix a typo in npm install instructions

Related #14452",False
0d7f1ed428f19e7f1376b8d04173f7c1641afda4,2016-04-16 13:59:03,Peter Bacon Darwin,"docs(CHANGELOG): remove changes from 1.5.4

1.5.4 was only partially released.
These changes will be included in the 1.5.5 release",False
5656eb3c0b24cf58b7b328e47dd1ce6130758b90,2016-04-15 22:53:03,z.ky,"docs($http): fix typo

Fix a typo in the $http API Reference",False
ddac3b3348e0d5cddba81cf1ad6848a23685d8a6,2016-04-15 18:40:25,Georgios Kalpakas,"fix($http): pass event object to `eventHandlers`/`uploadEventHandlers`

Fixes #14436",False
0d55298b56fcd67570374441c0bba76c0bf0d1f0,2016-04-15 18:37:28,Peter Bacon Darwin,"revert: refactor($compile): move setting of controller data to single location

Reverted from commit 83a6b150201a5dc9ff13d0bc4164ea093c348718 since it caused
the Angular Material tabs directives to break.",False
56861c0ae9fd52a8d47d4cc5c1db7f4c9b60526b,2016-04-15 18:07:50,Jannick Fahlbusch,"chore(docsApp): open plnkr.co with HTTPS

Plnkr should be opened via HTTPS instead of HTTP to supress warnings about an insecure connection

Closes #14445",False
b4c7df37132d3af12f476e4cc7aaec6c8bfa31b3,2016-04-15 03:54:14,cloverharvest,"docs($http): fix a typo (his --> this)

Closes #14430",False
1f05b960222d5314ee640f97152459038f75d981,2016-04-15 03:39:31,Adam Demuri,"docs(component): document 'require' in angular.component

Closes #14429",False
c4fb0eca923cca5bab8814d72386b9bb339665f1,2016-04-14 13:46:39,Peter Bacon Darwin,docs(CHANGELOG): add release notes for 1.5.4,False
2840aec8f18cd082afcd78f4d3970309b7d3c874,2016-04-13 22:41:20,Pete Bacon Darwin,"feat($componentController): provide isolated scope if none is passed (#14425)

Closes #14425",False
97b3e003bc60f979fddecd16bc50304b5bef7e53,2016-04-13 22:10:03,Martin Staffa,"perf(ngOptions): use documentFragment to populate select

This changes the way option elements are generated when the ngOption collection changes.
Previously, we would re-use option elements when possible (updating their text and
label). Now, we first remove all currently displayed options and the create new options for the
collection. The new options are first appended to a documentFragment, which is in the end appended
to the selectElement.

Using documentFragment improves render performance in IE with large option collections
(> 100 elements) considerably.

Creating new options from scratch fixes issues in IE where the select would become unresponsive
to user input.

Fixes #13607
Fixes #13239
Fixes #12076",False
f785c0c98ddfdcc2299a85f77472c09fb757d34f,2016-04-13 20:55:46,Georgios Kalpakas,"docs(ngView): add known issue about asynchronously loaded `ngView`

Closes #14424",False
75bf80700e992e6d60f16f6360d400ad28049d36,2016-04-13 20:53:59,Georgios Kalpakas,"revert: ""fix(ngRoute): allow `ngView` to be included in an asynchronously loaded template""

This reverts commit 5e37b2a7fd0b837fdab97bb3525dabefc0ea848a.
Eagerly loading `$route`, could break tests, because it might request the root or default route
template (something `$httpBackend` would know nothing about).

It will be re-applied for `v1.6.x`, with a breaking change notice and possibly a way to disable
the feature is tests.

Fixes #14337",False
fe1127a322be4c64f3bbe882c3b358b468ce207c,2016-04-13 14:19:40,Jason Bedard,"perf($compile): use createMap() for directive bindings to allow fast forEach

Closes #12529",False
709dc1cf0e73ace6aced4cd021026212f079fc77,2016-04-12 18:49:55,Peter Bacon Darwin,docs(images): add svg and visio versions of the graffle image,False
3207b51e83a2d0c2e9eb44b6074ecfc723f34862,2016-04-12 18:46:43,Peter Bacon Darwin,docs(guide): add svg and visio versions of the graffle images,False
e818d4a959c613b982d3326b81eb61de50ef2188,2016-04-12 18:43:33,Peter Bacon Darwin,docs(tutorial): add svg and visio versions of the graffle images,False
1c62d632a5cb209170259e8d6203f4ca12ab5234,2016-04-12 17:20:46,Georgii Dolzhykov,"docs(Module): fix parameter names for `.decorator()`

Closes #14413",False
761c70c7b9585d3dc61ae9cab338df2558b9a1ac,2016-04-12 00:51:29,aortyl,"docs(guide/scope): add comma for readability

Closes #14411",False
83a6b150201a5dc9ff13d0bc4164ea093c348718,2016-04-11 23:24:20,Jason Bedard,"refactor($compile): move setting of controller data to single location

Closes #13421",False
9264cef03f4761a73f4fd8f4e32b150a337da1d2,2016-04-11 23:12:48,Georgios Kalpakas,"fix($compile): do not use `noop()` as controller for multiple components

Currently, custom annotations are copied from the CDO onto the controller constructor.
Using `noop()` when no controller has been specified, pollutes it with custom annotations and
makes one component's annotations available to all other components that have `noop()` as their
controller.

Fixes #14391
Closes #14402",False
a0b5e1a85893f65a45f6c776b5a8a2ef96be9580,2016-04-11 15:28:50,a510,"fix($injector): ensure functions with overridden `toString()` are annotated properly

Closes #14361",False
74eb4684dce1d75c77e74fff4b98724a13438610,2016-04-11 15:08:45,David Rodenas Pico,"fix(ngClass): fix watching of an array expression containing an object

Closes #14405",False
d088fbeae3bc718e5f29d84f46c7e3e1d8863064,2016-04-11 15:01:45,Georgios Kalpakas,"refactor($compile): remove unnecessary call to `isDefined()`

(As discussed in https://github.com/angular/angular.js/pull/14406/files#r59131398.)",False
ee8d8e12fb725c283471ab5397dedf2bf582ea68,2016-04-11 14:56:56,Gene McCulley,"docs(numberFilter): fix the description of the returned value

Closes #14408",False
4a0bd6ce69f104bc0e430b9ce0b3816052ede85c,2016-04-11 01:00:35,Peter Bacon Darwin,"fix($compile): still trigger `$onChanges` even if the inner value already matches the new value

Closes #14406",False
5d695e5566212d93da0fc1281d5d39ffee0039a3,2016-04-10 02:08:16,Rouven Weßling,"chore(IE8): remove more special code for IE8

Closes #9478",False
92c3b753d487e144db0c2828191cc2c11bd70746,2016-04-09 23:19:10,Jurko Gospodnetić,"fix(ngMock): fix collecting stack trace in `inject()` on IE10+, PhantomJS

Add support for collecting current stack trace information in browsers
(e.g. IE10+, PhantomJS) that do not automatically store the current stack trace
information in a newly created `Error` object's `stack` property, but
only add it there once the `Error` gets thrown.

The original implementation works fine in Firefox & Chrome, but fails on IE10+
and PhantomJS where it, for example, breaks Karma's error reporting in cases
when an exception is thrown in a test like the following:

```
it('the holy crusade', inject(function() {
  var x = {};
  x.holyGrail();
}));
```

In this case, the ngMock `inject()` implementation would incorrectly add the
word `undefined` at the end of the collected error stack trace information,
thus causing the main error description to be reported back to Karma as
`undefined`.

The added test makes sure this functionality:

- works as expected in browsers supporting JavaScript stack trace
  collection, e.g. Chrome, Firefox, IE10+, Opera & PhantomJS
- does not add any bogus stack track information in browsers that do
  not support JavaScript stack trace collection, e.g. IE9

Fixes #13591
Closes #13592

Closes #13593",False
a084030afa6b4b988c9f7098d67f6e66e3c46e7f,2016-04-09 19:31:45,Georgios Kalpakas,"test(helpers): fix error message generation for `toHaveBeenCalledOnce[With]` matchers

Jasmine 2.4 (maybe earlier) does not support returning an array containing both the ""normal"" and the
negative error messages. It will always concatenate them.

Closes #14275",False
1cb8d529a652f3de68085f6f4e1355b8e51e7bab,2016-04-09 19:22:33,Jan Niehusmann,"fix($compile): handle boolean attributes in `@` bindings

Commit db5e0ff handles initial values of boolean attributes. The same
change needs to be applied inside the attrs.$observe() call.

Closes #14070",False
0348347841191530417f6c9eb6e991c33f0e8c99,2016-04-09 01:28:19,Peter Bacon Darwin,"chore(package.json): update dgeni-packages to 0.12.0

This gives us `@knownissues` tags",False
d405dfd5ed3ddec6d3e195d2c662ea9b6dc6cfa9,2016-04-09 00:03:43,Peter Bacon Darwin,"docs(jqlite): add known issue

Closes #14251",False
d49782226689a135b7f6a86ee35bcded59c22b33,2016-04-08 23:45:30,Peter Bacon Darwin,"feat($http): support handling additional XHR events

Closes #14367
Closes #11547
Closes #1934",False
50cdedef36c733303bb0e277d42fa15b63f934d9,2016-04-08 23:45:30,Chris Chua,"feat($http): support handling additional XHR events

Closes #11547
Closes #1934",False
8dc08fb1d793cf8ba3072d21d18e37545d28f452,2016-04-08 22:59:19,Martin Staffa,docs(CONTRIBUTING): clarify guidelines for ngLocale changes,False
7477fbec61752e44224f7db960a0bf3ff0c8091e,2016-04-08 22:30:31,Martin Staffa,docs(README): fix typo,False
a479e6543eebe2dd6eb937dcbbf4cdf2f59e31bc,2016-04-08 22:25:06,Martin Staffa,docs(guide/accessibility): make jshint happy,False
b89c2181a9a165e06c027390164e08635ec449f4,2016-04-08 22:08:14,Jason Bedard,"fix($compile): move check for interpolation of on-event attributes to compile time

This makes the two interpolation errors consistent and avoids checking the same thing per link
(which previously would log the same error per link).
The test changes are not necessary but do make them stricter and more like the selmulti error tests.

Closes #13267

BREAKING CHANGE:

Using interpolation in any on* event attributes (e.g. `<button onclick=""{{myVar}}"">`) will now throw
the ""nodomevents"" error at compile time.
Previously the nodomevents was thrown at link time. The new behavior makes it consistent with
the ""selmulti"" error.
The breaking change should be rare, as it relates to incorrect API use that should not make it to
production apps in the first place.",False
6b57198cb42dc69bba57413ca71686d80e3e36fa,2016-04-08 21:51:35,Pablo Iván G. Soto,"docs(README): add https links, improve style",False
9978de11b7295fec1a2f4cb8fbeb9b62b54cb711,2016-04-08 21:11:58,mohamed amr,"fix(ngAria): don't add roles to native control elements

prevent ngAria from attaching roles to textarea, button, select, summary, details, a, and input

Closes  #14076
Closes #14145

BREAKING CHANGE:

ngAria will no longer add the ""role"" attribute to native control elements
(textarea, button, select, summary, details, a, and input). Previously, ""role"" was not added to
input, but all others in the list.

This should not affect accessibility, because native inputs are accessible by default, but it might
affect applications that relied on the ""role"" attribute being present (e.g. for styling or as
directive attributes).",False
d449ec83a68dd134159b82b553285a343f00f964,2016-04-08 20:59:26,Martin Staffa,"docs(guide/Accessibility): fix markdown errors, tweak layout",False
ae0a716000ba6435916c17be85029a9db1d181a0,2016-04-08 20:58:24,mohamed amr,"feat(ngAria): add support for aria-readonly based on ngReadonly

Closes #14140
Closes #14077",False
eee2ef6e9df90ba41a7a7d8a90d16665272b412c,2016-04-08 19:25:59,Martin Staffa,docs(ngComponentRouter): add note about shims needed for IE,False
0cbe7fbfc41a7723f953fb24e5ec76c18fae9e86,2016-04-08 19:15:33,Josh,"docs(ngComponentRouter): fix typo

Simple typo fix from `betweent he` to `between the`

Closes #14396",False
f8e6a4bcba33e70c0d09cfedd17be628af33c206,2016-04-08 18:33:11,Martin Staffa,"fix(ngAnimate): remove event listeners only after all listeners have been called

The fix for removing the event callbacks on destroy introduced in
ce7f400011e1e2e1b9316f18ce87b87b79d878b4 removed the events too early, so that the event callbacks
for the ""close"" phase in ""leave"" animations were not called.

This commit fixes the behavior so that the event callbacks are only removed during on('$destroy')
when no animation is currently active on the element. When an animation is active, the event callbacks
will be removed after all callbacks have run, and if the element has no parent (has been removed from
the DOM).

Closes #14321",False
ea4120bf3524c270cebbf3e4dd0ba31552de6f1f,2016-04-08 18:33:10,Martin Staffa,feat(ngAnimate): let $animate.off() remove all listeners for an element,False
c75fb80333175fa0a553ad3b163b33214145c7fa,2016-04-08 05:01:26,Andrew,"docs(guide/Components): fix small single letter typo

line 136: 'not' should be 'note'

Closes #14390",False
2b327f01be16c5eae3fbee99b09dbf58f5b8ae36,2016-04-08 04:38:58,Martin Staffa,"fix(ngAnimate): fire callbacks when document is hidden

Since commit a3a7afd3aa70d981b0210088df53fa2cf68d3a3d, animations are not run
when the document is hidden (only their structural or class change effects are executed).
However, some libraries rely on the $animate.on() callbacks to be called even when no actual animation
runs.
This commit restores the behavior for the ngAnimate.$animate functions.
Note that callbacks still won't be called if animations are disabled, because this would be be a potential
breaking change, as some applications might rely on this implementation.

Fixes #14120",False
19eca35c7240c31e9024387fb66b4be1d1f79cba,2016-04-08 04:38:56,Martin Staffa,test(ngAnimate): test calling callbacks for various constellations,False
eb2126a388b8866ce1d9d7e3f6e7caa3ca97648b,2016-04-08 04:38:51,Martin Staffa,fix(ngAnimate): fire callbacks in the correct order for certain skipped animations,False
796c11116d6bd46404122638cedea2893982c53e,2016-04-07 18:43:24,SHAHRUKH-KHAN,"docs(angular.equals): add example

This Pull requests improves the doc by adding a example to `angular.equals` function.

Closes #14232",False
6df103591e470ae8632eadea3d9bc7e82608e4e5,2016-04-07 17:40:58,glenr4,"docs(ngAnimate): fix toggle button in example

The toggle button code on line 153 only sets bool to true, rather than toggling it.
The proposed change fixes this.

Closes #14387",False
441be9a102587bb2bd0e0be71de6020835df8edc,2016-04-07 17:40:58,andykuszyk,"docs(misc/Getting Started): fix markdown for headings

Closes #14353",False
2d414fbaeee4fd1f9568d2343e5ac0c5b2d7a8a6,2016-04-07 17:40:58,Maciej Kołodziejczak,"docs(ngComponentRouter): fix a typo

Closes #14357",False
f056f5d1c56cb83fc59a96140a981a092f6780db,2016-04-07 17:40:58,Andrew,"docs(guide/Components): clarify output events with extra example and note

Add additional line from example which demonstrates using the snake cased attribute binding in
parent component template.
Add note clarifying camelCase to snake-case requirement to use the Output binding callback feature.

Closes #14365",False
d076a9b217c16f76cc409f6b3a869c42c9869b05,2016-04-07 17:40:58,Artur,"docs(guide/Components): fix typo, improve style

Closes #14384",False
fd0b1ebfc71f9092e950f62359317a061c7840b3,2016-04-07 17:40:58,Robin Janssens,"docs($httpBackend): update response data types

Updated docs to reflect that response data can either be an array, object _or_ a string
Technically, response data can be anything that can be handled by angular.copy,
but since string and JSON data is most commonly mocked, the main types are sufficient.

Closes #14346",False
038d990bc15a2b6694f801716ffaa5722d49e112,2016-04-07 00:28:03,Michał Gołębiowski,"fix(travis): Don't run e2e tests with jQuery twice

The e2e tests were set up to be run twice; once with the latest supported
jQuery and once with jQuery 2.1. However, the latest jQuery was used in both
cases. The initial plan was to just run integration tests with the latest
jQuery and leave regression testing for jQuery 2.1 to unit tests as they're
way faster. This commit removes the jQuery 2.1 e2e tests entry.",False
ddad26402bd092c19c722bb1cef65018e56a8a35,2016-04-07 00:05:49,Michał Gołębiowski,"refactor(jshint): don't assume browser-only globals

Fixes #13442
Closes #14345",False
fad6c7c661967ddc8f39aa00f8cf5bcc7d848ff8,2016-04-06 01:37:50,Peter Bacon Darwin,docs(componentRouter): add custom installation instructions,False
4b2bc60e43138d457678338d6c78c5caf5d3423c,2016-04-05 00:35:28,Peter Bacon Darwin,"feat($compile): put custom annotations on DDO

Closes #14369
Closes #14279
Closes #14284",False
d27954575f8b35db1e9d8b2a047f97eaab0881f3,2016-04-04 19:57:09,Peter Bacon Darwin,fix($compile): don't throw if controller is named,False
b54634d37b69bd3f7f563d0718873fe9f50eb2d1,2016-04-01 22:11:07,Peter Bacon Darwin,"fix($compile): ensure that `$onChanges` hook is called correctly

Due to the way that we instantiate controllers, the `$onChanges` hook
was not always available at the time we were trying to trigger the initial
call to this hook. For instance, if the hook was actually defined inside
the constructor function.

This commit fixes that but also fixes the fact that the initial call was
being made in the postDigest anyway, which was incorrect because the
it should have been made before the `$onInit` call.

Closes #14355
Closes #14359",False
fa79eaa816aa27c6d1b3c084b8372f9c17c8d5a3,2016-03-31 15:55:46,Georgios Kalpakas,"test($browser): fix typo in property name (histroy --> history)

(The semantics of the test aren't affected, because we just needed a falsy value.)",False
1964620e95eea78ebe9c59cbb3b0ac534ec6f80e,2016-03-30 17:27:36,Michał Gołębiowski,chore(*): Remove duplicate globals in .jshintrc files,False
3b05c484af074f0c7c050b0f9824099d627e178f,2016-03-30 00:05:48,Martin Staffa,"fix(ngOptions): set select value when model matches disabled option

When ngModel is set to a value that matches a disabled option, ngOptions will now select the option
in the select element, which will set select.val() to the option hash value and visually
show the option value / label as selected in the select box. Previously, disabled
options forced the unknown value.
The previous behavior is inconsistent with both default HTML behavior and select with
ngModel but without ngOptions. Both allow disabled values to be selected programmatically.

A common use case for this behavior is an option that was previously valid, but has
been disabled, and cannot be selected again.

This commit removes a duplicate test, and all other tests that previously checked that disabled
options are not set have been adjusted to the ensure the opposite.

Fixes #12756",False
71cf28cf06295e0936f706c048bc07e6c963acc4,2016-03-27 18:37:56,Lucas Mirelmann,refactor(ngResource): handle success and error callbacks using the same promise,False
c9dffde1cb167660120753181cb6d01dc1d1b3d0,2016-03-27 18:37:37,Lucas Mirelmann,"feat($q): report promises with non rejection callback

Rejected promises that do not have a callback to handle the rejection report
this to $exceptionHandler so they can be logged to the console.

BREAKING CHANGE

Unhandled rejected promises will be logged to $exceptionHandler.

Tests that depend on specific order or number of messages in $exceptionHandler
will need to handle rejected promises report.

Closes: #13653
Closes: #7992",False
0ece2d5e0b34a27baa6238c3c2dcb4f92ccfa805,2016-03-27 18:12:47,cscport,"docs(angular.bootstrap): fix capitalization in error message

Closes #14325",False
3968a8f8ccfd1c55ff2a0acfb5267f071f499468,2016-03-27 04:29:38,Lucas Mirelmann,docs(ngParseExt): Fix package name,False
a6a4b235178b1a6e9374e9733bd8aa94fe9322dd,2016-03-27 01:35:07,Peter Bacon Darwin,"feat($compile): add `isFirstChange()` method to onChanges object

Closes #14318
Closes #14323",False
bd0915c4007dcc5b0cae6968598731117c510ffa,2016-03-27 01:09:19,Lucas Mirelmann,"feat(ngParseExt): New ngParseExt module

New ngParseExt module

Including this module into an application will extend $parse to allow identifiers
following ES6 identifiers",False
ad298947a031aad95b145c6fefde028d6aac481f,2016-03-27 01:09:08,Lucas Mirelmann,"feat($parse): Add the ability to define the identifier characters

Add the ability to define the identifier starts and identifier continue characters",False
fadea2c81f7e14ec9237f35c02bf39b6cd655635,2016-03-27 01:06:36,Lucas Mirelmann,chore(bower): Add parse-ext repository,False
5ceb5dbfa6d9b6d15232a1f5c767b2f431325948,2016-03-26 20:31:43,thorn0,"perf(injector): cache the results of the native class detection check

Closes: #14322",False
bd7d5f6345439aa2d1da708ffee20b4c565131d4,2016-03-26 17:01:39,Lucas Mirelmann,"perf($parse): Inline constants

Inline constants definitions in function calls, array definitions
and object values.

For the expression [1, {foo: ""bar""}, 1 + 2] it changes it from

```js
// After some reordering and cleanup
var v1 = 1;
var v2 = ""bar"";
var v3 = {foo: v2};
var v4 = 1;
var v5 = 2;
var v6 = plus(v4, v5);
var v7 = [v1, v3, v6];
return v7;
```

to

```js
return [1, {foo: ""bar""}, plus(1, 2)];
```

Expression parts that are not constants did not change, and still generate a lot
of intermediate variables.

Closes: #14293",False
3cd00fa3dded965a72fba29f0004618122b9da14,2016-03-26 01:32:41,Peter Bacon Darwin,docs(CHANGELOG): add 1.5.3 release notes,False
90cb24e7818154b2293c8257f115cd9b2924a38c,2016-03-25 19:14:12,Martin Staffa,"chore: add jshint eqeqeq for src/ files

Add jshint ""eqeqeq"" and ""eqnull"" rules (to allow == null comparisons).
Only adds it to files under src/, because we these files are unit-tested.
Files in src/ngLocale are excluded, because the code is imported.

Closes #14287",False
4487d4a8a477ad440500e3574c141da48d13ab3d,2016-03-25 19:14:12,Martin Staffa,"fix: make files in src/ jshint: eqeqeq compatible

Add exceptions to the rule in input, ngAria, and parse.
For input and ngAria, the exception is to prevent a breaking change in the radio directive.
A test for the input behavior has been added.
For parse, the exception covers non-strict expression comparison.",False
874c0fdcdd031aedae56a56a51eca8c2ca6e5a57,2016-03-25 18:24:50,Peter Bacon Darwin,"feat($compile): add more lifecycle hooks to directive controllers

This change adds in the following new lifecycle hooks, which map in some
way to those in Angular 2:

 * `$onChanges(changesObj)` - Called whenever one-way bindings are updated. The `changesObj` is a hash whose keys
   are the names of the bound properties that have changed, and the values are an object of the form
   `{ currentValue: ..., previousValue: ... }`. Use this hook to trigger updates within a component such as
   cloning the bound value to prevent accidental mutation of the outer value.
 * `$onDestroy` - Called on a controller when its containing scope is destroyed. Use this hook for releasing
   external resources, watches and event handlers.
 * `$postLink` - Called after this controller's element and its children been linked. Similar to the post-link
   function this hook can be used to set up DOM event handlers and do direct DOM manipulation.
   Note that child elements that contain `templateUrl` directives will not have been compiled and linked since
   they are waiting for their template to load asynchronously and their own compilation and linking has been
   suspended until that occurs.

Closes #14127
Closes #14030
Closes #14020
Closes #13991
Closes #14302",False
7489d56687009326ddb8a6caab35523f67b579d3,2016-03-24 16:04:31,Martin Staffa,"docs(ngAnimate): fix anchoring example

Example must be updated for the default ngRoute hash prefix.

Closes #14312",False
cc1de81f5e2867e9ee6db9ecb2a4fd9d19fa2588,2016-03-24 04:43:30,Martin Staffa,"fix(ngAnimate): run structural animations with cancelled out class changes

When multiple animations on the same element are queued before a $digest passes,
the animator tries to create as few actual animations as possible by joining / canceling
redundant animations. Class-based animations for example are cancelled when the classes that
are added and removed are the same, and the result is no class-change. This however must only
happen if there's no structural animation currently queued.

Fixes #14249",False
cbd048d893cc82e5cfed0c799563b1d42b3ad721,2016-03-24 04:43:30,Martin Staffa,"fix(ngMessages): don't crash when nested messages are removed

Under specific circumstances, ngMessages would go into an infinite loop and crash the
browser / page:
- At least two ngMessage elements are wrapped inside another element (e.g. ngTransclude)
- The first message is currently visible
- The first message is removed (e.g. when the whole ngMessages element is removed by an ngIf)

When a message is removed, it looks for a previous message - in this specific case it would misidentify
the second message for a previous message, which would then cause the first message to be marked as the
second message's next message, resulting in an infinite loop, and crash.

This fix ensures that when searching for previous messages, ngMessage walks the DOM in a way so
that messages that come after the current message are never identified as previous messages.

This commit also detaches and destroys all child ngMessage elements when the ngMessages element is
destroyed, which should improve performance slightly.

Fixes #14183
Closes #14242",False
67784531c2b8ecac787b33f09709eb49576574fe,2016-03-24 03:27:08,Alex Chuev,"docs(guide/component): add missing closing bracket

Closes #14299",False
f01d6f2788737bcf6767985bcd43ab4d417839bd,2016-03-24 01:27:28,pmadruga,"docs(error/$compile.baddir): mention ""components"" in directive name error

Closes #14212",False
e34ef23ab868b36d18ee845f78536f0987edf56a,2016-03-22 23:43:37,Daniel Herman,"fix($compile): workaround a GC bug in Chrome < 50

In the version of V8 used in Chrome < 50, the parent of template nodes for
`transclude: ""element""` directives would be improperly garbage collected
despite still having been referenced via `parentNode`.

This bug surfaced due to the introduction of lazy transclusion (652b83e),
and appears under certain circumstances when using directive start and end elements.

It should be removed some time after Chrome 50 has been released.

Fixes #14041
Closes #14286",False
bbd3db14f857aab996ad129f2f15ca6348e9fd9f,2016-03-22 16:23:48,Martin Staffa,"perf($compile): use strict comparison for controller === '@'

In the DDO, controller can be '@', which means the controller name
is taken from the directive attribute. This is undocumented and internally
only used by ngController. There seems to be no case where converting the
controller function to a string would actually be necessary.

Related #14268",False
2ad8a93657375cb484c8e8ecf0fe964f19ca581f,2016-03-22 15:33:37,Steve Mao,"docs($q): mention ES2015 (as a ""synonym"" for ES6) and remove ""harmony""

Closes #14294",False
9f5526f861f2f60f0d0f9fddfc484a9cd9d9b594,2016-03-22 15:02:18,Georgios Kalpakas,"fix($sniffer): fix history sniffing in Chrome Packaged Apps

Although `window.history` is present in the context of Chrome Packaged Apps, it is not allowed to
access `window.history.pushState` or `window.history.state`, resulting in errors when trying to
""sniff"" history support.
This commit fixes it by detecting a Chrome Packaged App (through the presence of
`window.chrome.app.runtime`). Note that `window.chrome.app` is present in the context of ""normal""
webpages as well, but it doesn't have the `runtime` property, which is only available to packaged
apps (e.g. see https://developer.chrome.com/apps/api_index).

(It also also contains some style changes for making the structure and layout of `$sniffer` tests
 more consistent.)

Fixes #11932

Closes #13945",False
7452bc4fb656d0caa113e19290ff0c3a67b58871,2016-03-22 05:43:23,Wassim Chegham,"docs(guide/component-router): fix typos

Closes #14278",False
4202d8a5de82aed7c2459b3693a26dda07e457d3,2016-03-22 03:39:02,Owen Craig,"fix(formatNumber): handle small numbers correctly when `gSize` !== `lgSize`

By using `>=` when comparing the number length to `lgSize`, we'll provide the correct value, when
formatting numbers with different `lgSize` than `gSize`.

Fixes #14289

Closes #14290",False
27ceb6a8fc31d7af32b09acd7c0b5c6723f9b37a,2016-03-22 00:12:22,Georgios Kalpakas,"test(TzDate): fix test in Australia

Probably due to implementation differences in browsers for pre-DST period (see
https://github.com/angular/angular.js/issues/5017 and especially
https://github.com/angular/angular.js/issues/5017#issuecomment-90775226 for context), some
`TzDate` tests had different behavior on different Timezones/Regions (e.g. failed in Australia,
which started to observe DST in 1971).
Since the used year (`1970`) didn't have any particular significance, this commit fixes the issue
by using a year that is more consistently handled by browsers (`2000`).

Fixes #14272

Closes #14285",False
aa077e81129c740041438688dff2e8d20c3d7b52,2016-03-21 16:47:28,Peter Bacon Darwin,"feat($location): default hashPrefix to '!'

The $location service is designed to support hash prefixed URLs
for cases where the browser does not support HTML5 push-state navigation.

The Google Ajax Crawling Scheme expects that local paths within a SPA start
with a hash-bang (e.g. `somedomain.com/base/path/#!/client/side/path`).

The `$locationProvide` allows the application developer to configure the
hashPrefix, and it is normal to set this to a bang '!', but the default
has always been the empty string ''.

This has caused some confusion where a user is not aware of this feature
and wonders why adding a hash value to the location (e.g. `$location.hash('xxx')`)
results in a double hash: `##xxx`.

This commit changes the default value of the prefix to '!', which is more
natural and expected.

See https://developers.google.com/webmasters/ajax-crawling/docs/getting-started

Closes #13812
Closes #14202

BREAKING CHANGE

The hash-prefix for `$location` hash-bang URLs has changed from the empty
string """" to the bang ""!"". If your application does not use HTML5 mode
or is being run on browsers that do not support HTML5 mode, and you have
not specified your own hash-prefix then client side URLs will now contain
a ""!"" prefix. For example, rather than `mydomain.com/#/a/b/c` will become
`mydomain/#!/a/b/c`.

If you actually wanted to have no hash-prefix then you should configure
this by adding a configuration block to you application:

```
appModule.config(['$locationProvider', function($locationProvider) {
  $locationProvider.hashPrefix("""");
}]);
```",False
6a56461135d45bdce16732f93d0394603156d2d0,2016-03-21 16:13:58,Peter Bacon Darwin,chore(.gitignore): ignore Visual Studio Code settings,False
7e5e66fa3c5055b5e191ef0cd2c24eb433a280fc,2016-03-21 04:55:20,surya prakash singh,"docs(input[time]): fix a typo in the example

Closes #14220",False
9ea5f73f734afbeb1c707c9d0e3ef0a83810f300,2016-03-21 03:29:30,Rongduan Zhu,"docs(guide/component-router): changed path to match diagram

Closes #14277",False
3e9015019f3918db444bf0bdf557361d6a9781df,2016-03-21 02:22:33,Georgios Kalpakas,"docs(CHANGELOG.md): rearrange v1.5.1 to be right below v1.5.2

Moved the `v1.5.1` section above the `v1.4.10` one, so that it is right below the `v1.5.2` section
for easier reference. Also removed an empty ""Breaking Changes"" sub-section.

Closes #14283",False
22dee1159cd1d4060d471145745e6697a1bfb0b2,2016-03-21 01:50:33,Georgios Kalpakas,"chore(ci-checks): fix the `ddescribe-iit` task for Jasmine 2

Closes #14276",False
c9b42514136eb46c7bbbf2d67ae6a9ba196baa2b,2016-03-19 04:08:18,Matias Niemelä,chore(CHANGELOG): update version reference,False
b0f2ee7cc4b05c495098f1619a20dd7b652c70cd,2016-03-19 03:43:22,Matias Niemelä,docs(CHANGELOG): add notes for v1.5.2,False
e166621c9d05691ed686d9115abbd159f8ece1b9,2016-03-18 20:25:25,Martin Staffa,"fix(ngAnimate.$animate): remove animation callbacks when the element is removed

The test for this didn't actually test the listener removal. The addClass animation after
the element removal didn't start because the enter animation was still in progress.",False
a1010c5f741a05c924e3295c12b5e6128265abbd,2016-03-18 20:14:43,Jason Bedard,"style($compile,$controller): adding function names for debug/tracing

Closes #13420",False
71e6ccbca6a46134f186d1f734e287ae300a79f9,2016-03-18 20:14:34,Jason Bedard,"style($templateRequest): rename minError var to avoid name conflict

Closes #13701",False
03c572551de92ef11f649dbeb305f7c747c68f52,2016-03-18 20:14:28,Jason Bedard,"style(ngModel,ngOptions): make use of declared but unused variables",False
ac35b416fb818faba73ee4cbdf5837b4d9f31f38,2016-03-18 20:14:28,Jason Bedard,style(*): remove unused variables,False
4ef0c7bac0139b3bdd55721a0cd49b59197887f7,2016-03-18 20:10:57,Martin Staffa,"docs(guide/Services): add whitespace in code example

Closes #14156",False
038eabe8db61527be84eb88e98ddf2ed89b14190,2016-03-18 20:10:54,Huc Arnaud,"docs(error/tplrt): add missing ' in example code

Missing a ' @ line 46 class='wrapper'

Closes #14258",False
25bac4e5204244f3581eaf635a56ec1da75f2de3,2016-03-18 20:10:45,Maxim Salnikov,"docs(guide/Component Router): fix typo in example code

Closes #14262",False
82a4545e772400127cc909ff44f95809e8790bae,2016-03-17 00:46:10,Georgios Kalpakas,docs(CHANGELOG.md): add notes for v1.4.10,False
b8343e213f0a8bd783708d880a30644591297785,2016-03-16 23:54:28,Michał Gołębiowski,"tests(jQuery): make the tests pass on jQuery 3.0.0-beta1

Closes #14229",False
5b2f6fa91fb06e874b98fc9fda25cd86a2ff2c1d,2016-03-16 23:53:52,Michał Gołębiowski,tests(jQuery): test on both oldest & latest supported jQuery version,False
867f1db04c8cfcf33c7453476fb37163b49a1a39,2016-03-16 23:53:51,Michał Gołębiowski,"chore(jqLite): stop patching the change jQuery special handler

Code patching the change event in jQuery doesn't exist in jQuery 2 so this patch
hasn't been needed since Angular 1.3",False
c011215b7ff4c5d7cda1e1745c1385797d4a3a7d,2016-03-16 23:53:51,Michał Gołębiowski,"refactor(jqLite): don't pass useCapture to add/removeEventListener

The useCapture parameter defaults to false even in oldest of our supported
browsers; this is no longer needed. jQuery has removed it in 2.2 as well.",False
99f7302490e4391b4ad9dcd1f08738fa82c36118,2016-03-16 23:24:55,Georgios Kalpakas,docs(CHANGELOG.md): fix typo in anchor name,False
208b84bef1c9495777253622d6501a338fa53cba,2016-03-16 22:15:01,Josh Schneider,"docs(guide/component-router): fix incorrect hook name for `$canActivate`

The hook will most likely be named back to `$routerCanActivate` in the future,
but for now this change is accurate.

Closes #14237",False
a9bbfff44b2fc404176761ef6603149f347d3273,2016-03-16 19:28:57,Peter Bacon Darwin,chore(travis): update node and browser versions,False
d2cc451b1a9d14de615aafa039a6e4e58be65344,2016-03-16 17:43:54,Georgios Kalpakas,docs(CHANGELOG.md): add notes for v1.5.1,False
693bf61546544045806be6182134f786ab680169,2016-03-16 16:37:10,Peter Bacon Darwin,chore(jenkins): update node version to 4.4,False
511503ef3c54caa815f7a2396983563d8ac34035,2016-03-16 16:37:10,Peter Bacon Darwin,"chore(jenkins): fix node version chooser in build scripts

The `set-node-version.sh` script was being run in its own shell and so
was not actually changing the current version of node.",False
eb16611c5155bcfcdfb11cb2681d06e15254d016,2016-03-16 14:45:21,Lucas Mirelmann,"chore(*): Upgrade to Jasmine 2.4

Highlights:
New mechanism to run async tests as Jasmine 2 removed `runs`, `waits` and `waitsFor`
The functions `iit`, `ddescribe` and `tthey` were renamed `fit`, `fdescribe` and
`fthey` as the originals came from Karma, Karma no longer bundles Jasmine and the
new function name comes from Jasmine.

Closes #14226",False
a4e60cb6970d8b6fa9e0af4b9f881ee3ba7fdc99,2016-03-14 20:15:29,Peter Bacon Darwin,"docs(guide/location): include section on base[href]

Closes #14018",False
81150ac77db4068f99e03574aadcbcbad851fab8,2016-03-14 01:11:23,Lucas Mirelmann,"feat($parse): Allow user-defined literals

Allow user-defined literals.

Close: #9504
Close: #9492
Close: #14194",False
7ecfa5deba9488c43f8e4766032372a82c75f8d2,2016-03-11 18:51:38,lordg,"docs(guide/Component Router): adjust the order in the menu

Component Router should come after the menu topic Components as Components should be understood first
before Component Routers. This made it easier to read the Component Routers topic.

Closes #14214",False
567f9b013619d6a72aa5806f4a63fae0cc4e877c,2016-03-11 18:51:16,Martin Staffa,"chore: streamline issue/pr templates

Removes the bullet points and makes all prompts bold,
which should make it easier to see which content has been
added by the issue author",False
0c2d3988ab5507e3edf6422430fe7ccea9077f0d,2016-03-11 13:04:14,Thanos Korakas,"docs(guide/component): use `ctrl` instead of this (for consistency)

Closes #14215",False
efd448d7d39e71be97f2269aaca6ce1cf5b04228,2016-03-09 04:24:07,Gordon Zhu,"docs(guide/unit-testing): fix typo

Closes #14198",False
db281c133de4c1a1968c1da5c98aeb56fdbb9628,2016-03-07 16:05:54,mohamed amr,"refactor(*): use toBeUndefined consistently

Closes #14185
Fixes #14184",False
6a336ba6a0db29da0bee0a2ecf44857780ec682b,2016-03-04 19:27:15,Peter Bacon Darwin,"docs(guide/component-router): initial draft for component router 0.2.0

Closes #14131",False
67a98112e424f5c6a490bc8719f01057ff110ba4,2016-03-04 14:32:28,Martin Staffa,"docs($provide): clarify value and constant injectability

Closes #14168",False
f1aea54a9b4ceaf13676a4e7b74bf0de718cd6a4,2016-03-02 23:52:19,Ciro Nunes,"docs(ngModel.NgModelController): fix typo

Closes #14157",False
663788d8c17f562d6591de0fc4a29174f62f22a2,2016-03-02 23:33:31,Martin Staffa,"docs(changelog, migration): add BC notice for allowed form name values

Introduced by https://github.com/angular/angular.js/commit/94533e570673e6b2eb92073955541fa289aabe02

Closes #13771",False
af0574ebaa1b13744bf1b1a0eea7f9d643ccb47c,2016-03-01 17:08:27,Tim Ruffles,"feat(ngMock): add sharedInjector() to angular.mock.module

Allow to opt-in to using a shared injector within a context. This allows  hooks to be
used in Jasmine 2.x.x/Mocha

Closes #14093
Closes #10238",False
4883e957971f1c551a0f560427bba0224f291449,2016-02-29 22:38:03,Ivo Mirra,"refactor(*): move noop functions to `angular.noop`

Closes #14151",False
9c7c494c3e4f325d7db3269c689ddfe5f78e0ec2,2016-02-29 21:49:29,Georgios Kalpakas,"docs(errorDisplay): encode `<` and `>` in error messages

When an error message contains an HTML string (e.g. `$location:nobase` containing `<base>`), it was
interpreted as a literal HTML element, instead of text. Error messages are not expected to render
as HTML, but we still need to use `.html()` in `errorDisplay`, so that the links created by
`errorLinkFilter` are properly displayed.
This commit solves this issue by replacing `<`/`>` with `&lt;`/`&gt;`.

Related to #14016.",False
321180af130171e259947f3371cee3ec08c69199,2016-02-29 21:49:29,Georgios Kalpakas,test(docs): add tests for the `errors` module,False
e2898c94360e6b489fe1ab4d45386b3a52fafe28,2016-02-29 21:49:29,Jason Bedard,"refactor($compile): move setup/get controller methods out of the compile node closure

Closes #13427",False
c52d0957decd4bf52417c93c7a7d1645bc4266f4,2016-02-29 21:49:29,Jason Bedard,refactor($compile): remove out of date jQuery vs jqLite comment/workaround,False
7bdc6cb3584c4f7dca27c53f992b70e07733f6dd,2016-02-29 02:37:45,Nabil Hashmi,"docs($http): fix typo in link text (TransformationjqLiks --> Transformations)

Closes #14149",False
2c54a3c0811ca3202f3df2e6c92d4350b6f7f4f6,2016-02-28 20:42:38,Martin Staffa,"fix(ngOptions): always set the 'selected' attribute for selected options

We don't set selected property / attribute on options that are already selected.
That happens for example if the browser has automatically selected the first
option in a select. In that case, the selected property is set automatically, but
the selected attribute is not. This doesn't impact the functionality of the select,
but it can be problematic if option elements are selected with `option[selected]` in tests.

Closes #14115
Closes #14125",False
5078c76c5dc36b69375aaa94e10fb1e492fcbff1,2016-02-28 20:34:11,lordg,"docs(guide/Interpolation): fix code example

The function getForm is receiving a variable from the view and should be using that.

Closes #14142",False
30a7e3a14455655827ddf8909d3d08cb97ca21e3,2016-02-28 20:32:42,Matt Janssen,"docs(guide/Components): add missing $ctrl

docs(guide/Components): add missing $ctrl

The new component example does not work as is. It needs a missing reference to $ctrl.

Closes #14138

Closes #14143",False
a6afa780b7d26c53a6ff4d7ec2557a651ccf8d3a,2016-02-28 20:26:49,Georgii Dolzhykov,"docs(guide/Services): improve the code example

A factory that doesn't return anything is a bad example of a factory.

Closes #14139",False
3faa01fb152a9497798a5802601a84c3371cb4f5,2016-02-28 20:26:44,lordg,"docs(guide/Templates): add title for consistency

Closes #14141",False
0f5bcb73562b6d98b244091a172e7416c923a7aa,2016-02-28 20:26:39,Martin Staffa,"docs(guide/interpolation): make some minor improvements, add info

- highlight that interpolation inside expressions is bad practice
- add info about type attr in buttons in IE",False
db1cf6d293176da4e854200f966c201a6c2b4b78,2016-02-28 19:43:01,lordg,"docs(guide/Filters): add title for consistency

Closes #14143",False
6253de3913e68c5b5ccfb719590ef1cab37ea196,2016-02-28 19:28:50,mohamed amr,"test(ngAria): remove incorrect closing `div` tag after `input` element

Closes #14146
Closes #14147",False
32feb2b45f61f58579803b2d2d78b88f939ad47c,2016-02-26 00:48:59,Lucas Mirelmann,"refactor($compile): Create non-descriptive comments when debugInfoEnabled is false

When debugInfoEnabled is `false` when comments generated by transclusions, ngIf,
ngRepeat and ngSwitch will not contain any information about the directive nor
the expression associated with it.

Closes: #8722",False
5e37b2a7fd0b837fdab97bb3525dabefc0ea848a,2016-02-25 15:24:20,Georgios Kalpakas,"fix(ngRoute): allow `ngView` to be included in an asynchronously loaded template

During it's linking phase, `ngView` relies on the info provided in `$route.current` for
instantiating the initial view. `$route.current` is set in the callback of a listener to
`$locationChangeSuccess`, which is registered during the instantiation of the `$route` service.

Thus, it is crucial that the `$route` service is instantiated before the initial
`$locationChangeSuccess` is fired. Since `ngView` declares `$route` as a dependency, the service is
instantiated in time if `ngView` is present during the initial load of the page.

Yet, in cases where `ngView` is included in a template that is loaded asynchronously (e.g. in
another directive's template), the directive factory might not be called soon enough for `$route`
to be instantiated before the initial `$locationChangeSuccess` event is fired.

This commit fixes it, by always instantiating `$route` up front, during the initialization phase.

Fixes #1213
Fixes #6812

Closes #14088",False
0749eb44e52ae1a01cdb24a1e35b78f7c4b33e4b,2016-02-24 22:05:54,Martin Staffa,"docs($http): add a note about modifying data in transformRequest

Closes #12468",False
c900b9c531714b08d4a8beeead2f7a9a451248a5,2016-02-24 18:49:05,Peter Bacon Darwin,"docs(guide/security): provide more information about security features

Thanks to Jim Manico for help updating this guide.",False
6a4597b47d07104d2a739bd24f734094144046ad,2016-02-24 17:09:58,Steve Shaffer,"docs(guide/Internet Explorer Compatibility): Add ng-attr-type workaround for buttons in IE

Closes #14117
Closes #14119",False
d7cb37032bb665774d58433b02dc0118def6d053,2016-02-24 17:06:47,Foxandxss,"chore(ISSUE_TEMPLATE): fix typo in ISSUE_TEMPLATE

Closes #14121",False
76f47d5632526f6d4d0c2f3f621956d86b3ab98e,2016-02-24 03:30:13,Vadorequest,"feat($controllerProvider): add a `has()` method for checking the existence of a controller

Fixes #13951

Closes #14109",False
871bebf7dcf4d3109ce37501fffe666a03010b27,2016-02-24 02:48:18,Georgios Kalpakas,"fix(ngMock): don't break if `$rootScope.$destroy()` is not a function

Previously, `angular-mocks` was calling `$rootScope.$destroy()` after each test as part of it's
cleaning up, assuming that it was always available. This could break if `$rootScope` was mocked
and the mocked version didn't provide the `$destroy()` method.
This commit prevents the error by first checking that `$rootScope.$destroy` is present.

Fixes #14106

Closes #14107",False
7e112c1fc3ab5651e9a36aa024200dc82b18a05d,2016-02-24 00:25:18,Peter Bacon Darwin,"feat($compile): add custom annotations to the controller

This means that we can access these annotations, such as
`$routeConfig` and `$routerCanActivate` without highjacking
the `ng` module.

Closes #14114",False
59aef482815f3ceaa671685db4070a67971978a2,2016-02-23 17:52:52,Georgios Kalpakas,"refactor(ngMock): make `ngMock` minification-safe

It is not common, but some workflows result in `angular-mocks` being minified.

Fixes #13542

Closes #14073",False
2ffda41ab02173fc60e8e0e1def80e6ff15f80ab,2016-02-23 17:42:53,marvin sl,"docs(guide/animations): fix typos in example

Closes #14111",False
f70237a3e85f6837a8e451a2331334165c490ff2,2016-02-23 17:21:47,Igor Dolgov,"docs(ngMock): add missing "")"" in example

Closes #14112",False
3c86212710472075fd8239b36a041bf46758dc67,2016-02-23 03:49:45,Martin Staffa,chore: add issue and PR templates,False
85ef70f42835900d9394e8b0006b60dd3155d70c,2016-02-22 19:27:10,Georgios Kalpakas,"fix(ngMock): prevent memory leak due to data attached to `$rootElement`

Starting with 88bb551, `ngMock` will attach the `$injector` to the `$rootElement`, but will never
clean it up, resulting in a memory leak. Since a new `$rootElement` is created for every test,
this leak causes Karma to crash on large test-suites.
The problem was not detected by our internal tests, because we do our own clean-up in
`testabilityPatch.js`.

88bb551 was revert with 1b8590a.
This commit incorporates the changes from 88bb551 and prevents the memory leak, by cleaning up all
data attached to `$rootElement` after each test.

Fixes #14094

Closes #14098",False
a7244fdcb05ad63606168d95dc0551bbe323b28e,2016-02-22 17:11:09,anh,"docs(guide/component): fix `$componentController` usage

Fixes #14091

Closes #14092",False
565391d30a94870c1dcc1c8e472da3341c1d3afe,2016-02-22 16:54:32,Martin Staffa,"chore(travis): update Chrome and FF versions, add Safari 9

Closes #13888",False
a88473db8a73e5e8ccbc6c8e3b90e9ff951471e8,2016-02-22 16:51:02,Georgios Kalpakas,"test($resource): clean up commented out code

Closes #13891
Closes #13895",False
68f528aa04290609422c0d73eeef2c27c8f9a8f6,2016-02-22 16:34:43,Ben Elliott,"docs(ngMessages): clarify ngMessages docs with clearer example

Closes #14103",False
3671adbba6f8a55ca5b08a38d96f19ca3457f58b,2016-02-22 16:34:43,Kin,"docs(numberFilter): improve wording for infinity description

Closes #14100",False
1edb13f7845cba0eee14b6fc552ede95db8603b7,2016-02-22 16:34:43,Kin,docs(angular.forEach): fix typo,False
113a946a99b29b7d872582d306c19f937299bce8,2016-02-21 15:33:15,Ryo Utsunomiya,"docs(guide/components): fix typo

Closes #14099",False
70caf8463401b31d595821ab5a29b64184323acf,2016-02-21 13:22:03,Gordon Zhu,"docs(guide/index): add Firebase Foundations and Angular Course

Closes #14097",False
1b8590a7c5dd2a88c7cc81c2517b32daaa283544,2016-02-21 11:03:29,Matias Niemelä,"revert: fix(ngMock): attach `$injector` to `$rootElement`

This reverts commit 88bb5518eb8b860e961e17d71f9ff638227854c8.

The fixes applied in the reverted commit caused a memory leak
with JQuery + Karma.",False
9955bd05ed1b9b27259f1097cbbf76a5a500bdcc,2016-02-21 04:48:39,Georgios Kalpakas,docs(guide/migration): remove redundant horizontal ruler,False
02a9543189b9066e1bf083e7072b43b121490e84,2016-02-21 04:42:51,Yonatan Kra,"docs(guide/component): make clear when required controllers are available

It was unclear that the required controllers are available only just before the `$onInit` lifecycle
hook is triggered.

Closes #14096",False
eda7ef66f7e0e6691425bab245957c415fcb29c0,2016-02-21 04:20:58,TepigMC,"docs(README.md): fix typo

Closes #14090",False
2d6c218327c6361fde62efa5c019b49cfeef5c42,2016-02-18 17:42:26,MicCarr,"docs(ngMock): fix typo in example

Closes #14069",False
7324804bf5d9f2d371d2fdebcd5639b39ff2f185,2016-02-18 14:24:30,Jason Bedard,"fix(input): re-validate when partially editing date-family inputs

Fixes #12207
Closes #13886",False
84c04b0b6856ee0cc42867bc4e8ab8e583e54d11,2016-02-18 04:24:18,ryanhart2,"docs($http): improve description of caching

Included changes:

* Point out that only GET & JSONP requests are cached.
* Explain that the URL+search params are used as cache keys (headers not considered).
* Add note about cache-control headers on response not affecting Angular caching.
* Mention `$httpProvider.defaults.cache` (in addition to `$http.defaults.cache`).
* Clear up how `defaults.cache` and `config.cache` are taken into account for determining the
  caching behavior for each request.

Fixes #11101
Closes #13003",False
735be1834433d8737bb00d31c8217860a59da8a0,2016-02-17 19:12:17,Jason Bedard,"fix(formatNumber): allow negative fraction size

Closes #13913",False
3ea447726694790b6f39c5dddf5616a3c2c6f43d,2016-02-17 19:00:39,Aftab Ansari,"docs(README.md): fix typo

Closes #14062",False
0b1b9112a341f7f798db915575fad63e0e59894e,2016-02-17 18:03:50,Georgios Kalpakas,"fix(copy): add support for copying `Blob` objects

Although `copy()` does not need to (and never will) support all kinds of objects, there is a
(not uncommon) usecase for supporting `Blob` objects:

`ngMock`'s `$httpBackend` will return a copy of the response data (so that changes in one test won't
affect others). Since returning `Blob` objects in response to HTTP requests is a valid usecase and
since `ngMocks`'s `$httpBackend` will use `copy()` to create a copy of that data, it is reasonable
to support `Blob` objects.
(I didn't run any benchmarks, but the additional check for the type of the copied element should
have negligible impact, compared to the other stuff that `copy()` is doing.)

Fixes #9669

Closes #14064",False
489835dd0b36a108bedd5ded439a186aca4fa739,2016-02-17 15:53:05,Martin Staffa,"chore(docs-app): fix middle/right dropdown clicks in FF

Closes #14024",False
adbc2b10d2830718f3e3eac56f4cb6227f3230a3,2016-02-17 15:53:05,Martin Staffa,"chore(docs-app): remove obsolete directives

Most of the directives in bootstrap.js haven't been in use since
https://github.com/angular/angular.js/commit/389d4879da4aa620ee95d789b19ff9be44eb730a:
Dropdown-related directives were moved to dropdown-toggle.js, and for
foldout, popover and syntax, the uses and tests were removed, but not the directives themselves.

The last use of tabbable was removed in
https://github.com/angular/angular.js/commit/6b7a1b82bc26bbf4640506a9a3cf37ebf254d3d2",False
ea6c2473c16c5a6c35f5cc0337224fc4a254d2aa,2016-02-17 04:23:38,biohazardpb4,"fix(ngMockE2E): pass `responseType` to `$delegate` when using `passThrough`

The `ngMockE2E` `$httpBackend` has a mechanism to allow requests to pass through, if one wants to
send a real HTTP request instead of mocking. The specified `responseType` of the request was never
passed through to the ""real"" `$httpBackend` (of the `ng` module), resulting in it being effectively
ignored.

Fixes #5415

Closes #5783",False
b43768a3453741b7f59235d8809fb1294590032c,2016-02-17 02:22:21,Georgios Kalpakas,docs(guide/forms): make required `ngModel` optional in custom e-mail RegExp example,False
e47957248f90e4d3a2c3a16866b2aa1be6327bc6,2016-02-17 02:13:02,Alexander,"docs(guide/component): use `fieldType` property in component's template

Closes #14059",False
019900d7c2eecd7feea57a383f7f457ec60de561,2016-02-17 01:19:45,srijan,"docs(guide/scope): fix typo in image

Closes #13724",False
88bb5518eb8b860e961e17d71f9ff638227854c8,2016-02-17 01:07:58,Georgios Kalpakas,"fix(ngMock): attach `$injector` to `$rootElement`

Fixes #14022

Closes #14034",False
3940edced444c0747c7633771fc8f21d3d04e1b3,2016-02-16 21:31:13,Martin Staffa,"test(*): ensure console log doesn't break the app in IE9

When Angular is loaded more than once (by including the script multiple times),
a warning is logged in the console. IE9 only makes the console available when
the dev tools are open, so before this fix, the browser would throw an error

Note that Protractor doesn't actually support IE9.",False
7c60e19eb895e2a168b26a0032368a2e0f93b492,2016-02-16 21:30:55,lucienbertin,"fix(*): only call console.log when window.console exists

`window.console` only exists in IE 8 & 9 when the devtools are open

Fixes #14006
Closes #14007
Closes #14047",False
632fa30fe31b4cd36b94df3e9db6ed634a8a9969,2016-02-16 18:16:43,alex-teren,"docs(README.md): fix casing

Closes #14050",False
bf2a76d32fb50a2b0f5e124b14b86c772446201e,2016-02-16 17:59:43,Sean Murphy,"fix($routeProvider): properly handle optional eager path named groups

Closes #14011",False
9421674dad0e5aa9703449174490f1b985858460,2016-02-15 00:47:42,Lucas Mirelmann,"fix(dateFilter): Correctly format BC years

- Correctly format BC years
- Fix a function name collition
- Allow TzDate to use BC years",False
ece8266b0113b81817b09bc3855e49dd417a3128,2016-02-13 23:44:42,Remy Sharp,"docs(error/$location:nobase): fix `<base>` not showing up in heading

Closes #14016",False
b8b5b885f7cd50fd058ea11bd356ccd4e4c4adae,2016-02-12 17:00:01,Wesley Cho,"docs($compile): change component example to use controllerAs

Closes #14010",False
e4e30961ca1a271452ac4f2acd49b07ad8df3cf9,2016-02-12 16:42:33,Georgios Kalpakas,"feat(dateFilter): add support for STANDALONEMONTH in format (`LLLL`)

Fixes #13999

Closes #14013",False
1061c56fe159691112bc81ca34573ea9681a7255,2016-02-12 15:54:41,Lucas Mirelmann,"fix($compile): allow directives to have decorators

Allow directives to have decorators that modify the directive `scope` property

Close: #10149",False
7617c08da69a0d447507dadd0ef41d2415462ca7,2016-02-12 15:53:58,Lucas Mirelmann,"fix($compile): do not add <span> elements to root text nodes

BREAKING CHANGE:

Text nodes at the root of transcluded content will no longer be wrapped into <span>
elements. If there is a need for this <span> element to be present, then this should
be added to the content to be transcluded.

Before:

```html
<div directive-that-will-transclude-the-content>
  I expect this content to e wrapped
</div>
```

After:

```html
<div directive-that-will-transclude-the-content>
  <span>I expect this content to e wrapped</span>
</div>
```",False
a021a376fc8a4676dfded794cf3395a5668e31ab,2016-02-12 15:50:02,Lucas Mirelmann,style($compile): Style fixes,False
a7d69c9d42723269d34ce3cb1edc4e52af450daf,2016-02-11 19:55:57,Martin Staffa,"docs: allow plnkr links to open in new window

Closes #8328
Closes #14008",False
f0f6da304c11d0bafcdb962f8ba69cfb719bc243,2016-02-10 16:02:10,Gabriel Monteagudo,"fix($resource): fix parse errors on older Android WebViews

Error is caused by reserved keyword 'finally'.

Closes #13989",False
9425015a6983b62bdf8b176d3e2a8dba049fecac,2016-02-10 15:28:03,Lee Adcock,"fix(input[date]): support years with more than 4 digits

Previously, the date-related regular expressions only matched years with no more than 4 digits.
This commit adds support for years with more than 4 digits. It also resolves an ambiguity in
`ISO_DATE_REGEXP` by matching the whole string (when it previosuly allowed extra characters around
the date string).

Fixes #13735
Closes #13905",False
7b592f9edda2784ca21bee9de804a8cec7bba72e,2016-02-10 14:33:05,Martin Sikora,"docs(error/$compile:tplrt): fix typo

Closes #13992",False
c966876e571133184db0c0fdce4d9501589a7322,2016-02-10 01:58:58,Daniel Herman,"perf(ngAnimate): avoid jqLite/jQuery for upward DOM traversal

The `parentNode` property is well supported between all browsers.  Since
no other functionality was required here other than traversing upwards
using `.parent()`, we can use the DOM API directly.

Closes: #13879",False
bfce0675e267089b4b459077cf749a1625074af0,2016-02-10 01:58:42,Daniel Herman,"perf(ngAnimate): avoid $.fn.data overhead with jQuery

Unlike jqLite, jquery scrapes the attributes of an element looking for
data- keys that match the requested property.  When many elements are
being animated due to something like `ngRepeat` unrolling within one
digest cycle, the amount of time spent in that one function quickly adds
up.

By changing our API to use the lower level data API, we can cut the time
spent in this function by half when jQuery is loaded.",False
2e3c6404f27bf41b8874078d751ec1987992c0e5,2016-02-10 01:58:28,Daniel Herman,"perf(ngRepeat): avoid duplicate jqLite wrappers

Internally, `$animate` already wraps elements passed through with
`jqLite`, so we can avoid needless duplication here.",False
b04871b43f81cc90eb1d2d148678ce989791b600,2016-02-09 16:11:54,Martin Staffa,"docs(*): clarify limitations of app bootstrapping

- Note that bootstrapping on elements with transclusion directives
is dangerous and not recommended.

- group info on limitations, and add them to the guide

Closes #11421
Closes #13572
Closes #12583",False
4ba8e3463adefe22e8779e1813bd75681773cbc4,2016-02-09 16:06:36,Martin Staffa,"docs(ngRepeat): clarify limitations of object iteration

Related #6266",False
9881e77ccbd1dde00c51778f4f642513ed7eb7f3,2016-02-09 05:39:41,Peter Bacon Darwin,"refactor($componentController): don't return an object from the provider constructor function

Closes #13969
Closes #13977",False
17ba2a6e7c1c30d867f896564373c6c9e67b5429,2016-02-09 04:20:28,Martin Staffa,"docs(guide/Unit Testing): add info about promises

Related #1915",False
3bfeda3b2b5c1826d3d87fd1d3a3298ce582c3ac,2016-02-09 02:55:23,Georgios Kalpakas,"docs(guide/migration): document a BC to `ngAria` (d06431e)

Closes #13949",False
4fed66da6c8f1d6d1623cdd21280bfcc9a4b9acc,2016-02-08 21:26:36,Martin Staffa,"docs(guide/animation): add info on various topics

- how to enable / disable animations

Closes #8812

- how to handle conflicts with existing animations

Closes #8033
Closes #11820

- what happens on boostrap / how to enable animations on bootstrap",False
7de7059f95fb9848cdd353aaea856f4b1978b3ac,2016-02-08 21:26:36,Martin Staffa,"docs: clean up formatting of animation events

Closes #12670
Closes #10742",False
cff232a8a2b34922ffc35908fa0d36bfa92582ef,2016-02-08 15:42:06,Aashish Nagpal,"docs(README.md): add purpose section

Add a new purpose section to enable newcomers (technical and non-technical)
better understand the purpose of AngularJS

Close #13963",False
614ecb7aa65c6638e166e46f406ddd65799daf70,2016-02-08 15:35:47,John Mercer,"docs(guide): add new book

Closes #13954",False
77b1407e0d5a747625f5d1782a903214c6acde32,2016-02-06 19:42:04,Prayag Verma,"docs(guide/migration): fix typo (a --> an)

Closes #13959",False
c4e47e491f39f646b56a4e5a0e9f7381131935bc,2016-02-05 20:42:00,Martin Staffa,"docs(error/iscp): include one-way bindings, mark spaces as allowed",False
87ac4443b672815d63ba6896d5826f75c50e1d97,2016-02-05 20:42:00,Martin Staffa,docs(guide/components): update to use one-way binding,False
75f23f0b87a672a83474e5cbc2340ab7247228d5,2016-02-05 20:35:07,Martin Staffa,"style(filters): squelch a closure compiler warning

Related #13932",False
39eecd136f5782e85a92f611cf3e73ac6b97caf2,2016-02-05 15:34:17,Peter Bacon Darwin,docs(CHANGELOG): add notes for 1.5.0 release,False
260cfe6dc9f7e04d0f36cb4fef0e368e12bad23a,2016-02-04 14:05:48,kuroky360,"refactor(toJson): use the `isUndefined()` function

Closes #13923",False
455af41a19b807c1771fc878d88056b33985af25,2016-02-04 13:58:47,Georgios Kalpakas,"docs(guide/migration): mention isolate scope one-way bindings

Closes #13940",False
f3c8aa279028270f1952d066c0f9a19b9c13dc11,2016-02-04 04:35:08,campersau,"refactor(ngAria): remove unused dependency from `ngModel` directive

Mentioned in https://github.com/angular/angular.js/commit/d06431e5309bb0125588877451dc79b935808134#commitcomment-15871053.

Closes #13942",False
e2312e3efd9728f2f941f55f049e07bce8c45fe9,2016-02-04 03:42:58,Georgios Kalpakas,docs(ngRequired): fix link,False
a460ce4665b187db7f8dc7df6a0c3caea999c1e2,2016-02-04 03:24:43,Georgios Kalpakas,"refactor(ngAria): remove redundant '?' in DDO's `require`

It also fixes some dangling links in Accessibility guide.",False
d06431e5309bb0125588877451dc79b935808134,2016-02-04 02:48:49,Marcy Sutton,"fix(ngAria): Apply ARIA attrs correctly

BREAKING CHANGE: Where appropriate, ngAria now applies ARIA to custom controls only, not native inputs. Because of this, support for `aria-multiline` on textareas has been removed.

New support added for ngValue, ngChecked, and ngRequired, along with updated documentation.

Closes #13078
Closes #11374
Closes #11830

Closes #13483",False
34ec0d9629520eebb4ef27499941c28004b9aada,2016-02-03 23:53:11,Georgios Kalpakas,"docs(guide/migration): add TOC and fix heading levels

Closes #13938",False
4ac23c0ac59c269d65b7f78efec75d060121bd18,2016-02-03 19:31:21,Martin Staffa,"feat($compile): add one-way binding to the isolate scope definition

This change allows the developer to bind an isolate scope / controller property
to an expression, using a `<` binding, in such a way that if the value of the
expression changes, the scope/controller property is updated but not the
converse.

The binding is implemented as a single simple watch, which can also provide
performance benefits over two way bindings.

Closes #13928
Closes #13854
Closes #12835
Closes #13900",False
507cf31ff9eb31f7f5f5c8e86c924bae14e9d922,2016-02-03 18:29:10,Georgii Dolzhykov,"docs($compile): refine explanation of isolate scope `=`-binding

The current version of this paragraph is in many ways inaccurate and confusing.

Closes #13921",False
91414918d7d55a89cbf3c68b2f7d1d077816fabc,2016-02-03 15:47:31,Georgios Kalpakas,"docs(guide/accessibility): fix links

Closes #13936",False
52c21fe51d17a3feb270f4cf6c12c65ada743cfc,2016-02-03 15:41:50,Georgios Kalpakas,"docs(CHANGELOG.md): more explicitly mention that the `usemap` posed security risks

(Related to https://github.com/angular/angular.js/pull/13826#issuecomment-178868005.)",False
2f0a50b526c5d0263879d3e845866e1af6fd9791,2016-02-03 02:44:14,Georgios Kalpakas,"fix($route): allow preventing a route reload

Fixes #9824
Closes #13894",False
4a80a2e8bcb249e6f3e20dc5d24e506c15ea5a29,2016-02-03 01:04:47,Georgios Kalpakas,"docs(guide/migration): update with changes from `v1.5.0-rc.2`

Closes #13919",False
446fac84d9fd24b7a0a6ef313097145fd09a0e05,2016-02-02 18:01:36,Georgios Kalpakas,"docs(CHANGELOG.md): document 234053f as a BC

Closes #13927",False
43f72066e107445204aee074d7b4f184e9c05d9e,2016-02-02 17:21:53,thorn0,"refactor(injector): remove unneeded JSHint directives

Closes #13922",False
a909ed1a5ce2ba4594c63da12034632d5319f690,2016-02-02 01:45:49,Georgios Kalpakas,docs(CHANGELOG.md): fix function name ($ngOnInit --> $onInit),False
1c6edd416b4baad0c8b01148f429eb78e0ad7eaa,2016-02-02 01:35:34,Lucas Mirelmann,"fix($rootScope): Set no context when calling helper functions for $watch

When calling a $watch getter or listener, do not expose the inner workings with `this`.

Closes: #13909",False
8bda5ec7350705fe6e80549321105536546b3372,2016-02-01 19:42:19,Georgios Kalpakas,"docs(guide/directive): minor fixes/improvements

Closes #13908",False
23395ce07d6c683b9eb51517b9b1dcaa91d63b70,2016-01-31 16:51:33,Wojciech Krzystek,"docs($http): reword the XSRF attack overview

Previous version emphasised ""gaining user's private data"".
While this perfectly describes JSON vulnerability (which is based on XSRF),
data theft suits XSS more.
Pure XSRF is more about performing requests that have side effects.

Closes #13901",False
c81c9e7cf4878f9a4ea09b3c9025bcb94dc34ac7,2016-01-31 14:15:51,Prayag Verma,"docs(misc/downloading): fix typo (it --> in)

Closes #13899",False
344b4bcb9578d163f8483ac7ec158d19e64e3a45,2016-01-31 14:07:36,Georgii Dolzhykov,"docs(TRIAGING.md): fix a broken link

Closes #13904",False
34ba294f76579a1b125951d35480e3bd5532e1ed,2016-01-31 14:02:10,Smith,"docs(error/$rootScope:inprog): fix typos (""a $apply"" --> ""an $apply"")

Closes #13896",False
50ecc370b9c1b28518171aea0a6555eb4552b513,2016-01-31 13:54:27,Prayag Verma,"docs(guide/component): fix typo (defintion --> definition)

Closes #13898",False
622c42169699ec07fc6daaa19fe6d224e5d2f70e,2016-01-30 03:35:49,Georgios Kalpakas,"fix(dateFilter, input): fix Date parsing in IE/Edge when timezone offset contains `:`

When `Date.parse`-ing a date string, IE and Edge don't recognize the timezone offset in the format
`+HH:mm` (but only without the `:`). According to [the spec][1], the timezone offset should
contain `:`. The [ISO 8601 Standard][2] allows both forms (with and without `:`).
Although the `Date` implementation in JavaScript does not 100% follow the ISO 8601 Standard (it's
just _based on it_), all other browsers seem to recognize both forms as well.

[1]: http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15
[2]: https://en.wikipedia.org/wiki/ISO_8601#Time_offsets_from_UTC

Fixes #13880

Closes #13887",False
db1180f3b36b0c6c73d1fc1a71611389d7742bf5,2016-01-29 21:18:18,Dan Ryan,"docs(guide/component): fix fn parameter in example

The wrong field name was being passed into the `$ctrl.update` call in `heroDetail.html` resulting
in the wrong behavior (`name` was being updated instead of `location`)

Closes #13890",False
ca5b27bd0b5243a25730be672c35dfed8ca1d28d,2016-01-29 18:04:57,Georgios Kalpakas,"fix(select): handle corner case of adding options via a custom directive

Under specific circumstances (e.g. adding options via a directive with `replace: true` and a
structural directive in its template), an error occurred when trying to call `hasAttribute()` on a
comment node (which doesn't support that method).
This commit fixes it by filtering out comment nodes in the `addOption()` method.

Fixes #13874
Closes #13878",False
3d158f629b9b0d6afb19679ede76bc07e97e51a1,2016-01-29 01:44:53,Martin Staffa,docs(ngAnimateChildren) add docs,False
8aecf46ad2b3324dd504a8083a61d5bf18d870ed,2016-01-29 01:44:40,Martin Staffa,"fix(ngAnimateChildren): make it compatible with ngIf

Previously, ngAnimateChildren would set the data on the element
in an $observe listener, which means the data was available after one digest happend.
This is too late when the element is animated immediately after compilation, as happens with ngIf.
Now the data is also set right in the linking function.

Fixes #13865
Closes #13876",False
20726415371000b75fccd16d9be2e81b5b1a809d,2016-01-29 00:58:03,Martin Staffa,"docs(guide/component): add the component guide

- introduce components
- component types are based on Angular2 docs
- conceptually, we promote parent -> child data flow and clear inputs and outputs
- the info about multi-transclusion / requiring controllers, and components as route templates
has been moved from the component docs to the guide",False
63154c3d1a076dd5c32eb1dcad16da08b85be996,2016-01-28 22:48:20,Michael,"docs($compile): minor typo/style correction

Closes #13864",False
37cb9ad43619e2b14055b3105a954f4474cd933c,2016-01-28 20:03:39,Lucas Mirelmann,"fix($parse): Copy `inputs` for expressions with expensive checks

Closes: #13871",False
5a3504abdce38b9ebb01b1f5a6e45e675ae4488c,2016-01-28 15:21:01,Peter Bacon Darwin,docs(CHANGELOG): add changes for 1.5.0-rc.2,False
0dfc1dfebf26af7f951f301c4e3848ac46f05d7f,2016-01-28 00:53:02,Martin Staffa,"fix(ngTouch): deprecate ngClick and disable it by default

This commit deprecates the ngClick directive from the ngTouch module.
Additionally, it disables it by default. It can be enabled in the new $touchProvider with
the $touchProvider.ngClickOverrideEnabled() method.

The directive was conceived to remove the 300ms delay
for click events on mobile browsers, by sending a synthetic click event on touchstart.
It also tried to make sure that the original click event that the browser sends after 300ms
was ""busted"", so that no redundant ""ghost-clicks"" appear.

There are various reasons why the directive is being deprecated.

- ""This is an ugly, terrible hack!"" (says so in the source)
- It is plagued by various bugs that are hard to fix / test for all platforms (see below)
- Simply including ngTouch activates the ngClick override, which means even if you simply want
to use ngSwipe, you may break parts of your app
- There exist alternatives for removing the 300ms delay, that can be used very well with Angular:
[FastClick](https://github.com/ftlabs/fastclick), [Tappy!](https://github.com/filamentgroup/tappy/)
(There's also hammer.js for touch events / gestures)
- The 300ms delay itself is on the way out - Chrome and Firefox for Android remove the 300ms delay
when the usual `<meta name=""viewport"" content=""width=device-width"">` is set. In IE, the
`touch-action` css property can be set to `none` or `manipulation` to remove the delay. Finally,
since iOs 8, Safari doesn't delay ""slow"" taps anymore. There are some caveats though, which can be
found in this excellent article on which this summary is based: http://developer.telerik.com/featured/300-ms-click-delay-ios-8/

Note that this change does not affect the `ngSwipe` directive.

Issues with interactive elements (input, a etc.) when parent element has ngClick:
Closes #4030
Closes #5307
Closes #6001
Closes #6432
Closes #7231
Closes #11358
Closes #12082
Closes #12153
Closes #12392
Closes #12545
Closes #12867
Closes #13213
Closes #13558

Other issues:
- incorrect event order
- incorrect event propagation
- ghost-clicks / failing clickbusting with corner cases
- browser specific bugs
- et al.

Closes #3296
Closes #3347
Closes #3447
Closes #3999
Closes #4428
Closes #6251
Closes #6330
Closes #7134
Closes #7935
Closes #9724
Closes #9744
Closes #9872
Closes #10211
Closes #10366
Closes #10918
Closes #11197
Closes #11261
Closes #11342
Closes #11577
Closes #12150
Closes #12317
Closes #12455
Closes #12734
Closes #13122
Closes #13272
Closes #13447

BREAKING CHANGE:

The `ngClick` override directive from the `ngTouch` module is **deprecated and disabled by default**.
This means that on touch-based devices, users might now experience a 300ms delay before a click event is fired.

If you rely on this directive, you can still enable it with the `$touchProvider.ngClickOverrideEnabled()`method:

```js
angular.module('myApp').config(function($touchProvider) {
  $touchProvider.ngClickOverrideEnabled(true);
});
```

For migration, we recommend using [FastClick](https://github.com/ftlabs/fastclick).
Also note that modern browsers remove the 300ms delay under some circumstances:
- Chrome and Firefox for Android remove the 300ms delay when the well-known `<meta name=""viewport"" content=""width=device-width"">` is set
- Internet Explorer removes the delay when  `touch-action` css property is set to `none` or `manipulation`
- Since iOs 8, Safari removes the delay on so-called ""slow taps""

See this [article by Telerik](http://developer.telerik.com/featured/300-ms-click-delay-ios-8/) for more info on the topic.
Note that this change does not affect the `ngSwipe` directive.",False
e9c406b2464614c9784f7324d8910180c81c38a7,2016-01-27 23:57:34,Martin Staffa,"fix($animateCss): cancel fallback timeout when animation ends normally

Previously, css animations would not cancel the timeout when the
animation ends normally (calling end explicitly / transitionEnd event).
This meant that the timeout callback fn was always called after 150% of
the animation time was over. Since the animation was already closed at this
point, it would not do any work twice, but simply remove the timer data
from the element.
This commit changes the behavior to cancel the timeout and remove the data
when it is found during animation closing.

Closes #13787",False
79b6d557922bfe70863b5012100d02f33b940bed,2016-01-27 23:17:33,Matias Niemelä,"chore(travis): add an integration hook for the angular hubot daemon

Closes #13777",False
8f94b5b277c827aac100bedeeaf18147c75c20f9,2016-01-27 22:16:08,Georgios Kalpakas,"docs(CHANGELOG): remove duplicates and fix typos

Removed some entries from `v1.5.0-beta.2` which are also included in `v1.5.0-beta.1`
and fixed some typos.

Closes #13858",False
b11120be0ad2fe27e85556ad89c3201c04e217cb,2016-01-27 21:00:46,Isaac,"docs($cookiesProvider): clarify parameters description

Fixed a grammatical mistake (""equals to""), made hyphenation consistent, fixed punctuation and
clarified the sentence structure.

Closes #13853",False
bfba95ce46fd3e1605c5ee4ade1f1b1ca351cb4b,2016-01-27 21:00:46,Martin Staffa,docs($resource): fix an unmatched link,False
310f80e78e925949f1177c55d5bcc691ca3f46a9,2016-01-27 20:30:47,Thomas Moffett,"docs(guide): change concepts.graffle/data.plist to fix 'World' spelling

The change is only to concepts.graffle/data.plist to fix 'World' spelling.
Another PR, #13724, already fixed the actual image.

Closes #13704
Closes #13734",False
acfda1022d23ecaea34bbc8931588a0715b3ab03,2016-01-27 20:00:50,Lucas Mirelmann,"fix($parse): Preserve expensive checks when runnning $eval inside an expression

When running an expression with expensive checks, there is a call to `$eval` or `$evalAsync`
then that expression is also evaluated using expensive checks

Closes: #13850",False
04d4d93e5bcd7e0e19124d1fea466e75edd15528,2016-01-27 19:54:34,robw,"docs(ngModel): add section explaining that `ngModel` watches by reference

The new section explains that changing only a property on an object doesn't
trigger re-rendering.

Closes #13224
Closes #13518",False
8348365df9b9e2d4c9c8d5211e3424d4b9a29767,2016-01-26 23:46:49,Georgios Kalpakas,"fix($compile): properly denormalize templates when only one of the start/end symbols is different

Previously, if either of the start/end interpolation symbols remained unchanged (i.e. `{{` or `}}`),
then directive templates would not be denormalized properly. Changing only one of the start/end
symbols (but not both) is an uncommon but legitimate usecase.

Closes #13848",False
16bcdcb61d51381fc7292b410f37d4698c77e256,2016-01-26 23:39:54,Georgios Kalpakas,"docs(guide/migration): add notes for migrating from 1.4 to 1.5

Part of #13474 (includes changes up until `v1.5.0-rc.1`)
Closes #13808",False
adcfa74327072b2c2960167dcb77f3f0f039e368,2016-01-26 19:39:02,Leo Gallucci,"docs(guide/directives): improve Protractor test for bindings

This needs Protractor >= 1.3.0 to work.

Closes #9330",False
d641901be6887cdd93dc678eb514366eb759d21e,2016-01-26 17:29:28,Michal Raczkowski,"feat($resource): add support for timeout in cancellable actions

Old behavior: actions can be either cancellable or have a numeric timeout.
When having both defined, cancellable was ignored.
With this commit: it's possible for actions to have both cancellable:true
and numeric timeout defined.

Example usage:

```js
var Post = $resource('/posts/:id', {id: '@id'}, {
  get: {
    method: 'GET',
    cancellable: true,
    timeout: 10000
  }
});

var currentPost = Post.get({id: 1});
...
// the next request can cancel the previous one
currentPost.$cancelRequest();
currentPost = Post.get({id: 2});

// any of those requests will also timeout, if the response
// doesn't come within 10 seconds
```

Closes #13824",False
eae0a1121ffcc636d760463105dcdc548ea47390,2016-01-26 16:57:22,Peter Bacon Darwin,"chore(ngLocale): regenerate locales to include original `localeId`

Closes #13390",False
173c9063e777c6b666b35a50a160c918aeedd3e0,2016-01-26 16:57:14,Peter Bacon Darwin,style(i18n): improve indentation for readability,False
b461551b81572179f1821c65bab25f4a0dd02cd6,2016-01-26 16:57:14,Peter Bacon Darwin,chore(i18n): fix up i18n testing tools,False
63492a02614a33a50cc28f9fdd73bae731352dd5,2016-01-26 16:57:13,Peter Bacon Darwin,"feat($locale): Include original locale ID in $locale

Most systems use *IETF language tag* codes which are typically a combination
of the ISO 639 language code and ISO 3166-1 country code with an underscore
or hyphen delimiter. For example `en_US`, `en_AU`, etc.

Whilst the `$locale.id` comes close, the lowercase format makes it impossible
to transform to an IETF tag reliably. For example, it would be impossible
to deduce `en_Dsrt_US` from `en-dsrt-us`.

Closes #13390",False
adb0e1746b8ab8fc29163f11720d86ca0b81320d,2016-01-26 16:33:28,Robert Reiz,"docs(bower.json): add MIT license

Closes #13405",False
3be79cd6a1efbd31530af3a5de2473b65e5b1af0,2016-01-26 14:37:58,Zac Smith,"docs(tutorial): fix typo

Closes #13843",False
e4c6e017911957f0bd8118fa711e0288d54d8d00,2016-01-26 03:29:27,Martin Staffa,"docs($sceDelegateProvider): fix markdown errors

Closes #13360",False
fb76d960096a3631916e3215cd0ad38d6738d6a9,2016-01-26 03:22:44,Martin Staffa,docs(guide/interpolation): fix dangling link,False
f322c4f3c346e890040944b4cd2f22b3dd0b3ed6,2016-01-26 03:22:44,Martin Staffa,"docs(guide/directives): link to the scope property docs

Closes #12500",False
081f6ec7f2cb3c2b3effbff1eb3a664305a0a9a4,2016-01-25 22:37:20,Robin Glauser,"docs(error/modulerr): add additional debugging help

This simple tip can help to diagnose the error.

Closes #12958",False
9bb6a30417279ce606328619b34e0a420ba771c9,2016-01-25 22:22:25,Moorzee,"docs(tutorial/Tutorial): Java installation

Add step to ensure java is installed on development machine.

Closes #12938",False
97e97d1eb72a9e126af29eebb2d6b291626a5052,2016-01-25 22:04:16,marianoc84,"docs(guide/Modules): update style guide link

The linked blog post recommends John Papa's Guide.

Closes #12898",False
1ab4e44443716c33cd857dcb1098d20580dbb0cc,2016-01-25 20:24:15,Lucas Galfaso,"fix(dateFilter): follow the CLDR on pattern escape sequences

When there are two single quotes ""''"" (quotes for clarification) that are not
part of an escape sequence, then this sequence should be handled as one single
quote. See http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Format_Patterns
second and forth examples

Closes #12839",False
99eeec358c40ca9df3c5262ba84d547534c64b68,2016-01-25 20:22:29,Livvie Lin,"style(src): delete whitespace and use single quotes

This change edits syntax for code consistency.

It removes whitespace to match the style of the rest of the code,
and changes double quotes to single quotes to conform with
Google's JavaScript Style Guide.

Closes #12889",False
ce8a7525cc3b0f3a6a1ea90cad29c3dfae90ebeb,2016-01-25 20:10:24,Tobias Leugger - Vibes,"docs(error/unpr): add hint about using `ngStrictDi`

The unknown provider error often happens when code is minified and one
did not use the correct syntax that supports minification. It's
frustrating to have to hunt for a bug in minified code, so adding the
simple hint that `ngStrictDi` will tell you what is wrong in the original
code will save you quite some trouble.

Closes #12717",False
5df2e5ce29279532a3203702c6b799cf966082b8,2016-01-25 20:07:00,Martin Raifer,"docs(tutorial/step-7): add troubleshooting instructions

Show troubleshooting instructions as in step 11.

Closes #12715",False
ef03dfc4a4fc32c4a5145cec4db0f97087bfa6c1,2016-01-25 20:03:16,Alireza Mirian,"docs($injector): fix inaccuracy in $provide.service docs

Closes #12664
Closes #12665",False
4ff9c027b097feaf47b7b474d26d5d9a59bc8fef,2016-01-24 21:47:35,Wesley Cho,"docs(compile): improve nonassign error message

- Improve error message to mention attribute the expression errored on

Fixes #13827

Closes #13828",False
20b8ece444408a64ac69f7b5d45ddb3af0c418a0,2016-01-23 20:58:51,Matias Niemelä,"fix(ngAnimate): properly cancel-out previously running class-based animations

Prior to this fix the addition and removal of a CSS class via
ngAnimate would cause flicker effects because $animate was unable
to keep track of the CSS classes once they were applied to the
element. This fix ensures that ngAnimate always keeps a reference
to the classes in the currently running animation so that cancelling
works accordingly.

The commit also adds a test for a previously untested animation merge path.

Closes #10156
Closes #13822",False
6406e3b01d6e3ddc54c3c6ec83d4b2a3c6d4f1dc,2016-01-23 17:51:24,Qingyu Zhou,"docs(tutorial/step_12): change ""click"" to ""hover""

Should be ""hover"" not ""click"", since we trigger the change at ""mouseenter"", not ""click"".

Closes #13831",False
234053fc9ad90e0d05be7e8359c6af66be94c094,2016-01-23 01:46:31,Lucas Mirelmann,"fix(ngSanitize): Blacklist the attribute `usemap`

Given that the attribute `name` is blacklisted, the attribute `usemap` should be
blacklisted too.

Closes: ##13826",False
a277bcf0f72ae2db5d44a5eb78dce6aaa3e425ed,2016-01-23 01:22:38,Josh Duff,"refactor(equals): Cleanup `equals` function for readability

- Removes unnecessary nested if condition
- Simplify check when one argument is a regex

Closes: #13650",False
7985416d39f8850c08f218cd4c6f5a584090cc0b,2016-01-21 20:00:35,Peter Bacon Darwin,docs(CHANGELOG): fix animation grouping,False
dc3013e848889431fcff6be57ce828cb309b2077,2016-01-21 18:12:44,Peter Bacon Darwin,docs(CHANGELOG): add release notes for 1.4.9,False
0f2926db3893039dbe8c10be31eb9cc896794245,2016-01-21 01:34:50,Edgar Flores,"docs(guide/Interpolation): fix links

The links were not working, either `{` was missing or they were in the wrong location

Closes #13809",False
bd59335eba6fa2ca845daa7c90dd296cc7e6254d,2016-01-20 20:41:07,Lucas Galfaso,"test(input): test for #12106

Add a test that checks that an <input> value is not set when the value is equal
to the current value

Closes #12592",False
6aa111b33330ff2fa0c16d5533bca9ac0bd68ad2,2016-01-20 20:20:53,Adrian Roselli,"docs(tutorial/step-6): add alt attribute to images

See http://www.ssbbartgroup.com/blog/accessible-images-using-angular/

Closes #12569",False
42b5ce99fbc2eda279e4dd865c6751cb39cff90b,2016-01-20 15:11:15,Martin Staffa,"docs(guide/filter): clarify how to use filters in controllers

Closes #11915",False
2cb1989d12f7fa3acaafb8d762c91b156edd8603,2016-01-20 02:57:38,Matias Niemelä,"chore($AnimateRunner): examine the document more carefully

Some internal tests were failing because the `$document[0]` value
was null. This fix ensures that the if statement surrounding that
is more careful.",False
1137d91abddcf731a0b237ddc6e69b42d07f247f,2016-01-20 00:39:29,Martin Staffa,"docs(ngRepeat): point out animate example, remove ng-init

Closes #9047",False
288e4e33c3f743baa12e50b7e61551076176ddf9,2016-01-20 00:39:29,Maxime Lasserre,"docs($animate): make naming consistent

In the description of the example, you use `element` to refer to the container parameter and
`listenerFn` to refer to the callback parameter.

Closes #12716",False
d98c5f03a4cee88a3f0a383c217e3b2f84bbaa25,2016-01-19 23:55:36,Daniel Herman,"chore($compile): remove an unused dependency

Fixes #13791

Closes #13801",False
8d20b04f1c1bf72ebde55115b7fe78fbe2738789,2016-01-19 23:37:25,Peter Bacon Darwin,docs($compile): fix typo,False
56c3666fe50955aa7d1c1b6159626f1c1cb34637,2016-01-19 23:37:24,Peter Bacon Darwin,"feat($compile): allow required controllers to be bound to the directive controller

If directives are required through an object hash, rather than a string or array,
the required directives' controllers are bound to the current directive's controller
in much the same way as the properties are bound to using `bindToController`.

This only happens if `bindToController` is truthy.

The binding is done after the controller has been constructed and all the bindings
are guaranteed to be complete by the time the controller's `$onInit` method
is called.

This change makes it much simpler to access require controllers without the
need for manually wiring them up in link functions. In particular this
enables support for `require` in directives defined using `mod.component()`

Closes #6040
Closes #5893
Closes #13763",False
cd21216ff7eb6d81fc9aa1d1ef994c3d8e046394,2016-01-19 23:36:50,Peter Bacon Darwin,"feat($compile): allow `require` to be an object

This provides an elegant alternative to the array form of the `require`
property but also helps to support binding of `require`d controllers
to directive controllers.

Closes #8401
Closes #13763",False
3ffdf380c522cbf15a4ce5a8b08d21d40d5f8859,2016-01-19 23:36:30,Peter Bacon Darwin,"feat($compile): call `$ngOnInit` on directive controllers after controller construction

This enables option three of https://github.com/angular/angular.js/issues/13510#issuecomment-164140194
by allowing the creator of directive controllers using ES6 classes to have a hook
that is called when the bindings are definitely available.

Moreover this will help solve the problem of accessing `require`d controllers
from controller instances without resorting to wiring up in a `link` function.
See https://github.com/angular/angular.js/issues/5893

Closes #13763",False
db5e0ffe124ac588f01ef0fe79efebfa72f5eec7,2016-01-19 22:05:37,Peter Bacon Darwin,"fix($compile): handle boolean attributes in `@` bindings

Closes #13767
Closes #13769",False
92e4801d88fbe9b7ef719fd3d0175d85420e1cc4,2016-01-19 21:54:53,Daniel Herman,"perf($compile): avoid needless overhead when wrapping text nodes

This commit positively affects performance in two main ways:

1,  When wrapping text nodes in the compile step, we do not need the overhead
of the `forEach` function versus a normal for loop since we do not make
use of the closure for anything.

2.  When actually wrapping the node, we can completely bypass jqLite which
avoids several function calls and the overhead of cloning the wrapper node
which we already know to be unique.

Tests in applications show about an 83% decrease in time spent in this
specific loop.",False
6a92e9111f8eddc9cebaa1ee01c8453c891f23bd,2016-01-19 21:42:11,thorn0,"docs(uppercase, lowercase): undocument these artifacts

Closes #11387
Closes #13779",False
ba6d37756e9553afa2ebdda18fb52d49c911e3aa,2016-01-19 19:35:45,Georgios Kalpakas,"docs(ngModel): rename `$asyncValidators` error to `nopromise` and add missing error page

Closes #13795",False
683bd92f56990bf1bfeabf619d997716909ebf6b,2016-01-19 17:44:04,Martin Staffa,"perf(ngAnimate): speed up areAnimationsAllowed check

This commit speeds up the code that checks if an element can
be animated, for the following two cases:

The checks will be sped up in cases where the animation
is disabled via $animate.enabled(element, false) on any parent element.

A minor speed-up is also included for cases where the $rootElement of the
app (the bootstrap element) is on the body or lower in the DOM tree.",False
7700e2df096cf50dfdf84841cab7e2d24d2eb96d,2016-01-19 17:44:04,Martin Staffa,"fix($animate): correctly handle `$animate.pin()` host elements

This commit fixes two bugs:
1) Previously, animate would assume that a found host element
was part of the $rootElement (while it's possible that it is also outside the root).

2) Previously, if a parent of the animated element was pinned to a host element, the
host would not be checked regarding animations enabled status etc.

Closes #13783",False
3fb809e412364e26beaeb8047d4ec83323dd24e4,2016-01-19 16:38:08,Martin Staffa,"docs($compile): correct transcludeControllers definition

Closes #13793",False
52ea4110d33b7de2845a698913682a03365aa074,2016-01-18 00:30:49,Matias Niemelä,"fix(ngAnimate): ensure that animate promises resolve when the document is hidden

Prior to this fix any promise/callback chained on a call to the $animate
methods would only flush if and when the browser page is visible. This
fix ensures that a timeout will be used instead when the document
is hidden.",False
a3a7afd3aa70d981b0210088df53fa2cf68d3a3d,2016-01-18 00:30:41,Matias Niemelä,"fix(ngAnimate): do not trigger animations if the document is hidden

Prior to this fix, ngAnimate would always trigger animations even if
the browser tab or browser window was not visible. This would cause
issues with class updates / DOM operations even if elements were not
using animations. The root cause is that browsers do not flush calls to
requestAnimationFrame when browser windows / tabs are not visible.

This fix disables animations if `document.hidden` is `true`.

Closes #12842
Closes #13776",False
20bc37fbc861ee102d72a3d825c905d1ecc170a2,2016-01-18 00:25:39,Martin Staffa,chore(benchmark): improve largetable layout,False
7761b6c3b024642515a9ab2d96690c3d289ee3c8,2016-01-17 23:56:23,Martin Staffa,"docs(CHANGELOG): add missing breaking changes for 1.5.0-rc.1, fix layout

- add missing component() breaking changes
- put component related feats/fixes under ""component""
- move features above fixes",False
b77e14beea02599e61c496d04a446cdfd69fb043,2016-01-16 02:01:08,Peter Bacon Darwin,docs(CHANGELOG): add missing breaking change to 1.5.0-rc.1,False
a1f461e429792161c4ad59d750538c4e4a749ee7,2016-01-15 22:05:19,Matias Niemelä,chore(CHANGELOG): update with changes for 1.5.0-rc.1,False
13587193a56b57c2f165666d9d5e62bfe4f9152a,2016-01-14 20:14:05,Georgios Kalpakas,"docs(CHANGELOG.md): add BC notice for b71d7c3f

Closes #13759",False
a1ff35850c213d4da5cb11f214c5c917ca0639cf,2016-01-14 18:10:18,Peter Bacon Darwin,"test($log): fix up to work with Safari 9

On Safari 9.0.2, you are not allowed to write to `sourceUrl` or `line`
on a native Error object.

This commit uses a custom error instead.",False
95b3e1ce6c8d2a729d98aad0477464964f100682,2016-01-13 19:29:01,Peter Bacon Darwin,"chore(doc-gen): filter out componentGroup doc types from search results

These doc types do not contain useful information from the point of view
of search results and are making the results less clear",False
b78b12976a952998216cd895862d388d6a2d56a4,2016-01-13 03:55:59,Martin Staffa,docs($animate): correct fn parameters for js animation,False
a31c082de6dab64394b9a4d19c1a16e37b946887,2016-01-13 03:33:58,Martin Staffa,"docs($animate): clarify info about from and to for animate()

Closes #11150",False
5afd54514d670d13783f51926d827c34223bb505,2016-01-12 23:32:52,dmitriz,"docs(CONTRIBUTING): add warning about forced push

Add warning about the possible consequences of a forced push

Closes #13747",False
72b96ef57a28743e2dfed523701cc2e88e3b473b,2016-01-12 18:59:54,David Rodenas Pico,"refact(ngMock.$componentController): use $injector instead of adding new code to angular.min.js

Closes #13742",False
90975db5f91dfe44fa5dc4542e92c68e0d425929,2016-01-12 18:18:08,Peter Bacon Darwin,"feat($compileProvider): allow `component()` helper to copy over custom annotations

Closes #13741",False
25bc53180248bf5e8a6467c55d913cfa38fc7a3b,2016-01-12 18:18:00,Peter Bacon Darwin,"fix($compileProvider): remove the ability to set the `restrict` option on `component()` helper

Closes #13741",False
4e1b36c21686ad0ca4930d1d81f77a7d9cc35851,2016-01-12 02:53:37,Georgios Kalpakas,"fix($controller): allow identifiers containing `$`

As discussed in https://github.com/angular/angular.js/issues/13664#issuecomment-170536024.

Closes #13736",False
d4fa3313088a03d15ccbf266583d6ecaa0d22241,2016-01-12 02:24:49,Matias Niemelä,"fix(ngAnimate): only copy over the animation options once

A bug in material has exposed that ngAnimate makes a copy of
the provided animation options twice. By making two copies,
the same DOM operations are performed during and at the end
of the animation. If the CSS classes being added/
removed contain existing transition code, then this will lead
to rendering issues.

Closes #13722
Closes #13578",False
a801df719ea8b5996676d4e7a88a26a5ece471e7,2016-01-12 02:24:49,Martin Staffa,fix(ngMock): ignore empty javascript animations in $animate.closeAndFlush(),False
cb74999b1721aab4589e48bd708d008c9f5a6b22,2016-01-11 19:20:53,Georgios Kalpakas,"test: fix failing tests on MS Edge

Includes the following fixes (per component):

* `$sniffer`: Properly determine the expected `vendorPrefix` for MS Edge
* `input`: MS Edge does not support dates with years with more than 4 digits.
      Trying to set the value of an `input[datetime-local]` to `9999-12-31T23.59.59.999` throws an
      error (probably related to converting the date to one with a year with more than 4 digits,
      due to timezone offset).
* `$sanitize`: Fix failing tests on MS Edge
* `$animateCss`: Although the detected `vendorPrefix` for MS Edge is ""ms"", it doesn't seem to
      recognize some vendor-prefixed CSS rules (e.g. `-ms-animation-*`). Other browsers (currently)
      recognize either vendor-prefixed rules only or both.
      Fixed by adding and retrieving styles using both prefixed and un-prefixed names.
* `$compile`: Skip failing `foreignObject` test on MS Edge.
      For unknown reasons, an `<svg>` element inside a `<foreignObject>` element on MS Edge has no
      size, causing the included `<circle>` element to also have no size and thus fails an
      assertion (relying on the element having a non-zero size).
      This seems to be an MS Edge issue; i.e. it is also reproducible without Angular.
      (Tested with MS Edge version 25.10586.0.0 on Windows 10.)

Closes #13686",False
2764536e8f8168d033209545a7b30e89dfd87e63,2016-01-11 19:19:51,Georgios Kalpakas,refct(privateMocks): remove unused argument from `createMockStyleSheet()`,False
8ccc0547a8838454300e2dc75bab7fafdf22d21f,2016-01-11 01:17:26,Peter Bacon Darwin,"docs(examples): add copyright and license info to each plunker file

Closes #13729",False
dd14e0c44d2963d217cd4eb28f1ad6e6a643d63f,2016-01-11 00:49:03,Peter Bacon Darwin,"feat(ngMock.$componentController): add helper to instantiate controllers for components

Closes #13683
Closes #13711",False
7e24590fa3788ac126837c8d9f1be08e1a3258fb,2016-01-10 21:25:40,mohamed amr,"test(ngList): add missing '>' to `textarea` closing tag

Fixes #13728
Closes #13727",False
8b6360338dca4bb7d8656d556bd7fb209e5aae73,2016-01-09 19:29:34,Matias Niemelä,"fix($animate): allow enabled children to animate on disabled parents

Prior to this fix if a parent container disabled animations for
itself then no children could be enabled explicity via
`$animate.enabled`. This patch allows for that to work.

Closes #13179
Closes #13695",False
d91cf167960d47ce38fec0d33cab6119268623f0,2016-01-08 20:07:25,Shahar Talmi,"feat(component): default controllerAs to be $ctrl

Closes #13664
Closes #13710",False
f31c5a3924629795cd9169e69b9e20efd4a9d927,2016-01-08 20:06:55,Shahar Talmi,"feat(component): disallow non-isolate scopes

Closes #13710",False
16ccac91d07e2e975a54efbf004ecf82d585d23e,2016-01-08 18:21:09,Peter Bacon Darwin,"test($compile): fix component helper test

The test was expecting to match an object containing a `transclude`
property set to `false` but now the property is `undefined`.",False
91b080e6e6a1962c470828eafffd0dcf7ff4ad53,2016-01-08 18:00:48,Peter Bacon Darwin,docs(tutorial/step-00): fix dangling link,False
feeb19787ca6e23e15578a4d1319f1c33853290c,2016-01-08 17:57:37,Martin Staffa,"refactor(loader): move component definition code to the `$compileProvider`

The `Module.component()` helper now delegates to `$compileProvider.component()`.

This has the following benefits:

- when using only the loader, we are not accessing out of scope variables / functions
- components can be registered via $compileProvider
- docs are a bit easier to find
- it is easier to keep the Batarang version of the loader up to date if there is minimal
  code in that file.

Closes #13692",False
98c2db7f9c2d078a408576e722407d518c7ee10a,2016-01-08 16:23:08,Georgios Kalpakas,"fix(linky): throw error if input is not a string

BREAKING CHANGE:

Before this change, the filter assumed that the input (if not undefined/null) was of type 'string'
and that certain methods (such as `.match()`) would be available on it. Passing a non-string value
would most likely result in a not-very-useful error being thrown (trying to call a method that does
not exist) or in unexpected behavior (if the input happened to have the assumed methods).

After this change, a proper (informative) error will be thrown. If you want to pass non-string
values through `linky`, you need to explicitly convert them to strings first.
Since input values could be initialized asynchronously, `undefined` or `null` will still be
returned unchanged (without throwing an error).

Closes #13547

Closes #13693",False
06aa52efffd436ab3c9f09ea2c6efae569589a11,2016-01-08 01:47:49,Peter Bacon Darwin,"chore(package): update karma to 0.13

This version of karma can sniff Microsoft Edge correctly.

Closes #13691",False
fabc6ab5b01dc687aa8385da067752ba34da6524,2016-01-08 01:23:16,Lucas Mirelmann,"fix($injector): workaround for MS Edge class detection

Fix for MS Edge class detection

Closes: #13697",False
93c7251f5f40bdbe050c74130d90331613d968a2,2016-01-08 01:13:22,Georgios Kalpakas,"fix(isArrayLike): recognize empty instances of an Array subclass

Fixes #13560
Closes #13708",False
e1def1b8fe543fde09abda076d66606027f7dbeb,2016-01-07 19:23:10,Matias Niemelä,"feat(ngMock): add support for `$animate.closeAndFlush()`

Use `$animate.closeAndFlush()` to close all running animations.

Closes #13005
Closes #13576
Closes #13707",False
e5cab951f4e4969b092295b7f3ca7ec1d17eb9a6,2016-01-07 18:33:50,Martin Staffa,"fix(ngAnimate): allow event listeners on document in IE

Fixes #13548
Closes #13696",False
f7eab8d8fe8cadecaee425f0db0c74e48619310c,2016-01-07 17:36:13,Martin Staffa,"fix(select): re-define ngModelCtrl.$render in the select postLink fn

Previously, the `$render` function was re-defined in the `select` directive's
`preLink` function. When a `select` element is compiled, every `option`
element inside it is linked and registered with the `selectCtrl`, which
calls `$render` to update the selected `option`. `$render` calls `selectCtrl.writeValue`,
which adds an unknown `option` in case no option is selected. In cases where
`optgroup` elements are followed by a line-break, adding the unknown `option`
confuses the html compiler and makes it call the link function of the following
`option` with a wrong element, which means this option is not correctly
registered.
Since manipulation of the DOM in the `preLink` function is wrong API usage,
the problem cannot be fixed in the compiler.

With this commit, the `$render` function is not re-defined until the `select` directive's
`postLink` function, at which point all `option` elements have been linked
already.

The commit also changes the `toEqualSelectWithOptions` matcher to
take selected options in groups into account.

Closes #13583

Closes #13583
Closes #13663",False
495d40d802d050326d1c375942a7ff21b13c12e8,2016-01-06 20:47:05,Martin Staffa,"docs($compile): add docs for bindToController with object hash

Closes #13228
Closes #13625
Closes #13658
Closes #13681",False
d28ae2126e0c9e24f534aff4f13c9a92c842e5f1,2016-01-06 17:23:37,Georgios Kalpakas,docs(validators): fix typos and make minor layout improvements,False
8955cfb6462f79a32caa641ffc002f1522f08220,2016-01-06 03:05:57,Lucas Mirelmann,"feat($compile): Allow ES6 classes as controllers with `bindToController: true`

Modify `$injector.invoke` so ES6 classes would be invoked using `new`

Closes: #13510
Closes: #13540
Closes: #13682",False
776972ed9c49a62f5ad7c6f207209bf0f0c900bb,2016-01-06 03:01:26,Martin Staffa,"fix(ngAnimate): allow removing classes that are added by a running animation

This allows follow-up animations to remove a class that is currently
being added.

Fixes #13339
Fixes #13380
Closes #13414
Closes #13472
Closes #13678",False
1358b3ca9bd7a05f4dd70dfe65b52fb2e0bb31e1,2016-01-05 20:16:14,Peter Bacon Darwin,chore(saucelabs): update to latest sauce version,False
e020b8993ec7b8e004c136ca40ea9bab02207dbf,2016-01-05 18:13:48,Matias Niemelä,"fix(ngAnimate): do not use event.timeStamp anymore for time tracking

Due to recent changes in Chrome, Firefox and Webkit use of the
event.timeStamp value will lead to unpredictable behaviour due to
precision changes. Therefore it's best to stick entirely to use
`Date.now()` when it comes to confirming the end of transition-
ending values. See #13494 for more info.

Applies to 1.2, 1.3, 1.4 and 1.5.

Closes #13494
Closes #13495",False
b2b896f949b79f1d8c558f462fabad1c04bf564e,2016-01-05 17:39:15,Andy Patterson,"test(booleanAttrsSpec): add unit test for IE11 URL parsing failure

IE11/10/Edge fail when setting a href to a URL containing a % that isn't a valid escape sequence

See #13388
Closes #13458",False
3c5827b6f5631f06f89d5e646671a9b2259636d4,2016-01-05 17:27:30,Konstantin Ulitin,"docs(loader): fix type in `@return` tag for `angular.module()`

Closes #13655",False
0e03644dadbbdab6f4acf80f80f9d236bcd56dc2,2016-01-05 03:50:47,Waitaya Krongapiradee,"docs(error/$rootScope/inprog): add missing ""$timeout""

Closes #13630",False
112024271bd22e7f5b101c1c19c752652ed245ae,2016-01-05 03:40:43,Kyle Pittman,"docs(tutorial/2): add e2e test missing filename

Add `__`test/e2e/scenarios.js`:__` to denote which file we should change
to add the behavioral tests.

Closes #13673",False
bca0a1f786c1879253475128ae0367d203804a63,2016-01-05 03:18:19,Peter Bacon Darwin,"revert: feat($compile): Allow ES6 classes as controllers with `bindToController: true`

This change caused IE9 to run out of memory.

This is reverted from commit b0248b7894649aa1e083698c66d01679fa66d1c1",False
959f2bbb2d12c23a74902433c6247290d8f2fb89,2016-01-05 01:31:45,Martin Staffa,"fix($animateCss): only (de)register listeners when events have been added

Previously, when an animation was closed because no animation styles
where found, it would call .off() with an empty string as the argument.

For both jquery/jqlite this is the same as calling .off() without any
argument, which deregisters all event listeners on an element.

Closes #13514",False
6a47c0d75d0c6f0bfb3b5492d1f05ec900387744,2016-01-04 21:54:51,Sébastien Arod,"fix(loader): use `false` as default value for `transclude` in component helper

The default value of for transclude in component helper is now `false`.

The change is motivated by the fact that using `transclude: true` when not necessary
made component unusable in conjunction with structural directives that also require
transclusion such as `ng-switch-when` and `ng-repeat`.

Closes #13566
Closes #13581

BREAKING CHANGE:
Angular 1.5.0.beta.2 introduced the `module.component` helper where `transclude` was true by default.
This changes the default for `transclude` to `false`. If you created components that expected
transclusion then you must change your code to specify `transclude: true`.",False
b0248b7894649aa1e083698c66d01679fa66d1c1,2016-01-03 18:46:52,Lucas Mirelmann,"feat($compile): Allow ES6 classes as controllers with `bindToController: true`

Modify `$injector.invoke` so ES6 classes would be invoked using `new`

Closes: #13510
Closes: #13540",False
6fd41e7f5900568acbc9a11d9c3125b6d3a1cf1e,2016-01-03 01:10:55,Ieuan Griffiths,"chore(*): Updated year in licence

Closes: #13661",False
